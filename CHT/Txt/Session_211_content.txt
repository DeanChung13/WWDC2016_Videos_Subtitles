WATCHOS快速操作技術
大家早上好
我叫Tom Witkin
Apple watchOS的工程師
今早我們將討論添加快速操作
進入Apple Watch應用
讓我們從這個問題開始
我們如何定義快速操作？
我很確定你們中的很多人爲iOS或Mac OS開發過應用
在那些平臺上我們一般測量
用戶花在你的應用上的時間
尺度是幾分鐘甚至幾小時
但是在watchOS中是另一種情況
用戶希望可以舉起他們的手腕
然後快速獲得特定信息或者執行特定操作
然後放下他們的手腕回到他們之前做的事
所以交互模型完全不同
這裏有些關於什麼是Apple Watch快速操作之例
比如說開始一個定時器
或者查看天氣
或者從你的購物清單裏刪除一項
我們認爲這些是一些操作類型的原型在Apple Watch上
在這背後有一些關鍵的哲學你們可能已經在這周聽說過
首先Apple Watch上的應用
他們要易於查看
也就是說只需要一瞥
你的用戶就應該能夠獲得他們想要的信息
應用要易於操作
也就是說用戶應該能夠作出快速
並且獲得足夠信息的決定
最後它們要可響應
你應該從不讓用戶等待
如果你有興趣瞭解更多
我強烈建議你觀看
今天下午的設計優秀Apple Watch體驗這一演講
或觀看watchOS 3新特性演講
現在我們對什麼是快速操作有了初步瞭解
但是Apple Watch上的快速操作是指多長時間？
我們認爲理想的操作時間
是2秒
2秒並不長
所以你們不得不仔細考慮你們的設計
以及開發你們的應用
但是我們認爲這是可以實現的
特別是有了這些新特性的幫助
我們在watchOS 3中加入的一個API
我們要從這開始
通過談論這些新的特性和API
之後我們要談論一些實用技術
你們可以在應用裏使用
來創建這一類快速操作
我要說的就這些我想把演講交給我的同事
來談論新特性和API
謝謝Tom
大家好 我是Miguel
我將帶你們快速瀏覽
我們在WatchKit裏引入的新API
使你們能實現快速操作
我將談論5類API
讓你們的應用易讀 易操作隨時響應
首先要讓你們可以訪問更多新的輸入種類
你們現在可以使用手勢
在你的應用中有手勢識別
我們要給你訪問
Digital Crown中的旋轉事件
我們還有3個其他方面
一是增強的表導航
對新的用戶通知框架的支持
以及集成SpriteKit和SceneKit
讓我們開始
我會給你們API的概覽
然後 Tom會回到臺上
向你們展示一些他如何結合這些API的例子
如果你在iOS中使用過手勢識別
那麼你基本上已經知道了幾乎所有需要知道的
關於watchOS的手勢識別
如果你還沒有手勢識別是對象
用來幫助你分析底層的觸摸事件
到可識別的手勢中
我們爲4個識別器編寫了支持
兩個離散的
SwipeGesture
和TapGesture
以及兩個連續的手勢識別器
PanGesture
和LongPress
你使用它們的方法
和你在WatchKit中進行的大部分開發相似
是storyboard中的interface builder
你把對象拖入你的界面中
如果你看看這個庫
你可以看到4個識別器實例
它們被拖入元素中
那些你想要附加手勢的元素
然後你在檢查器中設置interface builder
你要做的最後一件事是把行動拖入識別器中
到你的代碼的一個函數裏
這是一個函數將被調用
當手勢被系統識別時
如你所見一個參數是手勢識別器它自己
從中你可以知道位置
手勢在這個位置被識別
這個對象的邊界
以及手勢的狀態
一些關於手勢狀態的事
手勢在被識別前從可能狀態開始
可能會轉變成已識別或失敗狀態
當你處理離散手勢時
你不需要過多考慮狀態
你只需要知道當手勢被識別時
你的行動方法被調用
這和連續手勢有一點不同
它們也從可能狀態開始
但就像它們的名字所表明的
它們會在代碼裏經歷多次更新
所以要假設你的行動方法會被多次調用
隨着手勢的改變
給你一個機會更新用戶界面
一些watchOS中使用手勢的提示
我們推薦把它們附加到組元素上
而不是控制上你可以這樣做
但是你可能會和其他手勢衝突
那些已經在控制裏的手勢
並且記住你獲得一個更小的屏幕
在Watch應用中
那些組會是更大的界面元素
在你的應用中
你可以設定手勢間的依賴關係
但是對watchOS這隻可能
在查看器及interfacebuilder中
並且注意那些系統手勢
會優先於你定義的手勢
比如
如果你有一個元素允許滾動
並且你想要附加一個SwipeDown手勢
它不會被識別滾動會優先
ForceTouch和LongPress也是同樣的
讓我們繼續到第二個輸入元素
Digital Crown
這是一個Apple Watch獨有的元素
它允許用戶快速準確控制輸入
從watchOS 2開始訪問Digital Crown
通過WKInterfacePicker對象
要使用它你要提供一個選取項目列表
並且設置樣式
WatchKit會爲你繪製這些元素
這是列表樣式
你有堆疊樣式
圖片序列樣式
但是對這個元素
WatchKit幫助你處理很多事情
我們繪製這個元素
我們處理錶冠事件的解釋
我們當一個選擇被做出時調用你的行動
在watchOS 3中
我們允許你直接訪問旋轉事件
所以你可以編寫你自己的UI元素
並且用旋轉數值來驅動它
這能過兩個新對象實現
通過我們要介紹的新類
WKCrownSequencer它使你能訪問旋轉事件
對不起每秒的旋轉數
和新的委託協議WKCrownDelegate
在旋轉差量上有回調函數
所以你會得到2種值
每秒的旋轉數和旋轉差量
你怎麼處理它們或者你怎麼訪問它們?
如果你對每秒旋轉數感興趣
訪問crownSequencer屬性
現在出現在所有界面控制器類中
你查詢它的每秒旋轉數屬性
這可能是你將會用到的東西
當你想知道錶冠的旋轉速度
可能是基於物理的動畫 遊戲類似這些的東西
旋轉差量和你通信
通過委託協議
這使你能夠知道錶冠的旋轉次數
你會在crownDidRotate方法中獲得回調
rotationalDelta是一個參數
你在這個方法中需要做的
是維護一個累加器變量
你把我們傳給你的差量加到這個累加器中
你要用的數學是一整圈旋轉
相當於累積的差量是1
另一個例子是如果你只想要偵測到旋轉一半
你最多積累差量到0.5
所以你還是累加我們給你的差量
當它們超過閾值時
你知道一次旋轉發生了
這取決於你來斷定
如何計算這些旋轉
根據你想要顯示的內容的靈敏度
當我們向你發送數值時請注意符號
可以是正或負
當用戶在滾動
想讓內容上移
我們發送正的值
當他們滾動想讓內容下移
我們發送負的值
這些值方向無關
所以你不需要考慮順時針逆時針代表什麼
如果用戶改變錶冠的方向
我們仍然會給你正或負值
爲上和下
所以你不需要考慮那些
最後有一個錶冠焦點的概念
焦點可以被其他界面元素獲取
比如一個選擇器 一個滑動器任何可滾動的元素
這需要你來決定
什麼時候界面元素需要取得錶冠的焦點
這是一個很好的使用新手勢的地方
而且
一旦你決定你的元素需要重新獲得焦點
請調用函數focus
並且不要忘了在初始化時調用
當你的界面控制器第一次出現
讓我們把輸入元素放一邊說說別的
關於我們將引入的垂直填充
用戶瀏覽表格的典型方式
是選擇一行
在另一個控制器中查看這一行的詳情
他們需要返回主表
他們需要選擇另一行才能查看詳情
在watchOS 3中我們有垂直填充的概念
所以在你的表格中啓用它時
一旦你的用戶第一次進入詳情
他們可以滑動手指或使用錶冠
上和下來查看隨後的詳情
他們不需要回到主表中
使你的應用看起來更有響應性
你怎麼進入這種模式?
這很簡單
你只需要點選 ItemPagination複選框
在你的表查看器中
但是你還需要確定你的表格使用segues API
在這裏你告訴我們你想用什麼上下文初始化控制器
然後用指定的上下文來初始化它
你可能已經在這樣做
所以這個API並沒有改變很多
只有一些改變
有一個方法允許你用代碼進入連續模式
它在你啓動應用的時候很有用
通過點擊一個complication或通知
並且你想直接進入一個特定視圖
在連續模式下
你要知道的第二件事是
WatchKit正試着變聰明並幫助你
提升應用速度
所以我們爲控制器進行預熱
預測用戶會向上或下滾動
所以控制器的一些生命週期方法
會在元素出現在屏幕前被調用
我不會談論太多細節
但是我們有一整個新的場次爲了性能的架構
會給你詳細的例子
關於所有的生命週期方法
現在讓我們來談談通知
他們是最快的操作
我們最初發布Apple Watch產品時就引入了
所以從用戶的角度你的用戶的角度
他們操作通知的方式
是簡單的感覺他們手臂的震動
他們擡起手腕
他們會自動看到這個短看界面
爲你的通知
如果他們保持手擡起
我們轉到這個通知的長看界面
他們對你通知的反應是
我會通過長看的例子
有着最多的細節
所以如果你已經有了優秀的交流
通過使用文字來表現你的通知的內容
他們不需要做任何事除了刪除這條通知
這是最短的快速操作
他們還可以點擊通知來啓動應用
或者
請記住通知可以有與它們相關聯的定製化行動
在這個情況下我會展示3個
接受 可能 拒絕按鈕
你最多可以有4個
當你把行動和通知關聯時
他們可以是前臺行動
就是說如果用戶點擊按鈕
你的應用會被激活
或者後臺行動
後臺活動在watchOS 2中永遠會被轉發給你的手機
在watchOS 3中對通知的一個大改變
是有一個全新的通知框架
請到介紹通知這個場次
去了解關於這個新框架的所有細節
但是對WatchKit開發者高級的重點有三個
你們現在有一套
跨平臺的類似的通知API
iOS tvOS和watchOS
我們現在可以在watch上調度通知
有後臺行動的通知
會被髮送到你的擴展
只要它們是在Watch上調度的
讓我們來看看API
新的UNUserNotificationCenter對象
你想要成爲這個對象的代表
當applicationDidFinishLaunching方法啓動你的應用時
你想要指出
你要採用notificationcenter 委託協議
這個協議的2個方法對你很有用
第1個是willPresent方法
它會被調用當你的應用已經被激活
在錶盤上
系統會給你一個機會告訴它
你想要系統怎麼處理那條通知
所以根據你的決定
在完成處理器這
系統將會做二件事中的一件
如果你要用警告選項
我們將會返回普通的長看界面
屬於這個通知並且它會覆蓋在你的應用之上
如果你不想做任何事
那表明系統不應該做任何事
因爲你的應用已經被激活
你需要處理顯示通知內容
在你的應用裏用某些方式
第二個方法是didReceive響應
當你的用戶在通知上採取行動
這是程序變成前臺運行時的回調函數
因爲用戶點擊了按鈕
這也是watchOS 3新的入口點
在這你可以得到後臺行動的回調
但是請記住這隻作用於後臺行動
是由Watch自己調度的後臺行動
現在是快速回顧的好時機
回顧在Apple Watch上調度和傳送通知
任何時候手機觸發一個通知
它被轉發給Watch如果手機屏幕關閉
而且你戴着Watch並且它被解鎖
永遠都會是這種行爲
但在watchOS 3中
你可以調度你自己的通知
在Apple Watch上
請記住它們只被發送到Watch上
如果你的應用需要
在手機上也有相應的通知
你需要和手機通訊
並且在那調度你的通知
現在你可能想知道如果我調度多個通知
如果它們都觸發了會發生什麼?
你可以刪除重複通知
只要你使用相同的識別符
在Watch上
和在iPhone上對這個通知
如果我們在這種情況
我們轉發通知給Watch
我們首先查看識別符
如果還存在通知有相同的識別符
當時在Watch上被觸發
這有更高的優先級並且被顯示
這樣用戶就不會同時看到兩條相同通知
最後讓我們談談SpriteKit以及SceneKit對象
SpriteKit和SceneKit提供豐富的API
它們允許你進行2D和3D繪製
它們允許你極大的擴展
你應用的視覺語言
我們有2個類爲了WatchKit
支持這些框架
針對SpriteKit的WKInterfaceSKScene
針對SceneKit的WKInterfaceSCNScene
你們還是進行所有的設置
在storyboard以及interface builder中
你現在可以看到這兩個類出現在庫中
你只需要把它們拖入你的控制器
它們就會提供繪製場景的畫布
然後設置就完成了
在查看器和interface builder中
一旦你準備好顯示場景
SpriteKit和SceneKit所有代碼保持原樣
你繼續使用API
我不會討論那些框架本身的API
但是一旦你的場景準備好顯示
和WatchKit集成來顯示場景很簡單
如果你在處理SpriteKit場景
你調用百分比函數
或者幾個函數取決於你是否有過渡
如果你有一個SceneKit場景
你只需要在對象裏設置場景的屬性
這就是集成需要做的所有事
我已經帶你們快速回顧了
你們擁有的新的工具包項目
來開發易於查看 易於操作
可響應的應用
現在Tom會回來給出一些特定例子
關於怎樣結合多個界面
讓你的應用有更好的響應性
謝謝
好的現在我們有了工具包
所以我們可以來看一些實用技術
要創建這些快速操作
我們要談談增加complications
和通知在你的應用中現在這些並不是新東西
但是我們要談談它們的一些獨特的新方式
之後我們會談談
在apps有一個簡單的瀏覽模型
最後我們會談談
給你的用戶放下手腕的信心
在他們在你的應用裏完成操作後
我們從易於操作的complications開始
在watchOS 2中對第三方應用引入了complications
在watchOS 3中它們扮演更重要的角色
現在有更多的錶盤有complications
有一些已有的錶盤有更多的complication插槽
現在你可以快速滑動
在你的錶盤間來查看所有complications
因此我們認爲每個應用
Apple Watch都該有complication
你還什麼看到所有原生apps都有complications
比如健身應用和心率應用
爲何有complications？
它們非常易讀它們永遠在手腕上
只要一眼就能看到很多重要信息
它們頻繁更新
若你的應用在當前錶盤上有complication
它每小時至少更新2次
你能確保新鮮
以及當前的數據用戶部是可以得到這些
你的應用會保留在內存裏
這很重要
因爲這使你應用的啓動很快
使你應用裏的很多操作
響應更快
而且complications提供一種方式使用戶更快進入應用
來完成特定功能
比如我們來看音樂complication
我點擊它我直接進入現在播放界面
如果我在播放音樂這對我最重要
我可以播放 暫停 跳過一首歌
這使整個操作快得多
因爲我直接進入我想要的界面
watchOS 3和iOS 10中新出現的是新畫廊
在iPhone的Apple Watch應用中
這很好因爲它允許你在Apple Watch中添加新錶盤
它還允許你定製錶盤
並在complications中選擇
第三方complications也會出現在這
這方便用戶發現你的complications
並把它直接加入錶盤
如果你想成爲這些complications的一部分
你創建一個complication捆綁
在開發者網站上有相關文檔
我強烈建議你們去看一下
所以Apple Watch上的complications機制很棒
使用戶進入你的應用
並提供一系列快速操作
如果你的當前應用沒有complication
或者你正在開發新應用請確保你包括它們
接下來我們來到易讀的通知
我們都知道通知
在Apple Watch上很優秀
一個主要原因是它們完全可定製
你可以把它們弄成任意你想要的樣子
而且它允許你顯示真正有價值的信息
在通知中
比如這是一個日曆通知
我可以看到事件的名稱時間 地點
而且
這經常可以去除一種必要性
啓動Watch應用的必要性
因爲重要的信息都內聯了
在通知中
在watchOS 3中所有通知都支持SpriteKit
和SceneKit以及內聯視頻
所以你能提供更多定製
在你的通知中
所以SpriteKit和SceneKit
我確定你們中的很多人認爲是爲了遊戲
而且他們確實利於遊戲
在週五會有一個場次關於Apple Watch的遊戲
但是在這裏我想要談談它們非遊戲的界面
爲什麼它們對非遊戲重要?
它們允許你完全定製內容
和佈局以及你界面的動畫
所以這允許你創建定製化的外觀
我們來看一個Photos應用的例子
你可以看到我獲得來自我的朋友Ivy的通知
她向我分享了一些照片
這不包括很多信息
我不知道這些照片是關於什麼
我需要閱讀文字來知道誰分享了它們
這樣我們可以獲得很多好處
從通知的可定製性中
所以現在有另一種方法在頂部使用SpriteKit
它包括共享給我的相片
它有我朋友Ivy的相片
只需要瞥一眼我就可以獲得大量信息
最終我可以獲得更多信息來做決定
我是否需要啓動Watch應用
或者拿出我的iPhone來查看關於相片的更多信息
我們來看看這是如何實現的
在頂部我們有新的WKInterfaceSKScene對象
在那之下我們有一個普通標籤
我想要指出這裏的關鍵之處是你混合搭配
SpriteKit和WatchKit界面元素
也許你正在使用動畫圖像
或者視圖動畫API
你可以用SpriteKit替換它們
或者你想要添加動畫到已有界面
你不需要爲了採用SpriteKit而重寫一切
所以它提供一種強大的方式來添加更豐富的內容
到你的界面中
而無需拋棄已有的一切重新開始這很酷
如果你的應用中有通知
請確保充分發揮它們提供的優勢
如果你只想要默認界面
考慮什麼信息是真正重要的
在通知裏
添加一個定製界面來反映它
接下來讓我們來到
你應用中的一個簡單瀏覽模型
早前我們談論了表格的新的垂直填充API
它對所有分層的應用都有利
但是在這裏我們想談談瀏覽
關於另外兩種技術
它們是手勢和Digital Crown
Digital Crown是Apple Watch特有的
它是一個很好的輸入機制
它允許你快速精確地操作界面
它用很多種使用方法
比如計時器應用
它可以快速通過不同的時長來選擇你想要的時間
或者在Photos應用中它可以
放大縮小相片
你如何在應用中使用 DigitalCrown可很有創造性
我們對你怎樣使用它感到興奮
在這我們想通過一些例子
通過一個跑步應用
使用手勢和Digital Crown
來簡化瀏覽
我們有一個跑步應用
目的是顯示我之前的跑步
並且顯示平均時間 距離 高度
一個版本是有一個關於每一英里的列表
我可能點擊一英里來看更多信息
或者我滾動列表來看跑步全程
這個版本有我需要的所有信息
你不得不找來找去來尋找你想要的
你需要點擊一行你需要滾動這個列表
信息的密度不易讀
這絕對可以用更好的方式實現
這是一個使用SpriteKit的替代方案
使頂部有一個圖表顯示跑步全程
只需要一瞥我可以看到更多信息
現在有了手勢我可以點擊圖表
它會在步速和高度中使用動畫
用Digital Crown在圖表中瀏覽
到達特定的數據點
雖然屏幕上有很多信息
瀏覽變得更容易
要到達我在尋找的特定信息
使得整個操作更快
如你所見我們開始混合搭配
我們介紹的所有技術
手勢 Digital Crown和SpriteKit
它們創造出一些很強大的組合
當你開發自己的應用時
你應該確保考慮過這些技術
並看看它們能怎樣幫助簡化你應用的瀏覽
我們把很多時間花在watchOS 3的瀏覽上
我們很想確保它
也進入到你們的應用裏
最後我們要談一個技術
允許你的用戶放下手腕
一旦他們完成操作
在Apple Watch上完成快速操作的一個關鍵方面
是使你的應用有很好的響應性
特別是你要用到任何類型的網絡
或者要和iPhone通訊
因爲通常這樣
會引入載入指示符這並不是很好
它的一方面是
如果你在應用中更新數據
這是一個很大的話題我們實際上可以花一整場時間來討論
使你的Watch應用保持最新狀態
請確保去看了這個演講
但是我們現在想討論響應用戶操作時的網絡問題
例如我們有食品派送應用
你想買一些食品並點擊購買按鈕
你的應用在這種情況下應當怎樣響應?
我們建議你立即提供反饋
向你的用戶而不是顯示一個載入指示符
我們會用一個例子來解釋那是什麼意思
這是我在談論的食品派送應用
我可以點擊我最喜歡的商品那有一個大的購買按鈕
我們認爲這會是一個很快的操作
我點擊購買我得到一個載入指示符
因爲應用要和服務器通訊
它需要處理這個訂單它需要得到確認
一旦它完成了
它需要發送回Watch
此時它纔可以移除載入指示符
並且說 “你的訂單在路上了”
如果我們看看它的時間線就會發現問題
我們從選擇商品開始
我們點擊購買
然後顯示載入指示符
在這期間
用戶只能擡着手腕看着你的應用
直到你顯示確認
用戶僅僅進行操作
在開始和結束階段
大部分時間用來等待
我們絕對可以改進這類操作
如果我們回到我們的食品應用
點擊購買按鈕我們馬上得到反饋
關鍵是這並不是確認
因爲我們還沒有進行網絡通信
我們不能說訂單已經在路上
因爲我們不知道
但是我們想提供反饋並讓用戶相信
應用在處理他們的訂單
並允許用戶放下手腕
不需要等待應用
現在在後臺應用會用
一個後臺NSURLSession
來和服務器通訊
並最終獲得響應
然後應用在後臺被喚醒
現在它可以使用本地通知支持
來說“好的現在你的訂單已經確認了 它在路上”
然後你有和之前相同的信息
看看這種情況的時間線
它顯示這樣有怎樣的提升
我們選擇商品 點擊購買我們以相同方式開始
接下不不是顯示載入指示符
我們顯示反饋
在我們完成網絡通信之後
我們顯示通知
從應用的角度來看總的操作
和前一種情況一樣
但是從用戶的角度來看
感覺更快響應性更好
所以是一個更好的互動
我想要指出在這你實際上可以怎麼
在用戶放下手腕後進行處理
如果你進行網絡通信
你可用後臺NSURLSession
並確保使用一個下載任務
這將允許你的應用在任務完成後在後臺被喚醒
在這時你可以進行本地通知
這對你的應用有意義
或者你需要在Watch中進行處理
你可以使用一個後臺任務判定
我們對它有很好的介紹
在去年的會話中WatchKit提示和技巧
如果你要做任何處理請去看它
在Watch本身處理
2秒是一個大膽的目標
就Apple Watch上的互動應該多快而言
但我們認爲它應該就是目標
當你開發你的應用時
因爲它會告訴你怎樣設計和開發應用
所以當你要開發新應用時
或者思考你已有的應用
確保在一開始就關注快速操作
思考什麼特性
是你的用戶想在你的應用上使用的
確保它們出現在最前
並且確實很快響應性很好
使用complications和通知
因爲它們帶來很快的操作
它們爲你的應用帶來很多可用性
使用SceneKit和SpriteKit創建豐富
且可操作的界面
它們能帶來很多能力
爲你新的和已有的應用
我們對你們將用它們做什麼感到興奮
簡化瀏覽
再一次 watchOS做了很多工作
在系統層面簡化瀏覽
但是我們也希望那也發生在所有的應用中
再一次 永遠不要讓用戶等待
如果你在屏幕上顯示載入指示符
試着重新組織你的應用允許用戶放下手腕
立即提供反饋並讓用戶相信
你的應用在處理事情
想了解我們今天談論的話題的更多信息
去查看開發者網站
這周有很多演講我都強烈推薦
今天下午的設計優秀Apple Watch體驗
或者明天的watchOS演講
就這些了謝謝今天到這來
請在舊金山享受這種接下來的時光