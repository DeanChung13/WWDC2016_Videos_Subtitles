哇 大家下午好
大家想要創建一個超棒的應用
那麼一個很讚的佈局將是不可或缺的一部分
自動佈局功能可便於大家創建自己的佈局
針對不同的設備 定位和適配性
以及針對不同語言的佈局
我們今天將要探討自動佈局的新玩法
本場演講共有三個部分
第一部分由我爲大家講解
我叫Jason Yao是Interface Builder工程師
我將告訴各位有關Interface Builder的新特性
接下來將由AppKit部門的JesseDonaldson 爲大家講解Cocoa的功能
最後 UIKit的Marian Goldeen將告訴諸位最新的調試技術
這些工具和技術將爲各位節省開發時間與精力
當大家在工作中使用它們時好了 我們現在開始吧
首先來說說
如何漸進式地運用自動佈局
自動佈局的增量式運用
這是什麼意思呢？
在進行佈局設計時Interface Builder裏的視圖
不會立即限制所有東西
大家可以逐步進行操作 以節省時間
簡化各位的設置並更具靈活性
但在我向大家演示之前
讓我們先來看一個背景設置的例子
首先找到視圖
然後拖拽到InterfaceBuilder畫布上
然後設定它的尺寸和位置之後進行一定編譯並運行
這樣就能在設備上獲得既定尺寸的視圖
然後對其進行旋轉 你會發現
視圖尺寸與既定標準一致
但還有一些操作要進行
那麼接下來會怎樣呢？
接下來 我們僅需簡單地按照既定的寬高水平
將其固定在界面頂端及左邊
事實上 我們只是以隱式的方式創建了約束條件
在進行編譯時
通過使用自動佈局引擎來使視圖尺寸與既定水平一致
如果各位需要進行更多的動態調整
那麼各位就需要打開Interface Builder畫布
添加個性化約束條件
那麼問題來了 有沒有一種更好的辦法
或許可以不需要設置約束條件就能簡單地進行尺寸調整呢？
答案是肯定的
Xcode 8的新功能可在自動佈局文件上
對視圖的autoresizingMask屬性進行規定
而無需設置約束條件
這意味着 大家可以很簡單地對視圖尺寸進行調整
通過規定autoresizingMask屬性
若在場有人還對自動佈局出現前的時代存在記憶
那您可能還認識這個UI
這是Springs &amp; Struts UI
大家可將視圖固定在邊緣並決定/b&gt;
它的尺寸是否可調整
那麼這些視圖就能和各位的約束視圖一同進行良好的工作
事實上 我們要對這些autoresizingMask屬性進行設置
並把它們轉換成約束條件
但實際是在運行期間將其轉換成約束條件
這裏存在一個主要區別
實際上 它們是在運行時間內而非在建立時間內生成的
因爲這樣更具靈活性 且更清晰
若各位希望對視圖進行編程操作那它能爲您帶來良好的控制
因爲對於專業的自動佈局用戶
可能還認識這個標誌
對於視圖 我們簡單地將
translatesAutoresizingMaskintoConstraints設定爲真
那麼對於視圖來說
若在Interface Builder內添加了約束條件 它會怎樣呢？
答案是 沒有變化
各位僅需點擊一下視圖就能獲得所有影響該視圖的約束條件
AutoresizingMask即可被忽略
並且這些視圖的translatesAutoresizingMask 屬性都將變成假
那麼將它們和最初的問題放到一起
這樣 我們就能逐步地使用自動佈局了
首先通過autoresizingMasks對視圖尺寸進行簡單的調試
然後添加相應約束條件以進行更爲複雜的操作
這會給大家帶來更好的靈活性
當各位準備好添加約束條件時
選擇你想要添加約束條件的子樹目錄
先從父級開始然後再按各自的方式進行
這樣可按照各位的意願來進行自動佈局操作
並且有益於大家準備構建的新佈局
方便大家進行尺寸調整
且對於各位一直想進行佈局的文件而言也是很棒的
並且 你還可以在保留現有行爲的情況下進行該操作
我來給大家演示一下這個操作
那麼 讓我們來看看它究竟是什麼玩意兒
我已用Interface Builder打開了Xcode 8
我要創建一個關於天氣的應用
我找到了我的視圖並已經拖拽到了視圖控制器
它適用於iPad的豎屏模式
我們來看看橫屏模式下它將是怎樣的
在全新的設備結構配置欄內
把豎屏模式更改爲橫屏模式
點擊一下即可
那麼 讓我們繼續 從頂部的圖標開始
我們希望能將它放大 並橫跨父視圖
不需要添加任何約束條件
我並沒有添加約束條件我找到尺寸查看器
當然 這是AutoresizingMask查看器
我說需要做的只是改變其寬度並延展到另一邊
現在 做點對小孩感興趣的事
我先選中月亮然後把它的未知屬性默認爲頂端
然後我希望設置爲靠左
接下來是雲朵 我把它設置爲靠右
取消掉靠左的屬性
接下來是標籤 我希望能按比例調整它
比例精確
我取消掉靠左的屬性
調整它的寬度
這裏有個小的動畫窗口可讓我們對其進行預覽
之後點擊上下兩端 使其固定
然後同樣方法調整高度
最後我們想要觀看其效果
點擊橫屏模式 大功告成
現在我們來試試2/3分屏模式
大家看 標籤被截斷了
這是怎麼回事呢？
如你所見 標籤沒有是什麼問題
它調用了autoresizingMask
然後根據自身的父視圖進行比例調整
AutoresizingMask不會對視圖的內容尺寸進行考慮
但我可以通過約束條件來修正它
不過對於這個特別的UI標籤我還沒有別的技巧來解決它
我只能通過屬性檢查器
將它從固定文字尺寸轉換爲最小文字尺寸
這樣 就能完整地顯示出來
於是 當我們返回全橫屏模式
它也能很好地顯示出來 豎屏也一樣
接下來 我們來處理一下中間的溫度控制圖標
我希望它能更精準地排列
因此 我準備採用約束條件
我先選中它...
我想對這個75攝氏度的圖標進行關於父視圖約束設置
需要通過鍵盤操作
調出關於父視圖連接
即可調出約束條件菜單
在該菜單內 可以通過按住shift同時選擇多項約束條件
我希望它處於水平及垂直中心 點擊即可完成
相似地 我想做同樣的調整
按住Ctrl鍵拖拽到sunny圖標按住Shift鍵
我想添加Horizontally Space及Baseline兩個約束條件
然後對太陽圖標也一樣
按住Ctrl鍵拖拽 按住Shift鍵添加horizontal spacing
以及center vertically兩個約束條件
現在 我對視圖添加完了約束條件
現在 我們僅需對框架進行更新即可
現在 我們前往“解決自動佈局問題”菜單
對選中的視圖進行框架更新
接下來我想將溫度控制圖標再變大一點
首先選中它 然後增加它的字體尺寸
各位可能會注意到當我在增加字體尺寸的時候/b&gt;
因爲一切都準備就緒
所以自動佈局便自動爲我的框架進行了更新
在Xcode 8中 我們爲各位做了大量的框架自動更新的工作
那麼接下來我們希望能有個不錯的背景
這是陽光明媚的一天
因此 我們繼續添加一個圖片視圖
從目標庫中 我拖拽出了一張圖
把它放大到全視圖尺寸
然後設置爲圖像屬性
並選擇填充模式
就該案例我們可能會選擇AspectFill
現在我們要確定它的尺寸符合其父視圖模式
我們可以對各邊添加共四個約束條件
但對於這種簡單的尺寸調整我們並不需要添加任何約束條件
因爲我們可以調用尺寸查看器
然後調用AutoresizingMasks對四邊進行一定延展
這樣就能改變其寬高水平
最後同樣重要的是我們需要把它放到文件的上方
看它就又出現了
然後需要確認我這個banner的背景
介於這屬於視覺藝術看 現在就得到了很棒的半透明效果
然後我們測試一下
它現在看起來很棒
在橫屏模式2/3模式
及豎屏模式下都很棒
同樣在iPhone 6s Plus模式下也一樣
以上內容既是關於如何逐步使用自動佈局的內容
接下來我想講些比較高級的主題
混合設計與運行時間約束
有些時候大家會陷入這樣一種窘境
你在InterfaceBuilder內部進行視圖佈局
並添加個人約束
但是確實不知道該添加哪些約束條件
直到運行時纔有眉目 這可能是因爲約束條件的確定是根據諸如
一天中某時刻或只有應用才瞭解的一些大家正在載入的數據
我想給大家展示三種工具和三個例子
來解決這類問題
首先是調用佔位符約束
在這一情況下我選中一張圖
我希望它在我的設備中處於垂直與水平居中位置
並處於邊緣白線以內
而且我還希望它保持自身的長寬比例
然而我並不知道這幅圖最終會成爲什麼樣
只有在運行時才能看到
因此爲了充分了解近似尺寸與佈局
可以查看Interface Builder然後添加一個4:3的高寬比
當然這一比例是我估計的之後將其標記爲佔位符約束
這樣就能在構建時間內對其進行移除
當在運行時間內確實需要對圖像進行設置時
我會創建實際的長寬比例約束並運行
第二個例子假使你正在創建一項自定義控件
你的自定義控件將清除諸如UIView類或NSview類
它會提供自己的圖像
並管理其相關內容
或許它甚至還能確定自己的尺寸
它可以向自動佈局系統提供該尺寸
通過指定其固有內容尺寸來進行
Interface Builder並不執行該代碼
因此它並不知道固有內容的尺寸該是多少
但各位可以模擬其近似尺寸
通過使用固有尺寸佔位符來對其設定合理值
因此你就可以得知它在佈局中究竟是怎樣的
記住你的自定義控件
如果各位要這樣操作務必提供它的實際固有內容尺寸
你可以通過重寫固有內容尺寸屬性來進行
在自定義控件上進行
最後一例是關於Xcode的新特性
之所以把它放到最後來講是因爲這可能是各位最後的一項應急選擇
在大家對佔位符約束及設計
還有固有內容尺寸佔位符黔驢技窮時
因此我們爲各位設計了一項功能
基於各視圖來調整模糊警告級別
意思是說對於該視圖
我希望它處於屏幕中央但我只確定垂直位置
而不知道水平位置也不知道尺寸大小
Interface Builder其實會爲此給出紅線
以提醒我此時缺少足夠的約束條件
來進行定位 所以它是模糊的
這樣我就知道我得在之後運行時間裏添加約束條件
當我獲得所有需要的信息時
如此 我就可以繼續操作
並通過進行模糊屬性設定來將作業區的無用信息移除
並將該屬性由“總是確認”改爲
“位置確認”或“絕不確認”
然後我向自己保證之後我得添加那些約束條件
如此這般第一次佈局通過前 會一直處於該尺寸下
這些工具讓各位通過設計師/運行時間約束來進行作業
當大家已嘗試完各種
Interface Builder可添加約束條件的情況下
那麼以上內容既是如何逐步使用自動佈局
及如何進行設計師/運行時間約束設置那麼現在我們將開始第二部分內容
歡迎我的同事Jesse Donaldson
來給大家講解新的Cocoa
該你了Jesse
大家好 今天由我給大家講解NSGridView
它是一種新的佈局容器我們在macOS上有提供
大家知道維護約束條件是件很難的事
縱使你有如同該複選框一樣簡單的工具
我們創建了StackView來讓這件事變的簡單
並且你還可以在任何時候將一些視圖在工作區間內進行伸展
有些佈局依然
很難實現 比如
你可以通過stacks創建它
而NSStackView則不能對內容進行
跨行與列的排列
這就是我們設計NSGridView的原因
它能輕鬆地將內容放在確切的網格上
並能完成跨座標的排列方式
那麼我們放大一點來看
我從Voiceover設置的UI上截取了這幅圖
我在其中添加了紫色線條以便讓大家知道它是如何適應網格的
NSGridView調用多種輔助類
NSGridRow和NSGridColumn表示行與列
並通過內容默認設置爲自動尺寸調整
如果各位有需求還可以指明具體的尺寸
還可以讓你添加一些額外的填充
如果你的網格需要一些額外空間的話
若你有些不適用於當前硬件構造的UI
那麼這些UI將通過動態圖表示出來並被隱藏
NSGridView調用獨立的NSGridCell
以代表獨立的單元格
並且單元格的作用既是
對特定的內容視圖進行佈局管理
單元格還可讓各位控制內容的位置
如果單元格具有一定額外空間
並且如果某些內容需要跨越多個單元格
還可以對它們進行融合
這就像各位熟悉的電子數據表格程序一樣
我已經創建了一個較小的UI並且還有一些有趣的事可做
我先展示這一小部分內容並展示它是如何創建的
我們打算在Interface Builder中爲NSGridView提供支持
但直到完成它之前我們還是得通過代碼進行作業
我把outlet放進了nib文件
針對所有我想放入網格的控制組件
之後無論何時大家對NSGridView註明ContentView屬性
在需要的情況下它都能考慮到網格子視圖的可移動屬性
這讓各位在運行期間可以輕鬆地對網格視圖進行分配
之後融入到現有視圖層次體系中
可以通過多種方法構建網格視圖
但我認爲這是最簡單的一種
大家所要做的僅是
爲每行註明一個內容視圖列表
接下來我們來討論幾件事
首先各位不必擔心網格的尺寸
無論需要多少行與列它都能
針對大家指定的內容進行處理
其次各位從頭到尾使用的代碼既具有近似網格狀的屬性
而且至少與指定的UI是高度相關的
這便於之後各位或他人返回
並瞭解該代碼
因此如果我們現在運行它會出現這樣的結果
僅對於調用構造函數來說這不算壞
但顯然這並不符合設計
最突出的問題是UI伸展幅度過大
造成過多空白比如這個
這是因爲表格視圖被限定到了窗口邊緣
現在我要做的是將窗口的尺寸調整到與網格一致
但實際上這樣會使網格填滿整個窗口
如果各位之前使用自動佈局比較頻繁
那麼在使用文本文件或其他控制組件時可能遇到過類似的問題
我們準備用同樣的方式來解決這個問題
通過調整網格視圖的ContentHuggingPriority屬性
這樣該窗口內的其它控制組件
就能從nib文件中獲得較高的ContentHugging值
但直到我們在表格視圖中增大ContentHugging值
之後窗口可能將內容視圖的邊緣
偏離行與列的邊緣
一旦我們增加該值反而能拉小窗口的邊緣
空白間隔即消失了
接下來我希望討論的是這些標籤
顯然它們的佈局存在一些問題
需要進行調整
因此需要對它們進行標籤屬性的控制
通過對單元格調整座標參數會很容易地將它糾正過來
X與Y座標屬性適用於行列
單元格以及網格視圖
方法就是如果沒在單元格上指定具體數值
那麼可調用關於行與列的數值
或者網格視圖的數值如果必要的話
這樣在一個位置進行數值設定將讓整個過程變得很簡單
並且能對各種單元格進行調整
就這個案例我們可以從網格視圖中得到處於零引索位置的列
並對該列設置x座標
如此就能將這倆標籤調整到正確位置
接下來我想討論的是基線對齊
該文本的標籤明顯沒有與
處於控制狀態下的文本對齊
在幻燈片上可能不是很明顯
調整rowAlignment屬性即可很容易對其進行校正
與安置一樣rowAlignment具有繼承性
對於這種特別的設計
通過基線來處理所有網格對齊的問題是一件很棒的事
因此我們可以在網格視圖中的一個地方進行數值設定
且該設定可影響一切
如果大家夠仔細能發現文本已經調整到了正確位置
現在還有一件關於行對齊的問題是
可能有許多處於行位置的視圖處於行對齊狀態
之後各位或許會對那些單元格註明安置
所以 在這樣的情況下網格視圖可能無法滿足所有的要求
重要的是要理解行對齊
總是比安置優先
它起作用後我們將得到整組的對齊內容視圖
然後我們會使用安置功能從第一個單元格開始進行安置
接下來我要給大家講的是這個彈出按鈕
設計圖在彈出按鈕的上、下均留有一點額外的間隔
我們可以在該行中添加一些填充使佈局也有這樣的間隔
因此 我們要做的第一件事就是獲取行
我們其實可以用之前獲取列的相同方式進行
通過指定索引獲取但這種方式更好一點
相反 我們從網格視圖找到包含該彈出按鈕的單元格
然後從該單元格獲取行
這樣更好 因爲如果之後有人蔘與進來
並更改網格視圖的配置以添加一個複選框
或其它類似的東西這段代碼仍將有效
如果你在代碼中塞入了大量硬編碼的索引值
那麼一旦有人添加一個複選框你就得檢查所有的代碼
以查看哪個索引值需要進行更新
在任何情況下 只要我們獲取了行
我們就可以繼續 並設置填充值
我們會發現得到了一點點額外的間隔
在彈出按鈕的上方和下方
我們還需要在狀態單元格標籤上留一點間隔
我們可以通過同樣的辦法實現
下面 我想在此處花點時間
談談填充與間隔之間的不同
我們還沒怎麼正經地討論過間隔
填充值在行和列上都有
它們僅用於在各處添加額外的間隔
在網格需要添加間隔的地方
網格視圖本身就可以設置間隔值
它們適用於所有行或所有列之間的間隔
因此 如果我們拷貝一份設計並清除上面所有填充
那我們就會看到這樣的結果UI仍適當地間隔開
但我們已無法分辨出不同控制羣簇之間的區別
如果我們保留填充但去掉所有間隔 就會變成這樣
我們仍能看到控制羣但UI就很緊巴地擠在一起
當然如果你把兩個都去掉了那就會變成這樣
整體都會被壓縮得很緊實
此處需要記住的是填充屬性默認爲零
除非你特別設置它否則在網格中不會有任何填充
但是大家通常希望在內容視圖之間留一些間隔
所以網格視圖的間隔默認值默認不爲0
如果你的用例要求視圖都是彼此之間緊貼佈局
那麼就需要在網格視圖中將這些間隔屬性設置爲零
此處最後一個確實不協調的地方是這個複選框
這是一個有趣的情況因爲它需要跨邊界
在底部的兩個單元格之間
但我們可以通過合併單元格實現
正如我在介紹中提到的
這有幾種方法實現但在這種情況下
我們可以告訴該行合併它的頭兩個單元格
當你這樣做時
它具有擴展頂部前導單元格邊界的作用
覆蓋整個合併範圍
因此這個代碼一旦生效我們看到複選框滑動
現在這個內容視圖已經在兩個單元格中展開佈局了
就好像它們是同一個
實際上 你可以看到它只是沿襲了拖尾放置
從第一列沿襲過來
我們真的不希望有拖尾放置
但是我們也不想有引導放置
這個複選框實際上應該置於邊界中心
介於兩列之間
因爲列與列大小不一
這不是網格視圖真正想爲你做的事情
但是它卻爲你自己實現這一目標留出了空間
開始需要把該單元格的安放設置爲空
當你將這些安置值設置爲空時
它會導致網格視圖
停止維護該佈局的這一屬性
其結果是網格視圖將不會應用任何約束條件
這可能與我們的約束條件相悖
所以一旦完成了這個就可以繼續設置約束條件
從複選框中心x錨點開始
到它上面的複選框引導錨點
一旦我們有了約束條件
我們就可以像通常對待約束條件那樣真正激活它
但在這種情況下要把它設在自定義安置約束條件陣列中
如果這樣做就可以使網格視圖
保持任何自定義的安置約束條件
它會進行諸如激活或停用約束條件等類似操作
取決於該單元格是否可見
接下來 這個代碼生效後我們看到複選框移動到位置
實現結果就與設計一致了
這樣我們就完成了
此處 部分網格的配置有些複雜
但是比起你需要構建這個UI來說整個過程還是簡單了很多
從基本約束條件抑或是堆棧
其實沒有太多需要改變
爲了將這擴展到整個UI我借鑑了VoiceOver參數選擇
所以 總而言之NSGridView很棒
如果你的應用程序有一個靜態網格式UI需要管理
要處理它的一個好辦法是獲取你的所有內容視圖
並將它們放入一個網格看看會發生什麼
此時 你還可以對網格的配置進行迭代重複
直到實現你預期的佈局設計
我希望大家覺得這個有所幫助
接下來 有請同事Marian Goldeen
她將給大家講講她開發的一些新的調試工具
謝謝
雖然不經常發生但它一旦發生 就很要命
然後就造成了故障 很難調試
這是一個佈局的反饋環路
當你遇到一個佈局的反饋迴路時
你往往正在開始或者結束一個切換
它可能是這樣的
你點擊按鈕開始切換
按鈕響應了 但其它都沒有響應
這樣 你得馬上運行Xcode在調試導航器中查看
你會發現CPU卡住了
內存佔用正在增加 可能你會中斷
你繼續查看就會發現一堆佈局正在回溯中
現在出現的情況是 某種視圖集合
正在運行佈局不斷重複 形成了死循環
運行循環永不停止
此時出現的消息都在收集自動釋放對象
全部都在收集信息這就是爲什麼內存佔用得越來越多
造成這種情況的原因是一種上行數據流setNeedsLayout
我的意思是在它佈局中leafword視圖之一
正在做些事情使得更趨於根定向的視圖
以得到setNeedsLayout所以當佈局完成其路徑時
它正好回到頂部 並重新開始
你們想知道的是這其中涉及到了什麼視圖
因爲這將幫你找出setNeedsLayout的出處
這是爲何？你要對它做什麼？
這個信息其實收集起來有點難
因此 這就是我們爲什麼要介紹佈局反饋環路調試器
以此來應對這些特殊情況
這是一個在Xcode中添加的啓動參數
它叫做UIView
或NSViewLayoutFeedbackLoopDebuggingThreshold
取決於你用的是macOS還是iOS
你給它設置一個值 此處我設的100
你可以設置任何值但我們把它限制在50到1000之間
現在當你對該啓動參數設置之後
佈局反饋迴路調試器將會計算佈局子視圖
爲每個運行佈局的視圖進行計算
如果它們其中任何一個運行超過閾值
在同一個運行循環中
在收集信息的同時還會使循環運行一段時間
然後它會引發異常並把信息轉存到日誌中
轉存信息至com.apple.AppKit子系統
或com.apple.UIKit子系統
這取決於你用的是macOS還是iOS
這兩種情況有不同的佈局循環目錄
如果你想了解更多有關這一新日誌子系統和目錄的信息
請參加今天五點鐘的講座
在Knob Hill 舉行主題是統一的日誌與活動跟蹤
另外 你可以在調試器中設置斷點
異常斷點
你可以在調試器中打印反饋迴路
或者它碰到斷點也是挺好的
也許還可以更多地反思一下發生了什麼事情
所以我說的信息轉存確實就是信息轉存
下面我們來看兩個真實的實時佈局反饋環路的例子
我用了佈局反饋環路調試器進行調試
現在我們要查看這些日誌逐一細細查看
很可能看到對你有所幫助的兩個不同日誌記錄
我們準備要查看佈局反饋環路
這是由上行數據流setNeedsLayout引起的
這實際上與自動佈局無關
而另一個是由源自約束條件的模糊佈局導致的
這對於自動佈局是非常特殊的
所以對於第一例子當上行數據流結構發生變化
這是一張視圖樹的圖片其中出現了反饋環路
在這個視圖樹中很多視圖其實都是運行中的佈局
通常你會很幸運因爲其中沒有太多視圖
但如果碰到這樣的 你就會抓狂了
但實際上 它們中有10個僅僅是湊數的
它們是實際問題的無辜受害者
這出現在分層結構的較高層中
接下來 可以看到第三層級視圖
在其佈局中 正在改變它的子視圖邊界
當一個視圖邊界發生變化就會有一個明顯的setNeedsLayout
因爲它需要爲了新的邊界而重新設置其視圖
但若正接收邊界的這個視圖發生了變化
而如果它的父視圖實際不在佈局中
父視圖也將收到一個setNeedsLayout
這樣佈局子視圖將會有對佈局進行描述的字眼
這樣 當佈局通過 執行到底並結束
它會返回頂部並繼續執行佈局
因爲頂視圖仍然需要佈局
這會重置中間視圖的邊界
反饋環路是由兩個視圖所驅動的
這兩個視圖對中間視圖的邊界存在分歧
你可以想象 有很多視圖正在運行中
這樣 在日誌有很多信息所以你大可放心使用
日誌大概就是這樣的或者說至少是頂層是這樣的
當你查看這些日誌時我希望你們也從這裏開始
第一個被調出來的就是頂層視圖
是佈局反饋環路的頂層視圖
因此 在這個環路中沒有視圖而更多的是根詞語
相對這個佈局視圖而言
接下來是關於子樹的遞歸循環描述
在頂層視圖之下
在描述中 有些視圖的旁邊你會看到一個數字
你往往會在頂層視圖的旁邊看到一個數字
此處你看到的就是23
這些數字表示的是數量
即接收佈局的視圖數量且數字都是順序排列的
當然 這是一個循環我們可在任何地方放置一個
但是我們這樣做的話最後一個就是頂層視圖
這樣你就能知道涉及到多少視圖
所以總共是23個但從這裏往下只有10個
這兒頂部還有三個加起來還是不到23
這是怎麼回事呢？
好了 讓我們來看看日誌的下一段
這是按順序接收佈局的視圖
在本段中你可以看到正因爲有一個循環
並不意味着羅列的每個視圖只出現一次
我們展現出了十個視圖後面還有兩個其它視圖
接下來又是這十個相同的視圖
所以這些是更leafmost的視圖
當你看到這種情況即一堆視圖被羅列出來
在循環中不止一次出現
它們往往都是其它更重要視圖的受害者
所以就像我之前說的我們真正感興趣的是
頂層視圖從哪裏獲取其setNeedsLayout
因此 緊隨這一段後面是很多詳情
關於在佈局中實際發生了什麼
所以我們準備要直接滑動到日誌底部
這段頂層視圖被稱爲CallStacksSentTo
所以在那兒 你只需要查找它就可以了
現在 這樣的頂層視圖可以不止一個大家知道通常只有一個
這是個很複雜的情況其中有幾個頂層視圖
它們非常相似 我準備給大家展示一個
在回溯的頂部是一些漏斗類函數
用於反饋迴路調試器但非常接近你看到的頂部視圖
即在框架五中看到的DropShadowViews
接收一組邊界
如果你記得遞歸描述中
DropShadowView是TransitionView子視圖
DropShadowView設置邊界的唯一方式是
在TransitionView上調用setNeedsLayout
因爲TransitionView不在佈局中
這樣 在框架七中正在運行佈局的視圖
不是TransitionView而是其它東西
但是在這個回溯中我們沒有看到該信息
我沒有這個特定應用的符號
所以 它們在這兒沒有顯示此外 這可以是個視圖
此處我們很幸運因它是DropShadowView
接收設定界限 覆蓋設定界限
但它可能是一個不覆蓋設定界限的視圖
但很可能在是回溯的信息中間
與頂部信息之間
這樣你就可以具體瞭解自己感興趣的內容&lt;\b&gt;
所以我們感興趣的是框架的變化
對於DropShadowView
所以我們向上回滾會發現信息的所在
這在一些結構變化信息之下
我們看到實際上這些結構變化
邊界變化以及框架變化……
變化一直在不停地重複中
其中的兩個變化出現在佈局過程中
在TransitionView上合理的 也在預料中
但其中一個來自viewLayoutSubviews類函數
即該視圖的一個特定視圖控制器
即TransitionView子視圖
所以我們已經定位了問題
修復這個漏洞的方式是依靠程序員
找出其它方式來實現他們的目的
且不改變佈局中子視圖的邊界
好了 下面讓我們休息一下因爲我們要轉到示例二了
這是一個完全不同種類的反饋環路
對於那些一直在用自動佈局的人來說
如果要做很複雜的事情
你可能會遇到模棱兩可的佈局問題
而模棱兩可的佈局通常不是那麼可怕
通常你可能會碰到一堆大小爲0的視圖
你就會想我的視圖到哪裏去了
或者說可能該視圖就是你所要的
除了偶爾旋轉設備會獲得不同的佈局外
但是有時真的會很不幸
在優化佈局的更新限制通過時
你可以訓練這種歧義而如果歧義被訓練了
則每一個都會發生變量變化
每次它都將在某個地方擾亂佈局
這樣你就明白了這個循環
現在一個模棱兩可的佈局作爲佈局反饋環路
導致一些讓你撓頭的事情
除非你能想到
所以 這就是爲什麼我們總是儘可能在日誌頂部調用它
這樣它們已經在考慮它了
所以這就是說模棱兩可的佈局被懷疑了
然後當你查看遞歸描述時
你看到模糊佈局遍佈到處都是你也知道
這很可疑
我先說點題外話
因爲在這些日誌中我進行了一些縮略處理
以便它們能在幻燈片上顯示正常
但是有個縮略語大家可能不認識
實際上就在日誌中 叫做tAMIC
大家可以看到就在模棱兩可的佈局旁邊
tAMIC表示
將Auto Resizing Mask翻譯成約束條件
現在大家都可以這麼稱呼它
無論如何有歧義的佈局肯定是我們的問題
我們可以去看回溯
對setNeedsLayout設爲頂層視圖 但我沒有
這就是內部Foundation和UIKit類函數
這對我們沒什麼幫助
我們得去看細節
此處的詳情將會告訴我們變量發生變化的視圖
這些變化正觸發佈局
關於模棱兩可的佈局需要記住的一點是 它會蔓延
所以你可能只是遺漏了幾個約束條件
但是一堆視圖都是模棱兩可的
因爲它們都是互相依賴的
這樣 你會發現很多這類視圖但只能從一個開始
而一旦這個解決了
剩下的即便無法全部解決但也能解決大部分
大家來看這兒可以看到最小的x變量
在-120到-160之間振盪
不管怎樣都是某個奇數
因爲它是模糊佈局我們列出了約束條件
這些約束條件影響佈局
然後你很可能檢查出來丟失了什麼
我準備現在就開始檢查約束條件
因爲看到一系列約束條件可能會很嚇人
而畫圖描述是唯一的處理辦法
我想從一張視圖層次結構的圖片開始
這些視圖被列在了約束條件之中
幸運的是 在這個例子中所有的視圖都屬於不同的子類
所以我可以把它們標記出來給大家看
接下來我要做的是給自己畫張圖
描述約束條件是什麼
所以約束條件是一個最小的前導和尾隨填充
對於容器中的標籤而言
有一個定心的約束條件
介於容器和操作視圖之間
然後操作視圖中有自動縮放的掩模約束條件
將其安置在呈現視圖之中
某個奇怪的地方
有些東西明顯懼怕這些約束條件
最終在呈現視圖及其同類視圖之間將會進行對齊
但是沒有什麼會真正堅持
整個視圖層次需要在任何特定的地方
這就是我們爲什麼要介紹模糊視圖和佈局反饋環路
這就是佈局反饋迴路調試器它是一個啓動自變量
你不會經常需要使用它當你需要時 可節約大量時間
簡要回顧一下 我們看了...
如何逐步使用自動佈局和Interface Builder
在AppKit中有類似網格佈局NSGridView
若你想很快在iOS中看到它請到Apple Bug Reporter中投票
最後 我們還談到了反饋環路調試閾值
若要了解更多詳情請訪問Dub-Dub網站
希望大家下午過得愉快感謝你們的到來