SceneKit渲染的進展
早上好
歡迎來到“SceneKit渲染的進展”
我叫Amaury 很高興在這裏
爲大家講解如何讓SceneKit再上一個臺階
利用藝術圖形狀態
所以我們今天會講很多東西
首先對SceneKit做一個簡介
在討論渲染的新進展之前
接下來Jean-Baptiste和Sebastien會和我一起爲大家演示一個很酷的例子
來解釋該例子是如何編寫出來併爲大家展示所有新的性能
比如全新的照相效果
最後 Nick會爲我們講解Model I/O的基礎
簡而言之
如你所知 SceneKit是GameKit下的高級API
主要應用於3D圖形
它和2D圖形的Spritkit完美結合
並且構建在Metal和OpenGL之上
你可以把SceneKit應用於各種情況
把屏幕上的圖形進行分散
仔細想會發現它們被應用到很多領域
比如 我們剛引進了Swift Playgrounds
SceneKit讓其界面更爲可視化
幫助孩子們邁出學習編程的第一步
在Xcode我們用SceneKit建立了
一個創新並極爲有用的接口
幫助你編寫應用的視圖結構
在iBooks和iBooks Author裏人們可寫出豐富的書本
利用增強的插圖效果 並且是互動型的
當然SceneKit也被用在遊戲上
最後 但不失其重要性的 謝謝你們
你們爲SceneKit和3D圖形找到了非常多的用戶用例
你們在app store裏發佈了成千上萬基於SceneKit的應用
所以謝謝你們
現在 如你所知 SceneKit和系統緊密結合
它和所有Apple技術無縫合作
它充分利用macOS和iOS平臺
這兩個平臺已經問世多年
在去年的WWDC上 我們還在tvOS上引入了SceneKit
我們在狐狸例子裏所添加的只是爲遊戲控制器加了兩個端口
就可以在大屏幕上玩了
真的非常精彩 能看到同一款遊戲
和代碼能在macOS、iOS和tvOS運行
今年我們畫了一個完整圓 讓SceneKit進入watchOS
謝謝
SceneKit應用到watchOS是一個非常好的機會
開始思考新互動
以及在手腕上展現內容的方法
如你所想象的
在Apple Watch編程有很多可講的內容
今天無法面面俱到
但是我們有一個專門的演講
星期五的“Apple Watch遊戲技巧”
你可以瞭解到更多可用功能
如何利用SceneKitSpriteKit和其他技術
如果你是SceneKit新手想學習更多
可隨時上網觀看過去幾年WWDC演講我們講解過基本技巧
也講過SceneKit中非常高級的功能
好的 讓我們開始看看這個新的渲染技術
今年 SceneKit把手動渲染
交到了你們手中
也就是說 編程者 你們大家
可以在藝術作品和遊戲中取得驚人的圖形效果
這在SceneKits渲染能力裏是一個顯著進步
自從它問世以來
我們在3D圖形最新高級技巧的基礎上利用了先進的技術
提供準確的渲染和基於物理着色
現在 基於物理着色有一些要求
首先從線性渲染開始
這裏是一個平滑的輻射圖 從0到1
如你所見 顯示很完美
直到你把它壓縮
想儲存到8寸的磁盤光學映像裏 比如
可以看到 發生了光度彎曲
這是因爲我們的眼睛對於變化很敏感
在深色的影響下
通過伽馬編碼可以給該暗圈函數指定更多的值
比如 這裏的圖例顯示了
儲存原始像素數據和利用了伽馬編碼之後的不同
現在的問題是當着色［聽不清］
所有的光信息和公式都在一個線性空間表示
所以在非線性管道中
只存在鮮豔的顏色數據在紋理上進行伽馬編碼後
並且用線性公式進行處理
產生的濃縮結果會被寫入某個紋理或幀緩存中
如你所想 這是錯誤的
爲了最終的圖片顯示正確所有的操作都需要有足夠的空間
作爲一個演示例子這是伽馬空間內光照場景
這是同樣的場景以線性空間的着色顯示
如果比較兩者 會發現光照如何消退
以及邊緣變得粗糙 在線性渲染裏
線性渲染對於基於物理的渲染十分關鍵
它實際上被應用於所有SceneKit光照模型
因爲從數學角度上很正確
如你所知顏色是今年WWDC的重要話題
除了伽馬糾正
SceneKit［聽不清］自動管理顏色和線性渲染
這代表了什麼？
它意味着指定給一個紋理的顏色配置
現在將會［聽不清］
任何操作 從發生在圖像從磁盤
被加載 到傳給系統那一刻
可以顯示在屏幕上
我們會保持顏色數據的完整性
基於SceneKit的應用會產生高度的色彩準確性
和某些專業照片編輯應用一樣
如今 如你所知［聽不清］地圖和普通地圖
都不再顯示被存儲爲色彩的原始數據
SceneKit知道這一點它不會爲此類圖像配色
爲了幫助你解決這一點有一個全新的很棒的性能
在Xcode 8資產目錄裏就是紋理集合
在紋理集合裏 可以指定一個圖像顯示色彩數據或者原始數據
然後Xcode可以自動把這些圖像轉換爲
CPU和GPU高效紋理格式
關於這點 午飯後我們還有一個演講
“用廣色域來工作”
Metal團隊將會講解更多相關細節
除了紋理 色彩管理也應用於色彩對象
色彩組件不能再假定爲sRGB
如果要變成新建色彩
使用正確的構造器非常重要
這裏展示了兩個色彩對象
一個叫Display P3另一個叫sRGB
它們是由同一個組件構建出來的
當使用色彩選擇器時
請注意選擇的色彩空間
菜單上可以選擇不同的色彩空間
包括和設備無關的比如Display P3和sRGB
還有一個很方便的選項顯示數值
以浮點數顯示 而不是整數
這樣它們可以方便地複製粘貼到代碼中
講到這裏 如你所知
着色修改器是SceneKit非常優秀的性能
它允許自定義渲染
如我所說 今年着色出現在線性空間
所以你必須確保把色彩
轉換爲線性擴展sRGB色彩空間
在這些組件被用來［聽不清］
關於向後兼容性要注意幾點
線性渲染和色彩管理會自動啓動
當你把應用和新的SDKs連接起來時
啓動不會產生性能下降
但是會顯著改變舊場景的外觀
舉例說明 這是去年的演示並沒有使用線性渲染
如果對其進行重組會變成這樣
當然 紋理 光照和陰影修改器
可以用線性渲染重新進行改寫
但是如果想把應用部署到舊版本的系統
或者出於某種原因想在色彩管理中更新線性渲染
有一個方法可以實現
你可以通過指定一個關鍵字
在應用的info.plist文件
將會顯示廣域內容
如你所知 廣域色彩空間
比如存在擴展sRGB
對現代硬件設備來說非常重要
新款帶Retina顯示的iPad Pro和iMac
有廣域顯示SceneKit自動支持
你只需要取出廣域內容比如紋理或色彩
SceneKit可以透明化進入其中
廣域紋理和幀緩存需要更多的內存存儲該數據
從而會帶來更多的帶寬消耗
如果產生任何性能問題
我們提供了一種重新上傳的方法［聽不清］
下面來看一下色域展示示例代碼
是和Cocoa和Cocoa Touch團隊合作編寫
它是一個基於同步的應用 允許
可以在色域組件外觀察
這非常有用 因爲在廣域顯示裏
你可以看到該顯示情況
因爲你可以模擬一個非廣域顯示
從而可以學習利用廣域
以及如何在色彩空間內轉換色彩組件
再次說明今天下午我們會有一個精彩演講
也可以應用到準確渲染
也是基於物理渲染的前提
基於物理渲染
什麼是基於物理渲染 爲什麼要用它
人們總是認爲精細的場景
是帶有很多細節模塊的場景
的確是這樣
但是着色才能讓對象有形
在屏幕上看到的這幅圖曾經是一組多邊形
着色是爲屏幕上每個細節找到正確色彩的過程
所有的高亮 陰影和深度感都是從着色而來
着色就是那個神奇的操作能夠讓場景栩栩如生
工作原理是什麼？
首先有一個光源發出的光
當光碰到對象
會根據表面的屬性跟物質發生相互作用
光發生反射進入人眼或本例中的一臺相機
光和物質之間的相互作用非常複雜
多年來很多數學模型
都在嘗試對它進行最好的解釋
基於物理渲染是光傳輸的模擬
基於這種數學模型之上
它們考慮到了光和物質的物理性質
但是 如你所知SceneKit是高級API
我們想讓每個人都從該全新光照模型受益
所以我們公開了一個超爲簡單的API
可以讓你利用基於美術師們熱衷的物理渲染技術
本次演講結尾 你可以從該渲染
也是標準渲染 變成基於物理渲染
在SceneKit我們從兩個角度導出基於物理渲染
首先 基於物理材料 以及基於物理光照
基於物理材料
首先 基於物理材料
這裏描述了表面上的一點
通常指示方向是空間
當光照碰到該點 發生兩種反射
漫反射和鏡面反射
漫反射通過
迴應進入表面下面的光
進行多次反射 並射向各個方向
看上去均勻
漫反射的色彩是對象的底色的反照率
所以在SceneKit中設計基於物理材料的接口時
我們需要用到反照率映射圖
鏡面反射不需要如此
鏡面反射由從表面彈回的光組成
所以它的顏色是光源射線的顏色
這是我們稱作的立方體映射圖
這是六個空間的集合
代表3D空間位置的周邊環境
當我們把一個全鏡面對象
放入該環境 可以看到它好比一個鏡子
我們來舉一個更實際的例子 用塑料球
可以看出 它不是一個完美的鏡子
中間部分反射很暗
越向邊緣靠近越亮
實際上在高角度 所有的光都被反射
不是所有材料都有相同的反射量
上方是代表反射值的曲線
從0到90度入射角的函數
可以看到這些反射值
從0到45度時幾乎保持不變
我們實際上可以利用該值重建整條曲線
金子是一個很有意思的例子
因爲它有不同的反射值
對紅色 綠色和藍色組件
最後要注意的是 金屬
比如鋁或金 反射值較高
而非金屬或絕緣體的反射值較低
反射值的區別很重要
對於對象的最終顯示
所以在SceneKit中我們想要公開一張金屬性映射圖
顯示對象的哪些部分是金屬的哪些不是
所以除了不同的反射值以外
要注意金屬也會吸收表面之下的所有光
而絕緣體將會發生散射
兩者的視覺效果
是金屬有廣泛的鏡面反射 沒有漫反射
絕緣體則有非常多的漫反射
鏡面反射幾乎只能在高角度看到
在SceneKit我們會重新使用發散的Metal屬性
儲存金屬的反射值和絕緣體的反照率
對於絕緣體的反射值
我們只使用一個全局常量
並且重用金屬屬性diffuse
我們從其他［聽不清］取得
最後我要講的一點是表面粗糙度
你們知道 沒有完全光滑的表面
從微觀來看 總有小的凸起
和裂紋將影響鏡面反射
微觀表面越粗糙 反射越模糊
因爲光的反射線不再對齊
所以在SceneKit裏也會提供粗糙度映射圖
將會顯示錶面的哪些部分是粗糙的哪些部分是光滑的
這是一張灰度圖
可以看出如何分開三個基本屬性
每一個屬性都有明確的含義
都是來自表面的屬性
在SceneKit中建立基於物理材料很簡單
新建一個材料 設置其光照模型
爲新的基於物理光照模型
最後提供映射圖
來看一個例子
從一臺礦車開始 它只有一張漫反射映射圖
然後添加粗糙度映射圖
比如 看一下煤
煤很粗糙 所以沒有［聽不清］
隨後我們加一個金屬性映射圖
比如 看看鐵軌和車輪
再舉一個例子
這是一輛消防車
我們還是從漫反射映射圖開始
現在添加金屬性映射圖
最後是粗糙度映射圖
比如 看看輪胎
我想要指出一點
對於金屬度 粗糙度和環境閉合映射圖
請使用灰度圖像
使用紅綠藍色彩通道
只會造成內存浪費
如果還添加另一個函數 浪費更大
此外 如果想在整個表面使用相同的值
可以利用色彩對象
或更好的方法 因爲對於這些金屬屬性支持數量已知
我們看看如何建立簡單而高級的API
從而建立各種各樣的材料
這是同一個對象
在一個軸上 改變粗糙度值
在另一個軸上 改變粗糙度值
我們曾經說過 會導出基於物理渲染
來看一下基於物理光照
在SceneKit光照分爲三類
首先是基於圖像光照 IBL,
然後是光照探測 最後是點光源
基於圖像關照
我說過可以利用一個立方體映射圖描述
3D空間位置的周邊環境
當對錶面上的一點進行着色時
我們可以把終點上方當做完結點根據它的平均值
和色彩的正確光照信息
從立方體映射圖中獲取的
舉例說明 這裏有一個對象
只利用圖像光照進行照明
在該場景中沒有光照
你可看到根據立方體映射圖的改變
如何顯著影響了對象的外觀
對場景內所有對象利用基於圖像光照
將會帶來一致的觀感 協調合作
在SceneKit裏使用基於圖像光照非常簡單
我們爲場景添加一個“lightingEnvironment”屬性
只需把它的內容設置爲一個立方體映射圖
很棒的是它和background屬性完美結合
比如 如果取一個對象把其background
和lightingEnvironment屬性都設爲相同的圖片
就可以在上下文中顯示一個對象
立方體映射圖可以顯示遠處的環境和藝術
當對錶面上的一點進行着色時
有可能這個環境不可見
因爲你正處於山洞或它們之間有別的對象
基於圖像光照應該要考慮到這一點
所以對封閉對象來說效果沒那麼好
還好我們對此有解決方案 光照探測器
光照探測器
光照探測器是面向場景的局部光照
它們捕捉局部漫反射
當着色表面某點時可以找到四個最近的光照探測器
然後從這些探測器添加光照
如我所說 光照探測器它們是局部光源
它們可以被認爲是閉合的
可以用這種方法實現
它們重量輕 效率高
可以在場景中放置很多光照探測器
我們推薦這麼做
因爲探測器越多 就越精細
獲取的局部光照信息就越準確
建立光照探測器很簡單
新建光照 修改其類型
可以編寫代碼實現
也可在Xcode SceneKit的場景編輯器裏
和立方體映射圖一樣光照探測器捕捉靜態光照信息
該信息可以被很簡單地傳入探測器
只需用到這個API的Xcode場景編輯器
我們看了如何利用IBL或光照探測器
在場景中進行間接照明
當然也需要直接照明
還是可以訪問任何別的光照
如全向 定向或聚光燈
都可以運用在基於物理渲染中
實際上我們還有［聽不清］可以進行更好的設置
比如添加“intensity”屬性
光照強度通過每千瓦的流明數表示
和燈泡是一個量級
我們還添加了溫度屬性 單位是開爾文
可以用該單位區分顏色
一個新的性能我們添加了新的光照種類 IES光照
IES光照 即光度學光照可以用於任何衰減形狀
當聚光燈或全向光
有一個非常對稱的衰減曲線
IES光照可以更好積累劇場光照的行爲
比如可以照一個錐形
也可以照一個陰影
如此種種 根據光源的形狀
在SceneKit裏建立光度學光照很簡單
同樣 新建光照
修改類型屬性
最後提供一個URL 放入配置文件中
可以比如 從生產商網站上直接下載
快速複習一下我們看到在SceneKit中
新建基於物理材料多麼簡單
所有這些屬性都是從表面屬性中衍生出來
非常容易理解
以及如何利用光照在基於物理的材料之上
請歡迎Jean-Baptiste和Sebastien做精彩的演示
謝謝你 Amaury
爲大家做了關於SceneKit的全新渲染技術的演講
我們在實際操作中看一下Xcode場景編輯器
如大家所見Amaury演示的幾乎一切
都可以在Xcode場景編輯器裏直接可用
可以調整屬性 實時觀察結果
這裏有一個很簡單的場景卡車上只有一個光照
打開材料檢查器
該對象只有兩個材料
一個車身 一個配件 等等
選中這兩個材料
繼續採用布林光照模型
切換到基於物理光照模型
把兩個材料設成金屬
可以看到有一個問題
因爲我們沒看到環境反射
打開場景檢查器
我們必須要爲項目設置光照環境
爲此我要使用立方體映射圖
比如 該停車場立方體映射圖
作爲光照環境
接下來將集中講解這三個主要的
基於物理光照模型的屬性
現在來看粗糙度值
粗糙度顯示錶面有多光滑
可以看到
表面越粗糙 顯示越模糊
如果把粗糙度值調到近1
反射很模糊
當值到達1時 幾乎沒有反射
如果調回0 表面就非常光滑
如你所見 一切
整個環境都在金屬裏反射
我只用一個常量值代表粗糙度
然後爲對象的每一個部分指定一個值
因此我需要一張粗糙度映射圖
爲車體提供一張粗糙度映射圖
以及一張配件粗糙度映射圖
對於金屬度也是一樣操作
我們需要指定對象的哪些部分是金屬哪些不是
所以我們需要提供金屬度映射圖
設定配件金屬度映射圖
還有不同的圖
給車體
如你所見 對象的車體部分是非金屬
前面的散熱器格則完全是金屬
最後是添加反照率
就完成了
就這樣 我們爲該卡車進行了完整的基於物理渲染
現在切換到場景編輯器修改立方體映射圖
比如這個都是樹的光照環境的立方體地圖
可以設定爲背景
就這樣
如你所見
新SceneKit場景細節的使用十分簡單
爲了說明這種渲染操作
我們編寫了一個很酷的演示現在放給大家
Sebastien將進行講解
大家好
謝謝
很高興爲大家介紹今年的新的毛茸茸朋友
Bub Bub是一頭獾
它開着一臺採礦車
它要採集珠寶 用於加速
你看到的所有場景都採用了新的SceneKit渲染技術
所有的材料都是基於物理 光照也是
我們還採用了平常的
SceneKit的屬性比如動作 動畫
和以前有的對象
這是Swift應用 可在macOSiOS和tvOS上運行
都完全用Swift編寫大概有700行的代碼
沿着軌道我們安置了光照探測器
考慮到局部照明的改變
請注意光照改變 當進入山洞或隧道時
還加入了新的特效 比如運動模糊
當Bub像這樣抓到一個加速獎品時就可以看到
我們有一個HGI相機這就是爲什麼光照發生改變
當有亮光或環境改變時
我們還採用IDL（交互式數據語言）編寫光照環境
還有一些新的 我們喜歡的運動模糊
當有亮光時 會有綻放效果
所有的材料 你所看到的都完全是PBR效果
對水晶是全自由反射
對所有的獎品和寶石也是如此
在這裏又看到了照明變化
色調映射實現了這一切 謝謝
我們現在來看幻燈片
我會再講解一些關於這個演示的內容
首先 今年我們十分高興告訴大家的是
和往年一樣 該演示是一個簡單代碼
是的 謝謝
大家可以在開發者網站上下載所有代碼
調試它 檢查場景代碼看我們如何編寫
大約700行的Swift代碼
我們認爲代碼很容易理解希望你們能夠欣賞所見
並從中學到一些東西
今年我們決定 關於演示我們和美術師們進行了討論
我們擬定了一些草稿考慮已有的設計理念
當我們就設計理念和流程達成一致時
美術師開始構建模型世界
這是一個互動的過程 我們非常需要
能夠在模型正在構建時取得其信息
並馬上開始編程而不用等待最終的資產
所以在SceneKit中我們有一個自定義工具
在命令行工具裏充分利用SceneKit的強大
爲了採用DAE文件裏的工具單位轉換爲米
且它們可在場景裏自動放置光照探測器
因爲有200多個光照探測器
我們不想每一次場景轉換時需要手動安置它們
我們採用了基於圖像光照
所以我們有立方體映射圖作爲背景圖片
另一張立方體映射圖作爲光照環境
我們採用了光照環境添加反射
如你所見 對於戶外場景效果非常好
我們還採用了光照探測器
它們顯示在Xcode當中你可以看到它們
我們對它們進行了高亮顯示
可以看到只從這個視圖上就已經有很多光照探測器
可以想象整個場景中用了多少
自定義工具把它們放入環境 開始計算
也可以在Xcode中手動實現
但是 當然 光照探測器用的越多就會越沉悶
它對室內場景很重要
但它也爲戶外場景視圖添加了很好的觸摸效果
來檢測場景中的微小變化
我們還對室內場景添加了光照映射圖
因爲它覆蓋了光照環境
這對山洞非常重要因爲光照在山洞裏非常不同
我們採用探測器和光照映射圖
在該場景中改變了光照和氛圍
當然我們也採用了正常的映射圖爲模型添加細節
我們還採用了環境閉合映射圖
產生效果更好的光照視圖和渲染
我們採用了一個點光源來模擬太陽
在場景中天空的高處
我們利用它建立動態陰影並加強全局光照
所有在演示中看到的材料都是100%的基於物理材料
所以有椰子樹在環境反射下的逼真效果水晶也是如此
講到水晶這是我們編寫非常簡單的材料
它沒有紋理映射 創建非常簡單
它是全金屬 完全沒有粗糙度
只是一個漫反射色彩
所以它是創建寶石的非常好的方法
寶石几乎對環境全反射
光譜另一端 可以看到這座塔
該對象既有金屬部分又有非金屬部分
採用金屬度 粗糙度映射圖和紋理映射圖來創建它
如你所見 我們還是在普通映射圖上採用漫反射色彩來添加細節
基本上該演示使用了所有SceneKit的新功能
基於物理着色 所有材料和光照的SceneKit API
我們採用了Xcode集成
以及爲流程新建的自定義工具
我們認爲這是今年新特性的非常精彩的展示
也是非常好的示例代碼能讓大家學到新知識
希望你們喜歡
謝謝
如你們所見
今年我們對材料和光照進行了重大升級
我們也因此必須改變相機的表現
我們已經有了優秀的材料和光照
我們也需要更好的相機
現在我們了現實光照
我們需要有一個HDR相機或高動態範圍
因爲普通的相機是低動態範圍
是每組件8比特
我們採用浮點組件
所以可以有非常亮的光照比如蠟燭或燈泡
還可以有比如說 太陽是非常非常亮的光照
這樣形成了非常高動態範圍
需要對屏幕上的動態範圍進行重映射
我們採用色調映射
色調映射是把部分渲染重映射
到低設置設備
所以我們需要啓用HDR相機
它不是默認設置裏自動設好的可以在API或者Xcode裏設置
可以調試色調映射
可以改變灰點 白點
以及曝光的範圍
還可以固定曝光偏移
舉例說明 這個場景顯示得很好
但是你可以進行曝光不足渲染低調顯示 也可以過度曝光
只需要改變偏移值 很簡單
因爲有HDR相機我們還添加了很棒的視覺效果
首先是綻放效果
綻放是模擬很強的光照造成的刺眼效果
來自場景裏或反射
可以通過散開
光照附近的放射像素
在這個例子可以看到 非常好的效果
可以看看在塔頂上的反射綻放效果
這是一種很好的方法使光照附近的像素暈開
讓渲染潤色不少
接着我們添加了運動模糊已經在演示中看到了
它讓相機運動變得平滑
如果把運動模糊加入整個場景
就變成這個樣子
有時我們並不想讓所有對象都模糊
比如 我想讓獾和礦車顯示清晰利落
所以有一個新API可以從運動模糊中排出某些對象
結果帶來目標對象顯示清晰利落的效果
今年我們在現實生活相機中加了幾個變化
首先是漸暈
漸暈是現實生活鏡頭的誤差
在圖像角落上形成陰影
所以你可以把這張圖像換到這張
也可以改變環境對象 把濾鏡
從圖像中間調到圖像邊緣
今年模擬的另一個誤差是彩色邊紋
彩色邊紋是實際鏡頭中發生的折射
實際鏡頭的玻璃上
所以它會在渲染中產生光照的紫紅色和黃褐色陰影
就會看到這個樣子變成這個樣子
這個例子很極端
可以更加溫和細緻 取得好的效果
我們還加入了一個可以改變場景氛圍的好辦法
就是色彩校正
可以改變飽和度 達到幾乎黑白效果
如果你想 也可以讓色彩更誇張
還可以改變場景對比度
就會產生正常的圖像或不飽和的
或過度飽和的圖像 然後改變對比度
最後一個 有着非常非常棒的效果
就是調色
調色讓我們完全重映射
場景的顏色 變爲完全不同的顏色
我們採用正方形條形圖片
構建3D顏色立方體 當作查找表
來重映射本來的顏色到全新的
舉個例子 我們重映射
上面這條的普通顏色 到褐色調
這就是褐色調的效果
操作很簡單 我們覺得很棒
看上去很不錯
這就是今年對HDR相機的更新
我們覺得這是非常棒的升級
期待看到大家使用後的結果
我們把所有的新效果都集中整合供用戶使用
你不用在比如綻放或運動模糊之間選擇
可以同時使用所有效果
當然這些是需要付費的
但是你可以用來做出非常棒的圖片和看上去非常酷的場景
現在我把講臺讓給Nick來講解今年Model I/O的改進
非常感謝
好的 大家好
首先我將稍微講解
今年模塊輸入輸出和SceneKit上的改進
今年SceneKit可以導入模塊
到自定義格式比如不一定和以前一樣的三角形
而是四邊形或任意多邊形的拓撲
作者最初新建內容的地方
SceneKit 如果需要會自動進行三角測量
從而完成渲染
問題是如果想要採用全新的鑲嵌設備
你需要讓鑲嵌有精確的形狀
所以你需要修改代碼 採用“preservedOriginalTopology”標識
該標識和Model I/O標識一致
把它帶入資產 進行指定
它將保留所有的孔 折線以及所有重要的東西
爲了對象的正確再現
今年我們還改進了細分算法
成爲新的體系 來自Pixar的OpenSubdiv 3
可以看到在這個例子中
有之前以三角形方式導入的對象當進行鑲嵌時
我們想進行平滑細分的盒子顯得有點凹凸不平
如果取出該對象 保持其拓撲結構
可以看到四邊形形成了均勻的圓形表面
看上去效果很好
這是一種非常好的方法 讓輕量對象
可以根據場景縮放分辨率 諸如此類
輸入輸出的另一方面 我想要強調的
是去年我們在Model I/O裏引入了基於物理材料等
它們自然連接了所有SceneKit的內容
如果在Model I/O裏指定了高動態範圍相機
它會四處可用 不會失去任何屬性
來看Model I/O
快速複習一下
如［聽不清］所說模塊輸入輸出
在框架和系統裏
顯然需要它們 把數據在應用之間
新建對象的地方 以及翻譯對象
在框架之間 比如SceneKit和MetalKit 等等
我們支持很多標準文件格式
文件格式是一種方法 讓內容
從成品輸出到工具
以前存在的格式
專業範圍很窄
比如 只是一個模型
或者只是一大堆數據
今年很激動人心的是
我們和Pixar聯袂合作
引入了對全局場景描述工具的支持
現在全局場景描述是全新的公開標準
關於它非常有趣和令人激動的是
它不僅僅是一個文件系統和一種格式
很容易以ASCII讀取或足夠以二進制加載
它還包含了一個場景組合引擎
這讓它真正從以前的其他格式中區分開來
它凝聚了多年來的實際操作經驗
Pixar採用它製作電影
明天上映的“海底總動員2”完全從USD文件產生
現在USD有專門用於場景的數據類型
並且再一次除了將此格式作爲開放格式
還有文件分層 實現併發流程
併發工作流程非常棒
這是一個例子 可能在
在全局場景描述中取得的關於電影中某個典型場景
我們有一個取景層取景被分層
從組件 從背景 從角色
角色本身可能包含很多組件
可以看到該取景層圖片有很多分層
因爲你不止可以新建一個場景
由所有這些內容構成的
你還可以做出改變
場景描述可以讓你知道 這是第四鏡
角色可能出來快了些或慢了些
可以把所有這些變化存入一個文件爲了審閱
另一個全局場景描述的特點是
據我所知 它是唯一的開源文件格式
允許在對象變化中對類進行指定
可以想象 可能出現一種情況
有很多野獸 都想闖進大學
之類的 那裏有書本
在傳統的工作流程中 你大概會
發現自己在編寫書本 編寫程序
爲每本小書都新建無數文件
然後把它們放在書架上然後一本一本取出進行渲染
真的很枯燥
在遊戲裏 有一種角色團隊
可能各個角色有所不同比如髮型和T恤
你可能不得不把它們都刪除
而現在全局場景描述
允許你在對象的一個單一文件類中進行指定
所以一個類在這裏顯然代表了了一本書
所以
文件可以代表很多不同幾何形狀的書
顯然有一本寬的 長的 還有一本厚的
當你把書實例化 放入書架時
你可以告訴全局場景描述
我想要這本書 想讓它這麼寬這麼長
它會提供你想要的信息
實例化進入運行 或照片 都可以
你在一個單一文件內的改變可以是很多軸上的
在本例中 我將修改一些着色屬性
剛纔我有所有這些書
我可以給它們着任何我想要的顏色
神奇的地方是 我把書放好最後我問
爲了渲染
在這個地方的書是什麼顏色的？
它會找出來根據所有的場景組合的邏輯
文件和引擎包含的它應該被表達的方式
除此以外 你還可以在一個單一文件內
表達不同的功能
我將要展示的是在非常低的終端
比如某個可穿戴設備可能只顯示低多邊形版本
同樣的文件可以展示出合適的效果
在已有功能的最高渲染上
我們集成了全局場景描述
跨越所有系統和框架
所以 在最底層
如果把一個全局場景描述文件導入Model I/O
我不期待你們可以讀懂
可以獲得一個熟悉的Model I/O對象層次
含有所有在全局場景描述文件中的屬性
精確地表現 所以可以使用我們的工具
Model I/O所提供的比如 放置光照探測器
並且評估它們的最佳位置
然而 除此之外 比如有一個項目
你的美術團隊給了你一個包含很多內容的文件夾
你可以在Finder裏打開窗口包含所有內容
Finder會準備好縮略圖
因此可以看見裏面有什麼
快速查找也適用
你可以選中其中一個對象 按下空格鍵
它會跳出 你可將其翻來翻去
當然快速查找一次只能顯示一個對象
如果你想保留一個對象以進行比較
或者你的USD文件有多臺相機或多項內容
你想逐個檢查 可以用預覽打開
全局場景描述在那裏實現地非常好
如果把全局場景文件讀入Xcode
它通過Model I/O導入SceneKit
含有該文件內完全相同的屬性表達
所以可以在層次瀏覽器上進行查看
可以查看屬性
可以移動對象 可以添加相機
修改場景 返回給USD
然後你把它發回給美術師們說
你知道 我做了點修改
你能不能 你知道該怎麼做
最後 它歸入SceneKit
Pixar的朋友爲我們提供了“海底總動員2”裏的雷先生
這是SceneKit最直接可用的功能
用最新的基於物理着色方法你剛纔已經全部聽過
我們只在電影資產中播放了3秒動畫
看上去效果非常非常好
你還需要插件
才能把全局場景描述集成到工作流程中
從而激活資產的動作 在人物
內容創作節目 編寫的應用之間
所有插件 開源信息
可用性 時間表等等等等
都可以在openusd.org網站上找到 我建議大家訪問
找出可以在你的管道和進程中可用到的內容
這就是全局場景描述
快速總結一下
SceneKit在我們的所有系統和平臺上可用
這非常令人讚歎
我們有基於物理渲染針對任何美術外觀狀態
以及美術表現狀態 看上去非常美
HDR相機和效果讓你
控制如何表現對象以及外觀 非常高質量
我們還提供全局場景描述的支持
我們非常高興能在背後進行支持
並且認爲將在工作流程裏大顯身手
在未來的日子裏
關於本次演講609更多信息 都可以在網站上找到
相關演講還有
Xcode中可視化調試和廣色域遊戲技術和Apple Watch
今天和明天可以參加
非常感謝大家