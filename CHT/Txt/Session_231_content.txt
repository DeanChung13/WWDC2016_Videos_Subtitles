CloudKit最佳實踐
早上好謝謝你們來參加本次演講
我叫Dave Browning今天和我一起的還有Nihar Sharma
我們是CloudKit團隊的工程師
今天我們跟你們談一些最佳實踐
來用CloudKit構建你應用
那麼 我們具體會談些什麼呢？
這個 首先我要介紹在Apple我們怎麼使用CloudKit
我會說一下整個工作流程還有我們用的一些API
我們用這些API給顧客們提供流暢的體驗
我指的是讓他們可以一直訪問相同的數據
在他們所有設備的應用裏
接着 Nihar會細說
CKOperation API的使用
以及使用時的可配置性和靈活性
然後 他會聊一下數據建模時需要考慮的一些東西
你在CloudKit存什麼 怎樣存怎樣建立你數據庫的架構
接下來 他會討論錯誤處理
我們說過 這對於CloudKit應用來說至關重要
他的講話會涵蓋你在用API時可能會遇到的不同類型的錯誤
還有怎樣根據你應用的使用情況考慮應對之策
給各位提個醒 我們在Apple創建了CloudKit
還創建了很多基於CloudKit的應用
所以你們應有信心你們的應用會成長和擴張
因爲我們已把應用擴展到擁有數億用戶的規模
我還想給你們快速回顧一下概念模型
在最高層 我們有所謂的容器
這個一般跟應用一一對應起來
Photos、Notes和你應用在CloudKit有一個容器
在一個容器裏你有一個公用數據庫
你可以將所有用戶可以看到的數據存在這兒
所以 其中一個實例是WWDC應用
或iOS裏的News應用都由CloudKit創建
它們用公用數據庫來儲存文章、新聞
這些所有人都能看到的東西
我們還有私人數據庫
你在這兒給一個特定用戶儲存數據
這個用戶可以在所有設備上看到其數據
但別的用戶都看不見
而今年我們新增了共享數據庫
關於這個 如果你想了解更多一定要看昨天演講的視頻
“CloudKit的新特性”
深入探討了共享
接着 在一個數據庫裏你有一個地帶
在公用和私人數據庫裏都有一個默認地帶
如果你把檔案默認擱在數據庫裏這就是檔案會去到的地方
你在私人數據庫裏可以選擇創建一個或多個自定義地帶
你便可以在那些地帶儲存東西
而當一個用戶分享內容給另一個用戶時
這份內容就會呈現爲他們共享數據庫裏的一個共享地帶
你可以把它的本質想成是一個代理
是所有者私人數據庫和自定義地帶的一個代理
當然 如果多個用戶在多個自定義地帶跟你分享東西
你就會見到很多共享地帶
在共享數據庫裏
而在整個工作流程中 我演講的重點會在自定義和共享地帶上
就是我們剛在這兒談的
最後在最低級 你有檔案
這是鍵值結構數據存儲
一份檔案永遠存在於一個特定地帶
好 我快速地回顧一下在高層使用CloudKit的好處
你可以專注於構建你的應用而無需爲搭建後臺服務操心
我們幫你做了這步
你的用戶能夠進行所謂的自動認證
是指若他們在一臺設備上登錄了iCloud
你就不用提示他們註冊、登錄
或者任何常常會造成阻礙的東西
妨礙他們使用你的應用
他們若用CloudKit登錄iCloud
你馬上就有這個用戶的唯一標識碼
你就可以替他們儲存數據了
最後 也是今天值得強調的就是你可以得到同樣的數據
不對 是你用戶可以在他們所有的設備上得到同樣數據
若你將數據存於CloudKit
好 我們現在來說一下我們看到的常用案例
以CloudKit爲基礎構建應用時
我們看到 你有一個用戶在運行一個應用
此案例裏談論的主角是Notes
Notes是基於CloudKit構建的
假設用戶在iPhone上創建了一個note並存到了雲端
當用戶在第二臺設備 比如iPad上第一次打開Notes的時候
會感覺數據神一樣地推送出來
它已在iPad裏了
而且 如果他們在iPad編輯
也會感覺數據神一樣地向另一個方向推送
這就是我們想提供給我們用戶的使用案例
我們應該這樣想iCloud服務器是真實數據的來源
你的設備有這個真實數據的本地緩存
而CloudKit API就是兩者之間的橋樑
好 所以這個實際上到底是怎麼運作的呢
這個基本上就是當你的應用啓動的時候
我們推薦的工作流程是你從服務器獲取數據的變化
特別是在你應用首次啓動時
因爲你不知道有沒有東西已經存在
用戶從另一臺設備寫了一些東西
對吧 所以你連接到服務器獲取任何你還沒有的數據
然後你確保訂閱了未來的數據變化
通過訂閱未來的數據變化你告訴CloudKit讓服務器
推送通知
到用戶其它設備上的你的應用
接着 當然若你收到一個推送你應再獲取數據變化
把用戶其它設備上產生的新變化下載下來
好 我們來挖掘關於這個的更多細節
訂閱數據變化
它是這樣運作的當你的應用第一次運行時
我們一會兒會探討爲什麼不過現在 當它第一次運行時
你設定好訂閱告訴服務器
這些是我關心和訂閱的數據
當這些數據發生改變時服務器就會告訴你
當你的應用在另一臺設備上第一次啓動時
給用戶的訂閱可能已經存在於服務器上了
但你的應用並不知道這個因爲這是它第一次啓動
所以你要保證這個訂閱確實存在
你接下來要做的跟你之前在另一臺設備做的一樣
現在 既然你訂閱了數據變更並且CloudKit會推送通知
你就要偵聽這些通知我們來具體看一個例子
用戶寫一個新筆記
應用將它存於服務器上
服務器看了看說啊哈 這個用戶有訂閱
當有新數據的時候它們想第一時間知道
它說它來自iPhone所以不用打擾iPhone
但這個用戶還有一臺iPad
服務器於是就查找合適的Apple推送通知服務標記
幫你跟APNS連接並且告訴後者發一個推送給iPad
你於是就用不着親自在後臺發推送了
你的iPad終於收到推送
iPad接着幹嘛呢我們之前提到
現在它會向服務器索取這些新的數據更改
具體就是iPad經CloudKit下載新的數據
更新自己的本地緩存然後用戶在iPad上打開Notes
瞧 用戶看到剛在iPhone上寫的同樣的東西
好 我們來實踐一下搭建這個系統
我們深入到代碼裏到我們專門用的API裏
實現一切
我們首先看到訂閱數據改動
記得我說過的話
這是那些只在你應用第一次啓動時你才需要做的一件事
所以 你會注意到在我們代碼頂部有一步審查
查看我們在這臺設備上是否本地緩存
既然我們都已經設置了這個訂閱
我們不用每次應用啓動都執行後面的程序
你爲自己節省了網絡請求你也爲用戶節省了一些網絡操作
好 那麼如果我們之前沒有訂閱我們來看看代碼是怎麼設置訂閱的
今年 iOS 10新特性
CKDatabaseSubscription API
讓你可以訂閱整個數據庫的任何改動
而且它可以用在私人數據庫可以用在共享數據庫
在這個例子裏我們來關注新的共享數據庫
所以你給訂閱賦予一個ID方便之後查找 我稍後也會談這個ID
在這個案例裏 因爲我們的對象是一個共享數據庫
我們稱數據改動爲共享改動
接着 你要告訴CloudKit你想要發送的推送類型
在訂閱觸發的時候發送
我們來深入聊聊你可以用的不同類型
第一個類型實際上我們用得很多而且對於大多數用例我們都很推薦
這是一個靜默推送通知
要做到這點 在我們的API裏要關注到一個訂閱對象
你可以用一個CKNotificationInfo對象設置notificationInfo
然後 如果你將shouldSendContentAvailable屬性設爲真
並且只設置這個屬性你就可以靜默推送了
後臺就會替你給這個訂閱發一個靜默推送
而這個關鍵的一點是你不需要提示用戶並取得同意
過去我們有開發者抱怨“嘿我們有這個訂閱 但它會彈出窗口”
你們也見過這種情況對這個應用允許推送通知
很多人會選不
沒得推送的話你就只能靠下載數據了
如果你這樣做的話基本上你怎麼樣都不能引起用戶注意
所以 你不需要徵求用戶接受
最後 你偵聽這些通知的地方是在AppDelegate裏的
RegisterForRemoteNotifications
而如果你確實想發送一個UI推送你其實想要的是標記
橫幅或者發出聲響你可設置三個設置中的任何一個
這會告訴CloudKit給你的用戶發一個UI推送
而在這個案例裏 因爲你要提醒用戶所以你需要徵得他們的同意
你跟以前用一樣的方法登記遠程通知
一些要注意的細節
如果你去讀APNS文檔
它們會告訴你說推送可以根據設備條件進行合併
這個指的是 如果一個訂閱觸發了並且一個推送發到你用戶的設備上
有很多情況 比如低電量網絡不穩定等等
這些情況下不一定收到推送
這個合併協定的目的就是要至少實現其中一個推送
這意味着
你不應該認爲推送就是要告訴你的應用具體“什麼”數據改變了
因爲如果發了五個推送而你錯過其中四個
你只是錯過了其中四個“什麼”
取而代之 你應該將推送想作是告訴你“有些”數據改變了
一個或多個東西
這就是爲什麼我們要從服務器那兒找出哪些數據改變了
好消息是CloudKit API
給你提供了一個途徑詢問哪些東西改變了
所以你不用下載你服務器已經有的所有東西
我們回到我們的程序記得我們還在創建一個訂閱
在這個案例中我們設定了一個靜默推送通知
通過把shouldSendContentAvailable設爲真
現在 我們需要拿這個訂閱
讓CloudKit客戶端把它存到服務器上
你可能熟悉這個
但你做所有東西都要用到操作
而在這個例子裏 我們用到CKModifySubscriptionsOperation
我們把剛創建的訂閱告訴它
而這就是我想儲存的那個訂閱
有了CloudKit 因爲客戶端要通過網絡跟服務器連接
這可能會耗很多時間所有東西都是非同步的
這意味着所有操作都有完成模塊
一旦有一個響應回來這些模塊就會被調用
在這兒 我們有一個modifySubscriptionsCompletionBlock
所有完成模塊裏你首先要做的是
檢查錯誤我知道我們總是說這個
Nihar會跟你們更詳細地講解
不過 在這個案例裏假設如果我們沒有錯誤
那我們就知道訂閱已經儲存好了
而我可以在本地緩存我們已經做了這一步的記錄
這樣下一次我們就不用做了多虧有程序頂部的錯誤檢查
順便講一下Nihar也會談這個
CKOperation繼承了NSOperation即Swift 3裏的操作
所以你可以設置這個服務質量屬性
默認值是.utility
他會講一些設置這個時要切記的東西
而最後
拿這個操作讓客戶端發送回來的方法
就是把它加進數據庫的操作隊列裏
既然這個例子裏我們做的是共享數據庫的訂閱
就把操作加到共享數據庫的操作隊列裏
客戶端於是就會把操作發送到服務器
好 我們現在訂閱了數據變化
下一步就是偵聽推送了
既然CloudKit在另一臺設備的數據改變時會發推送給我們
你要確保在Xcode裏你打開了背景模式
你要在遠程通知的選項打鉤
可能還要選後臺獲取
如果當你應用在背景的時候你想做這個
這一步後 AppDelegate有一個你可能知道的方法
applicationdidReceiveRemoteNotification
fetchCompletionHandler
你給這方法一個用戶信息字典
CloudKit就可以讓你很方便地
看能否從這個字典對象裏獲取一個CKNotification
記得推送還可能有別的各種原因
但若它來自一個CloudKit訂閱就會有CKNotification
現在我們可以查訂閱ID
這一步很重要 因爲你可能會有一個數據庫訂閱
在私人或者共享數據庫可能還有別的東西
這一步讓你辨別哪個訂閱觸發了這個推送
在這個案例裏 我們假設推送來自我們的共享改動
現在我們可以去獲取這些共享數據
這個流程我們待會兒會探討
這步完成後 我們調用完成處理程序
這個方法的參數之一
好 現在我們設置好偵聽推送了
我們假設一段時間後你的應用收到一個推送
我們該怎麼辦呢記得我們剛講的東西
我們要獲取新的數據變化
我們來看圖說話看看這個是怎麼運作的
我們的設備收到一個推送
我們說了這個是共享數據庫的推送
你需要做下面兩步
一你詢問服務器
共享數據庫裏哪些地帶變動了
記得我們之前談過地帶
可能還會有新地帶出現而你甚至都不知道
因爲有人跟你分享了一些東西
你接着發一個服務器變動標記
告訴服務器你在數據歷史的哪個位置
這個我們一會兒也會深入講解
有了地帶的數字後 第二步就是你又詢問服務器說 好
請告訴我在那些具體地帶裏哪些檔案有改動
同樣地對於每個地帶你都有改動標記
標明你本地的設備緩存在數據歷史裏的位置
好 我們來更詳細地講講這個改動標記
假設你的用戶有一臺設備就我們之前說的那臺iPhone吧
用戶用你的應用發送了一些改動到服務器
改動得到認可服務器在歷史上標明這一點
這要用到服務器改動標記
在這個例子裏 爲了簡便我們標明爲字母A
這臺設備又發送另一些得到認可的改動
這些標爲B 等等 接着就是C
一段時間後 用戶在第二臺設備運行你的應用
假設是我們之前說到的那臺iPad
iPad首先要做的記得在應用啓動時
要做的是索要任何它沒有的改動
於是它說“我想從服務器獲取改動”
服務器說“拿去吧這些是我有的”
最後它說“你現在位於服務器改動標記C”
所以二號設備自己記好了它在歷史上的位置
現在假設二號設備接着寫了一些數據
寫的過程中 一號設備收到推送
一號設備下載新的變動
最後 服務器說“你現在位於改動標記E”
好 二號設備又改了一些東西
一號設備收到推送下載東西
現在它位於改動標記I
你會意識到二號設備還在改動標記C
你寫數據的時候你是不會得到改動標記的
除非你去索取你是不會得到標記的
我們假設在二號設備應用重啓
或者用戶重啓iPad還是別的什麼你的應用啓動了
你去要數據改動
服務器就會發給你你從設備寫了的東西
它不知道你會不會因爲各種原因而沒有本地緩存
如果你見到類似的情況也不要驚訝
這麼做讓你可以確認你有這一部分數據
最後 服務器會告訴你位於改動標記I
注意兩臺設備都在同樣的狀態都有同樣的服務器改動標記
這就是展示系統如何運作的一個例子
好 我們來看看真正寫代碼來獲取這些變化
這個案例裏我們要講解數據庫
iOS 10一個新API叫CKFetchDatabaseChangesOperation
如我們所說 你把我們剛提到的服務器改動標記作爲參數
你第一次用它時它會告訴服務器你啥都沒有
服務器也會把它的所有東西給你
接下來在API以前的版本里
在這個操作最後你通常要檢查一個旗標
看服務器有沒有說之後還有更多的數據
我們一會兒也會談論這個
但通常如果這個設爲真的話你就要負責在客戶端
重新觸發這個操作
但我們加了一個新屬性
到這些操作裏叫獲取所有改動
其默認值爲真
它做的是讓CloudKit客戶端
替你做這個所以你不用親自動手
運行了其中一個操作後
如果客戶端看到服務器還有更多數據
它又會幫你自動把你的操作加入隊列
當然 順便調用你的回調方法
所以你再也不用擔心
然後 你要實現這個完成模塊
recordZoneWithIDChangedBlock
在這裏 你會得知哪些地帶
在共享服務器裏改動了
你有收集這些地帶ID
我們等會兒會講怎麼處理它們
再接下來是recordZoneWithIDWasDeletedBlock
這個告訴你哪些地帶在服務器裏已經不復存在
還可以讓你清理任何本地緩存數據
之前位於那些現在不再存在的地帶裏的緩存
你會在下面的情形看到這個
就是有些東西沒有跟你的用戶分享
因爲在他們的共享數據庫裏沒有這個地帶
另一個新事物是changedTokenUpdatedBlock
我們來看一下
記得之前我們一號設備寫了一些東西到服務器
二號設備寫了一些東西
過了一會兒 這個用戶的三號設備也加入進來了
它首先要做的
是跟服務器連接並且獲取任何改動
因爲獲取所有改動爲真它要下載所有數據
但我們可能有很多數據比如這個案例裏面
服務器會覺得沒必要只在一個響應裏就將所有數據傳過來
我們分段來進行
服務器發給你一部分數據
CloudKit服務器會看到服務器還有更多數據
所以它要替你去設立另外一個操作
但它在做這步前要調用changeTokenUpdated
並且告訴你你現在在改動標記C
這讓你可以跟客戶端配合
隨之設立操作
你更新你的本地改動標記
就用不着重複你已經做了的一些事情
比如說這個客戶端替你說
“還有更多數據要從服務器傳過來我們去獲取吧
下載一些新數據”
結束後再調用changeTokenUpdated
看還有沒有新數據然後又跟服務器連接
不過這一次會有一個錯誤
你處理錯誤時可能最終還是重新調用獲取改動
但你就不用從頭從A開始了
因爲你有一個changeTokenUpdatedBlock
你的本地改動標記現在E
當你調用下一個時
服務器說“你只需從F到I的數據”
你不需要你已經處理的舊東西
這就是實現changeTokenUpdatedBlock的重要性
你就像正常情況那樣緩存服務器改動標記
我們有完成模塊
在這個例子裏是 fetchDatabaseChangesCompletionBlock
同樣地 你首先要做錯誤處理
Nihar也會談這個
然後你會得到一個最後的改動標記
如果我們沒有錯誤 最後就會是I
像正常情況一樣緩存這個標記
現在我們收集了在數據庫有變動的地帶
我們要去獲取有變動的檔案
這也就是之前那個圖表的第二步
我們通過一個新API來完成這步
CKFetchRecordZoneChangesOperation
它接受地帶ID的集合作爲參數
所以你不用擔心要根據不同帶有改動的地帶來調取檔案
你只需調用一個方法賦給它所有有變動的地帶
我們不細看代碼了不過它大概看起來是這樣
在處理檔案而非地帶的地方你會有一些完成模塊
而且在這個過程中你會收到改動標記
好 快速回顧一下我們講了什麼
你訂閱了數據改動告訴CloudKit你想接收推送
一旦用戶在另一臺設備上改動了數據
你偵聽了推送通知
當你收到推送時你連接服務器
獲取變動了的數據
這麼做的話 你的應用就能提供流暢的體驗
給你的用戶使用他們所有的設備
好 現在Nihar要上來講一些特別的最佳實踐
謝謝 Dave
大家早上好謝謝大家的到來
我是Nihar SharmaCloudKit團隊工程師
我很高興能夠跟你們分享一些CloudKit最佳實踐
我們過去幾年在Apple領悟到這些操作
你也可以在你的應用裏利用它們
我們先來看看我們要談些什麼
首先 我想說一下自動認證
Dave提了一點點我想更詳細地講講它是什麼
你怎麼用它
接着 我要講到CKOperation API
這是我們原生CloudKit框架主要用到的API
然後 我們會談你可以牢記的一些點子
在設計你應用的數據庫框架時可以用
它們讓你更有效地利用CloudKit API
最後 如我們之前告訴過你們的
錯誤處理對編寫一個CloudKit應用至關重要
我今天在這兒想重申一遍
並且探討幾個不同類型的錯誤
還有你的應用應該如何處理它們
那麼 我們開始吧
首先是自動認證
你可能熟悉這樣的一個UI
第一次啓動時應用向用戶索要很多私人信息
用戶甚至都沒開始用這個應用
而我們覺得在CloudKit我們有很好的方法
讓你增加和用戶互動的機會
不需要開門見山索要任何私人信息
我們通過CloudKit用戶記錄做到這一點
我提醒你們一下 我們給每個用戶都自動創建用戶記錄
用戶第一次用你的應用時就記錄到了你的iCloud賬戶
這樣的話 它在每個CloudKit容器裏都具有唯一性
也給你提供用戶的一個可靠的標識符
對於應用重啓 OS更新等等都非常可靠
所以你可以將這個標識符存在你的服務器上
並且可以馬上開始給用戶建立一個檔案
而當你發現他們跟你的應用有更多互動時
你這時就可以向他們徵求更多信息來充實他們的檔案
你找到當前用戶的用戶記錄ID的方法
是用CKContainer裏的fetchUserRecordIDcompletionHandler API
這就是CloudKit自動認證
我們談談CKOperation
回顧一下 有兩種主要的方法
來讓CloudKit框架將操作呈現給你的應用
一個是通過調用便利API它一次針對一個東西
二則通過相對應的CKOperation
這樣 我們呈現的每個便利API調用
一次只針對一個東西都有相對應的CKOperation
後者則是批量處理
比如說 我們有fetchWithRecordID API
在CKDatabase裏一次獲取一份檔案
我們有它對應的CKFetchRecordsOperation
它接受一個檔案ID列表並且批量獲取檔案
用這個CKOperation API有一定的優勢
相對調用便利API
我今天要講其中的很多優勢
首先
CKOperation是NSOperation子類
這意味着你有全套設備的
NSOperation API讓你可以免費使用
你可以做比如建立你的CKOperation之間依賴關係
你可以給它們的服務質量屬性賦值
讓系統知道那個操作對你有多重要
甚至是管理隊列的優先性
在你的NSOperation隊列安排它們時
你還可以取消CKOperation
就是那些已經開始執行的
我推薦你們回去讀NSOperation的參考文檔
來很好地利用CKOperation API
一個很好的參考資料是我們的進階NSOperation
即我們去年WWDC的演講
既然我們講到CloudKit操作
還有更多東西值得一提
今天我談其中三個比較重要的
第一個是CKOperation給你的可配置性
第二個是它讓你可以優化資源
針對系統還有作爲開發者的你們
最後 我想說一下壽命管理
這是我們新開的一個東西讓你可以
在iOS 9.3使用
首先 快速回顧你可以給一個CKOperation配置些什麼
操作讓你可以精確調節使用權利
調節你想不想讓這個操作的網絡活動
通過手機網絡來進行
你還可以給從服務器下載東西的操作設置關鍵詞
如果你想下載部分檔案而不是全部的檔案
社區的API不讓你做這個
你可以限制響應結果的數目
一個操作返回的結果
最後 持續運行的操作還會給你進度更新
你可以用這個來驅動一些UI元素
現在 我們來說一下資源優化
你的操作在系統中用得最多的資源
是網絡請求
現在每個便利API調用
都轉爲系統中至少一個網絡請求
所以 當你使用CKOperation批量API
你讓系統可以去最小化所需要的請求數
來將你的改動發到服務器
比如 如果你想保存一批檔案
並且你用的是CKModifiedRecordsOperation
系統會拿這批檔案並且優化需要的請求
來把這批檔案發到服務器
這樣 這不僅對系統資源是一件好事
還幫作爲開發者的你們優化你們的網絡請求限額
更進一步 CKOperation默認讓你的網絡活動
酌情進行
我們指的是你讓你的系統決定一個合適的時間
來安排你的請求
欲知更多詳情 推薦看看酌情處理屬性
它在NSURLSessionConfiguration裏
我們在CKOperation把它呈現給你的方法
是通過服務質量屬性
CKOperation有一個默認值爲實用的服務質量
任何是實用或以下的服務質量
會默認選擇這個酌情進行的行爲
所以如果你注意到CKOperation
花了比你預計的還要長很多的時間來執行
很可能就是因爲系統
覺得現在還不是一個讓你的請求發出去的好時間
還有切記的其它幾個行爲
當你選擇了酌情進行的行爲
網絡錯誤就會重新嘗試
與此同時 你默認有一個七天的資源超時
你的操作執行的每個請求都有這個默認超時
這就是資源優化
現在 我們來說說CKOperation壽命管理
在我們的平臺
你的應用退出可能有多重原因
比如 你的應用在背景可能被中止
或刪除 或者被用戶強行退出
當這些事情發生的時候你可能有一些更新正在運行
這些更新可能是用戶發起的
你就應該把它們存到服務器
不管你的應用是否已經退出
這些更新也可能因爲你有更新的運行時間比較長
但優先度比較低你想盡快完成它們
不管你的應用還在不在
在iOS 9.3裏爲了達到這個目的
我們引進了CloudKit長壽命操作的概念
這些操作一旦讓你標爲長壽命
系統就會替你的應用執行
不管你的應用還在不在
我們會緩存從這個操作得到的任何服務器響應
並且會給你提供一個API來重新處理這些響應
一旦你的應用再回來
我們來看看我們呈現的API它能做到這點
對於CKOperation這個非常直截了當
你有一個isLongLived旗標
像正常那樣建一個CKOperation
一旦你設置了這個旗標
它就成了一個長壽命操作
與此同時 你有一個操作ID
它是一個系統指定的字符串
唯一地標識每個CKOperation
我們等會兒會看看爲什麼這個很重要
下面我們講你怎樣運行一個長壽命操作的大體架構
你像正常那樣初始化一個操作
設isLongLived旗標
再加上你的參數和回調來運行這個操作
現在 當你想重新運行它的話
你可以從CKContainer類獲取這個長壽命操作
通過操作ID
如果你想留意運行的情況你可以設置回調
可以再運行一次這個操作
我們來看一個例子
假設我們運行一個長壽命fetchRecordsOperation
我們像正常那樣用參數設置這個操作
但要記得設置isLongLived旗標
並且將操作ID屬性存入我們的本地緩存
這樣我們就會記得這個操作代表了什麼
我們設置回調且把操作加入隊列
現在 當你想要重新運行時
就用CKContainer裏的fetchLongLivedOperationwithID API
獲取操作
因爲你知道操作所代表的東西
通過緩存所以你可以安全地執行它
並且設置合適的回調
你不用再設置參數或調節其它的操作屬性
你之前可能設置過
這樣重啓了操作
現在 CloudKit會重新處理我們有的所有緩存響應
給操作
讓你跟上進度
達到你的應用不在時操作所取得的進度
或者給你操作所有的結果
這也意味着這些操作會被清理
這是一個重要的信號
正常情況下發生在完成模塊
被操作調用
你要記住你的應用有至少24小時
重新運行任何他們可能加入隊列的長壽命操作
這就是關於CKOperationAPI的全部內容
現在我們轉移到數據建模的話題
今天我想給你三條主要的點子
第一條是關於數據庫架構的冗餘
你可以怎樣利用它們
還有它們怎樣幫你更有效利用CloudKit API
第二條是如何用引用
來避免你可能遇到的一類錯誤
在你CloudKit應用中
最後 我想談一下父級引用
是我們在這次發佈裏新加的一種引用
來支持CloudKit分享
那麼 我們來說說數據庫架構的冗餘
我們用開發照片分享應用的例子
現在對於這個應用 你在服務器可能有的第一個東西
就是給照片的檔案類型
你可以儲存用戶的高像素照片
是在我們某款iOS設備上照的儲存爲CKAsset
現在 假設用戶第一次啓動應用
當你像Dave之前推薦的那樣獲取改動時
你可能想展示一個縮略圖
囊括用戶所有最近的照片
就像這樣Photos應用就有這個功能
這樣一來可能會造成網絡帶寬的巨大浪費
的一種情形就是下載全部的高清資源
每次你打開這個頁面時都下載
那你該怎麼辦答案非常簡單
你可以考慮在檔案裏加入一個冗餘的域
代表縮小的資產
而這可以讓你配合使用CKOperation
和我們講過的所需關鍵詞的屬性
讓你可以獲取部分檔案
你現在可以只獲取那些你需要的關鍵詞 用來驅動UI
你用戶感興趣的UI
甚至能用結果限制的屬性
來限制你在一個頁面上顯示的結果數
這樣 你就可以把一個優化的下載加入隊列
能夠將一個動態UI呈現給你的用戶
你只在需要的時候取需要的東西
能用所需關鍵詞屬性的還有新的
CKFetchRecordZoneChangesOperation
和CKFetchRecordsOperation
兩者都從Cloud給你獲取東西
我提醒一點 就是這些API在網上也可以用
通過CloudKit JS
通過利用這些工具你讓你的用戶可以
在你的應用裏有更爲動態的體驗
因爲他們不必等你完成操作
來下載他們會用到的數據
接着 討論CKReferences我提醒你們這些是什麼
CloudKit讓你的檔案可以指向其它檔案
比如 如果我這兒有兩份檔案檔案A和檔案B
我們把引用存在檔案A上
用檔案B來給它初始化
創建了CKReference
現在假設我們想給我們的照片分享應用添加相冊
可以涵括多張照片
我們怎樣可以給這個一對多的關係建模呢？
簡單地
而又天真地 你會覺得下面的建模方法比較好
儲存檔案ID檔案ID用來引用照片檔案
把ID作爲一個數組直接存在照片所屬相冊的相冊檔案裏
這就是概念圖
現在 我們來瞧瞧當你用戶的多個設備
嘗試添加照片到相同的相冊會發生些什麼
假設我們在Cloud有一個相冊檔案
相冊還沒有照片
現在 記得你的用戶會有多臺設備
它們都獲取這個相冊記錄
看到相冊沒有照片它們很滿意
設備現在都有了新照片
它們各自有想加到同一個相冊的照片
所以它們把檔案更新加入隊列
假設iPhone檔案最先到相冊
服務器現在知道有一張照片
對其中一張照片的引用
當別的新設備加入進來並且嘗試更新時
它們更新的不再是最新的服務器檔案
所以 在這個案例裏兩臺設備都會出現錯誤
CKErrorserverRecordChanged
現在 我推薦你們去看我們的進階CloudKit演講
是2014年的WWDC你會學到更多如何處理這個錯誤的細節
不過 現在我們來看可不可以完全避免它
在這個例子裏 我們知道我們的相冊檔案會有頻繁的寫操作
所以 取而代之 如果我們一對多關係的建模
用的是一個反向指針把引用存在照片檔案上
照片歸屬這個相冊
這樣我們就徹底排除了
我們在相冊檔案上的寫操作糾紛
在這個情況下每當你加入新的照片時
你就設置它引用所屬的相冊的檔案
並且保存照片檔案
這麼做的話 你就可以完全排除掉你之前有的糾紛
你還會想知道我怎樣可以獲取所有照片
這就是我們一開始遇到的問題
爲了達到這個目的 你可以用請求
你要獲取歸屬這個相冊的所有照片記錄
這非常簡單直白
你要的就是相冊的引用域
那兒有你所有的照片檔案
下面 我們來講父級引用
今年 在CKRecord
我們加了新的一類引用叫父級引用
幫你給數據建模
並且更好地支持CloudKit分享
我們推薦的是
如果你的應用支持分享你就用父級引用
來建立一個等級制數據模型
規定好你應用分享的單元
並且根據情況來設置父級引用
我們來看看一個例子來解釋我剛說的內容
我們的照片和相冊檔案是一個父級引用的很棒的例子
相冊很明顯是照片檔案的父親
我們只需設置父母屬性
在照片檔案上指向我們相冊檔案的ID
並且保存照片檔案
現在 假設我們在我們應用裏都用這個模型
我們有一個像這樣的等級分配
現在 一個用戶想分享整個相冊
這種情況下你需要做的只是
創建一個CKShare附上相冊檔案作爲組檔案
你一下子便可以分享整個等級分層
你就是用父級引用來建立的這個等級
現在 CloudKit還支持部分分享的等級制
這種情況下比如用戶只想分享照片C
你可以創建一個分享只附上照片C
這樣
只有照片C還有它的所有子代
通過父級設置將加入這個分享
以上就是數據建模
我們來談談錯誤處理
現在 我們有不同類型的錯誤
而你的應用應該處理它們
通過幾個主要的不同方法
我們來看看它們各是什麼樣的
我們有一個簡單的例子
假設你的設備
選擇一個CKModifyRecordsOperation
嘗試跟服務器連接
服務器有可能響應兩種主要的東西
它可以說我一點兒也不喜歡這個請求
別再試着跟我連接
或者它可以說你的請求什麼都好
就是現在的時間不太合適等會兒再試一次吧
你們的應用需要處理這兩種錯誤
而且要用很不同的方法我們來仔細看看到底是什麼
第一種錯誤是致命錯誤
你基本上無能爲力
我們有幾個錯誤代碼表明你遇到的錯誤是嚴重的
比如內部錯誤服務器拒絕請求
非法參數或者權限失敗
你要在你的應用裏給你的用戶顯示合適的UI
讓他們知道出錯誤了重試也沒轍
然而 另外一種錯誤
服務器讓你歇一會兒再重試
我們會告訴你服務器想讓你等的時間
下面是一系列錯誤代碼每個裏面都嵌入了時間值
zoneBusy serviceUnavailable和requestRateLimited
當你收到這些錯誤代碼中的任意一個時
你要找到CKErrorRetryAfterKey
在錯誤的用戶信息字典裏面
你要等上面說明的時間並且重新初始化同一個CKOperation
用相同的參數並重試這個操作
下面是一個簡單的例子還有你需要的所有代碼
如何等一段時間
而CKErrorRetryAfterValue代表了這個時間值
如何重新初始化同一個CKOperation
注意 如果有些時候
你的操作可能在設備上出現錯誤
而甚至還沒連到服務器怎麼辦？
我今天講解兩種主要的情況
CloudKit可能完全用不了
第一種是設備處於下線狀態
這種情況下 我們推薦
你監測可能連到的網絡就像
在別的基於網絡的應用裏做的一樣
若你用的服務質量是用戶發起或者更高等級
而網絡錯誤不會自動爲你重試
你會看到這個錯誤代碼CKErrorNetworkUnavailable
一旦你監測可連接的網絡
你可以通過SCNetworkReachabilityAPI 做到這點
比如在系統配置框架裏
這樣你就可以讓你的用戶知道
“嘿 這些改動現還傳不到服務器上”
但我們推薦你讓你的用戶保持跟應用的互動
即便設備處於下線狀態
你應該把這些改動存在你的本地緩存中
當可連接性API告訴你設備重新上線時
你就可把CloudKit操作加入隊列並把檔案存到服務器上了
另一種主要的情況是當你想給用戶用私人數據庫
而用戶沒有登錄到一個iCloud賬戶的時候
此情況下 返回錯誤代碼CKErrorNotAuthenticatedTo
我們推薦的是 對於你所有的應用
在首次啓動一定要登記偵聽CKAccountChange通知
當它觸發時 用 accountStatuscompletionHandler API
來重新獲取當前用戶的賬戶狀態
告知他們一些操作會失敗
因爲他們沒有登錄一個iCloud賬號
我來總結一下我們今天都看了哪些內容
我們學習瞭如何訂閱並且獲取改動
來高效地和服務器同步
我們領略了使用批量CKOperation API優勢
我們推薦你所有的應用都採用它
我們也研究了幾個點子如何設計你的數據庫架構
來完全避免一類錯誤
或更有效利用CloudKit API
最後 我們探討了如何處理一些類型的錯誤
還有如何分辨它們
還有服務器的意圖 當它返回
一些特定錯誤代碼 而不是其它代碼
我們昨天有一個相關演講如果你沒有去
我推薦你回去在網上補看回來
這兒有更多的信息謝謝你們 祝你們有很棒的一天