在iOS上使用觸摸輸入
早上好
歡迎來到在iOS上使用觸摸輸入
我是Dominik Wagner我是工程師
在UIKit團隊我會告訴你
如何最好地利用我們的進展
關於Multi-Touch和Apple Pencil
首先讓我們回顧一下最近新發布的硬件
從去年WWDC起我們發佈了很多東西
比如帶3D Touch的iPhone 6s和6s plus
允許你使用每種觸摸的能力
我不會就此談太多
但是你可以瞭解Peek和Pop帶來的良好體驗
在今天晚些時候的演講“窺視3D Touch”中
我們介紹了更快的觸摸掃描從iPad Air 2和iPad Pro開始
給我們一個時間分辨率是顯示刷新的兩倍
我們還介紹了針對Apple iPad Pro的Apple Pencil
這個驚豔的設備 謝謝給你精確的定位
爲你的繪畫提供很好的精度
它有更高的時間分辨率是240赫茲
它允許你使用它的傾斜和方向當然還有力量
我們的算法組在手掌拒絕上做了很好的工作
所以你可以在繪畫時休息手掌不需要考慮它
還發布了帶有Siri Remote的Apple TV
它的軌跡主要驅動UIFocusEngine
和你與Apple TV的互動
但是你還能使用跟蹤板通過使用遊戲控制器框架
用來做爲一個遊戲控制器和獲得跟蹤板的絕對位置
最後你還可以處理跟蹤板
在UIKit觸摸處理方法中的間接觸摸
我也不會談太多這方面但有很好的Apple TV技術演講
還有昨天的Apple TV遊戲控制器輸入
那我要講什麼？
我要講你怎麼開發繪畫應用
我們會從頭開始開發一個繪畫應用
並且我會談到所有針對Apple Pencil的新API
所以你能訪問所有的新數據
我們會一步步告訴你
向你展示你可以採用的不同步驟根據你看到的
這個應用的全部代碼是可以下載的
所以你不用擔心幻燈片上的代碼晚些時候和它玩一玩
向SpeedSketch問好這是我們的例子
SpeedSketch是一張紙你可以在上面繪畫
它完全支持iPad Pro上的Apple Pencil
和iPhone 6S上的3D Touch
它還工作在所有以前的iOS設備上
讓我們先談談模型
這是一個筆畫這是UIKit如何看到取樣
每個點是一個實例
和可變的UITouch是同樣的實例
你傳遞給觸摸處理方法
並且我們建模我們的數據爲一系列筆畫
因爲UITouch是
一個可變量表示一個觸摸序列
我們需要在觸摸處理方法中從UITouch中複製出數據
到更靜態的東西中
所以我們會創建一個筆畫取樣
做爲我們的數據結構最深層的元素
它現在只包括UITouch的位置
稍後我們會填入額外的數據
我們會把那些取樣放入一個筆畫
是一個筆畫取樣數組
我們有一些方法來添加它們
因爲我們想用筆畫
作爲我們的主數據獲取結構它還有一個狀態
當用戶在繪畫時它是活動的是完成
當用戶完成時可以是取消
如果另一個用戶操作造成它被取消
所以我們可以拋棄它而不是保留它
最後我們把這些放入一個筆畫集合
它是一個筆畫數組我們會添加完成的筆畫
要使它成爲我們的應用的一個完整的數據模型
我們要把活動筆畫做爲一個可選項
這樣我們可以用這個筆畫集合作爲一個完整應用的數據模型
下一個問題是在哪獲取那些筆畫
基本上你有3個地方可以這麼做
第一個是UIGestureRecognizer
一個定製的UIGestureRecognizer子類
下一個要尋找的地方是一個UIView子類
觸摸到達這裏
你可以順着響應器鏈向上處理我想
我想你想想這個的順序
若你可以用一個定製子類或UIGestureRecognizer來做
第二用UIView並儘可能接近你能得到事件的地方
最後纔不得不沿着響應器鏈向上
這就是我們要做的
我們創建一個子類獨有的筆畫手勢識別器
我們會把我們的主視圖控制器作爲目標
然後在行動方法中
我們會用筆畫觸發一個視圖重繪
讓我們開始創建這個手勢識別器子類
要做的第一件事是導入UIGestureRecognizer子類
這向你暴露UIGestureRecognizer的內部
這樣你可以創建子類
但要小心不要使用這些內部
在UIGestureRecognizer以外
比如狀態設置器被暴露如果你導入它
你不應該在子類以外使用它
否則手勢系統會工作異常你會有許多問題需要調試
讓我們添加我們的筆畫做爲主數據結構
在我們的手勢識別器中獲得筆畫
並實現觸摸處理方法
因爲我們做很多相似的事情在總計4個觸摸處理方法中
我們會有一個輔助方法實際上查看這一系列UITouch
決定我們是否對觸摸的其中之一感興趣
把它加入我們的數據模型就是複製它的位置
在此時作爲一個取樣並返回給我們
如果你對此感興趣
我們會在這個觸摸開始函數中使用輔助方法
並把狀態設置成開始
對UIGestureRecognizer這是反常的
因爲在狀態可能和狀態開始之間的時間
是不同的手勢識別器發生競爭的時間處理這些觸摸序列
但是對我們的筆畫我們很想它馬上開始
當觸摸向下傳遞時
所以這是我們要做的
在touchesMoved中我們做相同的事並把狀態切換成已改變
注意在手勢識別器中
每個狀態改變觸發一個行動方法即使是相同的
我們對觸摸結束和取消做相同的事
最後我們重置手勢識別器用一個新的筆畫取代之前那個
這樣我們能獲取下一個
做爲好公民我們總是調用super.reset
讓我們在視圖控制器中使用它
在viewDidLoad函數中我們設置筆畫手勢識別器
把我們自己做爲目標動作是筆畫更新了
然後把它加到主視圖
在更新回調中我們從手勢中獲得筆畫
然後設置到我們的視圖中
現在就做這些
我告訴過你筆畫集合
只是提一下我想要保持它簡單
所以讓我們看看它給我們什麼
我總是喜歡這一刻一些東西第一次運行
你看到的是這是Pencil在屏幕上的位置
讓我們看一看
這看起來不好
發生了什麼？
讓我們仔細看看慢動作
這完全不是我們想要的
我們看到了什麼？
我們有Pencil的位置
我們和最後畫的那條線之間有非常非常大的距離
我們畫的線很長而且不斷改變方向
這不是我期待的
我們有很好的時間分辨率
爲什麼它看起來是這樣？
顯然我們錯過了一些事件
因爲多個原因我們錯過了一些事件
其中之一是我們的繪製引擎的實現很幼稚
它每次都繪製一個完整位圖以及每次有事件進入時
它的速度不足以跟上顯示率
我們會晚點談到這方面
最重要的是我們沒有用iOS 9的新API
我們應該這麼做來獲得我們錯過的事件
因此我想再仔細地看看筆畫
讓我們再看一次
這裏的所有取樣我們都想有並且看到
在我們的觸摸處理方法中我們永遠都得到開始
和結束 但是在中間我們得到touchesMoved
我們沒有得到所有的作爲取樣進來的touchesMoved
這是有原因的
如果我們發給你所有的touchesMoved
即使你阻塞主線程
你會看到一些東西類似於重播
觸摸互動的重播如果你是進行實時互動
這完全不是你想要的
你想要發送給你的最新位置
那是我們通常做的
那是我們在OS 9之前做在
實際上我們拋棄了其他事件
如果你在主循環中不夠快
那麼你看不到它們中的任何一個但是從iOS 9開始
我們使你能訪問以前的事件
另一個原因是我們的數字轉換器現在比顯示更快
我們不想在我們有的每個數據點都給你一個事件
你會進行太多工作
所以我們試着把它們合併在一起
每次屏幕刷新發送一個
你現在能做的是使用你從API獲得的實時觸摸
查詢錯過的觸摸
這將包括你當前查詢的觸摸
這樣你就有個完整一致的圖像
這些觸摸被稱爲合併觸摸
你爲所有的觸摸事件做這件事
也爲開始和結束這麼做
因爲你要待在相同的地方
或者處理你的實時觸摸或者合併觸摸
因爲視圖裏有方法比如之前位置
是之前觸摸的引用如果你混合搭配
那你會遇到問題
現在我們知道怎麼獲得它們讓我們在代碼中這麼做
這個方法是coalescedTouches爲了觸摸UIEvent
你在觸摸處理回調函數中獲得事件
這個結果可選不是因爲我們會給你無值
任何時候如果你只有一個觸摸而且我們沒有合併觸摸
這是因爲你可以要求任何不是事件一部分的UI測試
那麼你會得到無值
你一定會得到UITouch
至少你放入的一個即使我們沒有合併更多
所以你不需要在這用一個if語句
讓我們把這些用在代碼中
在我們的代碼中 看看感興趣的觸摸
我們進行了觸摸追加我們需要做的是循環
在合併觸摸中並且追加那些
這給你所有數據
讓我們看看它看起來是怎樣的
很好 現在我們真的有所有數據了
讓我們比較一下
在有一個停止的慢動作中
你在這看到什麼
這是Pencil現在玻璃上的位置
灰色的是合併觸摸
現在調試繪製引擎
黑色的也是合併觸摸但是對應那些實時觸摸
你還可以看到有太多合併觸摸
如果我們的數字轉換器是以四倍於顯示的速度運行 你看到
我們應該看到黑色之間平均應該有三個灰色
這太多了
我們在末尾的間隙也很大
這引起延遲用戶可見的延遲
我們看到什麼？
我們繪製引擎的速度還是落後了
我們目前還沒有解決它
但是UIKit通過合併觸摸幫助我們
最後的繪製有它需要的所有數據
所以如果你只獲取這一類中的一件事
那麼用合併觸摸如果你真的想
獲得你Pencil的豐富數據
那繪製的問題出在哪？
你不應該在每個觸摸事件上繪製
因爲顯示刷新率只有60赫茲
儘管我們試着每幀只傳遞一個事件
你可以知道有時候是不可能的
因爲如果你把手指和Pencil混合
或者有其他事件傳入我們需要按順序發送它們
因此你需要準備好獲得比顯示刷新率多的事件
但是不要試着繪製更快
因爲這隻會影響性能並增加延遲
做一些甚至不會顯示在屏幕上的工作
那你應該何時渲染？
在我們的例子中我們使用一個普通的UIView和核心圖像
在這個情況下你應該在那個視圖中使用需要顯示
來標記那個視圖需要更新並把工作交給CA
來調用你需要實現的繪製方法而不是你定製的位圖繪製
如果你在用一個GLKView或MetalView
你還可以選擇這些行爲而不是一個不變的更新
通過把enableSetsNeedsDisplay屬性設置爲真
這樣如果你想要的話那些視圖的行爲是一樣的
如果你想用固定的速度繪製
然後請用固定的速度繪製不要根據進入的事件
你可以用Metal和GLViews的內部機制這麼做
或者你可以用CADisplayLink這麼做
在你的DisplayLink喚醒時 調用顯示
我們所做的是在我們的StrokesCGView中
一個在筆畫上的didSet函數用drawImageAndUpdate函數繪製
這創建位圖這並不好
讓我們用setsNeedsDisplay
並且把繪製代碼移動到繪製方法中
如果你使用一個普通的UFU你可以做得更好
你可以只標記改變了的區域用setNeedsDisplayIn(rect)
這也需要一些觸摸的檔案管理
因爲你的繪製可能稍微大於改變了的觸摸
和採樣中的觸摸改變
你可以看一個示例代碼來得到一個例子
關於你如何進行這類檔案管理
更進一步 你可以在這一層上激活drawsAsynchronously
這把所有你在繪製矩形裏所做的繪製向上傳遞到CG和CA
CA在主線程外繪製它
使你的主線程能更快進行事件處理
要這麼做你只需要簡單地設置drawsAsynchronously爲真
在你的擴散層上
讓我們看看這帶我們進行了多遠
再一次在慢動作中
現在我們有我說過的穩定的合併觸摸數量
大約3個合併觸摸和1個黑色的
但我們還是有些延遲
但是它小多了因爲我們按顯示的速度進行繪製
我們只有剩餘的延遲
我們怎麼改進它？
從iOS 9起我們有一個功能叫做預測觸摸
預測觸摸讓你瞥見未來
和合並觸摸的使用方法相同你詢問事件
觸摸的預測觸摸
你得到未來的一個觸摸數組
你對這些觸摸做什麼？
你臨時把它們加入你的數據結構
他們在每個事件回調中改變
所以你必須臨時加入它們
你根據你的應用選擇它們的外觀
我強烈推薦你使它們看起來像真正的觸摸
看看結果
除非我們的預測偏差太多那麼降低它
使它看起來像暫定的使它仍然看起來接近Pencil
讓我們看看代碼
現在在我們的觸摸設置方法當你添加合併觸摸之後
你臨時添加預測觸摸
你需要確保刪除之前添加的臨時觸摸
我會給你看一個視頻看看它看起來怎樣
和你應該做的對比
我會用紅色高亮預測觸摸這樣我們可以看到
如果它對我們的例子足夠好
再次在慢動作中因爲這很快
這些是預測觸摸它使你更接近實際的Pencil位置
這非常非常有助於屏幕上可見的延遲
你可以在這個例子中看到這工作得很好
所以我們會使用它們
用我們繪製普通觸摸一樣的方式繪製它們
目前爲止我們看到什麼？
我們看到了如何收集輸入使用定製的UIGestureRecognizer
如何訪問合併觸摸
如何使渲染更快並有效率
最後 如何使用預測觸摸
所有的這些技術工作在所有iOS設備上
我們在例子中針對Pencil使用它們但它們基本在其它設備也都運作
現在讓我們看看新Apple Pencil API
讓我們從觸摸類型開始
有了Apple PencilUITouch添加了新類型的方法
UITouch類型可以是三個值中的一個
可以是直接是你知道的以前的所有觸摸
有隻針對Siri Remote的間接觸摸
還有針對Apple Pencil的尖筆
你用Apple Pencil可獲得的第一個東西是更高的精度
你在視圖中用精確位置
你還在視圖中有精確的以前的位置
無論何時你想要精確位置時你應該用那些
針對像是繪畫的一些事
如果你想進行點擊測試
你還是應該用以前的叫做位置在
和以前的位置在
但是對繪畫 這會帶來不同
沒有精確位置
你會在你的繪畫中加入一些樓梯狀的圖案
這是你不想看到的
你可以向所有的觸摸要求精確位置
你將只獲得普通的
接下來有力量
力量做爲一個叫作力量的屬性暴露還有一個最大可能力量
它們是CGFloat類型
它們的範圍是0到最大可能力量
1.0表示平均的觸摸
所以它們不是物理值
所以你不應該做任何和實際的力量有關的事
但是你用這些值來影響你的繪畫
在所有之前的設備和普通手指觸摸它會永遠返回0
關於力量的快速說明
因爲我們把力量加入了UITouch
在觸摸處理中有一個不同
touchesMoved被更多地調用
因爲你想要能夠區分力量是否變化了
我們現在會一直髮送touchesMoved給你
以前我們努力嘗試只發送touchesMoved給你
當位置改變時
那是通過普通位置甚至不是精確位置
這給了你一些暗示
比如你在野外看到很多這種
若你在touchesMoved中做了
如果你有意取消一個點擊這不好
這不再工作
你看到在iPhone 6s上或者用Pencil
如果你不得不非常非常輕地觸摸屏幕
這是你會遇到的
你需要看看你的觸摸處理代碼
你應該怎麼做？
如果可以你應該使用UITouchGesturesRecognizer
因爲它封裝了我們的所有知識
至少你需要做的事是記得觸摸開始的位置
只取消它
當你從開始位置移動了足夠遠時
讓我們把力量加入模型到我們的筆畫取樣中
我們用一個可選的力量變量這麼做
我們晚點會添加其他東西我不會再顯示這個幻燈片
所以讓我們看看力量在我們的繪製中是什麼樣的
很好 我們做了什麼？
我們改變了力量的寬度空間
下一個是傾斜
Apple Pencil使你能利用它和設備之間的傾斜
這是用角度來測量的
在Pencil和設備之間我們調用高度
這個高度角度作爲altitudeAngle暴露
是一個CGFloat
它報告一個角度的弧度在大概10度到90度之間的範圍
第二個部分是方向
方向是針對設備平面測量的
測量正的x方向和Pencil來自的方向之間
這叫做方位角
方位角和傾斜一起構成Pencil的完整位置
你用它來繪畫時可以驅動你的UI或者數據點
所以方位角依賴你的設備方向
你需要在視圖中調用一個方法叫azimuthAngle
大部分時候你可能想用一個矢量
所以我們在視圖中向你暴露方位角單位矢量
這個矢量會指向Pencil來自的方向
它的大小是1
下一個 力量
Pencil力量和3D Touch力量的行爲有些不同
力量是沿着Pencil的軸測量的
3D Touch的力量是在屏幕上測量的
和設備平面垂直
這造成一些不同我催促你們試一試
如果你們想要得到實際力量所有你的繪畫工具的垂直力量
因爲它們真的感覺不同
幸運的是計算這個分量很容易
這是這麼做的代碼
你可以獲得垂直力量通過力量除以
高度角度的正弦
要確保你保持在同樣的範圍內
你應該取它和最大可能力量的最小值
最後一個關於Apple Pencil力量的消息
它是在Pencil內測量的
然後無線傳輸給iPad
這是通過無線傳輸的所有屬性
這表明需要花一點時間而且數據有可能丟失
所以爲了不讓你等待對無線傳輸的力量
我們決定首先給你估計的屬性
並稍後更新它們這樣你能有最好的體驗
爲此我們在UITouch上暴露了估計屬性
它的類型是UITouchProperties
所以估計屬性
可以有一個力量值
對你得到的第一個Apple Pencil事件總爲真
但是方位角和高度也可以被標記爲估計的
這發生在你從邊上進入
我們不是百分之百確定值是什麼或者你在離你手指很近的地方繪畫
因爲我們的傳感器不能非常精確地偵測它們
我們告訴你它們是估計的這樣你可以做一些事
比如當從邊上進入時
你可以在得到第一個確定的值後回頭填充它們
在我給你的例子中
我那麼做來闡明那點
還有位置只對預測觸摸是估計屬性
它給你一個簡單的方法區分預測觸摸和普通的觸摸
關於更新我們也有估計屬性
期待更新
它的類型也是UITouchProperties現在只有力量
也許以後會有方位角和高度
但是現在只有力量值如果方位角和高度被設置
我們會在未來向你發送更新
我們還會在叫做觸摸估計屬性更新的新響應器中這麼做
我們還會在事後這麼做
所以我們會在觸摸開始時發送觸摸給你
並在稍後發送更新
讓我們看看這些
所以你要怎麼做？
當觸摸開始或移動時
你在觸摸上檢查estimatedProperties-ExpectedUpdates
如果它不爲空
你在UITouch使用estimationUpdateIndex
它是一個索引號 只針對觸摸被設置
期待一個更新或表示一個更新
並用它儲存你想更新的東西
你當前的觸摸取樣在一個字典裏你可以晚點查詢它
在touchesEstimated-PropertiesUpdated中
然後你查詢你的取樣
使用觸摸的估計更新
你得到一個更新是那些期待獲得更新的值
注意 一些更新會在觸摸結束後到達
這是一個關於生命週期的事你需要注意到
如果你不在觸摸結束後保持數據結構
你會看到估計的力量
出現在你的筆畫的末尾它看起來會很怪
讓我們看看代碼
我們有touchesEstimated-PropertiesUpdated
我們遍歷觸摸
我們查詢估計索引因爲我們在這個方法中
我們可以隱性地打開它
我們找到我們的在取樣索引上的取樣
我們更新取樣像我告訴過你的
我們只在那個方法中更新數值
我們在之前期待更新
然後我們更新我們的筆畫爲了以防未來
我們還檢查這個觸摸是否還期待更新
只有它不的時候我們把它移出集合
讓我們在活動中看看這
我試着用方位角角度
來做一個書法Pencil模擬
現在我們有所有我們想要的數據
讓我們看看它沒有調試模式
它看起來難道不好？
我連接所有從硬件得到的點
並沒有做插值或幻想的事
像是你的繪製引擎會做的
有了它 讓我們爲最終應用做一些畫龍點睛的事
目前爲止我們只是繪製整個屏幕
我們不想被這麼限制
讓我們支持任意畫布尺寸
爲此 我們在一個容器視圖中包括我們的筆畫視圖
和一點陰影
把它放到你的滾動視圖中我們完成了 對嗎
還沒有
我們需要考慮如何處理手勢
因爲滾動視圖UIPanGestureRecognizer
和我們的StrokeGestureRecognizer衝突
如果我們不做改變我們會永遠畫筆畫
我們永遠不能滾動
這不是我們想要的
一個方法是禁止用Apple Pencil滾動
這對註釋應用之類的會有用
你總是想只用Pencil進行註釋
特別地禁用那
你可以那麼做因爲我們添加了被允許的觸摸類型
到UIGestureRecognizer中
UITouch類型是一個觸摸類型的NSNumber數組
它默認是所有觸摸類型
我們在這要做的是
在這個例子中我們從滾動視圖中得到panGestureRecognizer
我們會設置允許的觸摸類型
只允許直接觸摸所以它只對手指反應
我們會改變筆畫識別器只允許尖筆
這顯然不是全部
在代碼例子中你可以看到一個實現
但是根據使用動態切換
更復雜一點
但是它說明一點是你可以限制你的觸摸處理
只針對Pencil或普通觸摸
最後的一點注意事項
UIGestureRecognizer有一個新屬性
叫做requiresExclusiveTouchType
雖然我們的手勢識別器默認針對所有觸摸類型
如果它們看到一個觸摸並開始識別它們會堅持那個觸摸類型
這樣你不會意外捏Pencil和手指
這是你通常想UIGestureRecognizer做的
如果你不希望這樣 你設置requiresExclusiveTouchType爲假
這樣你可以在手指和Pencil間識別
來總結一下 我展示了所有UITouch新屬性
這樣你可以理解Apple Pencil
我展示瞭如何用合併和預測觸摸
來獲得最豐富的繪畫數據並有最少的延遲
我告訴你們屬性估計我們爲什麼這麼做
你如何實際更新數據得到Pencil提供的完整豐富數據
我展示瞭如何調整手勢來只對Pencil或手指反應
這是一個已經存在的示例應用的截圖
默認使用漂亮的書法鋼筆
對你來說更有趣
它還有調試模式你看到由它們組成的視頻
你可以看到你的合併觸摸的行爲
它們在邊界是怎麼被估計的還看到傾斜和方位角
玩一玩它來看看你的所有觸摸處理怎麼工作
這個演講的完整信息可以在這個URL獲得
昨天我們有Apple TV控制遊戲輸入
Siri Remote處理
“窺視3D Touch”會向你展示更高層的互動
有了3D Touch中的力量來提供Peek和Pop體驗
要知道更多觸摸到顯示的延遲
你應該看看去年的iOS上的高級觸摸輸入
就是這些了
非常感謝