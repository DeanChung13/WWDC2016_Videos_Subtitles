GameplayKit的新特性
大家早上好
我是Bruno Sommer
我是Apple的遊戲技術工程師
“GameplayKit的新特性”
去年 我們介紹了GameplayKit
是Apple的一個高級遊戲框架
GameplayKit是一個集合
包含一些常用的架構模式數據結構和算法
這允許我們的開發者開發很棒的
引人入勝的玩法在他們開發的遊戲中
GameplayKit作爲你的工具箱
爲了很棒的遊戲體驗
所以不管你要開發什麼類型的遊戲
不管它是遊戲平臺還是RPG或城市建設者
你總可以在GameplayKit中找到能方便開發的東西
並讓你的遊戲更加健壯
去年我們引入了GameplayKit
它由七個主要系統構成
比如實體和組件 狀態機
以及我們的遊戲質量無規源
今年 我們在尋路 代理和遊戲AI方面進行了提升
還向GameplayKit中引入三個新的主要系統
我們有一個很強大的區域分割系統
這將允許你獲得很好的表現
在遊戲的運行時查詢中
你必須有一個很強大的過程生成系統
來製作引人入勝的運行時內容
今年 我們也集成了
GameplayKit在Xcode遊戲編輯器中
所以許多曾經只能在代碼中使用的工作流
現在可以直接在數據編輯器中使用不需要重新編譯
所以我們今天內容很多
我打算直接說尋路中的新功能
去年 我們介紹了障礙物圖
這些是我們的圖類型它們負責處理
你的遊戲世界中不可同行的障礙物的集合
在名字之下 我們使用了一系列視野算法
來在障礙物之間繪製可通行區域
現在這個方法很強大
它生成了質量很高的路徑
但是對較大的遊戲世界而言
以及障礙物數量較大的遊戲世界
計算過程強度很高
在計算並保存結果時
所以今年 我們提供給大家另一個選擇
我們要引入GKMeshGraph
現在 這很類似我們的障礙物圖
再一次 我們要處理遊戲世界中不可通過的障礙物
但是現在我們不再使用視野直線來計算可通行區域
在這些障礙物之間
我們要將這個區域分成三角形
我們由之計算出一個三角形網狀圖
這樣每一個可通行的點
在你的遊戲世界中由僅僅一個三角形代表
這個新的三角化方法一樣會生成很高質量的路徑
而且附加好處是計算起來很快
保存起來成本很低尤其是對很大的遊戲世界
此外 它的靈活性很高在計算節點
應該處在網狀圖的哪個位置時
你可以把它們放在三教中心三角的定點上
與三角形的邊上以及所有存在的組合
讓我們看一個小代碼示例
展示GameplayKit中用網狀圖的樣子
你們會對它的樣子很熟悉
和曾經的障礙物圖相較
它們都在以不同方式解決同樣的問題
在這裏的最上端我要製作我的網狀圖
我要傳入的緩存半徑爲10
這裏的緩存半徑關聯於你的代理的尺度
它們負責在你的世界中進行尋路工作
我們要手工的在後臺提高你的障礙物的尺寸
來彌補代理尺寸
現在我要傳入兩點(0, 0)和(1000, 1000)
這是我的網狀圖要代表的遊戲世界的跨度
下一步 我要設置我的網狀圖的三角化模式
這就是節點放置的靈活性所在
即我剛纔所提到的
現在我要具體地將節點放在
三角形的定點上以及三角形的中心
最後 我們要將障礙物集合添加到網狀圖中
我們有一個障礙物集合與我們的遊戲世界關聯
而後我們要調用三角化
這會將這些障礙圖託付給圖
它負責運行背後的三角化算法
而後就完成了
這個圖已經可以在我們的遊戲中進行尋路了
除了我們的網狀圖之外
今年我們還介紹了尋路中定製節點類別
我們的一些圖會自動的實例化它們的節點
這就是我們的格子圖障礙圖和網狀圖
在實例化的時候
你可以選擇指定一個自定義節點類別來讓它們實例化
這將會大有用處如果你需要附加任何自定義數據
或邏輯在你的節點上這有時會很有用
取決於你想要製作的遊戲
我們要調用合適的init()
在我們生成了我們的原始節點類型時
還有 這些所有類型的圖現都支持Object-C和Swift屬性
所以你在訪問自定義節點時不需要類型轉換
這就是今年尋路中的新特性
現在讓我們繼續說說代理中的新特性
說些GameplayKit中有關代理的令人振奮的事情
他們是自動運動的實體
被一系列的目標和行爲控制
它們也被一系列現實的物理限制所侷限
比如速度 質量 躲避障礙和尋路
在此右側 你看到一系列目標
供你使用 來達到你在你的遊戲中想要的行爲
比如尋找與躲避或者漫遊與逃跑
原來 代理是純2D的
今年 我們很激動地宣佈我們要將其帶入3D
相關類叫GKAgent3D
用戶界面與2D的變形很像
主要的區別在於其位置是三個浮點
旋轉也是三階矩陣流
所有的目標和行爲都被支持
有關這次改變要提到幾點
我們改了GKPath來同時支持2D和3D點
考慮到遵從路徑的目標
考慮到躲避障礙物目標中的障礙物
如果你要使用3D的障礙它們依然存在於一個平面上
所以你要選擇一個平面對你的遊戲有意義
除了將代理帶入3D以外
今年我們還引入了行爲成分
我們引入新類GKCompositeBehavior它是GKBehavior的子類
這是一個行爲的加權集合
這和剛纔行爲與目標的關係很像
行爲是一個目標的加權合集
它是完全可嵌套的所以你現在可以完成
很有趣的嵌套行爲在你的遊戲中的行爲
這也使得它們更易於維護尤其當你在完成
你的遊戲中的很多的行爲時
讓我們很快地看看代碼示例關於實際情況下的行爲成分
在這裏的最上我要創建一個羣聚行爲
通過結合隊列 黏合與分離這三個目標
下一步 我要些障礙物和敵人添加到遊戲中
我需要我的代理來躲避
我們要製作一個躲避行爲
通過結合avoidObstacles和avoidEnemies目標
然後我要結合這兩個行爲成爲一個新的合併行爲
很高效地合二爲一
最終 我要製作我的代理
我要將我的組合行爲設置爲代理的行爲
現在可以運行了
下一次我們更新這個代理時它同時會正確地嘗試
來達到這兩個子目標或是子行爲
這就是今年代理的新特性了
讓我們繼續說說我們的全新空間分割系統
先介紹一點空間分割的背景知識
可能對你的遊戲很重要
經常在我們完成高級遊戲編程時
我們會問好多有關遊戲世界的空間問題
比如 有多少敵人離玩家較近？
或是 在我的世界中所有的物品都在哪裏？
或是在這一幀中哪個拋射體會擊中玩家？
尤其對於更大的遊戲世界
或是有大量遊戲物體的遊戲世界
回答這類問題可能開銷很大
在遊戲編程中 我們往往加速這一類的空間查詢
通過使用一種叫空間分割的緩存
總覽我們所提供的
在我們的空間分割系統中
這是一個樹狀數據結構集合 能讓你
基於空間緩存遊戲物體
你將物體添加到這些樹狀數據結構中
它們在底層會聚集爲層級與桶
然後未來查詢這些物體時效率就會高得多
今年 我們引入了三個這樣的數據結構
供大家進行空間劃分所需
我們有R-trees、quadtrees和octrees
讓我們深入這些數據結構分析
先說R-tree
R-tree是一個樹狀數據結構
內有一系列的層級桶
每當你向一個R-tree添加一個對象時 它會進入其中一個桶
所有這些桶都附帶一個包圍盒與之關聯
它是該桶中所有的子對象的包圍盒的總和
R-tree有一個特定的規則
每當這些桶變得太大時就需要被分割
這些桶的最大尺寸是一個由用戶配置的參數
我們還有一系列策略供使用
來決定這些桶應當如何分割
我們可以很簡單的分割或是嘗試進行線性優化
與二次的距離或是嘗試降低桶之間的重疊
我將給大家一個很快的視覺樣例
關於構建簡單的R-tree是什麼樣子的
比如說 我有一個太空遊戲裏面有一些宇宙飛船和小行星
我要將一個宇宙飛船添加到R-tree中 它進入了一個桶
它就是那個飛船的包圍盒
然後我要添加兩個小行星到桶中
你可以看到它變大了來容納這些物體
我在這個R-tree中指定了規則
當這些桶超過三個物體時需要進行分割
所以我要再向這個桶中添加第四個物體
現在這個桶太大了它需要被分割
我們要進行一個簡單的線性距離分割
最後結果是兩個桶
再一次 我向右側的桶中添加了兩個物體
這個桶又變得太大需要被分割開
再一次 我們要完成一次線性分割 得到兩個桶
這就是R-tree在底層的運作模式了
讓我們繼續說quadtree和octree
我將這兩個一起說
因爲它們都在解決同樣的問題只不過quadtree解決2D
而octree解決3D
界面是一樣的
這些有一系列等級和層次的樹狀數據結構
在每一層中空間也被均等的分割
在右側我有一個quadtree的示例
你可以在左上側看到我已經將這個扇形區域細分過了
在新的被分割扇形的左上側我再一次進行分割
所以quadtree和octree都有個與之關聯最大單元扇形尺寸
這控制了這些樹的最大成長深度
以及這些單元扇形的細分極限
現在 當你向quadtree與octree中添加對象時
它會被放在一個它能佔滿的最小隔間中
關於該最大隔間尺寸給大家一小貼士
它的關聯度很高這個值很重要 尤其關於
這些數據結構的表現性能
所以你應該選擇一個隔間尺寸
或一個最大隔間尺寸對遊戲最有意義
一般來說 這個關聯於
你的遊戲世界中一些較小的遊戲物體
我給大家一個構建quadtree的視覺示例
同樣的示例 宇宙飛船和小行星
我向quadtree中插入一宇宙飛船
被放置在兩層下的左邊的扇形區域中
我要添加一些更大的物體它們被放置在更上一層
這裏注意左邊的小行星
它有些跨越了扇形的邊界
它事實上需要處在更高一層
因爲它不能很好地安放在任何一個隔間中
最終 我再添加一些更小的物體
你可以看到它們處在向下三層的位置
這就是底層的運作模式了
當你使用quadtree或是octree時
實際情況中quadtree的代碼示例
最上部我要創造我的quadtree
我要傳入一個quad這是我的遊戲世界中的區域
我想讓這quadtree代表
我們要覆蓋遊戲世界中(0, 0)和(1000, 1000)間的區域
我要指定最小隔間尺寸爲100
這個quadtree中沒哪個隔間可以小於100個單位
我在遊戲世界中還有一些敵人
我要將它們添加到我的quadtree中
要注意這些敵人也有一個quad與他們關聯
這就是我們的遊戲世界中的敵人所處的地方
也是它們將在quadtree中終止的地方
最後 我要在quadtree中進行一次查詢
我要讓quadtree給我所有的物體
在quadtree的(0, 0)和(1000, 1000)之間
在我的遊戲世界中
結果我的三個敵人都在這個範圍中
我要在查詢後獲得這所有三個敵人
這就是GameplayKit中空間劃分了
讓我們繼續說說我們的過程生成系統
先說說一點背景知識有關爲什麼過程生成
可能對你很重要
我相信大家都很熟悉遊戲中的預製內容
這是我們在遊戲運行前我們製作的內容
甚至是在遊戲上市之前
這些包括 藝術家設計或是設計師設計的水平
或藝術家開發的結構或特質
這些是很棒的資產它們對許多遊戲很有好處
但對於其他的遊戲以及特定的題材
你會遇到一些問題因爲這些資產是靜態的
它們在運行時不怎麼變化
所以尤其當我在尋找一種隨機的感覺時
需要每次玩遊戲時都感覺到新
我就不能使用這種靜態的資產了
所以我需要的是過程內容
比如隨機生成的世界
過程生成的結構或高度地圖
我們要製作遊戲中的這些過程內容
我們真正需要的是一種連貫的隨機性的來源
我所嘗試製作的許多這種隨機元素都存在於自然中
比如世界 結構和高度地圖
我們需要一種隨機性能在空間上具有意義
能有一個潛在的空間模式與之對應
現在 你可能對自己說
可以直接使用隨機數生成器對嗎？
我可以從隨機數生成器中獲取一些數值
來製作我的隨機內容然後就完成了
所有嘗試這麼做的人很快就會遇到障礙
隨機數生成器的輸出波動很大
連續的調用結果很難有空間上有意義的聯繫
嘗試決定論也是很有挑戰性的
每當我隨機生成內容時我希望它能展示同樣的內容
如果我給它同樣的種子
我們要的來源應提供一致的隨機性
有一種這樣的來源叫噪聲
噪聲是一個函數它接收一個輸入 並輸出數值
但這個關聯之間還有一些規則
對於輸入中的微小變化輸出的變化也很小
如果輸入變化很大我就會得到隨機的
但依然在空間上有意義的輸出變化
在這個噪聲來源中有一些隱含的模式
噪聲函數對於整個輸入域來說是無窮的
它無窮地伸展而且它們具有確定性
給定同樣的輸入我總是會獲得同樣的輸出
所以一旦你使用這個噪聲函數我們可以在特定間隔處取樣
間隔與我要製作的遊戲與其內容類型相關
所以如果我要隨機生成世界時
它可能是座標或是瓦片索引或是生物指數
如果我要隨機生成材質時
它可以是貼圖像素或是像素等等
概述一下我們所提供的
通過我們的過程生成系統和我們的噪聲系統
你有一系列的噪聲來源供你使用與取樣
來製作遊戲中有意義的內容
這些是類似於比較隨機的噪聲
比如Perlin噪聲和Voronoi噪聲
還有幾何噪聲源比如巨浪
與球體 脊與圓柱
以及一些常量噪聲源比如西洋棋跳盤模式
或是常量噪聲函數
然後你就可以組合這些噪聲源成爲一個噪聲物體
並在其上展示一系列的變換
這些包括結合噪聲源
或是轉化 度量 旋轉噪聲源
一旦我們以某種有意義的方式將它們結合成一個噪聲物體時
我們而後可以對隱含的一個區域的噪聲地圖 噪聲函數取樣
在噪聲地圖中 我們獲取採樣然後製作我們的遊戲內容
讓我們再深入一下聊聊我們的噪聲源
現在 我們所有的噪聲源輸出值在負1與1之間
我們一會針對這個再多說一些
它們接收參數來調整它們的不同的噪聲輸出
在這些噪聲函數之下
所以對於我們隨機性與一致性較強的噪聲源 如Perlin和Voronoi
它們可以使用GKRandomSource作爲種子
它們可以接收一系列參數來調整它們隱含的模式
對於偏幾何的噪聲源可以接收參數來修改形狀
比如球體和圓柱體的尺寸或是脊與巨浪的頻率
一旦我們有了合適的噪聲源
我們就可將它們結合爲一個GKNoiseObject
它擁有所有必要的函數以進行變換 組合和修改
我們的噪聲源以及許多常用的數學
與支持的邏輯操作
如果我嘗試組合噪聲源我可以做加法 乘法 取最大最小值
但若我要變換單一的噪聲源時
我可以縮放、旋轉、變換
或者我可以通過取絕對值取極限 取相反數來進行修改
一旦我們找到了喜歡的噪聲
而後我們可以對該噪聲的一個區域進行取樣
對隱含的噪聲函數通過一個GKNoiseMap對象
你指定一個起源與尺度
這就是我們要取樣的隱含的噪聲圖的區域
你還需要指定一個樣本數量
我們要在這個區域中對該噪聲函數進行幾次取樣？
我取樣的保真度是多高？
當我們對區域完成取樣後
我們就可以獲得該噪聲圖上任意位置的值
再說一次 我剛纔提到了範圍是負1到1
在運行時 你可以選擇按需覆蓋某些值
若你的遊戲世界改變
這些理解起來並不輕鬆
我認爲解釋清楚這些的最佳方式是給出視覺例子
假設我要爲我的遊戲隨機生成一個地圖
我要根據地球的生物羣系來對其建立模型
我想讓它看起來很真實
沙漠 樹林 北極區諸如此類
第一 這是你爲了完成需求可以使用的一種方法
這裏我生成了兩個Perlin噪聲圖
我將左邊的稱爲溼度圖
在我的遊戲世界的任何一點我都可以找到這張圖
來決定我的遊戲世界應有多潮溼或說多幹燥
我將右邊的圖稱爲溫度圖
在我的遊戲世界的任意一點我可以找到這張圖
來決定我的遊戲世界有多熱或說有多冷
在這裏需要提到我們將來還要回到這裏
在溼度圖中 你可以看到我在右側有一個很乾燥的點
那就是黑斑是左側的一個很乾燥的區域
再說一次 這些顏色代表我所說的輸出
這裏黑色是負1白色是正1
在右側 注意到我在頂部有一個很冷的點
那又是一個黑斑
還有一個很熱的在我的噪聲圖的右側
我要指定在組合這些時的一些規則
以對我的遊戲產生意義
這裏我有一個簡單2D圖
在縱軸中 我有溼度在橫軸中是溫度
我可以使用這些規則來決定這兩個圖的交界
如果我有一個點它有很高的溫度和很低的溼度
我就會獲得一個沙漠
或者如果我有一個點溫度很高 溼度很高
我就會獲得一個熱帶雨林
所以在這裏在冷的那一端
我有凍土和北極區
在中間 我有更加溫和的地帶
比如森林 大草原和牧場
這兩個圖一起使用我基於這些規則將它們組合
就獲得了這樣的東西
你可以看到它有一個很好很真實的感覺 還有一點
在右側 可以看到我們有很大的沙漠
漸漸變爲牧場而後變爲森林地區
這與我們溼度圖的乾燥點相符
以及在我們的溫度圖中的那個很熱的點
在左上方 你看到我們有
一個很大的凍土與冰冷的點
在右上方與左下方我們有一些小的熱帶雨林
與很高的溫度與溼度相符
所以這只是很基本的例子有關你可以完成的很酷的東西
通過過程生成
這裏我們只使用了兩個簡單的噪聲圖
並通過很簡單的規則將它們組合獲得了很漂亮很好的結果
我想邀請同事Michael Brennan上臺
來向大家分享遊戲AI中的新特性
Michael？
謝謝 Bruno
大家好我是Michael Brennan
我是Apple的遊戲技術工程師
我很高興今天能與大家分享
我們爲遊戲AI在GameplayKit中進行更新
去年與GameplayKit一起我們介紹了Minmax策略
這是一個對於各種遊戲的很棒的AI方案
可以保證對你的遊戲狀態有最佳的搜索
它之所以能保證是通過對狀態空間進行大量搜索
同時組合你對遊戲中每種狀態所提供的得分函數
來提供給你你的一個實體在某一點的最佳行爲
但是Minmax策略的高消耗本質
使它對於那些狀態空間較大的遊戲並不合適
比如圍棋和象棋
這就是爲何今年我很高興向大家介紹Monte Carlo策略
Monte Carlo策略是一個對狀態空間的最佳首次搜索
與對狀態空間的隨機取樣結合
來計算出你的對手的最佳行爲
它完成這一點是通過首先選擇一個玩家行爲
使用勘探開採算法來選擇該行爲
然後從該行爲開始模擬新的遊戲
直到它達到結束狀態不論是勝利 失敗或是平局
而後繼續沿着樹迭代
它不能保證如Minmax一樣的最佳行爲
但是它趨近於最佳行爲
Monte Carlo策略速度快
它能保證很好的表現即使是對一些遊戲
有很大的狀態空間比如說圍棋
由於它只需要最終情況
這需要讓你的遊戲提供
這在你的遊戲中很容易實現
它幾乎是最佳的
雖然它可能不是Minmax所找到的最佳行爲
它們幾乎是一樣的並且會隨着時間增加越來越趨近
讓我們說說你需要用到的元素
來在你的遊戲中集成這一點
使用GKMonteCarloStrategist時你需要提供一個預算
這是它完成我們剛纔說到的四個步驟所要花費的時間
你需要提供探索參數
現在 這是一個在0與1之間的值 代表要不要
選擇一個行爲時探索沒有到達過的節點
或是你想讓它開拓它去過與發現的節點來最大化優勢
你當然還需要提供遊戲模型
若你使用過GKMinmaxStrategist你就應該對這很熟悉了
現讓我們看一很簡單的代碼示例
獲取了遊戲模型GoGameModel
我們要持有它的一個引用
及我們的Monte Carlo策略
我們要將其實例化並持有一個引用
我們先設置Monte Carlo策略遊戲模型
來指向我們的遊戲模型
下一步 我們要對其指定預算
設置在100左右
這意味着它要完成四個步驟模擬與迭代100次
然後我們要將探索參數設置爲1
這意味着我們想讓它儘可能地探索
然後我們只需要獲取活動玩家的最佳行爲
在該遊戲狀態中 找到最佳行爲並將其應用到遊戲模型中
就是這麼簡單
今年 我很激動地告訴大家我們還允許
製作自己自定義的策略
我們實現了新協議叫GKStrategist
你只需要遵守它給出遊戲模型
遊戲模型更新與遊戲模型玩家
並實現找到玩家的最佳行爲
你可以使用這個策略就像你使用我我們提供的策略一樣
這就是我們在策略方面提供的新功能
現在讓我們說點別的
決策制定
有許多方法來對你的遊戲中的邏輯建模
其中許多已經被GameplayKit所支持
你的敵人需要制定決策來考慮大量的狀態
他們需要能很快的制定決策
你可以在這裏看到我們有這個很小的按鈕跳躍遊戲
就算是在這個簡單的遊戲中你的對手需要考慮
你的位置 其他敵人的位置和按鈕的位置
在某個時間點誰擁有按鈕
他們是否在跳躍敵人是否在跳躍
他們在一層的哪個位置
還是要考慮不少事情的
一個簡單的制定決策的方法是決策樹
它們是樹狀的數據結構使決策更易於觀察與除錯
它們可以是製作的或是學習得到的
GKDecisionTree讓你在決定行爲時能有較小的開銷
它是完全可序列化的靈活性也很強
允許你創造節點
能隨機進行決策並對分支委派權重
或是基於特定分支的值如果這個值是真或假的話
或是均等的滿足描述
它非常的靈活允許你完成許多事情
讓我們看一個簡單的代碼示例
你可以在這裏看到我們有一個樹
我們要通過一個根元素對它進行初始化
查詢是否我們接近按鈕
然後我們要獲取該根元素節點的引用以備後用
在此之後 我們只需要從該根元素出發創建分支
一個是我們接近該按鈕的情況這種情況下我們就要跳
另一個是我們並不接近的情況這種情況下我們要選擇遊走
我們也要獲取到該遊走節點的引用
通過那個遊走節點我們就可以創建一些分支
一個權重是9意爲在該點向左走
另一權重是1意爲我們要向右走
現在 這個權重是疊加的
意思是對於左側分支而言我們走的權重是9
因爲總權重是10所以向左走的概率是90%
向右走則有10%的概率發生
然後我們要將狀態打包到字典中
並將其傳入樹的findActionForAnswers方法來獲得我們的行爲
決策樹也可以被建模
你只需要提供遊戲數據
它就會在數據中尋找到進行決策的行爲
並對該制定決策的行爲找到一個合適的樹
在我們的方陣中你可以看到最上的一行是深灰色的
那就是屬性
內部的矩陣是我們的樣例
那就是我們在遊戲中不同的遊戲點的樣子
在右側 我們有進行的動作
這只是我們在遊戲的不同點中進行的操作
你將它傳入GKDecisionTree的構造方法中
它就會找到一個決策樹來適應你所記錄的遊戲數據
讓我們看看這在遊戲中的樣子
這裏我有一個玩家淺綠色到青綠色的玩家
對抗深藍色玩家
使用我們剛纔展示的手動創建的決策樹
如你所見 它遺漏掉了一些
我們進行的操作這樣我們表現會變好
讓我們看另一個例子
這裏你可以看到它的行爲更像我們剛纔的行爲
如我所說 你只需要記錄你的遊戲數據
將其傳入 你就能模擬行爲就像你自己的行爲一樣
即在GameplayKit中今年新引入的遊戲AI
它很棒我很激動能與大家分享
現在我要邀請我的同事Sri Nair上臺
介紹更多有關Xcode集成Gameplay
Sri？
謝謝Michael
大家好
我是Sri Nair
我是Apple的一個遊戲技術工程師
去年介紹GameplayKit時
它只能由代碼驅動
你需要創建構造器完成所有的連接工作
並改變屬性和值全在代碼中完成
這可能會很低效原因顯而易見
我很高興能告訴大家我們對這個問題進行了優化
通過向GameplayKit引入更加由數據驅動的工作流
通過在Xcode和SpriteKit編輯器中集成它
如你所知 編輯器整合可以更快的提高
你的遊戲功能的體驗
它們還有助於分離工程師工作流
和設計工作流
所以現在編輯器有四個主要的新特性
幫大家加速GameplayKit開發
第一個 實體和組件編輯器
第二個 導航圖編輯器
第三個 場景輪廓視圖
第四個 狀態機快速查看
讓我們細說這四個特性
什麼是組件編輯器呢？
讓我們回想一下實體和組件系統是一個設計模式
其中一個遊戲物體是通過實體展示
而它們的行爲則是通過更小的獨立組件展示
這能提供更好的代碼架構與代碼易用性
它們也會更易於維護和擴展
所以現在通過組件編輯器你可以將實體與組件賦給
在編輯器中的節點
並在編輯器中修改屬性編輯器提供
一個基於編輯器的數據驅動的工作流
編輯器與代碼緊密整合
並支持組件類和屬性的自動查找
舉個例子 假設你要寫一個運動組件類
它派生自GKComponent添加了幾個屬性
並由新引入的GKInspectableKeyword註解
來展示在UI中
組件編輯器會自動探測到
這些你已經添加並展示在UI中的組件
現在你只需要選擇你需要的組件
並賦給節點
一旦你添加了組件屬性就被自動填充了
基於相應的數據類型
現在你只需修改這些屬性並在編輯器中直接預覽變更
無需退出編輯器
或是重新編輯代碼來使遍歷更快
並且這些所有的更新都保存在SKS文件下的一個JKC中
所有未被改變的屬性值都使用默認設置代碼
與節點連接相關聯的GKEntity是在後臺生成的
通過一個GKSKComponent
UI支持所有的常用屬性類型
比如浮點 整形 布爾等等
這就是組件編輯器了
現在 讓我們繼續說導航圖編輯器
Bruno剛纔提到了
導航圖 也就是GKGraph是用於尋路的目的
來找到一個物體從A到B的最佳路徑
通過導航圖編輯器
現在你可以直接在編輯器中創建GKGraph
你可以添加或修改節點在其間添加連接
只需要在一個窗口中點擊並拖拽
這些GKGraph保存在GKScene中
你可以在之後通過代碼獲取並用於尋路
還有一個我們在SpriteKit編輯器中一個很有用的特性
對Gameplay Kit開發也很有用
叫做場景輪廓視圖
它繪出場景元素的輪廓它們的父子層級關係
這裏支持大多數標準的操作
比如添加 編輯 重排 刪除等等
你在你的場景中添加的導航圖也會在這裏展示
在場景輪廓圖中
它還可以用於鎖定節點與修改可見性
它同時附帶一個上下文菜單來進行選項特定的操作
很好用
最後同樣重要的狀態機快速查看
回憶一下 我們去年引入了GKStateMachine
它允許你在遊戲中表示一種執行流
它在遊戲中有許多應用
比如AI、動畫、UI、等級序列等等
直到現在你都不能預覽
這些狀態機的樣子
很難理解這些狀態之間的關聯
執行流 或是其當前所在的狀態
爲了解決這個問題我們整合了一個狀態機預覽工具
直接在Xcode Debugger的快速查看功能中
這允許你在代碼中設置斷點
在你想查看狀態機的地方並點擊快速查看圖標
就會彈出一個當前狀態機的視覺展示
它會展示狀態以及其間關聯
當前的狀態被高亮
這裏有幾個關於快速查看狀態機的例子
通過這些 我想演示GameplayKit中 基於編輯器的工作流
這裏我要搭建一個簡單的遊戲
其中一個玩家撿起氣球將其塗色並扔到敵人那裏
這是由遊戲AI模擬的敵人也可以做同樣的事
所以我們有一個基本的場景
你可以在場景輪廓視圖中看到
我們有一個背景和一個玩家和一些氣球
所以首先 我們要嘗試添加這很簡單 沒有進行什麼行爲
這是一個很靜態的場景
我們通過使用鍵盤向玩家添加一些行爲作爲開始
對於這一點 我已經添加了一些組件
我們要看看剛纔提到的行動組件
有幾個屬性來幫助行動比如速度
摩擦 加速等等
你使用GKInspectable對其註解
這樣你就可以在以後在UI中處理這些屬性
類似的 我又一個玩家輸入組件
我們要將這些賦值給玩家
通過進入場景並在組件編輯器中尋找
在右側檢查區中
我有一個新引入的組件編輯器
現在 我可以選擇玩家並點擊加按鈕
來將這些組件添加到節點
我們下面要添加用戶輸入組件
與運動組件
而後我們會看到結果
我期待用戶可以通過鍵盤移動
太棒了 它可以在任何方向運動
除了可以之外你還能發現它不會在邊界停下來
因爲我沒有對玩家添加任何碰撞
但我的確添加了一個碰撞組件
它主要是給玩家節點添加了物理軀體
我下面要將其賦給玩家
在完成這一點的同時我還要賦一個戰鬥組件
我已經添加過了能允許你撿起氣球並扔出
讓我們看看它的樣子
太好了 現在我可以撿起氣球而且它在邊界處停止了
這很棒
我們下面要對敵人進行同樣的操作
未完成這一點我在場景中創建了一個敵人物體
但我將其設爲不可見了
所以我要在場景輪廓視圖中設其爲可見
而後將組件賦值給敵人
在這裏 區別在於它是一個敵人輸入組件
這樣它就使用遊戲AI而不是使用鍵盤
類似地 運動組件 碰撞組件
以及戰鬥組件
有了這些 我會期待敵人也會
撿起氣球並
啊 它贏了我
這對它太簡單了
但我們要讓遊戲更加有趣
通過一個繪製的物體向場景中投落一些氣球
所以我有一個繪製的物體我要將其在場景中設爲可見
而後添加繪製組件
能沿一個確定的路徑投落氣球
我想要向場景中添加一個導航圖
這就像進入物體庫並輸入
“導航圖”一樣簡單
現在 你可以簡單的將導航圖拖拽到場景中
我們要把導航圖稍稍放大來解釋這個新特性
這就是導航圖編輯器
在我們操作它的同時我們要修改一些屬性
我們要設置玩家的健康爲2還要設置運動
稍稍加速 讓玩家稍稍佔優勢只是一個第一等級
你好歹也是有了一些優勢敵人的健康值也是2
讓我們看看結果
你知道 你可以看到飛機扔下的氣球
比如能撿起來扔出去的多
他贏了我一次 我也贏了一次讓我們看看
好 好了
我確定我的兒子玩這個遊戲時會很高興
這解釋了
GameplayKit中新的基於編輯器的工作流
讓我們切換回幻燈片
來回放一下本期
今年 我們介紹了很多引人入勝的
有用的GameplayKit特性
在最開始 Bruno分享了新的空間劃分系統
來在你的遊戲中進行高效的空間查詢
新的過程生成系統使用不同的噪聲函數
來在你的遊戲中創建更加動態的內容
同時對諸如尋路與代理等現存系統也有提升
Michael分享了有關遊戲AI的新特性
通過遊戲策略和決策樹
最後我介紹了新引入的基於編輯器的工作流
在GameplayKit中帶來更快遍歷
希望大家認爲這些新特性很有用處
我們已經等不及看到大家下一步的成果了
這是以後再看這段分享的URL
608就是本場演講的編號
還有相關技術的其它演講
你可能感興趣參加
SpriteKit、SceneKit、Rendering、Game Center的新特性
及Apple Watch的遊戲技術
感謝大家前來
我們希望大家在餘下的演講中度過愉快時光