優化按需加載資源
歡迎來到優化按需加載資源
我是tvOS工程師團隊的Bill Bumgarner
在這個演講上 在去年的WWDC上
在這一年的開發者廚房
我們已經講瞭如何使用按需加載資源
本場演講中 我們想要關注在
如何優化資源的使用 特別是
如何打磨用戶體驗 來真正地創造
一個極好的用戶體驗
我們來看一下這些動機的一個基本概況
如何指定標籤 API的使用
然後講一下如何優化首次啓動
如何優化運行中的用戶體驗
同時也會講一下優化應用更新
和一些實現的細節
所以爲什麼
爲什麼要按需加載資源
對於一個傳統的應用程序
它是由應用程序的二進制值和一堆資源所構成的
這些一起組成了應用束
它被組合在一起 上傳到商店
你們的用戶可以下載並安裝它
慢慢地 他們會下載和安裝一堆的應用
但是如果你看一下這些應用的使用模式
我們會發現只有一部分的資源被經常用到
另外一些資源可能只被用了一次
在程序介紹或類似的其它地方
而這會導致佔用大量的磁盤空間
這也意味着用戶不得不在一定程度上思考
關於什麼是他們要保留什麼的什麼是不要保留的
我們不想讓我們的用戶變成系統管理員
所以在按需資源應用中我們想要嘗試優化的是
優化資源的使用
在它被使用的時候
同時保證它是可得的 早於用戶注意到
它需要被下載
所以在傳統應用的基礎上 我們把資源
分成綁定的資源和按需加載資源
它們不是真的存在於系統裏當應用被安裝的時候
現在 在過去的一年中有一些錯誤的概念
關於tvOS應用的大小
有一種說法是我們把它限制在200MB以內
這不是真的
tvOS上主程序集限制是200MB而對於iOS
它可以最大到4GB無論如何 在這兩種系統中
它們的按需加載資源可以達到20GB
所以按需資源
它們提供了動態加載的內容它可以按需提供
或者可以在應用安裝時被下載
它是託管在App Store上的包括託管不同版本
所以升級不是問題
顯然若你有一個用戶堅持使用舊版本它還是能工作的
它們在程序安裝過程中是可以下載的
在運行的時候 如果有請求它們也是可以下載的
而且你可以控制下載的優先級
而且你可以調整優先級
因爲用戶可能改變他們的想法
去做他們想做的事情
同時 所以這些和系統一起
提供了智能的內容緩存和智能清理
這樣 我們就讓用戶遠離了系統管理的工作
對於你的的應用來說 好處是變小了
這意味着它更快了和加速了下載
意味着這個時間間隔變短了在用戶點擊購買按鈕和
用戶使用你的程序之間
而且 你有更爲豐富的應用內容最高可達20GB
這可是很大的空間哦
而且 那樣就可在系統中裝更多的應用
它們都是可以運行的而且減少了管理存儲的需求
這也意味着用戶可以拍很多的照片
一部分按需加載資源可能被釋放出來
這都是完全自動的
那麼我們如何來實現這個呢？我們如何採用這個呢
你要做的第一件事是要指定標籤
給所有的資源 你實現這個通過尋找
在程序中 找出所有的資源
找出每個資源在你的應用中的角色
和你需要它們的時間
然後在Xcode中指定標籤
標籤一點兒都不神奇
它們只是字符串
只是一些你想要的字符串第一級 任意東西
它們可以被應用於單獨的資產
或者一個單獨的資源 一個聲音文件一個紋理 一張圖片 無論什麼東西
純數據或者它們可以被指定給整個文件夾
而且 每個資源可以有多個標籤
因爲它有可能有多個角色
讓我們回過頭看看GreatGame這個應用
看一下那些資源
把這些資源按照角色分類
在這個例子中這是一個非常明瞭的基於級別的應用
而且它有總是需要的資源
這些就是 比如你的啓動頁面
你的啓動加載頁面 或者是設置頁面
這一類的東西
它有給每一級別提供的資源
或者購買項目或者應用內購買的東西
對於這些標籤 是非常直接明瞭的
只要給他們和它們角色一樣的名字就行
所以當我們做這些 當我們看這些時
我們給這些東西打標籤的策略是什麼呢
只要給主程序集的資源
那些程序始終確實需要的資源
你的加載頁面你的程序啓動頁面 這類東西
然後你給另外所有的東西打上標籤
每個標籤可被應用在最多512MB的
資產或者資源
然而 我們強烈建議你遵循64MB左右的限制
因爲那樣會使下載更快
而且讓用戶更加不易察覺
每個資源可以都多個標籤
只要你用了其中的一個標籤
就會提取所有對應的資源
所有我們已將所有東西歸類並打上標籤
讓我們看一下運行時的情況
在運行時 我們嘗試讓API儘量簡單
實際上 這只是一個類
有一個資源請求類
你要創建這個類的一個實例來管理所有
按需加載資源的讀取
它通過一個標籤或者一組標籤來創建
而且它有一些其它的選項來管理它
你可以用它來開始和結束資源的訪問
開始訪問會觸發下載 如果需要
結束訪問會告訴系統 嘿 我結束啦
在這個對象中 你也可以設定優先級
如果你有一個特別大的下載或者一個特別慢的網絡連接
你可以追蹤進度而且也有可能會遇到錯誤
我們馬上會降到
關於這個類有一個有趣的東西是
每一個實例都是一次性的
它們是非常輕量級的 非常容易被創建
這意味着當你創建一個實例開始訪問它
在你調用結束訪問之後這個對象就完了
創建一個新的
有一個非常重要需要記住的概念是
請求和訪問是不關聯的
所有當你請求
從當你要使用這個資源時我們是可以的
我們會在預測加載講這些
所有我們可以預測用戶將要幹什麼
來保證他們永遠不會看到那些加載界面
讓我們來看一下真實的代碼
初始化一批資源請求是相當直接的
只要給它一組標籤然後你就有你的請求了
如果你想要開始訪問那些標籤
調用開始訪問 它有一個完成句柄
那個完成句柄會被錯誤地調用
如果有錯誤的話 或者它會被正確調用
那麼你的資源就是可利用的了
爲了得到資源 使用包API
抓住一個NS包實例 對不起
包實例 重命名 從請求中
只要使用正常的資源請求方法
於包 來控制它
當你結束了之後調用結束訪問是非常重要的
這告訴了系統你已經用完了這個資源
需要重點指出的是 那不意味着
系統就會真的刪除資源
系統是非常懶惰的
它們不想做額外的工作刪除東西的額外工作
所以當你加載資源的時候你可以控制優先級
比如 你要在玩一個遊戲
用戶改變了他們的想法
你就下載這個級別的資源
現在你需要下載級別5
你開始於開始訪問
你可以繼續 你可以改變加載優先級
來把優先級提到5級或者降到3級
如果你覺得他們可能返回或者你可以結束它
它只是一個值 從0到1
但是有特別緊急的優先級
有時候 會播放器會關閉
而你又無法預測
你需要立即下載所有東西
在這種情況下這種特別緊急的加載優先級
就能被用到了
它會掛起所有其它的下載
也會最大化吞吐量
所有沒有網絡節流
也會最大化中央處理器使用專門用於下載
最後 會有有條件請求
有條件請求可以用來檢查
資源是否已經被下載
如果你還記得在我說結束訪問的時候
不一定要刪除資源
播放器已經在玩一個遊戲
他們已經玩過了1 2 3 級
你已經結束對1 2 3級別的訪問
他們退出遊戲下線後再做了其它一些事情
當他們回來 重啓遊戲
他們想要重玩1級
你可以有條件地使用
或者說他們想要選擇不同的級別
你可以條件地使用開始訪問
來檢查什麼級別已經被下載了
給它們指示什麼已經可以玩了
或者如果它們進入了一個級別
在每個級別中你已按照角色分解你的資源
可能你優化了級別的第一部分
只是展示數和刷子和敵人
正好那個時候在磁盤上
當你在後臺下載餘下的部分
所以所有都是關於你可以
避免加載頁面
如果這些項目已經被下載了那就會像開始訪問一樣地工作
同樣 需要調用介紹訪問
就算你得到回調 那它也是假的
你決定不去觸發下載
總是調用結束訪問
現在你有了一個可以工作的程序
但是讓我們看一下首次啓動
特別看一下這個時間軸
我們會沿着時間軸
從用戶在商場中購買這個應用的那一刻開始
應用被下載 被安裝
和第一次啓動然後我們需要做的事情
我們要做的第一件事 開始訪問1級
這會觸發一個下載然後播放器開始這個遊戲
然後到達2級 我們也是開始訪問
它會下載 用戶在那等待
用戶繼續玩 重複這個流程
3級 下載 等待 玩遊戲
甚至對於可購買的項目 程序內購買
下載 等待 玩遊戲
這不是一個好的用戶體驗
讓用戶經常地看到加載頁面這是不行的
我們不想這個樣子
所以我們要做的第一是
充分利用功能和按需加載資源
這是自帶的功能 來優化首次啓動
我們要做的第一是使用初始安裝標籤
接下來我們要使用的是預獲取標籤
有了這些
那麼1級會在應用購買的時候被下載和安裝
2級會緊跟着被下載和安裝
用戶可以開始玩了
讓我們看一下預測下載
但先看一下
如何配置初始預提取
所以初始安裝標籤
這些在Xcode中被標記的標籤需要被下載
作爲出程序安裝的一部分
最多可以有多達2GB的資源這是很多的
這是在App Store上顯示的程序大小的一部分 實際上
當下載進度條開始的時候
表明初始安裝標籤也開始了
預提取標籤是稍有不同的
你可以有任意多的預提取標籤
最高可達4GB減去初始安裝的大小
它會遵循Xcode中指定的一個排序
預提取標籤在初始化之後立即被下載
它們不會阻止應用的啓動
所以用戶可以進入遊戲並開始玩了
儘管預提取的東西在後臺被下載下來
在Xcode中
用戶界面是這個樣子的
這是資源標籤檢查器 在目標編輯器內
對於你的應用
它有三部分 初始 預提取
和按需標籤的下載
你一開始移動這些東西
這些會和你的應用一起打包
同時被安裝
預提取會按照你在屏幕上看到的順序被下載
最後 按需的下載
是隻有你開始訪問那些標籤的時候才被下載
回到我們的時間軸
我們非常簡略地講過預測加載
那這到底是什麼意思呢？
我們開始初始化
得到我們的預提取
我們仍然讓我們在3級的時候在等待
若我們開始訪問3級標籤對應的資源
在1級或者2級的某些時候
這樣可能在用戶到達那裏的時候那些資源就已被下載並能被使用了
同樣對於購買項目
如果在你的應用 遊戲 不管什麼中有一個特殊的時間點
你認爲有可能或者你希望玩家將要
做一個程序內購買那就在那裏開始訪問
只有當你得到返回後 你才能訪問它們
但是至少它會在那裏 不會有等待
現在我們得到一個大的綠色時間軸和一個非常高興的用戶
我們已經討論了這個基於層級的遊戲
這是一個非常線性訪問的模式
它非常容易創建漂亮的幻燈片
這不是真實的世界
在一個線性訪問模式中大部分資產會被使用
它們大部分會被按照順序地使用
你的標籤大小不是那麼得關鍵
因爲你始終可以在用戶之前得到訪問
但是問題是 當然
這裏沒有什麼是線性的
特別地
很多時候 應用都是隨機訪問模式
播放器可以播放任意一個地方
或者有些東西可能被不同的級別所共享
或者他們可能選擇特定的配置
或者他們可能購買了一些應用內購買項在這種情況下
目標是儘量多地預測
嘗試在用戶需要之前把東西下載下來
但是在你需要下載的時候
在那一刻真的需要時
堅持小的標籤組
這樣就會下載得很快
而且你可以有前瞻性地下載標籤組
可以繼續了 只是猜測什麼將會被需要
讓它們就那樣 下載到磁盤 因爲
當然 我們有這個智能緩存機制
它會在後臺運行 確保刪除正確的東西
如果磁盤滿了的話
再強調一遍 結束訪問並不意味着刪除
如果你下線了而且你提前下載了一些東西
然後你根本不需要它 沒關係
只要結束訪問 它可能還是在那裏
當你以後需要它的時候
現在有另外一種模式這是一種在兩者之間的
那是探索性訪問模式
那是...你想
從一個村莊到另一個村莊類似的情況
在這種情況下 存在有限的預測
很多可能不會被使用
但是你經常在一個分支上當你在一個分支上的時候
你可以下載一個標籤的子集
用戶左轉 右轉
所以我要下載向左的標籤和向右的標籤
當用戶做出決定後
打算向右
讓那個下載停止
關注右邊 開始預測下一步
所以現在這個應用可以正常工作了
我們得到了一個非常棒的用戶體驗
但是讓我們看一下一些實現的細節
在頁面的背後進行着的
你可以關注一下以進一步優化用戶體驗
特別地 正如我所說的 程序包
在iOS上被限制爲4GB在tvOS上被限制爲200MB
但你可有多達20GB的按需加載資源
它們中的最多2GB可以和應用一起被下載和安裝
最多4GB可以被預提取減去那2GB或者最多2GB的安裝
還有一些數據要記住
同一時間最多可以有2GB的活動資源
所以你開始訪問最多2GB的標籤
那些會被下載 然後就是可用的
這非常棒
當你超過了2GB 會發生的是
開始訪問方法會得到一個NS錯誤
這表示用完了帶標籤資源的空間
你需要對一些標籤集結束訪問
來釋放一些空間使得更多的資源能被訪問
重複這一點是因爲有另外一個困惑的地方
如果你有2GB的已經下載好的標籤
而且你想要訪問更多
你訪問其中的500MB
固定另外的250MB那500MB資源
可能不會被刪除
它們還在而且是可用的
但是這只是告訴系統如果情況變得不好了
它可以去刪除它們
任意一個標籤 最多可以到512MB儘量堅持64MB或者更小
你已經有最多1000個資產包
資產包是什麼鬼呢 還沒提過這個詞
資產包來自於Xcode編譯系統
這是你的應用生成和管理的方式
這是按需下載資源被編譯在一起的方式
通過商店來管理
看一下我們GreatGame在這個情況中
一個角色扮演遊戲 這無所謂
我們有標籤 非常的典型
資源會被重複使用
東西會被使用在1級到2級
敵人變成了朋友 諸如此類的東西
所以我們在這裏有這兩個資源它們在2級的時候被使用
所以它們標記了1級和2級的標籤
所以我們的標籤集看起來是這樣的
我們有四個帶一個標籤的資源和兩個帶兩個標籤的資源
當我們至於四個標籤的時候
最後會有六個資產包
如果你考慮一下一個隨機訪問的遊戲
這就會變成一個阻礙
若你很多資源被很多不同的角色共享
比如很多資源有5個 10個 15個標籤
那麼所以這些的叉積會超過
1000個標籤或者1000個資產包的限制
這時需要注意的
所以在遊戲或者應用的生命週期內
當然 你會有程序更新
你想要提升用戶體驗 讓用戶回來
按需下載資源被優化
爲了程序的更新
可能有一點點令人驚奇
但是如果你仔細想想 這是合理的
特別的 我們以1.0版本的遊戲開始
我們在遊戲中有一堆的資源 一些帶標籤的
和一些在主要包裏的
然後我們發佈第二版
我們在主包裏面做了一些改動
我們可能給1級增加了一下資源
對2級更改了一些東西
我們增加了一個全新的級別
這些都很好
那在升級的過程中會發生什麼呢
第一件事情是當你更新資源的時候
更新帶標籤的資源沒有什麼是被自動重新下載的
當它第一次被訪問時 它會被重新下載
我們不想重新下載教學級別
當用戶已經遠離這個了
所有沒被更改的資源會待在磁盤中
不需要下載 它們就可以被訪問
新的資源它們會在被訪問的時候被下載
所有 再說一遍系統對待這個是非常懶惰的
在這種情況下 因爲我們不能預測我們會對應用做什麼樣的改動
會被需求各種各樣的狀態 或者用戶
在你的應用留下的東西
我們將其交給你決定
觸發開始訪問來觸發上傳
和下載新東西
實際上 在第一次啓動時你可能想要開始
和開始訪問一些你改變過的東西
以此確保在用戶主要到之前就讓這些資源是可用的
所以 這個的最佳實踐
避免對帶標籤資源的不必要的修改
比如
我們有過一種情形當有人做了一個拼寫的改變
令人驚奇的是所有東西都被重新下載了
當第一次訪問它的時候
如果你改變了這個資產包裏的一個資源
這會觸發下載整個資產包 這只是一個
具體的實現
所以請牢記
你應該做的是 比如
在我們給1級增加一些額外資源的情況下
我們可以讓1級更新一個標籤
然後開始訪問它們 下載
當它們都可以使用的時候然後運行用戶運行1級
保持那些標籤一致
從一開始 你要設計好
可更新內容和靜態內容的分離
所有這些意味着 你可能有一個標籤
對於你的程序中的單一的角色
可能你想要把那個標籤分隔成多個標籤
當它是可能永遠不會改變
和少數會被改變
所以這些如何組成智能內容緩存的呢
對於tvOS這個操作系統的目標之一
是永遠不讓用戶注意到這個用法
永遠不需要刪除東西
永遠不需要去考慮它
作爲這個的一部分
有一個完整的緩存管理系統和自動清理系統
系統會清理到磁盤上的資源
當磁盤空間快滿了的時候
有多個不同的級別從優先級最低的開始
會清理緩存這些
然後一步一步地到越來越高的優先級
所以 再強調一些這點
當你用完了資源的時候一定要結束訪問
這並不意味着資源會被刪除
智能內容緩存
有很多變量告訴系統關於清理的順序
顯然的 最長時間沒被用的先被清理
你也可以控制保留優先級
保留優先級是一個信號對於打包資源請求
這是一個0到1的數值 只是用來表示
系統以什麼樣的順序刪除東西
它獨立於你的應用 所以不會作弊
它不會幫你把所有都設爲1
它只是表示當真的需要的時候我們會吹走一切
如果你的程序在運行
它會是系統最後一個清理的資源
這是非常重要的
不要使用臨時變量和緩存
顯然若你需要一下臨時的東西或者緩存你可以使用
但是因爲我們無法知道
在臨時緩存中的數據的結構
系統會認爲它們是在低優先級時 就可以被清理的
它們會被清理 而當它們被清理了
它們是被整體地清理了
所以 最後
總結一下
使用按需加載資源
特別是對於tvOS按需加載資源的使用
真的提供了更加優化的用戶體驗
它影響了網絡連接
在iOS上 事情變得更加的棘手
但也有很多成功使用它的方式
它會使得應用更小
這會減少用戶獲取的時間
從商店到你用戶玩上你的遊戲使用你的程序
用你的內容做所有的事情
你有了更多的應用內容
現在你有了最多到20GB的空間放任意你想的東西
而對於用戶 他們不需要考慮這個
他們可以安裝任意多的應用
他們沒有一個障礙
他們也不需要考慮存儲
這就是按需下載資源的優化
更多相關的信息
請參考我們的網頁
在本週的早些時候也有許多相關的演講
我建議大家回顧一下
謝謝