HTTP Live Streaming的新特性
打開了嗎？
下午好
我是Roger Pantos
本次會話關於"HTTP LiveStreaming的新特性"
我們談論HLS有七八年之久了
然而 每次我談的時候營銷部的人都說
"你一定要跟人們說有什麼新進展了！"
所以開始吧這就是新的內容
但首先用20秒簡介HLS
HLS重點在於播放播放列表 什麼是播放列表？
就是這樣的東西是TXT文件
上面有標籤是藍色的那些
還有分段 白色的那些每一個都是10秒的媒體文件
如果你想播放一個你在這些標籤中翻找一遍
找找有趣的東西
比如...這個寫着這是INF分段 先加載它
所以去加載
然後加載segment1播放它
加載segment2播放它
可能這是直播播放列表所以你刷新播放列表
加載segment3播放它
簡而言之這基本上就是HLS
所以現在我們都明白這是怎麼一回事了
我們來講講新的內容
很好 好了
MPEG-4 Fragment Support
MPEG-4是個什麼東西爲什麼要被分成片段？
在座的大多數人可能熟悉MPEG-4文件
如果你的硬盤上有一部電影這很可能就是MP4格式的
或者是相近的格式
如果你去深入觀察它包括一個樣本表
通常是開頭然後所有的樣本數據都在其後
我們最初是這樣做的
之後 我們推出了新的分段隨後稱之爲片段
片段基本上是指一種方法能將你的MPEG-4文件
分割成這些小的可播放數據島
小的樣本表小的樣本數據
小的樣本表更多小的樣本數據
這些小島都叫做"片段"
所以我們今天宣佈的本質上就是你現在能做的是
你能夠將這些東西這些MPEG-4片段
在你的HLS播放列表中當做分段使用
就像傳輸流文件那樣
或者基本音頻流
我們會更新細則來給你詳細信息
我認爲現在會有本次會議的鏈接
不過...
它能讓你做的本質上是使用fMP4分段
傳輸流能做的事你都可以用fMP4做到
這包括iframe播放列表包括不連續性
包括直播流 等等同樣的功能
當然 我們會應用到我們所有的HLS平臺上
所以你可以選擇將你所有的流媒體編碼成fMP4文件
然後在所有平臺上使用
爲什麼要這麼做？簡言之 互操作性
如果你要將你整個媒體庫用一種方式編碼
傳輸到Apple平臺上之後你還要重新進行編碼
換一種方式 例如傳輸到Android設備上 那就太糟了
但如果你只有一個庫
那你的傳輸成本會下降你的存儲成本會下降...
緩存的使用率會更好
因爲你不再是拼命搶用緩存了
而且作爲附加福利
還有 如果你有單一的生產鏈
你可以在你全部的生態系統中
使用相同的工具和驗證方法
作爲附加福利
因爲fMP4不使用同樣的信息分包
而傳輸流使用
在較低的比特率下你會得到略微更高的效率
所以這算是附贈的好處
所以HLS對各位播放列表作家帶來了什麼變化？
實際上 沒什麼變化
如果我們拿之前看過的播放列表
並將它轉化成fMP4格式我們只需要這樣做
我們更改初始化分段使其指向Movie Box
然後每個分段就成爲了MPEG-4片段
這就行了
播放列表級別上的其他東西幾乎是一樣的
在分段級別上這裏還有一點我想談談
那就是加密
如你所知 HLS有兩種不同的加密方法
你要麼可以只加密整個分段
AES CBC 全部加密
這對傳輸流或是fMP4都是一樣的
對於樣本加密 例如如果你想用FairPlay Streaming
這就稍微複雜了因爲你必需說明
哪部分文件已加密哪部分未加密
這一次...上一次我們做的是傳輸流
我們本質上創造出我們自己的格式
這一次 我們決定使用現有的格式
而且...
在這MPEG中叫做"共用加密"
是一種標準幾年前推出的
最新版的標準裏有一個叫做cbcs的模式
這可以兼容FairPlay Streaming
所以如果你在HLS中做樣本加密
你會使用共用加密的cbcs模式來做
有了加密播放列表和其他東西
這基本上就是HLS的全部內容了
圍繞片段化MPEG-4
但如果我們要想實現那個快樂 閃亮 有活力的世界
在那裏每個人可以只有一條目錄
可以傳輸到任何地方那我們就必須超越HLS
我們要做的一件事是我們需要寫下一套規則
上面寫着 "你要這樣創作你的fMP4分段或
片段諸如此類來讓它們在任何地方播放"
而且我們也一直在這方面努力
一開始是我們和微軟做的一個假設演練
一旦當我們進展到覺着靠譜的時候
覺着能行了我們就向MPEG提了這件事
那裏的很多人都認爲這個想法很不錯
所以最後得出的是一套約束條件
用於如何創建你的fMP4分段
所以你要將音頻和視頻分開傳輸
你要在每個視頻分段開頭加入一個iframe
你要保證能嚴格對齊所有分段
涵蓋不同的比特率
你不需要做這些的如果你的目標只是HLS
當你想要讓你的媒體庫擁有最廣泛的受衆
那我們爲你準備了一系列推薦
我認爲這會讓所有人受益...至少我希望如此
所以...
現在我要轉換一下來談談其他事情
大家都愛討論的話題...元數據
所以爲了描述它我首先開始談談
一些我們已經在HLS上爲元數據所做的現有的東西
靜態元數據和ID3
靜態元數據是用於靜態元數據的 不出意料
它會提供內容標題之類的東西
大多數是文本
這就能很容易地放入播放列表文件中
要麼直接是標籤
或者打包成JSON文件然後通過URL引用
現在只有一個標題或一個作者
或一個版權對應每個演示文件 是靜態的
但這樣的好處是在你任何想要的時候都能獲得
馬上就能獲得
所以拿它和ID3對比
因爲計時元數據和媒體演示文件的時間軸相連接
還經常在流媒體中用於爲事件發信號
例如 廣告的開始節目的開始
它存在於媒體格式的本身所以是一種叫做ID3的二進制格式
這讓它體積小巧同時還變得難以創作
因爲需要專業的工具
如果你要排除故障這會讓你痛不欲生
很難讀取ID3
但你想要多少數量都行
而且可以放置到時間軸上的任意位置
所以這十分強大
而在另一面因爲它存在於媒體文件中
我們只能在播放之後才能提供給你
所以這個新玩意有什麼作用？
我們添加的是一種在播放列表自身內部創建計時元數據的方式
所以現在你在ID3中用的同樣東西都可以在這上面使用
你可以將它們創建成文本這很簡單
你可以輕鬆地把它們放入播放列表中
而且想要多少數量都行
它們可以覆蓋可以嵌套 什麼都行
另一方面因爲它們在播放列表中
我們讀取完播放列表之後就可以馬上提供給你整個集合
無論播放指針位於媒體文件的哪個位置
這就非常有助於
做特別像是導航控制之類的事情
所以它是什麼樣子？我們如何應用它呢？
我們在HLS中已經有日期的概念了
PROGRAM-DATE-TIME標籤允許你精準地在播放列表內部發送時間信號
所以我們以此爲基礎 我們說
每個比特的元數據都將會被表達成時間範圍
並附帶有一組的屬性
其中一些是我們的其中一些是你們的
我們設置句法所以能整潔地從直播流
添加和移除這些東西
所以這能完美契合直播工作流
它是什麼樣子？
我們來看一下這些句子
我們將新的標籤稱作DATERANGE標籤
這是另一個播放列表
第一句基本上在說現在是什麼時間
第二個是DATERANGE標籤如果你去看看
你能看到這是由屬性組成的
這些藍色的部分是細則中定義出來的
ID START-DATEDURATION
我們爲各位保留了X-namespace這與HTTP相似
這樣你能用它來放入你想要的屬性值對
在本案例中 有人決定放入AD-ID和beacon URL
這是一個示例
這是它們在播放列表中的樣子
當你在進行內容創建時你可以用在直播或點播上
這隻需要有DATERANGE標籤和日期
很明顯 在創建播放列表時你可以將這些東西放進去
不過另一個好處是因爲播放列表易於操作
如果你有後期製作工作流
在做廣告插入
可以非常容易地使用元數據
同時增強播放列表和演示文件
應衆人要求
我們還包括瞭如何映射SCTE-35的規則
你可以在源媒體文件中找到它然後用於DATERANGE標籤之內
這樣你可以在HLS中無損地執行SCTE-35
最後我們添加了媒體流驗證程序的支持
我想花點時間
宣傳一下我們有的新工具
我們辦了一次演講
現在我們沒有時間說這件事
但我們辦了一次演講談論了新的工具
所以我鼓勵大家去看看
你可以在你的應用或其他東西上點播
你應該看看有什麼新的本領
特別出現在驗證程序上了
對於重放
當你想讓視頻流中的元數據起作用
你要有一組AVFoundation API
所以這個時候你一定要在應用內部
而且API本質上就是"給我你目前有的所有數據"
然後如果你有直播播放列表當有新內容出現時要通知我
這中心圍繞在一個新的對象 叫做
AVPlayerItemMetadataCollector
我們這裏有一個小樣本你能看到沒有什麼特別的
你創建資源和PlayerItem
然後你說"我想收集一些元數據"
所以你創建MetadataCollector
你將自己設定成委託這樣我們可以將內容告訴你
然後將它添加到PlayerItem
這就好了之後你就得到所有元數據項了
所以使用起來十分容易十分強大
我認爲這會很快成爲一種首選方式
來將元數據輸入到HLS中
所以接下來我們今天要講的
是另一個功能這也是應衆人要求的
那就是離線模式下播放HLS的功能
我想請我的同事
Jordan Schneider上臺給大家作說明
嗨 看看幻燈片好不好用
好了
在iOS 10中 我們讓你能夠下載
並播放HLS內容不需要網絡連接
現在你可以將離線媒體重播功能提供給你們的用戶了
使用現有的流媒體庫
作爲此功能的一部分我們擴展了
去年我們推出的FairPlay Streaming支持
來兼容離線HLS
而且我們給大家提供一種下載HLS內容的方式
即使你的應用在後臺運行
最後 我們推出播放部分下載內容的功能
即使你的下載可能還在進行中
所以第一個問題-應該何時使用離線HLS？
沒錯 如果你想將這種功能
主要用於當用戶想要播放內容的時候
然而他們可能沒有網絡連接
例如當他們進入飛行模式
不過 此項功能並非針對於預先加載媒體文件
我們有使用AVPlayerItem的其他做法
所以爲什麼使用HLS播放離線內容而不是直接下載好電影文件呢？
第一點 你的內容可能已經是用HLS製作了
所以採用HLS來播放離線內容可能對你非常便利
從工程學角度來說
同時除了視頻軌
電影文件可以包括很多不同的音頻軌和字幕軌
你的用戶可能不太需要或是在離線存留着
在HLS中 因爲所有的軌道都是分隔保存於
服務器的不同播放列表中我們能實現更大一點的靈活度
我們能精確控制被下載的媒體選擇
節省用戶的時間 網絡數據和設備上的存儲空間
例如 默認下 我們下載了一個用戶的默認媒體選擇
用戶在離線播放時很可能只會關心這些文件
我們還給你提供的方式是確切配置
你和用戶想下載的可以離線回放的內容
離線播放HLS的另一好處在於
使用相同的資源
我們仍可以下載未被下載的媒體選擇選項
只要它們還存儲在你的服務器中 這非常不錯
所以怎麼做呢？
在iOS 10中 我們推出一個新的類 用於下載AVAssets
叫做AVAssetDownloadTask
這個類繼承了URL會話的功能
更重要的是在後臺下載資源的功能
即使你的應用沒有使用其所有的機制運行
我們讓你有能力...
控制下載哪些媒體選擇
因爲這是HLS
我們讓你有能力選擇你想要的資源品質
還可以離線下載下來
AVAssetDownloadTask的界面是這個樣
繼承了URLSessionTask
我想在這裏提一下這不是繼承了
URLSessionDownloadTask
作用很相似 但是我想指出幾點不同之處
所以爲了創建這些東西你要設置URLSession
現在我們有一個特定的URLSession子類 叫做
AVAssetDownloadURLSession你需要使用這些東西
所以調用makeAssetDownloadTask來創建資源下載任務
之後爲了選擇品質
我們有最低要求比特率的選項鍵
以及媒體選擇鍵
現在我應該說一下每個AVAssetDownloadTask
對應單個的媒體選擇
如果你想在同一資源上下載多個媒體選擇
那你需要設置多個AVAssetDownloadTask才行
我會在幾張幻燈片中展示的
要想使用這些東西我們要這樣做
首先要設置一個AVAssetDownloadTask
任意進行配置然後開始下載
我們要響應下載過程中可能發生的任何事件
例如監控下載進程
一旦下載完畢
我們要存儲位置來在離線時進行回放
你可能要下載額外的媒體選擇供你的用戶所用
最後 你要播放該內容
所以要想設置這些下載
設置完資源後首先要做的是
你要去設置backgroundConfiguration
來自backgroundURLSessionConfiguration
然後你要創建你的AssetDownloadURLSession
然後創建你的下載任務
這裏我有一個下載任務下載品質
的媒體比特率大概是每秒2兆位
但默認下 我們會下載提供的最高品質的視頻
一旦設置完成因爲這是URLSessionTask
你可以調用resume來設置你的下載
所以一旦下載開始了那你就要去監控它
爲此 我們爲你準備了新協議叫做AVAssetDownloadDelegate
這繼承了URLSessionTaskDelegate中相同的委託方法
我想指出兩件事是我們在這裏推出的
一個是我們使用的監控下載進程的方法
在此方法中我們顯示出下載進程
和時間範圍 而不是字節來實現更好的媒體界面表達
之後我們有一個
didFinishDownloadingTo location委託方法 來通知你
下載文件的所在位置
這相似於URLSessionDownloadDelegate
的協議方法 你需要做的事情的預期
當你得到這個委託方法是稍微有點不同的
我馬上就指出來
這是我們進程委託方法的一個示例
這裏我將時間範圍轉化成已完成下載的百分數
我不會對其深入說明不過這就是它的做法
你的應用可能在下載過程中被關閉
進程可能被終止那你怎麼辦？
你的下載會繼續
爲了應對該情況你的響應方法完全與
URLSessionDownloadTasks相同
當你的應用啓用後你要去設置
另一個後臺配置你使用的標識符相同於
最初設置下載時的標識符然後從中創建一個URLSession
從那裏調用getAllTasks方法
然後這裏 你可以恢復你的AVAssetDownloadTask
其中會有當前的進程
你可以用它來更新應用中可能有的任何UI
然後你甚至可以用它來抓取原始AVAsset
之前你用它來設置你的下載
所以一旦下載完成首先你要做的是
儲存下載資源的位置
所以每當有東西存到這個位置這個方法就會被調用
包括當部分下載的內容被用戶取消的時候
現在你可以用
先前取消的下載內容恢復下載
或者你甚至可以用它回放部分下載的內容
如果你不想讓那個下載
或者那個內容佔用你的應用儲存空間
那你可能要在這裏刪除它
所以...
不同於URLSessionDownloadDelegate
我們希望各位不要將資源從這裏移開
我們這樣做是因爲讓系統能夠找到這些文件是很重要的
因爲系統會回收磁盤空間
如果磁盤空間很少的話而且會在某個時刻
會從應用容器中刪除該資源
所以你想保存的是位置的相對路徑
從這裏 你能夠在將來恢復你的資源 從而進行回放
所以 現在你下載完資源的一個版本
比如說 你想下載額外的媒體選擇
這個適合在我們的didCompleteWithError委託方法中做
這跟URLSessionTask有的那個一樣
適合在這裏做的原因是
因爲同一資源上的媒體選擇是連續下載的
通常這裏適合進行任何完成下載的清理工作
所以用額外媒體選擇選項來進行增強
比如 西班牙語音頻
我們首先會抓取要下載的spanishOption
然後我們改變最初放入的AVMediaSelection
從這裏選擇spanishOption
一旦選擇好了
我們要去創建一個新的AVAssetDownloadTask
最好是在同一會話中
外加傳遞我們要下載的額外媒體選擇
然後我們調用resume這樣整個過程就會重複
如果想的話 我們可以之後下載額外媒體選擇
現在我們談談播放的事情
假如說我們有...這裏示範了如何創建下載任務的方法
注意到我輸入了一個帶有networkURL的資源了嗎？
但我們離線回放HLS
如果我們仍可以用原始的urlAsset
那我們應該使用那個AVAsset實例來播放
我們可以從AssetDownloadTask上的urlAsset屬性中抓取
如果你輸入帶有networkURL的新資源
AVFoundation無法知道從何處尋找下載的內容
所以你應該使用同一資源然後你就能離線回放了
然而 如果你無法引用那個原始AVAsset
例如 很長時間之後你的應用可能沒在運作
那你要做的就是創建新的AVAsset
用我們提供給你的下載位置
在didFinishDownloadingTo委託方法中
並用它創建一個PlayerItem
在這個案例中 如果你想對資源進行操作 例如
用額外媒體選擇下載來增強
你真的應該重新使用那個同一個資源
你不應該有大量的AVAsset指向磁盤上相同的fileURL
這有助於讓AVFoundation高效地
重新使用已經下載的媒體數據
所以我們還有一個附加級來幫助你嚴謹規定
用戶能離線播放的內容這叫做AVAssetCache
你從一個AVAsset的資源緩存屬性中抓取
這有兩個作用一個是能告訴你
是否這個資源的各個版本都能離線播放
另一個是它能告訴你
是否出現了可用於離線的特定媒體選擇選項
如果它不允許離線但還是能夠播放的
前提是要有網絡連接而且那個媒體選擇選項
仍然存在於你去下載的那個服務器上
這就是如何使用AVAssetDownloadTask
並播放後續的下載資源
我應該提一下第五點如果你在下載資源磁盤上播放
這會在該過程的任何時刻發生
這甚至可能在開始下載之前發生
或在下載過程中發生而且AVFoundation會高效地
重新使用已經從網絡上下載下來的內容
我想換一下話題
來談談保護離線內容
去年 我們推出了FairPlay Streaming
爲HLS生態系統帶來了強大的內容保護
然而 在iOS 9中
FairPlay Streaming需要對密鑰服務器的活動連接
這無法用在離線回放上面
所以今年我們擴展FairPlay Streaming
使其在離線HLS情況下無需網絡連接也能工作
我們的做法是將你的密鑰以安全的方式打包並存儲在磁盤上
並重新用於離線回放
但你的應用本身還是會保存這個密鑰
並響應來自AVFoundation的密鑰請求
用於每次回放 一旦密鑰進入緩存 就不需要接入網絡了
所以要想支持這些密鑰需要對你的密鑰服務器進行更改
具體是新的TLV值這樣你的密鑰服務器
必須明確地選擇加入密鑰從而滿足使用離線回放的資格
最後我們想提醒一下FPS Keys
你必須在主播放列表中將它們聲明爲會話密鑰
如果你想確認是否下載完成的話
所以...
爲離線FairPlay Streaming保存密鑰
真的就是基於在線FairPlay Streaming的請求流
你要更改的只是和修改這個請求流有關的內容
我在這裏快速總結一下來指出你需要做的事情
但如要了解更多信息你應該觀看去年的演講
我們在那裏講得十分詳細了
與FairPlay Streaming回放一樣
AVFoundation會下載你的播放列表
並在找到密鑰標籤時觸發密鑰請求
這會讓你的應用有機會保存密鑰 從而用於離線回放
所以你的應用首先會回調AVFoundation
來獲取流媒體密鑰請求
然後會和你的服務器對話這會取走
那個流媒體密鑰請求 然後給你一個內容密鑰上下文或CKC
在線上FairPlay Streaming中你會在這裏完成
請求流 並用那個CKC返回到AVFoundation
然而在離線FairPlay Streaming中
在這裏你要將那個CKC交給AVFoundation
這樣AVFoundation能將其凍幹成一種格式
可以安全存儲在你應用的存儲空間中
你也可以在後續的回放中重新用上它
之後...
一旦你將它寫入你的應用存儲空間中
你要將那個凍乾的密鑰返回給AVFoundation
來完成這個請求
如果你的應用離線了那你需要做的只是
從你的應用存儲空間中讀取那個凍乾的密鑰 並返還給
AVFoundation 這樣不需要網絡就能做得到
所以我們來看看這究竟會怎樣改變你的代碼
在線上FairPlay Streaming中這些密鑰請求作爲
AVAssetResourceLoader的一部分
具體是AVAssetResourceLoadingRequest上面的委託方法
一旦收到請求首先你要做的是
請求AVFoundation創建流媒體內容密鑰請求
或是SPC這會發送到你的服務器上
這會返回一個CKC 之後你用它來響應AVFoundation
現在 在離線FairPlay Streaming中我們有一個新方法
這是用來凍幹密鑰的方法
你輸入從服務器返回的CKC
然後返回那個爲你保存的數據團 從而用於離線存儲
我們還有一個新的內容類型作爲這個請求流的一部分
是persistentContentKey類型
和一個新的選項
來爲應用方法輸入我們的流媒體內容密鑰請求數據
所以我們是這樣修改那個密鑰請求流的
用於我們要離線保存的密鑰
我們首先要做的是請求AVFoundation創建SPC
不同之處是我們要輸入所需的persistentKey選項
這樣 AVFoundation和你的密鑰服務器
會知道去請求一個適用於凍幹過程的密鑰
所以它將SPC發送到你的服務器 從而得到CKC
一旦拿回了CKC 你就調用你的persistentContentKey方法
來創建這個凍乾的密鑰然後可以保存於磁盤上
之後你要將這個密鑰真正寫到你的磁盤上
你要將內容類型設置成persistentContentKey類型
然後用那個持久性CKC來完成數據加載請求
那個CKC保存在你的磁盤上
現在如果你離線了
或者比如說 你之前已經滿足了這個密鑰請求
那你要這樣做
你會得到資源loadingRequest
你只需從應用存儲空間中讀取你的凍幹密鑰
設置persistentContentKey類型然後響應密鑰loadingRequest
完全不需要接入網絡這很明顯是必須的
因爲你可能在飛行模式下
並且在這個過程中沒有任何網絡連接
這就是如何修改FairPlay Streaming
來用於你的離線HLS內容
現在我想談談管理資源的最佳做法
很重要的一點是這些下載會佔用
你的應用磁盤使用量所以你要稍微多留意
你真的應該清除磁盤上任何不需要的資源
具體點 你一定要爲你的用戶提供一種
查看所有下載內容的方式
並允許他們刪除那些不再需要的內容
要記住 用戶取消的下載還會保留在磁盤上
你可以用這些資源在將來的某個時刻恢復下載
如果你不想恢復下載那你就要注意在
取消下載的時候刪除那些資源
我們希望各位基於明確的用戶行動來保留下載
你不應該去下載一堆東西
因爲用戶可能不想離線觀看
我們冒昧地選擇性排除了這些下載
在iCloud備份上面
我之前提過了你應該做好準備 這個系統會在
在低磁盤空間的情況下刪除資源來回收磁盤空間
這不會在應用運行的時候發生
這隻會在你應用終止後發生
當你的程序啓動後你應該稍微保守地
推測你的資源是否真的
提前下載在磁盤上了
你不要將資源從我們提供的位置中移走
因爲讓系統能夠找到這些資源是非常重要的
最終 因爲下載的資源可能包含
未被下載的媒體選擇
注意不要改變你服務器上的資源
如果你一定要更改媒體播放列表的位置
並改變你的主播放列表
那你應該將修改後的資源託管到新的URL上
而不是更改原來的那個
這就是 離線HLS
我們高興向各位發佈並期待各位會採用它
總之 今年我們有新功能供你們使用
我們有MP4片段支持這會帶來通用的媒體格式
可以用在你們所支持的所有不同平臺上
記住 這個兼容所有的HLS功能
而且對HLS播放列表只需微小改動便可採用
接下來 我們有使用DATERANGE標籤的新播放列表內的元數據
在直播內容中非常適合使用元數據
內容可能有動態更新的元數據
像是廣告邊界之類的東西
最後我們提供離線HLS回放
其中我們有一個強大的媒體下載引擎
你還可以配置要下載的媒體選擇和品質
我們還擴展FairPlay Streaming支持
沒有網絡連接時也能工作
所以要想獲取更多信息
包括如何使用AVAssetDownloadTask的樣本代碼
和關於這些新版本的更多的資料
去查看我們開發網站上針對本次會議的頁面
我想指出Roger之前提到的會議
已播出的創作和驗證演講
現在你可以在WWDC應用上觀看這個視頻
我極力推薦觀看
感謝各位的到來希望大家會喜歡之後的發佈會