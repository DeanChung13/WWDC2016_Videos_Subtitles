Swift入門
大家好歡迎參加Swift入門
我是Dave Addey和同事Brian和Alex一起
我想要給你們一個Swift編程語言的快速概覽
在之後60分鐘裏你們會獲得足夠的Swift 3知識
來能夠閱讀Swift代碼最好還能開始寫代碼
讓我們看看這個語言的一些基礎
這是一些我兩年前寫的代碼
我寫了一個常量用let來表明
這被叫做language是一個字符串類型
這中間的冒號我們會經常在Swift中看見
它表明是類型
language是一個字符串類型
我在swift代碼裏用字符串給它賦值
讓我們做更多
假設有個整數稱爲introduced
我們將它賦值爲2014
及一個布爾型被稱爲isAwesome
把它設爲真
你注意到這些值都無需改變
名字language不會改變
或者它出現的年份
兩年了Swift還是很好
所以這也可以是一個常量
這是Swift中的一般原則
如果一些量不需要被改變我們申明它爲常量
現在你可能還注意到了命名習慣
常量和變量是小寫開始的駝峯式命名法
像字符串、取整和布爾類型是大寫駝峯式命名法
現在如果我們看右邊的這些
很明顯
我想要的是字符串 整數 布爾型
在這種情況下Swift會推斷這些類型
我們不需要寫出來
你仍然得到明確申明瞭類型的變量
但是你不用寫那麼多代碼
這是一些常量
那麼對於變量呢？它們有時候會改變
這是一個變量被用var表明
這是爲了語言的版本
它被改變了讓我們更新它到2016年的情況
現在如果我試着對常量這樣做
如果我試着給isAwesome賦值爲假
Swift告訴我有個錯誤
這是對的
編程時常做的一件事
是通過其它值生成字符串
我們可以把字符串連接在一起
像這裏展示的這樣但是Swift有一個更整潔的方法
被稱爲字符串插入它看起來是這樣的
我們可以把字符串和值放進一個更大的字符串
通過用括號包裹並在前面加一個反斜槓
我們在這想生成消息“Hello WWDC”
我們並不只用字符串
我們還可以添加其他值
像是這裏的整數加入年
我們還可以加入表達式
我們可以讓年加1爲了可能是明年的代碼
現在Swift中的字符串對於Unicode編碼是完全兼容的
它可以是ASCII也可以是貓 狗 國旗
這都是相同的
不論是常量還是變量
你幾乎可以使用任何字符
在常量和變量名中
說到標準字符
Swift做了很多工作來解決這意味什麼
做爲一個單獨字符
無論你的字符串是怎樣在幕後編碼的
或者怎麼顯示在屏幕上
我有一個字符串叫做dogString
你可能認爲它有6個字符
D O G ？！狗臉
但你錯了
這裏只有5個字符而不是6個
這裏有一個特殊符號被稱爲問號驚歎號
很好的用來形容狗
如果你不相信我讓Swift來證明這點
每個字符串都有一屬性叫characters
它給我們字符串中的字符的集合
我們可以訪問這個集合的計數屬性
來看有多少字符
如果把那傳遞給Print函數
我們發現我們實際上有5個字符
如果你仍然不相信我
讓我們一個個遍歷那些字符
用for-in循環
把每一個打印在它們自己的一行中
你可以看到我們實際上有5個字符
D O G ？！和狗臉
除了基本類型外
我們還有一些內置的集合
我們有數組和字典
你可能知道字典在別的語言裏是哈希或者映射表
最簡單的創造數組或字典的方法是使用字面值
這是一個數組字面值用方括號包圍
並用逗號分隔每個值
這裏我們有一個數組包含4個名字4個字符串
字典看起來類似
它們的鍵和值被冒號分開
我們有一個字典它的鍵是名字是字符串類型
它的值是整數
現在你可能注意到在數組中
它們都是相同的類型都是字符串
在名字數組中插入其它類型是沒有意義的
有一個整數 布爾型或自行車
這會很奇怪
對於名字我們總是希望它們是字符串
我們可在Swift中表達它
我們可以說我們想要一個字符串數組
當我們從中取出值時
我們可以把它當成字符串處理
這就是我們爲何這樣寫
這是我們怎麼寫一個字符串數組用方括號包圍一個字符串
但是我們早前看到
如果右手邊明顯的表明了我們想要的類型
Swift會爲我們做推斷在這也會發生
我們不需要寫下類型
很清楚我們想要字符串數組
對字典也是同樣的
這裏很明顯我們想要鍵是字符串值是整數
Swift可以爲我們推斷這些所有東西都有清楚的類型
Swift有所以你在別的語言裏知道循環種類
我們有在執行循環體之前檢查條件用的While循環
一repeat-while循環執行循環體一次
在檢查條件前來決定是否繼續
我們先前看過我們有for-in循環
用來在字符串中遍歷所有字符
這不是for-in唯一能做的事
我們能用它遍歷一個範圍
這裏我們有一個從1到5的範圍
包括這些數字
我們用來打印5個入口在乘以4表中
我們把它寫成1... 5這被稱爲閉合範圍
因爲它包括2邊的數字
有時我們需要
一個範圍運行到比最後的數字少1
這是一個它很有用的例子
我有一個整數數組但我只想打印前5個
因爲數組的索引從0開始我希望索引從0到4
所以我們想要用半閉合範圍運算符
點 點 小於
因爲它運行到比最終的數字在這是5小1
我們可以對數組使用for-in循環
這裏我們爲數組裏的每個名字打印一條信息
我們也可以對字典使用它
現在注意我們要遍歷鍵和值
名字和年齡在同一時間
這在Swift裏被稱爲元組
讓你把多個值組合在一起
同時使用它們
我們晚點會看到另一個例子
這使代碼遍歷一個字典時清楚很多
我們要怎麼修改這些集合？
這是我今年 WWDC 的裝箱單
我把它申明我一個變量所以我可以改變它
我包括了基本的襪子和鞋子
在 WWDC 2014
我忘記了我的襪子這是一個惡夢
我不會再犯同樣的錯誤
所以我們檢查數組的第一項是襪子
2014後如果我把它放在列表裏它會是第一個
我們通過下標來這樣做
在數組名後寫一個在方括號裏的索引
如果我們打印這個值我實際上記得添加襪子
襪子和鞋子還不夠但是爲了一星期的會議
我還需要其他東西讓我們添加一個新物品
讓我們把褲子加入數組
我們使用append方法
但是這有一個問題
這個會議是在美國他們不叫褲子“trousers”
他們叫褲子“pants”
這會引起很多誤解
所以讓我們修改數組中的一個值
讓我們把它改成牛仔褲
我們又用下標來這樣做改變在索引2的項目
牛仔褲在哪都一樣因此不會招致誤解
這個會議在加利福尼亞州這裏總是晴天很熱
讓我們再加一些東西
讓我們加一些短褲 拖鞋 防曬霜
我們可用appendcontentsOf方法
並傳遞一個兼容的數組另一個字符串數組
它們在同一時間都被添加
這個會議是在加利福尼亞州的舊金山
這裏並不總是天晴並且炎熱
所以讓我們修改一下這三項
用連帽衫和圍巾來代替
我們可以通過傳遞一個下標範圍來這麼做
注意我們要修改三項中的兩項
這在Swift中是合法的
那對於字典呢？讓我們修改一個字典
這裏是我的年齡字典
我想加入其他人
我們通過用下標的辦法來爲一個還沒有值的鍵加一個值
我加入了Justyn
但是仔細想想上週是Justyn的生日
所以這個值現在不對
我需要更新它我還是用一樣的方法
我給同一個鍵賦不同的值
現在我的字典是對的了
如果我想要從字典裏取出一個值
如果我想知道是否有Devon的年齡
或者Daryl或者Daniel
可能在字典對這些人有一個值
也可能沒有我們需要一個方式來應對這種情況
這是Swift的被稱爲可選的一個功能的好的使用案例
如果我們試着對Amy這樣做我們可能期望有個值是40
如果我們對Daryl這麼做我們應該得到什麼？
這裏對Daryl沒有值
這樣考慮這個問題
或者在字典裏Amy有一個整數值
或者沒有一個整數值像例子裏的Daryl
所以這裏我們有一個可選的整數我們寫成Int問號
問號表示這裏可能有值
也可能沒有
我們看看我們是否找到一個值
通過把它和nil比較
nil是一種特殊情況是沒有值的簡寫
如果對Daryl這麼做沒有值
我們會打印這個信息
年齡沒有找到
如果我們試着對Amy這樣做我們找到一個值
所以它不等於nil我們不打印這個消息
一般我們不僅僅查看一個值是否存在
當它存在時我們想使用它
Swift有一種簡單的寫法
寫下“if let”
它是說如果字典含有Amy的值
讓一個新的常量age等於那個值
我們就可以在if語句裏使用那個值
請注意在此我們把它當成真正的整數使用
它不再是可選的
if語句查看它的值並解包
給我們一個普通的整數我們可以對它做整數的操作
我們看了一些if語句
這是另一個用來打印生日消信
有兩件事需要注意
首先我們不需要在條件附近有括號只需要寫下條件
第二我們給每一部分的語句加大括號
加表明哪部分代碼會被執行
此外我們還有switch語句
可以用來寫更復雜更強大的匹配
它轉換一個常量或者變量的當前值
和一系列可能的情況匹配
比如我們有這種情況
如果年齡值是1
我們想要打印第一個生日快樂的消息
我們也可以匹配範圍
匹配任意值使一些人是青少年
我們可以匹配更復雜的模式比如這一個
一個叫decade的臨時常量
等於我們當前要匹配的值
檢查是否能被10整除
如果可以用它打印一條特殊的生日消息
爲任何人剛滿30或40歲或其他重要的年齡
但這有一個問題
如果我們想要爲以下年齡的人打印消息 比如41
97或56
它們不會得到一個消息
聽起來很不幸特別是在它們的生日上
坦白說Swift在這幫助我們
Swift確保switch語句是完整的
你不會偶然的忘記你需要的情況
在這個例子裏我們可以加一個default語句
捕獲每一個我們之前沒有捕獲的情況
說無聊的生日快樂
這裏有另一個switch語句
它獲得一個字符串值用戶名和一個布爾型值
指示用戶密碼是否合法
我們會一起用這兩個值
來產生一個合適的消息用來顯示
當用戶要登錄一個受限的區域
要這樣做 我們可以同時switch兩個值
用一個元組像之前做過的那樣
這表明我們可以寫一些非常非常有趣的case
有趣的switch case
可有一個case是用戶名爲admin
密碼爲真
然後打印消息來歡迎管理員回來
現在如果是一個客人
我們永遠都不希望客人進入受限區域
即使密碼是合法的
我們可以用下劃線來忽略密碼
它的意思是匹配任意可能的值
對所有其他用戶
我們不關心用戶名是什麼我們只關心密碼
我們可以忽略用戶名
我們切換到我們想要做的
檢查密碼合法性
要這麼做我們創建一個叫做IsValid的臨時常量
然後我們用三元條件運算符
就是這個問號和冒號
來說如果是合法的用這個消息
否則用這個消息
如果我們瀏覽一些例子
如果使用管理員並且密碼有效
他們將得到一個管理員消息就像我預期的那樣
如果我們試着用客人即使密碼有效
他們得到對不起你不能進入的消息
如果我們用Bob並且密碼有效
他獲得預期的歡迎消息
但如果他的密碼無效他得到訪問被拒絕的消息
現在關於這個switch語句有最後一個需要注意的點
它沒有默認這個情況
它沒有的原因是它不需要
它已經是完整的
如果我們看一下後這個case
實際上它包括了所有可能的情況
我們沒有在上面匹配到的
所以switch語句不需要default就已經完整了
這就是Swift語言的一些基本知識
現在我想把演講交給我的同事Brian
來介紹Swift中的函數和閉包
好的 謝謝Dave就像我已經說過的
讓我從怎樣在Swift中定義函數開始
你用func關鍵字定義函數
然後你在大括號裏實現它
我們定義了一個簡單的函數叫做sendMessage
打印消息到控制檯
然後你可以用一個直觀的方式調用這個函數
通過寫下其名sendMessage接着是一對空括號
讓我們給這個函數加上參數
來表明消息是否應該吼叫
你寫下參數的名稱接着是冒號
然後是參數的類型
就像你申明一個常量或變量所做的那樣
我們添加了一個叫做shouting的參數 它是布爾類型
當你調用這個函數時
參數的名稱爲你傳入的參數提供一個標籤
給參數加標籤使代碼更易讀
使參數的目的清楚
在這個情況下如果沒有shouting標籤
一些閱讀你的代碼的人可能以爲那個真是表明
是否發送這條消息
所以你可以喊出一個消息
但是你要把消息發給誰？
讓我們加入另一個參數
使我們把消息發給特定的人
在這我們添加一個參數叫做接收人
是一個字符串類型
我們還通過字符串插入將接收人姓名加入我們的消息中
當你調用函數時你可以傳入接收人姓名
現在雖然這個消息按你期待的那樣打印
它讀起來不是很好
發送消息接收人Morgan讀起來很怪
當你調用函數時你希望它讀起來自然
在這個例子中你希望讀起來像
發送消息給Morgan這形成一個有好的語法的短語
你可以通過改變參數名稱來這樣做
這也會改變參數的標籤名
這使得函數被調用時讀起來好一些
發送消息給Morgan
但是這在函數內部工作的不好
在函數體裏你希望參數是一個名詞而不是一個介詞
嘿給聽起來不好
但是有時沒有一個單詞能工作良好
既在函數體內又在調用函數的標籤
在Swift中你不用放棄其中的一個
當一個參數的名稱不合適時
參數的標籤
你可以明確地提供一個更合適的名稱
你把這個明確的參數標籤寫在參數名前
在這我們添加to作爲明確的參數標籤
在接收者參數的之上
這表示你可以用“to”
當你調用函數發送消息給Morgan
然後你仍然可以在函數體內使用接收者
讓我們添加另一個參數到函數中
使你調用它時能提供一個定製消息
這裏我們添加了一個消息參數是字符串類型
現在我們調用函數你可以傳遞你自己的消息
再一次的代碼如預期一樣運行
但是讀起來還是不好
發送消息消息是重複的
消息標籤無助於澄清第一個參數的作用
因爲函數名中已經說清楚了
發送消息
在這裏參數標籤使代碼更難讀
在這種情況
你可以在參數名前寫一個下劃線
這表明你不給參數提供標籤
當你調用函數時
這時我們的函數讀起來自然
發送消息 在Bash見給Morgan
我們不常需要喊出我們的消息
我們通常傳遞假給這個參數
在Swift你可以捕獲這個行爲
在函數申明中
當參數有一個常用到的值時
你可以把它作爲default值
你能過賦一個default值在這個情況下是假
在參數的類型的後面
當你調用函數時
你可以忽略相應的參數
default值被使用
當你決定是否使用 怎樣使用明確的參數標籤
什麼時候忽略一個參數或者提供一個default值
記得函數只被申明一次
但是被重複使用
最重要的事是
函數被調用時讀起來清楚準確
現在讓我們學習更多
你需要考慮的事
當編寫優秀Swift API時
請去看Swift API指導演講
我們已經看了很多種函數獲得值的方式
讓我們看看讓它們返回值的方法
假設你想寫一個函數
返回數組裏第一個有給定前綴的字符串
函數獲得一個字符串前綴
一個字符串數組
返回一個有給定前綴的字符串
如你所見 你用一個箭頭
來表明函數值的類型
在這裏是字符串
讓我們看看這是怎麼工作的
首先用一個for-in循環來遍歷數組中的每一個字符串
然後檢測字符串是否有給定的前綴
你需要檢測字符串是否有給定的前綴
使用string.hasprefix方法
如果它有 那麼完成了你只需要返回這個字符串
通過將它寫進返回語句
但是你要返回什麼
如果數組不含有你在找的字符串？
因爲這個函數申明瞭會返回字符串
唯一的選項是一些合法的字符串
在這個情況下是空字符串
但這不是好的Swift代碼
但是像Dave演示過的可選是完美的
用來表明值有可能不存在
所以你只需要改變函數返回類型
爲可選字符串通過在字符串後寫一個問號
現在你可以返回nil當字符串沒有找到時
因爲函數返回可選的字符串
你可以在一個if-let語句裏安全地使用它
請注意Swift推斷函數的返回類型
所以不需要明確的寫出來
我們看了一些方法
函數能獲得和返回不同類型
比如字符串 整數 數組和可選類型
讓我們看看怎麼寫另一種函數
假設你要寫一個函數過濾一個數字數組
基於一些條件
讓我們想想這個函數需要做什麼
它要獲得一個數字數組
對數組中的每一個數字
函數判斷是否將它包含在被過濾的結果中
比如你想要一個數組被過濾成只含有偶數
你可以測試每個數是否能被2整除
4當然是偶數所以它被包括在結果數組裏
如果一個數不是偶數比如17
過濾函數轉而檢測下一個數
然後繼續 遍歷剩下的數組
讓我們看看寫這個函數的代碼
函數申明是你想要的
但是你要把什麼類型放在這個包括數字參數這裏？
你剛剛看到決定是否把數字包括進結果裏
是一個函數
不是一個簡單的值比如字符串或者一個數字
在Swift裏函數可以接收其他函數做爲參數
那麼函數類型看起來是怎樣的？
所有的函數類型在Swift中都有基本的形式
函數參數類型如果有的話
在括號裏跟隨的是一個箭頭
然後是函數返回類型
比如說我們早前的發送消息函數
它有空的括號
因爲它不需要任何參數箭頭空
這裏空表示它不返回任何值
在Swift中如果你的函數不返回任何值
你不需要明確的寫箭頭空
這是第一個字符串函數
它的簽名複雜一些
但是它的類型還是遵循基本的形式
它獲得一個字符串一個數組一個字符串參數並返回一個可選字符串
你們已經知道了函數類型的語法
所以很清楚你要怎麼完成過濾整數這個函數的申明
這個包括數字參數
可以是任何函數獲得一個整數返回一個布爾型
你把類型Int寫在括號裏箭頭布爾
讓我們來完成函數的剩餘部分
你需要生成一個過濾過的數字的數組
這有一個變量叫做結果
它被初始化爲一個整數數組
隨着你遍歷傳給這個函數的數組
檢查每個數字是否應該包括在結果數組裏
要這麼做 你把每個數字傳遞給包括數字函數
注意在過濾整數函數體內
包括數字參數被當成被傳入的函數的名字
那說明你可以調用它
和調用其實函數相同的方式
這就是你怎麼寫一個函數
獲得另一個函數做爲一個參數
但是你怎麼調用這類函數？
首先你需要把一些值傳遞給過濾整數函數
這是一個數字數組
和一個簡單的函數叫做可被2整除
表明一個整數是否是偶數
你可以看到能被2整除的類型
和包括數字參數的類型匹配
這表明我們可以傳遞能被2整除函數
給過濾整數函數做爲一個參數
你通過簡單地傳遞能被2整除函數的名字
現在你得到一個數組只含有偶數
注意你沒有包括括號
當傳遞能被2整除函數時
這是因爲你現在並沒有調用它
它在晚些時候在過濾整數函數體內被調用
還要注意我們傳遞了數組的名字
我們也可以傳遞數組字面值
比如如果你只需要傳遞少量值
不需要創建一個常量爲了等會的重用
傳遞函數參數也可以這樣
很可能能被2整除函數
不會被重用
新建一個函數很麻煩
每次你想要傳遞不同的過濾函數條件
如果你看看能被2整除的重要部分
你可以看到給它一個名字
僅僅是爲了方便重用
能被2整除僅僅是一個名字
針對你所看重的功能
在Swift中像你可以寫一個字面值字符串或字面值數組
你也可以寫一個沒有名字的字面值函數
被稱爲閉包表達式並在你的代碼中被傳遞
寫一個閉包表達示的語法
和函數申明很像
除了它沒有名字
把整個閉包的函數寫在大括號中
用in關鍵字把閉包函數體和簽名區分開
用數字參數類型是整數
在閉包的函數體內返回一個布爾型
這是最明確和最完整的定義閉包的方式
但是你之前見過了
Swift可以推斷很多信息從代碼的上下文中
比如閉包的函數類型已知
從包括數字這個參數的類型中
所以你不需要明確的寫出來
如果整個閉包的體只是一個返回語句
像這裏一樣你不需要明確的寫出return關鍵字
這是更乾淨的語法但是因爲閉包很短
看起來這個參數數字都顯得有點多餘
像這種情況Swift提供暗示的變量名
所以不需要寫出參數名或者in關鍵字
這個暗示的文件名
用一個美元符號開始以及一個從0開始的數字
$0表示第一個閉包參數$1是第二個 等等
雖然這可以在任何閉包表達式中使用
使用它們不會使你的代碼變得難以閱讀
現在你看到Swift提供很多方便的編寫閉包的方式
但是直接在一個函數的括號中傳遞它們
看起來有很多符號
一個關閉大括號緊鄰一個關閉括號
看起來很怪
但是當閉包是最後一個參數時
這種情況就是
你可以寫一個尾隨閉包
就在括號外面
你接下來會看到如果一個閉包是一個函數的唯一參數
你可以移除這個括號
這時尾隨閉包看起來很好
當閉包含有多於一行代碼時
比如這個更復雜的閉包
它判斷一個數每一位相加的和是否是偶數
尾隨閉包語法
確保即使是複雜的有多行的閉包
看起來也很自然很好
現在過濾整數函數很有用
如果你想要過濾整數
但是要怎麼過濾其他類型的數組比如類型數組？
例如假設你有一個名字數組
你想要一個過濾了的數組只含有名字
含有少於給定的字符數
你可以寫一個過濾字符串函數
像你看到的這個
因爲你已經寫好了一個過濾整數函數
讓我們來看看你能否重用一些邏輯
首先你當然想要做一些簿記
把所有涉及數字的地方改成字符串
下一步把所有整型改成字符串類型
因爲實際上這2個函數的行爲
是一樣的對整數和字符串
沒有什麼別的要做
它們實際上是同樣的函數
你現在有函數過濾字符串數組
現在如果你想要一個函數過濾其他類型
你可以重複這個步驟
爲每種類型
但是這顯然很無聊
實際上你可以寫一個函數
可以處理任意類型的數組
這被稱爲泛型函數
我們來看看怎麼寫一個
寫一個這種函數和你已經看到的沒有很大不同
首先你把名字改得更通用
比如函數叫過濾
而不是過濾整數或過濾字符串
接下來更重要的是你需要填寫佔位符
你在這裏看到的元素的類型
但是你現在還不知道元素的類型
所以你希望是一個類型參數
實際的類型會在函數被調用時確定
這裏我們填寫了佔位符
用一個通用類型參數叫做元素
所以你能看到區別在類型參數
和實際存在的類型比如字符串或者整數
你把類型參數寫在尖括號中
緊跟函數名後面
現在你有一個泛型函數
作用於一個數組包含任意類型的值
你和以前一樣調用這種函數
你不需要指定你想要這個函數處理的類型
因爲可以通過你傳入的值推斷
過濾是如此有用的操作所以Swift標準庫
有一個過濾方法可用用於任何種類的序列或集合
你和你看到的過濾函數以同樣的方式工作
除了這是一個方法你需要用點號來調用它
names.filter像你看到的
Swift標準庫實際上有很多其他方法
接受閉包作爲一個參數
另一個很有用的是映射方法
它也作用於任何序列或集合
映射返回一個新的數組
包含對每個元素進行閉包的結果
這是一個例子在對上面得到的包含短名字的數組調用映射方法
它傳遞一個閉包把每個字符串轉成大寫
你可以把它們鏈起來強行多個操作
比如
你可以在同一個表達式裏過濾並大寫
通過把兩個方法形成一個鏈
使用點號
過濾先進行
然後映射在被過濾過的數組上被調用
最終返回大寫的字符串
這讀起來很棒
即使你用尾隨閉包語法
所以使用閉包和函數接收閉包作爲參數的這個組合
使它有可能寫一些複雜強大的代碼
用一個簡明但是很有表現力的方式
我們已經看了函數和閉包以及一點泛型函數
我想邀請Alex上臺告訴你們所有關於Swift數據類型的事
謝謝Brian
你們看到了Swift中的數據類型
現在讓我們看看怎樣創建你自己的數據類型
讓我們從結構開始
你創建一個像這樣
你寫下struct關鍵字跟隨的是結構的名字
矩形
然後在大括號裏
你寫下結構的屬性
屬性使用相同的語法
和你在前面見過的變量和常量一樣
這裏有兩個屬性
做爲申明的一部分被賦值
所以你可以新建一個矩形通過只寫下矩形這個名字
跟隨一對括號
要訪問屬性你使用點號
你不需要爲屬性提供值
在類型申明中
實際上大部分時候你不這麼做
更常見的 你只寫類型
然後你在建立實例時賦值
矩形除了尺寸的另一個屬性是面積
雖然你不想儲存面積
你需要在每次尺寸變化時更新它
你想要的是一個屬性
它的值當你需要的時候被計算出
你可以用一個被計算屬性
要創建一個被計算屬性
在屬性的名稱和類型後面你寫一個函數體
用來計算並返回
函數的當前值
雖然它是被計算的而不是被儲存的
你還是可以用點號訪問它
你還可以用屬性做更多
你可以有設置者和監視者
你可以獲得更多信息
在Swift編程語言的屬性章節
就像你在結構中定義屬性
你還可以定義方法
和你已經看過的函數一樣的語法
和屬性一樣你用點號訪問方法
當你需要調用它們時
你看到幾次新建矩形的語法了
我們看看它做了什麼的更多細節
這看起來像調用函數因爲這個括號
實際上它是在調用初始化者
我們一直在用一個特殊的初始化者
稱爲成員初始化者
Swift爲你的結構實現
這是它看起來的樣子
如果你明確的寫這個初始化者
你寫init關鍵字
然後在裏面你爲矩形的屬性設值
注意有兩個寬度
一個是屬性另一個是參數
你寫下self點來明確的參考屬性
這就是你怎麼寫初始化者
矩形結構有足夠多的代碼
值得進行一些組織
Swift中這樣做的一個方法是使用擴展
一個擴展讓你向一個已有的類型添加功能
在Swift裏你可以用擴展來分離你的代碼
核心功能可以在結構的申明中
輔助的功能可以在一個或多個擴展中
你可以不受限地擴展你自己的類型
如果你需要你可以擴展從其他地方來的類型
比如foundation 或者標準庫
你早前看到怎麼創建範型函數
在不同的類型上進行相同的操作
你還可以創建泛型結構它包含不同類型的數據
語法看起來很相似
你仍然有泛型類型參數在名字後面的尖括號裏
這個例子把名字附加給一些種類的元素的數組
這會是個有用的數據結構比如
來填充一個表視圖有不同的部分有標題名
你創建一個泛型結構實例
就像另一個類型的實例
你在這看到如果你寫下類型標註
棋盤遊戲和質數有不同的類型
一個是字符串數組另一個是整數數組
它們有不同的元素類型所以它們是不同的類型
你不需要寫數組
Swift自動推測是什麼元素
這就是結構
在Swift中另一個數據類型是類
你在名稱前寫下類別關鍵字
但是關於結構的一切都仍然有效
屬性 方法 初始化者等等
那麼爲什麼你想要創建一個類？
一個原因是你的代碼可以引用一個類的同一個實例
從不同的地方
這和結構的行爲不同
一個結構的行爲像一個大的值
比如 在遊戲中 你讓玩家1有一個分數
你給玩家2一個一樣的分數你有兩個獨立的分數
改變玩家2的分數不會改變玩家1的分數
但是兩個玩家需要引用硬盤上的同一個文件
當他們記錄他們的高分的時候
因爲這是一個類這就是你想要的行爲
當玩家2得到一個新的高分並把它記錄到文件中
兩個玩家都看到改變
如果你是從另一個面嚮對象語言中過來
你可能習慣於寫很多類
在Swift中你不需要經常寫它們
任何時候你想要檢查是否相等或進行復制
你通常只需要一個值類型像是結構
要知道更多爲什麼以及怎麼用值類型的信息
你可以看一個很有用的演講
另一個用類的原因是
你想從已有的類中派生一個子類
比如假設你有一個框架
給你魚類包含一些核心的魚的功能
你可以創建子類來添加功能像是飛魚可以添加飛方法
你標明這是一個子類通過寫冒號魚
子類還可以覆蓋方法來提供它們自己的實現
像抱怨魚
它像普通魚一樣游泳只是會先報怨
你寫super.swim來調用父類的實現
這個代碼還不能被編譯
當你在Swift中覆蓋方法
你需能寫覆寫關鍵字來明確標明
現在代碼工作
像是一個錯誤偶然覆蓋了一些東西
這也是一個錯誤寫了覆寫卻不覆蓋任何東西
這就是說如果你拼錯了一個想要覆蓋的方法的名字
Swift會在編譯時告訴你這個錯誤
一個賽格威也可以提供初始化者
比如魚有初始化者接收一個名字
抱怨魚的初始化者需要名字和報怨
在初始化者中你設置初始值
爲子類申明的屬性
然後你調用super.init
讓父類完成初始化
你可以用初始化者做更多特別是圍繞類
你可以在初始化者這一章知道更多
在Swift編程語言中
你看過了怎麼用子類
讓我們談談子類編程
繼續遊戲的例子假設你有玩家基類
因爲每個玩家輪流行動你有一種方法這樣做
你有兩類玩家
你有人類玩家類
通過顯示UI給用戶來完成一輪
你有電腦玩家類
通過進行最好的合法的移動來完成一輪
問題就是什麼進入基類的實現中？
人類和電腦玩家沒有共享的行爲
沒有共享的代碼可以移出
在附近的代碼
你永遠都不會想要一個玩家基類實例
所以這個方法永遠都不應該被調用
這裏能寫的唯一合理的東西
是一些嚴重錯誤來幫助你捕獲失誤
在開發的早期階段
所有玩家類在做的是描述做爲一個玩家意味着什麼
每個玩家進行一輪
它是玩家的藍圖
在Swift中你用協議表達這種關係
協議規定要求像是方法和屬性
他們就像接口或者抽象類
你可能在別的語言裏知道
你使用protocol關鍵字來創建一個
因爲它描述其他類型要實現的要求
你不提供一個實現
類型通過提供那些實際來遵守協議
你通過寫：Player來申明符合性
就像你對父類做的那樣
這樣你不再使用子類
這些方法不覆蓋任何東西
你不寫覆寫關鍵字
沒有理由它再是一個類
讓我們把它變爲結構
讓我們仔細看看人類玩家
它還有一些其它的屬性比如名字和分數
如果你創建一個玩家實例你可以打印它
你得到一個default的描述因爲標準庫
可以把任何類型轉化成字符串
但是如果你想要定製這個轉化
來打印一個更好的描述
該標準庫還有一個協議叫CustomStringConvertible
使你提供自己的描述
這是這個協議的樣子
它有一個要求一個描述屬性
任何遵守這個協議的類型使用定製描述
你要在哪實現這個描述屬性？
記住你可以整理你的代碼
使用擴展核心功能在函數申明中
附加功能在擴展中
有一個字符串轉換功能是第二類
它不是核心功能所以把它放在擴展裏
這是你如何擴展一個類型來遵守協議
你在第一行寫下“: CustomStringConvertible”
然後你在擴展體內實現要求
現在你可以調用打印你獲得定製的字符串轉換
你可以在Swift裏用協議和擴展做很多
來組織你的代碼並建立抽象
要知道更多信息請看
2015年的面向協議編程
那帶來Swift最後的一個數據類型枚舉
你在有一個值列表時使用枚舉
當你提前知道
這是一個枚舉支持左或右對齊的文本
當你用一個枚舉時你用點號來訪問它的案例
這裏只有兩個案例
所以你把它們寫在一行還是可讀的
因爲枚舉是一個可能值的列表
經常把它和switch一起用
一個switch case對應一個枚舉案例
一遍遍寫對齊有點重複
在這並不需要
switch考慮文本對齊所以需要檢查的僅有的可能值
是枚舉的案例
所以你可以省略枚舉名稱
只用寫“.left”
還要注意這裏沒有default
和你已經看到的原因一樣
switch已經覆蓋了所有可能的對齊值
沒有東西留下給default來處理
省略default有一個好處
如果你晚些回來增加一個枚舉案例
但是忘記更新switch
Swift會高亮這個錯誤直到你添加遺失的代碼
讓我們快速看一看你能對枚舉做的其他兩件事
你可以給每個枚舉案例關聯一個值
比如對齊可以指定要用多少填充
你可以獲得那個填充值在switch case中
你也可以給每個枚舉案例一個原始值從其他類型中
比如字符串或者整數
來讓你提升代碼的類型安全
通過用枚舉取代字符串常量
你今天下午看了很多Swift
但是沒有時間展示所有的
最後一個我想展示的是錯誤處理
在Swift中你可以用枚舉來描述錯誤
你用throws關鍵字標記一個函數可以拋出錯誤
你在必須要運行的代碼塊前寫defer關鍵字
無論是否發生錯誤
它都會在退出作用域前被運行
比如從一個函數返回
在調用可能拋出錯誤的代碼前
你用try關鍵字標記它
你可以捕獲和拋出錯誤用catch和throw關鍵字
關於所有細節請看錯誤處理章節
在Swift編程語言中
你可以在這找到這本書和其他資源的鏈接
有很多很好的Swift演講可以在這周晚些時間參加或者看視頻
謝謝