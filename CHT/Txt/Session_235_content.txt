構建最棒的鍛鍊應用
大家好
歡迎來到“構建最棒的鍛鍊應用”
你們來到這裏是因爲你們關注構建最佳用戶體驗
對於你的健身應用的用戶
有些用戶很狂熱
他們每週花好幾個小時在健身上
他們期待響應快的易於使用的應用
能提供精確的數據
並能和Apple Health無縫銜接
我是Dash
我是Apple Health & Fitness團隊的一個工程師
一會我的同事Jorge會來加入我
今天 我們將要向大家展示如何搭建一個很棒的鍛鍊應用
能搏得用戶的喜愛
鍛鍊是保持身體健康的很重要的一方面
它能幫助你睡眠與更好地進行飲食決策
還能清醒大腦
你們中的許多人都曾很努力地創造iOS鍛鍊應用
能啓發用戶來記錄他們的身體健康活動
並追逐新的健康與健身目標
藉助Apple Watch鍛鍊應用又提升一個層次
通過瞬時心率卡路里燃燒 以及運動探測
只需一個來自手腕活動的信息
今天 我們主要關注
如何搭建Apple Watch上的最棒的鍛鍊應用
我們先介紹後臺運行
一個watchOS 3中的對於鍛鍊應用而言顛覆性的新功能
然後 我們會從頭到尾細數一遍一次鍛鍊的週期
在這之間 我們將向大家展示你的鍛鍊應用如何能
對用戶的活動排名做貢獻
然後 我們會討論在iOS 10中添加針對鍛鍊的新API
最終 我們會看看一些最佳實踐
那我們開始吧
每一個鍛鍊應用的核心是一個鍛鍊週期
用戶可以開始可以結束
所以我們先說說HKWorkoutSession
這個API用起來很簡單
爲你的鍛鍊應用提供了自動化的好處
當一個鍛鍊週期開始時
Apple Watch的傳感器就會通過活動類型
與某鍛鍊週期對應來精確計算運動和卡路里
這還會允許你的應用來貢獻到
用戶的活動環
比如說 在一次鍛鍊期間
活動會通過鍛鍊類型來獎勵運動的分鐘數
到用戶的運動環中
在一次鍛鍊週期中
一旦用戶喚醒設備你的應用就會被展示
用戶會很喜歡瞬間訪問你的應用
在他們使用手錶鍛鍊時
最終 我們很高興地宣佈 鍛鍊應用
在watchOS 3中現在可以設置在後臺運行
讓我們多說幾句後臺運行
後臺運行會大幅提高你的鍛鍊應用的使用體驗
你的應用可以在後臺處理來自傳感器的數據
比如說 你將能收到連續的心率值
即使當你的應用沒有展示在屏幕上
你還可以向用戶提供即時的反饋
在一次運動週期的任何時間
你可以向用戶發送觸覺警告來告知他們當前進度
這還將允許你很快的展示最新的數據
每當用戶看一眼手腕時
允許後臺運行很簡單
只需要將workout-processing添加到BackgroundModes
在你的擴展Info.plist
當然 爲了保持Apple Watch的高性能
你必須要限制你的後臺任務
只進行必要的工作
如果你的應用在後臺使用過多的CPU資源
watchOS可能會將其暫停
我們建議你使用我們的工具
來測量你的應用的後臺CPU使用情況
你可以使用Xcode內置的CPU反饋工具
或是instruments中的time profiler
watchOS 3還會生成一個內含backtrace的日誌
每當你的應用超過了CPU臨界值
現在你設置好了後臺運行
我們一步步講解如何開啓一次鍛鍊
開啓一次鍛鍊要進行如下三步
第一 你需要請求授權來訪問HealthKit中的數據
第二 你需要創建一個鍛鍊配置對象
來表示你想要開啓的鍛鍊類型
第三 你需要創建並開啓一次運動週期
利用你的鍛鍊配置
我們一步步來完成
所有的鍛鍊應用都需要請求權限
爲將健身寫入HealthKit
這將允許你的應用中的鍛鍊
展示在用戶的健康和運動應用中
根據你的鍛鍊應用的細節
你可以請求權限來讀取燃燒的能量
距離以及心率
如果你想了解有關設置授權的更多信息
我們建議你看看我們先前的一次分享
充分利用HealthKit
鍛鍊週期是通過workoutConfiguration對象創建的
workoutConfiguration包含了鍛鍊活動類型
比如跑步或騎行
以及位置類型比如室內或室外
你將要使用配置對象來創建一個workoutSession
然後爲了開啓這一週期
只需將其傳入HK healthStore的start方法中
讓我們通過演示來嘗試一下
僅限今天 我們假裝我們都在爲一家公司工作
我們最新的項目是要構建一個基於watchOS 3的鍛鍊應用
它專門爲樹懶愛好者設計
它叫SpeedySloth
我這裏有一個Xcode項目已經構建好了鍛鍊應用的UI
讓我們一起看一眼
這個事用戶打開應用時所看到的第一個視圖
它只有兩個選擇器 一個是活動類型可以是走路 跑步或遠足
另一個是位置類型可以是室外 室內或未知
當我點擊開始按鈕時什麼反應也沒有
讓我們一起修改它
你剛剛看到的視圖是被
ConfigurationInterfaceContrller類所控制
我在這裏寫了一個方法叫didTapStartButton
其會在用戶每次點擊開始按鈕時調用
我要在裏面寫代碼了
我要創建一個workoutConfiguration對象
我需要將活動類型設置爲當前選擇的活動類型
通過第一個選擇器
然後將位置類型
設置爲當前選擇的第二個選擇器位置類型
我要將workoutConfiguration對象傳入
到一個新的界面控制器叫做WorkoutInterface Controller
WorkoutInterfaceController負責
在鍛鍊週期中管理UI
它還負責開啓與停止健身週期
讓我們看看這個WorkoutInterface Controller
我在WorkoutInterfaceController的喚醒方法中
我知道我將收到我們的workoutConfiguration對象
作爲這個方法中的上下文對象
讓我們使用它來開啓一次鍛鍊週期
首先 我要打開這個上下文對象
來確保它是一個有效的workoutConfiguration
然後我要通過它創建一次鍛鍊週期
通過將其傳入HKWorkoutSession的初始化程序中
我要將我的鍛鍊週期的代理設爲self
而後我將收到回調獲得類似狀態改變或是錯誤等信息
然後我講當前時間保存爲鍛鍊開始的時間
我們在後面還將用到這個參數當我們將鍛鍊樣本保存到HealthKit時
下面 我要將workoutSession傳入HK healthStore的開始方法
我們試一試
現在我們來到了配置界面控制器
我就選室外步行了
我要再次點擊開始按鈕
所以這打開了WorkoutInterface Controller
我有預感我們的鍛鍊週期正確開始了
保險起見 我們看一看設備上的鐘表界面
你可以在最上面看到那裏有一個綠色的跑動小人圖標
這代表這個手錶上的一個應用
有一個活動的鍛鍊週期
用戶可以在任何時候通過點擊這個圖標進入其所屬的應用
所以看起來我們的週期的確正確地開始了
讓我們回顧一下所完成的
我們使用用戶信息創建了workoutConfiguration對象
然後我們使用這個configuration創建了一個鍛鍊週期
然後我們通過將其傳入healthStore的開始方法來啓動週期
現在我們有一個活躍的鍛鍊週期
我們想要在鍛鍊期間收集一些數據並展示給用戶
爲了分享給大家更多有關收集和控制的信息
我要邀請我的同事Jorge到這裏來
謝謝你
謝謝你Dash
早上好
我叫Jorge
我是HealthKit團隊的一個軟件工程師
我的同事Dash剛剛展示了
如何配置並開啓一次鍛鍊週期
現在 我們將繼續討論你如何收集數據
並在一次鍛鍊期間控制你的週期狀態
我們將要調用數據收集以及控制
這些你要進行的不同的任務
從你的鍛鍊週期起始點開始
一直到你決定結束
讓我們看看這些不同的步驟
首先 我們將要觀察樣本 也就是
從HealthKit獲取樣本信息
爲了將其合併到你的鍛鍊中
然後 我們要觀察事件
事件可以被HealthKit生成
或者你可以在用戶界面中探測事件
我們一會再更深入地討論事件
一旦你開啓了這兩個任務
你就處在運行狀態了
在任何時候你都可以選擇暫停
然後可以多次繼續鍛鍊
然後 你可以決定你要
結束這次鍛鍊週期
所以讓我們更深入地再研究一下這些步驟
首先 我說了我們想要觀察樣本
你將需要打開一個錨對象查詢
對你所感興趣的所有數據標籤
這可能是輪椅長度或者是活動燃燒的能量
當你進行此項操作時 你還需創建updateHandler
爲了能收到HealthKit的新事件 新樣本
這將允許你可以不停地計算鍛鍊的總體數據
比如總共的累計距離
或是總共的累計卡路里數
這樣 你就能實時更新UI了
你還可以展示 比如說
最新測量到的心率
你可以通知用戶某些目標比如說
每當他們在一次跑步中達到一英里
或是當他們燃燒掉第一個100卡路里
在他們的划船鍛鍊中
現在讓我們看點代碼
因爲我們要使用錨對象查詢
你需要做的第一件事就是爲你的查詢創建一個predicate
我們將使用你的鍛鍊開始時間
你不想要那個時間之前所生成的樣本
來計算總量
然後 你將需要向本地設備索取樣本
也就是當前的手錶
你想要避免 比如說
獲得那些保存在手錶上的樣本
作爲一次和iPhone同步的結果
最終 你將要構建兩個predicate
來組成最終的predicate並在查詢中使用
然後 你要建立一個handler
爲了處理HealthKit的樣本
你可以將這些樣本累計並計算總量
而後可以展示一些更新的用戶界面
現在 我們可以創建錨對象查詢了
你將要使用你所感興趣的quantityType
我們剛構建的predicate
並使用我們剛剛構建的handler作爲你最初的結果處理器
你還要建立updateHandler
這樣你才能從HealthKit獲得鍛鍊期間生成的樣本
最終 你需要執行錨對象查詢
我們還提到你可以通知你的用戶
有關某些達成的目標
比如說 當他們達到了一英里
或是在鍛鍊中消耗掉的第一個100卡路里
一般的做法是
進行一次觸覺提示來告知用戶當前情況
與之同時 我們建議你要同時更新用戶界面
這樣才能展示達成了什麼目標
很可能當用戶感受到時
他們會擡起手腕並看看屏幕
這次震動是什麼意思
進行一次觸覺反饋的方式是調用play方法
在WatchKit界面設備中
現在讓我們說說事件
事件是你要使用的時間戳
來在鍛鍊中突出特定點
比如說 你可以使用暫停與繼續事件
來突出那些鍛鍊狀態發生改變的點
有些事件將被你的應用創建
並隨後存入鍛鍊中
而有些是由HealthKit創建併發送給你的
watchOS 3的新特性
我們在鍛鍊週期delegate中有didGenerate事件
HealthKit要使用該事件來向你的應用發送事件
所以讓我們看看不同種類的事件
在watchOS 3中
圈數和標記是我們剛剛介紹的兩種新事件
這些事件是你需要自己創建的
並存儲在你的鍛鍊中
它表示你將用到的時間戳
用於將你的鍛鍊展示爲圖標或是統計數據
圈數和標記有一個區別
圈數代表代表劃分你的鍛鍊的事件
它們所佔的比例相同
比如說
如果你是在路徑中進行跑步或騎行鍛鍊
你需要每次在用戶完成一圈時創建圈數事件
標記 與之不同
可以是鍛鍊中的任意節點
它們不需要與距離或其他度量綁定
它們可以代表 比如說
你的用戶達到山頂的瞬間
或是你在路上看到了一隻樹懶
現在讓我們說說暫停與繼續鍛鍊
在一次鍛鍊週期中
你的用戶可能會決定暫時停止活動
比如說 他們正在跑步他們可能決定暫停
來買一瓶水
在這種情況下你需要在用戶界面中有方法
來讓你用戶告知你這種情況
當這種情況發生時
你可以調用HealthKit來暫停你的鍛鍊
這將允許HealthKit來節省手錶中的電量
以及數據庫中的空間
當然了 當這種情況發生時
你也想忽略應用收到的任何新數據
你不想積累樣本
到總量中在週期被暫停期間
HealthKit會反饋暫停與繼續調用
通過生成暫停與繼續事件
你需要使用鍛鍊週期代理獲得
你需要知道當你收到暫停事件時
HealthKit不會再生成新的事件了
直到你繼續你的週期
watchOS 3的新特性
你暫停與繼續一次健身所需要調用的函數
是HKHealthStore的一部分
暫停workoutSession和繼續workoutSession
你將要收到的事件是暫停和繼續事件
你可能在之前的iOS版本就已經知道了
現在讓我們聊聊運動事件
這是watchOS 3新特性
運動暫停與運動繼續事件
你的手錶 在一次跑步鍛鍊期間
可以探測到用戶停止運動
這意味着他們停止跑動了
而一旦他們繼續跑動我們就可以立即探測到
當你收到這些事件時
你要停止收集數據進健身中
就像用戶手動暫停一樣
但是 你不需要暫停你的鍛鍊週期
要注意這只是在跑步活動類型中實現了
所以讓我們回到我們的SpeedySloth演示應用
看看我們如何可以具體化這些概念
我們剛剛所學到的
所以我要切換到我們的演示了
爲了回放一下我們剛剛看到的
我們有...我們的鍛鍊應用
它已經啓動了鍛鍊週期
但我們可以看到屏幕上卡路里和距離都是0
我們還沒有累加數據
所以我們進入鍛鍊中來看看如何解決這個問題
回到我們的鍛鍊界面控制器類
我要找被委託的回調函數
當決定改變其狀態時
這是workoutSessiondidChangeTo toState fromState
這裏我有一個switch語句所有case都是空的
我現在所感興趣的是運行時的case
每當我們從notStarted狀態進來時
這意味着你的應用剛剛啓動了鍛鍊
所以如果是在跑步從notStarted狀態進入
我要調用startAccumulatingData函數
讓我們看看這個函數
我們想更新屏幕上的這兩個標籤
一個代表距離一個代表燃燒的能量
所以我們要進行兩次查詢
針對這兩種數據類型
進行查詢的方式
和在展示中的一樣
首先我們要構建一個在查詢中使用的predicate
然後 我們要定義一個處理器
在這裏 我已經有一個實現好的過程函數
它將接收這些樣本並進行累積
並更新我的用戶界面
現在 我準備好創建查詢了
建立updateHandler並執行
最終 我想要保存這個查詢留用
因爲由updateHandler執行的查詢
我們想在某個時刻停止它
讓我們開始
再一次運行我們的應用
切換到模擬器
好了
所以我們要選擇 比如說
一個室外的跑步鍛鍊
好了
當我們開始時
我們可以看到屏幕上的數字已經開始增長了
這是因爲手錶模擬器
在爲你生成一些虛擬樣本
每當你開始一次鍛鍊週期
棒
如果你看看屏幕你可以看到有幾個按鈕
但他們現在沒有任何工作
我們已經說了你如何能暫停併爲應用生成標記事件
所以讓我們看看代碼看看我們如何完成
我在這裏有一個didTapPauseResumeButton函數
它與屏幕上的暫停按鈕綁定
所以我要在這裏寫代碼
首先我要要檢查我是否有一個鍛鍊週期
然後我要檢查它的狀態
看它是否在運行
我要暫停這次鍛鍊週期
如果它是暫停的我要將其繼續
好的 這樣的結果是你的鍛鍊週期狀態會改變
如果我們退回到
委託回調
每當你的鍛鍊週期變動到特定的狀態
你可以在這裏看到暫停狀態是空的
所以我們要寫點代碼
在這裏我已實現了pauseAccumulatingData
這個函數不再處理
新的樣本 當它們進入到我的鍛鍊中時
類似地 我們要在某點繼續這次鍛鍊
所以當我們的週期回到運行狀態時
我們會收到resumeAccumulatingData
屏幕上的另一個按鍵是Marker按鍵
在這裏 我們想要創建一個markerEvent
我們剛剛創建了一個類型爲標記並有當前日期的鍛鍊事件
我們要將該事件保存到一個本地的隊列裏
爲了以後保存到鍛鍊中
最終 我這裏有一個步驟要在用戶界面通知用戶
這個事件剛剛發生
還要記住我們已經實現了didGenerate event
這是來自鍛鍊週期代理的回調
在這裏 我們還想保存由HealthKit生成的事件
到鍛鍊事件隊列中
所以讓我們再運行一遍應用
等它運行起來
好了 出現了
我現在要選擇室外步行
等幾秒屏幕上出現數字
你可以在屏幕最上看到有一個活躍的鍛鍊
每當我點擊暫停按鈕它都進入暫停狀態
你可以看到卡路里和距離的數字沒有增長
我現在可以點繼續了
它進入了活動狀態數字又開始增長了
你也可以點擊Marker按鈕
它會在用戶界面中進行展示
很可能你的用戶所佩戴的手錶會生成一次抖動
很好 現在我們回到展示
回想一下我們所看到的
我們剛剛看到你如何使用錨對象查詢
來從HealthKit獲得信息並更新鍛鍊總量
然後我們實現了暫停與繼續事件
在你的鍛鍊應用中
最後 我們展示瞭如何創建一次事件並保存留用
下一步是終止你的鍛鍊週期
說到這裏我要邀請我的同事Dash回來
又見面了
結束並保存一次鍛鍊很簡單
只需幾步 你的應用所保存的鍛鍊可以無縫地集成
與活動與健康應用
讓我們看看活動應用
保存到HealthKit的鍛鍊會自動展示
在活動應用鍛鍊列表中
從iOS 10開始這包含了手機上的鍛鍊
這意味着用戶可以在手機應用上進行鍛鍊
當他們的手錶不在身邊時
他們一樣會在活動應用中獲得積分
有能量樣本的鍛鍊
可以向用戶的運動環做貢獻
用戶會很喜歡從你的應用獲得鍛鍊積分
在他們的活動日中
讓我們一步步學習如何結束並保存一次鍛鍊
讓它們展示在用戶的活動應用中
完成一次健身有三步
第一 你要結束鍛鍊週期
第二 你要將鍛鍊保存至HealthKit
第三 你將關聯的樣本添加到保存的鍛鍊中
比如燃燒的熱量和距離
讓我們一個一個解決
爲結束鍛鍊週期 只需調用healthStore的結束方法
並傳入鍛鍊週期
這將重置設備的傳感器至正常狀態
當HealthKit成功結束鍛鍊後
你的鍛鍊週期代理會收到回調
在其狀態改變方法中
當你看到狀態改爲ended時
就應該保存鍛鍊了
你要創建一個HKWorkout樣本來保存到HealthKit
你創建鍛鍊所使用的信息
將會展示在用戶的健康與活動應用中
確保你所使用的活動類型和原先配置健身時一樣
爲鍛鍊設置一個起始時間和結束時間
幷包含一個鍛鍊事件隊列
這個隊列可以包含諸如暫停與繼續的事件
以及Jorge剛纔討論過的標記和圈數
totalEnergyBurned值是一個HK數值 代表總值
在鍛鍊週期期間所有燃燒的能量
類似地 totalDistance值也是HK數值
代表鍛鍊週期期間所運動的總長
最後 不要忘了添加元數據
給IndoorWorkout鍵設一個值
來爲你的鍛鍊聲明位置類型
你可將該鍛鍊樣本存至HealthKit
只需要將其傳入healthStore的保存方法
當你看到它保存成功時
就可以向鍛鍊添加樣本了
讓我們說說添加樣本
當你向一次鍛鍊添加樣本時
HealthKit會在這些樣本和鍛鍊之間創建一個鏈接
應用可以在其後查詢所有的樣本
與指定的鍛鍊對應
這將很有用 如果你想繪圖
在鍛鍊時間線中描述細節數據
想鍛鍊添加能量樣本很必要
如果你想讓用戶在活動運動環中獲得積分
活動會使用這些關聯的能量樣本
來計算環中的積分
最終 確保你先前保存在鍛鍊樣本中的總額
與這些關聯樣本相符
爲了向鍛鍊添加樣本只需要傳入一個HK樣本隊列
到healthStore的addSamplesToWorkout方法
讓我們現更新SpeedySloth添加結束與保存鍛鍊功能
我們上一次使用應用時
Jorge展示瞭如何收集數據來展示給用戶
以及如何通過暫停與繼續控制這個事件
你可能已經發現在WorkoutInterfaceController底部
有一個叫End Workout的按鈕
當我點擊它時沒有反應
我們現在要進行修改
我又回到了鍛鍊界面控制器
我有一個方法叫didTapEndButton
讓我們向裏面寫代碼
首先 我要保存當前時間作爲workoutEndDate
我們稍後創建鍛鍊樣本時會用到它
接下來 我要調用healthStore的結束方法
並傳入鍛鍊週期
當healthKit成功結束週期後
我們在狀態變更方法中就會收到一個回調
我現要回到狀態變更方法
Jorge剛纔已經展示
如何處理運行與暫停狀態
現在我們想處理這個終止狀態
我們想在鍛鍊週期結束時完成兩項任務
第一 我想結束所有的查詢
這個方法已經實現了
它會遍歷開放查詢的隊列並逐一停止
然後 我們想將鍛鍊保存讓我們現在實現它
我要創建一個鍛鍊樣本我要使用活動類型
直接從鍛鍊配置獲得
然後我將開始時間與結束時間設置爲剛纔保存的值
我添加了workoutEvents對列
Jorge展示瞭如何在鍛鍊週期期間進行構建
我要使用totalEnergyBurned的數值
以及在此期間我們從數據查詢中積累的totalDistance
最終 我要添加針對描述信息的代碼字典
我要給室內鍛鍊字段賦值
基於我們鍛鍊配置的位置類型
我要將鍛鍊樣本傳入healthStore的保存方法
它會將其存到HealthKit中
當我們看到它保存成功後
我將要調用addSamplesToWorkout
這個函數就在這裏我們現在就實現它
我想要想這次鍛鍊添加兩個樣本
一個作爲totalEnergyBurned另一個是totalDistance
對於totalEnergyBurned我創建了一個quantitySample
我使用的數值類型是activeEnergyBurned
然後我要傳入同一個totalEnergyBurned數量
與剛纔我在鍛鍊樣本中使用的相同
這意味着將有一個很大的能量消耗樣本
這跨越了鍛鍊的整個週期
如果你想要的話 你可以創建多個更小的能量燃燒樣本
只需保證它們加起來和
你在HKWorkout樣本中的值相同
我爲totalDistanceSample進行同樣操作
我要使用的數值類型是distanceWalkingRunning
HealthKit有三種距離類型
我要用WalkingRunning因爲我們的鍛鍊應用只處理
走動與跑動距離
如果你要構建騎行鍛鍊應用
你應當使用騎行距離
我們剛剛添加了一種新的距離類型
輪椅距離 你可以使用它進行基於輪椅的鍛鍊活動
我要使用和剛纔鍛鍊樣本一樣的總距離數值
我要設置同樣的鍛鍊開始和結束時間
再一次 這是一個很大的距離樣本 跨越整個鍛鍊
我將這兩個樣本添加到鍛鍊
通過將它們放在一個隊列中並傳入
“添加樣本至鍛鍊”方法在healthStore中
當我看到添加成功時
我知道我這次鍛鍊的所有數據都保存到HealthKit中了
現在我想將鍛鍊展示給用戶
我通過傳入HKWorkout對象來完成
傳給一個新的界面控制器叫SummaryInterface Controller
SummaryInterface Controller已經寫好了 它知道
如何在一個總覽視圖中向用戶展示一個HKWorkout
我要再次運行應用我們將看到如何結束鍛鍊
我們再一次選擇室外跑步
我要點擊Start
我們稍等片刻數據開始收集
好了我將點擊結束鍛鍊按鈕
因爲我們已經有些數據了
我們的鍛鍊週期結束了我們的樣本已存到HealthKit
這裏是總覽視圖向我們展示鍛鍊樣本
爲確保它的確成功保存到了HealthKit
讓我們看看iPhone模擬器上的Health應用
現在我在Health應用的Workout視圖中
我要點擊顯示全部數據而後會看到一個鍛鍊列表
在頂端你可以看到一個在11:36剛剛完成的鍛鍊
這就是我們的鍛鍊
我要點擊它來獲得更多信息
你可以看到這是一個跑步鍛鍊
它有近乎13秒的時長這裏有起始和結束時間
這是我們鍛鍊樣本中的所有信息了
你甚至可以在這裏看到元數據說這不是室內活動
在底端你可以看到兩個樣本
我們剛纔將其與鍛鍊關聯
我們幾乎總共燃燒了2卡路里
幹得漂亮
我們跑了一英里的百分之一
所以看起來所有信息都成功保存到了HealthKit
讓我們回看剛纔做了什麼
我們通過對healthStore調用end結束了鍛鍊週期
然後我們在狀態變更代理方法中等待回調
當我們看到狀態改變爲end後
我們創建了一個鍛鍊樣本並保存至HealthKit
然後 我們創建了兩個樣本來添加到鍛鍊中
一個爲了totalEnergyBurned另一個作爲totalDistance
要記住有必要關聯燃燒能量的樣本
這樣用戶就可以在活動環中獲得積分
我們剛剛構建了一整個watchOS 3的鍛鍊應用
就是這麼簡單
現在watchOS中的每個應用都有一個父應用
我們在iOS 10中專門爲鍛鍊應用添加了一些API
爲了向大家介紹這些新API我要邀請Jorge回到這裏
謝謝你
謝謝你 Dash
你們都爲iPhone開發了很棒的應用
鍛鍊應用不只是你的手錶
從iOS 10開始
我們提供了新的API供大家使用
來在你的iPhone應用中實現新的功能
我們提到了每一個手錶應用都有一個iPhone父應用
你可以利用這一點爲你的用戶提供很棒的體驗
你可以使用WatchConnectivity
在兩個應用間通信
這是實現新特性很有效的方法
當你的手錶處在健身狀態
且應用在運行
現在我們有了後臺運行
這樣你的應用可以在任意時刻運行
這允許你實現很棒的新功能
但是 爲了實現這一點
你需要將手錶調到健身狀態
從iOS 10開始我們提供功能
讓你從iPhone中開啓一次鍛鍊
這就是 你的手錶將進入鍛鍊狀態
用戶不需要幹預其用戶界面
現在 讓我們看看這怎麼完成
在你的iPhone應用中
你可以選擇活動類型和位置
你需要創建一個workoutConfiguration對象
一旦完成
你將workoutConfiguration對象
發送到手錶應用中
如果手錶應用沒有運行
就會自動運行
現在 鍛鍊應用可以獲取那個配置對象
並開啓一次鍛鍊週期
爲了使之正常運行
你需要進入鍛鍊運行後臺模式
我們在展示的前一段提到過
現在讓我們看看代碼
你可能對這段代碼很熟悉
因爲我們在展示的前面看到過
每當你要在手錶上開啓一次鍛鍊時都需要這麼做
你先創建一個workoutConfiguration對象
然後使用它創建一個workoutSession與startDate
在這裏 我們想將這些代碼分成兩部分
第一部分是創建workoutConfiguration
會在iPhone應用中執行
創建workoutSession與startDate將在手錶應用上執行
爲了完成這一點你需要進行通信
在兩個應用之間
所以讓我們先看看iPhone應用中的代碼
首先 你需要檢測WatchConnectivity
看看有沒有一個激活的會話
以及手錶應用是否安裝
完成之後 你就可以創建workoutConfiguration了
下一步 爲了將workoutConfiguration傳給
你的手錶應用
你將要調用iOS 10中的新方法 startWatchApp
使用workoutConfiguration
這是HK healthStore的新方法
這會將你的workoutConfiguration傳送到手錶應用中
現在讓我們看看手錶應用代碼
你需要用workoutConfiguration
來創建一個鍛鍊週期並開始
爲此 你需要實現處理workoutConfiguration
這是一個新函數
是WatchKitExtensionDelegate的一部分
通過實現這個函數
你可以獲取你的workouConfiguration並可以開始
現在讓我們回到我們的SpeedySloth演示應用
來看看我們我們如何從iPhone開始我們的建設
所以
讓我們看看iPhone模擬器
我將要創建健康應用
這裏我有iPhone版本
的SpeedySloth應用
我要啓動它
你可以看到用戶界面
和手錶上的非常相似
我們的用戶界面可以讓你
選擇活動類型和位置類型
我們還有一個Start按鈕現在沒有任何功能
所以我們看看代碼
來看看我們如何實現該方法
我要切換到iPhone應用的代碼
我有一個配置視圖控制器
這個類負責處理我們剛剛看到的界面
在didTapStart按鈕中
我們要實現我們的方法
首先 我們要創建workoutConfiguration對象
使用選擇的活動類型和位置類型
這和在手錶應用上的代碼一樣
下一步 我們要獲取workoutViewController
爲了storyboard
在健身持續期間我們要展示這個UI
我們要設置workoutViewController的屬性
爲了傳入我們創建的workoutConfiguration
最終 我們要展示用戶界面
讓我們看看workoutViewController的代碼
看看它在做什麼
在viewDidLoad方法中我們看到我們做的第一件事
是初始化手錶連接
只需要獲取WatchConnectivity這個會話
並確保它已經初始化
然後 我們要調用startWatchApp函數
startWatchApp函數...
會首先檢查我們是否有有效的workoutConfiguration
當我們有有效的WatchConnectivity會話後
這是和在幻燈片中一樣的代碼
我們首先檢查連接週期
被激活 以及手錶應用已經安裝
最終 我們要調用
startWatchApp使用workoutConfiguration
很棒 現在我們要進入WatchKit擴展
來確保我們能獲取到workoutConfiguration對象
所以 我們要進入鍛鍊——
進入手錶應用的ExtensionDelegate
並使用同樣的代碼來處理workoutConfiguration
當我們進行這一操作時我們需要封裝workoutConfiguration
在一個上下文對象中 並傳入Workout InterfaceController
這個用戶界面與
我們每次在手錶上啓動鍛鍊時所展示的一樣
還有一件事
如果我們進入Workout InterfaceController
每當一個應用
讓我們看看 每當一個活動的鍛鍊週期狀態改變時
我們要調用這個updateState函數
這個函數我們已經實現了
在我們的代碼中它只是獲取週期的目前狀態
並通過WatchConnectivity發送
給iPhone應用
所以 現在讓我們切換到iPhone應用中的代碼
並看一看
在這裏
我們要選擇室外步行鍛鍊
當我點擊Start按鈕時你可以看到鍛鍊週期已經開始
如果你回到手錶模擬器
你可以看到應用啓動
回到iPhone應用你可以看到現在
它處在運行狀態如果你不想這樣
我就可以將鍛鍊週期暫停
你就可以看到另一端的狀態已經更新
而後我們就可以將其終止了
現在在另一端鍛鍊狀態也已經改變
回放剛纔所說我們展示了你如何可以
在iPhone應用中寫點代碼
來讓你的手錶進入鍛鍊狀態
任何時候用戶都不需要操作手錶
現在 讓我們聊聊最基本的實踐
我們希望你能在開發鍛鍊應用時能遵守以下幾點
第一就是我們想讓你確保
你的手錶應用依然可以運行
當你的手錶與iPhone失聯時
比如 一個用戶可能希望
啓動一次鍛鍊週期
並離開住處 出去跑步不帶着iPhone
在這種情況下我們不希望你停止鍛鍊
所以 你要做的第一件事就是讓你的鍛鍊週期處於活動狀態
及時你與iPhone失去連接
在這種情況下的另一個很有趣的點是
你可以使用HealthKit路程
因爲HealthKit可以生成路程樣本
即使沒有GPS
還有 我們說過
你的用戶可以開始健身
從他們的iPhone或Apple Watch
我建議你讓用戶來選擇
到底是想從哪個設備開始鍛鍊
還有一些其他建議包括展示歷史鍛鍊
如果你這麼做展示所有來源的鍛鍊
不但會幫助你自己的應用
我們還想讓你展示
其他應用生成的鍛鍊
如果你這麼做不要忘了觀察被刪除的對象
不要展示一些鍛鍊
而它們已經從HealthKit數據庫中移除
所以 總結今天的展示我們想讓你學到三件事
從今天的展示中
第一 我們學習了後臺運行
這是一個很好的方法來讓你的應用
不停地更新
還要讓你的用戶界面有反饋性
第二 你學到了你可以貢獻
到活動環通過向鍛鍊添加樣本
不論是在手錶還是在iPhone應用上
最終 第三點我們學到了你如何可以開始鍛鍊
從手錶或是iPhone中
所以我們希望大家可以回到家或是辦公室
看看你的代碼並應用上今天所學到的
來實現你的應用中的很棒的功能
如需更多信息你可以訪問這個網站
你可以找到這次展示的視頻
我們還有其他關聯的視頻
一個是HealthKit做的另一個是Core Motion做的
如果你錯過這些展示你可以上網觀看
還有些幾年前的視頻也與今天的主題相關
這就是今天的全部了
感謝大家
祝大家今天過得愉快