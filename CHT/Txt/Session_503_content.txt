早上好
AVFoundation回放的新進展
等待 循環 轉換 擴展 優化
歡迎來到我們關於AVFoundation回放新進展的會話
我是Sam Bushell
今天我們要講一些新添加的增強功能
這可以使得開發者在處理
難題時變得更加得心應手
所以AVFoundation提供樣式廣泛的API
用於多媒體活動
包括回放 拍攝 導出以及多種類型的編輯
我的重點主要在回放上
AVFoundation回放支持樣式非常廣泛的
存儲於本地的媒體格式
在大多數情況下你可以將相同的文件
放到一個網絡服務器上
然後AVFoundation可以通過網絡播放那個文件
該情況下文件格式是相同的不過IO是通過網絡的
我們稱之爲漸進式下載回放
一旦我們開始下載該文件
即使網絡特性發生變化
我們繼續下載的還是相同文件
HTTP直播流更爲動態
一般來說 基URL引用的是主播放列表
這會帶來相同內容的多個播放列表
但在比特率 格式或是語言上會有差異
而且每一個播放列表都引用
含有實際壓縮媒體文件的分段
我們來談談今天的話題
我們要討論
和預回放緩衝時間有關的回放變更
我們將推出一個新的API
來簡化單個文件的循環播放
我們會討論一些在底層作出的回放改進
我們會討論讓你的應用程序爲廣色域視頻做好準備
然後我們會用餘下的時間討論一個熱門的話題
回放應用中的靜態時間優化
我們先從等待網絡開始
緩衝中請稍等...
因爲當我們在網上進行媒體回放時
我們任憑網絡的擺佈
我們不想太早開始否則回放會卡頓
我們不想太晚開始否則用戶會放棄觀看
我們想在那個完美時刻的開始播放
且在我們有足夠數據時開始回放 這樣我們就能夠
持續播放 沒有卡頓
這是現有的API
AVPlayerItem提供三個Boolean屬性
playbackLikelyToKeepUpplaybackBufferFull
以及playbackBufferEmpty
playbackBuffer——抱歉——playbackLikelyToKeepUp爲true的
條件是AVFoundation算法認爲如果你現在停止播放
你就可以持續播放 沒有卡頓
直到播放結束
playbackBufferFull爲true的條件是緩衝
已經達到最大量了
如果你還沒有開始回放
那就開始回放吧
playbackBufferEmpty意味着你卡住了
或者即將卡住
對於iOS 9和更早版本中的漸進式下載回放
AVFoundation客戶端必須自己監控這些屬性
等待直到playbackLikelyToKeepUp爲true
或playbackBufferFull爲true
之後再將AVPlayer的速率屬性設置爲1
對於HTTP直播流規則更加簡單
你可立刻將AVPlayer速率屬性設置爲1
當用戶選擇播放的時候
這就會自動等待
緩衝足夠的媒體文件之後再開始回放
我們精簡了默認的API契約
在2016年的iOS版本中
iOS  Mac OS  tvOS
對使用iOS 10 Mac OSSierra tvOS 10及之後版本應用
HLS的規則也同樣適用於
漸進式下載回放
當用戶點擊播放時
你可以立刻將AVPlayer的速率屬性設置爲1
或調用播放方法都是一樣的
AVFoundation自動等待
足夠多的緩衝從而避免卡住
如果回放期間網絡中斷然後播放卡住
速率屬性仍將設置爲1
所以它會再次緩衝並自動恢復
當有足夠緩衝的時候
如果你使用AVKit或者MediaPlayer框架
來呈現你的回放UI
它已經支持了自動緩衝等待
並且會繼續支持
若你的應用直接使用AVFoundation
然後你構建自己的回放UI
你可能需要做一些調整
所以這個新API應該叫什麼？
Autoplay這個詞已經用在了QTKit中
和HTML 5中但我們得出的結論是
從這個AVPlayer API的角度看
自動的部分並不是回放
而是等待
所以這個API的正式名稱是
automaticallyWaitsToMinimizeStalling
但若你喜歡稱它爲Autoplay也行
這個網絡回放現在看起來
像是有三個狀態的狀態機
暫停 等待 播放
我們從暫停狀態開始直到用戶選擇播放
然後應用調用播放我們就移至等待狀態
當playbackLikelyToKeepUp屬性爲true時
播放器會前進到播放狀態
如果緩衝是空的
播放器會切換回等待狀態
直到再次可能跟上播放
如果用戶暫停我們會回到暫停狀態
這裏還有一個可以實現的過渡
回想在此次更改之前的iOS 9或者之前版本
你可以在回放可能跟上之前調用播放
回放會立刻開始
即使可能會卡住
所以我們通過提供另一種方法保留了該語義
playImmediately(atRate:)
這可以讓你直接跳轉到播放狀態
從暫停狀態或等待狀態過來
要注意的是這可能會導致卡頓
而耐心的等待狀態會避免這種情況
所以要注意
AVPlayer的速率屬性可能不是
你所理解的意義
我們重述一遍這樣大家都清楚
AVPlayer的速率屬性
是應用請求的回放速率
不要和AVPlayeritem的
時基速率相混淆
那是回放實際發生的速率
我們添加了兩個新的屬性在
此版本中
來給大家展示更多細節
一個是timeControlStatus
這可以表達出你在哪一個狀態中
暫停 等待或是播放
如果你在等待狀態中
等待播放的原因屬性會告訴你原因
例如 你可能在等待狀態中
那AVPlayer的速率屬性可能是1
因爲你在等待所以timebase.rate會是0
timeControlStatus會再次表達
我在等待以特定速率進行播放
然後等待播放的原因可能是爲減少卡頓而等待
所以憑藉這些背景知識
我想介紹我的朋友Moritz Wittenhagen
他比我更加大膽
因爲他要嘗試
在臺上進行現場網絡回放演示
所以各位祝他好運給他一些掌聲
各位早上好
我想先開始展示一下
我們在臺上有的設備
這是我的iPad
你能看到這在屏幕上同步顯示着
那個iPad正在加入一個
由Mac搭建的網絡
這可以讓我使用網絡連接調節器
來限制網絡連接
用於這個iPad的
這可以使用網絡連接調節器的
偏好面板做到
Sam一會兒會告訴你去哪裏去找
我設置了Slow Server配置文件
這會將其限制成一般的網絡連接
這稍微慢於
我們想要播放的媒體比特率
目前這是關閉的
我們先不開啓它然後來看看iPad在
優質網絡條件下的性能
所以我這裏有的只是一個選集
我可以選擇一個視頻
我開始選擇
你看到的是視頻馬上就加載上了
我們看到目前沒在播放
你看看這下面極好的工程UI
告訴我們所有的屬性
以及功能這都和自動等待有關
這真的是從AVPlayer和AVPlayeritem中獲取的
所以有這些屬性可供你使用如果你需要知道
自動等待在做什麼的話
因爲現在我們暫停了所以這些速率都是0
當前時間是0
但有意思的是因爲我們在快速的網絡中
我們加載了39秒的視頻
這實際上就是整個視頻
然後我們目前可能跟上回放
這意味着當我現在點擊播放
視頻就會開始播放沒有任何問題
現在我們想看看在差的網絡條件下會怎麼樣
所以我們啓用Mac上的網絡連接調節器
好了
對這個視頻沒什麼差別
因爲如我所說整個視頻已經緩衝完畢了
所以當我回去再次加載它
我想讓大家重新注意loadedTimeRanges
和isPlaybackLikelyToKeepUp
所以開始吧
重新加載視頻
現在我們看到的是
loadedTimeRange只是緩慢地增加
isPlaybackLikelyToKeepUp 爲false
但終究會變成true
在那一時刻我們處在了和之前相同的狀態
現在準備播放然後回放就會開始
現在我們再試一次
這一次我會在視頻加載好之後馬上點擊播放
所以這一次我們沒有足夠的數據
然後就進入了這個等待狀態
你看到這個轉動圖標告訴用戶在等待回放
最終這會成爲準備播放然後回放就會開始
還有一件事我們可以做那就是立刻回放
我們也試一下
我進入這個視頻馬上點擊立刻播放
我們看到回放開始了不過之後很快就卡住了
因爲我們沒有足夠的緩衝來將視頻播完
這種情況下我們會進入等待狀態
直到重新緩衝出足夠的數據播到最後
以上就是自動等待的簡短演示
回到Sam和幻燈片上
謝謝 Moritz
我們回顧一下中間發生了什麼
當我們設置了更緩慢的網絡速度
接近那部電影的數據速率
電影一開始是暫停的
當他點擊播放
這就進入等待狀態
因爲目前回放不可能跟上
注意到這個時候播放器的速率是1
但時基速率是0
幾秒鐘之後AVFoundation斷定
回放有可能跟上
所以它將時間控制--
它將狀態設置成播放然後現在你看到
播放器速率和時基速率都是1
你可能會想到
有更多一點的細節存在於
timeControlStatus而非播放器速率屬性中
記住播放器速率告訴你的是應用
所求的回放速率
timeControlStatus
還考慮到實際發生的事情
所以這些東西你可能要考慮周全
當你構建回放UI時
假如你想在家中嘗試
你可能要知道如何找到網絡連接調節器
這不是我們發明的東西至少不是我們團隊
這是硬件IO工具下載的一部分
最簡單的獲取方法是順着Xcode菜單
找到更多開發者工具
登陸後你就會在這裏找到
好了 所以
如果你使用2016 SDK或之後的版本
你的應用就會表現出這樣的屬性設置
自動將WaitsToMinimizeStalling設置爲true
你可以將那個屬性設成false
如果你想回到之前的行爲
你這麼做可能會有這幾個原因
具體說 如果你想使用setRate(time atHostTime)的調用
來用外部時間軸同步回放
那你必須選擇性退出做法是自動將
WaitsToMinimizeStalling屬性設置爲false
否則 你會遇到友好異常
很有幫助的提醒
最後 提醒一下絕對不要使用播放器速率
來推斷將來的當前超時
如果你想那麼做那使用項目的時基速率
來代替它
或使用時基對象中的其他API
那是它們的專長
好了 這就是緩衝的內容
我們前進到循環的話題
我問大家一個問題
什麼是循環單一項目的最佳方法
一個想法是設置監聽器來
監聽發出的通知
當回放抵達結尾的時候
當被調用的時候
找回到開頭 然後重新開始
這個想法挺不錯的
但不幸的是這會導致空白
在兩次回放之間原因有兩個
第一個原因是這會有延遲
這是由於通知發出
並送達到程序的時間以及第二次播放器請求
返回到回放系統的時間
第二個更爲顯著的原因是預滾
所需的時間
你是不可能
立刻進行媒體回放的
如果沒有一些準備
有必要先加載媒體數據並解碼一些數據
之後你才能開始播放出來
這個先補充回放管道
再開始回放的過程叫做預滾
所以我們想在這裏做的是
將AVFoundation參與到該計劃中
如果AVFoundation對回放項目B
足夠提前獲悉那這就可以開始預滾
然後解碼在項目A播完前進行
所以這就能優化A到B的過渡了
如果項目B十分短那AVFoundation甚至可以開始
進行到項目C的過渡
實現該目的AVFoundation工具就是AVQueuePlayer
AVQueuePlayer是AVPlayer的子類 擁有一排的
AVPlayer項目 叫做播放隊列
當前項目排在列陣的第一位
用AVQueuePlayer
優化不同項目間的過渡
但在循環的情況下你可以創建多個AVPlayer項目
從同樣的AVAsset上面
這是另一種優化
AVFoundation無需加載
並多次暫停媒體文件
提醒一下 播放列隊不是播放列表
請別加載接下來的10,000個項目
你認爲你可能會在播放列隊中播放
這並不高效
播放列隊的目的是提供關於
將要播放項目的信息
這樣AVFoundation可以優化過渡
這種設計模式是當你想無限循環
單個媒體文件的話
要製作少量的AVPlayer項目
然後將它們放在AVQueuePlayer列隊中
並將行動項和屬性設置成提前
當回放達到一個項目的結尾時
隨着回放前進到下一個它會從播放列隊中移除
當你得到完成過渡的通知時
你可將那個播放完的項目
將其當前時間設置回開頭
然後將其放在播放列隊的最後重新播放
我們將這種模式叫做跑步機
而且你可以自己實施這個跑步機模式
使用AVQueuePlayer
我們有示例代碼來幫助大家
稍微難的一點是你必須設置鍵值觀察
來查看項目何時被移除的
然後將其找回到開頭
然後又出現在播放列隊最後
如你所見 在這個代碼中
我們停用了KVO觀察者
當我們改變播放列隊時
來避免任何遞歸的可能
所以很明顯這是可能的
只是有一點複製
而且我們收到的反饋是
如果我們能將其變得更簡單那就再好不過了
我們推出AVPlayerLooper
這會替你實現跑步機模式
你給它一個AVQueuePlayer
你給它一個AVQueuePlayer和一個模板AVPlayerItem
然後它構建少量AVPlayerItem的副本
這之後會在播放列隊中循環
直到你告訴它停止
將AVPlayerLooper採用於
符號案例中的代碼就變得更加容易了
所以我想給大家演示一下
在這裏的iPad上面
所以這是一段示例代碼
啓動Video Looper
我在這裏添加了我自己的一個媒體文件
然後我們將用AVPlayerLooper來播放
感覺是不是很柔和？
好了 這很明顯在循環
代碼如我指出的那樣
非常簡單
這種工具適合用於 例如
如果你有一個tvOS應用
而且你想在標題菜單後面放上循環的背景視頻
好了 我們回到幻燈片
演示AVPLAYERLOOPER
我們講了講如何循環
我想花點時間講講循環什麼
理想來說 如果你有音頻軌和視頻軌
它們的長度應該精確相同
爲什麼？如果音頻軌更長 那這意味着
在接近結尾的時候 那一段
音頻應該播放的時間 視頻卻沒在播放
我們有一段空白的視頻
所以視頻應該怎麼辦？
應該關閉嗎？
應該停在一幀上嗎？
相反如果視頻軌更長
那就會有一段沒有音頻的時間
所以當你創建用於循環的媒體資源時
要花時間確認軌道時長互相匹配
在QuickTime電影文件中
軌道時長是由編輯列表所定義的
如果用於循環的媒體資源並非完全處在你的控制之下
另一種可能是
你可以將AVPlayerItem的正向回放結束時間設置成
最短軌道的長度
從而調短另一個軌道來實現匹配
好了 接下來看看我們在
回放管道中做的優化
這可能會影響到你的應用程序
假設我們當前正在播放中
然後播放中的軌道列表發生改變
例如 我們能更改字幕語言
或者音頻語言
將音頻從英語換成法語
我會將字幕語言從英語換成西班牙語
或者我們可以移除正在顯示視頻的AVPlayerLayer
或添加AVPlayerLayer開始顯示視頻
在iOS 9中的所有這些情況裏
AVFoundation會暫停回放
調整回放管道來匹配啓用的軌道列表
然後恢復回放
在一些情況中 這甚至會導致視頻
回跳到一個關鍵幀上
我要說我們收到了有建設性的反饋
都來自用戶和開發者
所以我很高興地宣佈
在iOS 10和其他2016年的姊妹系統中
這些改變不會再導致回放暫停
在播放中的AVPlayer上添加或移除唯一AVPlayerLayer
改變字幕語言
或改變播放中AVPlayer的音頻語言
或者手動停用或啓用軌道
我們認爲這對用戶和開發者來說是一種提升
然而 這顯著地改變了API的行爲
所以我請各位在seed版本中查看一下
看看這是否會在應用中導致任何複雜問題
如果你發現了一個問題像是我們這邊出的錯誤
那就請給我們反饋
使用Apple錯誤報告系統上報錯誤
像往常一樣 當上報錯誤時
請給我們所需要的一切信息
來讓我們自己再現出那個問題
我們的行業正在過渡到更廣的色域上
用於數碼攝影和數碼視頻
很多iOS開發者從來不需要應對
不使用Rec.709色彩空間標準的視頻
因爲那是高清視頻的標準
且那也是我們自iPhone 4開始使用的拍攝標準
但是更廣色域的色彩空間即將來臨
你可能已看到了在最新的iPad Pro上
當運行iOS 10時
你可以拍攝並顯示照片
在P3色彩空間中
一些第三方產品也在P3中拍攝視頻
所以我想給大家指點一下你可以應用的API
用於你的應用中來做好準備
讓你的應用支持廣色域視頻
當我首先要給你一些背景知識
在媒體文件中色彩空間信息是
視頻軌的元數據的一部分
在QuickTime電影文件中它保存於樣本描述中
在一些Codec中它還保存於Codec特定的位置
這個信息有三個主體
基色 用於明確100%紅色
100%綠色和100%藍色是什麼
還有白點
傳遞特性
你可能聽過叫做伽瑪曲線
或是傳遞函數
這些從像素值到光級來定義映射
然後回答那是直線還是曲線的問題
這會在黑暗的區域給你更多細節
那裏我們的眼睛更敏感
然後是YCbCr矩陣 是指座標變換
從它們的RGB空間進入到用於
高效壓縮的空間
所以在這裏我有一些例子
若你沒有聽說過Rec.709相當於
視頻上面的SIGB
其實SIGB是基於Rec.709的
廣色域可以通過
使用不同組的基色來實現
P3基色所指定的100%紅色
100%綠色和100%藍色的值
要比Rec.709更加鮮豔
我還有一點要說
在我們的API中 我們一般是通過
使用枚舉字符串來表現這些選擇
因爲它們更易於打印 顯示以及調試
但在媒體文件中它們是通過數字表達的
這些標準標籤數字是在MPEG規格中定義出的
叫做編碼獨立代碼點
這聽起來是否有點矛盾？
怎麼會是編碼獨立代碼點呢？
它會不是那麼的矛盾
如果你讀成Codec編碼獨立代碼點
這個規則的目的是確保這些標籤數字的
任務是以一種協調的方式
在所有Codec和文件格式中完成
所以對數字的解釋會是相同的
在QuickTime MovieMPEG-4和H264中等
好 有了這些背景知識我們看看一些新的API
我們推出了一個新的媒體特性這會告訴你
視頻軌標籤有更廣的基色
比Rec.709基色還要廣
若你的應用發現這裏有廣色域視頻
適合做的是讓你的應用採取措施
將其保留下來 所以這不會壓回到709的色彩空間
如果沒有 最好的做法是
停留在Rec.709中處理
所以你可指定工作色彩空間
當你設置AVPlayerItemVideoOutput或AVAssetReaderOutput時
然後你收到的緩衝就被轉化到了
那個色彩空間中
你還可以指定目標色彩空間
當你設置AVAssetWriterInput時
這種情況下 你提供的源圖像緩衝
就會被轉化到那個色彩空間中
在壓縮之前
使用AVPlayerItemVideoOutput或AVAssetReaderOutput
如果你不想讓圖像緩衝被轉化到
普通色彩空間中
那你應該設置AVVideoAllowWideColorKey爲true
然後你會收到在原始色彩空間中的緩衝
這是有效保證了無論什麼樣的軟件收到
並處理緩衝 無論是我們的還是你的
就會檢查並履行那些色彩空間標籤
這裏有類似特性用於配置視頻合成
首先 你可以指定一個工作色彩空間
用於整個視頻合成
或者 如果你有自定義的視頻合成器
你可以選擇讓其支持廣色域
你可以聲明你的自定義視頻合成器支持廣色域
並且會檢查並履行色彩空間的標籤
在每個源幀緩衝上
通過應用可選的supportsWideColorSourceFrames
屬性和返回真值
我給大家提醒一下
比如 如果你手動創建圖片緩衝
在Metal 使用像素緩衝池
然後你應該明確地設置色彩空間標籤
在每個緩衝上面通過調用核心視頻API
大多數開發者不需要這樣做
在大多數情況下當你使用支持色彩空間的API時
用於源緩衝 這會替你將它們標記上
應衆人要求 我將用剩下的時間討論
優化回放啓動時間的最佳做法
我會首先談談本地文件回放
之後我們去講HTTP直播流
現在的一些優化方法可能
第一眼看上去違背常理
它們需要你從
AVFoundation角度考慮
然後考慮它何時會得到其需要的信息
來做你的應用所要求的事情
例如 這裏有一段很直接的代碼
用於設置本地文件回放
我們從文件的URL開始
我們創建一AVURLAsset
代表存儲那個文件的產品
之後創建AVPlayerItem保持回放的可變狀態
用一個AVPlayeritem保持回放
然後我們創建一個AVPlayerLayer
來將視頻回放連接到我們的顯示層次中
這個代碼沒問題 但有一點小瑕疵
你最初可能沒看出來
一旦播放項目設置成播放器的當前項目
播放器就會開始設置回放管道
它不知道將來的事
它不知道你過會將設置
AVPlayerLayout
所以它設置了僅有音頻的回放
當AVPlayerLayer添加時現在AVFoundation知道
這個視頻也需要解碼
現在它可以重新配置
音頻和視頻的回放
如我之前所說
我們在今年的iOS版本中做了增強
意味着微小的
回放列表變更 啓用軌道列表的變更
不一定會導致中斷
但理想的做法是在一開始就讓
AVFoundation獲取所需信息使第一次就一切正常
所以我將稍微改變這個代碼
看好了AVPlayerItem到哪裏連接
AVPlayer
所以現在播放器創建好了 沒有當前項目
這意味着現在沒有理由構建回放管道
在你添加AVPlayerLayer時不會變
不會構建回放管道
直到播放項目成爲了當前項目
而到那時候 播放器會知道其需要什麼
來讓第一次就不出問題
我們可以概括一下
先創建AVPlayerLayer
抱歉 首先創建AVPlayer和AVPlayerItem對象
然後設置你在上面需要的屬性
包括將AVPlayer連接到AVPlayerLayer上
或將AVPlayerItem連接到AVPlayerItemVideoOutput上
這可能似乎有點瘋狂
但如果你只想要馬上開始回放
你可以先告訴播放器進行播放之後你再將播放項目提供給它
爲什麼要這樣做？
如果你反過來做 播放器一開始會認爲
你想要顯示視頻開頭的靜止幀
它可能在這上面浪費時間
之後再得到你是真的只想要回放的消息
從實際目標開始可能節省幾毫秒
我們來談談HLS
我們嘗試用HLS來優化的時間段會更加的長
因爲它們受網絡IO的控制這比本地文件存儲要慢得多
所以優化的潛在好處會更加顯而易見
網絡IO能分解成四個部分
檢索主播放列表 那是你交給AVURLAsset的URL
若內容受到 FairPlayStreaming的保護
檢索內容密鑰檢索選中的變體播放列表
用於視頻和音頻的合適比特率和格式
然後檢索一些媒體分段
在播放列表中引用過的
現媒體分段的實際數據傳輸量是最多的
但在網絡IO中我們要考慮往返延遲
其中一些階段是序列化的
你無法從播放列表下載內容
直到你得到了播放列表
所以要思索的是
我們能不能在用戶選擇播放之前做這些事？
例如 可能在你的應用中
當內容先被選擇時 顯示標題卡片
然後這會讓用戶表明這個是不是我想播放的內容？
或我是否想閱讀一些關於它的信息
所以問題是我們能不能猜測性地
做少量的網絡IO
當用戶識別出他們可能想要播放的內容
在確認之前？
AVURLAsset是一種懶API
它不會開始加載或暫停任何數據
直到有人向它要求
爲了觸發從主播放列表進行數據加載
我們需要請求它加載一個會從其中衍生出的值
像是時長或是可用的媒體特性
外加媒體選擇選項
時長易於輸入
你不需要提供完成處理程序 除非
你真的要用那個值來做某些事情
談到播放列表 它們易於壓縮
我們多年支持使用gzip來壓縮它們
所以一定要這樣做
這可能只是配置你服務器的事
如果你的內容受到FairPlay Streaming的保護
那這裏還涉及一個
與你的服務器協商內容密鑰的往返過程
且你可以將其更早地觸發
通過設置asset.resourceLoader的
preloadsEligibleContentKeys屬性爲true
爲了起作用 主播放列表必須包含
會話密鑰聲明
所以現在情況如何？
有了這些方法 我們可以開始——
它們能將主播放列表和內容密鑰下載下來
即使我們還在標題卡上
這非常炫酷
變體播放列表和數據分段
還是會在我們點擊播放後加載
所以你可能問自己
我們能讓這種方法更進一步嗎？
在2016年的新API中有一個叫做
preferredForwardBufferDuration
設置成低的時長 比如5秒
會讓AVFoundation緩衝出其認爲你需要的最少內容量
來開始播放
不過一旦回放開始將覆蓋設置回0
來讓正常緩衝算法重新發揮作用
這是一個視頻方差的列表
可能會出現在主播放列表中
在尺寸和比特率上各有不同
對於配有快速連接和大電視的Apple TV來說
1080p的變體可能會是理想
對於iPhone SE
即使擁有超快的Wi-Fi連接
720p變體會是最佳選擇
這已經比iPhone SE的屏幕分辨率更大了
所以選擇更高的不會提升任何品質
在巨大的iPad Pro上面有很多的像素
所以我們可以選擇大的變體來全屏顯示
但如果我們在畫中畫中播放
我們不再需要那麼高的分辨率
而且更低的比特率變體可以降低緩存的大小
然後幫助我們留出更多儲存空間用於其他應用
如果網絡連接在所有設備上都很慢
那這就會成爲限制因素
這意味着這AVFoundation
需要考慮到顯示尺寸
以及網絡比特率 當選擇變體的時候
AVFoundation使用屏幕上AVPlayerLayer的大小
來評估尺寸
所以將AVPlayerLayer設置成正確的大小
然後儘早連接到AVPlayer上
這可以隱藏在其他UI後面
如果你還沒準備好顯示視頻
在Retina屏幕的iOS設備上目前有必要將
contentsScale設置成手動
對於比特率AVFoundation在
回放第一個開頭時會陷於
難分先後的情況中
它必須選擇一些變體
但不知道會得到什麼樣的比特率
一旦開始下載分段
它可以使用來自那些下載的統計數據
來調整變體的選擇
但對於第一個變體
它沒有收到任何統計數據
所以AVFoundation的基礎算法就是
在主播放列表中選取第一個可適用的變體
如果那是低比特率的選項
用戶開始會看到模糊的內容
但AVFoundation會馬上判斷出實際的網絡比特率是什麼
然後切換成合適的變體
但問題是如果你想嘗試
提升那個最初選擇呢？
記住 你要做出權衡
在最初品質和啓動時間兩者之間
更高比特率的第一分段需更長時間下載
這就意味着開始的時間會更長
你可能會決定最好是從更低比特率的變體開始
爲了更快開始播放
做出權衡的一種方法是弄清楚
你想看到的最低可接受的品質等級
在特定大小的屏幕上 然後從那裏開始
之後AVFoundation切換到更高品質上
在回放開始之後 只要網絡條件允許
可能你知道AVFoundation不知道的一件事
可能你的應用剛播放了不同部分的內容
然後也許你可以使用那個回放訪問日誌
來更好地猜測下一個
回放站會得到的比特率
所以我們假設你得出了一個結論
基於啓動品質和最近比特率統計數據
然後你要決定選擇
你想以哪一個變體開始
如何將那個選擇導入AVFoundation中？
這裏使用了兩種方法
這是第一種方法
在服務器上給變體排序
從最高到最低
就像這樣
然後在你的應用裏
你需要設置playerItem.preferredPeakBitRate
爲你猜測的比特率
這樣會使更高的比特率變體
從初始選擇中淘汰掉
回放開始之後不久
你應該將那個控制重置爲0
這能讓AVFoundation提升到更高的比特率變體上
只要網絡有提升
第二個方法
是在你的應用裏動態改寫主播放列表
然後把你的優先選擇移動到列表頂部
爲了做到這一點在AVURLAsset中使用自定義URL方案
然後應用AVasset資源加載器委託協議
這樣你可以提供改寫的播放列表
來回應自定義URL方案的加載請求
我還想要提醒一下你要分析你的代碼
在你調用AVFoundation前看看是否出現任何延遲
特別的是 你不需等待LikelyToKeepUp
在設置播放器速率之前成爲true
你現在不需要實際上 對於HLS從來不需要
確保你將AVPlayer和AVPlayerItem
從之前的回放會話中釋放出來
這樣它們不會在後臺浪費寬帶
你可以使用Instruments中的Allocations Instrument
來查看AVPlayer和AVPlayerItem對象的壽命
如果你有應用在做其他網絡活動
考慮一下在網絡回放時是否該將其暫停
這樣用戶可充分利用可用寬帶進行回放
好了 總之
自動等待會將卡頓減到最少
自動播放 自動等待
這默認設置爲true
如果你的應用使用今年或之後的SDK
它提供了統一的緩衝規則
用於漸進式下載和HLS回放
我們推出一個新的API叫做AVPlayerLooper
使用跑步機模式簡化單一項目循環回放
在回放期間更改啓用的軌道組
不會總是引起短暫停頓
我們看了看AVFoundation API
你可以用它來讓你的應用爲廣色域視頻做好準備
最後 我們談論了優化回放啓動
用於本地文件和HLS
總之 避免不必要的工作
對於你需要做的工作 試着早些去做
在這個URL上我們有與這個會議相關的更多信息
包括我們展示的示例代碼
我們有一些相關會話你可能會想補看
可以現場看或者在網上觀看
最下面的那個是在應用裏只能點播觀看的
謝謝關注 倍感榮幸
希望大家度過愉快的一週