讓Watch應用保持更新
好的
大家好 歡迎參加我們的演講“讓Watch應用保持更新”
我叫Eric Lanz 今天跟我一起的還有Austen Green
我們都是watchOS團隊的工程師
這是一個日曆應用的截屏
當你聽到應用這個詞時你腦海中很可能會浮現這個畫面
但watchOS還有很多超出標準應用之外的互動方式
比如 你的用戶認爲通知
是你應用的一個重要部分
如果你有complication你的用戶會認爲
那也是你應用的一個重要部分
在watchOS 3中我們引入了一個新的應用dock
這個功能允許用戶添加多達十個
應用到一個總是可見的dock中
他們可以滑動瀏覽dock
從dock中快速獲得所有數據
這個現在已經成爲應用的一個部分了
人們以很多不同的方式使用你應用的數據
並且希望所有這些方式
都能一直同步和更新
聽起來像是個不可能的任務但不要擔心
我們可以幫你們實現
今天 我們要講五個話題
第一 這個API的概述以及它在watchOS上的使用
第二 用真實代碼演示一個示例應用
第三 Austen將上臺
演示預約在後臺是如何運行的
第四 我們將分享一些最佳範例
把這個API應用到你自己的應用中
第五 我們將演示一個案例分析
闡述我們是如何把這個API應用到我們自己的股票應用中的
首先 我們要思考的是我們如何使用手機和表
每天以不同的方式
早上 你排隊買咖啡開始新的一天
你可以在手機上看幾分鐘新聞
離開商店前 查一下天氣情況
用錶盤上的complication這是個兩秒鐘任務
午飯時 再用地圖找一個不錯的餐廳
幾分鐘後 你選好餐廳 收起電話
在去餐廳的路上你收到一條通知
你快速地瞥了一眼手腕你知道你的朋友們
會晚幾分鐘到這是另一個兩秒鐘任務
在今天結束的時候 你再次使用地圖規劃一下路線 你可能會改道
你收到一條iMessage詢問你今晚何時到家
你使用watchOS 3的快速回復功能回信息
“在路上” 又一個兩秒鐘任務
幾乎不可能在幾秒鐘之內
把用戶即將傳給我們的數據準備好
我們需要更長的時間
在後臺進行刷新
你可以通過這個強大的新API預約運行時間
這樣 在用戶需要這些數據之前數據能提前準備好
要了解這個新API的功能讓我們仔細看一下
在watchOS上查詢天氣情況
這裏 我們看到查詢天氣complication的前臺活動
在查詢發生之前我們就要準備好數據
讓我們用這個API來預約查詢發生之前的某個時間來更新UI
但是 沒有數據該如何更新UI呢
我們需要更多時間從服務器上獲取最新的天氣數據
爲此 我們要計劃一個任務
但是 我們要怎麼着手處理這一系列的事件呢？
我們需要一種方式使系統在後臺喚醒我們的應用
在watchOS上 系統通過給應用分配任務喚醒應用
系統所能分配的任務有限
所以你要充分利用你得到的每一個任務
當系統要喚醒你的應用時
它會交付一個或幾個任務對象
請一定要守住這個任務
直到完成數據處理
系統 交付任務
通過調用已處理的新後臺任務方法
在WK擴展委託上
稍後我們將演示這個方法的一個示例
當你完成後臺工作後
完成任務並把任務返回給系統
這就是基本流程
你可以通過這個流程在watchOS上獲得後臺運行時間
現在 我們要從一個更高的層次來瞭解任務系統
讓我們再深入地看一下具體的任務類型
系統可以創建的
首先 這是個應用任務
這是個通用的運行時間任務你可以預約
在將來某一個日期喚醒應用
在應用任務的運行時間內你可以進行任何形式的本地處理
你可能想更新complication時間線
或用URLSession從服務器上下載數據
URLSession任務是如何得知
數據已下載完成並等待處理
由於watchOS是個共享的生態系統 沒有任何意義
在數據下載時使應用保持運行
最好是讓應用休眠
那麼就讓系統替我們實現吧
快照是watchOS上的一個非常重要的部分
它們既是你的啓動畫面
又是在dock中運行時的預覽畫面
如果用戶停留在你的應用上你的應用將再次甦醒並運行
關鍵是你的快照要持續更新
快照任務是如何獲得在後臺準備UI的運行時間
並獲取新快照
當你完成這個任務後
系統會自動給UI創建快照
請記住 完成數據處理後一定要預約一個任務
否則用戶就看不到你剛剛所做的工作
當通知到達時 用戶會看到通知
然後他們會期待你的complication和快照
更新並顯示最新數據
用戶喜歡那些感覺像是OS密不可分的一部分一樣的應用
並且他們把那些應用放進dock中的可能性更大
如果用戶有一個小時以上不跟你的應用進行互動
系統就會給你一個機會
來修復你的缺省狀態
缺省狀態對於不同的應用來說含義不同
有些應用沒有缺省狀態的概念
在watchOS 3上設計精美快照是個很大、很重要的話題
我們建議你參加一些其他相關的演講
瞭解如何創建優秀快照的一些設計建議
最後一個任務類型是表連通性
在watchOS 3上我們整合了表連通性
和後臺刷新API
意思是 你現在可以使用表連通性消息
把數據更新到應用中當應用在後臺運行時
complication推送應用情境、發送文件
或發送用戶信息都將在後臺喚醒應用
我們希望這個版本會帶給
我們的用戶更豐富的體驗
當應用通過表連通性任務被喚醒時
使用標準API來獲取數據
首先 確保會話是激活的
一旦會話被重新激活
就開始監控新的hasContentPending屬性
只要這個屬性爲真就表示仍有數據要處理
確保要一直守住這個任務
直到完成數據處理
完成時 你有責任將任務
返回給系統
如果你不這樣做你將不會再獲得後臺運行時間
並且我們會給你一個崩潰報告
Austen稍後會提供詳細信息
是關於運行時間警告的信息
讓我們快速回顧一下新後臺刷新API的使用流程
首先 預約一個任務
然後 接收系統任務
現在你就可以進行後臺工作了
一定要守住這個任務直到完成後臺工作
你可以利用這個運行時間預約後續工作
比如使用URLSession從服務器獲取數據
結束後 完成任務並把任務返回給系統
在繼續演講之前 我想強調一件非常重要的事兒 就是做一個好公民
watchOS是一個共享的生態系統有許多應用
和系統進程爭奪CPU時間和電池壽命
在這個生態系統中我們作爲開發人員有責任
盡最大努力有效地使用這些資源
假如用戶在下午3點啓動了你的應用
你想確保在一個小時內有機會跟服務器進行覈對
那你就預約一個下午4點的任務
嗯 如果用戶在下午3點50分啓動了應用會怎麼樣呢？
我們可以立即更新數據
四點鐘當任務運行時再次更新數據 但這對於我來說並不是最理想的方案
最好的方法是在3點50分利用運行時間
重新預約一個小時後的後臺任務也就是4點50分的任務
每個應用都不一樣
但我們希望你們能找到一個這樣的模式 使資源最大化
好了 讓我們看點兒代碼吧
爲了幫助設計示例代碼
我們將按照時間線逐步演示一個示例應用
並展示如何寫代碼
來響應所有生命週期事件
讓我們看一個足球應用
假如今晚7點到9點有一場重要比賽
我們知道用戶最鍾愛的球隊會參加比賽
並且我們認爲他們一定會頻繁地查看比分
讓我們給後臺活動選定一個三十分鐘的節奏
後臺刷新API只能允許每種類型有一個任務
是執行狀態 在任何特定時間內
一開始 我們預約第一個任務的時間是7點半
在7點半 我們將使用所得到的運行時間預約下一個任務 時間爲8點
8點時 我們將再次使用所得到的運行時間預約下一個事件 時間是8點半
一直確保預約未來任務非常重要
否則你就不知道什麼時候纔能有機會再運行
在此 我們看到了在watchOS上預約應用任務的代碼
首先 讓我們把任務時間設定爲三十分鐘以後
使用userInfo對象來存儲某些關於爲何做出請求的數據
在這個例子中我存了發起請求的日期
和當任務返回時能稍後查看原因的一個字符串
這個屬性是可選的
可以在這裏存儲任何安全編碼的兼容數據
這個完成日誌是獲知
系統是否已經成功預約任務的
請注意 正因爲這裏沒有報錯
但這也並不意味着任務會按所請求的時間運行
Austen將爲大家解釋何時及爲何系統觸發指定任務
預約應用任務後讓我們把重點放在時間線上
看這個只有五分鐘的窗口預約任務將在這個窗口中運行
當系統喚醒應用時
我們優先考慮的是從服務器獲取最新比分數據
讓我們看一下代碼
在watchOS上開始後臺URLSession的
首先 創建一個URLSession配置對象
重點是把這個對象配置爲
後臺會話 因爲我們要在後臺運行
同時設置一個標識符稍後用來獲取數據
接下來 用這個配置創建一個URL會話
我們要求URLSession提供一個或多個下載任務對象
可以給會話關聯多個下載任務想關聯多少就關聯多少
請謹記 系統只能在完成所有關聯任務後纔會喚醒應用
要開始下載數據請不要忘記調用重新啓動
返回時間線我們在過程中下載了URL
所以完成任務和使應用休眠是很安全的
系統將繼續下載數據
當我們被掛起時
當數據下載完成後URLSession會創建一個任務
並再次喚醒應用
但是 到底什麼是喚醒應用呢？
具體地說 喚醒應用的意思就是
在WKExtensionDelegate上調用新的處理後臺任務方法
除了這個調用
我們還將收到是否在可見視圖控制器上激活調用
系統合併任務並提交給我們一個任務集
我們需要處理這個任務集中的所有任務
讓我們開始依次處理吧
對於每個任務來說我們可以使用一個內聯任務
來得到我們想得到的類型的對象
在這個例子中 要處理一個URLSession任務
那麼我們需要使用和任務關聯的標識符再次加入會話
URLSession是一個高度異步API
我們一定要注意守住任務
直到完成數據處理
我們建議你把任務存在一個集合中
完成後再遣散集合
完成每個任務並把它返回給系統
一定要完成那些未特別處理的任務類型
請記住 系統的任務數量有限
所以要完成你得到的每個任務
我們已經得到了數據讓我們更新模型吧
你可能會考慮在這個時候一起更新UI
但我們建議你充分利用這個快照任務的運行時間
進行數據處理這樣的工作
因此 在完成URL任務之前
要先確保預約創建快照
預約創建快照後再完成URL任務就安全了
並允許應用再次休眠
很快 系統將通過我們剛預約的快照任務再次喚醒應用
現在是時候更新UI了
並準備好創建新快照所需的東西
快照有一個獨特的完成處理器
讓我們來看看這個完成處理器
在watchOS上處理快照
無論什麼時候每個應用都必須有一個快照
這是因爲快照既是啓動畫面
又是在dock中運行時的預覽畫面
這個規則的意思是當創建快照後
我們要通知系統這個快照的有效期
要考慮數據及數據與用戶相關性的時間長度
在這個例子中我們在八點有一個預約事件
讓我們把有效時間設爲三十分鐘
可以在用戶信息中隨意存儲一些這樣的信息
比如爲何發起這次請求
那個數據將爲我們返回下一個快照任務
watchOS將給應用提供的機會
還原缺省狀態 在休止一個小時後
你可以告訴系統跳過那個事件
通過把restoredDefaultState屬性的值設爲真
這樣就會使系統瞭解你已經是缺省狀態了
不需要額外任務了
沒有缺省狀態概念的應用
應該考慮一直把這個屬性設爲真
完成快照任務後 系統將掛起應用
然後自動抓取UI
並用作新的啓動畫面
這將不會喚醒你的應用
我們通過 端對端示例實現
常見後臺刷新模式和所關聯代碼
提醒一下
雖然我們看到時間線上是五分鐘
我們的應用總共也只能活躍15秒
通過任務鏈
我們可以最大限度地利用系統資源
現在 你應該對這個新API是什麼有了更好的理解
爲什麼要使用它
以及怎麼使用它
接下來 讓我們歡迎Austen Green上臺
給大家深入介紹
預約是如何在後臺運作的
祝你好運
大家好我是Austen Green
我是一名watchOS工程師
今天上午 我要跟大家分享一些的信息
關於預約如何在後臺運作
我會提供一些精挑細選的最佳範例
我們在我們自己的應用中使用後臺刷新時
最後 結束之前還要做一個快速的案例分析
是關於如何 應用後臺刷新的
在我們的股票應用中
讓我們開始吧
我要講的第一點是運行時間
應用在前臺
一直是運行狀態
意思是會開始執行你的代碼
你可以進行像更新模型和繪製UI這樣的工作
以及應用可能需要進行的其他各種任務
當你的應用進入後臺時
系統一般會掛起你的應用
意思是 你的應用不再有機會執行任何代碼了
有時候 當應用在後臺時
系統可能希望應用能實施一項特定的任務
此時系統將喚醒應用
並要求應用實施它想要應用實施的特定任務
在watchOS 2中
系統有許多方式來喚醒應用
比如處理需要仔細看的通知
或也許ClockKit會要求應用
更新complication
在watchOS 3中我們增加了更多的方式
使應用在後臺運行
系統要限制 時間
在後臺運行的
時間的單位是秒
系統會考慮你所使用的時間
以及你所使用的CPU
所以 儘快、完成工作才能獲得最大利益
儘可能有效地
在隨後的種子中如果你超出了限制
系統將會扼殺你的應用
你將得到一份崩潰報告
從而瞭解是否超出CPU限制
或時間限制根據崩潰報告中的異常碼
我們意識到 不同的任務可能有不同的需要
所以ApplicationRefresh任務
和URLSession任務的時間限制要長
比表連通性和快照任務
那麼在watchOS 2中complication是
應用在後臺獲得運行時間的主要方式
watchOS 3中
我們要確保你繼續每小時進行多次更新
若是帶complication應用
與在watchOS 2上一樣
然而 如果你提前向系統請求運行時間
更新complication數據
你現在可請求通過WKExtension進行更新了
稍後我會講一下如何實現
另外 watchOS 3的新功能是
我們確保有來自父類iPhone的五十次push
如果你使用表連通性的話
利用這個信息可以很簡單地
確保提供很棒的complication體驗
全天候爲你的用戶
讓我們來看一些代碼
假如你正運行一個iPhone應用
並且你注意到模型發生了變更
你可以查詢WCSession
remainingComplicationUserInfoTransfers
來瞭解你還剩多少高優先級的push
今天剩下的時間
你可以利用這個信息
打造complication體驗
決定何時是發送complication數據的最佳時間
比如說在默認情況下
你有足夠多的push
那就立即發送數據
用戶幾乎會立即看到最相關的數據
假如你已經push了很多次
並且運行有點兒慢 傳輸有點兒慢
你可能會考慮節制發送給表的數據從而確保
你的用戶得到complication的數據更新
在當天剩餘的時間內
最後 如果你沒有任何高優先級的傳輸了
仍然可以嘗試和發送數據 但是
數據會以較低的優先級發送
接下來 我要講
一些CLKComplicationDataSource方法
我們想要搬到WatchKit中去的
如果你提前向系統請求運行時間
通過getNextRequestedUpdateDate
你應該希望系統預約後臺刷新
的日期跟你之前通知ClockKit的日期相同
類似的當ClockKit想讓你的應用運行時
它會調用requestedUpdateDidBegin
現在 我們希望在應用層級來實現
通過刷新處理後臺或處理backgroundTasks
你會得到一個應用任務
處理complication更新和應用更新
在watchOS 3中我們引入了dock
我們認爲這很棒 可以使用戶快速獲取他們所喜歡的應用的數據
並方便地查看他們所關注的所有信息
我們希望dock中的應用數據保持最新
因此我們要保證每小時至少更新一次
這適用於快照任務和應用刷新任務
現在這個預算分散到了dock中的所有應用
用戶可以選擇在dock中放多少應用
結果就是如果用戶的dock中應用的數量少
那麼你的應用某特定小時內就有更多
在後臺運行的機會
另外 我們會把應用留在內存中
可以迅速重新啓動 用戶還可以跟你的應用互動
如果用戶停留在你的應用上儘可能快地
另外在dock中 我們有一個最近使用的應用的概念
這個應用佔據了dock的最後一個位置
並且用戶有機會把它放進dock中
通過按按鈕
對這個應用的處理跟應用的處理方式完全相同
用戶明確添加到dock中的
意思就是這個應用
將收到後臺刷新任務和快照任務
就像dock中的其他應用一樣
所以你要確保一直 預約
跟系統預約 任何應用、
任何後臺刷新請求 你可能需要的
有些主屏幕應用不需要定期預約
請記住這一點
剛纔Eric也提到了你應用的快照
對於watchOS 3上的dock中的應用體驗來說至關重要
有時候 系統需要應用快照
的原因各種各樣
如果系統要求你的應用
創建快照是因爲我們認爲我們需要一個快照
這些快照將不會計入你的預算中
並且不含在所請求的快照數量之內
你向系統
有五個觸發器可以導致系統
嚮應用要求創建快照
complication時間線更新
用戶與你的其中一條通知互動
意思是通知被積極地解除
並且 如果通知進入通知中心將不計數
當應用從前臺進入到後臺時
然後再一次 一個小時之後再提供給應用一個返回 的機會
到缺省狀態 如果適用的話
最後 爲了讓一切開始運作
系統會要求你的應用在啓動時創建一個快照
這是你的機會
可以開始預約系統的其他後臺刷新任務
現在 我想花點兒時間分享一些最佳範例
是我們精心挑選的
在自己的應用上應用後臺刷新
首先 系統想要了解
與你的需求相關的儘可能多的信息
所以 如果需要 就頻繁地預約
應用每獲得一個運行的機會
你都應該考慮重新評估後臺刷新需求
並適當地預約系統任務
然而 你不應該覺得你有義務這樣做
如果系統把你的應用調回來進行後臺刷新任務
並沒有任何意義也許你剛更新過數據
需要進行其他工作 要儘快完成
或者最好是
當你完成那項工作後
考慮推遲你已經跟系統預約好的其他任務
你應該考慮你得到的所有運行時間
並確保使應用保持最新數據
意思是 更新模型和UI
並預約系統的後臺任務
因此是爲了dock和前臺激活、通知、
complication更新和後臺刷新
應用獲得運行時間的原因有很多很多
你應該全部都考慮到
當你嘗試和保持應用數據最新時
應用刷新後臺任務就是你的切入點
切入通用的意圖運行時間當你在後臺時
我們認爲有一些非常不錯的用例
你可以執行如拉動系統數據庫這樣的操作
也許你想定期讀取HealthKit數據庫或日曆數據庫
你可以預約未來的URL會話
這正是我們在股票應用中所執行的
如果你已經知道時間過渡
你可以告訴系統你認爲
運行應用最佳的確切日期
比如 日曆應用或旅行應用可能有
定義良好的時間過渡
最後 如果你提前得到後臺運行時間
通過ClockKit API我們希望你能進入
WatchKit API觸發complication更新
現在讓我們講一些快照的最佳範例
快照是一個系統自有的 緩存
應用數據 跟普通的緩存一樣
數據也會失效
因此 系統想了解數據什麼時候會失效
你可以 通知系統快照需要更新
通過預約新快照請求
現在 你應該考慮重大的內容變更
當你嘗試使快照無效時
你並不想頻繁失效
比如 在倒計時應用中
你一定不想每秒鐘都更新快照
那樣沒有任何意義
相反 你肯定希望通知系統更新你的快照
當發生重大事件時 比如計時結束時
我知道這很複雜
我想分享一個我認爲很棒的數據流
關於如何管理這種複雜性
假如你有一些外部事件
也許是表連通性也許是NSURLSession
也許應用碰巧在前臺運行
因爲用戶啓動了你的應用
基本上是導致你更新模型的所有事件
我們想要你爲後臺刷新做的所有操作
是爲了迴應模型的變更
比如 更新complication
請求創建新快照
然後評估下一次後臺刷新需求
無論是後臺URLSession
或者僅僅是跟後臺刷新API預約任意一個運行時間
現在watchOS 3中有了dock
我們認爲用戶會
我們認爲用戶會出入很多應用
比watchOS 2上要頻繁地多
在watchOS 2中 你必須準備
隨時進入前臺或後臺
但我們認爲現在這些轉換發生的頻率要高得多
因此你應該確保完成所有後臺任務
當處於前臺激活狀態時儘快
當應用在前臺被激活時
你一定不想實施任何額外的工作
你只想做一些有用的工作
向用戶顯示UI
類似的 當應用從前臺進入後臺時
你應該儘快完成所有的前臺工作
現在我們意識到你可能需要一點兒時間
來完成所有的前臺工作
你可以通過使用NSProcessInfo.performExpiringActivity實現
去年的WWDC有一場不錯的演講是“WatchKit技巧與陷阱”
教你如何使用NSProcessInfo.performExpiringActivity
最後 我還要提一下數據保護
一般來說用戶是早晨戴上表
解鎖 然後表一整天都是解鎖狀態
直到晚上再脫下表 放回充電器
完全不能獲取到表上某些類型的數據
當設備爲鎖定狀態時
比如 其中一個最著名的案例是HealthKit數據庫
因此 你一定要考慮你有什麼解決方案
如果數據不可用不能創建快照的話
然後我想分享一些測試技巧
模擬器對於迭代開發來說是個不錯的工具
我之前提過 我們有一些預算
但在模擬器中我們不會強制實施任何預算
所以 你一般會根據你想要調用任務的日期
在模擬器中調用任務
類似的 當在設備上時
我們可能仍然需要應用一些預算
但 你將獲得最佳體驗
當在充電器上時
你要確保你對啓動路徑和重新啓動路徑都進行了測試
系統會盡可能把你的應用放在內存中
但如果有引導程序
系統將啓動你的應用
以便請求初始快照
要驗證已完成所有任務
在隨後的種子中你將得到一個崩潰報告
如果你不能按時完成任務的話
超級重要的一點是你的應用並不會崩潰
因爲我們希望你的應用儘可能地響應用戶
最後 一旦你認爲你已經
實現了後臺刷新策略
你的應用應該已經被激活了
確保你得到了 體驗
你希望你的用戶能得到的
你應該改變dock中的應用數量
確保對最好的和最壞的情況進行充分測試
當你得到預約時
現在 我想分享一個案例研究關於我們如何 應用後臺刷新
在我們的股票應用中
在我們開始寫代碼之前
我們先退一步思考一下
進行後臺刷新的有趣特徵
爲我們的股票應用
我們使用URLSession取回服務器數據
且要做一個complication
意思就是 我們知道 有多個視圖
系統中的數據
通過complication、快照
以及激活應用
我們知道 我們想要週期性地運行
我們要定期更新應用
然後 我們瞭解了數據中一些有趣的東西
就是一旦股市關閉 我們的數據在當天剩餘的時間內是沒什麼問題的
根本不會發生變化
嗯 讓我們講一下應用的運行
假如我們的設備啓動
系統會要求我們的應用創建一個快照
因此 我們加載最新數據並準備好UI
但在完成快照任務之前
我們要預約一個後臺的URLSession任務
這是我們開始後臺刷新週期的機會
並確保爲用戶下載最新數據
現在 我們要使用NSURLSessionDownloadTask
給系統提供我們想要下載哪種數據的信息
系統可以讓我們的應用休眠
並在後臺下載數據
URLSessionDataTask的確能在後臺會話中運行
然而 如果應用在後臺
或當應用被掛起時 它會失敗
因爲後臺刷新有時間限制
你的應用很可能會在得到數據之前就被掛起了
所以我們建議使用下載任務
稍後 系統會喚醒我們的應用
因爲我們已經完成了下載
我們會更新我們的模型因爲我們已經更新了模型
我們有三件事要去做
觸發complication更新
通過請求通知系統快照已經失效
立即創建新快照
並評估下一次後臺刷新需求
計劃好下一次的運行時間
並把這個時間通知給系統
稍後 我們開始運行後臺刷新
我們所要做的就是預約下一次的URLSession下載
我們一天之內要完成多個這樣的週期
就是爲了保證應用的數據是最新的 系統會創建快照
若用戶在dock中瀏覽我們快照
我們的快照會顯示最新的數據
嗯 假如用戶從dock中激活了我們的應用
我們應用會變成全屏顯示
並且我們想確保我們的用戶有最新的數據
所以我們將再次下載最新數據
因爲我們已經進入前臺
一旦完成模型的更新我們仍然要完成三件事
我們要請求complication更新
還要請求創建新快照
然後還要再次預約稍後的後臺刷新
在這裏 我要指出兩點
首先 雖然我們已經進入前臺但我們仍然正在請求創建新快照
這絕對沒問題而且我們也期待你們這樣做
我們希望只要模型發生變更就請求創建新快照
系統非常智能它知道你的應用何時處於前臺
以及何時不適合給你發送快照任務
第二點 因爲我們是在前臺運行
並更新了模型
我們得評估下一次的後臺刷新需求
如果我們知道我們很可能會在十分鐘後運行
但我們只下載了數據
我們可以推遲創建快照或者推遲後臺刷新請求
使運行時間最大化
要使應用運行的機率最大化
最後 股市關閉之前做最後一次更新
我們知道 當天的數據將不會再發生變化
但是我們會像往常一樣完成更新
意思是更新complication
請求創建新快照
然後評估後臺刷新需求
因爲我們知道當天的數據會停止更新
我們不能在complication或快照中保留失效的數據
我們可以等待直到股市下一次開市
獲得下一次後臺刷新的機會
這就使我們的應用避開系統
並且不用完成任何不必要的工作
意思就是會獲得更多的刷新任務
系統上的其他應用
總之 一定要完成任務
完成任務非常重要
如果沒有完成任務在隨後的種子中
系統會扼殺你的應用
如果系統扼殺了你的應用
用戶在dock中就不會得到他們所期待的快速響應時間
並且用戶將把你的應用從dock中移除
要有效地利用運行時間
考慮前臺激活、通知、ClockKit
當然還有後臺刷新機會
無論什麼時候獲得運行時間
都一定要考慮保持最新的模型
並評估後臺刷新需求
當數據發生變更時要通知系統
你的complication和你的應用快照
都是系統自有的應用數據緩存
系統需要了解何時數據失效
以便我們不會給用戶顯示錯誤的數據
用戶期待看到一致的數據
無論他們用什麼方式瀏覽應用數據
最後 你需要 來決定應用策略
具體分析
沒有適合所有情況的解決方案
你一定要考慮用戶是如何使用應用的
以及數據的有趣性特徵
從而決定如何計劃後臺刷新策略
要了解更多信息你可以訪問這個網站
今天下午3點還有一場非常不錯的演講
構造watchOS 3上的性能我們將具體闡述股票應用的實現
謝謝大家