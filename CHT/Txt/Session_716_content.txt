Core Location最佳實踐
下午好
我是Brad 今天同大家談論Core Location最佳實踐
爲了大家完全明白今天的主題我將從介紹
Core Location的主要特性開始
由於是它是被廣泛使用的API這裏我們將做些回顧
對新手來說
這樣做挺不錯不過你在會後最好查詢一下相關文檔
做完回顧之後 我們將會談論最佳實踐
使用Core Location
我們所有的API只能運行在iOS平臺上
iOS將是我們談論的焦點
但是呢 如果你對macOStvOS或者watchOS感興趣
你可能想在這待一會兒
iOS上Core Location許多特性在那些平臺上也適用
我們將在演講快結束的時候特別說明
接下來 我們談論Core Location主要特性
首先是API的授權機制
API授權是必要的
以便應用可以訪問用戶的位置
你以前有可能使用過類似功能
如果你看到過像上面那樣的提示
Core Location正在詢問用戶
是否授權相機應用獲得用戶的當前位置
我們提供兩種授權方式
你的應用可以去請求
第一個是使用期間授權
就像它的名字那樣
當你的應用收到使用期間授權的時候
應用便可以獲得用戶的位置
當用戶使用應用時
我們待會解釋使用期間授權的含義
當你想請求授權的時候
你只需要調用requestWhenInUseAuthorization方法
我們還有另一種方式是永久授權
當你的應用獲得永久授權
應用能夠取得用戶的位置信息
當你運行應用的時候
想要使用它 你需要調用requestAlwaysAuthorization方法
無論你請求何種方式的授權
你必須在你應用的屬性信息列表裏提供用途描述
Core Location會從你的信息列表裏獲取用途描述的字符串
然後把提取到的字符串作爲授權提示的一部分展示給用戶
你的應用要在何時進行授權請求?
假如你的應用在前臺運行我們就會請求授權
這是Potluck我們的示例應用
如果你的應用在後臺運行會有一個藍色的條塊
這個時候應用也可以獲得授權
若你在思考該藍色條塊
我們待會會談論藍色條塊的內容
最後 若你的應用正處理來自WatchConnectivity的消息
前臺watchOS應用發出的消息
應用同樣也可以獲得授權使用用戶位置信息
一旦你的應用獲得了來自用戶的授權
你的應用就可以使用我們的定位API
首先我們要談論的是Core Location必要組件
標準的定位服務
定位服務有兩個版本
一個是簡化版本的定位API
當你請求定位的時候
Core Location會盡全力計算出用戶的準確位置
然後將位置傳遞給你應用的代理
還有一個是持續提供定位服務的API
當你調用StartUpdatingLocation
Core Location會產生一系列定位更新數據
並將一系列數據傳遞給你應用的代理
當你使用完定位服務的時候記得停止定位更新
若不停止 CoreLocation會持續計算位置信息
你可以調整相應的參數
來控制定位服務如何進行工作
例如 延遲更新
當你允許定位延遲更新的時候
你可告訴Core Location那是可接受的
在更新位置信息的時候傳大批量的數據給應用
有時我們這樣做是出於功耗的原因
我們也會提供自動暫停更新的功能
默認情況下該功能是開啓的
它需要做的是監測
當定位會話失效或者在一定程度上來說是無用的時候
讓我們來看一下這個應用
假設用戶正在使用一款跑步追蹤應用
用戶開始跑步但是當他們回到家 用戶已經很累了
他們想要衝個澡
但是用戶忘記停止當前定位會話
除非應用嘗試指定操作
來監測一系列的情況
否則用戶的手機會持續計算用戶的位置信息
直到電量耗盡
使用自動暫停定位的話
Core Location會對類似上述情況進行監測
監測到後 會自動停止位置更新
Core Location會支持
應用在後臺運行時使用標準的定位服務
當你進入到這些特殊的會話時
Core Location將使你的應用持續運行
持續傳遞更新的定位數據給你的應用
如果你的應用已經獲得使用期間授權
我們會自動在屏幕的頂端顯示一個藍色的條塊
以此標記的你的應用正使用定位服務
允許你的應用持續接收到位置的更新信息
獲得永久授權的應用可以在後臺運行
但是不會在頂部顯示藍色條塊
當你完成你的應用後你需要停止你的定位會話
否則會有潛在的問題
爲了啓動一些列的後臺會話
你需要在你的應用中做三件事情
首先你需要允許進行後臺定位
在你應用的屬性信息列表中
完成上面操作最便捷的方法是
轉到Xcode的功能標籤頁
向下滾動到後臺模式部分
勾選位置更新複選框
第二 你必須設置
將後臺位置更新的屬性爲真
這表明定位管理器
可以啓動後臺定位會話
最後你需要開啓定位更新
當應用處於前臺的時候
如果你沒有在前臺開啓定位更新
你不會獲得用戶的位置數據
如果你在後臺開啓定位更新將會發生什麼？
嗯 你的應用很有可能需要獲得永久授權
因爲你的應用在後臺那段時間是不可用的
此外 Core Location不執行任何操作
來保證你的應用可以在後臺運行
如果你的應用需要在後臺運行
你需要去開啓定位會話
你可能獲得位置更新信息
但是在你收到位置更新消息之前你的應用有可能會被掛起
你希望獲得的信息
在啓動定位服務之後我們可以使用後臺監視API
我們首先要談論的是區域監控
區域監聽允許你的應用
指定一個它感興趣的位置
Core Location將判斷
給出用戶是否已經到達或者用戶已經從當前位置出發
這些操作持續運行儘管你的應用被掛起
或應用在後臺運行Core Location啓動應用
並設置爲後臺運行若有需要會把啓動事件傳遞給你的應用
我們有兩個版本的區域監控API
首先 我們圓形區域的監控
當你開啓圓形區域的監控
你需要提供圓形的地理區域
那是應用需使用的區域Core Location嘗試探測
用戶從那個圓形區域的進入和退出
我們有Beacon區域監控
Beacon區域監控會發現最近
的iBeacon設備並匹配
匹配你應用提供的iBeacon設備
在另外的情況下區域監控會消耗有限的系統資源
Core Location只允許你設置有限數量的區域
請注意
如果你寫的應用使用到了Beacon區域監控
單一的Beacon區域可以監控多個iBeacon設備
當你開始區域監控的時候
你需要構建一個CL區域
或者CL Beacon區域又或者一個CL圓形區域
然後將這些區域傳給startMonitoring(for:)方法
在CL區域管理器上
當你處理完上一步傳遞相同的區域到stopMonitoring(for:)方法
如果你想使用區域監測去觸發一個消息通知
你有可能會對用戶通知框架感興趣
用戶通知框架有對區域監控的相應支持
通過UNLocationNotificationTrigger類
用戶通知框架是在iOS 10中引入的
但是用戶通知的這個功能之前是可以
通過UI本地通知實現的
如果你想學習用戶通知框架的更多內容
你或許想在線觀看消息通知介紹的演講
同樣的HomeKit框架提供了支持
爲區域監控事件觸發HomeKit場景模式
HM LocationEvent允許你觸發上述操作
若你想學習使用HM LocationEvent
我建議你去看一下去年的HomeKit演講
你可以在線觀看它
在另一種情境下你只需要獲得使用期間授權
來使用用戶消息通知框架
或者是HomeKit框架爲區域監控提供支持
通過Core Location達到區域監控
需要獲取永久權限
同Beacon區域監控類似我們有Beacon Ranging
每一個iBeacon設備廣播的消息有三個部分
UUID 主ID 監控ID
當一個Beacon區域事件觸發了
這個消息的三部分你不會全部收到
使用Beacon Ranging你可以填充丟失的信息
Ranging對於評估有效的距離是有用的
從用戶的設備到iBeacon設備
當你的應用在前臺運行的時候距離估算會更準確
但可在後臺用Beacon Ranging
若你想那樣做要記得Core Location
不會阻止你的應用被掛起
這樣 你的應用可能被掛起
在你收到你期望的信息之前
另外 如果你有興趣使用iBeacon設備
我建議訪問developer.apple.com/ibeacon
同意iBeacon license後你可以去下載
iBeacon的官方規範
如何對每個iBeacon設備進行設置使它運行良好
下一個我們要談論的後臺監測API
是位置大幅變化監控API
從它的名字可以推斷用於用戶位置發生大幅變化的監控
變化達到了公里的級別
就像我們介紹的那樣
在Core Location上發生了不少變化 在這點上
我們相信這個API是相當獨特的
許多的應用使用位置大幅變化監控
通過訪問監測提供更好的服務
在訪問監控主題中
訪問監控利用複雜算法
來監視一天中用戶逗留過並且對用戶來說有意義的地方
那就是爲什麼我們會認爲訪問監控能使得應用更好的服務用戶
畢竟 你會對用戶逗留和花費的時間地點會感興趣的
相對用戶偶爾逗留的地方來說
當Core Location探測到位置發生較大的變化
我們做了許多工作來保證
訪問監控有較低的功耗
你會在全天的情景中使用訪問監控
就像我們接下來要講的後臺監控API
儘管在應用掛起的時候訪問監控還是會持續工作
並且會在後臺啓動你的應用傳遞事件信息給應用
如果你想開啓訪問監控
你只需簡單調用startMonitoringVisits方法
當你完成以上步驟調用stopMonitoringVisits
最後我將介紹地理編碼的API
Core Location支持雙向地理編碼
將地址轉換到地理座標系
反向地理編碼將地理座標系轉換
到地址
不像我們將要談論的剩下的API
地理編碼不需要用戶授權 然而
如果你的應用被授權訪問用戶的位置信息
當需要執行前向編碼時會自動使用用戶的位置信息
這就是將用戶地址轉換爲地理座標的過程
地理編碼API調用的頻率是有限制的
你不能發送太多的地理編碼請求
避免達到發送頻率上限的最好方法是緩存查詢結果
地理編碼提供的查詢結果
使用這種方法你不需要查詢同一個地理編碼信息多次
我同樣建議僅對
用戶的操作進行地理編解碼
例如 若用戶在地圖上放置一個大頭針
那時可以對用戶位置進行地理編解碼
好了 現在你已經熟悉了我們所有的API
讓我們在看一下授權
如果你的應用使用期間授權或者永久授權
它可以使用標準的定位服務
這些特殊的後臺定位會話
它們在前臺啓動
隨後進入後臺和Beacon Ranging
如果你的應用有永久授權
應用還可以使用後臺監控API
那是區域監控和訪問監控
和位置大幅改變的監控
不要忘記用戶通知框架
HomeKit框架允許你進行特定區域的監控
使用使用期間授權
只需要關注可用性
我們的API均可以在iOS上運行
在macOS上你可以使用標準的定位服務
圓形區域的監控
位置大幅變化的監控和地理編碼
在watchOS上我們支持標準的定位服務
和地理編解碼 最後 在tvOS上
你可以使用單一定位API和地理編解碼API
好了 讓我們開始
使用Core Location最佳實踐
用戶的隱私是十分重要的部分
關於使用Core Location
定位信息是高度敏感的信息
它描述了我們生活和工作的地方
我們大多數時間和誰在一起
當使用Core Location時你必須尊重用戶的隱私
那是值得反覆強調的
在使用Core Location時你必須尊重用戶的隱私
Core Location使用授權系統幫助用戶保護他們的隱私
除了獲得用戶的許可你可以獲得你們的位置信息
抱歉 用戶的位置信息
這是尊重用戶隱私需要做的第一步
你需要確認你的應用沒有請求過多的信息
比滿足用戶實際請求需要的信息
同樣 你必須清楚告訴用戶你在請求什麼
你使用這些信息的目的是什麼
你的應用需要做兩件事情
若你的應用要使用Core Location
首先如果你要同服務器進行對話
儘可能使用隱蔽查詢
讓我們看一個例子
如果你正在寫一個簽到應用
如果用戶已經點擊了簽到按鈕
然後你需要發送用戶的確認
信息和定位信息到你的服務器在一次請求中
在用戶清楚知道將會發送這兩個信息的情況下
如果你正在編寫一個天氣應用
用戶有可能對你的服務器不太瞭解
你能夠訪問到用戶確認消息和定位信息
用戶可以獲得良好的用戶體驗有賴於隱匿的查詢
此外 假如你想把用戶的定位信息保存到磁盤上
你需要使用有文件保護功能的API
保存文件是相對簡單的
從iOS 8開始文件保護是默認開啓的
然而 仍然是可以創建不被保護的文件
所以你需要確認
假如你想使用戶定位信息持久化
你最好不要把信息存儲在未受保護的文件中
除了隱私 功耗是第二件重要的事情
需在使用CoreLocation時考慮的
使用Core Location時的功耗差別是相當大的
在一種極端情況下我們使用Beacon區域監控
的全部內容
在另一種極端情況下我們持續使用定位會話
在幾個小時之內會將我們電池的電量耗盡
不管你的應用有多酷
如果你的應用耗電比預期的快
用戶也不會喜歡使用你的應用的
所以 你在設計應用時 需要考慮功耗
有時候那意味你不得不犧牲定位的精確性和即時性
以便能達到用戶預期的功耗標準
爲了達到這個要求你必須使用正確的API
由於Core Location有許多API
你如何知道哪一個是正確的
我把它們放到了一個決策樹裏
會引導你使用正確的API
那不意味着它可以處理所有的情況
但它可以滿足你的入門要求
你需要考慮的第一件事情是你是否需要知道用戶的位置
現在 或者是將來的某段時間
假如你想在未來的某段時間使用
那樣你可以使用我們的後臺監控API
或者是區域監控
如果你對特定的位置感興趣
或者訪問監控假如你對用戶逗留的位置感興趣
如果你想知道用戶現在的位置
那麼你需要使用標準的定位服務
現在 你有許多不同的方法來使用它
讓我們深入的瞭解其中的一些
如果你正在寫一個健身應用
我們建議你使用延遲位置更新
在一個持續的位置會話中
如果你正在寫導航應用
你有可能想使用持續定位的會話
如果你的應用要持續的更新UI
那麼你也可能需要使用持續的定位會話
最後需要考慮的事情是你的應用
是否需要記錄用戶的運動軌跡
如果需要的話我們建議你使用延遲位置更新
在其他的情況下
我們建議你使用單一定位API
你或許已經注意到了底部的電池圖標
那不是意味着依次執行
只是爲了告訴你每次使用服務的耗電量
好了 對於授權
我強烈建議你使用使用期間授權
用戶更傾向於知道你不能對他們進行追蹤
除了有他們的授權
此外 你需要同用戶進行交互
確認用戶懂得你爲什麼
需要獲得授權還有你會如何使用獲得的授權
記住 Core Location顯示一個提示
提示中包含你應用提供的用途描述
這是一個同用戶進行交互的好機會
但是幸運的是 這不是你同用戶進行交互的最後一次機會
你的應用需要引導用戶到設置頁面
Core Location只會顯示
來自你應用的有限數量的授權提示
從一些方面來說
如果你想改變你的授權等級
用戶不得不進入到設置界面自己進行更改
若你引導UI應用打開設置的UI
調用UIApplicationOpenSettingsURLString常量
然後iOS將會打開你應用的設置面板
對於Potluck 我們的示例應用它看來像這樣
你可以看到 用戶僅需要點擊幾下
便可以改變Potluck的授權
我們見過許多開發者被Core Location困擾
還有它對線程的要求
你需要記住Core Locatioon要求你
在一個有RunLoop的線程上創建CLLocationManager
當位置管理器初始化完成後
它會將當前的線程附加到RunLoop上
它將傳遞全部代理的回調到RunLoop上
現在 對許多應用來說
主線程就是唯一擁有RunLoop的線程
所以呢 在主線程上創建位置管理器是安全的
但如果你那樣做 也需要特別注意的
你必須保持你的主線程是激活的以便可以處理UI事件
如果你花費了很多時間處理定位信息
那麼你的應用將會卡頓
我們建議你要不間斷同位置管理器進行交互
就是調用它的方法在創建它的線程裏面
這樣就簡化了同位置管理器進行的交互
讓我們看一下代碼
這兒我正在請求授權
這裏假定我已經在應用中加入了必要的應用描述
到我的信息屬性列表裏
我創建了一個位置管理器
我會使用使用授權授權
不幸的是 不起作用
原來requestWhenInUseAuthorization方法是異步的
並且CLLocationManager會自動釋放
銷燬顯著的授權提示
這樣用戶根本看不到授權提示
由於管理器會在函數結束的時候釋放
讓我們嘗試下與衆不同的操作
如果把管理器作爲一個靜態類的屬性
那樣的話它將存在足夠長的時間
然而 那樣的話會引入新的漏洞
Swift的類將會在第一時間初始化管理器這個屬性
除非我們十分小心並且確定我們可以訪問那個屬性
在有RunLoop的線程上訪問
這將在沒有RunLoop的線程上創建位置管理器
我們認爲這樣做會容易導致錯誤我們也不鼓勵這樣使用它
再一次嘗試
我們創建位置管理器
作爲視圖控制器的一個實例化的屬性
視圖控制器通常是在主線程上創建的
在這個實例中 位置管理器
將會隨着視圖控制器的創建而創建
這樣我們就可以確保
位置管理器會在主線程上創建
我們比較傾向用這種方式創建位置管理器
你有可能會考慮將它依附到你應用的代理上
由於標準的定位服務
在所有Core Location的API中耗電驚人
正確使用API就顯得重要了
首先我們建議使用請求定位API
在任何可能的時候
其次 你需要確保獲得合適的精度
可以在你的應用中設置你能允許的最大偏差
一般來說越精確的定位意味着耗電越多
舉個例子 你請求的是100米的精度
Core Location通常不需要打開GPS
來滿足我們的定位請求
Core Location將會給你或者盡力給你
一個比你請求的更精確的定位信息
如果說你請求一個3公里精確度的定位
這會要求Core Location
給你的定位信息是它獲得的最接近的
我們建議你開啓自動停止功能
我們已經對自動停止的算法進行了優化
使它能行之有效
我們會感到驚訝如果它停止了你的定位會話
當用戶正在使用定位會話的時間段中
只要你對自動停止的配置是正確的
你可以讓定位會話持續運行着
對自動停止進行配置設置活動選項的屬性
在位置管理器上設置合適值
如果你想了解更多的內容你可以查閱我們的文檔
同樣 我建議不用去管或者打開延遲定位更新
延遲位置更新允許Core Location
讓設備處在耗電量低的狀態
被動蒐集位置信息然後大批量的處理這些數據
這樣做可以在很大程度上節省電量
相比於正常狀態下持續定位會話來說
還有一點困惑就是你不能瞭解
每一步的設置是如何工作的
你可能想在Xcode中使用耗電日誌
它將給你一個關於耗電的粗略統計
你持續定位會話正在運行
最後我建議你設置allowsBackgroundLocationUpdates屬性
爲真 只有當你
開啓後臺定位會話的時候
我們看到許多應用將那個屬性設置爲真
當他們進入到後臺之後會停止他們的位置會話
這樣做會有一個消極的影響
這兒 我已修改了Potluck我們的示例應用來模擬那種情況
你將看到當我啓動會話然後返回到主界面
藍色的條塊在屏幕頂部僅僅持續了幾秒鐘
在這兒我開啓了會話
然後我點擊了home鍵有一個藍色的條塊在屏幕頂端
這樣的失誤可以通過簡單管理進行避免
對你的allowsBackgroundLocationUpdates屬性進行正確的設置
現在 我們的監控API會監控你的進程
像這樣 我建議你頻繁的交互
從你進程分享的唯一一個位置管理器
你有可能想附加到你應用的代理上
除此之外 我們的監控API將持續運行直到你告訴它停止
確實如此 儘管你更新應用且移除對Core Location全部引用
並且斷開同框架的連接
所以我們建議不管你何時啓動你的應用
你需要花一點時間思考Core Location
是否需要在後臺監控你的應用
除非你確定在那個時間段
後臺監控是在運行的
你需告訴Core Location停止監控
這一小片段代碼
可以停止所有的三種後臺監控API
如果你你正在編寫室內應用
記住Core Location將會自動
允許室內定位不管何時你的應用
不好意思 是不管何時用戶在室內
這隻發生在如果你的路線已經被記錄
如果你想你的路線被記錄
訪問mapsconnect.apple.com學習更多
Beacon區域監控是廣泛使用的技術
可以應用到各個領域
我認爲最好配合室內場景使用
它能很好的完成室內定位
Beacon區域監控允許你的應用探測接近
你已經在室內放置的地標
室內定位允許你在地圖上顯示用戶位置
可以幫助你從一個地方導航到另一地方
在watchOS上 你需要記住
Core Location將自動利用附近的iPhone
讓我們處理同iPhone的連接並且計算位置
除此之外 我們看到過許多應用的請求
在watchOS上獲得永久授權
儘管可以使用完成任務
利用使用期間授權
如果你想使用永久授權在watchOS上
讓我們再一次看一下
在使用期間授權
對於watchOS 3
我們在watchOS上開放了startUpdatingLocation接口
然而 使用requestLocation可以更好的服務大多數的應用
這是一個例外
在watchOS 3上可以讓健身應用運行在後臺是可行的
如果你長在編寫鍛鍊類的應用
我認爲startUpdatingLocation方法對你來說是比較合適的API
對於macOS來說
我們只支持永久授權
此外 Core Location將會自動顯示一個提示
當你嘗試獲取位置信息的時候
你不需要在macOS上調用requestAlwaysAuthorization
因爲Mac不會經常被移動
我認爲requestLocation是你想在macOS上使用的API
對tvOS來說你可以使用三種功能強大的API
單一定位 地理編解碼和MapKit
使用這些API你能獲得你想要的任何東西
在Apple TV上創建良好的定位體驗
但是需要額外注意的是任何信息
通過Core Location獲取顯示到你的應用中
tvOS設備通常放置在用戶的家裏
用戶的家庭信息是十分敏感的隱私信息
你可從Core Location上獲取的
你應當恰當使用你獲得信息
不知不覺到了今天演講結束的時候
當你離開的時候請記住四件事情
首先 你必須尊重用戶的隱私
其中一部分就是通用戶進行交互
確定用戶理解你正在詢問的
知道你如何使用這些信息
其次省電是必須的部分
在使用Core Location時
有時你不得不犧牲精確度並且延遲
以便獲得用戶期望的用戶體驗
同時能達到用戶期望的耗電標準
爲達到上述效果 需保證使用了正確的Core Location API
對你面臨的難題來說
同樣確保你使用的是使用期間授權
不論何時你都可以使用
若使用Core Location使你感到困難
我建議你看一下Potluck我們的示例應用
我們將在今年更新Swift 3它會比以往更好些
如果你想學習更多你可以訪問我們的在線資料庫
或者是查看相關的演講
就這些 謝謝你們祝大家在餘下的WWDC過得愉快