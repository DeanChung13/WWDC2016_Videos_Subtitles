大家好
我是Henry Mason是Siri語音識別工程師
今天我們非常激動地發佈一項全新的API
它將讓語音識別也能爲你的app解決問題
先快速回顧一下什麼是語音識別
語音識別是自動的過程
將人類語音的音頻轉換成文本
它取決於語音的語言
比如 英語會和漢語的識別不同
在iOS 大多數人會想到Siri
但語音識別對許多其他任務也有用
由於Siri與iPhone 4S一起發佈
iOS也帶有keyboard聽寫
在iOS keyboard空格鍵旁那個小小的麥克風按鍵
觸發對任何UI kit文本輸入的語音識別
每天有成千上萬個應用使用這個功能
事實上 大約三分之一的請求來自第三方應用
它使用起來極其方便
它處理錄音和錄音中斷
它顯示用戶界面
它不需要你再寫任何代碼
就能支持任何文本輸入
而且它從iOS 5開始就可供使用
iOS keyboard聽寫從2011年起便可供使用
但它的簡化帶來很多限制
你的用戶界面通常並不需要keyboard
當錄音開始時你不能控制
不能控制使用哪一種語言
只是剛好使用系統的keyboard語言
甚至沒有辦法知道聽寫鍵是否可用
默認錄音可能對你的使用案例不合理
你可能想要更多信息 而不只是文本
那麼現在在iOS 10
我們引入一種新的語音框架
語音識別API更加強大
它使用相同基本技術和Siri及Dictation中所使用的一樣
它提供快速而準確的結果
顯而易見地定製給用戶
而無需你收集任何用戶數據
該框架也提供了識別的更多信息
而不只是文本
例如 我們也提供另外的解讀
關於你的用戶可能說了什麼置信水平 以及定時信息
用於API的音頻可來自預錄文件
或現場來源 比如麥克風
語音識別API的可用性深遠而廣泛 經過許可
iOS 10支持超過50種語言和方言 從阿拉伯語到越南語
任何運行iOS 10的設備都支持
語音識別API通常能勝任
在需要互聯網連接的大型服務器上
不過 某些新的設備確實時刻都支持語音識別
我們提供可用性API以確定
某個既定語言當前是否可用
使用這個 而不是去尋找互聯網連接
由於語音識別需要
傳送用戶的音頻經過互聯網
用戶必須明確提供許可給你的應用
在可以使用語音識別之前
語音識別解釋、授權、請求
有四個主要步驟在你的應用中採用語音識別
首先在應用的Info.plist中提供使用描述
例如 你的相機應用Phromage
可能用了語音識別的使用描述...
這能讓你只說cheese就能拍照
其次 請求授權利用請求授權級別方法
你先前提供的解釋會被呈現給用戶
在一個熟悉的對話中
然後用戶將能夠決定
他們是否想要讓你的應用語音識別
接下來 創建語音識別請求
如果你已經有錄好的音頻文件
使用SFSpeechURLRecognitionRequest級別
否則 你要使用
SFSpeechAudioBufferRecognitionRequest
最後 提交識別請求
給SFSpeech Recognizer開始識別
你可以選擇保留返回的識別任務
這有助於監控識別過程
我們來看看這個在代碼中長什麼樣
假定我們已更新info.plist
通過準確的描述關於如何使用它
下一步是請求授權
也許最好等到
用戶調用你的應用的功能後再這樣做
這個功能要依靠語音識別
請求授權級別方法藉助完成處理程序
它不保證某個執行語境
應用通常要發送到主隊列
如果它們要做點什麼比如開啓或關閉用戶界面按鈕
如果你的授權處理程序已給出authorized狀態
你應該準備開始識別
否則 識別就無法對你的應用可用
重要的是採用合適的方法禁用必要的功能
當用戶作出這個決定時
或當設備受限 無法使用語音識別時
授權可稍後修改在設備的隱私設置裏
我們來看看如何識別一個預錄的音頻文件
假設我們已有一個文件url
識別需要語音識別程序它只識別一種語言
默認的SFSpeechRecognizer啓動程序可能會失敗
於是我返回0如果區域不支持的話
默認的啓動程序使用設備的當前區域
在這個功能中我們只要返回1 在這個情況下
雖然這個語音識別可能受支持但它也許不可用
可能由於沒有互聯網連接
使用isAvailable屬性在你的識別程序中 以便監控它
現在我們創建一個識別請求用錄好的文件的url
然後將它給予識別程序的識別任務方法
這個方法完成處理程序
藉助兩種可選的參數result和error
如果result是0
那意味着出於某種原因 識別失敗
檢查error的參數 尋求解釋
否則 我們可以讀出我們已經識別的語音
通過查看結果
注意 完成處理程序可能會被喚起不止一次
當語音被逐步識別
你可以確定識別已完成
通過檢查結果的isFinal屬性
這裏我們只打印出最終識別的文本
識別來自設備麥克風的現場音頻也很相似
但需要一些改動
我們要做出音頻緩衝識別請求
這能讓我們提供內存音頻緩衝的序列
而不是硬盤上的文件
我們使用AVAudioEngine來獲取音頻緩衝流
然後將其附加到請求
注意 完全可以附加音頻緩衝
到識別請求在開始識別之前和之後
一個不同之處在於
我們不再忽略識別任務方法的返回值
反而 我們要將它保存在一個變量的屬性中
等會兒我們就知道爲什麼
當我們完成錄音後
我們需要通知請求沒有更多音頻了
以便它能完成識別
使用endAudio方法來實現
但要是用戶取消錄音或者錄音被中斷呢？
在這種情況下 我們真的不關心結果
而且我們應該釋放仍在被語音識別使用的任何資源
只要取消我們開始的識別任務...
我們開始識別時保存的
這對於預錄音頻的識別也能做到
最佳做法
簡單說說一些最佳做法
資源負責任
我們開放語音識別給所有應用免費使用
但我們的確有設置一些合理的限制
以便這項服務一直對每個人可用
不同的設備可能受限於
每天可以識別的量
應用也會在全球範圍內被節流根據每天的請求
正如API支持的其他服務例如CLGO Coder
要有所準備以處理網絡和速率受限的故障
如果你發現你經常達到節流的限制
請告訴我們
同樣重要的是 要注意語音識別
會極大地耗費電池和網絡流量
對於iOS 10我們開始限制音頻長度爲大約一分鐘
類似於keyboard聽寫的時長
隱私和可用性透明度
簡單說說關於透明度以及尊重用戶的隱私
如果你在錄用戶的語音
最好在你的用戶界面中說得非常明確
播放錄製的聲音和/或顯示可見的錄製指示
可讓用戶清楚知道他們正在被錄音
有些語音不適合識別
密碼、健康數據、財務信息以及其他敏感語音
不應給予語音識別
顯示識別的語音像Siri和Dictation做的
也能幫助用戶理解你的應用在做什麼
它對用戶很有幫助
以便他們可以在識別出錯時及時看到
總結
那麼 開發者們
你們的應用現在可以免費獲得
高性能的語音識別可識別幾十種語言
但重要的是要得體地處理當它不可用時的情況
或者用戶不想讓你的應用使用它
透明度是最好的政策
讓用戶清楚知道什麼時候語音識別正在被使用
我們很興奮地期待你們會爲語音識別帶來什麼新用途
更多信息
欲瞭解更多信息及一些樣本代碼請查看本講的網頁
你可能會對部分關於SiriKit的會話感興趣
週三有一場週四有一場更高級別的
謝謝參與祝你們在 WWDC 大有收穫