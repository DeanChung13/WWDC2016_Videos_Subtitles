<c.green>Metal的新特性
<c.green>歡迎大家的到來
<c.green>這是Metal的新特性的第二場演講
<c.green>我叫Charles Brissart<c.green>是GPU軟件工程師
<c.green>參加這場演講的還有我的同事<c.green>Dan Omachi和Ana Tikhonova
<c.green>我要談一下Metal的一些新特性
<c.green>但首先 讓我們先回顧一下 WWDC<c.green>關於Metal的第一場演講
<c.green>我把這前兩場演講稱作採用Metal
<c.green>公開了Metal的一些基本概念
<c.green>以及一些更先進的想法
<c.green>Metal的新特性演講<c.green>展示了我們的新特性
<c.green>最後 高級影子優化演講
<c.green>將說明如何在不使用<c.green>着色器的情況下獲得最佳性能
<c.green>今天早上 你們瞭解了曲面細分、
<c.green>資源堆、無記憶渲染目標
<c.green>以及一些GPU工具的改善
<c.green>今天下午 我們將討論專用函數、
<c.green>資源讀寫函數、廣顏色範圍、<c.green>紋理資源
<c.green>以及Metal性能着色器的<c.green>一些新增功能
<c.green>好了 我們先講一下專用函數
<c.green>它是渲染引擎中的一種常見模式
<c.green>用於定義一些複雜的主要函數
<c.green>並用這些主要函數
<c.green>生成最少的專用簡單函數
<c.green>理念是主要函數可以防止複製卡
<c.green>而專用函數由於性能的提高<c.green>變得更簡單
<c.green>讓我們看一個例子
<c.green>假如我們正在寫一個材料函數
<c.green>你要寫一個主要函數
<c.green>來執行你可能要用到的<c.green>所有材料的各個方面
<c.green>但是 假如你正在實施一種<c.green>亮晶晶的材料
<c.green>很可能就不需要反射了<c.green>但你一定需要鏡面高光
<c.green>假如你在另一方面實施了<c.green>一種反射材料
<c.green>你就要給鏡面高光材料也添加反射
<c.green>過度材料需要次表面散射
<c.green>但很可能不需要反射<c.green>也不需要鏡面高光
<c.green>諸如此類 你們瞭解的
<c.green>因此<c.green>一般都是通過預處理宏來實施
<c.green>主要函數由一組值進行編譯
<c.green>使宏創建專用函數
<c.green>這可以在運行時實現<c.green>但費用很高
<c.green>你還可以試試預編譯
<c.green>預編譯函數的每一個變體
<c.green>並把它們存儲在Metal中
<c.green>但這需要大量的存儲空間
<c.green>因爲可能會有很多變體
<c.green>或者也許你不知道你需要哪個變體
<c.green>另一種方法是使用動態常量
<c.green>動態常量會防止重新編譯函數
<c.green>然而
<c.green>你需要在運行時評估常量的值
<c.green>那會影響着色器的性能
<c.green>所以 我們提出了一種創建<c.green>專用函數的新方法
<c.green>就是用一個叫函數常量的東西
<c.green>函數常量是一種在Metal着色語言中
<c.green>直接定義的常量
<c.green>可編譯到IR並存儲在Metal庫中
<c.green>運行時可提供常量的值
<c.green>創建一個專用函數
<c.green>這種方法的優點是
<c.green>可以離線編譯主要函數
<c.green>並把它存在Metal庫中
<c.green>只需要很少的存儲空間
<c.green>因爲你只需要存儲主要函數
<c.green>因爲我們在創建專用函數時<c.green>運行了快速優化遍數
<c.green>你仍然能得到最佳性能
<c.green>讓我們來看個例子
<c.green>這是個用了預處理宏的主要函數
<c.green>當然 這個例子很簡單
<c.green>實際上主函數會更加複雜
<c.green>正如你所看到的 代碼的不同部分
<c.green>都被what if語句包圍着
<c.green>所以你可以消除代碼的那個部分
<c.green>這是帶函數常量的代碼
<c.green>你可以看到 我們正在頂部<c.green>定義一些常量
<c.green>我們將在代碼中使用這些常量
<c.green>要定義常量 就要用到常量關鍵字
<c.green>然後是類型<c.green>在這個例子中是布爾型
<c.green>最後是常量的名稱<c.green>以及函數常量的屬性
<c.green>函數常量屬性指定了常量的值
<c.green>不會在編譯時提供
<c.green>但會在運行中提供<c.green>就是當我們創建專用函數的時候
<c.green>你還應該注意到<c.green>我們正在傳遞一個索引
<c.green>當我們在運行中創建專用函數時
<c.green>除名稱之外 索引也可以
<c.green>識別常量
<c.green>然後 你就可以在代碼中的<c.green>任意地方使用這些常量了
<c.green>就像使用普通常量一樣
<c.green>這裏我們有一個簡單的if語句
<c.green>用來限制部分代碼
<c.green>一旦創建了主要函數
<c.green>並把它編譯和存儲在Metal庫中
<c.green>你需要在運行時創建專用函數
<c.green>所以你需要提供常量值
<c.green>要提供常量值<c.green>我們就要用一個MTL函數常量值對象
<c.green>來解決多常量的值的問題
<c.green>一旦建好了對象
<c.green>就可以按名稱、按索引或按名稱
<c.green>來設置常量的值
<c.green>一旦創建了對象
<c.green>我們就能用庫中的名稱和常量
<c.green>創建專用函數
<c.green>簡單地編碼新函數
<c.green>提供主要函數的名稱<c.green>以及我們剛填好的值
<c.green>這將返回一個常規的MTL函數<c.green>可以用於創建
<c.green>計算管道或渲染管道<c.green>取決於函數類型
<c.green>爲了讓你們更好地理解<c.green>讓我們看一下編譯管道
<c.green>在構建時
<c.green>用了主要函數源代碼<c.green>編譯並存儲到Metal庫中
<c.green>在運行時 加載了Metal庫<c.green>創建了一個新函數
<c.green>並用MTL函數常量值<c.green>使函數特化
<c.green>此時此刻 我們要運行一些優化
<c.green>來剔除不再使用的代碼
<c.green>然後有一個內函數 可以用來
<c.green>創建一個渲染管道或計算管道
<c.green>你可以聲明Metal所支持的任何<c.green>標量或矢量類型的常量
<c.green>其中有float、half、<c.green>int、uint等等
<c.green>在這裏 我們定義half4顏色
<c.green>你還可以用函數常量的值<c.green>創建中間常量
<c.green>在這裏我們定義一個布爾常量
<c.green>跟函數常量a的值相反
<c.green>這裏我們正在計算一個值
<c.green>是基於值函數常量的值
<c.green>我們還有可選常量
<c.green>可選常量是不需要在特化函數時
<c.green>一直提供值的常量
<c.green>這跟在代碼中<c.green>ifdef的作用完全一樣
<c.green>當使用預處理宏時
<c.green>要實現此功能<c.green>就要用if函數內建的常量
<c.green>如果已提供了值 它將返回真
<c.green>反之則返回假
<c.green>你還可以用函數常量向函數中<c.green>添加或從函數中移除參數
<c.green>這有利於確定不需要綁定的<c.green>緩衝區或紋理
<c.green>如果你已經知道不會用到它的話
<c.green>還有利於替換參數類型
<c.green>稍後再詳細介紹
<c.green>這裏有個例子
<c.green>這是一個頂點函數 可以執行
<c.green>剝皮<c.green>取決於doSkinning常量的值
<c.green>函數的第一個參數是矩陣緩衝區<c.green>是否存在
<c.green>取決於doSkinning常量真假
<c.green>我們用函數常量參數限制<c.green>那個參數爲可選參數
<c.green>在代碼中<c.green>仍然需要使用相同的函數常量
<c.green>來保護在參數中使用的代碼
<c.green>那麼我們在if語句中<c.green>用了doSkinning
<c.green>然後就能在代碼中<c.green>安全地使用矩陣了
<c.green>你也可以用函數常量
<c.green>從階段結構中移除參數
<c.green>在這裏 我們有兩個顏色參數
<c.green>float4型的第一個顏色參數<c.green>作爲一個屬性
<c.green>這是屬性1
<c.green>第二個是精確度低的顏色
<c.green>是一種精度不高的顏色half4
<c.green>但覆蓋了同樣的屬性索引
<c.green>你可以任選其一
<c.green>這些專用於在代碼中
<c.green>變更顏色屬性的類型
<c.green>函數常量有一些限制
<c.green>比如 不能在內存中真正<c.green>變更結構的佈局
<c.green>這可能成爲一個問題<c.green>因爲你可能想用
<c.green>不同的常量定義<c.green>不同的着色器等等
<c.green>但你可以迂迴解決
<c.green>可以添加不同類型的多個參數
<c.green>那麼在這個例子中<c.green>我們有兩個緩衝參數
<c.green>都使用緩衝索引1
<c.green>它們受函數常量的約束<c.green>使用常量A和常量B
<c.green>一般選擇其中一個
<c.green>請注意 我們...
<c.green>我們用了一箇中間常量<c.green>與第一個常量相反
<c.green>確保在給定時間內<c.green>只存在一個參數
<c.green>總的來說
<c.green>你可在運行時用函數常量創建專用函數
<c.green>無需前臺編譯
<c.green>因爲我們只是使用...
<c.green>並且只用快速優化相來移除<c.green>不再使用的代碼
<c.green>存儲量很小
<c.green>因爲你只需要在庫中<c.green>存儲主要函數
<c.green>你不必發行源代碼<c.green>可以只發行IR
<c.green>最後 移除不再使用的代碼
<c.green>會提供最佳性能
<c.green>現在<c.green>讓我們談一談資源讀寫函數
<c.green>我們要介紹兩個新特性
<c.green>緩衝區讀寫函數和紋理讀寫函數
<c.green>緩衝區讀寫函數是從任何函數類型中
<c.green>讀入和寫入緩衝區
<c.green>以及從任何函數類型中
<c.green>在緩衝區上使用原子操作
<c.green>你可能猜想紋理讀寫函數
<c.green>是從任何函數類型中<c.green>讀入和寫入紋理
<c.green>緩衝區讀寫函數
<c.green>在配有A9處理器的iOS<c.green>和macOS上都可用
<c.green>紋理讀寫函數在macOS上可用
<c.green>現在讓我們講一下<c.green>緩衝區讀寫函數
<c.green>有哪些新特性呢？
<c.green>新特性就是能從分段函數<c.green>向緩衝區寫入
<c.green>以及在文本和分段函數中<c.green>使用原子操作
<c.green>這些可用於執行像順序無關透明、
<c.green>創建影響指定瓷磚燈光的列表
<c.green>或只是調試着色器這樣的事上
<c.green>讓我們看一個簡單的例子
<c.green>比如說 我們想寫出正在渲染的<c.green>可見片段的位置
<c.green>應該是這樣的
<c.green>有一個分段函數<c.green>我們向它傳遞了一個輸出緩衝區
<c.green>輸出緩衝區就是我們要儲存<c.green>片段位置的地方
<c.green>然後有個計數器
<c.green>這是另一個緩衝區<c.green>我們開始插入原子
<c.green>找到位置並放入第一個緩衝區
<c.green>就是我們要寫入的緩衝區
<c.green>然後 我們可以用原子預製
<c.green>計算已經寫入的片段數量
<c.green>並在緩衝區生成一個索引
<c.green>然後把片段的位置寫入緩衝區
<c.green>看起來還不錯 但是...
<c.green>有個小問題
<c.green>當寫入緩衝區時<c.green>深度測試和模板測試
<c.green>實際上總是在片段着色器之後進行
<c.green>這是個問題
<c.green>因爲我們仍然會給緩衝區<c.green>分配權限
<c.green>這並不是我們想要的<c.green>我們只想使片段可見
<c.green>這也是需要注意的<c.green>因爲它會影響你的性能
<c.green>這意味着<c.green>我們沒有做任何早期的Z優化
<c.green>所以很可能會在不想展示<c.green>片段着色器時展示它
<c.green>幸運的是 我們有個新特性<c.green>限定詞早期片段測試
<c.green>用於強制在片段着色器之前執行
<c.green>深度測試和模板測試
<c.green>結果是 如果深度測試失敗
<c.green>我們將跳過片段着色器的執行
<c.green>因此不會寫入緩衝區
<c.green>這正是我們所需要的
<c.green>到達最後一個帶早期片段
<c.green>測試屬性的函數
<c.green>否則只當片段可見時
<c.green>執行函數
<c.green>現在讓我們談談紋理讀寫函數
<c.green>新特性是可以從定點函數
<c.green>和分段函數中創建紋理
<c.green>以及從單一函數讀入<c.green>和寫入紋理
<c.green>可以用於 比如說
<c.green>在執行後置處理效果時<c.green>節約內存
<c.green>通過在輸入和輸出中<c.green>使用同一種紋理
<c.green>寫入紋理是非常簡單的
<c.green>你只需要把紋理定義爲<c.green>訪問限制符寫入
<c.green>就可以寫入紋理了
<c.green>讀寫紋理
<c.green>是一種能在着色器中<c.green>讀和寫的紋理
<c.green>只支持數量有限的幾個格式
<c.green>要使用讀寫紋理
<c.green>就要使用讀寫的訪問限制符
<c.green>然後你就可以在着色器中<c.green>讀入並寫入紋理了
<c.green>然而 寫入紋理時得注意一下
<c.green>如果你想在着色器中再次<c.green>讀到相同的像素
<c.green>在這個例子中<c.green>你需要使用紋理柵欄
<c.green>紋理柵欄會確保把寫入<c.green>交付給內存
<c.green>這樣就能讀取正確的值
<c.green>在這裏 我們寫入一個給定的像素
<c.green>然後 我們使用紋理柵欄<c.green>確保可以再次讀取那個值
<c.green>再然後 我們最終讀到了值
<c.green>我們也應該注意紋理柵欄
<c.green>因爲它們只能在<c.green>單一SIMD線程上應用
<c.green>意思就是<c.green>如果有兩個正在寫入紋理的線程
<c.green>並且第二個線程
<c.green>正在讀取由第一個線程寫入的值
<c.green>就算在紋理柵欄之後讀取<c.green>也不能讀到
<c.green>能讀到的情況是每個線程
<c.green>讀取被各自寫入的像素值
<c.green>而不能讀取由其他線程寫入的值
<c.green>這是關於讀取的一個小貼士
<c.green>我們談了很多寫入緩衝區和紋理
<c.green>你應該注意頂點函數和分段函數
<c.green>在這個例子中<c.green>分段函數正寫入一個緩衝區
<c.green>而頂點函數正讀取結果
<c.green>但是這並不能成功<c.green>因爲它們的RenderCommandEncoder相同
<c.green>要解決這個問題<c.green>需要使用兩個RenderCommandEncoder
<c.green>分段函數寫入第一個<c.green>RenderCommandEncoder中的緩衝區
<c.green>而頂點函數寫入第二個<c.green>RenderCommandEncoder中的緩衝區
<c.green>最終讀取並獲得正確的結果
<c.green>要注意的是<c.green>沒有必要使用計算着色器
<c.green>可以在同一個計算<c.green>CommandEncoder中實現
<c.green>總之 我們引入了兩個新函數
<c.green>緩衝區讀寫函數和紋理讀寫函數
<c.green>可以用早期片段測試
<c.green>來確保在執行片段着色器之前
<c.green>完成深度測試和模具測試
<c.green>要從一直在寫入的讀寫紋理中讀取數據
<c.green>應該使用紋理柵欄
<c.green>最後 用頂點着色器和片段着色器<c.green>寫入緩衝區時
<c.green>就要使用不同的<c.green>RenderCommandEncoder
<c.green>要讀取結果
<c.green>接下來<c.green>我要把舞臺交給Dan Omachi
<c.green>他會跟大家談一談廣顏色範圍
<c.green>謝謝Charles
<c.green>Charles說過了<c.green>我叫Dan Omachi
<c.green>我是Apple GPU軟件架構團隊<c.green>的一名工程師
<c.green>我想先從色彩管理談起
<c.green>實際上 這並不是一個<c.green>所有開發人員都熟悉的話題
<c.green>如果你是個美工
<c.green>無論是爲遊戲創建資源的紋理美工
<c.green>還是編輯照片的攝影師
<c.green>你心裏都會有一個特殊的色系
<c.green>你會很認真地挑選顏色
<c.green>並且要保持一致性
<c.green>無論內容會在哪種<c.green>顯示屏上顯示
<c.green>作爲開發者和軟件工程師<c.green>我們有責任
<c.green>保證這種一致性
<c.green>如果你正用一種高層框架
<c.green>比如SceneKit、<c.green>SpriteKit或核心圖像
<c.green>那麼大部分工作已經完成了
<c.green>應用開發人員不需要<c.green>再考慮一致性的問題了
<c.green>然而<c.green>Metal是一個層級低得多的API
<c.green>這就會提供強化的性能和一些靈活性
<c.green>但也會把其中一些責任轉到你身上
<c.green>爲什麼呢？
<c.green>很多年前 你就已經能用<c.green>Apple設備上的
<c.green>不同色彩空間的不同顯示屏了
<c.green>嗯 去年年底<c.green>Apple引入了幾臺iMacs
<c.green>它的顯示屏能在<c.green>P3色彩空間渲染顏色
<c.green>今年四月我們引入了<c.green>9.7英寸的iPad Pro
<c.green>也有一個P3顯示屏
<c.green>那麼 什麼是P3色彩空間呢？
<c.green>嗯 這是一個色度圖
<c.green>從概念上講<c.green>這個圖呈現了可見光譜中的所有顏色
<c.green>換句話說<c.green>就是普通人肉眼可見的所有顏色
<c.green>雖然如此 這個三角形內的色彩
<c.green>是一個標準的sRGB顯示屏<c.green>所能呈現的色彩
<c.green>P3顯示屏可以呈現
<c.green>色度更寬的色彩
<c.green>這是它在macOS上的應用
<c.green>我們希望你能在任何<c.green>色彩空間進行渲染
<c.green>而且我也提到了<c.green>高層框架會處理這個
<c.green>色彩管理的問題
<c.green>通過執行一種<c.green>叫做顏色匹配的運算實現
<c.green>顏色和色彩空間
<c.green>與顯示屏的色彩空間相匹配
<c.green>這樣就能在顯示屏上<c.green>得到相同的亮度
<c.green>不管你正在處理的色彩空間
<c.green>是否顯示
<c.green>Metal視圖默認沒有色彩管理
<c.green>跳過了這個顏色匹配運算
<c.green>這一般會強化性能
<c.green>因此 默認情況是
<c.green>忽略顯示屏的顏色配置文件
<c.green>因此 顯示屏會在自己的色彩空間
<c.green>解釋顏色
<c.green>意思就是 sRGB顏色
<c.green>會被解釋爲P3顏色
<c.green>而兩者之間的渲染將會不一致
<c.green>如果這是你的應用 帶sRGB繪製
<c.green>這是顯示屏
<c.green>嗯 當調用當前的繪製時<c.green>這些顏色會變得更飽和
<c.green>爲什麼會這樣呢？
<c.green>讓我們再回去看色度圖
<c.green>這是你能在sRGB色彩空間中
<c.green>呈現的最綠的顏色
<c.green>在片段着色器中
<c.green>應該呈現爲紅色通道爲0.0
<c.green>綠色通道爲1.0<c.green>而藍色通道爲0.0
<c.green>嗯 P3顯示屏只取原始值
<c.green>並做出解釋
<c.green>從根本上說<c.green>它認爲那是一個P3顏色
<c.green>所以你得到的是一個<c.green>最綠的P3顯示顏色
<c.green>對於內容創作應用來說
<c.green>碰巧是一個不同的綠色
<c.green>把這個搞清楚相當重要
<c.green>因爲美工們經過深思熟慮
<c.green>來渲染色彩
<c.green>對於遊戲來說 效果更微妙
<c.green>但如果設計師和美工
<c.green>正在尋找這種黑暗的主題
<c.green>他們一定會非常失望<c.green>因爲 看起來要愉快得多
<c.green>當你在P3顯示屏中插入它時
<c.green>同時 這個問題可能會更糟糕
<c.green>因爲產業正在朝更寬的<c.green>色域顯示屏前進
<c.green>解決方案真的很簡單
<c.green>在NSWindow或CAMetal上<c.green>啓動色彩管理
<c.green>把色彩空間設置爲<c.green>你正在使用的色彩空間
<c.green>很可能是sRGB色彩空間
<c.green>這會使OS執行顏色匹配
<c.green>作爲它的窗口服務器的<c.green>常規影像合成傳輸的一部分
<c.green>那麼 如果這是你的顯示屏
<c.green>抱歉 這是帶sRGB繪製的應用
<c.green>這是顯示屏
<c.green>當你調用當前繪製時<c.green>窗口服務器會取走你的繪製
<c.green>並在把它拍到玻璃上之前<c.green>執行顏色匹配
<c.green>好了 那麼現在<c.green>你已經獲得了一致性
<c.green>如果你想採用範圍更廣的顏色<c.green>會怎麼樣呢？
<c.green>你想有目的地渲染<c.green>那些更強烈的色彩
<c.green>廣色域顯示屏只能渲染
<c.green>嗯 首先 你需要創建一些內容
<c.green>你需要讓美工<c.green>創建範圍更廣的內容
<c.green>爲此 我們建議使用
<c.green>擴展範圍的sRGB色彩空間
<c.green>這就允許不能在範圍更廣的<c.green>顏色中使用的現有資源
<c.green>能繼續正常使用
<c.green>而着色器管道<c.green>不必執行任何額外操作
<c.green>然而 美工可以創建
<c.green>新的範圍更寬的色彩資源
<c.green>可提供更強的色彩
<c.green>那麼<c.green>到底什麼是擴展範圍sRGB呢？
<c.green>嗯 這是sRGB三角<c.green>而這是P3三角
<c.green>擴展範圍sRGB
<c.green>會在各個方位超出無窮大
<c.green>意思是在着色器中<c.green>超出0到1的值
<c.green>代表只能查看的值
<c.green>在比sRGB色彩顯示屏<c.green>更廣的色彩顯示屏上
<c.green>我提到了超出0到1的值
<c.green>意思就是<c.green>你需要使用浮點像素格式
<c.green>來表達這些值
<c.green>對於紋理源 我們有一些格式建議
<c.green>你可以使用BC6H浮點格式
<c.green>這是一種<c.green>提供高性能的壓縮格式
<c.green>以及二進制浮點格式<c.green>和分享指數格式
<c.green>對於渲染目標<c.green>可以使用二進制浮點格式
<c.green>或RGBA半浮點格式
<c.green>指定更強烈的顏色
<c.green>iOS上的色彩管理比較簡單
<c.green>你總是在sRGB色彩空間中<c.green>進行渲染
<c.green>即使目標是P3顯示屏也一樣
<c.green>顏色是自動匹配的<c.green>沒有性能損失
<c.green>如果你想使用範圍更廣的顏色
<c.green>你可以用一些原本就可以
<c.green>被顯示屏讀取的新像素格式
<c.green>並不需要任何影像合成運算
<c.green>它們可以進行伽馬編碼<c.green>提供效果更好的黑色
<c.green>並允許你在着色器中<c.green>進行線性混合
<c.green>並且它們作爲紋理源<c.green>是很有效率的
<c.green>好了 這是新格式的位元佈局
<c.green>有一個32位元的RGB格式<c.green>每種通道10個位元
<c.green>還有一個RGBA格式
<c.green>每種通道10個位元<c.green>擴展到了64個位元
<c.green>現在 這個10位元的值是...
<c.green>它們可以用<c.green>超出0到1之間的值來表達
<c.green>從0到384的值表示負值
<c.green>往後的510個值 從384到894
<c.green>代表0和1之間的值
<c.green>而大於894的值代表<c.green>這些更強烈的值
<c.green>請注意 RGBA像素格式
<c.green>比RGB格式大兩倍
<c.green>因此也會佔用兩倍的內存
<c.green>並佔用兩倍的帶寬
<c.green>一般來說 我們建議
<c.green>只在CAMetal層中使用
<c.green>如果你需要不透明度的話
<c.green>那麼你決定要創建一些<c.green>廣色域的內容
<c.green>該如何實現呢？<c.green>嗯 你有一個美工
<c.green>作者在macOS上使用<c.green>支持P3色彩空間的圖片編輯器
<c.green>比如Adobe Photoshop
<c.green>你可使用顯示屏的P3色彩配置文件<c.green>把圖片保存爲每個通道
<c.green>16個位元的PNG或JPEG
<c.green>得到這個圖片後<c.green>要如何創建紋理呢？
<c.green>有兩種解決方案
<c.green>第一種是<c.green>創建自己的資源調節工具
<c.green>使用每個通道16位元的<c.green>適應P3顯示模式的圖片實現
<c.green>你可以通過使用ImageIO
<c.green>或vImage框架的
<c.green>擴展sRGB浮點色彩<c.green>空間進行轉換
<c.green>然後在macOS上 你可以轉換爲
<c.green>我之前提到過的<c.green>浮點像素格式中的一種
<c.green>在iOS上 你可以轉換爲
<c.green>我剛提到的那些<c.green>擴展範圍像素格式中的一種
<c.green>好了 這是方案一
<c.green>明確紋理創建的控制
<c.green>下一個方案是在資源目錄中<c.green>給紋理使用Xcode支持
<c.green>這樣會爲有P3顯示屏的設備
<c.green>自動創建<c.green>擴展範圍sRGB紋理
<c.green>我還要說一下資源目錄
<c.green>你暫時可以
<c.green>把圖標和圖片
<c.green>放到Xcode項目的資源目錄中
<c.green>去年 我們引入了應用瘦身
<c.green>藉此可以基於設備性能
<c.green>爲不同的設備創建專用版本
<c.green>比如內存量、圖形特徵集
<c.green>或設備類型
<c.green>無論是iPad、Mac或<c.green>TV或watch...
<c.green>當然還有手機
<c.green>下載應用後
<c.green>你只下載和安裝了
<c.green>專爲該設備開發的單一版本
<c.green>有指定的功能
<c.green>在線路傳輸中和設備上<c.green>壓縮了資產
<c.green>節省了用戶設備上的存儲空間
<c.green>並且有不計其數的API
<c.green>可以快速獲取那些資源
<c.green>現在 我們已經向紋理集中<c.green>添加了這些資源目錄
<c.green>這有什麼用呢？
<c.green>嗯 處理mipmap層級的存儲
<c.green>紋理不只是2D圖片
<c.green>你可以在Xcode內部<c.green>執行離線mipmap生成
<c.green>這將自動爲這個紋理<c.green>執行顏色匹配
<c.green>因此 如果是不同的<c.green>色彩空間的廣色域紋理
<c.green>將在sRGB或
<c.green>擴展範圍sRGB色彩空間<c.green>執行色彩匹配運算
<c.green>我認爲最重要的功能是
<c.green>可以爲每種設備
<c.green>選擇最理想的像素格式
<c.green>那麼 在支持ASTC紋理壓縮的<c.green>新設備上
<c.green>我們可以使用那種格式
<c.green>在不支持ASTC紋理壓縮的老設備上
<c.green>我們可以選擇非壓縮格式
<c.green>或其他壓縮格式
<c.green>此外 我們可爲有P3顯示屏的設備
<c.green>選擇範圍更廣的色彩格式
<c.green>這就是基本流程
<c.green>在Xcode內創建紋理集
<c.green>給集合分配一個名稱<c.green>作爲唯一標識符
<c.green>添加一張圖片
<c.green>並基本指出將如何使用紋理
<c.green>無論是色彩紋理<c.green>或是其他類型的數據
<c.green>如普通地圖或高度圖
<c.green>然後 創建紋理
<c.green>Xcode會創建這個紋理<c.green>並提交給應用
<c.green>然後 你就可以通過Xcode UI或編程
<c.green>創建紋理集了
<c.green>一旦設備上有了紋理
<c.green>你就可把名稱提供給MetalKit
<c.green>MetalKit會創建一個紋理<c.green>一個Metal紋理
<c.green>我可以跟大家一起<c.green>逐步執行這個Xcode流程
<c.green>並向你們介紹一下這些概念
<c.green>那麼...
<c.green>首先<c.green>在項目導航側邊欄中選擇資源目錄
<c.green>然後點這裏的這個加號按鈕<c.green>打開這個菜單
<c.green>這裏就是你要創建<c.green>各種集合類型的地方
<c.green>有圖片集、圖標集、通用數據集、
<c.green>以及紋理集和立方體貼圖紋理集
<c.green>建好紋理集後 給它命名
<c.green>你的命名等級<c.green>沒必要非得是flat型的
<c.green>如果你有許多叫做基礎紋理的紋理
<c.green>每個對象都有一個這樣的紋理<c.green>你可以爲每個對象創建一個文件夾
<c.green>並把該對象的基礎紋理<c.green>填充進相應的文件夾
<c.green>這樣可以實現非常複雜的等級
<c.green>添加圖片
<c.green>然後設置解釋
<c.green>這裏有三個選項
<c.green>顏色 在NonPremultiplied<c.green>顏色中執行顏色匹配運算
<c.green>NonPremultiplied<c.green>選項會在創建紋理之前
<c.green>用RGB通道乘以alpha通道
<c.green>這裏的數據選項用於普通地圖、
<c.green>高度地圖、粗度地圖、<c.green>非色彩類型紋理
<c.green>這就是你需要做的全部工作
<c.green> Xcode將開始創建
<c.green>這個紋理的各個版本
<c.green>並選擇最理想的像素格式
<c.green>但是 你可以有更明確的控制
<c.green>你可以選擇許多特性
<c.green>這些特性會打開很多bucket<c.green>可以用來自定義
<c.green>你可以給每個版本<c.green>添加不同的圖片
<c.green>你很可能不會使用不同的圖片
<c.green>而是同一張圖片的不同尺寸
<c.green>那麼在內存量大的設備上<c.green>使用較大的紋理
<c.green>在內存量小的設備上<c.green>使用較小的紋理
<c.green>然後<c.green>可以指定如何或是否想要mipmap
<c.green>這個“全部”選項將會生成<c.green>mipmap 一直到1x1級
<c.green>而“固定”選項<c.green>將提供一些更明確的控制
<c.green>比如是否想要使用最大級
<c.green>以及是否要給每個層級<c.green>添加不同的圖片
<c.green>最後 你可以覆蓋
<c.green>像素格式的自動選擇
<c.green>我剛纔提到過<c.green>你可以用程序來創建
<c.green>這些紋理集
<c.green>你不見得會一步步<c.green>按照Xcode UI的流程來
<c.green>如果你有幾千個資源的話
<c.green>那麼有一個很簡單的目錄結構
<c.green>在那個目錄結構內有許多JSON文件
<c.green>這些文件和目錄結構
<c.green>被完全記錄在<c.green>資源目錄參考上
<c.green>你可以創建自己的<c.green>資源調節工具
<c.green>來設置紋理集
<c.green>在設備上獲得了這個資源後<c.green>該如何使用它呢？
<c.green>先創建一個MetalKit紋理加載器
<c.green>填充到Metal設備中
<c.green>然後把名稱及其命名法
<c.green>提供給紋理加載器
<c.green>MetalKit將開始創建那個紋理
<c.green>你可以在這裏提供其他選項
<c.green>比如比例因子 如果你有<c.green>不同版本的紋理的話
<c.green>不同比例因子的
<c.green>或bundle
<c.green>如果主bundle中沒有資源目錄
<c.green>你還可以指定一些選項
<c.green>我真心希望你們能<c.green>關注一下色彩空間
<c.green>並通過用範圍更廣的<c.green>色彩創建內容來分離應用
<c.green>資源目錄可以幫助你<c.green>實現那個目標
<c.green>同樣 它們還提供許多其他功能
<c.green>你可以利用起來<c.green>比如最佳的像素格式選擇
<c.green>接下來 讓我們歡迎我的同事<c.green>Anna Tikhonova上臺
<c.green>談一談在Metal性能着色器框架中
<c.green>一些令人激動的改進
<c.green>大家下午好
<c.green>感謝Dan對我的介紹
<c.green>Dan說過了 我叫Anna
<c.green>我是GPU軟件團隊中的<c.green>一名工程師
<c.green>讓我們談一談<c.green>Metal性能着色器中的一些新增功能
<c.green>去年 我們在<c.green>Metal的新特性的第二場演講中
<c.green>引入了Metal性能着色器框架
<c.green>如果你沒參加那場演講<c.green>你真應該看一下視頻
<c.green>我在此只給你們一個快速簡明的回顧
<c.green>Metal性能着色器框架是
<c.green>爲Metal中的GPU
<c.green>優化的高性能數據平行算法
<c.green>算法是針對iOS進行優化的
<c.green>自iOS 9起可用
<c.green>可用於A8 現在是A9處理器
<c.green>可以簡易地把框架<c.green>整合到Metal應用中
<c.green>用起來很簡單
<c.green>應該跟調用庫函數一樣簡單
<c.green>去年 我們談到了以下這些<c.green>所支持的圖像運算
<c.green>你可從視頻中獲得更多詳細信息和示例
<c.green>但今年我們增加了一些更酷的東西
<c.green>我們增加了<c.green>範圍更廣的顏色的轉換
<c.green>可以用來在不同的色彩空間之間
<c.green>轉換Metal紋理
<c.green>可以在RGB、sRGB、灰度、<c.green>CMYK、C3和你定義的
<c.green>任何色彩空間之間進行轉換
<c.green>我們還增加了高斯金字塔
<c.green>用於在GPU上創建圖片數據的多尺度呈現
<c.green>從而啓動多尺度算法
<c.green>還可以用在常見的光流算法、
<c.green>影像混合和優質mipmap生成中
<c.green>最後 我們還增加了卷積神經網絡<c.green>或叫做CNN
<c.green>用於加快深度學習算法
<c.green>這是我們今天要重點討論的話題
<c.green>讓我們開始吧
<c.green>首先 什麼是深度學習？
<c.green>深度學習是一種機器學習領域
<c.green>目標就是這個問題的答案
<c.green>機器是否可以完成<c.green>人類能夠完成的任務？
<c.green>那麼<c.green>我說的是什麼類型的任務呢？
<c.green>你們每個人的口袋裏<c.green>都有一部iPhone
<c.green>今天你很可能拍了一些照片
<c.green>我們所有人每天<c.green>都不斷地暴露在圖片和視頻中
<c.green>在網頁上、<c.green>在新聞網站上、在社交媒體上
<c.green>當你看到一個圖片時
<c.green>你會立即瞭解它所描繪的內容
<c.green>你可以檢測人臉
<c.green>如果你認識這些人<c.green>你可以標記他們
<c.green>你可以給這個圖片添加註釋
<c.green>如果是一張圖片 那沒什麼問題
<c.green>但是如果有很多圖片<c.green>甚至是很多很多圖片呢？
<c.green>再想象一下每天<c.green>上傳到網頁中的圖片數量
<c.green>沒有人可以手動地<c.green>給如此多的圖片添加註釋
<c.green>所以 深度學習就是爲了<c.green>解決這種問題而提出的技術
<c.green>可以用於過濾大量數據
<c.green>並回答這樣的問題
<c.green>如 “這張圖片上有誰？”<c.green>和“這張照片是哪拍的？”
<c.green>我在這兒用了一個圖片的示例
<c.green>因爲圖片是可見的
<c.green>非常適合這種類型的演講
<c.green>但我只想提一下
<c.green>深度學習算法也能用於其他類型的數據
<c.green>比如其他信號類型 如音頻
<c.green>可以進行語音識別 以及觸覺<c.green>可以創建觸摸感覺
<c.green>深度學習算法有兩個階段
<c.green>第一個階段是訓練階段
<c.green>讓我們通過一個具體的例子來瞭解
<c.green>想象一下你想訓練你的系統給圖片分類
<c.green>這是一張貓的圖片 這是一張狗的圖片
<c.green>這是一張兔子的圖片
<c.green>這是一項人工密集型任務
<c.green>需要大量圖片
<c.green>手動標記並註解圖片<c.green>然後劃到每一個類中
<c.green>比如 如果你想訓練系統識別貓
<c.green>你需要提供大量貓的圖片
<c.green>所有圖片都被標記過<c.green>要識別兔子和你想要系統能識別的
<c.green>其他動物也一樣
<c.green>這是個一次性的、需要大量運算的階段
<c.green>通常是離線實現的
<c.green>有大量可以利用的訓練包
<c.green>訓練階段的結果是訓練好的參數
<c.green>我現在先不談這個 稍後再談
<c.green>訓練好的參數是下一個階段所需要的
<c.green>也就是推理階段
<c.green>這個階段是
<c.green>給系統提供一張之前從未見過的
<c.green>新圖片
<c.green>它需要實時地進行歸類
<c.green>在這個例子中<c.green>系統正確地將這個圖片歸類到
<c.green>貓類的圖中
<c.green>我們爲推理階段提供GPU加速
<c.green>尤其是 我們還提供
<c.green>爲GPU創建推理網絡的構建模塊
<c.green>接下來讓我們談談什麼是卷積神經網絡
<c.green>以及我們提供哪些構建模塊？
<c.green>卷積神經網絡 或叫做CNN
<c.green>是受生物學啓發模擬視覺皮質
<c.green>當我們的大腦處理視覺輸入時
<c.green>接收信息的神經元<c.green>的第一個等級
<c.green>從視覺皮質中<c.green>對特定的邊界、斑點或顏色很敏感
<c.green>而大腦分區接下來進入視覺管道
<c.green>響應更復雜的結構<c.green>比如面部或各種各樣的動物
<c.green>非常相似地
<c.green>卷積神經網絡組成了神經元層
<c.green>被訓練識別越來越多的複雜特徵
<c.green>所以<c.green>第一層被訓練爲識別低層特徵
<c.green>如邊界和色塊
<c.green>隨後的層被訓練<c.green>識別較高層的特徵
<c.green>比如 如果我們正在做人臉檢測
<c.green>會有識別像鼻子、眼睛、<c.green>臉頰這樣的特徵的層
<c.green>然後把這些特徵結合到一起<c.green>最後構成人臉
<c.green>最後幾個層會結合所有已生成的信息
<c.green>生成最終的網絡輸出
<c.green>比如圖片中很可能有一張人臉
<c.green>我一直提到特徵
<c.green>可以把特徵當做一種過濾器<c.green>過濾那個特徵的輸入
<c.green>比如鼻子
<c.green>如果找到那個信息 就傳過來
<c.green>如果找到那個特徵
<c.green>就把信息傳給後續的層
<c.green>當然<c.green>我們需要發現很多這樣的特徵
<c.green>如果我們正在做人臉檢測
<c.green>那麼<c.green>只尋找鼻子很顯然是遠遠不夠的
<c.green>我們還需要尋找其他面部特徵
<c.green>比如臉頰、眼睛<c.green>然後把這些特徵結合在一起
<c.green>我們需要很多這樣的<c.green>特徵過濾器
<c.green>這就是卷積神經網絡
<c.green>接下來談一下<c.green>我們提供的構建模塊
<c.green>第一個構建模塊是你的數據
<c.green>我們建議使用<c.green>MPS圖片和MPS臨時圖片
<c.green>是我們專門<c.green>爲支持卷積網絡新增加的
<c.green>它們會爲數據、<c.green>爲輸入和中間結果
<c.green>提供優化佈局
<c.green>可以把MPS臨時圖片想象成<c.green>輕量級的MPS圖片
<c.green>作用於存在時間較短的圖片數據
<c.green>MPS臨時圖片
<c.green>是用Metal資源堆創建的
<c.green>我們在第一場演講中描述過
<c.green>它們會標記其中一些<c.green>重複利用的緩衝內存
<c.green>並避免資源佔用過多<c.green>和重新分配紋理資源
<c.green>目標是節約大量內存
<c.green>並幫助管理中間資源
<c.green>我們還提供一些層
<c.green>用於創建推理網絡
<c.green>但你現在可能在想
<c.green>“我如何得知<c.green>實際需要哪個構建模塊
<c.green>來創建我自己的推理網絡呢？”
<c.green>答案是訓練好的參數
<c.green>訓練好的參數...
<c.green>我在前面提到過<c.green>當我們談到訓練階段的時候
<c.green>訓練好的參數會提供<c.green>關於如何創建推理網絡的
<c.green>完整方法
<c.green>它們會告訴你 要有多少個層
<c.green>是哪些層以及層出現的順序
<c.green>你還會得到每一層的所有特徵過濾器
<c.green>我們在底層實現了這一切
<c.green>以便確保你用這些構建模塊<c.green>創建的網絡
<c.green>在所有iOS GPU上<c.green>都有最好的性能
<c.green>你要做的就是把你的數據<c.green>挖掘到我們提供的這個優化佈局
<c.green>並調用庫函數
<c.green>創建組成網絡的層
<c.green>現在讓我們詳細討論一下<c.green>這些構建模塊
<c.green>但讓我們通過一個<c.green>具體的例子來解釋
<c.green>在這個演示中
<c.green>我有一個系統被訓練爲識別微笑
<c.green>我們要實現的是系統將
<c.green>實時檢測我是否微笑
<c.green>我先微笑 然後我再皺眉
<c.green>你將看到系統會給出正確的報告
<c.green>微笑
<c.green>沒微笑
<c.green>微笑
<c.green>沒微笑
<c.green>好了
<c.green>這就是我的演示
<c.green>好了 現在讓我們來看看
<c.green>要創建這種網絡所需要的構建模塊
<c.green>我們要談到的第一個構建模塊是卷積層
<c.green>是卷積神經網絡中的核心構建模塊
<c.green>它的目標是識別特徵並輸入
<c.green>之所以叫卷積層
<c.green>是因爲它會對輸入執行卷積運算
<c.green>讓我們回想一下常規的<c.green>卷積運算是如何計算的
<c.green>你有輸入和輸出
<c.green>在這個例子中是一個<c.green>5x5像素的過濾器 有一些重量
<c.green>爲了在輸出中計算這個像素的值
<c.green>你需要用輸入卷積過濾器
<c.green>非常簡單
<c.green>卷積層
<c.green>是常規卷積運算的一個泛指
<c.green>你可以使用多個過濾器
<c.green>不同的過濾器<c.green>獨立應用於輸入中
<c.green>結果會形成不同的輸出通道
<c.green>那麼 如果你有16個過濾器<c.green>意味着你將有16個輸出通道
<c.green>爲了 獲得這個像素的值
<c.green>在輸出的第一個通道中
<c.green>你需要取到第一個過濾器<c.green>並用輸入對它進行卷積運算
<c.green>爲了 獲得這個像素的值
<c.green>在輸出的第二管道中
<c.green>你需要取到第二個過濾器<c.green>並用輸入對它進行卷積運算
<c.green>當然 我們的示例是比較輕微的檢測<c.green>我們處理的是彩色圖片
<c.green>意思是<c.green>你的輸入實際上有三種獨立的通道
<c.green>正是因爲卷積神經網絡的<c.green>這種運行方式所導致的
<c.green>你需要三組過濾器 每組16個
<c.green>每種輸入通道分別爲一組
<c.green>然後把不同的過濾器應用到
<c.green>獨立的輸入通道
<c.green>並把結果結合起來獲得單一輸出值
<c.green>這就是如何在我們的框架中
<c.green>創建卷積層
<c.green>首先創建一個描述符並制定參數
<c.green>比如過濾器的寬和高
<c.green>然後是輸入和輸出通道的數量
<c.green>然後 從描述符中創建卷積層
<c.green>併爲特徵過濾器提供從訓練好的
<c.green>參數中獲取的真實數據
<c.green>我們要談到的下一個層是匯聚層
<c.green>匯聚層的作用是
<c.green>逐步減少網絡的空間規模
<c.green>從而減少後續層的競爭
<c.green>通常是在中間連續的卷積層
<c.green>插入匯聚層
<c.green>匯聚層的另一個作用是
<c.green>總結或濃縮輸入區中的信息
<c.green>應該提供兩種匯聚運算
<c.green>最大值和平均值
<c.green>在這個例子中
<c.green>我們用了一個2x2的像素區<c.green>進行輸入
<c.green>我們取到最大值<c.green>並把它存起來作爲輸出
<c.green>這是你需在Metal性能着色器<c.green>框架中使用的API
<c.green>用於創建匯聚層
<c.green>一般用的是最大運算
<c.green>過濾器尺寸是2x2
<c.green>全連接層
<c.green>是輸入的每個神經元都被連接到
<c.green>輸出的每個神經元的層
<c.green>可以把它看作卷積層的一種特殊類型
<c.green>過濾器的尺寸與輸入尺寸相同
<c.green>在這個例子中
<c.green>過濾器的尺寸與輸入尺寸是相同的
<c.green>我們對它們進行了卷積運算<c.green>並獲得了單一輸出值
<c.green>在這個架構中
<c.green>卷積層和匯聚層操作的是輸入分區
<c.green>而全連接層
<c.green>用於從所有輸入中聚集信息
<c.green>通常是網絡中最末端的層之一
<c.green>是做出最終決策的地方
<c.green>並生成輸出
<c.green>比如圖片中很可能有笑臉
<c.green>這就是如何在Metal性能着色器
<c.green>框架中創建全連接層
<c.green>首先創建一個卷積描述符
<c.green>因爲這是卷積層的一個特殊類型
<c.green>然後從這個描述符中
<c.green>創建一個全連接層
<c.green>我們還將提供一些其他的層
<c.green>我在本次演講中不會披露太多信息
<c.green>但你們可從文檔中找到相關信息
<c.green>我們還提供神經層
<c.green>通常跟卷積層一起結合使用
<c.green>我們還提供SoftMax層和<c.green>normalization層
<c.green>那麼我們已經提到了所有的層
<c.green>現在讓我們來談談數據
<c.green>我剛提到你應該用MPS圖片
<c.green>它們到底是什麼？
<c.green>你們中絕大多數人<c.green>都已經熟悉Metal紋理了
<c.green>那麼這就是一個<c.green>多通道的2D Metal紋理
<c.green>每個通道對應着一個<c.green>顏色通道和alpha
<c.green>我在之前的示例中曾提到
<c.green>我們需要用多通道創建圖片
<c.green>比如 32個通道
<c.green>如果我們有32個特徵過濾器
<c.green>我們需要創建<c.green>有32個通道的輸出圖片
<c.green>我們該如何實現呢？
<c.green>MPS圖片
<c.green>實際上是有多個切片的<c.green>Metal 2D數組紋理
<c.green>當你創建MPS圖片時<c.green>你真正需要注意的是
<c.green>你正在創建有32個通道的圖片
<c.green>但有時候 你可能需要<c.green>把MPS圖片數據返回到CPU
<c.green>或者你想使用<c.green>現有的Metal 2D數組紋理
<c.green>作爲MPS圖片
<c.green>在這種情況下 你需要了解到
<c.green>我們爲你的數據<c.green>使用了特殊的打包佈局
<c.green>因此結構切片中的每個像素<c.green>都包含四個通道的數據
<c.green>所以一張有32個通道的圖片<c.green>實際應該只有八個切片
<c.green>這是你在我們的框架中
<c.green>創建MPS圖片要使用的API
<c.green>首先創建一個描述符
<c.green>並制定參數 如數據格式的通道
<c.green>圖片高度和通道數量
<c.green>然後從這個描述符中<c.green>創建一張MPS圖片 非常簡單
<c.green>當然 如果輸入圖片的尺寸小
<c.green>那麼你可以批量處理<c.green>來更好地利用GPU
<c.green>我們會提供一個簡單的機制<c.green>來幫助你實現批量處理
<c.green>在這個例子中 我們創建了一個<c.green>含有100張MPS圖片的數組
<c.green>那麼現在 我們已經提到了所有層<c.green>也提到了數據
<c.green>接下來 讓我們看一下<c.green>要進行微笑探測
<c.green>所需要創建的實際網絡
<c.green>我們從輸入開始
<c.green>我們將使用<c.green>我一直在提的訓練好的參數
<c.green>來幫助我們創建這個網絡
<c.green>那麼 訓練好的參數告訴我們
<c.green>這個網絡的第一層將是卷積層
<c.green>輸入有三個通道的圖片
<c.green>並輸出有16個通道的圖片
<c.green>訓練好的參數還提供
<c.green>三組過濾器 每組16個
<c.green>這些富有色彩的藍色圖片
<c.green>在把過濾器應用到輸入中之後
<c.green>使輸出通道變得可視化
<c.green>下一層是匯聚層
<c.green>通過每一個維度的兩個因子
<c.green>降低卷積層輸出的空間分辨率
<c.green>訓練好的參數告訴我們<c.green>下一層
<c.green>是另一個卷積層
<c.green>輸入有16個通道的圖片
<c.green>並輸出有16個通道的圖片
<c.green>進一步縮小<c.green>下一個匯聚層的尺寸
<c.green>以此類推 直到我們得到輸出
<c.green>正如你所看到的
<c.green>這個網絡有一連串的卷積層
<c.green>每個卷基層後面都跟着一個匯聚層
<c.green>最後兩層實際上是全連接層
<c.green>爲網絡生成最終輸出
<c.green>現在 我們已經瞭解這個網絡<c.green>應該是個什麼樣的網絡
<c.green>這樣的網絡在爲推理創建的
<c.green>卷積神經網絡中很常見
<c.green>現在 讓我們看一下<c.green>在框架中創建這種網絡的代碼
<c.green>第一步是創建層
<c.green>訓練好的參數再次告訴我們說<c.green>我們需要
<c.green>在我們的網絡中 四個卷積層
<c.green>爲簡單起見 我演示的代碼<c.green>只創建其中一個卷基層
<c.green>但正如你所看到的<c.green>我使用了跟我之前給你們看過的
<c.green>完全一樣的API
<c.green>然後 我們需要創建匯聚層
<c.green>我們只需要一個 因爲我們要一直使用
<c.green>最大運算 過濾器尺寸爲2x2
<c.green>我們還需要創建兩個全連接層
<c.green>爲簡單起見 我只演示一個的代碼
<c.green>現在 我們需要注意一下輸入和輸出
<c.green>在這個具體的例子中
<c.green>假設我們有一個現存的Metal應用
<c.green>並且你有一些想
<c.green>用在輸入和輸出中的紋理上
<c.green>這就是用來創建MPS圖片的API
<c.green>最後一個階段是從現有的Metal紋理中
<c.green>按照訓練好的參數所指定的順序
<c.green>把所有層編碼到一個現有的命令緩衝區
<c.green>這樣 我們就有了輸入和輸出
<c.green>現在 我們注意到還需要注意一件事
<c.green>我們要把第一層的輸出存起來
<c.green>那麼讓我們用MPS臨時圖片來處理
<c.green>這是如何創建MPS臨時圖片
<c.green>正如你所看到的 類似於
<c.green>你創建普通MPS圖片的方法
<c.green>我們要立即在第一層的編碼中使用它
<c.green>臨時圖片就會被清除
<c.green>提交命令緩衝區
<c.green>然後我們繼續 創建另一張臨時圖片
<c.green>來存儲第二層的輸出
<c.green>以此類推 直到我們得到輸出
<c.green>就是這樣
<c.green>只需要把它們連接起來
<c.green>層的編碼順序
<c.green>跟我之前演示的<c.green>網絡圖表上的順序完全一致
<c.green>從輸入開始 一直到輸出
<c.green>我們已經演示完了一個非常簡單的例子
<c.green>現在讓我們來看一個更復雜的例子
<c.green>我們從張量流中移植原始推理網絡
<c.green>使用Metal性能着色器框架來運行
<c.green>這是一個很常用的推理網絡
<c.green>用於對象檢測 這是完整圖表
<c.green>這個網絡
<c.green>正如你們所看到的 這個網絡
<c.green>比我剛演示的那個更復雜
<c.green>有100多個層
<c.green>但我想提醒一下 你們要做的
<c.green>只是調用一些庫函數來創建這些層
<c.green>首先讓我們看一下運行中的網絡
<c.green>這裏我有一些不同對象的圖片集
<c.green>只要我輕觸這個圖片
<c.green>我們就會實時運行推理網絡
<c.green>它將報告關於這是什麼物體的<c.green>最有可能的五個猜想
<c.green>那麼最可能的猜想是一匹斑馬
<c.green>然後是一輛皮卡車
<c.green>然後是一座火山
<c.green>看起來很不錯 當然了
<c.green>讓我們在舞臺上做一個現場演示吧
<c.green>我們要給這個水瓶拍一張照片
<c.green>讓我們用這張圖片
<c.green>水瓶
<c.green>我想用這個現場演示告訴你們的是
<c.green>即使是100多層的巨大網絡
<c.green>也可以用<c.green>Metal性能着色器框架實時運行
<c.green>但這並不是全部
<c.green>我還想要談一下 在演示中
<c.green>通過使用MPS臨時圖片節約內存
<c.green>在這個演示的第一個版本中
<c.green>我們用了MPS圖片<c.green>來存儲中間結果
<c.green>我們最終以需要74 MPS圖片結束
<c.green>整個網絡的總尺寸超過80兆
<c.green>當然 你不必使用74張圖片
<c.green>你可以針對如何重新使用
<c.green>這些圖片提出你自己的體系
<c.green>但這意味着需要在代碼中<c.green>管理更多的內容
<c.green>我們想確保我們的框架<c.green>儘可能地簡單易用
<c.green>所以 在演示的第二個版本中
<c.green>我們用MPS臨時圖片<c.green>替換了所有MPS圖片
<c.green>這帶來了一些優勢
<c.green>第一點是在時間和能源方面<c.green>減少了CPU消耗
<c.green>但仍然創建了74張臨時圖片
<c.green>只有5個底層內存分配
<c.green>總計只有20兆多一點兒<c.green>這節省了76％的內存
<c.green>這個數超級巨大
<c.green>我用這兩個現場演示的是
<c.green>Metal性能着色器框架
<c.green>爲推理創建卷積神經網絡
<c.green>提供的全力支持
<c.green>並優化了iOS GPU的使用情況
<c.green>所以 請使用卷積神經網絡
<c.green>來建一些很酷的應用吧
<c.green>以上就是<c.green>“Metal的新特性”演講的全部內容
<c.green>如果你沒參加第一場演講
<c.green>請看一下相關視頻
<c.green>這樣你就能瞭解這些很酷的新特性
<c.green>如曲面細分、資源堆和無記憶渲染目標
<c.green>以及現有工具的改進
<c.green>在這場演講中 我們談了專用函數
<c.green>和資源讀寫函數、白色和紋理資源、
<c.green>Metal性能工具的新增功能
<c.green>以及卷積神經網絡的簡單介紹
<c.green>要獲得關於本場演講的更多信息<c.green>請訪問這個URL
<c.green>你可以觀看視頻
<c.green>並獲得相關文檔和示例代碼的鏈接
<c.green>還有一些相關的演講的信息
<c.green>你總可以在線查看<c.green>過往Metal演講的視頻
<c.green>你還可以參加
<c.green>今天晚些時候舉辦的<c.green>高級Metal着色器優化演講
<c.green>請注意 這場演講的地址<c.green>改爲了Knob Hill
<c.green>明天你們將有機會參加白色處理演講
<c.green>及神經網絡和加速演講
<c.green>可以瞭解如何爲CPU創建神經網絡
<c.green>使用加速框架
<c.green>非常感謝大家來參加本場演講<c.green>祝你們在WWDC期間度過一段美好的時光