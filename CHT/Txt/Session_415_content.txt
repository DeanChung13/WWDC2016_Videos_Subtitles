在服務器端使用開源Swift
歡迎大家 我是Philippe Hausler我在Apple Foundation工作
今天我們將談論服務器上的Swift
我們看看爲什麼服務器端的Swift是引人注目的
各個部分是怎麼一起工作的有哪些是可以開箱即用的
哪些不是 一些現實世界中的Swift運行在服務器上的例子
最關鍵的
你可以怎麼貢獻來使服務器端的Swift更好
現代應用開發不僅僅是爲一個平臺開發
它是一個生態系統
你很難找到一個應用
沒有任何服務器端的部分
來自分析 實時通訊
或者雲上儲存的共享的狀態
服務器是構建一個豐富並吸引人的應用必須的一部分
現在構建下一個偉大的事
通常有接觸開關需要製造
你最後嗡嗡地響寫你的應用
然後你知道你要寫的下一個東西是用不同的語言
這會造成停機時間和重複實現
我們都知道我們有多不喜歡重複代碼
但是運行在服務器上的Swift有潛力
不僅僅提供無縫開發體驗
還提供更豐富更吸引人的用戶體驗
通過分享你的代碼庫合適的部分
可以節省開發以及測試的時間
但這不僅是語言
這是API
通常難以剝離API的架構
從語言的構造中剝離
比如字符串 數組 字典 併發
它們通常成爲表達那個語言的庫的核心部分
有了這些 讓我們來到Swift的架構
不僅僅是在服務器上還包括Swift怎麼適用於其他平臺
在早期的設計考慮中
Swift不是隻能運行在Darwin系統上的語言
它本質上可以運行在多種平臺上
有了社區的幫助 這個目標開始成爲現實
對平臺 平臺支持比如FreeBSD目標比如Raspberry Pi
甚至Windows和Android
一些很令人興奮的事
在所有這些平臺Swift依賴系統庫
構建在其上的你有標準庫
它提供一些根本性的基本構建塊和數據結構
在Darwin上我們有被稱爲覆蓋的附件
這幫助系統框架更好的通過接口連接Swift
但因爲Linux中沒有Foundation或Dispatch
一個可移植的接口被創建做爲那些基本的部分
我們從一個那裏應該有什麼的大綱開始
和一些初步的實現
和社區一起 我們添加了很多基本功能
任何現代的開發工作都會需要的
當你的應用進行混合時
你可以看到這些部分在一起工作用在兩個平臺上相同的方式
有了以這種方式創造的Swift
作爲開發者你可以從你的應用中選出合適的部分
來爲服務器開發使用你一直在用的熟悉的概念
Swift.org是獲得最新版本的Swift的中心地帶
註冊郵件列表得到GitHub倉庫的鏈接
或者持續集成構建
或者一個閱讀資料支持的好地方關於Swift的最新開發進展
這是一個針對Swift工具鏈的地方
工具箱裏都有什麼？
工具箱提供在Linux和Mac上構建的支持
你可以在Mac上開發然後部署到Linux服務器
有持續集成服務器來確保
對語言和API的改變
發生並持續集成這樣所有東西都像預期的一樣運行
你有標準庫
給你基本的構建塊 協議 結構 類型
你在構建任何Swift應用時都需要用到的
還獲得Foundation、Dispatch、XCTest
作爲Swift工具鏈中的項目
這給你可移植API的橫截面
這使你爲不同平臺開發時能保持代碼幾乎是一樣的
但是你得到一系列工具
用來編譯 打包和調試Swift應用
以及Swift倉庫來完成嘗試那些新特性
你在兩個平臺上都可以得到所有這些
現在有一些東西沒有被包括
我們做了一個設計決定
有些東西對跨平臺沒意義
或者讓開發者開發自己的方案更好
因爲他們是高度特殊化的
新平臺不僅僅是代碼
它們是持續集成和驗證而且移植到新平臺的冠軍
通常最瞭解實現那些
你的代碼來到這裏開發者機會
用戶界面是一個非常特定於平臺的東西
在iOS上你有UIKit
在Mac上你有AppKit雖然它們有很多相似之處
他們是兩個不同的東西
因爲他們解決不同的問題
關於這點UI可以是網絡模板
有時用戶界面中的用戶不一定是人
有可能是另一個服務連接在發送服務協議
這很明顯是一些相當專門化的東西
現在把你的應用部署到服務器中
這是一個專門化的任務
這樣你可以選擇合適的服務
適合你的要求 預算 規模 當然還有你的應用的服務
這不應綁定到特定的Swift軌道上
在服務器上運行你可以有多個應用
運行在多個Swift版本上
很高興看到熱愛者創建一個開放和分享的社區
有一些很好的機會
來豐富Swift生態環境
總有很多努力被投入到了這個領域
我們在IBM的合作貢獻者做出了
一些相當優雅的東西
我們會看一些抽象的概述
讓我們深入一些
現在看一些現實世界的例子
關於他們在IBM是怎麼參與到Swift中的John Ponzo和Patrick Bohrer
謝謝Philippe
嘿 我是John Ponzo
我是IBM移動雲開發的技術領導
我很激動今天能做爲WWDC的一部分
我們在IBM對Swift社區感到興奮
做爲開源的一部分我們看到了這個語言的極大潛力
對不熟悉的人 讓我稍微介紹一下關於IBM的一些事
及我們怎麼參與到Swift中
2014年Apple和IBM宣佈了我們的合作 聚焦在
企業應用和解決方案
接下來IBM成爲Swift的早期使用者之一
當它兩年前在WWDC上被宣佈時
從那以後我們開發了超過100個企業應用
完全用Swift開發那些應用和解決方案
而且我們有最高的集中程度之一
在IBM開發這些應用的Swift開發者的集中程度
我們開發這些企業應用和解決方案的經驗
持續地指出後臺允許一個優秀的體驗的重要性
做爲開發者我們知道它有多重要
有一個後臺 帶來優秀的移動體驗
我們還知道一個重要的事是我們快速安全地
部署適合的代碼到適合的地方
這就是爲什麼我們對幫助把Swift帶到服務器來如此興奮
我們感謝Swift.org社區的資源和活動
從郵件列表
到代碼貢獻和新形成的開源項目
我想強調我們在IBM做的一些事情
來幫助開源社區把Swift帶到服務器
首先我會告訴你社區實現
然後告訴你Swift沙盒和Swift程序包目錄服務
我們開發了這些來幫助開發者
更容易學習、發現、分享Swift資源
接下來我們受到一致的開發者體驗的激勵
連接客戶和服務器的體驗
最後我們開發了Kitura網絡框架
用來幫助促進和優先我們的貢獻
進入libdispatch和foundation的核心庫中
接下來雲實現是開發過程中的重要部分
我們受到了使把Swift部署到雲上更容易更有趣的動力
通過IBM Cloud對Swift運行時的早期支持
和Xcode附加應用
來幫助部署代碼到雲上社區實現
當Swift.org 12月發佈時
我們想做的第一件事之一
就是幫助增長開發者生態環境
我們看到了這個語言的價值
我們想快速地把它介紹給其他開發者
我們創造了沙盒
這允許開發者更容易在Linux上運行和測試代碼
沙盒在瀏覽器中運行有了這
你可以輕易地編寫Swift代碼保存代碼
並看到在服務器上的運行
自從我們發佈了沙盒
我們根據社區的反饋和要求做出了很多改進
沙盒現在支持移動UI多種UI主題
自動保存代碼允許選擇多個Swift運行時
爲了幫助開發者分享關於Swift的問題和解決方案
我們增加了代碼快照的支持依靠一個永久的URL
你可以用這在郵件列表中分享代碼
還可以在開發者論壇中分享 比如stackoverflow.com
從2105年12月4日起運行了多於150萬的代碼
謝謝 我們看到了超過150萬次在沙盒中的運行
從我們12月發佈它起
從2月起增長了超過200%
沙盒解鎖了從其他平臺訪問Swift
實際上我們看到了穩定的增長和興趣
關於來自其他操作系統的運行和會話
我們很高興見到這些我們希望繼續看到Swift的增長
我們還看到了來自全球的使用
開發者使用沙盒學習Swift併合作
我們的目的是繼續支持沙盒來幫助社區的成長
一個有活力的程序包生態系統對任何語言都至關重要
儘管Swift的程序包管理器規格還是早期技術
我們在服務器上做的所有事
都是基於創建和構成基於Swift的程序包
因爲這 我們發現了關於發現和發佈我們自己的程序包的需求
所以我們開發了Swift程序包目錄幫助實現這個目標
我們繼續更新程序包目錄
隨着Swift程序包管理器規格的進化
今天我們的目錄中有1500個和Swift程序包管理器兼容的程序包
從2月以來增長了400%
接下來當我們開始思考服務器
任何服務器語言的一個基本要求
是能夠支持網絡接口
網絡框架負責監聽端口
路由代碼到合適的邏輯
我們認爲很重要的一點是那個邏輯儘可能一致
和客戶端的編程模型
爲此目的我們開發了Kitura框架
我們在2月開源了Kitura
這是一個基於模塊化程序包的網絡框架
它利用libdispatch和Foundation實現並行
和實用程序庫的支持
一致的開發者體驗
這也驅使IBM對Swift.org的貢獻
我們用Kitura來開發我們服務器端的應用
我們和社區一起工作
有很多IBM以外的Kitura活躍貢獻者
這是我們把Swift帶到服務器的很重要的一部分
我們還爲基於Swift的工作優化了我們的雲
我很榮幸地宣佈我們最新的更新
我們基於Cloud Foundry針對Bluemix的構建包
包括所有你需要的
來快速部署你的基於Kitura的應用到IBM Cloud
這個構建包包括最新的Swift運行時
核心庫 依賴的C庫
部署Kitura到雲需要它們
此外開發是關鍵
我們很高興宣佈IBM Cloud Tools for Swift
一個Mac應用允許你
容易地用Swift開發端對端應用
這個工具幫助你快速和容易地連接客戶端應用
和運行在IBM雲上的服務器端Swift
繼續開發你的工程
你的客戶和服務器端工程在Xcode中
用這個工具來連接那些工程並且部署你的代碼到服務器
有了這些介紹
我想歡迎我的同事Patrick Bohrer上臺
他會展示正在運行的服務器端Swift
謝謝John我是Pat Bohrer
是IBM圍繞Swift進行很多有趣事的技術領導
很激動來到WWDC
我會進行我認爲本場演講中有趣且令人興奮的部分
它有趣因爲我會在服務器上進行一些Swift的實時編程
它令人興奮是因爲我的2個演示
依賴到雲的一個工作的網絡
希望我好運
我們已經談了服務器端的Swift
這對很多人意味着很多
但是對本場觀衆對本次演講
我們想談論的是網絡服務
什麼是網絡服務？
簡單地說 它們是運行在電腦上的程序
它們監聽
它們監聽進來的請求
它們負責路由這些請求
到一些服務器端邏輯並返回迴應
現在外面的可以是一個瀏覽器
可以是另一個應用
誰知道呢？可以是另一個服務
但簡單的說它就是這樣
要開始 這聽起來足夠簡單
讓我們繼續深入做一個現場演示
我已經提到過
通常這些網絡服務運行在Linux上
我們聽說了Swift運行在Linux上
讓我們繼續 爲第一個在Linux上的演示工作
讓我們那麼做
這裏我們有Linux在運行確保我不是在撒謊
讓我們新建一個目錄來做一些來玩一玩
所以我們非常有創造性地創造了一個用來玩的目錄
你可以看到裏面沒有東西
我們會用Swift程序包管理器
如John提到的 我們在服務器上做的任何事都是基於程序包的
我們要用 這是一個版本的Swift程序包管理器
對晚些時候觀看的人來說這些語法會改變
但是對我們今天用的這個版本它有一個初始化步驟
所以如果我們使用這個命令可以看到它創建了一些文件
根據結構和package.swift文件
Swift程序包管理器知道怎麼構建你的應用
如你在這裏所見我們有package.swift
它創建了一個Sources.main
這就是用來構建一Swift一個簡單Swift程序包所需的全部
說過這些讓我們繼續
我們可以開始Swift構建這很容易
它創建了一個.build/debug/play可執行程序
讓我們運行它
你好世界
但我們在開發網絡服務讓我們做一些真實東西
這是Swift程序包管理器爲我們創建的東西
我們最好有一個程序包它是基於我們的稱爲Play的目錄
它給我們的可執行程序命名爲play這是得名的原因
我們想要增加一部分
那是對Kitura的依賴我們只需要指出這
現在我們來到主文件
讓我們刪除舊的你好世界
讓我們在這加一些代碼
這個代碼所做的是 忠實的支持者
我們獲得Foundation
我們導入Kitura和一些Kitura支持程序包
我們定義了一個路由我提到過的 爲了進入的請求
我們需要把這些請求導到一些地方
我們要定義一個路由在這 那是/hello
如果任何請求進入 我們會運行這些代碼
很簡單
我們會指定一些迴應頭
我們會發送回一個字符串說你好世界
往下到這我們指定我們監聽的端口是8095
我們開始監聽這個端口我們指定我們的路由是一個委託
然後我們啓動服務器
這很簡單
讓我們保存它
現在我們要第一次構建Kitura
因此我們在這加了一些東西
John提到過 我們利用libdispatch和Foundation
所以它在做的是獲取
Swift程序包管理器正在獲取我們需要的東西
我們寫我們關心的代碼
Swift程序包管理器獲得Kitura
它在獲取我們的網絡它在獲取一些系統支持
一個記錄器 所有你在網絡服務中需要的東西
以及監聽套接字和其他的功能
這些都是獨立的程序包
在GitHub上你可以獲取
它被編譯和構建
現在讓我們運行可執行文件
我們現在可以看到它說它在監聽8095端口
讓我們看一看
打開本地主機8095端口因程序運行在本地Mac和Linux
你看到我們看到一個Kitura頁面
如果我們沒有定義默認路由
它會顯示這個頁面並說明其他開始的方式
你可以覆蓋這些但是對我們來說想要定義的是一個你好
所以你要做的第一件事是說你好世界
第一步當你思考它時
讓我們返回我們會在這做更多
讓我們返回並編輯主文件
這裏有很多東西是我們可以用的
我們有Foundation
我們可以生成JSON
讓我們添加一個小助手代碼來幫助我們生成JSON字符串
我們會添加一個叫做今天的路由
這是一個新路由 如果有東西進入/today
它會利用Foundation獲得當前日期
我們會新建一個NSDateFormatter
就像我們在客戶端會做的一樣
我們用這DateFormatter來創建日期和時間字符串
然後我們來到我們的迴應
在這我們創建一個負載是一個字典
現在在互聯網上 你們都知道的這都是JSON
我們指定消息是你好世界日期和時間是當前的
我們把它轉化成字符串這是我們這次返回的
讓我們看看它是怎麼工作的
讓我們重新構建
快多了 所有程序包都在本地
這很好
我們會再次運行它你可以看到我們在監聽8095
我們會刷新並看到我們仍然在你好上返回你好世界
讓我們看看今天
這就是了我們有JSON負載
每次有人來這
這些代碼會被運行返回一個迴應
這是一個很簡單的如何開始
我妻子要我取下眼鏡
這很有趣但是現在讓我們讓它更有趣
在我們討論時我想首先介紹給你們
一個有趣的例子我們提供給社區的
它叫做BluePic
端對端Swift BluePic
BluePic是一個社交相片分享應用示例
它有富客戶端界面一個很漂亮的界面
我們開發並提供它做爲示例的一部分
它還有個很有趣的後端
是一個Swift服務器後端純Swift
使用Kitura運行在IBM Cloud
它還使用一些有趣的服務
我會提到 如Watson和ObjectStore
SQL數據庫 這些好東西
如果你準備好深入
它還使用IBM全新的事件驅動的編程模型
叫做OpenWhisk它也支持Swift
這個程序包還有很多事在發生
它現在在GitHub上爲那些想開始的人
在我們進入演示模式前
我想花一點時間談談設計模式
不像以前我們有網絡瀏覽器做爲客戶端
我們當然有iOS應用
它有我們的MVC設計模式
你看到它還有一個網絡接口
有請求和迴應
它和我們的Swift中間層聯繫和我們剛剛做的類似
這只是更有趣
接收一個進入的路由請求 把它們路由到一些邏輯
然後 最後 我們還有一部分
我們有一些有趣的服務我們會討論一下
用來保存我們應用的所有數據
再深入一點
我們有客戶端
它有響應性它是非常用戶特定的和視圖驅動的
用來渲染一些漂亮的界面和應用的用戶互動
然後我們有中間層
中間層響應用戶有的所有東西
但是它還做一些很有趣的事
當相片被遞交給中間層
它會接受那些相片並儲存到ObjectStore中
會圍繞它們創建一些元數據
但還會做些有趣的事
它會把相片遞交給Watson的Vision Insights
提取相片的標籤
山 湖和類似的東西
這像是從中間層給我們的應用添加一些特殊醬汁
它還會注意到相片是在哪拍攝的
調用Watson的WeatherInsights獲取信息
當地的天氣是怎樣的？
我們添加所有這些
不是把這些雙程通信放在客戶端
我們把它放在服務器端它總是可用
構成我們的服務
實際上這是端對端Swift
讓我們部署合適的代碼到合適的地方
這是在野外運行的BluePic
它運行在設備上
它連接了雲
應用服務器接下來聯繫
各種不同的服務我提到過的 這很好
現在如果出現一些問題 我們需要調試或進一步開發應用
我們要怎麼做？
做爲一個iOS開發者我們知道該怎麼做
我們獲取應用的源代碼放到我們的Mac中
我們把它載入Xcode然後我們準備好了 對嗎？
我們可以調試它
我們可以調試應用
你可以向雲發送請求
我們現在知道做這些
但是現在中間層也在運行Swift
我們要怎麼做？
對的 你可能不想像我一樣在Linux上使用VI
但是我們能做相同的事
我們可以獲取服務器端源代碼到Mac中
把它載入Xcode 然後我們就可以進行正常的開發
並且在Mac上本地調試我們在調試和開發
這令人興奮
現在我們的開發世界變得更大了
我們實際上控制端到端的所有事
從客戶端到中間層甚至到我們接觸的服務
我們真的對此感到興奮
因爲我們認爲它降低了開發週期
因爲你在客戶端上工作
而且你想在後端增加功能
是在一個你瞭解的世界中
到那一端 我們做爲開發者我們認爲我們可以再深入一些
就像我們對程序包目錄和Swift沙盒所做的
我們開發了叫做IBM Cloud Tools for Swift應用
作爲一個Mac應用來幫助我們管理這個更大的開發世界
我們對此感到興奮
這個應用實際上使我們能夠
管理端到端的整個棧
有很多事是我們能手動做的
但是爲什麼不用一些工具來幫助你呢？
IBM Cloud Tools for Swift
我們期待聽到你們對此的反饋
像我們的沙盒和目錄
我們會繼續 你們知道我們的這些應用剛開始
做爲開發者我們知道我們想要它做的
我們會繼續增加功能並聆聽社區
但是我們對它的可能性感到興奮
我們的目標是允許社區
繼續開發優秀的應用現在由服務器上的Swift驅動
有了這些背景
讓我們再看看一些演示
會向你展示和Swift一起的未來有多光明
首先這是IBM Cloud Tools for Swift
如果你想要開始
它顯示給你一個界面是一個漂亮的富界面
對那些想要開始使用BluePic的人
它還允許創建一個BluePic工程
創建Kitura工程或一個空工程
關於這有趣的部分
不僅是克隆那些工程
還提供來自IBM Cloud的資源
當你準備好部署工程它會
實際上 當你創建這些它會部署它
因爲它知道這是一個工作的例子
要準備好並快速運行這是開始的一個好方式
對我們 我們已經創建了一個BluePic應用
你可以看到我們有一個BluePic演示
非常聰明的命名
在這你可以看到我們有一個客戶端應用
一個客戶端應用和雲運行時之間的捆綁
它們都用Swift寫
此外如果我們深入這裏是服務器端代碼
你可以看到它有代碼在我的電腦本地位置的引用
以及綁定到它在雲上的位置
以及爲了應用提供的所有服務
我可以在Mac本地管理所有這些
並且我可以啓動
在界面中點擊一下來查看我的客戶端
這就是BluePic的客戶端應用
它也被創建了 讓我放大一下這個文件
Bluemix.plist
知道開發週期 可以運行
你的雲服務 在本地而不是遠程
很容易控制這些
它會監聽本地8090或者遠程的在Bluemix裏
並傳遞授權
這裏的想法是使這些簡單
在這我們繼續運行讓我們想像
有人提交了一個關於這個應用的錯誤報告
這是我們的應用
它有漂亮的界面
我們可以滾動我們可以看更多圖片
如果我們點擊這些圖片我們可以看到有更多信息
這一張的名字是自然我們可以看看是誰拍攝的
可以看到 是在德克薩斯州奧斯汀拍攝的
在那沒有山
我們還可以看到當時的天氣
多虧Watson Insight我們看到一些標籤
這很有趣如果我點擊標籤可以看到
我們有一個相片有湖
如果我返回 讓我們點擊山
我們看到有一些相片有山
所有這些都是通過後端集成完成的
用戶不需要加標籤這是自動提取的
但是我們聽說有一些抱怨關於當我點擊多雲的天時
所以讓我們看看
我們點擊多雲的天我們看不到任何東西
我們知道這發生了什麼
不知道爲什麼服務器沒有返回正確結果
讓我們切換一下
我們想找出原因 弄清真相
所以我們來到這 點擊服務器端代碼
它會啓動並顯示服務器端代碼所在的目錄
如果我把這些載入一個終端
你可以看到有很多相同文件我提到過的
我們在服務器上使用Swift 3.0
我們有Package.Swift我們有資源
我繼續
並創建了一個服務器端代碼的Xcode工程
讓我們打開它
這就是代碼這是一個圖像的獲取處理器
我們知道當我們想要圖像我們的圖像供給
我們會調用獲取函數 在服務器的/images目錄
若我們看看這 我們想要深入它並說
不知道爲什麼當我傳入一個標籤我們沒有返回正確結果
讓我們在這加一個斷點我們會運行服務器
現在我們可以看到服務器在監聽本地的8090端口
讓我們切回去
在這我們要客戶端的本地選擇是
這樣它就會連接到我們的本地服務器
讓我們重新運行模擬器
順便說一下 我在網絡連接這方面真是很幸運
請繼續保持你們所做的
讓我們向下滾動到我們有問題的文件
讓我們在這點擊
讓我們點擊多雲的天
好的
在這我們在服務器來到了斷點
如果我們想知道發生了什麼
比如我們想要打印標籤
我們可以看到有點難看到那個
我們可以看到進入的字符串是cloudy%20sky
這不好我們不想要這樣
讓我們看看
我們還知道有Foundation
若我們用Foundation清理它
我們會移除百分號
現在這是一個變量而不是一個let
讓我們構建它
我們會再運行它
重新運行服務器
讓我們返回應用
好了
等待我們的時候超時了
讓我們返回讓我們再點擊一次多雲的天
看看我們是不是改正了我們的問題
打印標籤
好多了這是我們想要的
讓我們關閉這個斷點並繼續
我們看到我們得到了結果
此外 因爲我改正了錯誤
我可以返回到Swift雲工具
我可以進行重新部署把這些代碼部署到服務器上
它會馬上開始部署代碼
和你的客戶端一起工作就是這麼簡單
和你的服務器端以及重新部署到雲
我希望你們喜歡這些演示
我需要告訴你因爲每件事都進展順利我覺得放鬆了很多
代表IBM我和John謝謝所有抽空前來的人
做爲一個Swift開發者這是令人興奮的時候
我們邀請你加入我們加入更廣泛的社區
把Swift的能力帶到服務器
更多信息 關於你在這聽到的任何事
關於我們是什麼 IBM在做什麼
我們有developer.IBM.com/Swift你們可以來我們的開發中心
就這些了 再次感謝
我會交回給Philippe
如你們見 IBM對Swift進行了很多很棒的工作
他們不僅僅貢獻優秀的代碼
他們還豐富社區
和他們開發服務的各種經驗
和流水線化開發流程
他們的一些工作對使服務器端Swift成爲可能相當重要
但是你們也可以幫助使服務器端Swift成爲現實
有一些事是你們可以貢獻的
Swift的一些部分還沒有完成
有很多工作要做
有一些功能還沒有實現
沒有實現表明有貢獻的機會
有很多容易的方式讓你做出貢獻
缺陷追蹤系統有一類問題被加上了初學者缺陷的標籤
但是代碼不僅僅是實現
設計可以和Swift一起工作的新API和指南
是郵件列表上的日常工作
很多討論是關於語言本身的工作
並且是來自像你這樣的貢獻者
當然 你的程序包 你的應用
會使得服務器上的Swift了不起
如果你有任何問題關於資源或鏈接
關於我們今天討論的內容的
我們有本場演講 我們有一切集合在一起
還有一些很好的相關演講
我強烈建議觀看
API設計指南討論了我們的一些設計上的想法
在Swift 3新命名的背後
我強烈建議你們看一下
“Swift Foundation的新特性”
所有新添加的值的類型和特性
都會在服務器上可用
當然性能不僅僅是在本地應用上必要的
我們也需要確保服務器
的響應性好而且快
所以性能 在所有平臺上Linux和Mac上都有
是需要關注的
我強烈建議看一看GCD中的新特性
會和Swift 3一起發佈
就是這些了 非常謝謝