使用TVMLKit開發應用
下午好 歡迎大家
我是Nurinder Manj目前是一名TVMLKit團隊
軟件開發經理
在此我和Parry Panesar一起談論如何使用TVMLKit構建大型應用
你們中的大多數都開發過一個或者多個原生應用
在此過程中你們要痛苦的調試性能
並且不斷優化用戶界面
通常這些過程犧牲了新特性開發或者會導致延遲交付
你們中有人可能開發過web應用
web應用通常有很強可塑性
而且要不斷的更新但是用戶體驗卻不是很好
TVMLKit作爲一個新的框架已經引入到tvOS中
作爲橋樑連接web和原生應用
當你使用TVMLKit構建應用時應用將看起來
感覺起來和使用起來就和Apple應用一模一樣
我們開始吧
今天 首先我準備講一下這個框架可以爲大家提供哪些東西
然後 我們爲大家準備了一些應用
這些應用將爲大家展示一個TVMLKit應用的全部特性
但是在此之前 我要先大致介紹下這個框架的信息
在這段視頻的後半段我會講一下
新的令人興奮的新特性該特性將在tvOS 10中引入進來
我帶大家看一下一些用戶交互界面
這app store應用且是專門 爲Apple TV定製
一款常規的iTunes 電影應用
借鑑了Search應用的特性
另一款應用是Apple Music
所有這些移植到Apple TV的應用都是基於TVMLKit開發的
並且如果你回過頭來思考這些應用都有什麼特點的時候
會發現他們都有同一個目的
他們可以讓人們瀏覽 交互
並且都包含內容分類信息
這些內容都將以一種簡單而獨特的方式被呈現出來
那這個框架究竟帶來了什麼？
這個框架爲開發者提供基於模板的原生交互界面
而且性能方面都已經過了優化和改善
爲開發者節省了大量的時間和精力
這些複雜而豐富的交互界面正如大家剛纔所見
是通過是用一個標記性的API來定義實現的
並且使用JavaScript驅動這些應用
這些模板的可定製性很強
你可以改變它的外觀、它的行爲和樣式
而且 這個框架沒有侷限於我們提供的既有模板
你可根據現有的Apple模板進行改造
只要添加自己的視圖和這些視圖的控制器就可以了
甚至 你可以從頭創建自己的模板
你也可以擴展JavaScript的功能性
當然是根據你的應用場景來定製
我可以向你保證這不是一個web瀏覽器
它是一個優化了的爲tvOS定製的原生交互體驗
我們開始構建應用吧
這些是主要的控件待會兒我會詳細介紹
我們需要構建我們自己的應用
首先在Xcode裏創建並配置客戶端項目
接下來我會講關於標記
和樣式來配置項目
最後 我會講下JavaScript API
是如何驅動這個應用的
現在在我們研究細節之前
我來給大家展示下從架構的角度來分析這個項目
典型的TVMLKit應用是基於client server架構模型
客戶端應用是基於UIKit的應用
它可以運行在tvOS設備上
而server端保存有媒體文件和JavaScript文件
這框架提供了applicationcontroller API
它可以下載關鍵的JavaScript文件
還會搭建一個JavaScript環境
且負責控制JavaScript行爲
一旦行爲可控
JavaScript就負責下載任何需要的文件
來展示用戶看的模板
並且JavaScript還負責處理用戶所有的事件
並且正確的響應事件
第一步打開Xcode
Xcode提供了TVML類型的應用模板
這是你開發的應用的起點
這是部分代碼由模板生成
這裏的第一步驟是修改JavaScript URL
指向主要的JavaScript文件
下一步是創建applicationcontroller上下文
關聯javaScript URL
你也可以指定啓動選項
這些選項會在啓動時傳遞給JavaScript
最後一個步驟是創建一個application controller實例
基於之前的上下文和窗口
下載你的關鍵JavaScript文件並執行該文件
然後控制權交給JavaScript
你也可以指定一個代表...
來監控你的controller狀態
比如啓動項目的時候提示是成功還是失敗了
接下來我們討論下模板
TVML是一個Markup規範
用於定義符合Apple-TV規範的模板
當Markup展示在導航欄的時候
從JavaScript編譯成UI
一旦展示完成你可以繼續更改XML
這些更改也會動態渲染到用戶界面
外面的模板看上去還是正常的
你不必做額外的樣式化工作
只需要填充內容就行然後就可以繼續往下操作
但是你可以更改外觀
和行爲 通過使用樣式化工具來適配 [inaudible]
關於標記Markup
文檔是一個實體用來包裝模板
這是XML結構樹展示了文檔結構
它有兩個子元素
第一個是head元素具有自己的樣式
封裝了所有你定義的樣式
第二個元素是templateName
以及它的內容
每個模板的名字唯一並且具有功能性
我們來看一下其中的一個模板
這是iTunes Movies應用的Top Movies頁面
這個模板允許你滾動所有的內容棧
在Markup面板稱之爲stackTemplate
在這個例子裏
它的模板使用XML展示
在模板的根節點是一個collectionList元素
封裝了各種集合類型 比如carousel
shelves grids以及其他支持的類型
現在這裏的top的控制器是carousel control
這支持水平的內容瀏覽
基於中間內容的瀏覽
這種控制器類型在空白狀態下會自動滾動內容
而創建這個控制器Markup很簡單
你只要定義一個section並且列出list可預見lockup情況
不需要進行額外的配置
在這個carousel下面是一個shelf
它也可控制水平滾動內容
而展示這個的Markup和carousel很相似
但是shelf允許你指定一個標頭
且可以包含一個或多個section
每個section也可以自帶一個標頭
而且必須包含一個或多個lockup
那麼lockup又是什麼呢？
lockup是一個UI控制器
封裝了圖片和文字元素
這是一個[inaudible]
回到我們的例子應用
若你留意只有當前聚焦的lockup
的文檔元素是可見的
這不是默認的框架行爲
這是一個例子告訴你如何定製樣式
我來演示下具體怎麼做
我在這定義了一個類
我把它的高亮屬性設置爲
爲選取框的值並且在高亮的時候才顯示
然後設置這個類
的文字元素和lockup不匹配
然後你就可以看到這個行爲了
但是 這只是一個簡單的定製化例子
我再給大家演示一些其他例子
這又是一個stackTemplate
我們現在有一個banner並且指定了它的背景圖片
banner就在collectionList的相鄰位置
這是背景顏色爲模板而設定
這個模板無縫隙的協調了背景顏色
和banner的背景圖片顏色我們可以看到是這個效果
banner標題的結構
以及按鈕的結構都是可以定製和配置的
另一個熟悉的例子是一個movie bundle例子
這也是一個stackTemplate
這個模板的背景圖片是
有框架生成的你只要指定一個圖片
設置爲英雄形象圖片元素
再一次的標題 shelf
以及按鈕的佈局也定製化了
而且還有豐富的模板可供大家選擇
使用樣式工具
可以創建獨特的用戶體驗
符合大家品牌的特色
TVML Catalogue是一個資源庫可以瀏覽模板和與模板交互
請檢查一下
就像我之前所說
TVMLKit搭建了原生和web應用的關聯
你會發現可以很簡單的創建
豐富和複雜的用戶界面只要使用簡單的Markup就可以了
我給大家演示下JavaScript驅動應用的原理
它所提供的JavaScript引擎
由框架的JavaScriptCore驅動
而內置的Web Inspector
也提供給了打擊調試和優化
並且從tvOS 10開始
JavaScriptCore對ES6有很好的兼容了
TVMLKit添加了基於平臺的API
輔助驅動應用
現在標準的web API像XMLHttpRequest
是傳輸客戶端和服務器端的數據
DOM是分析轉換和操作[inaudible]
監聽用戶時間 本地存儲
會話存儲都是由框架提供的
另外TVMLKit也是提供了平臺相關的API
比如管理導航棧
獲取系統信息
播放[inaudible]圖片輪播還有其他功能
除此之外
框架也爲大家提供了簡單的API
處理媒體文件的播放功能
現在有個重要的事情我要指出來
有一個單獨的JavaScript上下文
針對每個controller都有一個
你可以你管理所有的document
這個單獨的上下文中
我來講解下一些關鍵類
第一個是應用對象
應用對象提供了回調方法而且是必須註冊的方法
最重要的調用是onLaunch方法
指示你所有JavaScript應用的起點
另一個 API 我要提到的是關於處理錯誤的方法
叫做onError
你必須提供良好的回調函數
處理那些異常和失敗的情況
一旦控制交給JavaScript
你第一個要做的事情是展示一個文檔
爲了實現這個
NavigationDocument類就需要大家好好處理了
這個類等同於和UINavigationController在TVMLKit這個框架裏
裏面有一個全局的預置的實例
你現在可以創建更多的實例了
現在你只要負責添加document
把他們彈出
是由Menu手勢操作負責也是屬於框架處理的情形
還有三個主要的API你們會經常用到
頭兩個是pushDocument和replaceDocument
他們是一起出現的
我來演示下推薦的操作方法
只是一個代碼段創建一個模板
通常當你處理處理用戶請求或者啓動應用的時候
你會展現一個Spinner
以便於用戶知道當前是什麼情況
一旦你創建了這個loading文檔
你應該使用pushDocument把它放到棧頂
當你等待獲取到遠程數據的時候
並且已經準備好
之後你會替換掉當前的loading文檔
成期望的新內容
爲做到這個 要用replaceDocument方法
這是一個常見的模式
我們鼓勵你用正確的方式展示Spinner
當你準備從遠端獲取數據的時候
最後一個API是presentModal
是用來展示警告和錯誤信息的
或者以不覆蓋的形式展示其他的模板
現在影響TV觀看體驗的關鍵是視頻播放器功能
我們對此進行了簡化
讓我來演示給大家
只需要10行不到的代碼
你就可以配置完成具有全部特性的視頻播放器模塊
我帶大家看下這段代碼
首先 創建一個MediaItem它的類型是video
並且設置視頻流的URL
你也可以指定標題藝術家URL描述
使得其信息完整些
我們可在信息面板裏看到視頻播放器模塊體驗信息
接下來 創界一個播放列表添加一個或多個視頻
最後一步是創建一個player實例
用於操作播放列表和展示播放器
完成之後 我們就實現了一個完整的視頻播放器提供豐富的用戶體驗
另外
所有特性像 處理空隙 內容保護
章節分組 時間[inaudible]
以及其他很多API都已經提供了
在該JavaScript環境裏
和之前視頻播放器模塊一樣
我們擴展了音頻播放功能
並且使用起來一樣很方便
唯一變化的是需要綁定的是音頻
以及音頻文件的URL
這個可以提供
漂亮而功能完整的AudioNow Playing體驗
就和Apple Music一樣
如果你正在構建一個音樂應用程序
你還需要做一件事情
就是配置你的應用
這樣你的音頻文件就可以支持倒帶
現在是處於休眠狀態
這樣很類似就和在iOS上操作一樣
設置一個支持倒帶的category在AV會話面板上
並且添加背景模式到info.plist
剩下的事情就由框架去完成
這樣之後 我想邀請Jeff上臺
來演示構建TVMLKit應用
謝謝大家
謝謝你Nurinder
大家好
我是Jeff
我在這爲大家演示TVML應用
我要先強調下我們目前已經討論的內容
你就會發現構建一個原生應用是多麼簡單
只要使用TVMLKit構建支持Apple TV的應用
爲了這次演示 我們會演示WWDC 的一個簡單版本
關於用戶界面
我們有多個shelf內
每個shelf會包含會話視頻
跟蹤會議
所以想象下你可爲每一個開發者工具提供一個shelf
還可以提供給應用框架 設計等等
我們開始吧
這是一個Xcode項目我們之前就已經準備好了
我們先從AppDelegate開始這也是我們應用的入口
在應用裏didFinishLaunchingWithOptions
正如你看到的這幾行代碼
我們已經啓動了運行這個TVML應用
我們有在這指定了JavaScriptApplicationURL
指向一個server已經運行在這個Mac上
所以如果你看下這裏的目錄
這就是我配置提供文件服務的服務器位置
你也看到 這裏有個文件名爲application.js
這個JavaScript文件驅動TVML應用
這裏有一個JSON文件包含了所有數據
這次演示需要的數據
我們來看看這個application.js文件
在這個文件的頂部我們聲明瞭一些變量
來保存我們的數據
在App.onLaunch這個方法裏我們調用一個方法
當TVML啓動的時候
所以我們在這主要做的事情是獲取我們的JSON文件
然後創建一個用戶界面並使用我們之前提到的數據
在我們繼續往下之前
我們應該展示一個loading提示在屏幕上
在通過網絡平臺獲取想要的信息時這種方法通常會被推薦
可以爲用戶帶來更好的用戶體驗
所以我在這添加了一些代碼
在TVMLKit做這些操作時是爲了展示一個loading模板文檔
這些都是在這個方法裏完成的叫做createLoadingDocument
我們調到這個方法
你會看到我們基本上給loading模板創建了Markup
然後創建一個DOM文檔對象使用的是DOMParser
現在回到launch方法
在創建loading文檔後
我們現在使用navigationDocument對象
把文檔推送到屏幕上
這就好像在UIKit裏使用UINavigationController一樣
現在我們有了loadingSpinner顯示在屏幕上
我們現在回調用一個方法我創建的叫做...
request JSON
它會使用內置的XMLHttpRequest對象
爲了獲取JSON文件 然後在回調函數裏響應
接下來
我們要轉換JSON文本就是我們剛剛獲得的
到我們的JavaScript數據結構裏
現在我們的UI調用一個shelves棧
我們會創建一個stackTemplate文檔
現在讓我在這裏貼一段代碼
然後跳到我們的createStackDocument方法
現在你可以看到
和我們創建Markup類似爲了早些創建loading模板
我們在創建Markup爲這裏的stackTemplate
在這個stackTemplate的Markup裏
我們已在此添加了頂部banner圖片
在collectionList裏
我們實際上在瀏覽會議裏的每一個觸控項目
並且創建一個shelf元素每一個都創建一個
這些都通過使用createShelfElement方法
我們現在看到了
現在我進入這個方法裏面
我們再一次爲單獨一個shelf創建Markup
在這個方法體裏面 爲每個會話視頻創建一個lockup元素
我們跳到createLockupElement方法
你會發現我們正在創建的Markup
給這個單獨的lockup元素描述了會話的信息
在這個處理情形裏 我們捕獲sessionId作爲定製的屬性
我們也在添加圖片 設置寬體 高度 和 標題
我們回顧下 我們創建了一個stackTemplate文檔
包含了多個shelf元素在美國shelf元素裏
我們有多個lockup元素
我們再回到剛纔那個launch方法
在我們創建stackDocument後
我們會使用navigationDocument對象
來替換loading文檔目前這個文檔是可見的
使用我們的stackDocument
這樣之後我們已經準備好運行
我們再切換到Apple TV
然後繼續
我們現在擁有一個漂亮的UI供shelve棧使用
美國shelf包含圖片lockup或會話視頻
如你所見 只要少量代碼
我們就可以創建一個應用一個非常棒的應用
在家裏的Apple TV上看棒極了
下一件需要做的事情
是在我們點擊lockup時能夠播放視頻
現在什麼都沒做
所以我們回到Xcode然後添加這個功能
回到我們的launch方法
我會添加這兩行代碼
這會註冊選擇和播放事件
選擇事件在你按住觸控板的時候觸發
Siri Remote觸控板播放事件觸發的是
在你按住Play按鈕的時候
在這兩種情形下
我的playSelectedLockup方法會被調用
我們進入這個方法
然後實現它
所以我們第一個要做的是...
獲取lockup元素在這個時間裏獲取
我們可以獲取會話信息通過定製屬性裏的sessionId
下一步 我們會創建一個新的mediaItem對象
給嵌入的視頻創建並且初始化它使用視頻的URL
就像這裏一樣
我們也會提取其他的關於會話的信息
比如標題 描述軌道和藝術品
接着我們會創建一個播放列表對象
並且把mediaItem對象推送進去
最後 我們會創建一個新的player對象
設置播放列表
只要簡單的調用play方法就可以全屏播放了
回顧下 我們現在創建了一個player對象
這個對象有一個播放列表包含有一個視頻對象
有了這些 我們來試試這個
回到UI
我們會使用 Siri Remote並且點擊這個鎖
然後播放器就開始播放了而且是在全屏模式下
謝謝
你可以點擊Menu按鈕然後退出視頻
所以這就是TVMLKit產生的播放器
謝謝大家的寶貴時間接下來交給你了Nurinder
謝謝Jeff精彩的演示
只要少量的代碼
你就能創建一個功能完整的應用並且有良好性能和外觀
這個空白在lockup行
陰影處理 文字處理
看起來合適
在我們繼續之前概括一下你們剛纔所看到的
用Xcode裏面的TVML應用模版
創建並配置你的客戶端項目
你們學習瞭如何以JSON創建一個簡單的加載文件
和一個複雜堆文件
且你們也學習瞭如何使用NavigationDocument
來推送或者替換堆棧裏的文件
JavaScript用來處理用戶事件
在這個例子中我們處理選擇和播放事件
並且根據對應的lockup來配置視頻播放
當我們介紹完了TVMLKit
你已經可以創建強大的應用
你們中很多人已經這麼做了
謝謝
你們已提供了一些很好的反饋而且我們想做的更好
我們已經在這方面做了很多的努力
並且正在加入一些令人激動的新功能
它們是非常容易使用的
能使你的應用提高到更高的水準
爲了更好地闡述這些現在我想邀請Parry上臺
謝謝
下午好
我叫Parry我將帶你們一起來體驗一些新功能
這些功能是在tvOS 10的TVMLKit中引進的
TVMLKit提供了非常適宜的應用級別的功能
通過簡單而靈活的界面
我們在tvOS 10中的新功能也是一樣的
比如
只要增加一個屬性
在搜索文件的搜索結果中
你就能讓結果有淡入淡出的動畫效果
在用戶輸入的時候
這給用戶提供了着迷的體驗
當他們試着去縮小結果範圍
或者如果你有一個音樂應用
只要在菜單欄頂層增加一個菜單項
你就能在那裏展示Now Playing的音頻體驗
這些都是由TVMLKit來管理的
所以它就會隨着播放開始和停止而進來和出去
這給你們的用戶提供了一種方便的辦法
來返回到播放列表和繼續聽音樂
所有這些功能是非常強大的
但同時它們又是非常容易實現的
爲了向你們展示這個
我想選擇其中的三個
來聊聊它們
在最後實現你們在演示中所看到的功能
讓我們開始吧
我想講的第一個功能
亮色和暗色外觀
在tvOS 10中有一個新的系統級別的暗色外觀
所有的應用都要採用它
你的TVMLKit應用也要應用它
通過設置應用的info.plist文件
這是一件同樣你需要做的事
在你用UIKit寫應用的時候
所以你可以指定你的應用的外觀
你可以選擇亮色
暗色或者自動
這種情況下它會選擇系統的設置
但是無論你選了哪種
你的標準TVMLKit應用會運行地非常好
而不需要更多的改動
我們所有的模版都配置了樣式
對亮色和暗色兩種外觀
需要時TVMLKit會在兩者之間切換
所以你能方便地得到這個效果
但是
如果你在你的文件中有明確的樣式
那麼你需要選擇兩種外觀的樣式
舉個例子
這是一個含有標題的模版
它的顏色被設置成黑色
使用一個明確樣式
這個可能在暗色主題下不起作用
爲了能讓它工作
你需要定義類
對於這樣的外觀
爲了在tvOS 10中實現這個
我們新增了一個名爲tv-template的多媒體功能
它有個功能稱爲tv-theme
你可以用它來創建一個多媒體查詢
對應於一種外觀
只要將你所有的樣式合在一起
按照它們的多媒體查詢分組
將它們放在文件中
TVMLKit將會爲你挑選正確的樣式
所以只需要一丁點的樣式配置
和零行代碼
你的應用就實現了暗色主題
現在讓我繼續談另外一些能提高用戶體驗的東西
但是要通過一種不同的方
讓我們聊聊內嵌式視頻
公平地講
視頻是電視觀看體驗中很重要的一部分
如果你有豐富的視頻資源
你就會想讓你的用戶感受到它
當他們一打開你的應用時
你的應用當中的內嵌式視頻
發揮了重要的作用
爲了給大家展示這會給你們的應用帶來什麼不同
我們創建了你們剛剛看到的那個預覽演示
但是有內嵌式視頻在裏面
讓我們來看一下
這是流暢的
不但瀏覽體驗毫不突兀
而且迎合的非常好
這使人身臨其境
正如你所料TVMLKit幫你做了大部分的工作
你只需要與這個上層接口打交道
讓我們來看一下
在TVMLKit中
你要嵌入一個播放器
和一個播放區域在你的文件中
很可能 它會在一個lockup裏面
TVMLKit會幫你處理播放
你所需要做的所有事情就是
指定你希望的開始時間
所以你可以說它應該開始 或者
當包含的lockup得到關注的時候
抑或是一旦它出現在屏幕上的時候
你可以控制讓內嵌式視頻變成全屏播放
如果你有高級用戶案例
比如要用FairPlay進行加密
那麼你可以用JavaScript控制嵌入播放器
通過它的API
你可以實現這個
現在你可用TVMLKit內嵌式視頻只需要簡單的三個步驟
第一 配置模版
第二 設置
第三 你想要處理觸發切換全屏模式
讓我們再深入地看一下這些
我們已經將模版配置的非常直觀
我們在TVML中增加了一個新的元素稱爲mediaContent
你可以用它在lockup中包裹圖片
如果你想嵌入視頻的話
這會使lockup擁有一致的功能和外觀
在視頻播放開始之前
lockup裏面的圖片提供了邊界
視頻在其中播放
也可通過mediaContent的屬性來指定播放模式
一旦lockup得到了焦點或者當它出現在屏幕上時
或者是當它出現在屏幕
舉個例子
這是lockup
這是mediaContent
包含了lockup的圖片
圖片的寬度和高度
設置了視頻播放的邊界
第二步 配置播放器
現在mediaContent中的每一個元素
有着它自己的播放器
而且你可以用JavaScript控制播放器
只要查詢播放器功能
從mediaContent的DOMElement
在播放列表中配置你想嵌入的多媒體項目
這是一小段對應的代碼
請仔細注意
播放器的配置
和你們剛纔在演示中看到的沒什麼太大的區別
你創建了一個播放列表
添加了多媒體條目並在播放器中設置它
但是有兩點不同之處
第一
你不需要創建一個新的播放器
你只要使用內嵌播放器
第二
你需要提前就將它設置好而非等到用戶選擇lockup時纔去處理它
你在提前做了
實際上 在推送文件之前你就做了
這讓我想起了一個重點
爲了更好的用戶體驗
在推送文件之前 你必須設置好播放器
一旦文件被加載
你可以在任意時間改變播放列表
最後一步
轉換到全屏
值得注意的是
TVMLKit不會爲你觸發轉換
這是期望你們實現的靈活性之一
所以你需增加一個事件監聽器來選擇和播放
爲lockup
並且使用嵌入式播放器
來觸發轉換到全屏
舉個簡單的例子
這兒 我在選擇事件中已經增加了一個事件監聽器...
在文件中
我將從事件目標子樹獲取mediaContentElement
這將成爲lockup
因爲所有事件在lockup裏被分配
最後調用現有的
嵌入式播放器來觸發轉換
現在當你想做這件事情時你已經能完全勝任
但是通過菜單動作可以自動轉換回嵌入模式
就是那樣
通過這三個簡單的步驟
可以使你的應用的用戶界面
更逼真
但下一步會發生什麼？
當用戶已經在全屏模式會發生什麼呢？
他們在看你的內容
怎樣能使這個過程更有趣呢？
這引出了今天我想談論的第三個功能
讓你能完全地實現它
交互式視頻疊加層
在某種意義上 這和內嵌式視頻很相似
它讓你豐富你的內容
通過在頂層使用一個用戶界面
你可以用它來做很多事情
比如
你可以推薦更多的選項給用戶
使得他們能選擇選項 並且繼續觀看
你能讓他們瀏覽之前的廣告和片尾
給他們帶來完美的一口氣看完的體驗
或者你可以在內容的頂部實現應用內購買
當用戶沉浸在這個體驗中時
甚至當你實現
一些東西簡單的像
互動元數據 比如投影
讓你的內容變得更加引人入勝和具有互動性
與你已經看到的其它功能一樣實現起來是非常簡單的
你只需要使用任意一個模版來創建文件
將它設定在播放器中
TVMLKit會展示這個文件
當視頻全屏播放時
這是對應的代碼
在tvOS 10中我們給播放器添加了一個新的屬性
稱爲modalOverlayDocument
所以當你設置了文件的這個屬性
我們會在全屏視頻的頂部展現它
如果播放器已經在全屏模式下播放了
你的文件立即就會被展示了
但是如果播放器沒有在播放
或者說它是在嵌入模式下播放的
當視頻被全屏的時候它們就會被展示
所以這對你來說是非常方便的只要在任意你想要的時間設置它
好了 讓我們看一下演示
讓我們來實現你們剛纔在演示中看到的這些功能
爲了做它
讓我們歡迎Jeff上臺
Jeff
謝謝 Parry大家好 又見面了
我來給大家展示一下新東西
所以回到Apple TV
這就是我們剛纔給你們看的演示
現在讓我們回到主頁
進入到設置應用
進入外觀設置
將外觀設爲暗色
回到主頁
因爲我們是用Xcode 8創建的這個演示應用
我們在info.plist文件中可以設置
來支持自動的用戶界面工具欄
這意味着我們的演示應用
就會自動地支持工具欄的外觀
讓我們來看看這會長什麼樣子
看吧
我們的UI看起來是多麼漂亮
而且 不需要一行代碼就能實現
現在讓我們聊聊嵌入視頻
對於我們的演示我們想讓視頻
在lockup中自動地開始播放
正如Parry剛剛提過的那樣
需要三個步驟來實現這個
第一步是使用mediaContentElement這個標誌
第二步是配置內嵌式播放器
第三步是處理全屏播放
讓我們回到Xcode
進入到createLockup函數
不同於創建標準的圖片lockup
我現在要添加一個新的mediaContent元素標誌
用它來包裹我們的圖片
就是這樣這就是第一步
非常簡單
然後來到第二步
Parry剛纔也提到了
每一個mediaContent元素會內置
一個內嵌式播放器
所以我們要做的就是配置這些內嵌式播放器
配置對應的播放列表在我們展示文件之前
回到啓動功能
在我們展示這個文件之前
我需要調用一個我創建的函數 稱爲
configureMediaLockupElements
在這個函數內部
我們首先取出所有的mediaContent元素
從這個文件中
對於每一個mediaContentElement
和前面的演示類似
我們要創建一個新的mediaItem對象
一個新的播放列表對象包含我們的mediaItem對象
但是我們在這裏不創建一個新的播放器
我們使用getFeature函數
來獲取內嵌式播放器
然後在播放列表中設置好它
這就是第二步了
最後一步是處理全屏播放
我們來看一下playSelectedLockup這個函數
你應該記得它是從選擇和播放事件中觸發的
這些代碼我們都不需要把它們替換掉
首先從事件中提取lockup元素
再從lockup元素中提取mediaContent元素
使用getFeature函數來訪問內嵌式播放器
我們只要調用播放讓它變成全屏
看一下它的樣子
正如你看到的一樣 視頻現在會開始
在lockup裏面自動地播放
當我點擊lockup 你會切換
視頻到全屏模式
歡迎來到2015年Apple設計大獎
歡迎今晚大家的到來
非常酷的東西
你也可以按菜單鍵來退出全屏模式
這就是內嵌式視頻
我們想展示的下一個新功能是互動的視頻疊加
這個新功能能讓你把一個UI
置於視頻上 當視頻在播放時
在我們的演示中我們會展示一個列表包含
相關的視頻在播放視頻的頂部
回到Xcode
在playSelectedLockup函數中
調用我剛纔創建的一個函數
來創建一個疊加 函數名爲createInteractiveVideoOverlay
在這個函數內部
我們創建了另一個stackTemplate
只有一個shelf
在shelt裏面有多個lockup元素
我們改變一下stackTemplate的樣式
我們添加一個模糊的背景
頂部增加一些空白
這樣shelf會在播放器的底部
回到playSelectedLockup函數
創建了疊加文件之後
我們將它設置在播放器的新模態疊加文件屬性
這樣播放器就能對它進行展示
實際上 播放器會展示任意一個使用了這個屬性的TVMLKit文件
現在我們也能展示這個疊加了
當視頻處於全屏模式時
比如 我們可能會想展示
這個疊加 在視頻結束前30秒的時候
但是爲了這個演示 我們展示這個疊加
一旦視頻進入全屏模式所以我們在這裏調用它
讓我們運行一下
同樣 視頻會在lockup裏自動開始播放
當我把視頻切換到全屏模式你能在屏幕上看到疊加層
掌聲
而且這個疊加層還是能互動的所以你可以隨便移動它
在這個lockup裏面
這就是交互式的視頻疊加層
希望這個演示對大家有所幫助
謝謝大家
還給你 Parry
謝謝Jeff 多麼精彩的一個演示
讓我們快速回顧一下我們在演示中看到的內容
你們看到了亮色和暗色的外觀
能直接應用於TVMLKit應用
你們看到了利用三個簡單的步驟就能非常方便地嵌入視頻
最後 你們看到了一個長時間觀看體驗的例子
通過交互式視頻疊加層實現
到這裏
我想要總結一下我們今天學到的內容
有一件事情
我請大家離開一下這個演示文稿
就是這個
TVMLKit是一種非常簡單的創建TV上應用的方法
它給了你們本地化的體驗
看上去和用起來都像Apple應用
類似於Markup和JavaScript這樣的網頁技術
能讓你們快速開發應用
減少投放到市場的時間
利用這些新功能
和你們看到的TVMLKit
的例子
來編輯用戶界面
你可以把你的時間 金錢
和聰明的精力
放在功能和內容上
讓你的應用獨一無二和功能強大
我強烈建議大家去看一下開發者網站
瀏覽一下文檔和下載一些例子的代碼
那裏有大量的信息
我也推薦一些相關的會議
包括tvOS的新特性
特別是明天將要開的
是TVMLKit第二部分
我們會介紹如何混合你們自己的視圖
視圖控制器和TVMLKit中的JavaScript API
最後
我想要感謝大家
前來
希望大家在接下來的WWDC16 上有着很好的體驗
謝謝大家