神經網絡和加速
下午好 歡迎來到“加速”演講
我是Eric Bainville...
我是核心OS向量和數值團隊的一員
我們組提供對CPU性能優化的庫
優化性能的庫通常意味着我們要與底層的東西打交道
能提供大計算量的函數比如 求矩陣積
傅立葉變換 之類的
大多數這些函數被包括在Accelerate框架裏
我們有 像vImage一個用於圖像處理的庫
它能被用於類型轉換
也能用於對圖像的幾何變換
挨着vImage你們會看到vDSP
它主要被用於信號處理像傅立葉變換
和其它信號處理的用途
然後 我們有BLAS一個用於線性代數的庫
它已經很老了它創建於70年代
幾年前我們添加了SparseBLAS
用於向量和矩陣的稀疏計算
我們也在LinearAlgebra裏提供了LAPACK
一個用於線性代數的高級庫
在Accelerate之外我們還有一些庫
比如simd 它包含了一組標頭
能讓你們對向量指令和類型直接進行讀寫
但它們不會操控CPU的向量單元
它們介於中層和外層不會改寫彙編代碼
我們還在去年添加了compression
用於無損壓縮
對所支持的CPU我們爲所提供的技術進行了優化
所以 當你們拿到新手機我們爲它的代碼進行優化
這樣你們就不用爲此擔心了
好 那今天...
首先 我們來簡單地回顧下compression
然後 我們將介紹兩個在Accelerate裏新的庫
BNNS 它是一組用於神經網絡低級計算的函數
還有Quadrature
它是一個用於求函數數值積分的小型的庫
之後 我的同事Steve會上臺
介紹simd的新添項
好 首先 在我們開始之前
讓我向你們簡單介紹下Accelerate的使用
基於你們對語言的選擇
你們要用import或include導入函數的聲明
之後 你們要鏈接Accelerate框架
那從Xcode的你們的項目設置裏你們要瀏覽至
target然後點擊build phases
出現一個窗口
點擊Link Binary With Libraries
打開它
好的
點開這裏有個小加號的地方
你們會看到一個所有能被鏈接的庫和框架的列表
Accelerate在第一個
好的
那如果它不在第一個在上面有個搜索欄
若要找compression輸入compression
我知道compression一定會在裏面
好的 現你們就在使用Accelerate了
好
那compression...
記得當去年Sebastian
在平臺詳情諮文介紹LZFSE時
我們都不知道他們是誰
但今天我們要宣佈對LZFSE開源
你們可以在GitHub上找到它
我們以BSD許可的形式發佈它
讓我提一下 你們會想用它的理由
這些是平臺比較在LZFSE
和zlib之間 使用相同的選項
我們的編碼速度要快1.4倍解碼速度要快2.6倍
好的這就是我們的compression
現在讓我們來看下BNNS
“基礎神經網絡子程序”
這個名字看起來很像BLAS
BLAS是指“基礎線性代數子程序”
如我之前所提它起源於70年代
BNNS提供了一組低級計算例程
我稍後細說
我們只做低級計算
像求矩陣積 但針對於神經網絡
在我細講它的作用
和相關的API之前
讓我們來回顧下神經網絡
假設我們有這樣一個網絡
我們訓練了它去識別動物
那作爲輸入 你們有一個圖像
然後 你們有這個橘色的大框
在橘色的框裏這個紅色的框代表了權值
這些是這個網絡的參數
作爲輸出 我們有四個值
這些是相應的概率對於是一隻貓 一隻狗
一隻長頸鹿或一條蛇
好的　那首先你們要訓練它
假設你們有個貓的圖像
你們通過網絡處理這貓的圖像並得到一個答案
這是最高的概率它說是隻狗
呵呵 這就是你們需要訓練它的原因
事實上是隻貓 那你們要做的是
反向傳播正確答案
如果我稍許改動下權值 會怎麼樣
那現在這個網絡會稍偏向貓的方向
你們要使用大量的圖像做這個成千上萬次
在某一刻
你們會有一個訓練好的網絡能正確回答
每一個請求
如果是隻長頸鹿
它會說是隻長頸鹿因爲你們正確地訓練了它
好的　這就是神經網絡所能做的
注意訓練和推測的區別
在推測時 我們不改變權值
那一般來說 假設你們有這樣一個應用
你們要在線下做這些訓練
當你們創建應用時做你們的訓練
那當你們改動應用時你們要改動權值
和網絡拓撲
最後能讓它在設備上進行推測
好的那在這個橘色的框裏有些什麼？
讓我給你們個例子
若你們去了“Metal的新特性第二部分”演講
一個昨天的講座你們已經見過了個更大型的例子
一個場景識別網絡
和一個對笑臉識別網絡的展示
這都是些進階的網絡它們有成百上千的層面
這個是五年前最前沿的技術
它描述了一個百數位識別網絡
那作爲輸入你們有個小型的圖像
一個對手寫的捕捉
然後它被遞入各個層面
這裏你們有個5x5的卷積
輸出會是一個含五個圖像的堆棧
這個輸出是五個有着不同權值的卷積
然後 你們添加另一個層面
你們對這五個圖像應用更多的卷積
你們會得到一個更大的堆棧
包含五十個5x5像素的圖像
那這樣 你們從圖像空間
一層層地來到了特徵空間
這些小型圖像的內容變得越來越抽象
最後就只有特徵
那會告訴你們那是個零或那是個一
這是你們想要的輸出
好的
那通過使用少量的層面
你們可以達到目的並且效果還不錯
那在這些卷積之後我們把這些5x5x50的值
作爲一個大型的向量
對其應用一個全面連接層面
其實就是求個大型的矩陣積
它會將所有值混合然後輸出一組100個值
在這個模型裏 被稱爲隱藏層面
之後你們需要最後一步使這100個值
混合在一起然後產生10個你們你們想要的輸出
這裏 你們在計算未來空間
這裏的每個數值對應着成爲一個具體數字的概率
好的
這就是這個網絡的結構
如你們所見我們有兩個不同類別的層面
這正是我們在BNNS所實現的
我們提供對這些層面的計算部分
好　在我們開始討論計算
和相關API之前讓我向你們展示些數字
這裏我們將用Caffe作對比
它是一個知名的神經網絡計算程序包
這是Caffe有關卷積的部分
我們有14個不同卷積的大小
在這裏 你們可以看下
這是Caffe的處理時間...
這是速度所以值越高越好
通過Caffe處理這些卷積
這是你們用BNNS所得的結果
從平均來看 BNNS要快2.1倍
如果你們有更大的卷積
你們可以幾乎達到快4倍的速度
好的　這就是所有的數字
現在讓我來介紹下BNNS的構架
它是一個低級計算函數的集合
與BLAS十分相似這也是我們將其取名爲BNNS的原因
它並不知道什麼是神經網絡
這意味着那是你們要知道的事
它只提供計算的部分
並且它只執行推測
事實上
我覺得 在設備上運行訓練不合理
成本太高
你們會要有數以萬計的圖像和計算
這不會合適
那一般來說 推測會在線下完成如我所述
你們會在應用上執行推測
我們提供三個不同類別的層面
卷積層 池化層
和全面連接層
爲什麼？ 因爲...
實際上 在現代的網絡你們會花費百分之七十五的時間
於計算卷積
接下來是池化層
使用約百分之十五
全面連接層也會花費許多時間
但你們通常在網絡的末端看見它
像在例子裏見到的 只有兩個
在末端的全面連接層
但這還是要花費許多時間
好的　現在我們瞭解了構架
我將細講這三個不同類別的層面
和我們計算些什麼還有如何通過API來創建它們
讓我們從卷積層開始
這是一個卷積
它使用一個輸入圖像
一組權值 中間橘色的矩陣
然後輸出圖像裏的每一個像素
是通過計算對每一組輸入像素
與權值的的積
之後將結果相加得到你們上方的像素
你們要對每一個輸出像素執行上述步驟
那如果你數下這是個四維的循環
因爲你們要循環x和y
還有內核的維數
現實裏 要比上述更復雜些
因爲我們的輸入不僅是一個圖像
我們有一堆圖像
那我們要複製權值
並知道在每一層我們在計算此卷積
然後再將它們相加
獲取我們的輸出像素
那現在循環就是五維的了
我在公式裏添加了IC參數
這其實不是我們要計算的
因爲我們還要有個輸出堆棧
那實際上 我們在卷積裏是在做這樣的計算
我們重複這個多次每一次爲一個輸出層
那現在我們有個六維的循環
這意味着 即使每個維度都很小
像在這個例子裏我們沒有大於264的
這的確很小 但你們將它們相乘
你們會有幾十億的操作
這相當於幾十毫秒的計算量
那對大很多的整個網絡來講
你們會有數以兆計的浮點運算操作
這相當於幾秒的CPU時間
好的　一個在卷積層的計算
怎樣通過BNNS來實現？
那首先 你們要描述你們的輸入堆棧
你們要指定圖像的尺寸
通道數
還有在內存裏的分層
包括兩行之間的增量和兩層面間的增量
還有很重要的是
他們的儲存類型
舉例 我們使用32位浮點數或甚至64位浮點數
在神經網絡裏我們無需這樣的精確度
一般人們會用16位浮點數
那很好 因爲這會削減一半的儲存空間
那本來20兆字節 我們只需10
如果你們能用整數8位的整數
那你們只需5兆字節
同樣 一般你們的輸出也無需任何精確度
所以 你們可以使用與輸入相同的類型
你們需要對輸出堆棧作相同的設定
然後 你們要描述卷積自身
這包括內核的尺寸
對輸入的0填充
x和y在循環裏的增幅
還有 你們要重複
輸入和輸出的通道數還有權值
那是之前中間橘色的部分
列出權值 同樣你們可以設置不同的
儲存類型給權值
一般你們將其設定爲16位或8位
因爲那可以降低內存使用和儲存空間
當你們完成了這些
你們能用這個函數來創建卷積篩選器
你們告訴它 這是我的輸入堆棧
那是我的輸出堆棧那是我的卷積 創建一個篩選器
你會獲取一個篩選器對象然後用它
對你們的數據應用卷積
在你們使用完它之後
你們調用銷燬篩選器
來移除它並釋放資源
以上就是關於卷積層的內容
現在 讓我們來看下池化層
池化要比卷積簡單些
要計算一個輸出像素
你們要使用一組輸入像素
然後取最大的平均值
這就是你們的結果
你們要對所有通道的所有像素重複這樣的計算
這就是這公式所形容的
同樣 爲池化層創建一個篩選器
你們要描述輸入和輸出堆棧
與之前一樣你們也要描述
池化層自身
同樣 包括內核尺寸 填充 增幅
這裏沒有權值
那要使用哪個函數來計算輸出
使用最大平均
在你們完成這些後你們就可以創建篩選器
獲得一個和之前相似的篩選器對象
最後我們支持的層面是全面連接層
它儘管被稱爲全面連接層這裏有個隱藏的矩陣積
作爲輸入你們有一個向量然後你們要將它與一個矩陣相乘
加入向量偏量然後獲取你們的輸出
就是求個矩陣的積
這裏 你們的向量裏沒有圖像
所以 你們要描述向量 它的大小
與數據對應並且你們要指定使用的類型
用於儲存這些值 你們可以使用32或16位浮點數或整數
然後你們要通過矩陣的尺寸來描述這個層面自身
和矩陣的係數
偏量不在演示稿裏但你們有偏量
之後 你們可以創建一個卷積篩選器
同樣與之前的篩選器相似
接下來是怎樣應用篩選器
你們將輸入數據當作輸出數據
和你們的篩選器你們有兩個應用它們的函數
叫作篩選器應用如果你們只有一對輸入和輸出
如果你們有很多對
你們要調用篩選器批量應用
你們告訴它對數
並且怎樣從一對到另一對
就是怎樣在內存裏邁進
好的 這些就是關於BNNS的內容讓我們總結下
BNNS是一組針對神經網絡計算的低級函數
很低　我們着重於計算我們完善它
我們提高它的處理速度
但它不知道什麼是神經網絡
它只針對於計算
我們優化它讓它變得更快 更省能源
最主要的是他支持各種數據類型
以上就是BNNS的內容
接下來 Quadrature
我們收到請求...
許多人要我們開發一個用於求數值積分的庫
那 這就是
好 那還記得你們在學校裏學的
它能計算一個函數在區間a b上的積分
也就是在曲線和軸之間綠色的部分
那要使用這個你們首先要描述函數
你們要提供一個回調
我們做的改動之一與之前的
舊的庫裏不一樣的是
回調接收一組點並求值
通常當你們計算積分
你們要在許多點上計算函數值
如果你們有一個向量化的回調能提高速度 那很好
你們可以使其更快通過使用這個多x的回調
它會通過x遞給你們多個值
你們填入每一個對應的y的值通過計算f(xi)
這就是你們的函數然後要告訴它如何計算積分
那我們提供了三個計算積分的方法
它們有不同的的複雜度和運行時間
有些還可以積分至無限
你們可以在Quadrature標頭找到更多的細節
你們也要指定輸出的誤差
和細分區間的最大數量
用於計算結果
然後你們將它遞入integrate函數
你們還要告訴函數 a和b
你們也要遞入一個點用於接收誤差
它被稱爲估計誤差
它會在結果裏返回估計誤差
和狀態我們接受計算的狀態
因爲如果你要求一個很低的誤差
有時無法被轉換
那我們可以在狀態裏看到
這就是Quadrature所有內容
現在讓我請Steve上臺
他會來講下關於simd的新添項
十分感謝 Eric
我是Steve Canon
我與Eric一起在向量與數值團隊工作
Eric剛纔將你們帶回了學微積分的日子裏
我現在將帶你們前進些
來到線性代數
我們有這樣一個很有用的模塊叫simd
它能提供幾何操作和向量操作
針對C、Objective-C、C++和Swift
它很好地對應了Metal着色語言
它能與SceneKit和Model I/O緊密結合
還有各種圖形的庫
如果你們在寫向量相關的代碼來執行
小型的3x3、4x4之類的線性代數的操作
這個庫就是你們想要的你們就不用去自己寫了
我們有大部分你們想要的
如果沒有 可以請求我們添加它
它十分的快 讓我們來細看
那有些什麼？
我們有一大堆類型
有浮點數的向量和雙精確度的向量
有帶符號和不帶符號的整數像2、3和4
我們還有相同尺寸的浮點數和雙精確度的矩陣
這些只是在所有語言裏都有的
在C、C++和Objective-C裏
還有其它許多類型
那些會對你們寫自己泛型的向量代碼很有用
但我將着重於共有的子集
在所有的語言裏和平臺上在今天的講座裏
顯然 我們還有類型相關的操作
有一般的算術操作
用於向量和矩陣
還有我們所熟悉的幾何和着色函數
若你們有過任何着色編程的經驗
大多數你們想用的 這裏都有
我現在來展示個小型的例子
這是一個相同的函數被用三種語言編寫
有Objective-C在最上面有C++在中間
Swift在底部
你們可以看到模版
在各個語言之間有些不同
只是因爲函數聲明在這些語言之間有所不同
但如果我們注意實際計算的部分
在各語言裏 基本上都一樣
同時 它也很對應
你們在數學裏表達的方式
不會有許多奇怪的函數調用
你們也不用寫for循環之類的
你們能自然流暢地寫你們的代碼
我們替你們翻譯
編寫變得友好和簡單
這用Metal代碼寫看起來也一樣
那這裏湊巧已經有了reflect函數
在庫裏面
那你們就不用自己編寫了
在各種語言之間調用函數像很多在model I/O裏的
能通過使用接受這些類型的Objective-C API
很不錯
向量類型是編譯器的擴展
在C、Objective-C和C++裏
在Swift裏它們被定義爲structs
但編譯器知道如何爲你們映射它們
所以 你們根本不用做任何事
這裏有個簡單的例子
若我有個Objective-C的函數
我在這裏調用某個對向量類型執行操作的函數
並且我想調用那個函數
通過Swift使用Swift向量類型
我可以成功的這麼做
我無需做任何進階的事
這些類型都有相同的佈局
所以 沒有轉換開銷之類的
相似的 對於矩陣
Swift的矩陣類型佈局和
C、Objective-C和C++類型相匹配
那如果我要使用它們這裏我有Swift
我來創建一個Swift的類型通過C的類型
我所要做的就是使用init函數
很好用
沒有任何的計算開銷
就好像 不知不覺地改變了類型
相似的 我可以使用C的矩陣屬性
如果我要通過C的類型調用C或Objective-C或C++的函數
我們今年有些新的東西我想向你們展示
我們有三個新的函數
simd orient和simd incircle還有simd insphere
它們已被重載爲支持許多不一樣的類型
和不同的長度 之類的
基本上所有在simd庫裏的都這樣
所以 僅管我們只有三個新函數
實際上 有許多新東西
我會從orient開始講
orient讓我們回答這樣的問題：
一組向量是否都朝向正面？
如果你們不記得線性代數意思是
它們是否遵循右手螺旋法則？
你們可能記得在物理裏見過它
或 相等同的是否有正值的行列式？
如果在座的有數學專業的你們現在會抗議
一組向量是沒有行列式的
我的意思是你們把它們
放到一個矩陣裏
計算矩陣的行列式
是不是正的？
那我們爲什麼關心這個？
這很明顯
你們能用這回答許多計算幾何的問題
會很有用
比如 這個三角形是面朝我還是背朝我？
如果你們想象個四面體
有兩個面朝着你們
也有兩個面揹着你們
如果你們在進行圖形操作
知道面朝你們的面會是很有用的
因爲那些是你們要處理的面
相似的 如果我有一個點和一條線我想回答這樣個問題
點在不在線上或 如果不在 那它在線的哪側？
我能用orient判斷去回答那個問題
那 這看起來很簡單的樣子的確很簡單
除了實際回答這個問題可能會很難
當點離線很近時我們會在下面細說
這裏有個這樣的例子
在顯示的右側 我有個平面
我會在平面上加些點
我有三個點a和b還有c
我將使用的simd orient查詢它們的朝向
由於我們是通過逆時針的方向
從a到b到c
我們說它們是正朝向
這是在平面裏對正朝向的定義
如果我們移動其中一點變成順時針方向
現在就是負朝向了
那如果我移動點c讓它正好在a和b之間的線上
那它們共線 朝向是0
或許 你們會說它是虛的
判定點是否正好在線上一般是件很難的事
特別是利用浮點數的座標
因爲朝向數值的不穩定性
由於浮點數的取捨
如果行列式的結果接近0
你們很有可能得到一個錯誤的符號
對於一些算法來說這無關緊要
但對於其它算法你們可能會遇到無法收斂的情況
或 當使用它時你們也許會獲得錯誤的的結果
像在碰撞檢測之類的情況裏
能回答這個問題變得很重要
還有像使用三角網格建立模型之類的
這會是個重要的問題要求有準確的答案
讓我們來看個難回答的例子
我在平面裏建立兩個向量u和v
它們幾乎相同
它們只有一點點的不同
我在右側將它們放大了很多倍
那樣你們能看見它們的不同
如果我將它們按真實比例來畫它們會全部重疊
如果我們用通常的方式來計算朝向
我們會得到結果0因爲浮點數的取捨
這是個簡單的結果爲0的例子
如果維度大於2x2
我們會得到一個完全錯誤的符號
不只是結果爲0當它不應該是0時
但若我們使用simd orient函數
我們會得到一個很小的正數
是正確的結果這些是正朝向的
我要提醒的是不要詮釋
這個極小的正數對任何情況都有意義
這不是一個行列式的值
有時候是行列式的值
但有時只是有個準確的符號
所以 我們這裏真正關心的是這個數字的符號
那我們是怎麼做到的？
這些我今天像你們展示的幾何判定
都是使用自適應精度
我們計算至我們需要的位
來獲取正確的結果
這讓我們在大部分的時候能很快返回正確的結果
但如果我們要進一步
進行精確的計算爲你們取得正確的結果
我們也可以這麼做
你們可以相信這在你們代碼裏會給出正確答案
你們不用擔心
Incircle很相似
我們在平面裏取三點
那決定一個圓
你們會注意到它們是 正朝向的
圍着圓　這很重要
如果我在圓里加個點 x
然後simd incircle能告訴我點是否在圓內
如在圓內 我得到個正值
如在圓上 我得到0
如在圓外 我得到個負值
insphere也是相同的
只是現在是三維的了
我需要四個維度來定義球體
我設定點x然後得到相應的結果
我向你們展示一個之前提過的例子
判斷一個三角形的面是正對還是背對着你們
這裏我有個簡單的struct用來在Swift裏代表三角形
三角形由三個點定義我把它們放一個集合裏
我用這個判定IsFacing來告訴我
三角形是否面對相機
那通常你們的計算方式是
運用叉乘積來計算一個對三角形面的法向量
然後計算它與對着相機的向量的點積
如果值爲正那三角形正對着相機
我們可以簡化這些代碼並準確計算結果
通過使用simd orient判定
那我的代碼變簡單了
它很快 還能給我正確的答案
這都是我想要的
這就是我們嘗試着在Accelerate實現的
給予你們簡單的東西
用於複雜的數學計算
那我們今天向你們展示了許多新的東西
我們有些全新的庫
我們有BNNS用於神經網絡
我們有Quadrature
我們還有些新的功能
simd裏的orientation和incircle
這每一個新功能和庫
都是爲迴應開發者的需求所添加的
所以 我們很想知道你們所想要的
通過我們能添加的東西能簡化你們的計算工作
我們想給予你們簡單的接口
它能讓你們有效率地完成你們要做的事
我們今年還做了許多其它的事
在vImage裏Eric在簡介裏帶過的
我們有一組全套的幾何操作用於交叉存取的色度平面
這絕對是最頻繁的請求
我們在近年裏所收到的
所以 我們很樂意地添加了它
如果你們不知道那是什麼無需擔心
但如果你們知道那你們會明白它的有用之處
我們還擴展了
vImage裏的轉換例程用於新的格式
這爲許多你們或許聽說過的關於深色的東西奠定了基礎
所以這個對那來說很重要
我們提高了性能
針對vDSP裏的交織複雜格式
通過FFT 我們支持交織和截面佈局
複雜和虛的部分
要麼被分開 要麼放在一起
我們一般使用截面佈局進行操作
我們推薦這麼做但如果你們只有交織的數據
你們現在可以使用FFT它們很快
我們也提高了所有Level II BLAS操作性能
有些是由你們所見到的BNNS員工發起的
有些是我們所預見並跟進的機會
Accelerate裏還有許多新的東西
許多改進了的東西
每當有新處理器發佈我們一定會針對它們進行優化
我們想解決所有的那些低級計算細節
讓你們能注重於編寫高級算法
基於低級細節層面
讓你們能達成你們想做的
總結下我們想成爲你們一站式購物的地方
爲計算的算法
我們能提供給你們的實現是準確
快速和節省能源的
並且我們會針對新硬件進行優化
當它們發佈時這樣你們就不用爲此擔心
如果你們想自己優化那我們有了新的芯片
你們就需要對其更新
如果你們交給我們來處理
那你們就不用擔心了
繼續提交你們的請求我們很高興能收到它們
我們今天在實驗室和你們許多人交談了
我們已經得到了許多將來的請求
能將雷達歸檔我們想要這個功能
如果你們想見到更多相關信息這個講座的連接在這裏
我也推薦你們去看下前幾年的講座
有關於這些庫的其它方面有用的細節
有兩個很好的關於Metal的演講
我高度推薦你們去看下昨天的演講
特別是如果你們對這些感興趣的話
十分感謝你們的到來