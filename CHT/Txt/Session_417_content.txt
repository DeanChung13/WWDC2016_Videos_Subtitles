調試要訣和技巧
大家下午好歡迎參加“調試要訣和技巧”演講
看到這麼多人來參加這個主題演講我感到很欣慰
很激動
我叫Kate Stone
我是Apple調試技術核心團隊的組長
非常激動
我希望能從我們的團隊中請幾名工程師
講一些新鮮事兒如果你剛開始着手的話
還有一些比較新鮮的小技巧
即使你已經在你自己的平臺上做了十年的調試工作 你仍然還會覺得新鮮
這真的是個深水區我們有很多內容要講
讓我們開始吧
特別注意我們要講的技術就是LLDB
若你用Xcode做過調試你可能沒注意過
後臺有一個叫做LLDB的技術
這是一個底層調試工具支持所有核心技術
不僅僅存在於Xcode中只要你需要 它無處不在
但是 當然了 你跟它打交道最多的地方之一
是Xcode的調試控制檯
Xcode把那個控制檯作爲調試區的一個部分
你將看到可視化的變量同時也會看到這個LLDB控制檯
我們今天要講的內容很多
在那個提示框中你可以獲得提示和一些很棒的東西
當然 那個區域通常不只是包含
LLDB的提示框以及與調試器交互
還包含你應用的輸出
若是基於控制檯的應用 還可以鍵入
那也許不是最便捷的方式
如果你的應用利用了控制檯的其他功能
如移動指針或色彩或其他ANSI指針操作功能
那麼 在Xcode 8中有個新選項
允許你給你的應用分配獨立終端
而LLDB仍留在Xcode中
用起來很簡單 提出了選擇方案
並且在最底部的選項標籤中你能看到這個新控制檯
你可以從默認切換到Xcode和終端
然後 當你運行時你將得到一個獨立終端
用於處理應用的輸入和輸出與Xcode是分離的
接下來的演講 我們主要講LLDB
若你對Xcode其它具體功能感興趣
請查看這兩場演講的相關信息
當然 演講已結束但是你們可以看一下視頻
你還要注意 LLDB不只是Xcode的一部分
而Swift REPL其實就是LLDB
當你打開Swift REPL並開始跟它交互時
你就已經在調試環境中了
因此 無論什麼時候你需要調試器它都在那兒
事實上 我們今天要講的每個命令
你都能在REPL中直接使用
只需要在REPL的提示框中加個冒號前綴即可
先是冒號 然後是命令 這樣就能直接在LLDB中發出命令了
比如我現在Swift REPL提示框
此刻 我想查找某類型的信息
當然 我可以打開Xcode並查看幫助
但是在提示框中
我可以簡單地使用：type lookup Comparable
我要查找這個協議 我發現事實上
它是從另一個協議衍生出來的添加了以下四個函數
如果你熟悉並且一直在使用類型查找它是個很棒的功能
但你可能不會注意這一點儘管它的名字是類型查找
它實際上可以用來查找更多的東西
實際上我可以查找函數得到完整的簽名
甚至可以查找整個模塊
當然了 內容會很多
因爲它是那個模塊中每個類型的完整說明
在這裏 我們把它簡化了
那麼 REPL可以很好地處理這種附加的命令
還可以用來與你在REPL中寫的代碼進行交互
假如我寫一個簡單的函數
我寫好了一個函數當我在函數中時 我想停止
查看某一行正在發生什麼
那麼我可以發佈斷點命令
加一個冒號前綴 ：b 2
我在第二行設置了一個斷點
當我調用這個函數時 正如我所期待的那樣停止了
因爲執行已經停止了它會立即切回LLDB提示框
在LLDB提示框中
我可以發佈其他LLDB命令進行交互並探測我的應用
REPL還將自動進行這些操作如果你遇到溢出的情況
或一般會終止你應用的其他東西
所以 你可以直接從Swift REPL中
利用調試器的全部功能
你還要注意 你可以隨時在兩個提示框之間切換
如果你在REPL提示框中
只寫一個冒號 然後按Enter將打開LLDB提示框
而REPL命令將切回REPL提示框
這樣 你可以隨時使用這兩個提示框
REPL有一些不同的特點
可能更適用於調試Swift代碼時
的調試會話中
這很棒
這是大多數人跟LLDB互動的主要方式
但LLDB還是個獨立的命令行工具
如果我要遠程連接到一臺機器的命令窗口 很奇妙
我的連接很慢
我非常想利用命令行工具
但在其它環境下也很有用
你可能想用它來 比如說如果你正在自動化調試任務
我想把調試器設置成每次開啓時加載的命令都一樣
所以我可能要提供
一個包含一大堆LLDB命令的文件用於進行配置
LLDB -- source後邊跟一個文件名
這將調用LLDB並source所有命令
按照我想要的方式設置調試會話
如果你不想陷入設置文件的麻煩中
你可以調用LLDB然後直接在命令行上寫命令
-one-line接着是命令
只要我啓動LLDB 就會發出命令
如果我想附加命令
我可以在這裏重複option的簡化形式
-o後邊跟着另一個命令可以重複無數次
所以 在自動化腳本中把LLDB設置成
我所期待的方式非常瑣碎
當然 這也非常有價值
如果我有一個應用只有百分之一的錯誤率
是一個竟用條件我想一次次地運行同樣的調試順序
我也有個特殊選項可以實現
LLDB -- batch啓動批處理模式
那將執行我提供的指令從單行命令或從文件中獲得
並且假設我的應用正常運行然後正常退出
如果應用崩潰
它會在LLDB提示框中停止我可以查找問題所在
當然 我可以用其他窗口命令把它打包
無限重複那一系列動作
或者至少直到應用崩潰並且我也準備好調查問題了
LLDB有大量的選項
如果你之前沒有看過LLDB -- help
我建議你看一看 幫助文檔中描述了這些選項以及更多的內容
我要在這裏介紹一個非常有趣的概念
這可能是整場演講中最無關緊要的事了
那麼 如果你打算忘記某張幻燈片請從這張開始
因爲它大部分是透明的你可能沒注意到效果
我還想要介紹一些微妙的地方
從Xcode 8開始
LLDB已經從Xcode的程序中完全分離
它對你完全透明
你按照你一般的調試方式開始調試
支持多個不同的調試器版本
它會自動爲你選擇
因此 如果我要調試Swift 3我會得到最新的調試器
有我們在這場演講中介紹的所有功能
其實若我使用純C++或Objective C 也是一樣的
我會得到最新的調試器擁有我們在這裏講的所有功能
另一方面如果我調試Swift 2.3
我將得到一個調試器
其實是跟我們今年早些時候發佈Xcode 7.3.1時一起發佈的
意思是 有些新命令不可用
但我們支持自Swift編譯器時代的全部調試器
但最重要的是
如果你是我們開源社區中的一員
你可以使用調試器進行調試
該調試器與你正使用的開源Swift匹配
因此 如果你下載正在開發中的快照
或如果你開始添加代碼
那麼調試器會立即可用
你可以使用那個
同時調試在Swift 3或Swift 2.3中寫的程序
一切都是完全透明的
有一個額外的好處：
如果LLDB陷入了一個不能繼續的情況
它需要關閉調試會話
調試會話將會被終止
LLDB可以優雅地退出而Xcode將繼續運行
說起如何利用LLDB這個強大的工具
以及如何自定義你的體驗我要邀請我們的一位工程師上臺
Enrico Granata
謝謝Kate 大家好
對於LLDB我最看好的是調試器的定製性
開啓調試器定製技術不僅能收穫很大的樂趣
還能讓你在調試應用的過程中
獲得令人驚歎的效率
LLDB提供許多切入點你可以進行自定義
你可以從命令別名開始
然後以你的方式定製命令或定製數據格式化程序
在Xcode 8中我們有一個新的擴展點
階梯效應
考慮階梯效應的方式是你想讓下一行命令做什麼？
你想讓階梯命令做什麼？
但你是否發現你自己想要以一種或兩種方式隨處
調整它的行爲？
通過階梯效應 你全部可以實現
但使LLDB...自定義LLDB滿足你需求的最簡單方式
是創建一個命令別名
這種方式需要取一段你頻繁使用的
調試器語句
並給它附上一段短語句
現在 在Xcode 8中你還可以附上幫助文本
這樣可以達到你自己的或跟你一起分享
那些別名的人目的
可以幫你記住別名是幹什麼用的
讓我們來看個例子
首先 要創建別名從command alias命令起
然後 正如我剛說過的你可以附上幫助文本
你提供給我們一段短語句
然後給我們一個你想要替換的完整的調試器命令
shell現在就是個正常的調試器命令
跟我們內建的其他命令一樣
你可以 比如 help shell
它會顯示那些你定義的幫助文本
在這些情況下 調試變得有些粗糙
你可能在查找漏洞時忘記你自己是誰
你可以要求調試器提醒你的身份
它會像這樣通知你 我是Enrico
這很棒 但如果你想做一些更高級的事兒
而不僅僅是給現有命令附上一個新名稱
我們還公佈了一Python API
這是一個有相當廣泛選項的模型
可以讓你按照你的意願綁定調試器
相當容易上手
我們在之前的WWDC演講中曾詳細闡述過這個工具
你可以看一下在線視頻
我們有個網站 裏面有文檔和示例
你可以在線搜索一下
有一個社區在LLDB腳本處理方面
做得很棒
讓我們快速地看一個例子
假如 我想要一個命令可以讓我檢索
調試時退出的最後一個函數的返回值
這裏有一些注意事項
這個命令只有在你執行完函數並且之後不再執行任何
階梯效應後才起作用
你可以鍵入表達式你可以查看變量
只要不單步跳過就沒問題
讓我們快速看一個例子
你導入一個包含那個命令的文件
然後 正如我所說的執行完函數
就能看到返回值
好的 很棒
這是默認的 不需要自定義
但是 比如說 如果我鍵入回溯
這是個冗餘的回溯
現在 我不記得返回值在哪兒了
好的 我會進入終端嘗試把它挖掘出來
但是很幸運
我們實際上可以寫一個命令告訴我們答案
從而再次得到返回值
這就是再次得到返回值要做的所有工作
另外 不要再擔心讀取那個值了
它會一直在那兒
另一方面 你看到那是個文本
現在你可以鍵入你的別名shell鍵入文本
你會發現你自己鍵入這些內容
是因爲每次你開始調試時它們都很棒
你會一次一次再一次地鍵入它們
直到你變成一隻會打字的猴子你要做的就是鍵入這些內容
不 我要說不
我要說不要再讓你自己重複鍵入了
完全沒必要
LLDB有一個初始化文件
叫做.llbdinit就在你的主文件夾中
如果你需要LLDB做一些特別的事一些不同的事
在Xcode下啓動或終端下啓動時
有一個.llbdinit -Xcode文件
當在Xcode下的調試器中啓動時很好用
還有一個訣竅
如果你需要在調試器啓動時帶有Python命令
請不要把它們鍵入.llbdinit中
而是要把它們放在一個.py文件中然後source該.py文件
在.llbdinit中導入命令腳本
如果你們用過LLDB
你很可能非常熟悉p和po命令
這些是很不錯的命令
可以查找數據因爲它們是完全表達式
它們有你編寫應用所使用的語言的全部功能
你可以在調試器控制檯上使用
另外 強大的功能伴隨着重大的責任
這些命令在你的目標進程中運行代碼
它們可能會導致一些副作用
有時候 幾乎不可能
在你當前停止的點上運行代碼
如果p運行了一次代碼那麼po實際上將運行兩次代碼
因爲它不僅會評估你提供的表達式
還會評估代碼
以便以一種作者可定製的方式
打印你的自定義類型
這種方式很棒 如果作者給他們的類型完全按照你想要的方式
定製了顯示
如果你沒那麼幸運
p命令提供另一種變量視角
可能更接近你想要的
同時po是一個運行兩次的命令
在編碼你的目標進程時也很可能會產生副作用
如果你擔心這個問題
我們有另一個查看變量的命令frame variable
這是個可預見的命令它不會運行任何代碼
另一方面
因爲它沒有運行代碼的能力
它提供的語句也極其有限
現在有很多方法可以查看數據
但是劇透一下 在Xcode 8中我們有更多方式來實現
有兩種新方式分別是parray和poarray
是的 你說對了 聽起來像p和po
但它們可以專門處理數組
它們如何專門處理數組？
嗯
如果你在Objective C或Swift數組中用過NS數組
你習慣於安全容器該容器知道包含了多少東西
C指針並不能瞭解這個信息
C指針並不包含某種電量模塊
它們不知道要指向多少元素
那麼 當我們像在這個調試器中打印C指針時
我們所能瞭解的只是指針的值
但現在我們知道它指向一羣元素
所以我們可以開始打印第一個
打印第二個
繼續依次打印 現在我們又變成那隻打字的小猴子了
我們並不想這樣
嗯
在Xcode 8中 你可以這樣處理parray 元素個數 指針
這會擴展指針
就像指定元素個數的一個數組一樣
謝謝 謝謝
這個方案已經很好了 但我爲什麼要猜測元素個數呢？
它就在那兒 個數就在那兒
我真正想要的是能鍵入parray個數 數據集
幾乎就要實現了
我要做的就是把count放在倒引號中
那個倒引號是個常用的LLDB語法功能
可以讓你取出表達式並進行評估
然後在執行命令之前 在命令中替換那個表達式的值
現在 我已經顯示出了完整的數組
謝謝大家
而po也一樣
poarray 元素個數
指針 然後我得到了po式的對象描述
在po的話題上
我確定你們可以寫Objective C代碼
我確定有不少人
就是那樣實現的很可能沒有認真思考過
你取出po 鍵入po
接着是一個數字恰巧你知道是個指針值
然後你取回一個非常漂亮的描述
你在Swift中嘗試做同樣的事你取回的只是個數字
爲什麼？怎麼回事？
嗯 我確定你不止一次聽過這樣的事
但我再說一次
Swift是一種比Objective C類型更安全的語言
我們不能假設數字是任意對象
因爲並不是所有的Swift對象都關聯着一個指針值
那麼當我們po一個數字時我們會得到數字
好的 這很棒 但拜託我知道那兒有個對象
剛剛已經顯示出來了
有一種方式可以實現
就是這個
看起來有很多詞 我知道
但它實際上...聽我講
expr -O的意思是po
如果你在LLDB控制檯中鍵入help po
它將告訴你那是expr -O的一個別名
那麼我們實際上在這裏鍵入的是
po這個東西 就像我們在Objective C代碼中做的那樣
這樣 我們實際上會得到我們想要的描述
這很棒
在一個實際檢驗內存地址相關的主題上
並嘗試搞清楚它們的
底層調試
關於底層調試如果你只記得一件事
那就是離它越遠越好
不要碰底層調試
很不幸的是 有時候你必須得碰
也許你要調試只存在於你應用發佈版本中
優化代碼的東西
我有時候會遇到這種情況
或者你要調試第三方代碼而你沒有任何調試信息
如果出現以上任意一種情況
那麼請聽我講 在這段旅程中我們將穿越赫丘利斯之柱
但請注意 在這段旅程中如要前行 風險自擔
就像這樣開始
去年 有一位先生來到我的實驗室
拿着他的筆記本電腦讓我看那種狀態下的Xcode
在Objc msgSend中崩潰了
他給我講了一個故事
我在商店中有個應用很棒
然後 我的框架供應商對我說
“嘿 我的框架有新版本了更新一下吧 沒問題的 ”
我就更新了 我聽了他的話然後現在 我的應用一啓動就崩潰
我該怎麼做 請幫幫我
然後 我們坐下來 我告訴他說“嗯 我們幾乎都不瞭解情況
但有一件事我們可以做...就是開始讀取機器寄存器”
LLDB有一個功能可以實現讀取寄存器
它允許你查看所有寄存器其中只有一小部分寄存器
甚至會允許你進行自定義格式化
它是什麼樣的呢？
鍵入register read
你將得到你的寄存器的值
這裏有很多寄存器
那麼 我爲什麼要關心屏幕上所有這些怪異的數字和文字呢？
嗯 你一定要關心
因爲參數通常是在寄存器中進行傳遞的
好的 很好玩兒但寄存器也太多了
我如何瞭解實際上哪個比較重要呢？
這個問題要問你平臺應用的二進制ABI接口
：convention會提供一些規則
但LLDB還提供
便捷的僞寄存器的命名像$arg1 $arg2等等
適用於參數爲簡單計數器的情況
或指針類型
實際上寄存器和參數是一一對應的
在C陣營表達式中也有類似的便捷方式
比如說
如果我有個函數讀取這三個參數然後我調用函數
這些參數實際上將一對一映射爲$arg1 $arg2和$arg3
好的 這符合我們的情況
在Objc msgSend中我們開始讀取參數
第一個參數是指針 0 X 4 D 2
第二個參數是選擇器符字符緊接着一個附加字符
我們恰巧知道ObjcmsgSends的第一個參數
是我們嘗試與對象進行通訊的參數
第二個參數是我們嘗試要發送的選擇符
且我們還可使用memory read命令
來查看我們要通訊的那個對象到底怎麼了
原來那是個不好的對象
實際情況是
我們在一個壞的對象上調用這個選擇符
我們是如何變成這樣的呢？
嗯 在Objc msgSend中崩潰了
有東西調用了Objc msgSend有東西調用了那個調用Objc msgSend的東西
以此類推
直到我們到達應用的切入點
在LLDB中 我們從最小的框架0開始調用
一直到最大的框架N
並且 如果你想移動到某個框架
你可以使用up命令
返回到堆棧上的一個編號較大的框架
down命令可以返回到編號較小的框架
另一個需要了解的是disassemble命令
可以讓你反彙編一個函數
你可以用在當前函數、任意框架、
地址、函數名稱上
你可以自定義反彙編的顯示方式
在某些情況下 它會在有源代碼
和調試信息的地方執行調試
但如果你想比較這些指令和機器指令
你還可以讓LLDB總是隨着源代碼一起顯示反彙編
那麼在我們的例子中
我們在那兒崩潰了 我們可以看到誰調用了函數
是一個啓動完成的應用
讓我們快速看一眼那個函數正在做什麼
那個函數正在調用這個初始化程序
框架供應商告訴我們 “是的編碼那個初始化程序getGlobalToken”
它正在來回來去地填充東西
然後調用Objc msgSend我們就崩潰了
那麼我們可以單步跳過機器編碼並查看這些調用實際上是在做什麼
首先 我們單步跳過getGlobalToken調用
然後我要做個弊
我恰巧知道寄存器叫做rax
包含那個函數的返回值
若我讀取這個函數返回值
我只能得到不正確的指針值
有意思
讓我們再做幾次單步跳過
不 並沒有修改它 並沒有修改它
我們正在做的是取出那個指針值不做任何修改
並把它移動到rdi中
然後調用Objc msgSend
我在想是否關聯？
如果我在這時候在進入Objc msgSend之前
reg read $arg1
rdi是不正確的指針值
我們證明瞭什麼呢？
我們證明瞭getGlobalToken函數
就是我們的框架供應商非常激動地讓我們調用的函數
實際上給我們返回了一個不正確的對象
一嘗試給那個不正確的對象發送消息
就會收到一個大驚喜我們的應用就會崩潰
最後驗證了我們的情況後
輕輕拍了拍我們的背
接着有請Sean Callanan上臺
他會講解表達式解析器相關的新特性 謝謝
不覺得神奇嗎？
感覺像魔術一樣
你的程序只是把數據以數字、數字數組
的方式進行存儲
但你可以用LLDB這個強大的工具
以你想要的方式來表現數據
有時候
並不是隻看數字和判斷是什麼數據
那麼容易
有時候你需要使用表達式解析器
Enrico已經展示了
表達式解析器在一般情況下的命令語句
但是它還有好多功能
表達式解析器的工作是跟你的程序和SDK一起運行
在你當前的斷點上
表達式解析器通過變形數據來得到你想要
實際檢測的數據
我說過程序和SDK是一起運行的
回憶一下前幾年的情況SDK在LLDB中運行
並不總是那麼容易
那麼比如說 如果你在Objective C程序上斷點了
你嘗試獲取程序的撤銷管理器
你很可能會得到至少一次或兩次煩人的報錯
這跟你正在嘗試做的完全無關
真是莫名其妙
但是去年我們就講了一個解決方式
如果你手動導入AppKit
那麼你的表達式就能起作用了
好吧 但是我們爲什麼要這麼做呢？它已經在那兒了
我都能聽見你在哀嚎
並非只有你一個人遇到這種情況
因此今年我們考慮如何使這個方式變得更好
效果非常明顯
我們查看了當前源文件導入的那個模塊
然後就自動導入
不再需要手動導入了
很酷
我們可以更有效地擺脫手動實現方式
非常棒 但我們認爲這是一個很強大的工具
讓我來講一下這個工具的一些不錯的功能
現在 有時候 這種便捷可能會阻礙你的開發
你實際上想手動地導入你想要的東西
有個功能可以實現
有一個設置你可以禁用自動導入功能
然後你就能使用去年的老功能了
我們認爲你一定會喜歡上這個功能它的默認狀態爲開啓
很好
現在 讓我們談談如何通過重用代碼
有效地使用表達式解析器
重用代碼最簡單的情況是重用變量
請記住 我說過你可能需要做多級表達式
從你當前位置獲得你實際想要的數據
在Swift中 你可以執行像定義和使用
臨時變量那麼簡單的操作
這就能解決問題 就像你在你自己的程序中鍵入一樣
現在 可能會超出你想象的是如果你再次使用它 會發生什麼
那麼我們會問變量名稱是什麼？
嗯 實際上我們刻意讓它這樣工作
原因是你可能會單步跳過
你可能會在不同的地方設置斷點
也許稍後 你會位於一個程序定義A的地方
我們希望作爲臨時變量的A給你帶來阻礙嗎？
很可能不希望但有一個解決方法
我們可以設置一個功能可見性
確保你的變量不會像那樣消失
實際上我們會設置一個本地環境
就像你在程序中添加了一對大括號
把let A放在大括號中然後是打印
但是如果你想讓A起作用
你要做的就是給它一個專用名稱
一個名稱外加$符號
意思是 它將永遠不會跟你自己的程序名稱衝突
這意味着只要你的調試會話存在它就會存在
了不起
你還可以用這個工具做什麼？可以做很多
在Swift中自LLDB和Swift發佈的第一天起
你就可以用函數來解決同樣的問題
現在 當你解決問題時
你很可能想要使用多行表達式模式
事實上 如果你鍵入表達式命令並按下Enter鍵
你會立即打開一個多行編輯器
你可以鍵入你自己的函數
如果你定義你的函數
你就可以簡便地重用這個函數請不要忘了$符號
若你們曾在Swift中嘗試過這樣做並且說過“太棒了！”
你可能在Objective C中也嘗試過了
效果並沒那麼好
這裏不允許函數定義
“不是吧 LLDB那東西總是會妨礙我 ”
好吧 嗯 看起來我們也喜歡這個功能
我們認爲這功能很不錯我們想讓它變得更好
但我們不能讓它變得那麼神奇
因爲 你記得吧我們在你的代碼中停止了
我們想表現得像在你的函數內一樣
如果你在Swift中你可以定義餘下的函數
沒什麼大不了的編譯器會喜歡的
它不喜歡$符號你可以去掉它
但餘下的就沒什麼問題了
這完全合法
但是在C、C++和Objective C中
嘗試像那樣處理餘下的函數
沒有用 編譯器會對你咆哮的
嗯 避免方式是使用頂層表達式模式
是expression命令的一個擴展
可以使它完全脫離
你停止的那個當前函數
並定義全局代碼
可以是函數或變量或其他你想要的
現在 你可以定義函數並按照你期待的方式使用函數
好的
現在 函數不是你可以定義的唯一能重用的東西
我已經講過變量了你還可以定義閉包
閉包是變量和代碼的一種合併
在Swift中 你可定義一個閉包
並使用它
今年 Xcode有了新特性
你可在Objective C中實現同樣的功能
你可以定義和重用塊
如果你是C++的鐵桿粉絲
你可以用匿名函數實現完全一樣的功能
現在
你可以用這些塊做什麼呢？它們有什麼特殊作用呢？
嗯 比如說你可以把它們傳給函數
有時候你可能需要在指定隊列上手動運行某些東西
那樣是可以的
你可以把素材發送給比如說 一個全局隊列
塊就會運行
現在
有時候有點兒煩人
因爲這些複雜的表達式會增加錯別字的出現頻率
現在 不同的是
速度很快 不用回頭看之前的代碼
在這個表達式和之前代碼中的表達式？
你很可能會錯過它
但編譯器一定不會錯過它
如果丟了分號編譯器會對你咆哮
但還有個更好的方式
如果你在源編輯器中鍵入我們會告訴你
“這裏很可能丟失了一個分號你想加上它嗎？”
嗯 看起來LLDB可以實現同樣的功能
並且我們可以做得更好
只需要自動添加遺失的分號
然後就能運行表達式了
我們管這個叫做修訂
以前是在Clang中使用現在LLDB也可以實現同樣的功能了
Swift中也有修訂
在Swift中 你不太可能會遇到分號問題
但是同志們 那些感嘆號很煩人
是的 嗯 它們很有用 因爲它們在你自己的代碼中
當你調試時 幫助你理解它
你只是希望它們不要阻礙你
相信我 我們也是這麼想的
如果你嘗試使用一些沒有解包的東西
我們就會應用修訂併爲你解包
現在 可能會有一兩個人
說“我不希望調試器碰我的代碼 ”
現在
對於這些人 我也有過這樣的顧慮
我們有設置
可以關閉整個自動應用修訂功能
如果你不喜歡調試器自鳴得意地指出
你代碼中的每一個小錯誤併爲你修改好
那麼你也可以關閉那部分功能
好的
謝謝
好了
很好 這是個不錯的便捷功能
但是我還要提另一個
你能定義爲可重用的東西
你可以在Swift中定義你自己的類型
比如說你可以輸入多行表達式
定義一個類
當你嘗試實例化那個類時
它就是這樣
就像你已經在程序中定義過的類一樣
在C++中也一樣 你可以定義一個類並重用它
現在讓我們來看個例子
我們可以在你自己的程序中使用所有這些概念
通常尤其是當你的程序與web API交互時
你會得到返回的許多數據你想要篩選數據
尤其是當你正在調試時
篩選數據的方式尤其是在NS數組中
是通過定義一個判斷實現的
現在 在表達式分析器中你可以定義自定義判斷
在這種情況下 我們寫一個塊
從web服務器取出結果字符串
進行篩選 查找有文本錯誤的字符串
很可能有利於調試
現在 如果你只從web服務器取出完整數據的數組
然後就應用判斷
你可以立即獲得你實際關心的消息
現在你已經瞭解表達式分析器是如何強大了
接着有請Jim Ingham上臺
他會給你們講LLDB更強大的特性
謝謝 Sean
目前我們已經按先後順序
講瞭如何當你停止後
查看程序狀態 但我們還沒講
如何得到這樣一個有趣的點
這是我要跟你們講的內容
當然 斷點是停止程序的一種順其自然的方式
那麼 我想談談你們覺得斷點就是自然而然地
在我設置斷點的地方停止我的程序
但這並不是它們的實現方式LLDB也不是這麼認爲的
對於LLDB來說斷點其實是一個搜索
在你的程序空間中尋找這些有趣的位置以便停止
事實證明也許是很多不同的搜索
因此 斷點其實是搜索條件
你停止的個別位置
就是你認爲的那個自然而然的斷點
我們叫做斷點位置
讓我們具體講一下 我要把這個連到Xcode的斷點
因爲不管怎樣 當使用LLDB調試時Xcode都在幕後
所以 Xcode斷點必須都得是LLDB斷點
那麼比如說 當你在Xcode中點擊源邊列時
你實際正在做的是在LLDB中運行這條命令
有些斷點設置命令
類似地 當你做符號斷點時
你正在運行一個按名稱設置的斷點
那麼我想讓你們有一點概念就是這些實際上是搜索
我要演示一些例子
從而你可以自然而然地得到多種結果
雖然以前你覺得只是一個單一的斷點設置
那麼 第一個例子是符號斷點
這是一個只在主函數上設置斷點的例子
這應該很簡單 對吧？
但是稍後它會告訴你“不 我有19個位置 ”
爲什麼最終會得到19個呢？
執行break list命令是不是查看斷點設置的結果
你看到的是斷點名稱搜索
實際上是一個不精確的名稱匹配搜索
那麼比如說 它在一個類中選取了選擇器名稱
在很多情況下這樣的確很方便
因爲就像你在C++中調試時你有命名空間、
命名空間內部、類、方法
你並不想鍵入整條路徑
另一方面 也確實意味着
搜索也許比你想要的範圍更廣
我們提供很多不同類型的搜索
當然 我們提供更精確的搜索
即全名搜索 強制名稱匹配
你指定的符號全名
我們嘗試過 但就算那樣也不行
因爲某些原因某人決定在庫內加
一個函數調用主函數不知道爲什麼 但確實起作用了
因此 你甚至可以指定
通過shlib選項
限制搜索特定的共享庫
那麼最後 你就得到你想要的斷點了
我要再舉一個例子 不是因爲我認爲你們不相信我
而是因爲這個例子經常會在Swift中出現
文件和行斷點
因爲Swift有個不錯的功能
就是你調用一個使用閉包
並定義閉包函數的函數
簡單地通過用波形號來繼續
然後接着是閉包體
但是 如果你嘗試在那行設置斷點
你就會發現有兩個停止的點
爲什麼會這樣？
你觀察時 你覺得很簡單對吧？
源代碼行實際上給閉包函數提供了一些代碼
你可以看到 我們在閉包函數上有一個斷點位置
但是它也是函數引用的位置
因此還有一個位置是那個引用的位置
那麼無論怎麼樣 就是這樣
已經講了一些例子
我要給你們一個命令的通用格式
然後再繼續講其他功能
斷點設置命令是這樣的：
鍵入break set
然後有一些指定類型的選項
這是指定你要進行哪種搜索的選項
是文件和行搜索還是符號名搜索
等等諸如此類？
那個類型選項的值是用於搜索的數據
然後還有其他選項 比如忽略計數條件 等等
這些選項規定的不是指定在哪兒中斷
而是規定是不是中斷
所以 搜索後是否可以修改
是不能改變的因爲我們已經搜索完了
如果你希望這樣做的話你只能設置一個新斷點來實現
讓我們講講斷點位置相關的事
斷點位置就是你要停止的位置
它們是個別的搜索結果
一般都會有地址
是程序要叫停的地址
當你查看它們時它們通過生成斷點和位置編號被指定
通過一個點分開
因此 當你在Xcode中調試並且在某個斷點上停止時
你注意一下你看一下PC小功能區
PC功能區將在右側給出停止原因
它總是會給出像2.1這樣形式的斷點
它從不給出像2這樣形式的斷點
因爲你只能在這些位置上中斷
所以是1.1 1.2等等
另外 位置和斷點在某種程度上與我講的其他選項
是對稱的
它們都有像命令和條件等那樣相同的通用選項
你可在斷點上指定任何命令條件
然後它將適用於所有位置
但是你還可以重載特定位置
通過在位置上設置其中一個命令或條件來實現
還有一點好處
很多時候若你有一個生成一批位置的斷點
你想得到其中五個或你不想得到其中五個
那麼你可以禁用它們你可以分別執行
但是 如果你不想搜索到它們
你想禁用整個斷點
你可以通過禁用斷點來實現
但看起來並沒有改變位置的開啓或禁用狀態
因此 你只需要再把它打開即可
就會像你所期待的那樣改變所有位置的狀態
這只是一個小貼士那麼現在你已經看到
斷點在LLDB中的概念
讓我展示一些LLDB提供的
更強大的斷點類型
這些仍然是搜索要停止的位置
我們要進行哪種搜索呢？
這正是你程序中的命名空間所感興趣的
看起來所有命名空間都是黏糊糊的東西
因爲它們都像函數名或諸如此類的東西
因爲我們總是使用常規表達式作爲搜索模式的表達方式
那麼如果你知道常規表達式
你一定會覺得它很可愛
如果你不熟悉常規表達式
幾年前我就說過
在你的辦公室找一個有動物封面書的人
即使現在 如果你想找個前輩
你可以找個有書的人
那麼無論如何...
我們提供兩種搜索一種顯而易見
是搜索程序中的函數名
這是那種搜索的選項
還有一種可能不那麼明顯
但我希望隨着我們更深入地講解我能說服你 讓你覺得那很有意思
就是源文本搜索斷點
這就是搜索的選項
讓我們先來看第一種
函數名模式跟斷點相匹配
我只展示一些例子
假如某人給了你一個新類
你不知道這個類是幹什麼的你想知道它是如何工作的
那麼你想要做的其實是中斷那個類實現的所有方法
你可以通過在Xcode中仔細檢查源文件來實現
從最開始進行 但很快你會覺得乏味
順便說一下 你不想在父類或子類這樣的類上中斷
最好是嘗試制定一個常規表達式
匹配給定類中的所有函數
那麼在Swift中這是個合適的常規表達式
或在Objective C中這是個合適的常規表達式
然後你要在這些表達式上設置斷點
然後你就可以運行程序看看會發生什麼
請記住 因爲你可以禁用個別位置
當你做這種實驗時
你會發現你可能搜索到其中一個你知道它是幹什麼的 你並不感興趣
所以你只需要禁用那個位置然後繼續
發現第二個 禁用然後繼續 以此類推
那麼這是一種探索新代碼的不錯的方式
更高級的版本是
某人給你一個共享庫
你想看看它在運行時到底有什麼功能
然後設置一個常規表達式斷點我在這裏用的是簡化的-r形式
常規表達式匹配一切
用.*實現
然後把它限制在你感興趣的那個庫
把這些和斷點命令相結合
通常是一種很好的方式
以便又迅速又隨性地獲得這個庫的執行軌跡
你可以向後追蹤 也許會打印局部
然後繼續 你只需要運行程序
並且得到那個庫的執行磁帶輸出即可
當然了 在執行過程中速度會慢下來但值得等待
然後另一個小技巧是
如果你找到你並不感興趣的你可以禁用它們
那麼讓我們談談另一種匹配模式吧
這裏的重點是有一些構造函數
當你查看源文本時非常明顯
但如何在生成的代碼中得到那些構造函數
真的很不明顯
其中一個例子是宏
通常在你的程序中替代文本
然後它就悄悄消失了但你知道
它們插在代碼的哪個位置因爲它們是大寫字母
那麼想要搜索到它們也許需要搜索全部大寫字母
或你所關注的特定的宏
但是你可以更有創造力
比如說 我想了解指針
指定字段的位置
很明顯是在源文本中
因爲看起來就像是那樣
但在生成的代碼中尋找這些位置可能會很困難
因此還有另一個實例在源文本中使用模式匹配
可以允許你發現你用其他方式發現不了的構造函數
另一種使用方法是
做主題分組
你可以在上邊設置斷點
通過插入手動模式到你的源代碼
就像註釋裏說的中斷這裏或中斷那裏
如果你有興趣檢測
程序功能中的這個特定的部分
然後使用這些源常規表達式斷點
來捕捉它
那麼這就是源斷點的工作原理
選項是源常規表達式
爲搜索提供的數據是模式
然後你可以把它限定在一個文件中
你可以通過多次給出-f選項限定在多個文件中
並且還有一個標誌可以搜索全部源文件
讓我舉個例子來吊你的胃口
假如我有個複雜的函數比如狀態機
是計算用的然後從許多不同的地方返回
在某些恐怖的超長的選擇語句中或其他類似的選擇語句中
我想找到什麼時候會返回空
但我想了解返回空時
的具體情況
很難實現
因爲你可以在函數返回後中斷
並查看是否爲空
你可以點擊所有返回空的位置
但你可能會遺漏其中一個或你只關注模式
這裏有另外一個便捷方式
在源常規表達式斷點類型中
你不僅可以指定一個文件
你還可以把它限定在一個特定的函數中
如果那樣的話我要做這樣的操作
中斷要返回的模式
我正在展示我會用常規表達式因爲我正在炫耀
空格+星號代表任意數量的空格
然後空指針
我把它限定在一個函數中且限定在我感興趣的一個文件中
然後我會發現在這個特定的用法中
我精確地找到了返回空的位置
那麼值得談一些額外的斷點選項
你可能沒聽說過
其中一個類似逐行或篩選
很有用 因爲我們程序中同時存在Swift和Objective C
可以給指定的一種語言設置斷點
那麼比如說 隨處都有計數方法
如果你在計數上設置一個斷點
你將在Swift代碼中得到一批斷點
你也會得到一批Objective C方法的斷點
但你並不關心Objective C方法
你只想查看Swift代碼
然後你可以指定語言爲Swift
它將不會在 Objective C名稱上執行恰巧匹配的斷點
這很有用
是的 對
另一個有用的選項
能使搜索縮小到一個指定的線程
假如你有一些能調用的代碼和一批不同的線程
就像內核或諸如此類的
但當你開始執行一個線程時
你不想讓用於檢測的斷點
把你帶到其他線程上去 很簡單
有一個線程ID選項
這個選項可以讓你按照線程名執行
可以通過調用pthread_setname_np設置
這很方便 因爲如果你命名一個線程
然後保留在多個調試會話中
線程ID當然會隨時變更
你甚至可以限制它
按照名稱對指定隊列進行編碼
還有一點你可能會注意到
就是你可以把全部選項添加到現有斷點上
特別有用
如果你已經在Xcode的邊列中設置了文件和行斷點的話
比如說 你決定你想限定到一個指定線程
你可以在查詢後進行變更命令是break modify
另一件有用的事是展示如何指定它們
因爲你可以通過斷點指定
通過斷點位置編號指定
還有一個小語句來指定範圍
就是這樣
那麼現在 你得到了你想要的所有斷點
但你遇到了絆腳石
就是目前Xcode看起來
只保留了它已知的你設置的斷點
而那些你想方設法手動寫入的斷點它並不瞭解
那麼如何保留那些斷點呢？
第一種方法是Enrico講過的：
如果你想把它保留在所有對象中
你只需要把它放在LLDB初始化文件中即可
但是如果你想指定對象有一個小技巧你可以使用
當你每次調試那個指定對象時加載斷點
這其實是做一個Xcode存儲的斷點
最好是在程序執行中早期斷開的斷點
然後你把你的斷點和命令放在那個斷點中
這樣你就知道如果是主可執行文件
比如說 主函數是個快速接口
那麼你可以做一個符號斷點
然後把主函數放進去
然後你還記得剛纔那張幻燈片吧
我說過有個主函數的小麻煩
那麼你可以指定共享庫
然後你可以添加動作是個調試器命令動作
然後不要一個一個地鍵入所有斷點
因爲會很乏味
把命令放在一個文件中很方便
然後使用LLDB的commandsource命令來加載這些斷點
最後 如果你自動繼續
每次你運行時 你都將自動獲得
所有那些斷點集
我還想講另一個便捷方式
用來克服
你在現代語言中常見的一種特定的煩人的麻煩
就是當你嘗試單步跳入某個東西時
問題是在大部分現代語言中
大多數變量存取現在都是通過屬性完成的
或通過存取子函數或諸如此類
所以...
一般來說 這並不是你嘗試要調試的代碼
最後導致了這樣一個情況
我在這兒 我嘗試進入這個函數完成某些功能
我想進入那裏
所以我嘗試單步跳入但並沒有成功
因爲我正在傳遞的一個參數
是存取子函數所以我在那個存取器中中斷了
我並不想在那兒中斷因爲那一點兒都沒有意義
因此我要做的是完成並返回
是不是有一種方式可以讓這個過程變得更簡單？
看起來我們添加了一個叫做定向單步跳入的東西
選項是step_in_target表示你要單步跳入
我要做的是單步跳入
但我只想讓你在這個指定的地方中斷
就是你正在用這個表達的意思
讓我們在這種情況中嘗試一下
我們發現它幾乎不怎麼工作
不怎麼工作的原因是
雖然我們沒有在存取器中中斷
但是我們卻在下一個源文件上中斷了而不是在函數中中斷
這是有道理的
因爲實際上單步跳入是按照源代碼逐行執行的
這就是多行調用
那麼我們也要通過給出
結束行的編號添加能指定
單步跳入的終止範圍
或更方便的是隻進入這個塊
讓我進入 做一些操作
甚至還有一個別名即函數中的sif單步跳入
那麼 你要做的就是坐在這裏並在函數中鍵入step
然後你就會着陸在正確的位置
若你沒着陸在正確的位置我就不會把它放在幻燈片中講了
最後我想講一下排錯
你需要了解的一個信息是
運行程序中到底有什麼
比如 也許我創建了發佈版本和調試版本
我想了解我實際使用的是哪個版本
或某人給了我一個帶dSYM的庫
這個dSYM允許讀入嗎？
那麼 需要那種信息的命令
是image list命令
你可以給它一個模塊名這樣它將給出
關於加載到你程序中某個模塊的信息
或者爲了消遣你可以不提供任何選項
將會顯示全部有時候多得令人震驚
那麼 這裏有個例子讓我們看看如何使用它
我鍵入image list
我看到這裏有個二進制映像的路徑
那麼假如 如果我想查看我是否使用的是調試版本
是的 看起來我的確像是用的調試版本
如果有dSYM的話 它總是會在二進制映像後列出來
此情況下我看到我的確得到了二進制映像
我想告訴你一個Swift調試的信息
我這張幻燈片上的內容實際上並不是我要講的內容
因爲我們時間很緊
但我會告訴你TLDR
因爲我講得太快 你可能讀不完
由於Swift和LLDB之間的工作方式
所有帶調試信息的Swift代碼
都必須在本地創建
因此 從其他人那兒拷貝二進制映像是行不通的
你要確保一切都是在本地創建的
並且有編譯器
隨着你正在使用的調試器一起運行
我想說的是 這是我們提供的一個小便利
那麼 Enrico講的優化代碼優化的規則
我們之前聽到如果不是不得不做的話 就不要做
由於大部分軟件開發者都是理性的人
你可以寫一個推論
調試優化代碼的絕大多數人實際上都不是故意執行的
那麼現在當你中斷在文件中時
 LLDB將告訴你那個文件被優化了
每個庫只通知一次你將得到一條像這樣的消息
然後你快速進入設置把它們改回來
剛剛添加到Clang中的另一個新功能
是這個模塊概念
模塊是允許編譯器
查看你程序標頭環境中的所有標頭的方式
編譯並解析它們
然後在所有編譯器中重用
然後我們想爲什麼我們不能對調試信息
做同樣的事呢？
爲什麼不能允許類型信息的解析形式
也一次性完成然後
在所有帶調試信息.o文件中共享呢？
這叫做Clang模式調試功能
此外 我們還可以使用PCH文件
Xcode中的設置是Clang模塊調試
這是由於某種原因我放進去的標誌
這很棒 因爲就像編譯器一樣
提高了調試信息的生成速度
它將縮短編譯時間但它有一個警告
那個警告實際上可能是個重要警告
那麼 那個警告是你的調試不僅依賴於.o文件
還依賴於內存中的某些東西
因此 一般來說 那不是個問題每個東西都在自己的位置上
但當你要給某人發佈庫或應用時
該怎麼工作呢？嗯 如果是應用或框架
你只需要運行dsymutil即可
效果是一樣的 它把一切都集合起來一切都能正常運行
但請記住dsymutil只在關聯產品上運行
並不在.o文件上運行
因此 若你發佈的是帶調試信息的靜態庫
那麼你必須關閉這個G模塊的功能
否則你將會給客戶發佈已損毀的調試信息
順便說一下 如果磁盤空間不足
你刪除了模塊緩存
那麼你就不能再調試了
這是那個功能的一個不利因素
那麼 讓我來總結一下吧
我希望你瞭解LLDB是個定製化很強的調試器
提供多種查看數據的方式
表達式實際上可以提供更強大的檢測功能
我認爲Sean的例子很好講瞭如何在live狀態下
從一個複雜的數組中通過並發現你感興趣的點
在Xcode中 我們有很多斷點類型比你想象的多
你可以把自己陷入超級深的麻煩中
比源代碼層的調試還深
總之 希望我們提供了豐富的工具集讓你探索自己的代碼
這裏有一些之前演講的信息可能涉及你感興趣的內容
還有一些早些時候的演講你可能沒參加
或參加了 但無論如何我把它們列在幻燈片上了
謝謝大家
希望你們能在僅剩的WWDC期間度過一段美好的時光