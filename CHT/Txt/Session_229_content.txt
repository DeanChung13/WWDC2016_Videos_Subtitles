使用TVMLKit開發應用
好的
大家下午好 歡迎來到TVMLKit應用開發的第二部分
有許多優秀的應用
使用TVMLKit開發出來放在App Store上
一些應用使用自定義樣式
帶給用戶與衆不同的體驗同時擴大了應用的知名度
今天我格外的高興
同你們進行交談 並且告訴你們如何
提升應用到另一個水平
這需要通過擴展TVMLKit
擴展接口
同時也需要JavaScript中提供的功能來實現
通過上述方式基本上能讓你的應用脫穎而出
甚至會有屬於自己的品牌
TVMLKit是一個功能完備的框架
我們也試圖確保
你在思考如何構建你的想法時
你只需要考慮兩個擴展點即可
在上半場演講中
我將告訴大家如何
在TVMLKit中通過擴展模板的方式來擴展用戶界面
下半場演講
我的同事Christopher將會講解
如何增強你的應用通過添加程序功能
到JavaScript引擎支持TVMLKit的JavaScript引擎
讓我們談論擴展模板的內容
首先第一件事情每一個人都會遇到的是
他們使用的TVMLKit就是模板的概念
模板在TVML中定義 就是TV標記語言
他們使用XML描述屏幕上顯示的內容
當人們看到了這裏
他們會說嘿
我知道它 它是瀏覽器
我敢向你保證那絕對不是瀏覽器
TVMLKit是一個功能強大的模板引擎
但那並不意味着你只能使用我們提供的模板
實際上 Apple自家的應用同樣使用TVMLKit
但是以巧妙的方式擴展
使它可以和原先的
框架共存仍能良好的運行在tvOS上
讓我們看一個例子
這是App Store上的應用
App Store的主題有一個要求
一個shelf中只能存在一個cell
你能看到他們複用了TVMLKit提供的
一個圖片控件和三個文本控件
除了這些他們還有自定義佈局
使用了自定義的聚焦動作
另一個例子是我們非常熟悉的
是對於購買按鈕的印象
App Store的主題要求
購買按鈕必須反映出應用程序的不同安裝狀態
你是否正在購買應用
應用是否被安裝或者已經下載
所有的這些都通過複用TVMLKit提供的模板來實現
這些主題就是今天我想特意展示給你們的
儘可能複用TVMLKit
並且儘可能的擴展我們沒有在模板中提供給你的樣式
這就是模板
如果你已經使用了TVMLKit它遵循一系列的路徑
當你把TVMLKit注入到框架中最後會在屏幕上顯示
TV標記語言由許多元素組成
命名各不相同
當它進入到框架中後會被傳遞到TVElementFactory
TVElementFactory是註冊中心
它記錄着所有的元素
它能夠將元素翻譯爲相應的數據結構
框架能夠識別的數據結構
我們使用TVInterfaceFactory類
生成用戶界面
然後將他們顯示在屏幕上
這就是TVML如何顯示到屏幕的過程
讓我們看一下擴展模板的過程中會發生什麼
當提到模板的擴展就像添加你自己的標記那樣簡單
在TVML中將標記發送給框架
它會經歷相同的處理過程
它會進入到TVElementFactory緊接着被轉譯
但是當自定義的元素碰到TVInterfaceFactory
因爲框架不瞭解你的用戶界面
框架會針對自定義元素詢問你
當你將界面給框架後
TVInterfaceFactory將把自定義的元素顯示在屏幕上
就是如此的簡單
現在你知道每個過程是如何工作的
讓我們來看一下它們的具體實現
你需要考慮三個步驟
當你想擴展模板的時候
首先是定義標記符號
標記在TVML中基本上就是XML
你有一個想法
就是你的用戶界面在屏幕上會怎樣顯示
你必須將它轉譯爲一種結構
一些類似於
使用標記本身就可以標識什麼應該顯示在屏幕上
在我們的例子中 我們想在stackTemplate上顯示一個banner
banner會有一個動畫背景
假如你想有能力控制動畫你可以在TVML中使用一個開關
因此 myBanner這個元素會有一個animated屬性
除此之外 我們再添加一個按鈕
但是因爲不需要額外的功能
我們可以使用TVML提供的按鈕
這就是按鈕的一種形式
現在你會構想自己的用戶界面
在標記中會如何顯示
你需要告訴框架
這就像將你元素的唯一標識註冊到框架中那樣簡單
在應用控制器啓動之前註冊操作需要執行一次
以便框架能夠意識到
所有的元素需要特別處理
上面的過程很簡單就像告知TVElementFactory
你想要關聯一個TVViewElement類到
你自定義的元素上
TVViewElement是基礎的數據結構
用來轉譯你的標記
讓框架能識別這些標記
除TVViewElement外
我們還可以使用它的兩個子類
TVImageElement用於處理圖像
TVTextElement用來處理文本
既然我們已經註冊了這些元素
現在處理第二步 第三步時你那邊會有小部分工作
但是我們試圖讓事情保持簡單接下來只有兩個步驟
你要做的第一件事是創建一個建造者接口
創建的接口必須遵循TVInterfaceCreating協議
這個特別的對象會
提供你的用戶界面當框架需要的時候
有一些回調函數你需要實現
這些函數需要遵循TVInterfaceCreating
協議聲明返回你想要的UI類型
下一步是當你調用你建造類的接口時
框架會對你的界面進行配置然後將界面返回給我們
像我之前強調的儘可能複用TVMLKit
我們已經做了很多工作去保證
在tvOS上運行時內置元素在性能、外觀和體驗上的表現是良好的
讓我們來看一個例子
建造者的接口是什麼樣子
在這裏我們有一個MyInterfaceCreator類
這個類遵循TVInterfaceCreating協議
因爲我們僅對特定的視圖更感興趣
我們可以去實現makeView元素
還需要實現existingView的回調方法
一旦實現這個類後 你需要做的是
使用TVInterfaceFactory註冊這個類的實例
讓我們具體看一下makeView這個元素
我們可以看到TVMLKit
給你提供了一個元素和一個可選的existingView
在這個例子的banner中
我們只需要檢查這個元素自身的名字
我們需特別注意myBanner這個元素
當我們發現和它類似的元素時
我們要創建這個視圖的實例
因爲myBanner有一個元素屬性
我們可以很容易的篩選到這個元素
利用這個元素提供的回調函數
然後將這個元素轉換到視圖上
我們在這個視圖上還有一個按鈕
因爲它是一個TVMLKit按鈕
這樣做是簡單的就像
爲特定的元素調用TVInterfaceFactory
然後會爲myBanner元素返回它所需要的視圖
最後當然也會返回你需要的視圖
在框架默認方法中
必須返回nil
我們已經談論了很多視圖的內容視圖控制器的內容呢？
TVMLKit提供視圖控制器樣式是
一個shelf有很多lockup
用這種樣式進行水平方向擴展
或者是網格垂直方向上的擴展
使用TVMLKit的回調函數
返回這些視圖控制器
你可以使用你自己的視圖控制器替換默認的視圖控制器
這種用法類似於makeView
在這個實例中我們仍然提供相應元素的existingViewController
我們希望最終返回的是existingViewController
現在你會想原來如此
本質上就是視圖的集合
視圖的集合是許多帶有cell的視圖
這就是如何對自己的lockup進行定義
這個例子夠深刻嗎？
App Store有一個特殊的要求
一個佈局僅有一個cell和特定的行爲
就像你看到的其他的東西是UMLKit的擴展
標題的上下浮動依賴於
焦點是否位於元素的範圍內
在將要推出的tvOS 10中
我們允許你指定自定義視圖集合的cell
允許你爲cell自定義佈局
最重要的是你可以攔截焦點事件
當cell獲得焦點的時候
爲了達到這種效果你需要做兩件事情
首先是用我們最新的API
它允許你對我們視圖集合的CellClass進行設置
當我們使用特定元素的時候
我們在屏幕上構建用戶界面
框架通過使用makeView來允許你進行自定義
對相關的cell進行配置返回界面給我們
我們提供可自定義的視圖集合cell
將視圖集合的條目加入隊列中
使用已有視圖自身的參數
接下來我將請Parry上臺
爲你們展示上面提到的界面是如何工作的 Parry
視圖集合條目的自定義展示
謝謝你Jeremy
大家好 我是Parry我將給大家展示
如何在TVMLKit自定義cell
自定義cell是簡單的
如果你想像多個shelf那樣使用TVMLKit集合
還有網格 但你想添加自己的cell
通過自定義佈局和聚焦機制來展示你的內容
我將向你展示一個基於TVMLKit製作的簡單應用
稍後
我將使用自定義cell對它進行擴展
使得應用的顯示效果更好
讓我們開始吧
我把屏幕轉接到我的電腦上
我使用Xcode打開我的應用
我會基於TVMLKit進行編碼
讓我們看看這個應用
這個應用可以使用戶瀏覽他們的相冊
應用中使用到的JavaScript和同XML相關的文件
都存儲在我的電腦上
我們可以大體瀏覽下這些文件
現在顯示的是應用的一個頁面
這個頁面會把用戶的相冊展示出來
你可以看到stackedtemplate
還有一個不錯的banner
背景圖
它有一個shelf是用來展示相冊的
每個相冊其實通過lockup呈現
每一個lockup嵌入了來自相冊的圖片
最後相冊展示出來
除了使用一些自定義樣式使得lockup變得大一點
我沒有自定義TVMLKit
現在它是沒有TVMLKit的應用
運行程序看一下它的展示效果
接下來我將在Apple TV上運行
這就是我在stackedtemplate文件中提到過的應用
別緻的banner在頂端
它的shelf在底部
我覺得超出範圍的那部分還是挺不錯的
這是奏效的較大的lockup能使得它看起來不一樣
我覺得還能做得更好一點
考慮這種情況
除了從相冊中取一張照片
顯示在當前的頁面上
要是我們選擇多張相片
選中的照片來自於相冊
使用那種方式將相冊放到文檔上會怎樣？
讓我們想一下
如何構建圖像的拼圖
當相冊沒有被選中
或者當相冊沒有獲得焦點時將圖片加入到九宮格中
那聽起來挺酷
但不止於此
它將關於相冊的上下文信息傳遞給用戶
用戶可以看到相冊中的許多圖片
真是一個使用TVMLKit自定義cell的不錯例子
讓我展示如何使用它
我將切回我的電腦
我想做的第一件事情是
像我剛纔所說的創建一個特定的標記
它是視覺表現的呈現形式
對你的用戶界面來說
根據XML的規則使得TVMLKit可以被理解
所以我將在這裏
就像你看到的 它也是一個帶有shelf的stackedtemplate
但是除了lockup之外它還有有一個新的元素
就是我剛纔創建的叫做FlyoutCell
展示的就是我剛纔創建的那個條目
我稱它爲flyout因爲圖片看着像從裏面飛出了一樣
就像描述中提及的
我想在cell裏放多張圖片
因此
cell裏面有多個圖片子元素
有一點需要注意
對所有自定義的cell來說
它們需要有三種樣式
它們是寬和高
在tvOS 10中添加新的樣式
是TV focus margin
TVMLKit使用寬和高
在集合視圖中給cell適合的邊框
使用TV focus margin作爲默認大小
當元素獲得焦點時便可以知道將邊緣擴大多少
它使用這個信息創建
適合的間隔在兩個shelf之間
也會去重新調整shelf header
當移動到cell下它便獲得焦點
現在我們有了規格那下一步該做什麼？
需要將新元素加入到TVMLKit中
讓我們快點做
讓我們看一下AppDelegate
在應用中有didFinishLaunchingWithOptions方法
我將刪除這些代碼
我之前寫的 就像上面那樣
使用我剛添加的FlyoutCell元素
使用TVMLKit中的TVElementFactory
TVMLKit希望我們對建造者的接口做出提升
通過對它進行擴展以便我可以對cell進行配置
對吧？所以讓我們快點完成它
這就是TVMLKit要求的全部配置
讓我們看一下這些類的實現
從ExtendedInterfaceCreator開始
對於自定義的cell你需要實現兩個API
首先
collectionViewCellClass類
要求用它映射你的自定義元素
到你使用的collectionViewCellClass類
第二個是makeView要求
使用你的元素配置你的cell
讓我們快速填充空白的地方
用我以前寫過的一部分代碼
對自定義的cell進行映射
利用collectionViewCellClass類
同樣的
利用映射去配置collectionViewCell類
特別注意的是已存在視圖的參數
總是有效的
因爲TVMLKit將它加入隊列
從視圖集合中爲了使它顯示出來
對於自定義的cell它將會出現在這裏
在跳轉到flyoutcell配置前
讓我們看一下Flyoutcell類本身
這就是FlyoutCollectionViewCell類
我使用它展現flyoutCell
你可以看到 它就是
UICollectionViewCell的子類
在類內部沒有使用TVMLKit做任何事情
它僅僅是cell的類
我可以在原生應用或其它應用中使用它
需要指出的是它接受
圖片視圖的數組
那些數組用來顯示視圖的內容
這些圖片是我們想要展示的
在我們擴展TV視圖元素的接口中
讓我們回到要擴展接口的地方補全這些代碼
這就是需要展示的內容 不是太多
但是挺重要的
我遍歷所有的子元素
提取出圖像元素
簡單的重複使用TVMLKit爲我們創建圖像
現在除了沒有顯示圖像之外它是相當棒的
因爲我們使用的是網絡圖片
它允許我們對圖像進行縮放裁剪來使用給出的範圍
以便用戶界面可以更好的展示
它同樣做了緩存以便我可以在其他地方重複使用這些圖片
因此複用TVMLKit的視圖和其他的功能是很有好處的
我建議你們使用它
我們已經對代碼進行了完善
並且和TVMLKit相關的類能理解我們的元素
還有一件事情需要去做
回到我剛纔展示的stacked文本中
將所有的lockup替換爲我們剛添加的FlyoutCell
我現在回到了那個地方
移除掉這些lockup
添加FlyoutCell
現在有三個相冊有三個FlyoutCell進行填充
每一個FlyoutCell有...
四張圖片在它裏面
當你添加這些cell的時候不要忘記添加樣式
那是強制的要求
我們添加了所有的東西然後回到應用中
看一下修改之後的樣子
我將切換到Apple TV
上面是flyoutcell
你可以看到現在比展示一張圖片的效果更好了
它看起來更生動
特別注意cell只是適用於TVMLKit
間隔是合適的 甚至相冊的封面
隨着cell獲得焦點視圖會進行上下移動
感覺像是TVMLKit內置的控件然而它的確是你添加的
你的界面實現了
自定義cell的確是非常容易實現
它允許你添加許多數值到你的應用中
通過複用TVMLKit提供的
同時會允許你使用你的方法進行展示
謝謝
謝謝你Parry
我認爲Parry花了很多時間構建FlyoutCell
比實際中利用TVMLKit進行顯示
在繼續進行之前讓我們快速回顧下前面的內容
最開始提到了擴展模板
定義一個標記去描述你的用戶接口
用TVElementFactory註冊上面的接口
然後將它轉譯成視圖元素
提供可擴展建造者的接口以便你能聲明自己的用戶接口
可以隨時停止在屏幕上構建的UI
更重要的是
使用TVViewElement的屬性和特性
去配置你的用戶界面在顯示到屏幕之前
這就是關於擴展模板的全部內容
挺簡單的
我們看到你們用它構建自己的應用挺興奮的
在繼續之前我們要告訴你一些需要注意的事情
你的用戶界面通過TVML中的元素展示出來
這個文件可以在任意時間更新
舉個例子 帶有lockup的shelf在搜索模板裏
當你進行搜索時 shelf會使用JavaScript進行更新
顯示的內容會改變
這就是內容的更新
現在
當我們重新構建用戶界面文檔的更新就會發生
我們需要調用接口的建造者
你需要在元素中查看更新的類型
並且能看出什麼地方進行了更新
舉例來說 孩子有可能會變得淘氣
作爲稱職的父母
你不想放棄你的孩子
因爲那樣做不太好
相應的儘可能複用cell 複用視圖
在我們返回banner的那個例子中
在TVMLKit生態系統中我們不是好公民
我們沒有複用所有視圖
讓我們看看能否改變這種局面
挺簡單的就更改兩行代碼
在這個例子中我們把existingView看作回調的一部分
我們盡力做出我們期望的視圖
在MyBanner視圖中
如果不是我們期望的實例化一份新的拷貝
因爲我們有TVMLKit按鈕基於TVMLKit
我們也必須做正確的事情
通過傳遞到TVInterfaceFactory進行復用
現有視圖參數
在特殊的例子中
因爲MyBanner是一個比較簡單的視圖
在任何時間更新它都是沒問題的
我們不需要去看更新的類型
除非你的視圖 結構是相當複雜的
出於性能的原因 我們建議你
看一下更新的類型找出更新的部分
這是...
你需要改變的第一行
現在
在tvOS 10的新特性就是明暗的視覺表現
若你使用TVMLKit自定義的視圖
你可以去監聽這些特徵來做出或明或暗的變化
我們有闡述tvOS新特性的演講還會告訴你需要做的
我建議你們仔細看看
外觀的適配
在這個例子中你需要了解TVMLKit的規則
複用我們的組件 謝謝你
我建議你檢核樣式更新的提示
從元素更新類型過程中
它會告訴你視圖
是明或是暗的表現形式
複用文檔靈活更新
對你來說是僅有的方法
來更新你的視圖展示或明或暗的效果
因爲他們是你需要複用的TVMLKit組件
更重要的是我們需要轉到TVInterfaceFactory
這樣才能完成這些顯示工作
如果你有原生的應用又或者你有自己的視圖控制器
你在應用中使用了TVMLKit
你可以讓框架混合使用它們
這就像定義一個模板元素那樣簡單
再次強調 通過元素工廠註冊它
通過加載特定的模板構建我們的用戶界面
返回你的視圖控制器所有的設置就完成了
另一種方法在你已存在的原生應用使用TVMLKit
是獲得我們提供子應用的導航控制器
你已經學習了如何創建TV應用的控制器
我要強調的是在這個例子中你不用指定一個窗口
因爲我們已經有一個窗口了
選擇你要在導航控制器中顯示的視圖控制器
一旦你有了TV應用的控制器
獲得它的導航控制器並且展示它
另一種方法是使用UIWindow的實例
在這個例子中你需要指定窗口參數
一旦JavaScript啓動或者應用邏輯執行了
TVMLKit做正確的事將你窗口的鍵值隱藏
接下來Christopher將會和大家談論
如何擴展應用的功能
通過調用JavaScript
Chris
謝謝Jeremy
大家好 我是ChristopherTVMLKit的工程師
剛剛我們看了如何在TVMLKit中擴展模板引擎
使用自定義的標記
實現我們自己的視圖和視圖控制器
還有視圖集合的cell
你也可擴展TVMLKit的腳本引擎
通過使用JavaScriptCore實現
實現你自己應用中的特定功能
在JavaScript中或暴露給JavaScript
有三種方式來將代碼注入到JavaScript的運行環境
在你的TVML應用中
讓我們看一下
首先 你可以在運行時加載額外的JavaScript庫
第二 你可以使用原生代碼直接交互
同JavaScript的上下文在你的應用中
觸發JavaScript中的函數或者傳遞數據
在兩個運行環境之間
第三 你可以使用原生類
將原生類傳遞到JavaScript
通過簡單的類約定使你的腳本可以訪問它們
在JavaScriptCore中
讓我們詳細的瞭解下這些方法
從最簡單的開始
JavaScript庫
當你的應用開始加載最先發生的事情是
TVMLKit會加載JavaScript文件
文件裏面會包含app.onlaunch回調
應用的控制權會交給你TVML應用的JavaScript
啓動過程必須等待直到application.js文件加載運行
在app.launch執行完成之前
如果說你的應用比較龐大你可以對代碼進行切割
把代碼放到許多獨立的文件中加速啓動時間
這是TVMLKit普遍支持的形式
允許你加載額外的JavaScript
在應用運行時的任何時候
你的JavaScript庫其中可以定義變量
和函數並且可以被所有的腳本使用
讓我們看一下TVMLKit JS提供的全局函數
一般情況下你能在app.onlaunch上進行調用
你也可以在其他的地方進行調用
這個函數使用腳本URL的數組和完整的回調函數作爲參數
當回調函數執行後
你可以使用變量和函數
我們在腳本庫中定義的
但是還有一些事情需要注意
當你調用執行腳本的時候
TVMLKit JS會執行這些代碼
在你的JavaScript文件中會調用其它函數
所以在相同的文件中不要多次調用執行腳本
同樣要注意如果你的腳本依賴其它的腳本
你需要以正確的順序加載它們
執行腳本會併發的根據URL下載腳本文件
然後會一次執行它們
如果其中任何一個腳本沒有獲取到其它腳本也不會執行
當回調完成後要檢查成功的參數來確保
JavaScript庫是可獲取到的
最後 我想告訴大家
儘管TVMLKit提供了許多類似網頁的接口
可是你的TVML應用不是網頁瀏覽器
可能發現許多JavaScript庫能很好的幫助你開發網頁應用
但在TVMLKit中有可能出現不兼容的情況
尤其是你依賴瀏覽器功能的時候
比如全局的window對象或者全局的document對象
記住那些就可以了
但是不要限制你自己
在你的TVML應用中使用JavaScript
你能進入到JavaScript運行環境
從原生的代碼中
可以將應用的UI事件傳遞到JavaScript中
或者在JavaScript和原生之間上傳和拉取數據
TVML中 你JavaScript運行環境是被TVMLKit
的一個叫作TVApplicationController類管理着
JavaScript在單獨的線程中執行
所以你需要對進行交互的時機進行調度
最簡單的形式是你只需要簡單的調用函數
在TVApplicationController上然後將block傳遞進去並執行
當block執行後你將獲得JS上下文環境的引用
在這裏你可將字符串當做JavaScript代碼執行
你可以在對象上觸發函數
你可獲取和設置JavaScript的屬性使用原生的變量
你不能持有JSContext
或者在block之外的任何地方使用
由於JavaScript運行在單獨的線程中
你需要注意你不能執行任何阻塞操作
當你執行block的時候
否則會在主線程中出現死鎖
獲得關於JSContext和JavaScriptCore更多信息
請訪問 WWDC 2013中JavaScriptCore部分
讓我看這個例子是如何調用JavaScript代碼的
從Swift應用中
這個顯示的Swift代碼是TVML應用代理裏面的
我們已爲UIApplication的代理方法實現了一個stub
來處理自定義的URL方案
如果我們想把URL傳遞到JavaScript中
需要讓appController去執行block
在JavaScript的執行環境中
當block執行完之後我們將得到JSContext的引用
從這兒我們可以訪問相應的屬性
直接在JavaScript的全局對象上
我們可以得到原生的變量和對象且能將其作爲JavaScript屬性
或者就像這個例子中 作爲函數的參數
我們觸發打開URL的全局函數
函數在JavaScript中定義然後將URL字符串傳遞進去
URL來自UIApplication代理回調
我們暴露新的函數
在我們的TVMLKit應用中
並且將應用的事件傳遞到JavaScript中
接下來 讓我們談論橋接
使用本地變量是如此的簡單
在JavaScript中使用這些變量就像使用字符串
數字和數組那樣簡單
這些已經在JavaScriptCore處理了
如果你想使用自己的類
你所要做的是遵循類之間一些簡單協議
JavaScriptCore也會爲你的類進行連接
讓我們看一下
這兒有三個主要的步驟
首先你必須聲明一個自定義擴展自JSExport的協議
JSExport存在於JavaScriptCore中
第二 我們需要使用Swift定義我們的類
擴展這個協議後然後將它暴露給原生類
第三 對我們的類進行實例化
或者將這個類本身暴露出來
在TV應用控制器的代理上進行回調
在控制權被交到JavaScript之前準備JSContext
在應用啓動期間
讓我們看一個方法如何去
對StoreKit進行包裝
如果我們想把購買的函數暴露給
給JavaScript
我們開始定義我們的協議
在這裏我們會指定屬性和方法
使用JavaScriptCore爲我們提供連接
這裏 我將把它作爲stub
看到我們擴展了JSExport且定義了StoreKitWrapperProtocol的協議
下一步我將爲StoreKit創建一個包裝類
擴展自NSObject並且實現自定義的協議
再次強調 我保留了存根的細節
但是你要在存根出定義你的原生函數
這函數你在JavaScript中調用
最後 我們實現TVApplicationControllerDelegate方法
在執行應用的JavaScript上下文環境中
這些會在app.onlaunch執行之前調用
並且允許我們去暴露我們自己的函數
在將控制權移交給JavaScript之前
這就是關於原生語言調用JavaScript的全部內容
我們定義了一個原生類
我們使用使用上述步驟使這個類可訪問
對我們TVML應用JavaScript來說
在這個會議上 我們已看到如何利用原生功能
提升你的TVML應用
你可以使用自定義的標記擴展模板
爲你自己的視圖和視圖集合cell
在你的原生應用中你可以獲得TVMLKit
或者在TVMLKit中使用你的原生視圖控制器
你甚至可以在TVMLKit中擴展腳本的環境
連接原生類 應用程序事件
和加載額外的庫
我們已經展示給大家它是多麼的簡單去構建應用的特定功能
在你的TVMLKit應用中自定義自己的品牌
在構建複雜應用時TVMLKit提供的API是比較簡單的
構建高質量的應用和小的開銷
我希望你能看一下TVML指南
還有TVML目錄下的應用實例
獲取更多的關於擴展和使用TVMLKit的信息
你也可以訪問Apple開發者網站
查看編程指南 示例代碼和文檔
還可以留意今年 WWDC 2016的其他演講內容
特別是使用TVMLKit開發應用的第一部分
裏面展示了構建一個完整應用的全過程
謝謝 希望大家在WWDC 2016餘下的演講中玩得愉快