NSURLSession：新特性和典範
謝謝大家 早上好
感謝大家今天的到來
這裏是NSURLSession:新特性和典範講座
我是Jeff Jenkins
我是一個軟件工程師來自網絡技術部
我今天有一些非常有用的信息想和大家分享
關於NSURLSession
那我們還等什麼現在就按日程開始
看看今天我們會講些什麼
NSURLSession API給我們提供了非常豐富的類
和方法可以簡化現代日常網絡工作的複雜性
今天我們就來討論下NSURLSession API已取得的發展
我還要和你分享一些它的新特性
和我們對這個API所做的強化
我們將會用一個實例應用向你展示
一些新特性和運行狀況
我來花些時間談談安全性
對於你們用戶來說保護你們的數據和隱私很重要
如果這個對你們很重要
我們就知道這個對你和你的應用程序很重要
我會和你們分享下我們做得一些技術強化
對於NSURLSession安全性
在講座的整個階段
我會不時的和大家分享一些最佳實踐和技巧
這樣你就能讓你的應用變得更了不起
好了 我們先從頂層API開始看起
它對Apple所有平臺的應用程序都是可用的
這麼多年來Foundation框架一直支撐着NSURLConnection API
NSURLConnection現如今成爲了一個強大的網絡抽象
它提供了很多非常好的基礎網絡功能
可以被開發者在應用中使用
但是 我們常問自己怎麼才能做的更好
還有開發者會想要我們做什麼
於是我們就坐下來討論這個話題
然後我們發現很多問題的答案都和
配置網絡有關
但是在應用中配置網絡可能會非常困難
特別是你需要
在同一個應用程序中配置不同類型的網絡
因此 我們就採取了行動
在2015年我們正式的棄用了NSURLConnection API
意思是我們不會對那API增加新功能
它只能得到很少的維護
但是我們在2013年的WWDC 上正式棄用之前
我們引入了NSURLSession
來替換Foundation層網絡的API
我們當時提倡過你們我們現在繼續提倡你們
在網絡代碼中開始使用NSURLSession API
現在正在使用的應用
和你未來即將開發的應用程序
既然NSURLSession是最好的頂層API
對於Apple平臺的網絡編程來說
先來看一些NSURLSession的基礎知識
如果你想要一個詳細深入的NSURLSession介紹
我推薦你去2015年 WWDC
特別是2014年的
然後看看那些
和NSURLSession講座配套的視頻和幻燈片
我一直吹捧NSURLSession API
推薦在你的應用中使用這個API
那到底爲何NSURLSession值得這樣的稱讚？
其中一部分好處是我們會持續有力的支持
HTTP/1.1協議
我們也支持SPDY協議
但我們不贊成新網頁服務的建立基於SPDY協議
你應該朝前看 使用HTTP/2協議
顯然我們的NSURLSession支持HTTP/2
我們的支持是基於RFC7540的
而且我們會不停的給這個協議增加新的功能
應用安全傳輸 或ATS
是NSURLSession內置非常好的功能
它是一個安全性功能可以提高隱私保護
和數據完整性在應用和網頁連接過程中
ATS最重要方面之一
是你的應用必須使用HTTPS協議
同時它允許你 也就是開發者
在建立連接時採用最佳實踐
通過HTTPS來和遠程服務器通信
HTTP嚴格傳輸安全或叫HSTS
是NSURLSession內置的另外一個非常好的功能
這個功能保護了用戶的數據和隱私
現在它可以通過HTTP報頭進行配置
來自你的網頁服務
或者它可以通過預加載的列表進行配置
（列表）是嵌入在你應用程序系統中的
當配置好了以後所有被傳輸 發送 接收的數據
都會通過一個安全的連接進行
HSTS最棒的
是它不需要在你的應用程序中進行任何代碼改動
所有非常好的內置功能都支持
來處理緩存cookies代理
和認證請求的內置子系統
所有這些都是NSURLSession自帶的
最後特別是 配置
正如我所說我們討論了很多如何才能把
網絡或在你應用程序中配置網絡變得簡單一些
因爲我們需要更好的去控制網絡
所以我們刻苦鑽研了配置這一塊兒
爲了達到二級精度和讓你更好的控制網絡
在NSURLSession中我們創建了一個新的類
叫NSURLSessionConfiguration
這個類包含了很多你可以配置的屬性
你可以在你的應用程序中
根據不同的網絡需求創建配置文件
這裏是一些屬性的一個樣本
你可以用NSURLSessionConfiguration來設置它們
安全傳輸層協議或TLS版本
你可以控制TLS版本的最低值和最高值
以便你的應用來支持
我們默認設置TSL最低版本是1.0最高版本是1.2
你可以用你的應用程序控制蜂窩數據的使用
你是否允許你的應用使用蜂窩網絡
可能你只想用Wi-Fi網絡你就可以在這裏設置
你可以指定你的網絡服務類型
這裏的一些例子可能都是默認值
也是標準的網絡數據流量
你的應用可能會有VoiP控制
或視頻數據和聲音數據各種不同種類的數據
說實在的這只是低端網絡層的一些提示
告訴你都有什麼樣的數據這樣才能建立一個高質量的服務
這對你設備上運行的程序是最好的
Cookie政策
也許你想讓你的cookie只存在一段時間
或者一直存在
這裏就是設置它的地方
同理 對於緩存也許你想要一個臨時緩存
或者在加載應用時用持續緩存
這裏就是設置它的地方
你還可以指定存儲對象
好吧 有可能你需要在不同類型的網絡之間共享緩存
或不同類型網絡間共享cookies而且全部在你同一個應用中
這裏就可以設置存儲對象實現那個配置
超時設定你可以設置資源和請求的超時時間
這樣你的應用就可以處理網絡中的錯誤情況
假設大多數人都有些瞭解NSURLSession API
若沒 去2014年 WWDC 看看關於NSURLSession部分
你會更深的瞭解那個API是怎麼工作的
我想對於我們剩下要談的部分
最好能看一下NSURLSession
從代碼角度來看是怎麼工作的
很簡單 我們第一步要做的
是創建一個配置對象
第一件事 這裏我們把它稱作NSURLSessionConfigurations
.defaultSessionConfiguration
我們全部使用默認值然後我們就有了一個非常簡單的配置可以使用
現在我們把那個配置傳給一個session
通過調用NSURLSessions emitter可創建一個session
它接收的參數是一配置對象
噢！我們就有了一個非常簡單的session可以使用
有了這個session我們就可以做點事情了
好 我們首先要建立一個NSURL
並指定它的端點
就是我們從哪兒接收和請求數據
當我們有了它我們就可以新建一個任務
在此我們調用dataTask方法
然後把NSURL對象
是我們之前新建的傳給dataTask方法
我們也提供一個閉包
這個閉包在這裏被異步地調用
當我們的任務加載完成時
請求的資源就返回給了我們
老樣子 別忘了你要確保調用了task.resume
我們新建的所有任務都處於掛起狀態
你必須調用task.resume來執行那個任務
好了 現在複習下 簡單的複習
NSURLSession實際上就是一個三部曲
首先你需要新建一個配置對象
有了那個配置項你就可以新建你的session
有了session你就能開始幹活了
還要在session上新建些任務
我現在要建議給你些最佳實踐
一定要避免單任務對單session的模型
你絕對不應該這樣設置你的網絡
說真的 你應該這樣設計
有一個session服務建立很多很多任務
當然你也可以有多個session
但是一定要避免單session對單任務的模型
原因是它真的會降低你的網絡性能
你可以通過創建很少的幾個sessions運行很多任務
這樣就會更好地管理內存優化OS資源使用
像我提到過的NSURLSession API一直在改進
我們來談一下HTTP/2協議
還有我們一直在這個協議上做出的努力
都和NSURLSession相關
在NSURLSession中對HTTP/2協議的支持
是去年在 WWDC 上引入的
它正在變得熱門起來
你知道吧 大的因特網服務提供商逐漸開始支持HTTP/2
是什麼讓HTTP/2協議變得如此吸引人
那我們就來看一下它的一些功能
HTTP/2協議非常棒的功能之一是支持多路複用技術和併發
這個功能允許多個請求和響應
同時發生
響應可以不按順序被接收
所有的響應都在一次TCP連接中完成
這個協議另一個很棒的功能是報頭壓縮
這樣可以減少HTTP/2報頭的大小
這也減少了在網絡上往返的次數
這樣對帶寬更好
而且更好的是可提高你應用程序的性能
還有一個很棒的功能是流的優先級
作爲HTTP/2的客戶端
你可以指定從服務器返回資源的優先級
這就允許你留意並調整
你應用的網絡
所以本質上講HTTP/2都是關於性能的
這樣會提升終端用戶的體驗
當他們和你的應用進行互動時
好了 關於HTTP/2我們還有最後一個功能要來看一下
今天我們介紹的是NSURLSession
對於HTTP/2服務器推送功能的支持
那麼什麼是服務器推送
當客戶端發出一個請求服務器就會對請求做出響應
但同時 它可以推送額外的響應給客戶端
試想一個網頁
它是由很多很多資源組成的
與其讓客戶端在網絡上一個個的抓取資源
服務器可以在發送原始響應的同時
推送額外客戶端可能會用到的信息
這樣服務器推送就避免了HTTP/1.1和無服務器推送產生的HTTP/2
如今所要求的網絡上往返多次
現在我想請大家注意下服務器
很顯然得支持這個協議得支持HTTP/2
還得進行配置
來使用服務器推送的功能
服務器推送現在可以被
使用NSURLSession的應用程序使用了
沒有必要去選擇性加入沒有搞笑的屬性你需要去設置
它就在那兒就這麼簡單
這就是我們強烈認爲
NSURLSession API是如今應用程序可以使用的最好的API
我們現在來花幾分鐘深入探討下
服務器推送如何讓你的應用受益
我有一個圖表代表着一個應用使用NSURLSession的情況
它是用HTTP/1.1協議來做一些網絡加載
現在我們往下看這個圖表時間在累積
這些總共的延遲
就是當我們的應用程序進行網絡加載時產生的
下面 首先我們的應用要繼續開始一個任務
這個任務要請求index.html
我們會假設一切運行良好因爲網絡會辦到的
我們就會從服務器得到響應包含我們請求的數據
除了index.html的數據
我們發現時間已經過去了
我們的總延遲在累計 在增長
現在我們的應用要繼續執行另一個任務
然後從服務器請求style.css
假設一切正常工作
我們將會得到響應
我們就有了style.css
我們的總延遲也開始增長
隨着在網絡上獲取所需資源的時間
現在應用程序將繼續執行最後一個任務
請求background.jpg
我們會從服務器得到響應就有了background.jpg
我們的應用到此就結束了它的網絡加載
再來看圖表我們看到這個就是我們的總延時
用的是HTTP/1.1協議進行加載
再來看我們的應用程序
當它可以使用服務器推送的情況
我準備把HTTP/1.1加載結果的圖表移到
一邊來做參考
我們的應用將再次繼續一個任務請求index.html
這是我們第二次得到響應的總延遲
我們的總延遲的變化
和無服務器推送比相差不大
這是預料之中的
會發生的是
在原始請求響應的同時
服務器會推送其他資源給NSURLSession
這個會和原始請求一起
或者是對原始請求的響應
當我們的應用繼續第二個任務時
也就是請求style.css時我們幾乎立馬得到了響應
這是因爲服務器推送給了我們這個數據
在我們知道需要它之前
我們就有了style.css看累計時間我們注意到
style.css的延時非常的短
比起HTTP/1.1而言
需要加載的是一摸一樣的資源
現在 我們的應用繼續了最後一個任務請求了background.jpg
又一次 我們很快得到了響應
應用得到了background.jpg
我們把這次總延時加到累計總延時上
到這裏 應用結束了它的網絡加載
我們看到使用服務器推送的HTTP/2所用的總延時
比使用HTTP/1或者不用服務器推送的加載時間要短的多
能提高性能的原因是有了服務器推送
我們就能縮短在網絡上多次往返的延時
當我們需要請求資源的時候
下面 有請Andreas Garkuscha
向我們展示在實際應用程序中服務器推送是什麼樣子的
Andreas
謝謝你 Jeff
大家早上好
今天我將向大家展示的是
當你的應用加載資源時使用HTTP/2服務器推送的優勢
你們看到的是一個應用非常普通的部分你們很多人
可能已經實現過
或者在使用你們已有的應用時至少見過
你現在看到的可能是一個針對攝影者的社交應用
可以展示最受歡迎的照片
可以爲特定的攝影者列出最受歡迎的圖片
可以單獨看照片
可以看下一張
可以看上一張 可以回到列表最頂端選擇另外一張進行瀏覽
等等
這個應用也可能是關於食譜的應用
或者音樂流的應用在向我們展示專輯封面
這裏有一個應用正在從服務器加載資源
假設它是在加載和展示一些圖片
請注意的是出於演示原因這裏有一個開關
它允許我們在初始URL上
選擇配置服務器推送或者沒有服務器推送
在這兩種情況下首先我們請求一個初始文檔
裏麪包含有圖片的URL以便加載
然後我們請求圖片
如果沒有使用服務器推送什麼都不會被推送
我們就需要發送請求
讓每一個圖片都通過網絡傳回來
在啓用服務器推送的情況下我現在就選擇到這個模式
正如Jeff之前解釋的
請求初始文檔就會引發服務器推送資源
到你的應用程序裏
這就不用通過網絡爲每一個圖片發送請求
數據任務請求的數據就會
從服務器推送存儲中直接傳遞到你的應用程序裏
現在我們來對比下服務器推送和無服務器推送的加載性能
我將會在初始URL上在有服務器推送
和無服務器推送之間轉換
幾次
這樣你就可以看到當服務器推送啓用時
整個集合視圖會加載的快一些
但是到底快多少？好吧 讓我來展示給你
現在示例應用程序即將給我們呈現結果
這是當前視圖的底部
紅色的是無服務器推送的最快結果
綠色的是服務器推送的最快結果
讓我多做幾次
藝術家視圖也是一樣的
多做幾次服務器推送關閉 服務器推送開啓
你會發現服務器推送的加載速度至少快2倍
推送圖片大概快2到3倍
在高延遲的網絡環境中
就像我們現在正在使用的
這樣的網絡是你的應用程序
在使用蜂窩數據或很慢的Wi-Fi下可以碰到的
我準備了一個視頻來展示
服務器推送和無服務器推送的比對
讓我來展示給你
你能看見有服務器推送用戶已經在瀏覽圖片了
另外一個人還在試圖加載藝術家視圖
讓我們再看一遍
又一次 右邊使用服務器推送的用戶
比左邊無服務器推送的用戶進展快的多
要快2到3倍
試想下
想像下你能給你的用戶提供的用戶體驗
你只需在你的HTTP/2服務器上配置服務器推送
你連程序中的一個代碼都不用改
這太棒了簡直完美
這就是服務器推送的演示
非常感謝會議愉快
好了 換回Jeff
好 謝謝Andreas
下面讓我們總結下我們看到和討論過的
關於HTTP/2和服務器推送的內容
僅NSURLSession API支持服務器推送
所以若你在寫新的應用或還用NSURLConnection
我們強烈建議你馬上改用NSURLSession API
利用服務器推送不需要任何代碼改動
不需要選擇加入直接就可以用
你的應用有了服務器推送就能以最佳方式運行
讓你的用戶對你的應用程序有甚至更好的用戶體驗
NSURLSession API的另一個改進
是附加的Network Statistics
那麼在場的誰喜歡統計？有沒搞統計的人？
有沒熱愛統計的人？
好了 我這兒有個統計給你準備好了嗎？
就是這個
好吧剛纔不好意思 抱歉
我們將要看些實際有用的統計
這個就是 我們相信網絡統計就在那2%有用的數據裏
那麼 它爲什麼有用？
你們的應用是否碰到很差網絡性能的時候
我猜有些人遇見過
你怎麼做才能發現到底哪兒出了問題？
你怎麼調試？
我們相信網絡統計對你們會很有用
當你在開發或調試環境下的時候
你能用這個收集信息可能在實際運行時
可能你會最大限度利用Test Flight
然後收集一些你的應用在實際運行時的信息
Network Statistics是關於
你的應用中網絡加載的性能分析
是關於找到並修復和網絡相關的漏洞
也是關於讓你更好理解
你的應用裏的網絡表現如何
目前 iOS  macOS和tvOS平臺支持網絡統計
在我們開始看實際統計數據之前
讓我來解釋下你怎樣才能得到這些數據
要得到數據我們需要看一些代碼
在此我們有一個全新委託叫DidFinishCollectingMetrics
這是NSURLSession Task Delegate類的一個委託方法
當你實現這個委託時
它需要接收一個任務參數被用來收集度量值
還要接收一個新的類對象這就是NSURLSessionTaskMetrics
NSURLSessionTaskMetrics類有一個屬性叫taskInterval
這是一個時間間隔從任務建立開始到
所有的統計數字剛被收集完成
馬上就可以傳送給
你的didFinishCollectingMetrics委託爲止
我在這裏向你展示的另外一個屬性是redirectCount
這個很直接如它的名字所示
這是HTTP重定向發生的次數
在任務執行期間
NSURLSessionTaskMetrics的最後一個屬性
叫transactionMetrics
這個屬性纔是核心
這是網絡數據的靈魂
你可以從這裏得到一個數組包含NSURLTaskTransactionMetric對象
我們來仔細看下這個獨特的新類因爲
這纔是非常有用的度量值所在的地方
爲了更好的理解這些度量值
我們得把他們分割成4類
頭兩個NSURLTaskTransactionMetrics的屬性
組成了第一類
我們把它稱作請求和響應
這裏有兩個屬性叫做請求和響應
它們允許你去分析我到底要的是什麼
還有對原始問題的響應是什麼
統計數據的第二類是關於協議和連接的
屬性networkProtocolName
告訴你傳輸時用的是哪種類型的協議
和收集了的統計數據
這裏是你可能看到的名字的列表
HTTP/1.1 HTTP/2或者SPDY
注意這個列表可能而且也會隨時間而變化
你能接觸到的另一個屬性是isProxyConnection
這個告訴你事務是其中一部分
或者在數據採集期間有代理連接參與
或者統計數據被採集或收集了
isReusedConnection這個屬性會被設置爲是
如果在資源獲取的時候使用的是持續連接
度量值的第三個分類只有一個屬性
它處理的是資源加載或加載信息的信息
這個單一的屬性叫resourceFetchType
它告訴你的是一個資源如何被得到
你在這裏可以看到網絡加載的一些數據
它意味着資源是從網絡進行加載的
或者通常所說的源加載
你可能會看見本地緩存
意味着資源是從本地緩存獲取的
資源是在你應用程序本地保存
不需要網絡事務參與
還有服務器推送
這個說明資源是從服務器推送後的緩存裏找到的
當你發送了相應的請求時
第四類事務
和連接的建立和傳輸有關
第一組度量值
測量的是網絡連接建立所花的時間
第二組度量值測量的是網絡加載中和HTTP相關活動的時間
這些屬性是時間戳
每有一個事件發生時被記錄一次
讓我們仔細看看這些度量值和它們被收集的時間
在網絡加載被執行的時候
要做這個我們來看一個很簡單的網絡加載
值得注意的是這只是加載中某一類的某一個模型
在網絡加載時會有各種各樣的活動發生
你有緩存查找你有cookie查找
你要處理重定向有時候還有請求認證
但是我們讓它簡單點只要能達到我們的目的就行
NSURLTaskTransactionMetrics類
包含的屬性中含有在不同點的所有的這些時間戳
那麼 我們先從
fetchStart開始
fetchStart是應用程序開始請求資源時的時間
這個獲取可以從本地緩存中實現
或者可能是源加載的資源
我們現在看的是domainLookup
domainLookupStart屬性
這個是資源開始準備進行名字查找的時間
這個是DNS查詢
它把主機名轉換成一個IP地址
所以domainLookupEnd是查找完成的時間
一個IP地址會發送回給調用者
這裏我們會看一下
連接建立時我們收集到什麼樣的度量值
connectStart屬性是應用準備運行
或者與遠程服務器建立TCP連接的時間
這個值可能是無效的
如果響應是從本地緩存中發現的
我馬上會談connectEnd屬性
如果你用的是HTTPS你需要一個TLS握手協議
我們得到了一個相關的統計數據
secureConnectionStart度量值是
在應用程序準備開始安全握手
來保證當前連接的安全性的時間secureConnectionEnd
是當安全握手完成時 它也計時完成
正如我提過的connectEnd
是當一個應用
剛剛和遠程服務器建立起連接的時間
包括所有的安全相關的握手
這就是一個連接被認爲建立完成的時候
現在我們有了一個建立完成的連接
我們實際上可以做一些HTTP
我們有一小部分可以收集的數據
是關於請求和響應的
首先我們有requestStart
這個是當應用開始請求資源的時間
不管有沒有獲取資源
從本地緩存也好從遠程服務器也罷
如果需要一個源加載
這就是HTTP報頭準備傳輸第一個字節的時間
requestEnd是向網絡發送請求的最後一個字節完成時間
responseStart
這個代表服務器響應返回的第一個字節
被收到的時間
如果這是一個緩存加載
這就是從緩存收到緩存響應的時間
responseEnd是當應用程序剛剛
收到請求資源的最後一個字節的時間
我們一直在看源加載過程中收集到的數據
那就是 我們得通過物理網絡發送每一個字節
網絡請求有可能
從本地緩存中得到我也提過這點
如果一個本地緩存包含我們請求的響應
那就沒有必要用DNS
也就是沒必要建立TCP連接等等
在此緩存情況下這些統計數據值會被設成無效
所以當你看這些統計數據時請留意一下以上情況
那麼 你有可能會問“嗯 這個非常酷
但我如何在我的代碼中使用它？”想實現它 我們需要來看一些代碼
就像我之前給你們講過的我們從委託入手
這裏我有NSURLSessionTaskDelegate的一個實現
它實現了新didFinishCollectingMetrics
委託的回調函數
而我在此展示的這個
在此時其實什麼用都沒有
我完全能預料到你們會在這裏搞出一番名堂
有可能你會輸出些日誌
一個調試的好地方
可以看看你的網絡出了什麼狀況
最大限度利用Test Flight然後輸出些日誌
這樣你就可以收集一些在你應用程序實際運行時
網絡性能如何的信息
這都取決於你
讓我們回到這個例子上來
我們來做一些清理代碼
第一件事 我們要對委託實現
實例化出一個對象
我們要新建一個默認的配置對象
我們想全部使用默認值只需要調用defaultSessionConfiguration
下一步我們要新建一個實例
或者說我們要新建一個NSOperatonQueue實例
我們不得不這麼做是因爲我們需要有個地方 有個隊列
這樣我們的委託才能真正的開始工作
像我之前提到過的
我用配置對象創建一個NSURLSession
但在此我將調用NSURLSession的init函數
它可以接收額外的參數
也就是那些實例化的委託對象
和我們創建的NSOperationQueue對象
好了 現在我們可以幹活了
我們用session創建一個任務
那我們需要我們的任務做些什麼？
那就讓它做個簡單的加載服務器根目錄下的網頁吧
在這我又一次調用了dataTask方法
它要求一個閉包作爲參數
注意下這個閉包
我們的didFinishCollectingMetrics委託回調函數
會首先被調用而且在閉包被調用之前
那麼
噢 還有 別忘了你的老朋友resume任務
你得確保你讓那個任務恢復執行這樣工作纔會真正的開始
下面是一個非常非常簡短的複習怎樣實現
networkStatisticDelegate回調函數和讓它能正常工作的代碼
我相信你們會去做很多更有意思的事情
會更富創造性
在你使用NetworkStatistics的時候
我希望你們喜歡剛纔看到的關於Network Statistics的內容
你們感覺如何？
好了
現在你們可以接觸到關於後臺
網絡傳輸中到底發生了什麼的一些信息
這會在調試環境中幫你
找到漏洞並修復你的應用
讓你的應用達到它們理想的工作狀態
還有調整 真正的調整網頁服務和你在開發的應用的類型
這樣它們可以以最佳的方式運行
再說一次 這個新功能在NSURLSession API裏已可用了
現在到了使用NSURLSession的時候了
在最後一個環節
我會談論一個對每個人都至關重要的話題
作爲一個開發者
我們都在意保護用戶數據的隱私
NSURLSession API有一些內置的非常好的功能
我想給大家分享一些我們對這些功能作出的加強
傳輸層安全 簡稱TLS
是一個保護網絡終端數據傳輸的協議
有時候你聽到SSL這是TLS的前輩
所以TLS和SSL有時候會換着用
TLS利用cipher來實現這個保護
cipher在一端把數據打亂打亂的數據通過網絡發送出去
接收端用一樣的cipher
還原打亂的數據這樣它就可以被理解和使用
如果有人截獲了這些數據
那隻能是一大堆亂碼
他們沒辦法使用這樣就保護了數據
有一點發生了變化我希望提醒一下大家
那就是APPLE的平臺不再支持RC4 cipher
想要了解更多細節我推薦你看一下
週二關於安全性的講座
有機會的話加入他們的實驗室
然後在那兒問些更細緻的問題
這對你的應用程序意味着 儘管
你之前的連接是成功的
它有可能突然失敗
這有可能是因爲服務器只支持RC4 cipher
我們有一個方法你可以測試下這個理論
Mac OS有一個命令行工具叫nscurl
可用來測和你的應用通訊的只支持RC4 ciphers
的服務器
這裏 我會用nscurl簡單地抓取服務器根目錄的文檔
如果我執行這個命令
哇！我看到了HTTP加載失敗
太搞笑了我之前還能連上那個服務器
讓我們來看看我們關於RC4的理論到底成不成立
在這裏我向nscurl添加了一個標記叫enable-rc4
它的意思是我會強制使用RC4
在連接的客戶端這邊我接着執行這個
哇！一下子就連上了
所以這個證明瞭服務器只支持RC4
我要和服務器的管理員談談
怎樣才能把一些安全的cipher加進服務器
那樣我們就能在應用程序中保護用戶數據
我希望你理解這點
我們的平臺不再支持RC4 cipher了
這可能會影響你的應用程序所以請注意下
應用程序安全傳輸 簡稱ATS這是一個非常棒的功能
它允許你爲你的應用設置安全性策略
你指定密鑰來同意授權
這些成爲你應用程序的策略
我們向其中添加了兩個新的密鑰我想和你們分享一下
第一個是NSAllowsArbitraryLoadsInWebContent
如果你有一個WK網頁視圖而且限定了範圍只有那個類、
如果在你的應用程序中有那個類、
而且你把這個密鑰呈現出來那個對象就會被允許、
使用你指定的任何種形式的網絡加載、
它會忽略你的應用中任何其它策略
只有在這個對象內適用
任何這個對象之外的加載會遵循你的安全性策略
另外一個密鑰是NSRequiresCertificateTransparency
這個要求你的應用收到的證書
必須支持證書透明功能
證書透明是簽名證書的一個功能
它允許你使用一個更加有保障的證書
可以保障提供的證書是合法的
而且你可以相信終端提供給你的證書
更多關於那個主題的細節
我還是要推薦你去看一看這些關於安全性的講座
或者參加他們的實驗室來瞭解證書透明的更多細節
我談過的所有內容都是關於NSURLSession API的
我們也目睹了這個API通過新增加的功能而進步
我們非常興奮的想看到
你們會對你們的應用程序做出怎樣的調整
在你們利用某些新功能時
我介紹了對HTTP/2服務器推送功能的支持
這意味着你們的應用將可以運行的更良好
我介紹了Network Statistics
你就可以內省你的應用程序的網絡行爲
這是前所未有的
這會提升你應用程序的終端用戶的用戶體驗
我還分享了ATS中一些安全性相關的功能
和棄用RC4 cipher
你的應用現在可以實現最佳的安全實踐
來保證你用戶數據的安全
我們希望你會在應用程序中使用NSURLSession
不僅僅因爲這些原因也因爲所有非常棒的功能
都內置於NSURLSession API
如果你需要更多信息這是今天講座的URL鏈接
你可以回去回顧我們今天談到的一些內容
我們認爲你可能會感興趣的一些和這個主題相關的講座
我把它們在這兒給你列出來了
好的 就是這些謝謝
希望你在餘下的WWDC 會議裏過得愉快 謝謝