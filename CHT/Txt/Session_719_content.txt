性能和電池壽命的I/O優化
大家好 歡迎
我叫Kushal Dalmia我的同事Terry Long
我將爲大家講解I/O優化
爲性能和電池壽命
在本次演講中 我們將講解什麼是I/O
它會如何影響你的應用
以及如何提高應用的性能
通過提高其I/O性能
我們現在開始
衆所周知 每年設備越變越大越變越好
屏幕分辨率增加 在過去十年增加了16倍
在相機領域也有類似提高
已經可以拍攝4K HD視頻
還可以從我們的移動設備裏拍出令人驚豔的的高畫質相片
所有這些改進造就更爲豐富的媒體每天被生產
和消費
爲了關注它們的前景
我們來看看iPhone壁紙大小的趨勢
如果跨越設備和時代來看iPhone壁紙
可以發現其呈指數增長
iPhone 6s Plus上的壁紙大小
是對應的iPhone 3G的14倍
所有手機數據都有相似的趨勢
我們編寫和使用複雜的應用
在遊戲 信息和社交網絡領域
我們工作和存儲豐富的文件 如PDF
我們分享和捕捉高品質音頻和視頻文件
現在爲了管理這種數據爆炸
應用需要在系統資源利用方面做到非常高效
主要系統資源有CPU 內存和I/O
關於CPU和內存 我推薦大家觀看去年的WWDC演講
“iOS和watchOS上的性能”
今天我們將來講解I/O
I/O 即輸入輸出是和本地文件存儲進行互動的操作
或和基於網絡的服務器
和文件系統互動的操作
以及處理文件讀寫的操作都被認爲是一個I/O
和網絡服務器交流是基於網絡I/O的很好的範例
I/O如此有趣的其中一個原因是
在I/O技術上發生了巨大的變化
性能特徵上也是如此
考慮一兆字節的延遲
當寫入最平常的I/O媒介時
如SSD 硬盤和普通Wi-Fi網絡
你可能會注意到 同樣的操作
大概耗時幾毫秒到幾百毫秒之間
根據互動的媒介不同
I/O之所以如此重要的原因
是應用上I/O性能直接影響用戶體驗
應用性能的延遲時間的改變
可以表現爲響應問題
由於I/O是系統中的共享資源
你的應用的I/O性能可能會影響整體系統性能
我們一會兒將會看到
I/O也會顯著影響設備上的電池壽命
爲了幫你們瞭解應用上I/O使用情況
我們提出了自己的I/O哲學
該I/O哲學有四個主要支柱
減少應用裏的I/O用量
用正確的線程完成這些I/O
採用合適和高效API完成這些I/O
最後 對應用中I/O性能測試和測量
當我們通讀剩下的文檔時
我們會瞭解其中每一項的更多細節
提高應用中I/O效率的最好方法
是減少I/O用量
每一個I/O操作都和多個硬件功能相互作用
在設備上
這是一個現代設備的簡單框圖
包含部分功能及它們對電池壽命的影響
當應用使用I/O時會在CPU上運行代碼
訪問內存
最後從硬盤上讀取或寫入數據
如果還涉及到網絡
基於網絡收音機也參與到互動中
所有這些組件聯合起來的能量消耗
讓I/O在電池使用方面操作非常沉重
由於I/O對設備電池壽命的負面影響
我們來看看可以使用的最好的實踐技巧
來減少應用上的I/O用量
首先是緩存
基本理念是 建立數據的內存副本
而不是每次操作都訪問磁盤
爲了決定應用裏的數據是否應該在內存中建立緩存
你應該查看數據的訪問模式
被頻繁寫入或更新的數據
也許是在應用中建立緩存的好對象
還有 當從磁盤中讀取需要昂貴處理步驟的數據
比如 解壓縮一個圖片文件
可能是應該緩存的一個好例子
即便如此 應該注意內存和I/O平衡
和I/O一樣 內存也是系統中共享和有限的資源
應該格外小心用戶需求
如果決定在應用裏建立緩存
我們推薦使用NSCache API
因爲它們可以很好地處理內存壓力條件
下一個實踐技巧是合併I/O
基本理念是
把系統裏的I/O推遲到之後更爲合適的時間
由於I/O技術的工作方式
更大更少的I/O對系統來說總是更爲有效
其中一種實現方法是
是採用應用狀態改變通知
比如 後臺應用數據來安排I/O
在macOS 你可以使用集中任務計劃 API
來安排維護和備份任務
系統會找出運行這些任務的最佳時間
想了解更多這些API的信息
我們推薦觀看2014年WWDC演講
“編寫節能高效的代碼”
我們已經看過一些最佳時間技巧
來減少應用中的I/O用量
我想爲大家介紹我們的示例應用是Terry和我編寫的
在剩下的演講中我們會一直使用這個應用
來演示最佳實踐技巧的實際影響
這個應用叫ImageBox
ImageBox是iOS和macOS上很棒的應用
讓你可以添加和瀏覽圖片
對於每一個圖片 它將顯示其縮略圖
顯示相關標識 比如喜歡
或者某張特定圖片是否有相關注釋
當你點擊某特定圖片 將進入詳細視圖
可以讓你把圖片標記爲喜歡 取消喜歡
或者爲它添加註釋
我們編寫了這個應用
我們想要知道它是否I/O高效
並且在I/O性能方面也表現良好
我將來介紹可以使用的工具
來決定是否在你自己的應用上使用
該工具叫做Xcode調試儀表
來看看它如何使用
爲了使用該工具只需從Xcode UI中運行項目
這會在設備或模擬器上啓動項目或應用
點擊Xcode調試導航器
它顯示了應用裏的實時數據
關於應用正在使用的所有系統資源
有CPU 內存 能量 網絡和磁盤
由於我們對應用中I/O活動或I/O性能感興趣
我們選中磁盤
一旦選中 可以注意到會顯示實時數據
應用中發生的讀取和寫入數據
看上去該應用每幾秒都進行大量讀寫入
即使沒有用戶活動時
爲了進一步調查我們想進入Instrument
用Instrument來找出原因
繼續在Instrument裏點擊配置
點擊重啓按鈕
如此操作時Instruments提供了組模板
你可以從中選擇分析應用
因爲我們對應用裏I/O活動感興趣
繼續選擇系統使用情況 然後點擊選擇
將打開新的Instrument模板
準備記錄應用中的I/O活動
繼續開始記錄
注意到在詳細顯示區
該模板顯示了應用裏所有的系統調用
爲你進行I/O操作
還顯示了其他有用信息 比如實際和請求的字節數
對於那些讀寫操作以及相關的文件路徑
現在我將停止記錄
爲了找到剛纔看到的大量寫入
在Xcode調試儀表
我們按照實際讀寫的字節數進行排序
找出大量寫入 在最上方
有了這個之後 可以進入擴展詳細視圖
查看確切的回溯
關於應用中執行這些I/O的代碼部分
看上去是應用的委託方法
雙擊進入源代碼檢查器r
將顯示執行I/O操作的準確代碼塊
在源代碼檢查器中點擊Xcode圖標
將會回到Xcode項目
併爲你高亮顯示執行該I/O操作代碼
來看看這段代碼更詳細的情況
問題出在應用中的實現部分
委託方法didFinishLaunchingApp
作爲實現的一部分
我們新建了一個計時器DispatchSource
讓它每5秒記錄一次
且對於該計時器作爲事件處理的一部分
我們寫出整個數據存儲
我們中很多人這樣寫代碼 因爲我們想確保
應用數據可以持續定期地保存
然而 還有更爲I/O高效的方法實現
爲了修改代碼
首先我們刪除計時器的重複部分
把這部分刪除
取而代之 新建一個方法叫dataStoreDidChange
在應用中不同的地方被調用
只要數據存儲發生任何變化
作爲該實現的一部分
我們把計時器的調度源往後推15秒
用這種方法我們收集應用數據存儲的所有更新
往後推一段時間 合併寫入
當計時器最終過期時
它收集了我們頻繁採用的更新
我們把其作爲單一的I/O操作寫出
來看這些代碼在應用中的功能
再次點擊Xcode UI中的運行按鈕啓動應用
進入調試導航儀 選擇磁盤儀表找到I/O活動
可以發現應用已經不再進行那些寫入了
現它完全空閒 用戶也沒和它進行互動
這就是我們的預期效果
我們高效地合併了應用中I/O用量
提高了I/O效率
使用正確的線程
在看過了一些最佳實踐技巧可以減少I/O用量之後
我們來看看利用這些I/O實踐的趨勢
我想請Terry上臺爲大家演講
Terry
謝謝 Kushal
我們剛看了一些可以減少應用中I/O用量的好方法
避免對電池壽命產生不良影響
繼續講解我們的哲學的第二大支柱
我會講解一些方法 可以在應用中有效使用線程和隊列
達到更好的I/O性能和效率
系統中每一個線程或每一個應用都從一個線程開始 叫做主線程
該線程很特別 有幾個主要功能
主線程的第一個功能是處理輸入
如果點擊應用裏的一個按鈕
主線程負責處理該輸入
並作出響應
此外 主線程還負責更新界面
這適用於比如繪製視圖操作佈局 或動畫
當主線程空閒時 它隨時備用響應輸入和更新用戶界面
但是如果在主線程上執行其他操作
比如執行長任務
比如昂貴的圖片處理
這類的工作將會一直佔用主線程
也就是說它不會空閒
則無法響應輸入或更新界面
此外 我們今天關注的是
應該避免在主線程上進行I/O
我們已看到I/O是系統中的昂貴資源
需要對其正確管理
如果在主線程上進行I/O操作
使用應用的用戶會發現問題
第一個例子是在macOS上
用戶可能會看到旋轉光標
旋轉光標意味着主線程繁忙
則無法和應用進行互動
此外 在iOS上
繁忙的主線程可能會造成應用發生凍結或無法響應
最後 在主線程上進行I/O會造成動畫出現問題
比如 如果在視圖表格裏大幅度滾動
然後在主線程上進行I/O加載更多的數據
應用在做這些操作時
就無法繼續顯示動畫
就會造成諸如卡屏的問題
我想再提一次Kushal剛纔指出的演講
iOS和watchOS的性能
該演講有很多關於如何有效使用主線程的信息
現在來看看ImageBox示例應用
這次在macOS上運行
我發現 當主集合視圖想添加圖片時會產生問題
來看一下
首先從Xcode 點擊運行按鈕
Xcode啓動應用
然後點擊工具欄右邊的添加按鈕
從打開的面板選中一張圖片 點擊打開
如你所見 打開的面板並沒有消失
我們看到了旋轉的光標
終於 打開的面板消失了
我們選中的圖片顯示在主集合視圖中
這裏出了什麼問題？
我們已經知道
旋轉光標意味着主線程繁忙
所以主線程上一定有操作在運行
讓它無法空閒
所以我們無法和應用互動
我們需要找出問題
因此需要用到Instruments
回到Xcode 可在“產品”菜單裏選擇“配置”
Xcode重新編譯配置文件
啓動Instruments
這次我選擇Instruments裏時間分析器模板
時間分析器是非常好的工具用來觀察耗費的時間
每一部分代碼執行時需要的
所以我們可以利用它找出爲什麼主線程繁忙
點擊選擇
Instruments打開全新空白的時間分析器文件
默認情況下Instruments時間分析器
只在CPU活躍執行代碼時顯示耗時
其他諸如I/O的操作並沒有在CPU上活躍執行
CPU會等待I/O結束
若想在Instruments回溯中看到此類操作
首先點擊“記錄等待線程”選項
在記錄設置目錄下
現在Instruments也會顯示耗時
當我們進行其他操作時比如等待I/O
我們開始 點擊Instruments中“記錄”按鈕
Instruments啓動應用我會做同樣的操作
和之前一樣 來重現問題
首先 點擊“添加”按鈕選中一張圖片 點擊“打開”
問題又出現了
在Instruments裏點擊“停止”
看看問題所在
在繼續講解之前 我想整理一下輸出
通過只關注我編寫的代碼
而不是其他系統庫
要做到這點 首先 點擊顯示選項
在Instruments右邊
然後點擊“隱藏系統庫”
Instruments只顯示我編寫的代碼
而不顯示其他可能會調用的系統庫
現在我們來看Instruments的主詳細視圖
Instruments顯示了應用中所有不同線程
和它們執行時不同的耗時數
在本例中 我們只對主線程感興趣
所以我可以展開主線程部分
找到最繁忙的棧
本例中 我看到應用裏有一個打開的面板回調
它在數據存儲裏調用一個添加方法
該添加方法之後把所有數據存儲存到磁盤上
Instruments顯示該存儲操作耗時幾乎爲7秒
這非常糟糕
而我剛好知道該存儲方法正在寫出一個很大的Plist
這會讓問題更爲嚴重
Kushal在之後的演講會提到一些方法
來優化數據存儲操作
將使操作速度變得很快
但現在 我只想關注如何解決這個問題
使得無論該操作進行多久
我們的應用響應度都非常高
爲了實現 來看一下代碼
這裏是打開的面板回調
它在等待一個響應
當接受到該響應
它將驗證響應是否有一個指向有效圖片的URL
然後它爲圖片的集合視圖新建一個項目
並試圖把它添加到數據存儲
如果成功了
它會告訴主集合視圖重新加載數據
使得我們可以看見選中的圖片
如我們之前所見
Instruments也驗證了這一點/b&gt;
調用該添加方法非常昂貴
因爲它把所有的數據都存到磁盤
看看如何進行修復
回憶一下 應用有一個主線程
主線程正在執行打開面板回調
該回調在數據存儲中調用添加方法
這時我們看到旋轉光標
當所有操作完成
才終於可以更新主集合視圖
這顯然不是我們想要的
在這整個過程中 主線程都是繁忙的
我們無法和應用進行互動也無法更新任何界面
一種解決此問題的方法是採用中央調度 即GCD
利用GCD 可以新建調度隊列
調度隊列
是在主線程上同時運行代碼的方法
可以把昂貴的I/O相關操作移動到該隊列中
讓主線程空閒
爲了實現 我們可以在該隊列上調用async方法
然後把昂貴的操作推入
隊列而不是主線程
最後 由於UI相關操作必須要返回主線程
我們可以異步調度返回最終更新集合視圖
現在 正是我們想要的
昂貴的I/O操作正另一個隊列中進行
因此主線程空閒
也就是說我們可以跟應用進行互動
並繼續使用
來看看在代碼中實現是什麼樣子
我還使用了之前同樣的openPanel回調
首先新建GCD調度隊列
並提供一個描述標籤
本例中 我建立了一個隊列
可以重用所有數據存儲操作
接下來 把昂貴的操作
當添加圖片時 移動到這個隊列
在調度隊列中把代碼塊提供給async方法
最後 要更新UI時 可以調用dispatchqueue.main.async
傳入包含所有UI相關操作的代碼塊
完成之後 來看結果
如果在Xcode裏重新編譯運行
首先點擊“運行”按鈕
等待應用啓動
再次嘗試添加圖片操作
點擊“添加”按鈕從打開面板上選中一張圖片
點擊“打開”
可以看到 打開面板立即消失
我們可以繼續和應用進行互動
添加更多的圖片
你還會發現 在主視圖上我添加了一些佔位圖片
這只是表示 我們正在處理該數據
並存到磁盤
當所有數據完成添加和存儲
所有的圖片都會顯示在主集合視圖
在整個過程中 主線程都是空閒
也就是說應用響應極爲迅速
這個結果正是我們想要的
現在我們把操作從主線程移到調度隊列中
應該考慮告訴系統該操作的內容
使系統可以爲我們管理資源
爲了實現 可以採用一種叫“服務質量”的方法
服務質量是一種方法 可以告訴系統
正在執行的操作的內容
使系統可以正確地管理資源比如CPU或I/O
系統管理這些資源
在系統不同的運行中進程之間
以及應用內部不同的線程之間
當使用服務質量時
請記住正在執行的工作的三個屬性
可見性 重要性和期待值
問問自己三個問題
正在執行的工作是否對使用應用的用戶可見？
其次 該工作的重要性是什麼？
該工作是否必須完成在別人可以繼續使用應用之前？
最後 該工作預計需要多久
是否是立即發生的還是估計需要很長時間的？
在繼續之前 我想推薦去年WWDC上的一個演講
叫作 用GCD建立響應式和高效的應用
該演講講解了很多GCD的細節
以及如何使用服務質量
我大力推薦大家觀看
當我們思考完這三個屬性
我們準備從四個服務質量類裏選擇一個
第一個服務質量類
是用戶互動
用戶互動被指派給主線程
爲了完成比如響應輸入和動畫的操作
所有其他和主線程異步發生的操作
都應該使用其他三個服務質量類之一
其中第一個是用戶啓動
用戶啓動工作對應用用戶可見
用戶期望得到立竿見影的效果
用戶可能也需要該工作結束
在他們可以繼續與應用互動之前
一個好例子是
如果我點擊一個按鈕 切換到新視圖
可能需要在不同的隊列中加載資源
爲了顯示該視圖
該工作應該在用戶啓動中進行
服務類的第三個質量是實用工具
實用工具服務質量通常和
有進度條或其他活動顯示器的工作相關
該工作通常耗費很長的時間
它也對應用用戶可見
這方面一個很好的例子是渲染電影
它不會阻擋任何人
繼續使用你的應用
但是它也耗費很長的時間才能完成
最後一個服務質量類是後臺
後臺操作對用戶不可見
其實 用戶甚至根本不知道它正在進行
這方面的一個好例子就是索引
索引通常對應用性能十分重要
但一般用戶不會注意到
所有這些服務質量類都很重要
因爲當你選擇服務質量類
它會幫助通知系統該如何管理資源
使不太重要的工作 如後臺操作和索引
不會消極影響重要的工作 如動畫
即使該工作在不同的進程上進行
當選擇了一個服務質量類時
有兩種方法
可以在應用中指定服務質量
第一種方法是提供一個可選QOS參數
給調度隊列的async方法
本例中 我指定了qos:.background
也就是說當提供的代碼塊異步運行時
它將使用後臺服務質量
此外 若正使用操作隊列或操作API
這兩者都有一個服務質量屬性可以對其進行設置
比如實用工具
現在我們已經初步瞭解服務質量
以及如何指定
讓我們回到ImageBox應用
看能否爲添加圖片選擇合適的服務質量
爲了實現這一點 我們可以思考這項工作的三個屬性
可見性 重要性和期望值
添加屬性是可見的操作
對應用用戶來說
但它不一定需要完成
在我們可以繼續做其他事之前
比如瀏覽圖片或添加更多圖片
此外 因爲還顯示了佔位圖片
我們給出了指示 該操作
可能會耗費較長時間
出於以上種種原因 服務質量
可能是該項工作合適的選擇
現在我們知道了一些方法可以移動昂貴工作
比如I/O 讓它們離開主線程進入另一個調度隊列
以及如何利用服務質量指定該工作內容
讓我們來看哲學的第三支柱
採用適當的API
首先我要提到的就是 資產目錄
如果你還不知道 資產目錄是一種方法
可以簡單地管理應用裏的資源 如圖片
它們被用來存儲比如應用圖標和啓動圖片
以及所支持的不同設備上的所有圖片
以及比例係數比如retina或非retina
用SpriteKit編寫遊戲時
資產目錄也用來編寫Sprite Atlases
可以利用資產目錄來標註資源
以服務按需資源功能
另一個使用資產目錄的例子是
在watch complications裏存儲資源
爲什麼資產目錄對I/O來說很棒？
資產目錄有一些很棒的存儲效率性質
首先 因爲資產目錄存儲所有圖片
用同一種優化格式
而不是許多單個文件
你可以通過使用資產目錄得到較低的磁盤佔用
此外 通過iOS上的如應用切片等功能
當從App Store下載應用時
它將利用資產目中的元數據
決定該下載什麼資源到設備上
比如若我下載一個應用到iPhone
App Store知道不需要下載任何資源
準備給iPad或其他不同屏幕分辨率的iPhone的
這會在設備上省下不少空間
此外 資產目錄對性能也很有幫助
因爲它們存儲用的優化格式
圖片加載將變得更快
如果利用它們爲遊戲編寫Sprite Atlases
由於用戶可以很好地管理一個大一點的資源
而不是很多小的資源
這些Sprite Atlases可以加快紋理渲染時間
最後 如果使用資產目錄
在運行macOS的硬盤機上
還可以加快應用的啓動時間
實際上 我們看過高達百分之十的提高
在這些機器上的應用啓動時間只需要切換到資產目錄
你可能會認爲要得到這麼大的性能提高
切換到資產目錄一定很難或很耗費時間
而事實上 如果已經使用了
標準NS圖片和基於UI圖片的API
切換到資產目錄很簡單
現在我想爲大家用一個示例項目來演示
這裏有一個還沒採用資產目錄的項目
要開始 首先可從文件菜單選擇新文件
然後從資源類別 選擇資產目錄點擊下一步
Xcode新建了一個 抱歉
系統提示時 爲資產目錄添加一個名稱和地址
然後點擊新建
現在Xcode爲項目新建了一個空白的資產目錄
要移動所有已存資產
從項目到該新資產目錄
首先打開屏幕底部的添加菜單
選擇“從項目導入”
Xcode會顯示項目中所有圖片列表
點擊“導入”
它會把所有這些圖片都移到全新的空白資產目錄中
Xcode自動找出
哪些圖片爲哪些設備準備以及以什麼比例係數
現在當重新編譯應用時它將使用該全新資產目錄
就這樣
用了不到一分鐘
並且不用修改任何一行代碼
真的很簡單 所以我強烈鼓勵
大家採用資產目錄 就在今天如果你還沒用
關於資產目錄 我還想提一點
今年有一個新的功能是 圖片壓縮
默認情況下 資產目錄的圖片是無損畫質
但今年新的改變是
可以選擇一種有損圖片壓縮格式
這些格式擁有硬件快速解壓
所以非常快
因爲有了這些壓縮格式
可以降低內存佔用
如果應用中有很多資產
會在潛在內存和空間節省方面受益良多
通過使用圖片壓縮
來看看如何使用圖片壓縮
回到剛轉化到資產目錄的項目
首先 點擊目錄裏的一張圖片
打開右邊的實用工具側欄
點擊屬性檢查器
Xcode新包含了一個壓縮彈出菜單
選中它時
它會顯示所有可用的圖片壓縮格式
本例中 我選擇自動有損
讓Xcode爲我選擇一個好格式
這是關於如何在應用中利用資產目錄的一點介紹
採用它們 使用新的圖片壓縮功能
現在我把講臺還給Kushal
他將爲大家講解其他更多的API
可以用來存儲數據
謝謝 Terry
資產目錄是既簡單又高效的方法
來管理應用中的資產
我們很多人還會想到的另一件事
是應用數據在設備上如何存儲和存儲位置
我們很多人對序列數據格式很熟悉
如 Plists XML和JSON
這些數據格式流行的原因
是因爲它們簡單好用
而且它們作爲數據交換格式也流行多年
在很多基於網絡的服務中
這些數據格式對少量只讀數據很有用
比如Info.plist文件中的配置信息
然而 它們不是數據庫
而它們不是數據庫的最大原因
是這些文件的微小更新
都會導致整個數據文件寫出到磁盤上
這非常影響I/O效率
爲了所有數據的存儲需要
建議使用Apple SQLite數據庫框架的核心數據
核心數據是Cocoa應用開發框架
用於管理應用數據
它將通過採用SQLite作爲後備存儲來處理數據持久化
它自動管理對象 對象圖形和對象之間的關係
讓你更簡單高效地管理數據
它還進行修改跟蹤
可以讓你在數據模型中進行撤銷和恢復操作
核心數據完全集合在Xcode工具鏈
因此可以建立和可視化數據模型直接從Xcode UI
現在我們知道這個優秀的工具和框架可以用來設計或編寫數據模型
讓我們思考該如何設計數據模型
最好的方法是把數據模型基於應用的UI需求
回到ImageBox
它到現在一直使用巨大的Plist
來寫出所有文件和所有圖片
和應用相關的
現在用核心數據模型來替換它
仔細思考該應用ImageBox有兩個實體
第一個是集合視圖裏的項目列表
第二個是其中每一項的相關注釋
我們來把它們放入各自的一張表裏
第一張表是BoxItem
表示集合視圖裏的某些特定項目
第二張表是註釋 表示註釋本身
BoxItem表格含有一個布爾項
表示圖片是喜歡還是不喜歡
還含有全分辨率圖片 你想表示的圖片
Notes表包含BoxItem裏所有相關注釋的主體
我們把這兩張表用簡單的一對多關係連接起來
當使用該數據模型時看看應用的性能表現
我們發現應用啓動性能非常慢
我們用Instruments調查原因
發現應用耗費了絕大部分時間
在啓動面板上獲取核心數據模型
所以我們需要查看應用啓動性能
從核心數據的角度
幸運的是核心數據讓我們做到這一點
它有一個工具集合 幫助你調查
核心數據運行情況
比如 你可在應用上設置一個啓動參數
即com.Apple.CoreData.SQLDebug
帶着速度級別讓你觀察覈心數據是如何
和其SQLite後備存儲進行互動的
核心數據Instruments模板讓你觀察任何模式
關於獲取和加載太多的數據
最後 SQLite查詢分析工具的標準集合
比如 解釋查詢可用
讓你更深入到某個特定查詢
查看其性能
想了解這些工具更詳細信息
我推薦大家查看去年WWDC文件
“核心數據的全新功能”
我們有了這些工具 來使用其中一個
找到數據模型的問題
爲了實現這一點 點擊項目
點擊編輯方案
在打開的窗口中 選中參數面板
添加一個新參數com.Apple.CoreData.SQLDebug
速度級別選擇最高3
完成後 繼續點擊關閉
現在我們從Xcode UI啓動應用
這樣做將重編譯項目加載並啓動應用
如你所見 控制檯顯示了各種日誌
關於數據模型性能的核心數據
還會注意到的另個地方
是該應用用了幾秒的時間啓動
現在還沒有結束啓動
在日誌輸出中 我們看到更多核心數據
終於 應用啓動完成
回到Xcode UI你可以深入挖掘所有日誌
找出數據模型的問題所在
讓我們繼續 在應用中實踐一下
你在這裏看到的最開始的日誌之一
是核心數據對所有行進行讀取
從SQLite數據庫在BoxItem表格
這是我們想要的
然而 下一個日誌告訴我們該讀取操作耗費了大概9秒
這非常糟糕
是應用啓動速度慢的最大原因
回到之前執行讀取所有這些數據的查詢
會注意到一點
我們在讀取全像素圖片
對於BoxItem表格的每一項
儘管在啓動屏幕上顯示的只是縮略圖
繼續 我們還發現核心數據在進行一個合併操作
在BoxItem表和Notes表間
在從BoxItem表裏讀取每一項時
這麼做的原因是
因爲是一對多的關係
在這兩個實體之間
而且我們需要在啓動屏幕上顯示一個UI批處理
來表示BoxItem是否有相關注釋
讓我們繼續修改數據模型
首先要修改的是避免兩張表的合併操作
核心數據又做了合併操作的原因
是因爲我們需要顯示UI
對於BoxItem的註釋是否出現
所以爲了改進該模型
可以簡單地在BoxItem表裏添加一個字段
叫notesPresent
該特定字段False值存在與否
告訴我們是否需要在啓動屏幕上加入UI批處理
數據模型的下一個問題
是我們讀取的是全像素圖片
在啓動屏幕上
讓我們來修復它
我們把圖片數據替換爲縮略圖數據
不再把全像素圖片數據移動到
它本身的表格
而是把這兩張表通過一個簡單的一對一關係連接起來
如很多人知道的那樣這些圖片會變得很大
可能會是個好主意 來把這些圖片
作爲單獨的文件存儲在文件系統
而不是把它們放入SQLite數據庫
所以我們將把全像素圖片
作爲數據庫本身的一部分取代爲圖片URL
並把圖片直接存在磁盤上
現在來看看應用的啓動性能在修改完之後
從Xcode UI運行項目
採用新的數據模型 編譯 啓動
如你所見
應用啓動速度快了四到五倍
只是修改了數據模型
所以讓你的數據模型基於UI需求
可以明顯影響應用的運行和整體性能
我們已經講解了減少並優化
應用I/O用量的方法
我們接下來講解如何測試I/O性能
其中一點建議是在不同設備上測試應用
如果應用發生改變 在多個平臺上
將會是一個好方法 測試你的應用
在不同的設備 在所有這些平臺上
即使應用只在一個平臺上發生改變
跨代測試也是一個好方法
因爲I/O特性有很大不同
另一個可能改變的部分
在你的環境 和應用用戶的環境之間
是網絡條件
爲了幫你測試網絡條件
或者最壞情況的網絡條件
我們提供了一個工具叫做網絡連接調節器
打開網絡連接調節器的方法是
打開設置應用
滾動到最底部 找到開發者設置
點擊開發者設置 進入這個菜單
可以看到在這裏 是網絡連接調節器
點擊 打開這個菜單
顯示了可安裝在設備上的各種配置文件
有3G 高延遲DNS以及我最喜歡的 非常糟糕的網絡
讓我們來看看使用它的情況選中“非常糟糕的網絡”
用上方的滑動按鈕開啓它
就這樣
現在你的設備會表現的好像處於非常糟糕的網絡中
你可以這樣進行測試
另一個需要記住的事實是I/O是系統中的共享資源
應用的I/O性能可能會受到
其他系統資源的影響或者其他設備上進行的I/O
比如 由於多任務還有其他應用正在運行
你的應用的I/O性能可能會受到影響
所以最好能夠測試應用在有其他應用的情況下
並且 系統試圖維持公平的平衡
在內存和I/O使用之間
在內存緊張情況下I/O延遲也可能受到影響
所以我們也建議在內存緊張情況下測試應用
最後 系統默認情況下爲你保留了很多緩存
爲了讓你更好地訪問和存儲數據
這些緩存的狀態也可能影響系統以及應用的I/O性能
爲了檢測其最壞情況
我們會建議重啓iOS設備
及macOS設備可使用purge命令
將會刷新所有緩存爲應用模擬最壞情況
爲了確保你的應用
在所有這些環境變化中保持性能良好
我們建議遵循I/O哲學減少和優化I/O
這裏是本次演講的幾點關鍵
減少應用的I/O用量因爲它顯著影響電池壽命
把繁重的I/O工作量從主線程中移開讓主線程爲UI和動畫保持空閒
指定正確的服務質量爲了指定正在進行的工作內容
切換到資產目錄因爲它們是最簡單高效的方法
來管理應用資產
爲數據庫需求使用核心數據
最後 測試和測量應用的I/O性能
想了解更多信息請訪問www.developer.apple.com
本場演講編號爲719
本週內還會有這些相關演講
你可以參考更多我們提到過的API和工具的細節
謝謝大家