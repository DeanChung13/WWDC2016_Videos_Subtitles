使用Core Motion以健康和健身
謝謝
大家好
下午好 歡迎
我是Bharath Rao
是Core Motion團隊工程師
今天我很高興和你們談談健康和健身
在這次演講中 我會向你們展示如何使用Core Motion框架
來增加一些有趣和迷人的特性
到你的應用
在我們開始前
對Core Motion新手們
我想要提醒你去觀看一些我們過去的演講
他們有一些很好的信息關於傳感器是怎麼工作的
及怎麼在Core Motion中使用這些傳感器
來提供API來幫助你的應用觀察統計和活動
和設備Motion及其他很多
請去看它們
有了那些 讓我們開始
這是我們今天爲你們準備好的
我有一個對歷史加速儀的更新
我希望和你們分享
我們有一個新計步器事件API針對iPhone和Apple Watch
最後我們會把設備Motion API帶到
Apple Watch和watchOS 3一起
謝謝
首先是歷史加速儀
去年我們介紹了CM傳感器記錄API
有了這個API
你的應用可以訪問原始的加速儀採樣
或很長一段時間的採樣
而且你只需要用很少的電量來訪問
當你的應用請求框架開始錄製這些採樣
他們可以暫停而且操作系統會提供那些採樣
即使設備在休眠中
當你的應用準備好使用那些採樣
它們可以啓動併發送一個請求
並且獲得對所有緩衝了的採樣的訪問
在watchOS 3中我們有一系列重要更新
首先是更長的時間
現在你的應用有一個36小時的窗口在其中它們可以啓動
並且獲得對所有歷史加速儀採樣的訪問
第二個更新應該不會讓你們吃驚
它是對於API被請求最多的更新之一
所以我很高興宣佈在watchOS 3中
現在採樣的延遲只有3秒了
有了這個更新現在你可以使用傳感器記錄器
不僅僅是觀測用戶活動或者是長時間
而且有一些實時應用
對這些應用你現在可以使用傳感器記錄器
也許
來追蹤體育活動或者記錄健身房裏的健身
或者甚至是健康診斷
想像應用在Apple Watch上可以偵測手顫
現在每當用戶發生一些手顫
他們可以啓動應用
你的應用將能夠獲得所有歷史加速儀採樣
對它們進行一些分析
得到一個報告說那個手顫有多嚴重
並且是哪種顫動
並和用戶分享它還可能在獲得同意的情況下分享給醫生
所以這樣可以對這種病症加速診斷和治療
在watchOS 3中對歷史加速儀的更新是很好的
下一個是計步器
CMPedometer是一個多用的API
它記錄統計和距離以及階梯步級
用戶在一天中所爬的階梯步級
這樣你可以用它來創造一個全天活動的追蹤器
你可以設置一些有趣的目標讓用戶來達到
通過這樣你激勵他們達到一個更健康的生活方式
但是CMPedometer真正強大之處是在鍛鍊的環境中
比如速度測量
我們有步幅估計算法在iPhone和Apple Watch上運行
使用這些
我們可以提供相當精確的速度和距離測量
即使手機沒有GPS信號
或你帶着Apple Watch跑步
你沒有帶手機
即使這樣用戶得到非常精確的測量
我們今天增加的計步器事件API
實際上會幫你使那些健身體驗
更吸引人更精確
讓我們設想一個典型的跑步健身在地市裏跑步
做爲第三方開發者
你在這種情況下會面對的挑戰之一是
如何偵測所有的那些開始和停止
當用戶在城市裏跑步時在十字路口發生的
用戶在紅燈的時候停下來
你的應用會繼續累加他們站立不動的時間
在他們完成跑步的時候
你已經累加了足夠的時間
如果你試着計算他們的整個跑步的平均速度
你的結果可能和他們的爺爺的速度相似
也許爺爺的速度比他們快 沒關係
我想說的是你會得到一個非常不精確的速度
有可能遠遠小於他們跑步的速度
一個可能的解決方法是
你可以提供手動的暫停和繼續選項
但是現在一旦他們暫停了
他們需要記得當他們開始跑步時繼續這次鍛鍊
如果他們沒有這麼做所有他們在應用暫停時跑的步
不會被記錄在鍛鍊中
所以如果他們忘記暫停他們會得到不精確的速度
如果他們忘記繼續他們失去距離
很明顯你需要一些自動暫停和繼續的偵測
不但要精確 還要響應快速
需要感覺你的應用
能很好的偵測那些開始和停止
此時你可能在想爲什麼不用GPS和步數
畢竟你的應用可以訪問那些
如果你以前用過GPS
你知道你不得不做大量的過濾工作
這樣你可以移除噪聲
也就是說響應會很慢
而你從CMPedometer得到的步數
它有一個內置的延遲
我們這樣做因爲我們想避免誤報
我們用步數來估計步幅
從那我們計算距離和速度
所以這對我們很重要
首先有精確的步數計數
所以在這個版本中我們給你計步器事件
會幫助你偵測那些開始和停止
不但有好的精確度而且延遲低
我們的計步器事件解決方案或者自動暫停繼續方案
使用一個預測算法
這個預測算法用用戶數據進行訓練
所以我們可以提高估計的似然度
關於用戶是運動中還是完全靜止？
當然都是在徒步的情況下
通過這麼做我們可以彌補大部分
和步數計數算法相關的延遲
但是我們可以這樣做並有很好的精度
我還想要指出
因爲預測算法一直追蹤用戶是否在移動
或者他們停下來了
我們還支持步行速度
當用戶停下來
不論是從走路還是跑步你會得到一個暫停事件
一旦用戶開始跑或走
你會在應用中得到一個繼續事件
計步器事件API在iOS X和watchOS 3上看起來是一樣的
讓我們來看看API
你有暫停和繼續事件
每個事件都包括一個具體時間
算法發現從運行變成非運動狀態的時間
以及反過來
你需要開始和停止更新
來幫助你的應用註冊和取消註冊這些事件
我一直在說計步器事件會怎麼
被用來清楚劃分跑步的階段
在一次完整的跑步鍛鍊中
以用你能怎樣用它來得到精確的測量
但是你還有其他有趣的計步器用法
讓我們看一個例子
這是一個iPhone上的越野跑應用
所以我們會用計步器事件來看
來找出什麼時候我們能夠與用戶銜接
以及當我們這麼做時我們能夠怎樣向他們顯示一些有趣的信息
能讓他們響應更多的活動
因爲這是越野跑應用
整個跑步過程中會有高度的變化
我們要看看這是否會有一些有意義的信息
我們會用CMPedometer類
來註冊暫停和繼續事件
我們還會得到相關的高度更新
或者海拔高度的變化使用CMAltimeter類
如果你想要繼續在應用中接收計步器事件
即使屏幕關閉
你的應用必須保持運行
在iPhone這麼做的一個方法
是訂閱持續後臺位置
如果你對知道更多相關信息有興趣
我建議你去看Core Location最佳實踐演講
會在今天的 WWDC 舉行
接下來我們會首先註冊相關的高度更新
並檢查可用性
然後我們提供一個操作隊列
並提供一個回調處理器來開始接收那些更新
在這個例子中我會記錄最近的更新
但是可能在你的應用中你可以緩存所有更新
在鍛鍊結束時你可能可以提供
一個漂亮的整個跑步過程的高度輪廓
接下來我們會註冊計步器事件本身
首先還是檢查是否存在
然後通過提供回調處理器來註冊
這只是一個小提示來確保我不會面臨併發問題
我會工作在來自同樣的操作隊列上的所有處理器
現在這個應用被設置成找出
什麼時候用戶開始和停止跑步
我們準備好看一下它們是否能用在一個有前後關係的方式中
他們一開始跑步我們就會在應用中收到繼續事件
在這時你可以
記錄下你收到繼續事件的時間
那麼在鍛鍊完成時
你可以把所有跑步時間加起來
來計算整次跑步的精確的平均速度
在這個例子中我會記錄下最近的高度更新
這樣我就知道他們開始跑步時是在什麼高度開始的
當用戶停止時
現在是個很好的機會來找出
因爲我們有高度 我們可以找出是不是他們在跑上一座山
如果是的這可能是他們第一次在山上跑步
爲什麼不給他們一個登山包成就
如果他們已經在山上跑了多次
因爲我們有每次跑步的精確時間
現在我們可以比較它們
並且給它們一個統計關於他們在特定的山上跑步中做得怎樣
這是我們使用計步器事件的一個例子
不僅僅達到非常精確的測量
還劃分那些跑步階段
這也是一個你可以使用
那些事件來做些有趣的事的例子
在跑步的最後
當然你要取消那些註冊
這也會釋放
所有框架中的處理器代碼塊
計步器事件在iPhone 6s和更新發布的iPhone中可用
還有Apple Watch
這就是iOS X和watchOS 3中的計步器
接下來讓我們談談設備Motion
如你所知
設備Motion API自從iOS 5起就存在iPhone上
有了watchOS 3 我們把相同API帶到了Apple Watch
Apple Watch上有非常強大的傳感器包
它是在我們手腕上一個固定的位置並且我們全天都在使用
因爲我們用手
來做幾乎任何事在我們全天做的事中
這是一個很強大的工具來觀察用戶的所有活動
設備Motion所做的就是
獲得加速儀和陀螺儀的採樣
它融合這些
來清楚地告訴你用戶的所有活動
這些就在你的手腕上
所有手腕上的motion被描述成設備Motion
使用四個不同的屬性
姿態 重力 旋轉速度和用戶加速度
如果你想詳細知道這些屬性是如何導出的
以及它們的作用
我鼓勵你去看2011和2012年的演講
在這個演講中我會給你非常簡短的關於這些屬性的概述
這樣我們可以建立一些灌輸
以及用例子看看你能怎麼使用它們
在一些健康和健身應用中用有趣的方式
第一個屬性是姿態
在你的應用中使用姿態
你可以獲得對設備方向和空間的觀測
你用CMDeviceMotion時你獲得三個姿態屬性
是四元數 旋轉矩陣 和歐拉角度
當你在應用內使用姿態
需要注意的一件事是
每一個姿態觀測
都和一個固定的參考座標系是相對的
這的意思是
每一個方向觀測
是通過一個不是固定在設備上的點進行的
參考座標系保持靜止但設備可以到處移動
這就是你如何用姿態來觀測方向
而且
你的應用註冊來開始接收更新的時間
是參考座標系設定的時間
所以你的應用接下來收到的採樣
會被計算
用開始更新時設定的相對參考座標系計算
這是你在應用中使用姿態時需要注意的
而且你不要做假設
關於設備在絕對空間中的方向的假設
下一個屬性是重力
重力是
它是重力 把物體拉向地心的力
在設備Motion中
它在設備座標系裏被表示成單位矢量
使用重力你可以觀測設備的翻轉和傾斜
但是你可能會問 難道翻轉和傾斜不也和姿態一樣是方向嗎？
但是一個關鍵的不同是
現在你從設備座標系中觀測所有方向
比如如果我要保持我的手完美的和地面平行
在我的兩側然後我把它移到我的前面
你無法用重力觀測到這
因爲重力的x y z成分會維持不變
在這兩個方向中
要觀測像這樣的情況你需要
一個觀測點是外部的或固定的
當設備移動時這就是姿態
所以你可以用重力來觀測方向
但是在有限的情況下
但是在你所設想的應用中這可能工作得很好
關於重力的另一件事是
當你拿着設備並完全靜止時
你可以用加速儀觀測它
加速儀會得到一個固定的加速度
你可以從加速儀中讀出它
但是一旦你開始移動設備
這時加速儀獲取的不光是重力成分
它還獲取所有用戶產生的motion
這會使只獲得重力成分越來越難
設備Motion所做的是使用融合
我們轉而用陀螺儀來追蹤重力單位矢量
下一個屬性是旋轉率
就像名字暗示的這是角度motion的變化率
這很適合用來觀測一些事比如手腕的旋轉
當你旋轉手腕時
會有一個圍繞設備x軸的旋轉motion
你可以用旋轉率觀測它
你還可以觀測圍繞身體的任何旋轉
因爲我們的大多數固定我們的軀幹活動我們的手臂
所以會有一些弓形的motion
所以有旋轉並且你可以觀測到它
利用設備Motion的旋轉率屬性
最後一個屬性是用戶加速度
你通過設備Motion得到的用戶加速度
是對重力的抵消
回憶一下我提過的加速儀怎麼獲取
重力成分和用戶產生的成分
而這僅僅是用戶產生的成分
但是它抵消了導出的重力
使用設備傳感器融合導出的重力
這就是對這些屬性的快速概述
現在讓我們看看你可以怎樣在應用中使用它們的一些例子
第一個屬性是姿態
姿態很適合用來觀察任何重複motion
像是對舉重進行計數所以當你舉起重物時
你實際上進行了一系列方向的改變
所以通過觀察這些方向改變是如何重複的
你可以計算次數
使用姿態來這樣做最好的部分是
現在他們可能使用一種機器他們拉在
水平方向或者從上面
你可以用姿態觀測到所有重複
重力 像我已經提到的很適合用來測量翻轉和傾斜
這表明你可以把它用在瑜珈應用中
所以如果他們在做一個下犬式或者保持一個戰士式姿勢
你可以得出他們能保持姿勢在多靜止的狀態
當他們從一個姿勢變換到另一個姿勢時
你可以發現他們是用優雅的方式這樣做
還是隻是摔倒了
旋轉率最有用的使用方法是
觀測旋轉motion的速度
比如以棒球練習爲例
當你揮棒時
你不只是圍繞身體旋轉你的手臂
還有圍繞手腕的旋轉
你可以用旋轉率的這兩個成分
來估計揮棒速度
當然你需要知道棒的長度
以及要在棒上的哪點測量速度
用戶加速度最好用在有一些突然的motion時
因爲加速儀捕捉所有用戶正在進行的motion
如果你想開發一種應用
你用用戶加速度來測量一些小的運動
可能會被噪聲淹沒
有突然的motion的地方是最適合用用戶加速度的
比如擊拳和反衝
你可以知道他們打中沙包有多痛
或者是對手希望那是空氣製造的
這只是一部分例子
你能怎樣在應用中使用設備Motion
在看過這些之後
若你覺得你有一個可以使用設備Motion的應用的想法
而且想知道更多關於如何應用設備Motion
請在明天到我們的實驗室去
我們會很高興幫助你
現在讓我們看看API你有四個屬性
姿態和重力 它們沒單位重力是單位矢量
用戶加速度的單位是G旋轉率的單位是弧度每秒
在你可以在你的應用內接收設備Motion更新前
你需要設定它們的採樣率
你可以設定採樣率最高到100赫茲
一旦你設定了採樣率
你可以去註冊更新使用開始更新這個方法
從這之後
你可以選擇週期性獲取設備Motion屬性
獲得最新採樣
或者你可以提供一個回調處理器你可以獲得
設備Motion爲你產生的每一個更新
當然一旦你完成了監聽設備Motion更新
你可以取消註冊使用stopDeviceMotionUpdates方法
我的演講就是這些了
現在我要把講臺交給Paul他會帶你們
看一個Apple Watch的示例應用
用一種有趣的方法使用設備Motion
謝謝 給你 Paul
謝謝Bharath
大家好
我是Paul Thompson我是Core Motion工程師
Bharath剛談了CoreMotion API的新特性
我要做的是向你們展示怎樣使用它們中的一個
在一個Apple Watch健身應用中
在這個應用中
我們要做的是創建一次網球鍛鍊
然後我們會向設備Motion訂閱傳感器更新
最後我們會偵測揮拍
並區分正手和反手揮拍
要這麼做我們需要做的是利用Core Motion的功能
和一些HealthKit的新功能
你們可能記得
watchOS 2應用高度依賴HealthKit和Core Motion
來進行實時分析和傳感器輸出
並提供給你數據比如步數
步級 距離和熱量消耗估計
現在在一次鍛鍊中
你的應用做有限的工作來處理設備Motion採樣
當用戶並沒有直接進入你的應用中
但是當然這個功能也帶來一些警告
開始你必須啓用了新的HealthKit授權
在Xcode項目中
進一步 後臺工作只能
在一次活動的鍛鍊中被完成
除此以外
當處於後臺時你必須最小化CPU使用
否則你的應用會被暫停
直到用戶明確的把它調入前臺
因爲後臺能力是由HealthKit提供的
我鼓勵觀看早前的演講來瞭解更多關於它的細節
考慮到這點 讓我們想想我們的應用看起來是什麼樣的
有了應用你可能想和你的朋友
戴着Apple Watch去網球場
進行一些截擊練習
你簡單地開始一個快速鍛鍊來回擊球
然後你希望在任何時候
你快速地看一眼watch可以獲得一些媒體反饋
考慮到這些 讓我們想想我們項目的結構
會有三層我們需要考慮
首先是UI
我們最終要向用戶顯示我們做了什麼
然後我們有鍛鍊管理器
我們會和HealthKit互動
開始和停止鍛鍊會話並啓用後臺功能
然後我們有motion管理器
在這我們會直接和Core Motion互動
實現我們的偵測算法
在這我們會響應50赫茲設備Motion更新
並把採樣結果加入一個RunningBuffer
之後在每次更新時
我們會判斷是否有揮拍發生如果有 我們會實現UI
我們怎麼給我們想要偵測的揮拍建立模型？
網球是個複雜的運動
在這個情況下我們要做的是我們會看看兩個動作的基本點
一個完整的正手和反手揮拍
我們通過使用重力和旋轉矢量來這麼做
這些矢量由設備Motion提供
如果你假設watch是在主手上
那麼你期待一個完整的正手揮拍會包括用戶的旋轉
如果我們進行點乘
來自可能的揮拍的旋轉率
和重力單位向量點乘
我們可以忽略設備的姿態並分離這個運動
還可以忽略一些無關運動
然後當我們獲得足夠多關於這的採樣
我們可以判斷是否旋轉了足夠遠是否遠到可以計數爲一次揮拍
所以我們現在知道要做什麼讓我們看看我們的採樣應用
要開始 我們來想象一下我們簡單的UI
我們會向用戶顯示信息
這就是了三個WatchKit界面標籤
我們希望在運行時更新
這包括鍛鍊標籤
正手計數標籤
和反手計數標籤
鍛鍊標籤會做的是簡單地告訴用戶
我們開始和停止了鍛鍊會話
而正手反手計數標籤
會顯示我們偵測到了多少次對應的活動
我們有一Force Touch菜單來開始和停止鍛鍊會話
我們知道UI會顯示什麼讓我們看看鍛鍊管理器
在這我們處理和HealthKit間互動
並且創建我們的鍛鍊會話
我們還指導我們的motion管理器開始和停止傳感器更新
在我們的鍛鍊管理器中我們將開始一次鍛鍊
要開始我們會創建我們的鍛鍊配置
我們會用它來初始化鍛鍊會話
因爲我們在創建一個網球應用讓我們用網球做爲活動類型
戶外做爲地點
初始化之後
我們會讓HealthKit開始鍛鍊會話
並訂閱設備Motion更新
此時我們可以在屏幕關閉時做一些工作
此外我們還需要停止鍛鍊
我們只需要進行相反的動作並且取消訂閱傳感器更新
然後告訴HealthKit結束鍛鍊會話
此時普通後臺規則會生效
讓我們看看我們的motion管理器
它直接和Core Motion打交道並實現我們的偵測算法
要開始 我們在這要做的是
我們會創建一個到CMMotionManager鏈接
並且創建一個NS操作隊列使採樣工作在它之上
此時我們會詢問watch是在左手還是右手
正手反手揮拍的區別
會完全取決於這一點
我們還會保持一個本地的計數爲正手反手揮拍
並且標記我們最近是否見到一次揮拍
我們選擇50赫茲採樣率
創建一個RunningBuffer它應儲存不多於1秒的數據
像Bharath早前提到的
設備Motion採樣可最多以100赫茲的速率被提供
你通常想要採樣率儘量低
同時能提供你所需的保真度
此外我們還會設置三個在我們的偵測算法中會用到的常量
這包括最小的揮拍角度
揮拍時最高速度的最小值
揮拍的最大安定速度
現在我們選擇這些值
根據實驗和我們收集的採樣數據
但是一般你會發現收集數據和選擇這些值的過程
是你應用工作量的一半
最後我們會在這創建委託引用
我們會用它來和UI通信
現在在我們設置了所有屬性之後
我們會調整操作隊列來反應一個連續隊列
我們會用它來處理所有設備Motion採樣
我想在這強調一下我們創建了這個操作隊列
來確保所有的數據處理發生在主隊列之外
現在我們還會創建這個函數
我們會用它來重置所有聲明類
同時使UI歸零
然後最後提供一系列方便的方法
我們會創建一些補充的更新委託函數
在這我們簡單地實現對揮拍的計數
標記我們最近遇到了一次揮拍並讓UI知道
現在讓我們和Core Motion打交道
和往常一樣我們要做的第一件事
是詢問API是否在我們要運行的設備上被支持
然後我們告訴Core Motion用50赫茲的頻率更新
最後我們訂閱設備Motion更新
通過傳遞我們的操作隊列
和一塊代碼用來響應所有進來的設備Motion採樣
這整塊代碼要做的是簡單地檢查更新是否有錯誤
然後把它傳遞給我們的偵測函數
讓我們看看我們的偵測函數將會做什麼
如Bharath早前提到設備Motion給我們很多事
但是在這個例子中
我們只會用到重力和旋轉率矢量
現在如你可能記得的
重力矢量只是簡單的Core Motion的終點
重力單位矢量 不論設備如何移動了
旋轉率是設備的旋轉矢量
給我們弧度每秒
所以現在我們的算法要做的
是點乘旋轉矢量
來自可能的揮拍和重力單位矢量
所以我們只分析motion中關於重力的部分
然後我們把結果標量加入
一個RunningBuffer保存不多於1秒的數據
一旦我們有了足夠的內容我們分析這些內容
所以我們要用來分析揮拍的兩個度量值
是累計的旋轉角度和揮拍的最高速度
在這要獲得累計旋轉
只需要累加我們採集到的所有旋轉採樣的總和
在我們採集它們的那一秒中
然後你得到最高速率
你簡單地獲得最大或最小值取決於旋轉的方向
繼續我們的函數
我們會檢查是否包括足夠遠
和足夠快來判斷爲一次揮拍
如果是我們會選擇正手還是反手
根據Apple Watch位置和這個標量的符號
最後在函數的結尾
我們會添加一個測試看看這次揮拍是否安定下來
這樣我們可以拒絕一些反彈運動
像是用戶的手臂回到位置上準備下一次擊球
最後要結束這個類我們有stopUpdates函數
我們用來取消訂閱DeviceMotionUpdates
當鍛鍊結束時
這結束了我們的基本採樣應用
我們簡單地描述了一個簡單的用戶界面
然後我們創建了一個鍛鍊管理處理和HealthKit連接
然後創建了motion管理器
處理Core Motion並實現我們的偵測算法
我希望你們都對如何使用設備Motion有了好的瞭解
這是新引入Apple Watch的
在我結束前
我想要強調使用這個API的一些細節
現在當你期待watch在一個固定的可預測的位置時
永遠記得檢查設備是在哪隻手上
這個位置的區別會極大地影響你的分析
更進一步 當使用慣性傳感器時永遠記得
試着理解你是操作在什麼參考座標系上的
而且如我們早前提到的
設備Motion提供最高100赫茲的採樣
我們永遠希望能達到平衡
在提供你的採樣率所需的資源
和你的應用所需的保真度之間
這很重要
因爲鍛鍊會話的後臺限制
要總結這次演講
我們早前談到了歷史加速儀的性能提升
然後我們演示瞭如何使用計步器事件
來精確的給階段加標籤
提供準確的上下文反饋給用戶
然後我們介紹了AppleWatch上的設備Motion
然後瀏覽了一個應用
來偵測正手和反手揮拍在一次網球鍛鍊中
如果你想知道更多信息
比如資料和採樣代碼
請查看這個鏈接
然後如你所見
該應用和HealthKit的新特性互動
我鼓勵你們都去看看HealthKit演講
來瞭解更多細節關於“watchOS 3的新特性”
此外Core Location有一些最佳實踐需要你查看
我建議你們也去看看
最後我還推薦看看watchOS 3的其他資料
謝謝