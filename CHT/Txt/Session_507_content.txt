製造非凡的音頻效果
音頻效果最佳實踐和API指南
好
下午好
多少人想開發一款音頻效果特別棒的應用
但覺得可能會很困難？
或者 多少人想要更多地
關注應用程序整體的用戶體驗
但最終在音頻上多花費了一點時間？
我們一直以來都在努力幫助你輕鬆解決這些問題
我叫SaleemCore Audio團隊的技術人員
歡迎大家來到今天
關於製造非凡音頻效果的會議環節
讓我們整體看下今天我們爲大家準備了什麼
我們會先開始介紹AVFoundation框架
我們有種類廣泛的高層API
可以讓你輕鬆播放和錄製音頻
對於更高級的用例 我們提供AudioToolbox框架
你可能聽說過AudioUnits
這些是基本的組成模塊
如果你必須使用MIDI設備或MIDI數據
我們還提供CoreMIDI框架
對於遊戲開發我們提供OpenAL
在過去兩年裏我們也一直在添加
很多新的API和功能
你可以看到你可以通過很多方法
在你的應用中使用音頻
所以 我們今天的目標是指導你
針對你的應用需求選擇正確的API
但不必擔心 我們也有一些新東西與大家分享
所以 按今天的日程表
我們會先了解我們幾個平臺的一些基本的設置步驟
然後 我們會直接深入瞭解一些簡單和高級的播放
和錄製情景
我們會簡要討論下多聲道音頻
在隨後的介紹中我們將瞭解下實時音頻
以及你製造自己音頻效果、樂器和生成器的方法
最後以MIDI的介紹結尾
好 讓我們開始吧
iOS、watchOS和tvOS都有相當豐富的音頻功能
以及衆多寫入功能
這樣 用戶才能撥打電話播放音頻、玩遊戲
和使用各種提高效率的應用
用戶可以同時或獨立進行這些操作
所以操作系統管理了大量默認的音頻行爲
以便提供一致的用戶體驗
讓我們通過圖表瞭解爲什麼音頻是一種基於管理的服務
所以 你擁有一件設備
設備有若干的輸入和輸入
然後 有操作系統
操作系統可能包含大量應用有些應用使用音頻
最後 這裏是你的應用
所以AVAudioSession是你的開發者界面
你可以通過該界面向系統表達你的應用需求
讓我們瞭解下這方面的詳細內容
類別表達應用的高級別需求
我們提供模式和類別選項
可以幫助你進一步定製和專門設計你的應用
如果你喜歡一些更高級的用例
比如輸入選擇你可能需要能夠選擇
iPhone的前置麥克風而不是底部麥克風
如果你處理的是多聲道音頻
以及tvOS上的多聲道內容你可能對聲道數
這樣的東西感興趣
如果你將USB音頻設備連接到iPhone
你可能對採樣率這樣的東西感興趣
所以 當你的應用準備好經配置可使用音頻時
它會通知系統應用會話
該過程會配置設備的硬件
從而滿足你應用的需求
並且實際可能對系統中其它音頻應用造成幹擾
或者相互混雜 或者降低其它音頻應用的音量
瞭解下AVAudioSession的一些基本使用步驟
第一步是註冊以獲取通知
三種最重要的通知是中斷通知
路徑變更通知以及mediaServicesWereReset通知
你可以在激活會話之前註冊以接收這些通知
通過幾張幻燈片我將展示如何管理通知
接下來 基於你應用的高級別需求
你將需要設置適當的類別模式和選項
那麼 讓我們看幾個例子
假如 我正在開發一款提高效率的應用
在這個應用中我想要在用戶保存文檔時
播放簡單的聲音
這裏 我們知道音頻能夠增強體驗
但卻不是必要的
在這種情況下 我想使用AmbientCategory
這個類別遵循振鈴開關
音頻不在後臺播放
而始終與其它應用音頻混雜
若我在開發播客應用我應該使用PlaybackCategory
SpokenAudio模式
這裏 我們能看到這個應用位置將幹擾
系統上的其它應用
現在 如果你希望音頻繼續在後臺播放
你也需要在info.plist中指定後臺音頻鍵
這本質上也是會話屬性
只不過是通過不同的方式表達
而對於導航應用
讓我們瞭解一下如何配置導航提示
你應使用PlaybackCategory
以及DefaultMode
這裏有幾個相關的選項
你應同時使用InterruptSpokenAudio
AndMixWithOthers以及duckOthers
所以 如果你正在收聽播客 同時進行導航
就會出現導航提示表明
500英尺後左轉
提示實際上會中斷播客應用
如果你在聽音樂
提示會降低音樂音量並混雜在音樂中
對於這種應用 你也應使用後臺音頻鍵
接下來 讓我們看看如何對會話激活進行管理
所以 激活意味着什麼？
激活你的會話 會通知系統
配置硬件以適應應用的需求
比如我有一個應用
類別爲PlayAndRecord
當我激活我的會話系統會配置硬件
使用輸入和輸出
現在 如果我在使用音樂應用聽音樂時
激活會話 會怎麼樣？
這裏 我們可以看到系統當前狀態設置爲僅播放
所以 當我激活會話時
我通知系統 針對輸入和輸出進行硬件配置
而且 既然我處在不可混雜的應用位置
我中斷了音樂應用
所以 比如我的應用進行了快速錄音
一旦完成 我就停用會話
如果我選擇通知其它應用我已經停用會話
我們將看到音樂應用恢復播放
接下來 讓我們看下如何處理我們註冊接收的通知
我們首先看一下中斷通知
我們會研究一個案例案例中 你的應用
沒有播放UI
首先獲取interruptionType
如果這是中斷的開始
你的會話已經停用
所以播放器已經暫停
你將利用這段時間更新你的任何內部狀態
如果你收到結束中斷
你會去激活會話
啓動播放器同時更新內部狀態
我們看下這個過程在擁有播放UI的應用中有什麼不同
你接收開始中斷的通知
你的會話停用你更新內部狀態
而且這次要同時更新UI
如果你有播放/暫停按鈕
這種情況下 你應接着將按鈕設置爲“播放”
現在 當你接收到結束中斷通知
你應該查看並瞭解shouldResume選項是否提交進來
如果已經提交進來 那麼你可以繼續激活你的會話
開始播放 同時更新內部狀態和UI
如果沒有提交進來
你應等到用戶明確地恢復播放後
應特別注意的是你的中斷不一定是配對的
所以 不是每個開始中斷隨後都匹配一個結束中斷
一個例子就是彼此中斷的媒體播放器應用
現在 讓我們看下如何處理路徑變更
路徑變更的發生原因有很多：
可能是連接設備變化了可能是類別變化了
可能是你選擇了不同的數據源或端口
首先要獲取routeChangeReason
如果你得到的原因是媒體播放器應用中
原有設備不可用
此時你應停止播放
這種情況的一個例子是如果你的用戶使用耳機
收聽音樂然後拔下耳機
他們不會想讓音樂立即通過
揚聲器恢復播放
對於更高級的用例 若你收到oldDeviceUnavailable
或newDeviceAvailablerouteChangeReason
你可能需要在特定會話屬性應用到你的應用時
重新評估這些屬性
最後 讓我們看下如何處理設置了通知的
媒體服務
這種通知很少發生但也確實會收到
因爲我們不能確保demon程序永遠運行
這裏需要特別注意的是
你的AVAudioSessionsharedInstance仍有效
你將需要重置類別模式和其它選項
你也需要破壞和重建你的播放器對象
如AVAudioEngine
遠程I/O以及其它播放器對象
我們提供在設備上進行此測試的途徑
路徑是設置——開發者——重設媒體服務
好 大致重述下使用AVAudioSession的
四大步驟基本步驟
你註冊以接收通知
你設置適當的類別模式和選項
你對會話激活進行管理
並且處理各種通知
讓我們瞭解下今年的一些新內容
今年的新內容中 我們添加了兩個新的類別選項：
將allowAirPlay和allowBluetoothA2DP添加到PlayAndRecord類別
所以 這意味着你現在可以在使用藍牙或AirPlay終端
播放時 同時使用麥克風
如果這是你應用的用例
繼續操作 設置類別和選項
然後允許用戶從
MPVolumeView或 “控制中心”中選擇路徑
我們同時爲AVAudioSessionPortDescription
上的VoIP應用添加了新屬性
可以決定當前路徑是否已經激活
硬件語音處理
所以 如果你的用戶連接到擁有硬件語音處理的
CarPlay系統或藍牙免提耳機
你可以使用該屬性禁用你的軟件語音處理功能
這樣你就不會對音頻重複處理了
如果你已經使用Apple的內置語音處理輸入/輸出設備
你無需擔心這一點
今年新內容中 我們也引進了CallKit框架
爲使你瞭解如何使用CallKit增強你的VoIP應用
本週早些時候安排了場演講
如果你錯過了可以到網上收看
所以 這只是AVAudioSession的概況
在之前的演講中 我們對此話題進行了許多深入介紹
所以 我們鼓勵你到網上查看之前的視頻和編程指南
好 我們繼續
AVAudioSession適用於你平臺的情況下 你完成設置
現在 我們看下如何在應用中進行簡單的音頻播放和錄製
我們先看一下AVFoundation框架
這裏有很多級別可以處理這種任務
我們有AVAudioPlayer
AVAudioRecorder以及AVPlayer等級別
AVAudioPlayer是文件中播放音頻的最簡單方法
我們支持各種格式
我們提供所有基本的播放操作
我們同時支持一些高級的操作
比如 設置音量
你可以按照聲道獲得計量
你可以循環播放調整播放速度
進行立體聲調製
如果你使用iOS或tvOS你可以進行聲道分配
如果你有多個文件要進行播放
你可以使用多個AVAudioPlayer對象
也可以同步你的播放
今年新內容中加入了一種方法 可以允許你
在特定時間內逐漸降到某個音量
看下代碼示例 瞭解你在應用中如何使用AVAudioPlayer
比如 我還是在開發和構建一個簡單的提高效率的應用
我想要在用戶保存文檔時
播放確認音頻
這種情況下 我有AVAudioPlayer和鏈接到我級別中資源的URL
在設置功能中 我繼續操作使用我URL的內容
創建AVAudioPlayer對象同時我準備好播放器進行播放
在saveDocument功能中我可能進行一些工作
瞭解下文檔是否保存成功
如果已保存 我只需播放文件
非常簡單
現在 讓我們看下AVAudioRecorder
這是將音頻錄製到文件的最簡單方法
你可以錄製指定的時長
或者錄製到用戶明確要求停止的時候
你基於聲道獲得計量
我們支持各種編碼格式
所以 要設置格式 我們使用Recorder Settings Dictionary
這是由鍵組成的字典
包含的鍵列表可使你設置各種格式參數
例如採樣率和聲道數
若你使用Linear PCM數據
你可以調整位深度和字節順序等
如果你使用編碼格式
你可以調整質量和比特率等
讓我們看下代碼示例 瞭解如何使用AVAudioRecorder
所以 我首先做的是創建格式設置
這裏 我創建了一個比特率相當高的AAC文件
然後 我要做的是創建AVAudioRecorder對象
包含指向文件位置的URL
以及我剛剛定義的格式設置
在這個例子中有一個簡單的按鈕
我可以用它來切換錄音機的狀態
所以我按下這個按鈕時如果錄音機正在錄製
我接着操作 停止錄製
我開始錄製
我可以使用錄音機的內置儀表向UI提供反饋
最後讓我們看下AVPlayer
AVPlayer不僅適用於本地文件而且適用於流媒體內容
你擁有所有的標準控件
我們同時提供你可以直接
使用的內置用戶界面比如AVPlayerView
以及AVPlayerViewController
AVPlayer也適用於視頻內容
今年 我們在AVPlayer中添加了若干新功能
如果想了解我們做出的改進
你可查看AVFoundationPlayback的新進展
如果你錯過了那部分你可以到網上進行觀看
高級播放和錄製
好 目前我們已經瞭解了一些非常簡單的
播放和錄製案例
現在 讓我們看一下一些更高級的用例
高級用例不僅包括從文件中播放音頻
而且包括處理緩衝音頻數據
你可能感興趣的是音頻處理
應用特定的音效以及將多個來源的音頻混合
或者你可能對實施3D音效感興趣
這方面的應用案例包括開發經典的卡拉OK應用
開發具有超高音效的DJ應用
或者開發一款讓用戶完全沉浸其中的遊戲
對於這種高級用例
我們在AVFoundation中有叫AVAudioEngine的級別
AVAudioEngine是一款強大
功能豐富的Objective-C和Swift API
它是一種實時音頻系統
可以通過向你提供非實時界面
簡化實時音頻的處理工作
所以 處理實時音頻涉及很多複雜的操作
而AVAudioEngine可以使你的代碼更加簡單
AVAudioEngine管理一個節點圖表
這些節點使你得以播放和錄製音頻
你可以以各種方式連接這些節點
從而形成多個不同的處理鏈條
並進行混音
你也可以在處理鏈條的任意一點捕獲音頻
我們提供一個專門的節點可以使你實現音頻的空間化
那麼 讓我們看一下根本的組成部分——AVAudioNode
我們有三類節點
我們有源節點可以提供用於呈現的數據
例如你的PlayerNode
InputNode或者抽樣單位
我們有處理節點可以使你處理音頻數據
所以 你客戶處理的效果包括延遲、失真以及混音
我們有目標節點
即你圖表中的終端節點
它與輸出硬件直接連接
讓我們看一下設置示例
比如 我正在構建一款經典的卡拉OK應用
在這個例子中我有三個源節點
我使用InputNode捕獲用戶聲音
使用PlayerNode播放伴奏曲
使用另一個PlayerNode播放其它音效
和對用戶使用的反饋
對於處理節點
我可能會對用戶聲音應用特定的EQ
然後我會使用混音器
將三個源合成爲單個輸出內容
然後這單個輸出內容將通過OutputNode播放
然後傳遞到輸出硬件
我也可以捕獲用戶的聲音並進行一定的分析
從而瞭解安裝TapBlock後他們的表現情況
然後基於此我可以無條件地安排
播放出這些反饋隊列
現在 讓我們看一下遊戲設置示例
這裏主要相關節點是EnvironmentNode
它可以模擬3D空間
並將相連的源空間化
引擎設置示例遊戲
在這個例子中 我使用InputNode以及PlayerNode作爲源
你也可以調整你源上的各種3D混音屬性
比如位置和閉塞
而對於EnvironmentNode你也可以在那裏調整屬性
如listenerPosition以及其它混響參數
所以 該3D空間然後可以與伴奏曲混合
然後通過輸出設備播放
核心級別
在進一步介紹AVAudioEngine前
我想再介紹下Engine廣泛使用的
一些根本的核心級別
我從AVAudioFormat開始
AVAudioFormat描述音頻文件或音頻流中的
數據格式
所以我們有標準格式通用格式
以及壓縮格式
該級別也包含AVAudioChannelLayout
你在處理多聲道音頻時可能會用到
它是我們的現代界面 連接到AudioStreamBasicDescription結構
以及AudioChannelLayout結構
現在 讓我們看下AVAudioBuffer
AVAudioBuffer核心級別
該級別有兩個子級別
AVAudioPCMBuffer可用於緩衝PCM數據
包括AVAudioCompressBuffer
可用來緩衝壓縮音頻數據
這兩個級別均提供現代界面 連接到我們的
AudioBufferList以及AudioStreamPacketDescription
讓我們看一下AVAudioFile
該級別允許你從任何支持的格式進行讀寫
允許你將數據讀入PCM緩存並從PCM緩存
將數據寫入文件
這樣 它可以透明化地處理任何編碼和解碼
它現在取代我們的AudioFile和ExtAudioFile API
最後 讓我們看下AVAudioConverter
AVAUDIO轉換器核心級別
該級別處理音頻格式轉換
所以 你可以在兩種PCM數據格式間轉換
也可以在PCM以及壓縮音頻格式間轉換
其中 轉換器幫你進行編碼和解碼
這一級別取代我們的AudioConverter API
今年新內容中 我們也添加了
最小相位採樣速率轉換器算法
所以 你可以看到當與音頻數據相連時
所有核心級別能很好地協作
讓我們看下這些級別然後怎樣與AVAudioEngine交互
若你觀察AVAudioNode發現它有輸入和輸出AVAudio格式
如果你觀察PlayerNode它可以通過AVAudioFile
或AVAudioPCMBuffer使連接到Engine
如果你安裝NodeTap該部分以PCM緩存的形式
向你提供音頻數據
你可以使用它進行分析
或者你可以使用AVAudio文件將它保存在文件中
如果你處理的是壓縮流
你可以將它分解爲壓縮緩存
用AVAudioConverter將它轉換爲PCM緩存
然後通過PlayerNode將它提供給Engine
今年新內容中我們爲Watch帶來了AVAudioEngine子集
與此同時 我們也添加了AVAudioSession子集
以及你剛剛看到的所有核心級別
我相信你一定想看一下演示
我們爲你準備了演示
我們直接使用SceneKit和AVAudioEngine開發了簡單的遊戲
在這個遊戲中 我的舉動是將小行星發射到太空
在屏幕底端有一團火焰
我可以使用Watch的數碼錶冠控制火焰
現在 如果行星接觸到火焰
就會播放特別大的爆炸聲
所以 讓我們來看看
演示WATCHOS上的AVAUDIOENGINE
我肯定這個遊戲違背了基本的物理定律
因爲它在太空中播放音頻對吧？這是不可能的
好 那讓我快速看一下游戲中的AVAudioEngine代碼
在我的級別中我有AVAudioEngine
我有兩個PlayerNode
一個播放爆炸聲
一個播放發射聲
我也有連接到我音頻資源的URL
在這個例子中 我使用緩存向引擎提供數據
讓我們看下如何設置引擎
首先要做的是附加我的PlayerNode
所以 我觸摸explosionPlayer和launchPlayer
接下來 我將使用核心級別
我將從我資產的URL創建一個AVAudio文件
然後我將創建一個PCM緩存
我將把文件中的數據讀入PCM緩存
之所以能這樣做是因爲我的音頻文件非常短
接下來 我繼續操作連接源節點
以及引擎的主要混音器
所以 當遊戲即將開始時我接着開啓引擎
並開啓播放器
當發射小行星時我只是安排launchBuffer
在launchPlayer上播放
當小行星接觸到火焰時
只需安排explosionBuffer在explosionPlayer上播放
這樣 只需幾行代碼
我就能爲watchOS上的遊戲
創造非常豐富的音頻體驗
這只是個簡單的例子
我們非常期待能看到你製造的效果
多聲道音頻
結束AVAudioEngine介紹之前 我要談論下多聲道音頻
具體的是 它如何與tvOS關聯的
去年十月 我們發佈了tvOS
以及第四代Apple TV
所以這是在全球開發者大會上我們首次可以談論該話題
有關Apple TV上音頻有趣的一點是
很多用戶已經連接到多聲道硬件
這是因爲很多家庭影院系統已經支持
5.1或7.1環繞立體聲系統
今天 我只是想略微展示下你怎樣使用AVAudioEngine
來呈現多聲道音頻
首先 讓我們回顧下AVAudioSession的設置
我首先設置我的類別和其他選項
然後激活會話以便配置硬件
滿足我的應用需求
現在 按照我想使用的呈現格式
我首先需要查看當前路徑是否支持該格式
要查看這一點我需要查看我想要的聲道數
是否小於或等於最大輸出聲道數
如果是 那麼我可以繼續設置我想要的輸出聲道數
接着 我可以從會話中查詢得到實際的聲道數
然後使用它繼續操作
或者 我可以查看當前端口上的ChannelDescription陣列
每個ChannelDescription向我提供一個channelLabel
和一個channelNumber
所以 我可以使用該信息瞭解確切的格式
以及如何將內容映射到連接的硬件上
現在我們換回AVAudioEngine設置話題
這裏有兩個用例
第一個用例是如果你已經擁有多聲道內容
第二個用例是如果你擁有單聲道內容
並且想對它空間化
這通常是爲遊戲準備的
所以 在第一個用例中
我擁有多聲道內容以及多聲道硬件
我只需獲得硬件格式
我將它設置爲我的混音器和我的OutputNode間的連接
在源端我獲得了內容格式
並將它設置爲我的SourceNode和混音器間連接
這裏混音器爲你處理聲道映射
現在 在第二個用例中我們有一堆單聲道源
我們將使用EnvironmentNode對其空間化
跟之前一樣我們獲取硬件格式
但在設置兼容格式前我們必須將其映射到
EnvironmentNode支持的格式
要了解支持的格式列表你可以查詢我們的網上文件
所以 我設置好兼容格式
現在 在源端像之前一樣 我獲得內容格式
並將其設置爲我的播放器和EnvironmentNode之間的連接
最後 我也必須將多聲道呈現算法設置爲
SoundField 它目前受EnvironmentNode支持
此時 我可以啓動引擎開始播放
然後調整我們支持的所有各種3D混音屬性
好 簡單回顧下
AVAudioEngine是功能豐富強大的API
它簡化了實時音頻的處理工作
它使你能夠處理多聲道音頻和3D音頻
現在 你可以在Watch上
開發具有豐富音頻體驗的遊戲
它取代了我們的AUGraph和OpenAL API
我們在之前演講中簡要介紹了Engine
我們鼓勵你儘量瞭解與此相關的內容
現在 我要將舞臺交給我的同事Doug
讓他接着介紹
Doug？
謝謝 Saleem
好 我想在此繼續介紹音頻API
我們介紹AVAudioEngine時順便說到了實時音頻
Saleem強調
儘管音頻處理在實時環境中發生
我們卻是在非實時環境中進行控制
這就是操作簡化的本質
但有的時候你實際想要
在實時過程或環境下工作
所以 我想進一步介紹下這點
那麼 什麼是實時音頻
有的用例中我們需要實時操作
這種用例的特點是低延遲
可能我所熟悉的我們平臺上
最早的應用例子是音樂應用
比如當用戶按下MIDI鍵盤上的
一個鍵時你可能正在合成聲音
我們想要儘量減少
從按下MIDI音符到播放音符的時間
我們有像吉他踏板一樣的實時音頻效果
我們想要儘量減少從吉他音頻
輸入進電腦
到我們在電腦中處理音頻應用延遲、變形
然後將音頻發回到擴音器所花費的時間
所以這種情況下我們需要低延遲以實現樂器的快速響應
電話也具有要求低延遲的特徵
我們都曾經跟其他國家的人打電話
而且經歷過高延遲的情況
高延遲在電話中是不好的
我們進行很多信號處理
我們需要降低延遲
同樣 在遊戲引擎中我們也希望降低延遲
用戶在進行操作與控制桿等交互
我們想要儘快產生相應聲音
有時候我們想要在聲音呈現時
控制這些聲音
或者 也許我們就已經有了遊戲引擎
在所有這些案例中我們都需要寫出能夠
在實時環境中運行的代碼
在這種實時環境中
我們受到約束的
一個主要特徵是我們的操作是有時限的
對吧？每隔幾毫秒
系統都會叫醒我們要求我們發出
持續同樣短暫時間的聲音
也許 我們能夠完成任務產生無縫對接的音頻
也許 我們任務失敗花費過長時間產生音頻
因而輸出內容產生缺陷
用戶聽到的是故障的聲音
我們製造音頻所能使用的時間間隔很短
我們的期限通常短至3毫秒
而iOS中默認的20毫秒
也仍然是非常緊張的期限
所以 在這樣的環境中我們必須特別小心自己的操作
我們不能停滯我們不能分配內存
我們不能使用互斥體
我們不能訪問文件系統或者套接字
我們不能記錄
我們甚至不能調用分派“async”因爲它會分配續延
我們必須小心不要與Objective-C
Swift運行時交互 因爲它們二者並不完全實時安全
有些情況下 它們也會採取互斥體
這是部分列表還有其它操作我們不能做
你要問自己最重要的事情是
我進行的操作分配內存或使用互斥體嗎？
如果答案是“是”那操作就不是實時安全的
那麼 我們能做什麼呢
過會兒 我會向大家展示這方面的例子
不過 首先 我想只是討論下如何管理
打包實時音頻組件的問題
我們通過叫做Audio Unit的API集實現打包
所以 這是我們打包的方式
而對於你 關於此問題作爲其他開發者
你可以通過它打包你在其它應用中會再次使用的
信號處理和模塊
而且它也提供一個API可以管理
你非實時環境和實時呈現環境之間的
轉變和交互
所以 作爲應用開發者你可以託管Audio Unit
這意味着你可以允許用戶選擇一個單元
或者你可以簡單的使用指向系統內置單元的硬編碼引用
你也可以構建自己的Audio Unit
可以將它們構建爲應用擴展或插件
你也可以簡單地私下對你的應用
註冊一個Audio Unit
這樣很有用 比如如果你有一些小塊的
信號處理想要在
AVAudioEngine環境中使用
所以 在Audio Unit下
我們有更根本的API
叫做音頻組件
這是AudioToolbox框架內的一組API
框架維護了系統上所有組件的記錄
AUDIO UNITS：組件
每個組件都有一種類型子類型以及製造商
這些是包含4個字符的代碼
它們作爲發現並註冊組件的鍵
有很多種不同的音頻組件類型
兩種主要的類型是AudioUnits和Audio Codecs
但在Audio Unit中我們又有輸入/輸出單元
生成器、效果、樂器
轉換器以及混音器
在codecs編碼解碼器中我們又有編碼器和解碼器
在macOS上我們還有音頻文件組件
關於組件的實施
組件的實施有很多不同的方法
有一些是如果你用它寫代碼時需要了解的
而另外一些 不過是背景知識
現在創建組件最好的方法
若是Audio Unit 最好是創建Audio Unit應用擴展
通過10.11和9.0版本我們去年對此進行了介紹
所以 那些是應用擴展
而那之前 Audio Units是打包在組件捆綁包裏的
audio codecs等也是如此
那大概要回溯到Mac OS 10.1了
有趣的是 音頻組件也包括iOS上應用間的音頻節點
節點應用使用
組件子類型和製造商密鑰進行註冊
主應用程序通過AudioComponent Manager
發現節點應用程序
最終 你能夠註冊——像我之前提到的——
你能夠註冊自己的組件以便用於你自己的應用程序
只是補充下有一些Apple內置組件
在iOS上 它們連接到AudioToolbox
所以 以上就是組件實施的情況
現在 這裏 我要將焦點僅僅集中到一種組件——
音頻輸入/輸出單元
這是Audio Unit
音頻輸入/輸出單元最常用
如果你只使用一種組件這很可能就是
你會使用的組件
其中的原因是這是連接到系統基本
音頻輸入/輸出路徑的首選界面
現在 在macOS上 該基本路徑位於Core Audio框架
我們稱之爲Audio HAL
這是非常低級別的界面
比如 它能使客戶處理在多聲道設備上
有趣的流媒體類型
所以通過音頻輸入/輸出單元
能夠非常輕鬆地處理Audio HAL界面
在iOS上 你甚至不需要Core Audio框架的訪問權限
在那裏 它不是公共的
你必須使用音頻輸入/輸出單元
作爲你將音頻輸入和輸出系統的低級別方式
我們現在音頻輸入/輸出
單元的首選界面是AUAudioUnit
及AudioToolbox框架
如果你使用我們的API已經有一段時間
你熟悉第2版Audio Units它是macOS上AUHAL系統
以及iOS和Watch上AURemoteIO系統的
一部分——
實際上 我不確定Watch上有沒有
不過不論如何AUAudioUnit是你連接到
低級別I/O機制的全新現代界面
所以 我要向你展示使用
AUAudioUnit進行AudioIO操作的情況
所以 這裏我用Swift寫好了
產生方波的簡單程序
這是我的信號處理
像之前提到的 我要展示你在這兒可以做什麼
所以 這個波形信號發生器向你展示
你基本上可以讀取內存寫入內容並進行數學運算
這是這裏進行的所有操作
即產生最簡單的波形 ——方波——
至少從計算機的角度來說最簡單
所以 這種級別叫做SquareWaveGenerator
讓我們看看如何使用AUAudioUnit播放SqaureWaveGenerator
首先 我們創建一條音頻組件描述
這條描述告訴我們尋找哪個組件
類型是輸出
子類型是我根據平臺在這裏做出的選擇——
RemoteIO或HalOutput
這裏有Apple製造商以及一些未使用的標記
然後我可以使用組件描述創建AUAudioUnit
這樣我就能得到想要的單元
現在 打開了我可以開始配置
這裏我要做的第一件事是搞清楚
系統上有多少音頻聲道
這可以使用多種方法通過iOS上的AVAudioSession實現
不過 最簡單和便捷的是
你可以簡單地查詢
輸入/輸出單元的outputBusses
而outputBus[0]是輸出指向的流
所以我將獲取它的格式那是我的硬件格式
那麼 這個硬件格式可能是比較奇異的東西
比如 它可能顯示惰性
我不知道是不是要處理它
所以我只是創建一個renderFormat
這是具有相同採樣率的標準格式
以及一些聲道
爲快速簡單起見我只呈現兩個波段
而不論硬件聲道數是多少
好 那就是我的renderFormat
現在 我可以告訴I/O單元
這是我想要在inputBus[0]上給你的格式
完成該操作後 該單元現會把我的renderFormat
轉換成hardwareFormat
在該例中 在我的MacBook上
該單元會獲取該去交錯的浮點
並將其轉換成交錯浮點緩衝器
好 接下來 我將構建我的方波生成器
如果你是像我一樣的音樂和數學迷
你知道代碼中有A440該數值乘以
1.5後增長20%
所以 我將在左聲道呈現A
右聲道呈現E
這裏是會在實時環境中運行的代碼
其中有很多參數
而實際上我只需要其中的幾個
我只需要frameCount和rawBufferList
rawBufferList是一種高難度的低級別C結構
我可以使用SDK上的覆蓋在Swift語言中對其重包裝
這樣拿走了音頻bufferList
讓它看起來像是矢量或數組/陣列
將rawBufferList轉換成
不錯的Swift包裝後我可以查詢它的數量
如果我得到至少一個緩衝器那麼 我就能呈現左聲道
如果我得到至少兩個緩衝器我就能夠呈現右聲道
這就是我現在要做的所有工作
當然 波形信號發生器內還有更多的工作要做
不過上述就是實時環境下的所有工作
所以 現在 我都設置好了準備好呈現了
我會告訴I/O單元
進行所有必要的分配以便開始呈現
然後I/O單元實際會讓硬件
運行3秒 然後停止
這個簡單的程序到此結束
這就是AUAudioUnit
接下來 我要簡單講一下其它一些Audio Unit
我們有效果 可以獲取音頻輸入 產生音頻輸出
有樂器 可以獲取類似MIDI的東西作爲輸入
同時也能產生音頻輸出
有生成器 能夠產生音頻輸出
而不輸入任何東西除了一些可能的參數控制
如果我要將我的方波生成器重新打包爲Audio Unit
我會做成生成器
要託管這些種類的Audio Unit
你也可以使用AUAudioUnit
你可以使用單獨的部分向它提供輸入
這跟你在I/O單元上看到的
輸出供應塊非常相似
你可以將這些單元呈現部分連接起來
創建你自己的定製化類型
你可以使用參數控制這些單元
而且 很多單元尤其是第三方單元
都有很好的用戶界面
作爲主應用程序你可以獲取
audio unit視圖在你的應用程序中顯示
並讓用戶與其交互
若你想編寫自己的Audio Unit
我首先的做法很簡單就是在應用的環境中
構建Audio Unit
這樣你可以進行調試而無需擔心流程間的通信問題
全部在一個過程中完成
你首先將AUAudioUnit劃入子級別
使用AUAudioUnit的這一級別方法將其註冊爲組件
然後你可以對其進行調試
一旦完成——
如果你確定了要將其作爲
Audio Unit擴展分佈
你就可以採取同樣的AUAudioUnit子級別
你可以對其微調和進一步修飾
不過然後你將需要多花一點功夫
將其打包爲Audio Unit擴展
所以 你就獲得一個擴展程序你可以把它嵌入某個應用程序
也可以在App Store出售該應用程序
好 我想邀請我的同事Torrey
向你展示下Audio Unit擴展的一些威力
過去一年我們一些開發者使用它
做了不少很酷的事情
大家可好？ 
參加WWDC可開心？
好
讓我們製造些聲響吧
我會從這兒開始 啓動——
首先我的樂器在這兒
這是我的iPad Pro我首先啓動Arturia iSEM
這是非常強大的合成器應用
這裏是我喜歡的合成喇叭聲音
我很喜歡這個聲音 我想把它放到我正在編輯的曲目中
這個將作爲我們的AudioUnit插件應用
現在 我要啓動GarageBand
它將作爲我們的Audio Unit主應用程序
現在GarageBand中有個我正編輯的sick beat
我將它命名爲WWDC Demo
讓我們聽一下
好 接下來我們看一下辭句部分
接着 我們將處理和聲部分
這應該是歌曲的高潮部分
我希望多一點動感多一點張力
讓我們通過Audio Unit製造這種效果
我將在這裏添加一個新曲目
添加新樂器 我會看到這裏有Audio Unit選項
如果我選擇它 接下來我會在這裏看到系統上
寄存所有的Audio Unit
我看到的是Arturia iSEM因爲我在家裏練習這個
選擇iSEMGarageBand現在將
在這裏顯示屏幕上的MIDI控制器以供我使用
它有完整的尺度變化以及琶音器 就在這裏
我會充分利用這些工具因爲我很喜歡動感的音樂
在這裏的左邊你可以看到音調/修正滾輪
你甚至可以修改速度
Audio Unit在這裏向我提供的視圖
其實我可做小的調整
而現在 我要在這裏錄製一小段音頻
然後看一下它在整個曲子中的效果
那麼——
好了 不錯
讓我們聽一下它在整個曲子中的效果
好了這就是我想要的張力
現在 讓我進行更深入的介紹向大家展示我進行的操作
我會在這裏進行編輯
我會更仔細地觀察循環曲目
這裏 我希望大家注意兩點
第一點是這些是MIDI事件
使用跨應用音頻與將Audio Unit作爲插件使用
的不同點是你實際可以在這裏看到
MIDI音符 這就使事後的編輯更簡單
我希望大家在這裏注意的另外一點是
你可以在這裏看到單個MIDI音符
但是之前你看到的是我彈奏巨大粗厚的和絃
這是因爲我利用了
GarageBand內置的琶音器
所以我纔得到了這些單個音符
如果願意我可以隨意更改
使音符聽起來更人性化
不過我對曲子現在的效果已經很滿意
這裏 我最後要向大家顯示的實際是 首先
我會將這個複製到臨近的單元格
我之前跟你提過這裏提供的Audio Unit視圖
實際是交互式的
它不僅是外觀漂亮的圖片
所以 如果你喜歡探索你甚至可以嘗試
爲朋友演奏一曲
略微提高音量
讓我們收尾
我的演示就到這裏
我想感激大家所付出的時間和精力
始終感謝大家寫出炫酷的應用
演示Audio Unit擴展
謝謝Torrey
好 這裏簡單回顧下
你能看到我們去年關於Audio Unit擴展的介紹
其中更詳細地介紹了API的構造
這裏我們只是想向你展示
由於Audio Unit炫酷的功能人們利用它都做了什麼
好 說到MIDI我們看到GarageBand怎樣
將Torrey的演奏錄製成MIDI
我們的系統中有很多API是
使用MIDI通信的而要在什麼時候使用
哪些API並不總是很清楚
所以我希望能夠幫助大家稍稍澄清這一點
現在 你可能就有一個標準的MIDI文件
比如 難聽的手機鈴聲
不過MIDI文件在音樂教學中十分有用
我可以獲得我想學習樂曲的MIDI文件
我可以看到所有的音符
若你有一個MIDI文件 你可用AVAudioSequencer
播放該文件
這樣會在AVAudioEngine環境中播放文件
如果你想要控制軟件合成器
如我們看到GarageBand控制iSEM的情形
能使用的最好的API是AUAudioUnit
而且如果你想要AUAudioUnit回放到
AVAudioEngine你可以使用AVAudioMIDIInstrument
現在 有MIDI核心框架
人們經常認爲該框架會做一些
其它較高級別的任務
但實際上 它是非常底層的API
基本上只是用於與MIDI硬件通信
比如 外部USB的MIDI接口
或者藍牙MIDI鍵盤
我們也提供MIDI網絡驅動
你可以使用它發送原始MIDI消息 比如在iPad
和MacBook之間發送
你也可以使用核心MIDI框架
在流程之間實時發送MIDI
這有時會涉及一個灰色地帶
人們會問：“好吧 我該使用核心MIDI在我的
排序器以及正在收聽MIDI和
合成的應用之間通信嗎？”
我會說那可能不是適合於這種情況的API
如果你正在同時使用MIDI和音頻
我會使用AUAudioUnit
情況應該是當你在兩個應用中
或者一個應用的兩個實體中
操作純MIDI時——或許其中一個是來自
另一開發者的靜態庫
在上述情況下 你可以將核心MIDI用於流程間
或實體間的實時MIDI
這裏就到了我們音頻API長篇介紹的尾聲
我們從應用程序開始——在底端是
CoreAudio框架和驅動
介紹了AVAudioEngine如何用AVAudioSession
在我們除了macOS之外的所有平臺上完成設置
我們介紹了你可以怎樣使用AVAudioPlayer
及AVAudioRecorder從文件中
進行簡單的播放和錄製操作
或者如果你的文件或網絡流媒體涉及視頻
你可以使用AVPlayer
AVAudioEngine是構建複雜處理圖表的
優質高級別界面
可以處理很多問題
你通常無需使用任何較低級別的API
不過如果使用了 我們介紹了AudioToolbox中的
AUAudioUnit 它可以讓你直接與I/O循環
與第三方或與你自己的樂器效果和生成器通信
最後 我們簡要介紹了核心MIDI框架
我今天在此的介紹結束了
你可以訪問此鏈接瞭解更多信息
我們在此提供了很多相關介紹
非常感謝