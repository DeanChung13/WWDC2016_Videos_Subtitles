Xcode源代碼編輯器的使用和擴展
大家好
歡迎來到“Xcode源代碼編輯器的使用與擴展”
我是Mike 是Xcode工程師
我是你們和beer bash之間的必經之路
那我們今天要講的是什麼呢？
嗯我們馬上開始
我將給大家展示XCode 8中一些新增的很棒的功能
但這還不是全部
我還會給大家展示一些非常有幫助的功能
這些都已經集成在今天正運行的Xcode中
你可能對這些並不瞭解
但是我覺得它們非常酷
我每天都用它們來快速編輯和操控Xcode的源代碼庫
需要說明的是我這裏給大家展示的所有東西
在Xcode中的都是標準集成的
然後我的同事Chris會到臺上來
教大家如何拓展我們所提供的東西
並教大家如何進一步擴展Xcode源代碼編輯器
你可以編寫擴展程序
讓編輯器做一些你經常要它做的事情
然後你甚至還可以分享這些擴展程序
給你的朋友同事甚至全世界
在源代碼編輯器中你將會注意到的第一個東西
或者你只要在今天會場上擡頭環視一下就會看到
我們新的源代碼字體SF mono
這是mono space對系統字體San Francisco的致敬
我們的字體專家特意設計了適合顯示屏retina的SF mono字體
還精心設計了
程序代碼符的各種符號字體
即便在很小的尺寸上都清晰可辨
大家將注意到的下一個是
看我正在編輯器中來回移動的地方
就是我們對當前編輯行會進行高亮顯示
這樣一目瞭然很快就可以定位當前編輯的地方
每個內置的Xcode主題都有精細的
人工配置的高亮顏色但也可自定義
所以你可以按自己喜好將它改得儘量醒目
或者如果你不喜歡這樣的也可將它設置爲完全透明
你可能已經熟悉我們的註釋和取消註釋的命令
也就是“/”命令對吧？
對了我們增加了一個新的命令
你可以點擊選項鍵並使用“/”命令把它調出來
這樣就插入
一個資料註釋
因此
這可以直接用於任何類函數 類 結構體或它們之上
你也知道這些東西是一種結構性的碼位元素
此外
大家還會注意到此處這些小佔位符
衆所周知這些用來描述你的類函數
或討論參數
throws描述或者大家都知道的
描述一些有關返回值的重要內容
真正有價值的是這些片段性的資料
你在代碼中添加的會在快速幫助中出現
還會在代碼完成窗口的底部出現
還有請注意我們提供了
新的SF mono字體
提供了更多選擇而不僅侷限於常規和加粗
資料註釋使用SF mono細體
而關鍵字使用SF mono中等
只是更亮更粗一點
相對於文件中其它內容都使用的SF mono常規字體
不同於大多數其它mono space字體
我們給SF mono配置了完整的磅數表
從細體到半粗體再到黑體
我們還引入了斜體差異配置項
這可以保持每個字符之間的間距
即便是對需要強調的內容進行精準自定義也可勝任
下面講下一功能我將展示如何跳轉到另一個文件
我通過按下Command及Shift O實現快速打開
並輸入幾個字符轉到我的TimerViewController
大家可能之前見過這個
這是文檔條目菜單
通過按Control 6就可以打開這個菜單
它擁有所有的類、結構體、枚舉、屬性
該文件中所有的東西
但這並不是最有趣的部分
你知道嗎當這個菜單彈出只要你一開始輸入
它就會對項目進行過濾？
然後你就會注意到此處
這個小小的“待修正”註釋
實際上就有個小的創可貼圖標在上面
我覺得這很可愛
接下來...
轉到這兒進入my load view 類函數
在這兒你可以看到每個圖片都有一種顏色
我們一直在等設計師爲我們提供
其實我昨晚才弄了這些P&amp;G's
我把它們放進jogger資源目錄
這樣我們就能真正
在下面的庫裏看到它們
這個用於Timer Button
接下來我要從這兒選擇當前行的末尾
通過按下Control E並同時按住Shift鍵
我將按下CommandSpace調用代碼完成
現在仔細看
我要使用代碼完成窗口直接分配這張圖片
我只需要輸入t b就可以獲取我的Timer Button
你還會注意到和Xcode 7.3一樣的代碼完成窗口
現在用了相同的模糊匹配算法
與快速打開、文檔條目菜單
甚至在資料窗口的新搜索所用算法一樣
在左邊你還可以看到圖片的預覽
這樣你就能知道所選擇的是否正確
接下來...
在源代碼中就在這兒Boom
這是圖文並茂的
因此庫裏的的每一張圖片
不管是來自資源目錄
還是僅僅作爲項目的參考
現在都可以從代碼完成窗口中看到
在源代碼編輯器中
接下來讓這生效的方式就是插入一個Swift特定實體
在源代碼中這對Swift編譯器是已知的
而且它解除了對指定UIImage圖像的調用
這樣你就可以看到所有圖片都放置有序而不僅僅是名稱字符串
且對顏色也進行了同樣處理
接下來我要從這兒選擇當前行的末尾
並調用代碼完成和類型顏色
當我在此處敲擊Return會發生什麼呢
大家會注意到我把非常整潔的顏色選取器調出來了
從這兒我只需用向下的方向鍵
選擇一種顏色就像這樣就可以選擇優雅的綠色
需要知道很重要的一點是所有這些圖像和彩色文字
都是全鍵盤導航的
若我在某個文本上按住Shift和回退箭頭並點擊Return
就會把顏色選取器再次調出來
而且你知道我還是可以用方向鍵選擇
但是如果這些彈出來的顏色不是你正要找的
大家看如果這剛好不是我正要找的
你可以使用最近的顏色
這也是和InterfaceBuilder共享的
或者你可以點擊這兒下面的其他按鈕
它會調出標準的系統顏色面板
在這種情況中我其實只是想取樣這種非常優雅的海軍藍就從這個按鈕
因爲在我構建它時這就和該按鈕是綁定的
但我們此處還是有點小錯誤
此處的顏色文本是UIColor
但我們將其指定的層是cgLayer所以應該需要cgColor
所以我可以很快解決這個問題就像這樣
希望這樣已經講清楚了圖像和顏色文本
實際上都是完整分類和檢查的在Swift中是實的對象
我下面想要給大家演示的
其實並不是一個新功能它甚至不是Xcode的功能
它實際上屬於標準的CocoaText系統的一部分
從macOS 10.0之前就這樣
這就是查找粘貼板
大家可能之前沒有注意過
如果你進行了查找可能通過選擇一些文本
比如說此處Pause 然後使用Command C將其複製到粘貼板
再使用Command F調出查找框
然後通過Command V將它粘貼其中
相同的搜索過程也會出現在其他應用程序中
這很奇怪不是嗎？
嗯
這是因爲查找粘貼板是...
它其實是跨應用程序工作的就像衆所周知的剪貼板
它與剪貼板是並存的而且兩者可以同時存在
所以實際上就有一個非常酷的技巧如果你有一些東西
想要保留在剪貼板中而不被清除
但是如果你仍然想要搜索
比如從這兒開始搜索
你只需要按下Command E
就會把它直接推送到查找粘貼板中
然後這樣就可以讓你點擊Command G
並循環遍歷該文件中所有匹配的內容
現在如果你只是想在同一文件中快速查找和替換
我們也提供一條專門的命令
如果你按住Command Control E
實際就會對整個範圍內的全部內容執行編輯
這樣就修改了本文件中所有該符號的實例
所以這裏我可以給這個類函數加上ED
因爲started聽起來更好一點
而且...
這種方法可以大大節約時間我自己就經常使用它
現在如果你想要做的是移動大約幾行
你也不需要剪貼板來完成
實際上我們提供了一條專門的命令來完成這個
若此處選擇幾行並按住CommandOption Bracket
你會注意到我其實可以移動整個區塊
在if函數和其它類函數的裏面或外面移動
它們只是在你的代碼裏整體挪動
這確實很棒
如果你每次只在同一文件中操作
但若你想在其它文件中進行交叉查找
例如若我想找出所有的timer實例
你可以通過按住Command F和Shift完成
實現在整個項目內查找
這裏我就...
把timer加入到我的查找粘貼板中進行搜索的
這實際上是我最近才被告知的一個特性
我不需要點擊進入查找導航框其實就可以開始
通過上下鍵選擇這些結果
此處Command G也可以實現
唯一不同的是我僅按住了Control鍵
同時按下了Command G
這樣就可以遍歷所有的結果
在所有不同的文件內遍歷
包括InterfaceBuilder文檔
以及其中所有的實例和匹配記錄
通過按住Shift可逆向實施
與Command G效果一樣
所以我不知道我知道有些人其實
把這些記下來
但是你真的不需要記因爲在Xcode中其實就有個地方
提供了所有這些命令的完整列表
及其相應的按鍵
這就在Xcode參數設置窗口中
在這兒在按鍵綁定設置窗格中
你其實可以進行搜索
搜索任何涉及到的東西
你可以查看所有的結果
還有如果你含糊地重新調用
可能會有某種顯示命令
你可以按下Command J
這實際上也就是搜索鍵盤快捷鍵
這確實很強大
如果你不喜歡我們爲Xcode所有內置命令而設置的鍵盤快捷鍵
你可以從此處自行設置
此外……
如果我們的內置命令不夠
且/或者剛好無法完成
你經常希望代碼編輯器做的事情
我想邀請Chris上臺
教大家如何添加自定義的命令Chris
謝謝你Mike
如Mike所說我是Chris今天我要向大家展示
如何通過源代碼編輯器擴展Xcode
現在向大家展示如何向源代碼編輯器添加個人命令
使之成爲編輯器菜單的一部分
你的命令可以修改用戶的文本
以及該文本內的選項
說到運行導航
與一些其他類型的應用程序擴展不同
你可以將任何數量的命令作爲Xcode源代碼編輯器的擴展來實現
我們將Xcode擴展建立在應用程序擴展的基礎上
這是我們所有操作系統擴展性的基礎
既然Xcode拓展即是應用程序拓展
各個run函數即在各自進程中並能執行所有在該進程內接受的命令
且不會對Xcode或其他擴展造成幹擾
當然作爲應用程序擴展Xcode擴展也是沙箱型的
並通過各種權限來完成脫離該沙箱所需做的事
Xcode只能訪問Xcode擴展
以及在運行時所需的文本與元數據
以此來執行相關操作
它們無法訪問項目結構
以及磁盤上的用戶文件
爲什麼我們要這樣設計呢？
當然...
爲了穩定性
我們希望確保Xcode能儘量穩定
對我們所有的用戶
以及安全性考慮
應用程序擴展是我們提供給大家來
增強操作系統及我們現有工具的方式
並同時能保持整個系統的完整性
當然還有運行速度方面的考慮
應用程序擴展是建立在Mach信息與XPC之上的
並且是完全異步的
因此它們能快速運行且不會降低用戶的速度
還有另一個原因
我們決定將應用程序擴展
作爲Xcode擴展的基礎
這是爲了將它們放到Mac APP Store內
就像所有其他應用程序擴展一樣
Xcode擴展被嵌入到了一個主應用程序中
該主應用程序是一個理想的載體
來搭載你的擴展偏好或配置信息
例如爲了控制
用戶實際希望從你的拓展中能夠使用的命令
並且這也是一個搭載其他任何
你希望該拓展所提供的UI理想載體
因爲Xcode所能做的是提供有關
你的各命令的菜單項
成爲了應用程序便能進而實現應用程序擴展
便能在Mac App Store上找到Xcode擴展
當然你還可以登錄你的應用程序和你的Xcode擴展
通過你的developer ID並對其按照你的意願進行分配
現在我們來談談關於
Xcode是如何激活你的擴展的
爲保證最佳性能
Xcode會查找你的擴展並自動將其啓動
在Xcode啓動過程的早期
XCODE擴展生命週期
在你的用戶使用擴展之前
源代碼編輯器擴展並不像一些其他類的應用程序擴展
只能使用一次之後便不能使用了
實際上Xcode會盡可能將你的擴展
維持爲可用狀態
因此它可以發送任何用戶想要調用的命令
現在當你的擴展啓動時
如果它需要即刻進行任何工作
Xcode將向它發送extensionDidFinishLaunching
對於啓動來說只要夠快那就是一個好的地方
沒錯 你需要儘可能地讓啓動過程夠快
這樣一來你的用戶就能
隨時使用該擴展
爲了幫你實現這一目標
Xcode將保證你的擴展與
其他擴展的啓動是異步進行的
且與Xcode的啓動也是異步的
現在當你的擴展啓動時
Xcode會詢問它的指令
指令可以來自兩個地方中的一個
通過默認函數可以得到一個項
info.plist文件中的NSExtensionAttributes字典類中
該文件指定了你的擴展中的所有指令
不過你還可以提供
關於你的擴展類中的commandDefinitions的屬性重寫
重寫info.plist文件返回值
因此 若你的擴展擁有指令動態列表
其中有描述因爲下載了新的JavaScript
這些JavaScript實際是用來運行那些指令的
它能提供一個新的集合
現在一旦Xcode收到你的指令
它會給每個擴展分配
擴展所對應的編輯器菜單的子菜單在用戶編輯源代碼時
並按字母順序列出擴展名
就像在finder中一樣
所以對用戶而言它們都在穩定的地方中
從自身運行到Xcode運行
然而因爲指令的順序通常很重要
而且通常傳遞大量語義
Xcode將保留你所發出指令的順序
並將該順序在菜單中排列出來
現在來談談指令調用
當然 用戶可以從你的菜單項中選擇指令
也可以通過個人設置的快捷鍵來實現
你的指令對象將被實例化併發送調用指令和回調指令
調用指令打包所有
這些命令執行所需的數據和元數據
當工作完成 指令將使用回調程序
來告訴Xcode 工作完成
讓我們看看實際的API
我們有個簡單的協議
你所有的命令類都需要符合它
如我所說它已進行了一次調用和completionHandler回調
並且該調用僅攜帶一些簡單的數據
且具有一個commandIdentifier
該commandIdentifier在info.plist文件內或命令定義數組內進行設置的
而且這能使你區分多個
受控於同一命令類的命令
畢竟其中涉及很多命令特別是對於編輯源代碼而言
而它們之間的區別卻很小
大家可能希望通過同一個命令類來執行多個任務
並僅處理各任務中的若干不同特定實例
該標識可讓大家找出
用戶調用的命令
我們還提供了一個屬性
你可將cancellationHandler設置爲“開啓”
若用戶取消了你的命令 那麼cancellationHandler即被調用
並且如果你的指令花費時間過長它也會被調用
我們將會在演示部分對其進行略微深入的講解
最後當然調用過程也包含
有關用戶使用的文本緩存
該Source Text由
另一個目標實例一XCSourceTextBuffer來表示
除文本之外　還有許多元數據
我們給大家一個統一的類型標識
讓Xcode認爲文本包含的文件是對應的
如此大家就可以使用Swift源代碼
XML數據ObjC++ 頭文件等各種文本格式進行編寫
我們還爲該文件提供了Xcode的縮進設置
所以當你在文件內對文本進行變更時
你依然遵循用戶期望Xcode做的事
當它縮進該文件時
因爲tabWidthindentationWidth
及是否使用TabsForIndentation間存在微妙的相互作用關係
爲此我們還提供了大量有關它們如何協同工作的詳細信息
大家可在頭文件查閱該信息
因此我鼓勵大家找出該頭文件
並確切瞭解它們是如何相互協同的
現在我們提供用戶通過兩種不同方式正在使用的文本
如果你需要將該文本處理爲單數據流
即通過管道將其輸送到一個命令行工具
你大概會希望使用
completeBuffer
該緩存代表用戶正在使用的文本
代表作爲單一字符串的整個文件
然而如果你僅需要對文本進行微小變更
那該方法的效率會很低因爲你的擴展需將
所有的緩存發回Xcode
因爲我們爲之提供了可變數組屬性
其中包含文件中的文本行
我們發現當採用源代碼編寫工具時
實際上採用行與列抽象化要遠優於
僅使用單一而龐大的文本緩衝區
並且通過成爲可變數組
還可以讓Xcode實際追蹤你進行的變更
所以我們只需要發回個別你所進行的更改
不需要發回整個緩存
這確實能提高編輯擴展的性能
除了提供文件中的文本行
我們還爲文件中的選項提供了可變數組
總會有至少一個選項
要麼是用戶的插入點要麼是選項
因爲Xcode編輯器是構建在Cocoa Text系統之上的
所以我們同樣支持多重選項
如果你想要改變選項
你要做的就是改變該可變數組
且該數組中存在的都是SourceTextRange對象
調用SourceTextRange替換NSRange
因爲我們真的相信
我們提供的行與列抽象
對於大多數文本編輯來說是最好的方法
這就是爲什麼源區域能替代一個位置和一段長度
成爲實際起點與終點的原因
那些位置都在行抽象與列抽象中得到表示
我將向大家演示如何創建
個人Xcode擴展
我先到演示機這邊
然後...
我把筆記本放在這兒
給我留下深刻印象的是剛纔Mike關於
Swift文本 Swift色彩和圖像文字的描述
我真的很想在我自己的代碼中使用它們
因此我覺得我該
創建一個新的源編輯器擴展
它可以自動將任何UIImage或UIColor的使用方法轉變爲
相應的Swift文字
我只需創建一個新的Xcode項目
以及一個新的OS X應用程序
畢竟我的應用擴展
和Xcode擴展都得在應用程序內部執行
然後創建這個並把它命名爲Chris文字
然後賦予一個叫做com.example的組織標識符
點擊“下一步”然後我把它放在桌面上
現在我已經創建了我的項目
我要向其添加一個新的目標
且添加一個OS X應用程序擴展目標
你可以看到
新的Xcode源代碼編輯器擴展模板就在該列表的末尾
然後我把它命名爲...
Chris Convert to Literals...
搞定
當我點擊Finish時
Xcode就會提出供激活目標的建議
就像其他應用擴展一樣
然後點擊接受
現在讓我們來看看Xcode爲我生成的代碼
在這個轉換爲文字的組別裏
Xcode添加了一個類這個類表示我的擴展本身
這隻符合XCSourceEditor擴展協議
並且它還爲類函數和屬性添加了模板
如果我想重寫的話我可以對其取消註釋
並提供自己的實現
但現在我還不想這麼做
我認爲沒必要讓它來執行這個特定的項目
我們來看下一個文件
在下一個文件SourceEditorCommand中
有我的第一個命令類
正如我向你們展示的那樣它符合XCSourceEditor命令
並且僅在vocation類函數控制下單獨執行
現在讓我們看一看Xcode創建的info.plist文件
你可以看到在我的擴展屬性中
Xcode添加一組XCSourceEditorCommandDefinitions
這是一個字典數組
該字典爲命令指定了需要實例化的類
要使用的標識符
以及命令應具備的菜單項名稱
我把它的名稱改爲ConverttoSwiftLiterals
然後接受
將鏡頭縮小 返回到命令界面
現在我要作個小弊因爲代碼已經寫好了
我使用代碼片段把已經寫好的代碼嵌進去了
我把這稱爲Chris Demon大家可以看到實際上代碼並不是很多
所以我只需循環文件中所有的行
如果該行中存在一個UIColor或UIImage調用
我僅使用對應的Swift字面語法去替代它
然後如果行已經改變了
那我就得替換行數組中的行了
我並不是替換數組中的每一個行
我當然不是修改整個緩存區
我只修改實際需要修改的行
而且我還對修改的行保持追蹤
因此之後我還可以構造
一組選擇來表示那些行
我設置了那些選項
之後僅需調用我的完成處理程序
讓Xcode知道我的命令已完成
我在建議的程序列表中見到了Xcode
如果我點擊運行大家認爲會發生什麼
當然除了建立我的擴展程序之外
你可以看到
我們爲大家開發了另一個Xcode實例來測試大家的擴展程序
我們實際還提供一點視覺差別
我們在dock裏將圖標變得更黑
並且對“歡迎來到Xcode”窗口內的圖標也加黑
清晰明瞭
你會清楚地知道這個Xcode正在對一個擴展進行測試
我現打開Mike的Jogger項目
因爲我注意到有些UIImage和UIColor
還沒有轉換
大家可以另外看到一種情況
我們在活動視圖的頂部對UI進行修改
以此來特別說明
Xcode正在測試一個擴展
Mike給我留下了一些真正想要的UIImage和UIColor實例
我認爲作爲字符會更好看
所以我查看一下編輯菜單
看到了Chris Convertto Literals擴展
還看到了Convert toSwift Literals命令
現在如果我返回我最初的Xcode
然後設置一個斷點在這下面
如果我現在實際運行我的命令...
你會發現什麼也沒有
因爲在斷點處就停止了命令
在第一個Xcode調試程序中
所以你其實可以把Xcode調試器
和需承載的LLDB的所有資源都用於調試你的擴展程序
我繼續演示
我們把這裏的斷點刪除
如果返回就可以看到
Xcode對所有我改變的行都進行了強調正如我告訴它的一樣
以上便是所有關於使用新Swift字符格式進行轉換的內容
現在來談談我實際希望在非常常規的環境下進行的操作
這很容易　我可以很快完成
只需對我的新命令添加一個密鑰綁定
在Key Bindings界面下的Xcode偏好選擇中進行操作
搜索我的命令名稱我記得是以Chris開頭
這就是Xcode的Key Binding
我把它命名爲commandoption control/
便於記住是吧？
現在我們來看幻燈片
來說說...
一些我很關心的事
當使用Xcode擴展時你會感受其速度之快
那是因爲文本編輯是用戶同步進行的
用戶們只想把他們的手放在鍵盤上
不停地操作
即使調用你的擴展
你的擴展也不應該阻止
用戶操作的連續性
現在爲了防止
在你的擴展和用戶之間發生競態條件 Xcode會鎖定那些
用戶工作時產生的文件變化
在用戶調用擴展時
幸運的是大家不必擔心
如何協調大家所造成的改變以及來自用戶的改變
從另一方面講這意味着...
如果你的擴展時間過長我們認爲幾秒鐘就算過長
從用戶鎖定到開始編輯文件這段時間
那麼...
我們該怎麼辦？
我們允許用戶取消該命令
我們會提供一個取消指令的按鍵標示
我想系統正在嘗試告訴我
這張幻燈片在這的時間太長了
我們來關掉它然後繼續
Xcode能爲我們的用戶保證快速操作
通過早早地啓動擴展並儘可能長時間地
使其保持激活狀態
所以一旦調用它們就能發送命令
正如我們前面討論過的通過使用行數組
來確保各位的擴展數據傳輸在性能方面得到優化
當用戶需要取消一個命令
可以點擊Xcode界面的取消符號
當用戶點擊取消
他們可以繼續操作
現在...你的擴展任會接收
取消命令並仍然需要對它做出反應
但是用戶不關心這點
當然有幾個方法
你的擴展也可以對Xcode的運行有所幫助
你的擴展可以儘可能快地啓動
你的擴展得爲用戶
執行你的命令做好準備
你可以在我們所有的異步編程模式下使用GCD
以確保你最大可能利用用戶的系統
並儘可能快地返回Xcode
當然...
如果沒必要你可以避免更換所有的文本緩存
最後就像我說的你需要快速處理取消指令
因爲在你的指令完成取消之前
它對用戶而言都是不可用的
今天Mike向大家展示了許多關於
Xcode源代碼編輯器的出色的新特性
比如我們能夠添加文檔註釋
以及在Code Completion中支持Swift color和Swift image字符
還展示了一些添加的最新功能
這些功能已經添加進了Xcode7.3 比如模糊代碼完成
我向大家展示了Xcode源代碼編輯器擴展是如何工作的
以及如何創建它們
我已迫不及待地想看到各位通過我們的新API作出的成就
大家可以獲得更多可用的信息
在我們 WWDC 16 網站頁面上
還可以收看一些相關課程的視頻
特別說明Optimizing AppStartup Time不適用於應用
它僅適用於應用擴展
因爲它搭載了大量相同的技術
我們對Xcode的介紹也非常棒
適合於想要了解Xcode開發環境動態的人
當你實現擴展時用戶們會爲此充滿期待
最後我們有些前些年推出的節目
討論應用擴展意味着什麼
以及實現它們的最佳方法
我們今晚也會參加這個盛會因此...
感謝光臨 WWDC 大會
若有任何疑問 可以屆時向我們提問