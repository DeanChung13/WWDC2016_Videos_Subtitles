Xcode介紹
歡迎大家來到“Xcode介紹”
我是Najla是Xcode團隊的成員
與同事Rick Ballard一起
我們將會給大家介紹Xcode的必要組件
Xcode是創建應用的開發平臺
可爲iOS、watchOStvOS和OS X、macOS創建應用
它爲創建完整的應用提供了必要的工具
從設計你應用的用戶界面到實現代碼
以及測試和調試你的應用
同時爲你的應用發佈到App Store做些準備工作
今天我們將帶你瞭解Xcode的一些必須組件
通過創建應用
你將會學習如何創建一個新的應用
如何把應用運行在模擬器中
如何去測試和調試你的應用
如何去查看你的更改然後提交到代碼管理系統
如何配置你的工程來進行應用的發佈
我們的這次演講大多關於學習如何使用Xcode
也有一小部分關於應用開發的內容
今天我們將要使用到的應用也挺簡單
但是千萬不要被這個簡單的應用誤導
這次演講的內容是面向所有開發者
不論是新的開發者還是有經驗的開發者
學習Xcode最有效的方法是使用它
現在我們打開計算機
我們現看到的是Xcode的歡迎窗口
在窗口的右邊你能看到已經存在的一些項目
在左邊 你可以新建一些項目
讓我們新建項目
當你在Xcode裏面新建項目的時候
你有一些模板可以進行選擇
你可以把模板作爲開發你應用的雛形
這些模板對於這四個平臺都是可用的
iOS、watchOS、tvOS和macOS
這裏我選擇最簡單的可用模板
iOS平臺上單頁面應用的模板
這個模板爲顯示iOS的單視圖應用提供了必要的代碼
我們工程命名爲Hello
如果你有開發者賬戶你可在這添加賬戶並且選擇你的項目組
組織的名字就是你就職的公司
標識符是
你的組織的名字和你的產品的名字
這個標識符是你應用的唯一標識
當你在Xcode中創建了新應用
你可以選擇使用Swift和Objective-C作爲開發語言
我們將選擇Swift我們的應用是普適的
那就意味着我們的應用可以運行在iPhone和iPad上
當你創建了一個模板
你需要在你的工程中配置許多不同的選項
我們將會選擇單元測試和UI選項
讓我們把工程保存在文檔文件夾下
我將點擊“創建Git倉庫”
我們的項目一開始就通過版本控制器進行管理
不錯 這就是我們的工程
雙擊頂部兩下 會重新調整窗口大小
這就是Xcode的主窗口
在左邊的導航區域有你的許多文件和資源
中間是你打開文件的編輯區域
你在導航欄點擊文件的時候
右邊是實用工具區域
這個區域所顯示的信息是
基於你在導航區或者編輯區選擇的內容
如果Xcode對你來說比較陌生你可能覺得奇怪
如何把應用運行在移動設備上？
你可以點擊運行按鈕運行你的應用
在主窗口的頂端
但我們在運行應用前
讓我解釋一下當你點擊運行的時候發生了什麼
當你點擊了運行 你指定了運行的應用
你要在哪兒運行應用
在你的工程中 你可以有許多應用
甚至相同的應用有不同的配置
規則是如何指定你想運行什麼
它裏面同樣包含你如何運行應用的信息
舉例我有iOS應用和Watch應用
在這種情況下我有一個運行iOS應用的規則
和運行我的手錶應用的規則
現在呢 在我們的工程中只有一個規則
這個規則就是Hello我們已經選定它
現在 你運行應用到目標平臺
你在Xcode中選擇的目標平臺你有兩個選項
你可以在模擬器中運行你的應用
或你可在設備上運行你的應用
模擬器是用來模擬你應用運行的設備
模擬器對快速和迭代開發是有用的
當你想獲得你應用的外觀及如何運作的反饋時
我們現已選擇iPhone SE模擬器
讓我們點擊運行按鈕
我們的應用就運行在iPhone SE的模擬器上
我們的應用已經開始運行了
它在這兒
我說過我們選擇的是最簡單的可用模板
這兒沒有任何東西
讓我們添加一些功能來使它變得有趣
我會去點擊停止按鈕停止這個模擬器
同運行按鈕緊挨着的那個按鈕
在Xcode中可以給你的應用添加用戶界面
可在storyboard中進行添加
現由於我們是通過模板創建我們的工程
我們這有兩個storyboard可用
分別是啓動屏幕和主屏幕storyboard
啓動屏幕storyboard包含啓動屏幕的用戶界面
它是第一時間出現的屏幕
當你首次啓動應用時
main.storyboard包含用戶界面
以及你應用的其他界面
讓我們打開main.storyboard
storyboard中
有白色背景的畫布
畫布裏面有場景
有相應的視圖它代表了你應用中的一個界面
爲了便於講解我儘可能將應用做得簡單
我想用代碼與界面進行一些交互
我將添加一個按鈕 當你點擊它時會在文本框中顯示Hello
在實用工具的底端是Xcode庫
比如文件庫和代碼片段庫
點擊從左數第三個按鈕會進入到對象庫
包含你能添加到場景中的所有UI元素
你可以把它們看視爲列表你無法準確知道它的長度
你需更多信息才能知道你看到的是什麼
又或者你可以把它們看作是網格
我已知道我想在場景中放置按鈕和標題欄
我可以使用濾棒
在實用區域的下方進行按鈕的搜索
將它拖到場景中輔助線會幫我們將它居中對齊
這是我早先提到的實用面板
讓我們仔細看看在它頂部的檢視面板
開始的兩個是文件和快速幫助檢視器
在我們工程中它們始終是可用的不管你在導航區和編輯區選擇了什麼
在我的場景中我選擇了按鈕
其餘的檢視器包含這個按鈕的信息
例如 我可以點擊屬性檢視器
獲得按鈕的文本屬性信息比如大小 字體和顏色
我點擊屬性檢視器旁邊的大小檢視器
來查看按鈕的大小和位置信息
我把按鈕的標題改爲Say Hello
我可以在屬性檢視器裏做這些
但是更簡單點的方法是雙擊按鈕
輸入我們想顯示的標題
挺好的 這樣我們在場景中添加了按鈕
回到過濾條界面搜索文本框
我拖拽以便其處於按鈕的頂端並且居中
切換到到屬性檢視器
或者大小檢視器來配置它的屬性
但是我喜歡這種方式 先不管它了
我們需要注意我們的用戶界面沒有指定
視圖如何根據設備大小進行縮放
現在 我們看這個場景
使用的是iPhone 6s模擬器或者設備的尺寸
但若我點擊這個按鈕
我們將可以使用其他設備比如iPhone SE設備
我們可以看到文本框和按鈕
實際上它們並沒有按照我們設想的居中
讓我們切換到iPhone 6s
讓我們使用自動佈局添加一些限制
來爲用戶界面如何進行縮放設置規則
我們可以使用位於畫布底部的自動佈局按鈕設置規則
對於按鈕來說
我想讓它在水平和垂直方向上進行居中顯示
點擊對齊按鈕
對按鈕進行設置以便它在容器的水平和垂直方向上是居中的
在場景中我們可以看到添加的限定條件
對於文本框來說我也想讓它相對於視圖是水平對齊的
切回到對齊按鈕在容器中檢查水平對齊選項
當我們做完上述操作添加的限制變成紅色
意味着有錯誤發生
在文檔大綱的頂端
有一個箭頭將給我們指示錯誤告訴我們錯的地方
可以看到我們沒爲文本框設置y的位置
我實際上並不關心這個文本框在y方向上位置
我只想讓它位於按鈕的頂部
我能做的是點擊這個圖釘按鈕
哎呀 我們沒有在場景中選中文本框
一旦你選中了文本框你可以點擊圖釘按鈕
把文本框的底部固定在按鈕的頂部
這就是我們添加的限制 它是藍色的
我將切回到模擬器
來看下是否像我們預想的那樣顯示了
這就是我們的用戶界面看起來相當不錯
如果我旋轉設備將會發生什麼呢？
使用模擬器 通過點擊硬件菜單模擬旋轉
旋轉到左邊或者旋轉到右邊
那就旋轉到左邊吧 仍然是居中顯示的
模擬器的特別之處在於它可以模擬一系列不同的的操作
旋轉 搖晃 甚至指定位置
我建議你自己運行下模擬器做些操作
因爲當你想做快速測試時用模擬器還是比較方便的
你又不想使用真機進行測試
我們已擺放好用戶界面了我們需要添加一些代碼
以便點擊按鈕時文本框會變成say Hello
停止模擬器
談論一些關於場景和視圖控制器的內容
每個在storyboard中的場景都和一些視圖控制器類關聯
這些類包含一些控制視圖的代碼
在應用中僅有一個場景
在我們導航欄裏僅有一個視圖控制類文件
我可以推斷這個場景關聯這個Swift視圖控制類
但是有多個場景在應用中會怎麼樣呢會有多個視圖控制器文件？
我如何知道哪個場景對應哪個視圖控制器文件呢？
當你在storyboard中選擇一個場景的時候
你可以點擊身份鑑別檢視器
身份鑑別檢視器和屬性檢視器是緊挨着
它實際上是列出了場景引用的類
現在我們可以確定我們需要把代碼放在哪兒
我需要顯示storyboard文件和我們的視圖控制器文件並排顯示
我可以這樣做
我可以在主窗口的頂端點擊編輯助手
它看起來有點窄 我將留出一點空間來
通過點擊這兒的按鈕隱藏文檔大綱
並且隱藏實用區域
通過點擊這個面板
需要注意的是那個條塊在我們編輯區的頂部
可以叫它跳轉條塊它包含了許多有用的信息
關於文件中的函數甚至文件本身
編輯助手的特別之處是
它知道哪個文件
同我在主編輯區打開的文件有關聯
會在編輯助手中爲我打開相應的文件
例如
如果我們在主編輯區打開用Swift編寫的視圖控制器
編輯助手會爲視圖控制器類打開關聯的界面文件
另一個編輯助手很酷的功能是
你可以更改實際的文件關聯
通過選擇位於頂部的跳轉條
可以更改爲你想關聯到的任何文件
例如 你可以更改爲它的相鄰文件編輯助手會打開繼承自基類的所有文件
讓我們切回到main.storyboard
通過使用跳轉條塊的返回箭頭
這樣我們就看到了視圖控制器類和storyboard
我們需要在我們的類中創建按鈕和文本框的引用
我可以這樣做
選中我想選中的UI元素這樣我們就選中它了
按住Control鍵從場景中拖動控件到我們的類中
我希望控件有一個動作
意味着當我點擊這個按鈕時會有所響應
給它命名爲Say Hello
讓我們對文本框做相同的事情
實際上我想讓它成爲插槽變量
意味着它是我可以操作的引用
讓我們給它命名爲Hello Label
現在我們就有了元素的引用
我們需要添加一些操作文本框的代碼到動作
我認爲文本框有一個屬性我們可以使用但是我又不是十分的確定
Xcode中使用Option+點擊還有Command+點擊很便捷
當我們爲文本框創建引用的時候
它被聲明和實例化爲UI label類
我可以按住Option在文本框的類名上點擊來獲得幫助信息
關於這個類是做什麼的以及怎樣訪問它
按住Command 在UI文本框上點擊界面會跳轉到它聲明的地方
假如我僅僅是想查詢文檔
我可以跳轉到幫助
文檔和API參考
並且查找類 搜索UI文本框
會有簡短描述 概覽還會列舉類的所有屬性
這裏表明文本框有文本屬性
我們可以使用這個屬性顯示Hello
關閉文檔切換到視圖控制器文件
點擊跳轉條塊上的返回箭頭
添加一些代碼
我想操作Hello Label我會在這兒鍵入代碼
鍵入代碼Xcode會提供代碼自動補全的建議
這是Xcode的代碼補全
我可以按Tab鍵進行自動補全
我可以訪問文本屬性我可以自動補全它
設置文本的屬性爲Hello
這裏有一些代碼
有一些引用
切回到模擬器中看這些代碼能否正常工作
應用正在啓動
點擊按鈕 顯示發生了變化
非常酷 對不對？
對的
現在你知道如何在Xcode中創建新的工程
如何添加簡單的功能如何將應用運行在模擬器中
你將通過已經存在的工程學習如何使用Xcode
那些工程裏的東西比我們演示的按鈕和文本框更復雜
加快一點速度我和Rick知道基本原理
我們已經實現了一些功能
我將把Rick請上臺來
來給大家演示Xcode開發流程中的剩餘部分
謝謝你Najla
在過去的一週我們構建了一個小型應用
是一個追蹤地震的應用
我們可以看到最近發生地震的地方
我們基本編寫完成了當然 我們編寫了單元測試
以便我們可以確定代碼能正常工作
但我認爲我們還有一些問題需要進行修復
讓我們看一下並且深入到Xcode的調試器和單元測試中
開始前我需要從代碼控制系統中分檢出代碼
Xcode支持Git和Subversion源代碼管理工具
爲了檢出工程我需點擊Xcode的源代碼管理菜單
選擇檢出命令
這是Xcode給出的檢出界面我可以輸入倉庫的路徑
我們倉庫的路徑是example.com/repos
我們的工程叫作Quakenator
我將點擊下一步
Xcode讓我輸入
倉庫的授權憑證
額
Xcode會詢問我將工程檢出到哪兒
放在文檔文件夾下就好了
點擊下載
Xcode會從代碼管理系統中檢出代碼
我們會用檢出的代碼做演示
工程完全檢出來了
你會注意到代碼管理菜單有許多選項
後面我們會使用它們
開始前 我們看一下單元測試
我們可以在左邊瀏覽工程的結構
嘗試着手動查找測試文件但是會有更好的途徑
在導航區域的頂部有許多不同的導航按鈕
這些按鈕會用不同的視圖顯示你工程中的內容
查找面板就是衆多視圖中的一個
使用它我可以查找工程中文本類的內容
例如 我們知道所有的測試方法都以測試開頭
我可以查找以測試開頭的內容
點擊返回
在這兒Xcode會在工程中找到所有以測試開頭的內容
包括測試方法還有些註釋和其他的合輯
挺棒的 做一些更智能的事情
如果我想查找我的測試方法我能找到一些定義
像我的測試方法在哪兒定義
再查找以測試開頭的內容這兒只找到測試的方法
查找面板是個不錯的方法
查找工程裏面的內容
我們按特性查找單元測試的內容
Xcode給我們提供了更好的方法那就是測試導航面板
測試導航面板中 Xcode自動列出每一個單元測試和UI測試
性能測試這些內容是Xcode在你的工程中找到的
其中有一些是灰色的比如UI測試
那是因爲在當前的規則下這些測試是不會運行的
當我運行UI測試的時候我會使用另外一個規則
剩下的測試內容以黑色顯示
那就意味着當我進行測試的時候這些測試都是可以運行的
讓我們儘快試一下
在產品菜單下有測試的選項
同下面其它四個選項是一樣的
點擊運行 應用會在調試器中運行
點擊測試 將會運行測試
點擊配置 將會在容器中運行應用這樣可以測試應用的性能
點擊分析運行Xcode靜態代碼分析
會捕捉到我有可能遺漏的問題
最後存檔會以發佈的方式構建應用並把應用存檔
然後我可以把它發佈給測試者或放到App Store裏
爲未來崩潰日誌解析或者符號化做保存
這個菜單選項將會變得可以點擊
一旦我選擇了可以運行的設備
我將選擇一個進行測試當我開始測試的時候
我希望大家注意窗口活動區域的頂部
因爲它會告訴你Xcode在做什麼
我點擊了測試會看到Xcode正在構建應用
然後將會構建測試代碼 最後就會運行
看起來我們好像有一個編譯錯誤
當編譯錯誤產生
一個標誌會出現在活動區域的右手邊
表明那兒有一個問題
Xcode會自動切換到左邊的問題導航欄
這種做法 像自動切換到導航
當問題發生時顯示問題
像這種行爲可在Xcode中進行配置
你可以學着讓它按照你想要的方式來工作
你有可能想對各式各樣的行爲進行配置
你可以在Xcode的行爲偏好裏進行配置
如果你選擇編輯行爲Xcode會給展示一個偏好表格
讓你對各式各樣的行爲進行配置
當我們進行構建的時候出了問題我們顯示問題面板
當測試生成出了問題比如測試失敗
我們顯示測試導航面板 諸如此類
你想在Xcode中獲得好的體驗
想讓它按照你的工作流程開始工作
我建議你對Xcode的偏好進行設置
讓我們看一下發生了什麼編譯錯誤
我在問題面板上點擊我們的問題
它將跳轉到我們的代碼中
引起編譯錯誤的地方
Xcode在錯誤代碼的右邊顯示發生了什麼錯誤
它看起來像數據源對象
沒有一個屬性或者方法的名爲Assorted Quakes
我知道有AssortedQuakes屬性
只是昨天我對那個屬性進行了重命名
我猜因爲我忘記了在單元測試中對屬性重命名
讓我們想想如何找出這個方法的新名字
開始對代碼進行追蹤按住Command鍵
點擊數據源對象
頁面將會跳轉到變量定義的地方
我們可以看到我將它初始化爲QuakeDataSource
我們再一次按住Command鍵
在QuakeDataSource上進行點擊
然後會跳轉到QuakeDataSource定義的地方
我將開始滾動文件查找新添加的屬性
但是有一個更好的方法
代碼編輯頂部的跳轉條塊顯示了每一個方法
Xcode根據文件中符號出現的先後順序展示
有好幾種方法可以達到類似的效果
如果當它彈出時我按下Command鍵
Xcode會根據字母順序進行顯示
而不是出現的順序
或者我可以進行輸入Xcode會對列表進行過濾
曾被命名Sorted Quakes或許現名依然帶有Quankes
我將輸入Quakes然後這裏會顯示屬性和方法
包含Quakes字符屬性和方法
裏面有一orderedQuakes
感覺它應該是我們要找的屬性
通過這次查找以後你再查找別的內容時 都會比較容易了
如果我簡單輸入OQXcode會找到orderedQuakes
因爲字母O和Q在屬性的名字上依次出現
我將向你展示最後的一些內容
或許你已注意到我有兩個標題
這兒的TODO註釋提醒我需要添加更多的性能測試
有頭部將屬性和方法分開
你可以進行配置將指定的註釋加入你的源代碼中
就像TODO和MARK註釋那樣有一個標題名字
使得彈出的跳轉欄
按照你設定的方式顯示使得代碼間跳轉更容易
一切就緒 讓我們查找該屬性
我將再次鍵入OQ並且選擇orderedQuakes
我們找到它了
讓我們繼續進行然後複製方法的名字
使用返回箭頭按鈕以便跳回我們的測試文件
將新的方法名字粘貼到這裏
當我做以上操作時 我希望你注意
位於代碼編輯區左側的錯誤標記
並且錯誤在問題導航欄也有顯示
粘貼正確的名字到這裏然後兩個地方的錯誤標識消失
因爲問題導航欄會對你所做的修改進行實時追蹤
所以我們可以在你修改代碼時看到代碼的狀態
不用等到構建時 才能知道代碼的對錯
好了 我們修復了編譯錯誤讓我們再一次進行測試
當我做完上述操作Xcode會編譯我修改後的代碼
Xcode正準備將我們的測試運行在模擬器上
你可以從頂部的活動去觀察到
看起來我們的測試在運行
讓我們切回測試導航欄來看發生了什麼
從這裏的微小變化可以看出測試正在運行
看起來像是性能測試
那會持續一會兒
讓我們點擊停止按鈕回頭看下
性能測試是有必要的
但是我需要對我的單元測試進行迭代修改
我不想每次都等待性能測試完成
我們需要配置不同的規則
不會每次修改都進行性能測試
爲了配置規則
彈出規則菜單選擇編輯規則
Xcode會顯示出規則編輯列表
你可以看到在左邊有一個標籤頁
對應着五個規則的動作
還有頂部的構建標籤
讓我們選擇哪一個目標將要按照這個規則構建
以便在目標的產品上執行這些操作
就像運行操作我需要選擇哪個執行文件去運行
該例中 就是我的應用
我應當傳遞命令行參數和環境變量
像Xcode功能強大的地址追蹤功能
會幫你找出難題的成因
由於這些診斷是在運行時進行的
對於已經發布存檔的應用來說沒有任何影響
所以你不用擔心這些診斷的幹擾你將應用發佈到App Store
接下來進行測試操作並且你會看到
測試將會根據我配置的規則運行
在我改變規則之前
我要做一些我編輯規則時經常會做的事
拷貝一份規則然後這份拷貝上進行編輯
因爲我仍想保留原先的規則
原先的規則可以進行性能測試
因爲我真的想跑一下我的性能測試
我只想要一個能運行單元測試的規則
所以做了上面的操作然後選擇複製規則按鈕
Xcode會讓我們對新規則重命名
我們將它命名爲QuakenatorNoPerf
現在我們可以進行測試操作了找到我們的性能測試
取消複選框來禁止進行性能測試
在此你其實可以禁止這些測試前提是
有測試失敗了而且你沒有時間處理
好了 我們完成了新規則的配置工作
在我開始進行測試前
我會給大家展示更實用的東西
那就是如何管理我們的規則
管理規則的按鈕在這個表格的底部
按下後Xcode會顯示規則的管理界面
在此Xcode顯示工程中的所有規則
我要提醒大家需要注意的是
在右邊的共享複選框列
如果一個規則是共享的
假設你也將規則提交到了源代碼管理系統
當你的工作夥伴使用這個工程的時候他們也會得到相同的規則
你或者你工作夥伴做的任何更改
假設你將這些更改提交到了源代碼控制系統
這些更改會和你的工作夥伴共享
這樣使得配置特定的規則變得十分容易
對於你想讓每個人使用規則和同工作夥伴分享規則來說
如果我的工作夥伴也想只運行單元測試
不運行性能測試
我就可以同他們分享我的新規則
好了 我們已完成這些操作
讓我們切回然後再一次運行測試
這是在模擬器中運行單元測試的準備工作
附加到測試 測試正在運行
在左邊的測試導航面板上你可以看到
我已經通過了大多數的測試但是我有一個測試失敗了
如果我想看看最近的時間點發生了什麼
我可以在Xcode的報告導航欄找到這些信息
報告導航欄顯示了我進行的每一步操作的日誌
日誌按原先進行測試的規則進行分組
這兒顯示在我進行測試時我執行了自動構建
然後我請求進行測試操作
如果我選擇了構建的日誌然後調整過濾器顯示所有的日誌
我看到Xcode執行的每一步命令
構建應用和測試的命令
若選擇測試的日誌Xcode會顯示每個測試和其狀態
還可以展開它去查找測試失敗的消息
在該實例中我測試中的一個斷言失敗
因爲一個地震的等級超過了限定大小
我把鼠標移到測試中的一個上面我們會看到一個跳轉箭頭
如果我點擊箭頭Xcode在右邊顯示失敗的測試代碼
你可以看到我在哪裏對測試進行了聲明
在測試方法代碼的左邊有一個標識
表明那個就是測試失敗的方法
如果我繼續向下滾動可以發現導致測試失敗的代碼
這兒有一個檢查測試數據範圍的斷言
或者地震的大小看起來範圍檢查失敗了
其實這些操作貌似挺簡單
應當有一個較大值的時候程序卻給出了一個較小的值
因爲我對給出的正數值範圍進行了檢查
在此我應當對測試用例進行修復
再次運行測試看看我們是否修復了它
但是由於我在失敗的測試上反覆修改有一個更快完成所有的測試的方法
我可以僅僅運行失敗的測試
爲了那樣做我轉到測試導航欄並把鼠標移動測試上
當我那樣做的時候你看到這個標誌變成了一個小播放按鈕
該按鈕可僅僅運行失敗的測試或我只運行這些測試中的一個
或者如果我不想切回測試導航欄
我甚至可以從左邊代碼編輯區運行測試
只是把鼠標移到測試方法左邊的失敗標誌上
然後播放按鈕就會出現
現在我們點擊這個按鈕
構建我們的測試然後再次運行測試
我們又運行了一次測試然而結果是我們的測試依舊失敗
所以一定還有其他問題
我接着向下翻
我看到每一個地震數據
有一個明顯的標識形象化標識着地震的量級
對我們測試的地震數據來說
我們只是保證了每一個地震有一個形象化的標識
但是他們之中有一個標識是nil所以就是標識數據丟失了
這不像是我測試代碼的問題
可能在新建地震數據對象時出了問題
我將跳轉到代碼裏面仔細看那裏發生了什麼
我將給大家展示一些在Xcode中瀏覽代碼的方法
但是我將展示給大家的是最實用的導航手勢
在Xcode的文件菜單中有一個命令
唔... 快速打開
這是一個鍵盤的快捷鍵 你一定要記住
Command+Shift+O你會想一直使用該快捷鍵的
如果我選擇快速打開會在窗口的中央顯示一個文本框
我可以在這裏進行鍵入查找所有標識
像方法的名字 在我們的工程中
同樣也有Apple的API標識
不管你使用它搜索任何東西都是十分簡單的
不論搜索的內容在我們的代碼中還是在框架的代碼中
這個工具十分好 支持模糊查詢
但是我也同樣需要準確知道我查詢內容的名字
在這個例子中 地震對象在類似於fetchesquakes方法中創建
讓我們鍵入fetchesquakes
你可以看到它查找到了myFetchLatestQuakes方法
即使我沒有正確的名字因爲它是模糊匹配
這個方法的三個實例在我們的工程中出現過
選中的第一個方法是我創建測試數據的地方
它就是我們需要找的
我點擊它然後跳轉到它所在的代碼
好的 在這個方法裏我創建了地震數據對象
我沒有看到代碼有任何問題
這就需要仔細查看究竟出了什麼問題
爲了找出問題我要使用Xcode的調試器
不論你在Xcode中運行應用或進行測試Xcode的調試器都可用
你可以使工程停在代碼的一行或者中斷
通過在代碼行上設置斷點
我可以通過點擊左邊代碼編輯區的邊緣設置斷點
然後你就會看到一個斷點的標識出現在代碼行上
我可以再次點擊那個斷點使其灰掉
暫時禁用斷點如果你想忽略掉斷點
或者當我們使用完之後可以將它拖出斷點就這樣刪除了
在這個例子中 我確實需要斷點我將再次點擊創建斷點
再次運行測試
我將給大家展示最後一個快速運行相同測試的方法
在Xcode中有一個叫做再次測試的命令
再次測試命令將會運行我運行過的任何單個測試或測試集
這個命令便於我們重複進行相同的測試
可以在Xcode的產品菜單中使用再次測試命令
在執行操作子菜單下
這兒有許多有用的命令這個是再次測試命令
我們選擇它Xcode只會運行這一個測試
在模擬器中附加到測試 開始運行測試
你可以看到Xcode在調試器中停在了那行代碼
當調試器停止的時候就會發生一些事情
首先 在底部 調試的條塊出現了
一些按鈕來允許我們進行調試操作
例如繼續 單步調試 步進調試
調試按鈕下面是變量區域
在我們當前可見的代碼區域顯示每一個變量值
這兒我聲明瞭三個不同的地震對象
但是我還沒有給一些變量賦值所以顯示爲空值
在右手邊是控制檯區域
顯示程序打印到標準輸出或者標準錯誤的內容
我過會兒會演示這部分內容
最後 你可能注意到因爲Xcode在調試器中停止了
命中了斷點
Xcode自動切換到調試面板
這兒Xcode顯示了在每一個線程中中斷的代碼
這個代碼現在是自動運行在後臺線程的 線程6
所有的堆棧幀中我們能訪問到代碼的顯示爲黑色
然而所有堆棧幀包含的系統代碼
我們都沒有源代碼並且無法查看的代碼顯示爲灰色
你有可能注意到這兒有虛線同這些堆棧幀是對齊的
這是因爲我真的不需要瞭解這10幀系統代碼
我也沒有這些幀的代碼
當然 假如我想看到底發生了什麼
我可以調整位於調試面板底部的控件進行過濾
一切就緒 讓我們單步調試這些代碼
調試我們第一次初始化地震對象之處看看發生了什麼
我將使用單步調試完成上述操作
當我點擊單步調試後Xcode會運行到下一行代碼
你將看到第一個地震對象
在變量視圖中已經被初始化
我可以點擊這裏查看這個新建地震對象的所有屬性
這裏是可見的標識
這是一張圖像我可能想仔細觀察下
Xcode讓我們可以像上面那樣快速查看對象
當我快速查看它時Xcode會讀取這張圖像
加載到程序內存並且顯示到這裏
這樣你就能檢查這張圖像是怎樣的
這個標識明顯不是這個程序的因爲它是非空的
查看下一個地震對象
爲了查看類信息 我將步進調試到創建
地震對象函數裏看看裏面究竟發生了什麼
我使用步進按鈕調試進對象的初始化函數
就是我們對地震對象做初始化的方法
我可以對代碼做單行調試
這裏的switch語句裏面選擇要使用的量級大小標識符
這裏是標識符初始化的地方我感覺這裏寫的有些不妥
我想IIII不是一個有效的羅馬數字
這有可能是問題所在我嘗試修改這裏的代碼
終止程序運行 再次運行測試
Xcode使這變得可能每次重新運行程序的時候不用停止程序
爲了達到上述效果我會使用調試器表達式
在控制檯區域 我使用PO命令就是把對象打印出來的意思
這條命令支持有效的Swift或者Objective-C表達式
我在這裏運行它
我可以拷貝這個圖像的初始化函數把它粘貼到控制檯區域
我要將控制檯區域拉大一點
使用清空按鈕清空控制檯的已有文本這樣我就能瞭解到做了什麼
現在我將點擊回車在我的程序中運行這行命令
你可以看到命令返回了空值沒有那個名字的圖像
點擊向上的箭頭讓執行過的表達式再次顯示
試一下IV我想這個羅馬數字4應該是對的
我按下回車執行這條語句
你可以看到Xcode返回了一幅圖像的實例
看起來這個名字的圖像是存在的
到此爲止 停止調試器
我將把圖像換成IV
使用再次測試命令再次運行測試
Xcode會對剛纔代碼更改進行構建
上面我們爲測試做了準備
切換到測試導航欄看看測試的結果
而且 哦 那看起來我還設置了一個斷點
我想運行我們的測試並且不會停止調試器
讓我們看一下如何管理我們的斷點
Xcode的斷點導航面板
顯示了我在工程中設置的全部斷點 展開這裏
我也可以在這裏單獨禁用他們或者在我用完後 選中然後刪除它們
我可以添加一些不同類型的斷點在斷點導航面板上
像Swift有錯誤的時候拋出單元測試失敗
或者在任何方法名字上標識
如果我發現某個斷點是我經常使用的就像測試失敗的斷點
我可以讓那個斷點在每個工程中都是可用我需要簡單的
選擇已經添加的斷點 彈出菜單
選擇移動斷點到用戶
移動就是將斷點變爲用戶斷點使得斷點可在我工作的任何工程上使用
就這樣 在這個例子中 我還沒準備
刪除我全部斷點是爲了防止程序出現問題
暫時禁用這些斷點以便程序能正常運行
我可以暫時禁用這些斷點使用調試條塊上的斷點按鈕
我將點擊繼續按鈕完成測試
回到測試導航欄
你可以看到我通過了所有的測試看起來我們成功了
回顧一下我們做了什麼
回顧我們的更改切回Xcode的工程導航面板
使用在底部的過濾功能叫做過濾代碼控制狀態
這個功能會將工程導航面板展示給我
這些文件有特定的代碼控制狀態比如改動過的
這兩個功能讓我瞭解到我做了什麼更改
這是很實用的功能如果我有許多的工作集
還有一些編碼過程中用到的文件我想在這些文件中快速跳轉
如果我修改了這些文件
我可以使用過濾功能限定出我正使用的文件
如果我想查看我對一個文件所做的更改
我可以選擇那個文件並且使用Xcode的第三種編輯模式
我已經給大家展示了基本的編輯和編輯助手的用法
Xcode第三種編輯模式是版式編輯它有三個子模式
對比編輯讓我們能夠比較兩個修訂版間的差異
或者是你沒有提交的變化相對於你最新的提交
職責模式讓你可以看到是誰
在你文件的哪個版本對每行代碼做的改動
日誌模式將展示給你源代碼管理器的日誌文件
在這個示例中 我使用比較模式
當我選擇比較模式Xcode會展示給我文件的兩個版本
在左邊欄是我本地的文件這裏顯示的是我已經更改的
右邊是我提交到代碼管理器的最新版本
這裏顯示給我的就是不同的部分我已經修改的和我最新提交的
在下面的中間部分顯示的一些箭頭能實現修改之間跳轉
當我們查看變化的時候
Xcode將對每行的更改進行可視化的顯示
高亮顯示在哪一行進行了更改
如果我想通先前的版本進行對比我可以這樣彈出菜單
然後選擇哪個版本的文件是我將要進行對比的
或者我可以對比兩個版本之間舊版本同每一個其它版本
在左邊欄選擇不同的版本文件
這些改變應該沒有錯誤
現在我們可以對我們的更改進行提交了
爲了提交需要點擊Xcode的代碼控制菜單
然後選擇提交條目
然後會向下彈出Xcode的提交列表
在左邊 我能看到我對文件做的所有更改
包括其中的一些設置文件如果我選擇一個文件
在提交表單的右側會顯示文件的對比
給我們最後的機會審覈我們的更改
在這裏我甚至可以丟棄所做的更改
點擊選擇改變標記然後選擇不要提交如果我只想提交我做的部分更改
在這個例子中我想提交全部的更改 給出提交的信息
我將會寫修復了測試
當我提交的時候我想立即將我的更改推送給工作夥伴
點擊推送的複選框
提交我們的更改Xcode正在提交中
將我們的更改推送給我們的工作夥伴上述操作完成
大家準備好
將你的應用分發給你的測試人員或者App Store
如果你想知道如何去發佈
或者假如有些東西我們沒有講到恰巧這些東西是你想了解的
我建議你查閱Xcode的幫助手冊
你可以獲得幫助手冊從幫助菜單下選擇Xcode幫助
那裏 你可以查詢任何你想了解的信息或者瀏覽其它主題
比如 存檔還有輸出產品以及常見存檔
這裏Xcode告訴我們如何爲發佈的應用創建存檔
不錯 挺好的我給大家講述了完整的工作流程
但是還有一些重要的知識在本次演講結束前我將給大家講解
那就是如何定製你的源代碼和你的工程...
對不起 是如何自定義你的工程並按照我們需要的配置他們
我會帶大家瞭解一些核心的配置概念
我要把Najla請回臺上讓她來給大家講解
謝謝你 Rick
現在你知道了在Xcode進行開發的基本流程
當你剛開始使用Xcode的時候上面的內容或許是你需要的
隨着你開發的工程越來越複雜
你需要知道如何配置你的工程和設置
讓我們快速瀏覽下Xcode的主要配置概念
以便你能理解你正在使用的是什麼
今天有五個概念是我們需要談論的
Xcode工程和工程包含的目標
構建設置和功能這些可以決定Xcode的行爲
工作空間用來組織你的工程
先我們先談論下工程
工程是你在Xcode中可以組織你代碼和資源的文檔
你所引用的代碼和資源文件存儲在磁盤上
目標將這些文件構建到像你應用的產品中
構建設置配置你的目標如何構建你的產品
規則配置Xcode的運行操作
例如運行 使用你的目標
現在 爲了找到你工程的設置在導航欄上選擇你的工程
在編輯區的頂部選中放大的選項然後選擇你的應用
現在 你工程的設置位於兩個標籤頁中間
信息標籤頁和構建設置標籤頁
通用設置爲於信息標籤頁中
有一點我需要指出你應用的開發目標
你開發的目標最低系統版本你的應用能運行和支持的系統版本
現在你的應用僅僅支持iOS 10
但若我想讓我們的應用支持iOS 9我可以在工程設置中進行修改
讓我們將談論話題轉到目標
一個目標包含構建所需的指令
想一個應用或者框架
你的目標生產出的叫做它的產品
你目標構建它產品的一系列步驟就叫做構建的階段
最後 目標的構建設置是配置如何成產它的產品的
現在 需要注意的是工程和目標都有構建設置
目標沿用工程中的一些數據
但是可以被目標指定的值覆蓋
目標構建階段做的事情
像構建依賴關係在目標中編譯資源文件
鏈接庫和框架到目標
你也能增加叫做運行腳本的構建階段對構建中你想修改的其他方面進行配置
你可以訪問你的目標設置
通過在你的導航欄中選擇你的工程
選擇在編輯區頂部彈出的選項
選擇你的目標
現在你目標設置的標籤頁在許多標籤頁之間
比如構建設置標籤頁 功能標籤頁
和構建階段標籤頁
讓我們談論一些構建設置和功能的內容
構建設置包含名字還有一些選項的值
控制構建過程的一些選項
比如 構建設置指定你想基於哪個架構進行構建
你的代碼是否被優化給你的產品進行命名
你如何處理警告
構建設置在工程和目標層面上都可訪問
在構建設置標籤頁中
裏面的表格包含了所有的名字和需要設置的值
現在 構建設置的值可被構建配置改變
默認情況下工程有一個調試和發佈配置
例如 當你爲調試進行構建的時候你有可能不想優化你的代碼
但是當你構建發佈版本的時候你想讓系統優化你的代碼
除了提供細粒度的構建設置Xcode也提供了功能
可以允許你輕鬆的打開特定的功能
例如 對iOS
有一些功能是爲啓用In-APP Purchase和集成Apple Maps提供的
如果你想了解關於功能的更多內容
你可以展看功能的面板
你可以禁用或者啓用一些功能
通過使用在編輯器右邊的打開或者關閉選項
最後 讓我們談論下工作空間
你有可能發現隨着時間推移你更傾向於像集合那樣對待一組工程
例如 有使用相同框架的兩個工程你想把它們放到一起
在這種情況下
你可以創建Xcode的工作空間來引用你的工程
當你在Xcode中打開工作空間時
它會包含我們引用的全部工程
工作空間使得相關代碼的跳轉和編輯變得容易
現你瞭解了Xcode的主要配置概念
有這些知識和額外的Xcode基本開發流程
你就有了製作高質量應用的工具
今天我展示給你們的內容
是通過Xcode構建應用的重要組成部分
你學習瞭如何創建一個新的應用然後將它運行在模擬器中
如何去測試和調試應用
我們也談論了Xcode的實用工具
例如Command+Option+單擊還有快速打開
我們也展示給你如何在工程中進行查找使用過濾工具和跳轉工具
你學習瞭如何審查和提交更改
還有如何配置你的工程和設置一旦你準備將應用提交到商店
我希望本場演講之後你能有更好了解到
你利用Xcode能做各式各樣的事情
我們看到大家所創建的應用十分開心
好的 如果你想了解本次演講更多消息
你可以訪問developer.apple.com/wwdc16/413
如果你對Xcode的特定部分感興趣
有一些你可以參加的演講或者可以在線觀看
例如 在週二有“Xcode應用簽名”的演講
當你要提交你的應用到商店時進行簽名是很重要的
有一個關於測試和持續集成以及調試技巧的演講
謝謝大家觀看本場演講希望大家在這次大會中過得開心