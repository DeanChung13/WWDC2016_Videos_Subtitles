窺視3D TOUCH
爲了下一個維度的TOUCH增強你的應用
下午好歡迎來到“窺視3D TOUCH”
我是Tyler Fox稍後同事Peter Hajas會加入我
我們都是UIKit團隊的工程師
我們今天非常激動地告訴大家
你們該怎樣採用3D Touch
來把你應用的用戶體驗提升到下一個等級
我們今天想以回顧一些
3D Touch基本知識來開始
並向你們演示它如何跨系統穿越
然後我們要談談主屏幕快捷操作
主屏幕快捷操作是今天最簡單的方法之一
讓你可以把3D Touch加入你的應用
它們讓用戶從主屏幕直接跳到
你的應用中的那些關鍵活動
然後我們會談談Peek和Pop
Peek和Pop是讓用戶在你的應用中
預覽和瀏覽內容的無縫方式
我們想大部分應用都會從中極爲受益
即把Peek和Pop與支持一起加入你的內容中去
最終 我們也很興奮可以告訴你們大家
關於UIPreviewInteraction的一切這是iOS X中的全新API
允許你爲你的應用製作獨一無二的3D Touch
這是給你們中的那些想要對3D Touch的交互
進行高級控制的人的
並讓你使用與我們爲Peek和Pop所磨鍊的
同樣的壓力處理
但請帶來你自己的自定義用戶界面
這真是太棒了我們等不及要告訴你這一切
讓我們開始吧先來談談3D Touch
支持3D Touch的設備有一種力量敏感顯示器
它可精確測量
屏幕上的觸碰壓力
現在的iOS一直讓用戶在用戶界面上
直接操作內容
這一直是一個標誌
因爲原始iPhone是與其
多點觸控顯示屏一起被引入
但3D Touch更進一步擴展了這一點
允許用戶更密切的連接到它們在屏幕上的內容
讓我們來看看一些3D Touch
穿越操作系統所用的方法首先是主屏幕
當你按下某個應用圖標時
我們就揭示主屏幕快捷操作
正如你在此用相機所看到的這些讓你直接跳到
你來執行的每個應用中的
一些關鍵活動
例如 用相機應用自拍
使用前置攝像頭或用後置攝像頭
拍張普通的照片
錄製視頻或慢動作視頻
現在iOS X中的新特性如果你的應用提供了一個小工具
它也將在主屏幕快捷操作旁邊顯示
當用戶3D接觸你的應用圖標時
另外還要注意的是當你按下
每個這樣的應用圖標時
該設備正在播放觸覺反饋
來讓你知道你何時達到閾值
快速行動將在何處彈開
現在讓我們來看看消息
從而來看看Peek和Pop的一個例子
在信息這裏你可以看到我在與朋友的對話中
收到了一張照片
如果我開始對那張照片輕輕施加壓力
我就可以窺視它來揭露出此內容的大型預覽
然後如果我繼續施壓我會直接彈在那張照片上
這將使它鋪滿全屏並讓我與它交互
就像我按壓過它一樣
Peek和Pop相當好因爲它可以讓你
預覽內容以及也許改變主意
並釋放你的觸控而卻實際上不必
去按壓返回按鈕然後再返回
現在這裏有一點要注意的是
因爲我們爲Peek和Pop跨越這兩個不同的閾值
該設備再次播放觸覺反饋
來讓你知道你何時已經達到這兩個閾值
這就是Peek和Pop
現在讓我們來看看Mail
看看相同的交互中的一些有趣的片段
我希望你能注意到3D Touch充分互動
和中斷的能力
我在屏幕上調節
觸控壓力你會在這裏看到
我們使用模糊和縮放效果來讓你知道
你可以繼續與此內容互動
注意整個交互的流暢性和響應度如何
這是的標誌特性中的一個
是它把3D Touch和傳統觸控
以及基於手勢的交互區分開的
所以你可能會想
我爲何要在我的應用中支持3D Touch？
3D Touch最好的用途之一就是
是它可以迅速加速訪問你的應用已經提供了的
現有功能
你用主屏幕快捷操作就此看到了一個很棒的例子
讓用戶在你的應用裏直接進入那些屏幕
就像深層鏈接並讓它們
直接做出嘗試執行的行動
但關於3D Touch另一個真正偉大的的東西
是它使得之前永遠不可能的全新的身臨其境的交互
變得有可能
稍後當我們向你們展示一個很棒的例子
提及這個新的UIPreviewInteraction API時
最後我們在iOS X的整個系統中都採用了3D Touch
因此用戶也希望你們所有的應用都支持它
讓我們繼續談談你如何
從今天就開始通過主屏幕快捷操作
來採用3D Touch
而要做到這一點我想爲你介紹AppChat
AppChat是一個示例應用我們一直在努力使它
在我們的應用中
突出一些3D Touch的強大功能
在這裏你可以看到3D Touch
對不起 AppChat是一個短消息應用
你可以拍照並作爲聊天發送給朋友 在這裏你可以
看到我已經從朋友們那裏收到一系列不同的聊天
我可以按上其中任何一個並全屏查看聊天記錄
就這麼簡單
AppChat是一個非常令人熟悉的UIKit應用
我們會向你展示爲使3D Touch這麼做
我們增加支持的不同方式從主屏幕快捷操作開始
所以當你按下AppChat應用圖標時
我們將爲AppChat揭露一些主屏幕快捷操作
你會注意到我可以選擇創建一個新的聊天
它會打開攝像頭這樣我就可拍張照片
然後從我的朋友中選擇一位將其發送
但我也可以選擇
這裏底部的3種快速行動之一它們是
將讓我把聊天直接發送給我的
前三位朋友的快速行動
我在AppChat中交流最多的朋友
所以實際上有兩種不同類型的
主屏幕快捷操作
現在讓我們來談談它們
第一類是靜態快捷操作
這些是由你的應用在構建時所規定的
它們對在你的應用中一直可用的
固定操作來說是很棒的
例如用AppChat我們有新聊天快捷操作
我總能創建一個新的聊天
然後將其發送到我的朋友之一
另一方面我們有動態快捷操作
動態快捷操作也是偉大的 因爲它們允許你
定製和定做被顯示給用戶的快速操作
但是讓我們首先來看看靜態快捷操作
靜態快捷操作定義在你的應用的info.plist文件中
因此一旦你的應用
被安裝在用戶的設備上它們就可用了
現在讓我們來看看一個例子
我們如何向AppChat添加一個靜態快捷操作
這是我們的info.plist文件你可以看到只用幾行代碼
我們就能夠創建
並添加這個新聊天快捷操作
我想在這裏指出幾點
你會注意到我們在指定一個類型
這是一個字符串你的應用定義
用戶選擇這些快速操作之一時稍後你會用哪一個
從而知道如何處理它
在這種情況下我們還提供了一個標題新聊天
以及一個圖標類型它是你可以顯示的
系統提供的圖標之列表中的一個常量
這種情況下 我們就這樣得到那個很好的聊天泡泡
要記住一點 任何面對你的信息plist.strings文件中
字符串的用戶 你都該使其本地化來作爲最佳實踐
這就是靜態快捷操作我們再來看看
我之前避開談論的動態快捷操作
因此這些是在運行時由你的應用所定義的
也同時從你的應用提供到系統
其結果就是它們只在用戶
最初第一次啓動你的應用時是可用的
動態快捷操作
會在任何靜態快捷操作之後被顯示 在空間允許的前提下
你總共只可顯示
四個快速操作在主屏幕上
所以如果你打算確保留有空間
爲任何動態快捷操作
你還可以包括一個可選的系統圖標 即
使用你的應用中的模板圖像而製作的自定義圖標
或者你甚至可以根據用戶地址簿中的聯繫人
來創建一個圖標
這就是AppChat正在做的用來拉取
那些漂亮的個人資料照片
緊挨着這三個動態快捷操作
排在前三名的朋友們
讓我們看看一些代碼
來看看我們如何能夠實現這一點
那麼在這個例子中我們將以尋找一個聯繫人開始
該聯繫人應匹配朋友Lexi Torres
我們一定要做到的第一件事情
向用戶請求訪問聯繫人通訊錄的許可
假設我們有了這個權限我們可以繼續前進
並實際查詢其聯繫人通訊錄來尋找這位
我們所感興趣的姓名與這位朋友相匹配的聯繫人
如果我們能有至少一個匹配那麼我們就可以
把該聯繫人發送給我們的UIApplicationShortcutIcon初始程序
這將繼續並創建我們將以此快速操作而使用的圖標
但是當然我們可能沒有收到訪問許可
來訪問該用戶的聯繫人通訊錄
或者我們可能沒有爲這個朋友找到匹配
所以我們會希望有一個回退
在這種情況下我們將使用該系統的消息樣式
作爲圖標來顯示
現在我們有了這個圖標我們就可以去創建
我們實際的快速操作
在這種情況下我們需要指定類型
這與你看待靜態開始操作的方法非常相似
除了副標題我們還將用發送一個聊天
然後我們將把所有這些
發送到我們的UIApplicationshortcutItem初始程序
來創建我們第一個動態快捷操作
從此 我們可以繼續如此操作並重復無數次
來創建任何額外的快速操作
當我們完成後我們將它們全部打包到
一個漂亮的陣列中去並將其發送到
UIApplicationsShortcutItems屬性中去
其效果是
向系統註冊這些動態快捷操作
以便它們可以顯示在主屏幕上
有一點要記住的是
這個shortcutItems屬性只顯示你的應用
僅包含你的應用的動態快捷項目
或動態快捷操作
靜態快捷操作只規定於
你的info.plist之中而不會被包含在那個陣列之中
讓我們來看看所有這一切
回到主屏幕上是什麼樣子
好極了只需那幾行代碼
我們能夠創建一個靜態快捷操作
新聊天以及三個不同的動態快捷操作
我們排名前三朋友中的每個人
然而我們現在還得做一件事
當然就是當用戶選擇了一個時處理這些快速操作
在此要記住兩種不同的場景
第一種是如果你的應用已經在運行
而且正被激活 這意味着你的應用
處於非活動狀態或暫停狀態
在這種情況下我們將使用回調於
UIApplicationDelegate
performActionForShortcutItem應用
completionHandler
在這裏我們將使用shortcutItem 它被引入
實際用於處理此快速操作
這可能意味着很多東西然而它取決於你的應用
以及你有什麼快速操作
但總的來說你可能應該把用戶移動到
你的應用中的一個特定的屏幕上
如果你處理快速操作你應該確保
調用completion handler傳遞一個Bool
即它應該表明你是否實際上已經將其處理好了
太好了 這是第一個場景
我們考慮的第二個場景若應用其實是
作爲一個快速操作的結果而被啓動的
在這種情況下我們的應用並沒有運行
在這裏我們將在
使用熟悉的didFinishLaunchingWithOptions應用回調
UIApplicationDelegate上
在裏面我們將訪問launchOptions字典的
shortcutItem key來看看
我們的應用是否通過快速操作而啓動的
如果的確如此 那麼我們將處理這個快速操作
正如我們以前做過的那樣
然後我們將確保用這個方法返回假
告訴系統我們確實在此真正處理了快速操作
而它會阻止調用上一張幻燈片中的方法
這幾乎就是所有的一切
就創建和處理動態與靜態shortcutItems而言
讓我們回顧一些最好的實踐來把它們記住
首先每一個應用應該提供快速操作
因爲你在這裏可以看到它們很容易被創建
而它們可以提供巨大的價值
直接顯示在主屏幕 讓用戶直接
去到你的應用所提供的那些主要活動
因此你要專注於向你的應用所提供的
最高值的任務提供快速訪問
記住你只有4個不同的位置
來顯示快速操作
所以要明智決定該選擇哪些
我們的建議是
當讓你的快速操作保持可被預測非常重要時
你可能該考慮使用動態快捷操作
用戶將快速打開你的主屏幕快捷操作並選擇其一
如果你正在做諸如改變順序的事情
這可能會使你的用戶產生困惑
他們會有一個令人沮喪的體驗
這裏要記住一件有趣的事情
你應該準備好去處理動態快捷操作
你的應用先前版本
如果你還記得的話
原因是動態快捷操作直到你的應用運行才生效
並有能力把它們提供給系統
所以如果你的應用是近期剛剛更新的
它仍顯示動態快捷操作
之前版本的
其結果是如果你的快速操作的語義發生了變化
則在處理時記住這一點會是一個好主意
而要做到這一點 你可能應該
考慮把你的應用的版本號
納入信息plist 抱歉納入用戶信息字典
可連同動態快捷操作一起納入
最後
儘量不要添加只可使用快速操作才能訪問的功能
請記住並非我們所有的設備都支持3D Touch
即使是那些支持的設備用戶也有選項在
系統輔助功能設置中禁用3D Touch
對此我想邀請Peter 上臺
給你們大家講講Peek和Pop
Peter
來吧
謝謝你 Tyler
我今天真的很高興能跟大家講Peek和Pop
正如之前Tyler給大家展示的一樣Peek和Pop允許人們
快速預覽和瀏覽你應用中的內容
根據我個人的體驗我可以說
它會改變你使用手機的方式
我們講結合示例應用來談談Peek和Pop
示例應用就是指Tyler給你們展示的AppChat
正如Tyler給你們展示的一樣在最後一節
AppChat是一個標準的UIKit應用
所以在表格中敲擊消息之一
就會把我帶到該條消息這樣我就可以全屏檢查了
把Peek和Pop添加到你應用的一般經驗法則
是如果用戶能夠訪問的內容
可被按壓來導航
它也應支持Peek和Pop
因此讓我們向AppChat應用該規則
這意味着當我對此表中的某個單元格施加壓力時
我們應該得到一個快速的Peek
在我們的API中我們稱此爲預覽
因爲我們會得到視圖控制器預覽
而我們可以導航到視圖控制器
現在如果我們繼續施加壓力
那會彈出全屏
我們就可以進行交互
在我們的API中我們稱此爲提交
因爲我們已經提交導航到該視圖控制器
好的 讓我們看一Peek和Pop
的組件吧
首先且最重要的是我們有已註冊View Controller
就是這個視圖控制器
包含了用戶交互元素的
視圖控制器
在我們的例子裏 這些是我們的信息表格單元格
每個註冊了的視圖控制器都有全系列來源
它們是每一個
有自己的視圖控制器預覽界面元素
在AppChat中 這自然適應我們的聊天表格單元格
最後
我們有被預覽了的視圖控制器
這是將顯示預覽內容的視圖控制器
此預覽代表了我們輸入表中的元素
通常在按壓此內容後
這和我們要展示的元素相同
按壓它
並通過施加壓力預覽它
向我們展示相同的內容
所以這樣的話我要一步一步來講一下
我們用什麼和如何把Peek和Pop添加到AppChat中去
這將密切反映你將如何把Peek和Pop添加到你應用中去
所以在我們註冊了的視圖控制器開始
記住這就是視圖控制器表格
其中包含了我們的演示文稿的源視圖
我們要遵循
UIViewControllerPreviewingDelegate協議
此代理將在
Peek和Pop交互中的不同階段被召回
來將信息提供給該系統
這是相當容易實現的
接下來我們將要確保我們registerForPreviewing
進行此操作的很棒時機是在viewDidLoad中時
我們要registerForPreviewing
並用我們自己做代理
遞交我們的表視圖作爲源視圖
因爲表視圖是我們想預覽的
所有接口元素的共同祖先
現在讓我們繼續並在預覽代理協議中實施
兩種必要的代理方法
第一種
是用於提供
一個預覽視圖控制器
提供一個視圖控制器
在源視圖內的一個特定位置
該方法被稱爲previewingContext
ViewControllerForLocation
而且它是很容易實施的
首先我們要找到indexPath它代表了
我們通過該代理方法而被遞交的點
我們可通過點擊測試表視圖來如此操作
下一步我們要創建一個視圖控制器
使用的模型對象由indexPath所代表
這是你可能已經有了的一種邏輯
並確實在indexPath中選擇了行
其次非常重要的一點是
我們要設置
previewingContext的sourceRect
請記住源視圖是整個表視圖
而我們要確保從屏幕上僅僅突顯單元格
用的是Tyler向大家所展示了的
模糊效應和規模效應
通過設置sourceRect系統會適當地
切出該元素然後將其在屏幕上突顯
它看起來真的很棒
最後把視圖控制器返回到系統中去
現在關於這個代理方法我想爲你們指出
兩個相當重要的部分
第一個是該方法將在每次
我們認爲我們將啓動預覽時被調用
正如Tyler之前所說的我們希望保持交互快速與流暢
所以我們要伺機將其調用
以確保一切都準備好了
因此使用此方法返回一個視圖控制器時
你需要確保一定不要花太多時間
如果你有可以在後臺做的異步工作
則在準備此視圖控制器之前
在後臺做此工作並不要阻塞主隊列
這樣當我們
向你應用中的界面元素施加壓力時
會有快速、流暢和反應靈敏的感覺
我給你們關於此方法的第二個重要建議
是它的返回類型
UIViewControllerOptional
這意味着我們可以返回零值
如果你用這個方法返回零值
我們將不會從屏幕上突顯任何單元格
我們將不會做任何模糊處理我們將不會做任何觸覺反饋
我們將不會做預覽
但是你應該確保
只有當在該位置確實沒東西來預覽時才返回零值
你應該確保你應用中的外觀相似的內容
可以用相似的方式來預覽
這樣人們就不必爲了試圖得到一個預覽
而擠壓手機因爲外觀相似的東西
將被用相似的方式來預覽
太好了
這樣我們就已經實現了這種交互的預覽部分
但我們還沒全部搞定
我們需要就此協議實施第二種所需的方法
即用於提供提交
這一種方法更易於實施
它被稱爲previewingContextcommitViewController
需要提交時它將被系統所調用
我們已經過了此壓力闕值
我們要設置一些觸覺反饋
我們在屏幕上顯示視圖控制器
在這裏我們要盡一切努力
使這個視圖控制器在屏幕上顯示
AppChat是個使用導航控制器的簡單的UIKit應用
所以我們只是要調用顯示
這將有將
視圖控制器推送到導航堆棧的默認效果
但是這個方法有一些真的很酷的地方
UIKit對它的操作使得你可以在此回調中
執行任何類型的視圖控制器轉換
推送東西到導航堆棧做一個自定義介紹
甚把視圖控制器移動到一自定義容器中
在你的應用中 盡一切努力
使這個視圖控制器在屏幕上顯示
而UIKit將代表你來處理動畫方面的事宜
好 我們已實施了對視圖控制器的提交
而現在我們已經得到這個超讚的提交
這將使我們能夠全屏導航
並開始與內容的交互
我們已嚮應用添加了Peek和Pop
但我們可以做一點點額外的工作
來把體驗提升到
下一個級別
Peek和Pop的另一個很酷之處
是預覽快速操作
而通過添加這些到你的應用中去你可以允許用戶
訪問最常用的一些操作
並在預覽內顯示內容
這真的很強大並可以讓用戶
以甚至比以前更快的速度使用你的應用
如果我們回到我們熟悉的架構圖
我們將看到這些預覽快速操作
屬於被預覽了的視圖控制器
這是能夠響應這些操作的視圖控制器
因其對視圖控制器所示內容進行操作
這些都很容易添加
我們要做的就是在
UIViewController中覆寫預覽操作項目功能
這將返回一個UIPreviewActionItems陣列
我們可以創建UIPreviewActions
使用你可能已經熟悉了的API
它類似於UIAlertAction和UITableViewRowAction
你只是傳遞標題、風格、和結尾而我們會
在用戶選擇該操作時調用該結尾
接下來我們就返回該操作陣列
到系統中去
現在我們已經有了一個使用heart的操作
但AppChat讓你回覆一大堆的表情符號
所以我們真正想要做的是把這些表情圖案
分到一組操作中去
我們對此也有API通過UIPreviewActionGroup即可
你所要做的就是創建一個預覽操作陣列
在這裏我們有所有的你可以用於迴應的表情符號
然後用標題、風格以及這些操作的陣列
創建一個操作組
這是個很棒的方式你可用它
來在你的預覽快速操作中對關聯操作進行分組
有適用於預覽操作API的
兩個其他重要部件它們也很方便
這是通過對預覽操作項目的風格枚舉
而完成的
第一個是所選擇的樣式
這將在此項目旁邊顯示一個小小的已檢查標記
讓用戶知道他們之前可能已經選擇過了
該選項
在我們推出beta 1版本之前
那個已檢查標記有點害羞
所以你會注意到它不在第一個版本中
但放心這個錯誤將會被修復
另一個真的使用起來得心應手的樣式
是破壞性的樣式我們可以用它來指示
某操作可能執行一個破壞性行爲
你可以從我背後的阻止操作中看到這一點
通過添加Peek和Pop並預覽快速操作
我們已經把你應用中的體驗提升到了
下一個高度並加快了你的用戶
可以擁有的交互
讓我們回顧一下把Peek和Pop
添加到你應用中去的一些最佳實踐
首先最重要的是記住經驗法則
可以被按壓的內容還應支持Peek和Pop
你可以看一下Apple的系統應用
那裏有很棒的提示來告訴你如何做到這一點
接下來
確保始終從代理回調返回一個
預覽視圖控制器
你應用中的外觀類似的內容應當能被以類似的方式預覽
在同一預覽背景回調中
確保不要花太長時間
請記住我們不想阻止主隊列
因爲我們希望這種交互保持流暢和響應
確保設置好預覽背景的sourceRect
來在屏幕上突出相應的用戶界面元素
Peek和Pop部分就講完了
現在我想把注意力轉移到
iOS X中一些超級炫酷的新API
UIPreviewInteraction
UIPreviewInteraction讓你感受Peek和Pop的感覺
即壓力處理和觸覺反饋
但你可以使用你自己的用戶界面
正如我們不久就將看到的一樣這是一個相當強大的概念
讓我們來看一個例子
在AppChat中的我們的聊天細節視圖中
我們已經在底部有了這個方便的回覆按鈕
在沒有啓動3D Touch功能的設備上
我們可以按壓此回覆按鈕
來得到可以用於回覆的表情符號的完整列表
然後我們可以按壓這些表情符號之一
把它送回給我們的朋友
但在啓動了3D Touch功能的設備上
我們可以把這種交互做得更流暢和更有趣
只需使用UIPreviewInteraction做幾行代碼
我們就添加了一些相當整潔的內容
我們可以對此回覆按鈕施加壓力
並以交互方式展示該表單
注意模糊效果是如何淡入淡出的
然後在保持我的手指在屏幕下方的同時
我可以左右滑動來挑選一個表情符號用於回覆
但願我們不會選到魔鬼
然後我們會把它送回給我們的朋友
這種類型的一觸式交互
是3D Touch所完美適用的
3D Touch可以幫助我們的另一件事
是加速
可更靠近用戶手指的操作
在iOS 7中我們增加了滑動收回手勢
作爲返回按鈕的一種替代
這就更方便了因爲它就在你的手指旁邊
你可以將它移動到屏幕邊緣
然後向後滑動
並且通過3D Touch我們可以把這種便利
添加到你應用的交互中去
所以我們可在這張照片中的任何地方真正應用3D Touch
來交互地帶出此回覆表單
然後我們實際上可以通過多用力
來提交此會被打開的回覆表單
然後再選擇一個表情符號用於回覆
這種類型的豐富交互
它可以讓人有更流暢更快的感受
正是我們希望你會用UIPreviewInteraction
所構建的東西
UIPreviewInteraction採用的Peek和Pop壓力處理
與我們已通過系統所提供的Peek和Pop的用戶界面
所磨練時採用的Peek和Pop壓力處理相同
我們在交互的各個階段移動時的自動觸覺反饋
但允許你的應用
使用其自己的用戶界面
而有關這一點真正令人興奮的是
人們現可爲Peek和Pop構建肌肉記憶
並將此肌肉記憶應用於
系統的標準預覽外觀
並也應用於你將使用
UIPreviewInteraction所構建的自定義交互
而且此肌肉記憶將是普遍適用的
這真的很酷
因此讓我們一步一步
講解你可以如何向你應用添加預覽交互
我們將以遵循
UIPreviewInteractionDelegate協議作爲開始
此代理
將在預覽交互中的各個階段被告知
來讓你知道發生了什麼事情
接下來我們想要確保創建我們的預覽交互
再次 viewDidLoad是進行此操作的很棒時機
在這裏我們用源視圖創建了一個預覽交互
並設置我們自己作爲代表
現在要講的是預覽交互它純粹是關於狀態轉換
讓我們講講這些狀態轉換是如何工作的
當交互開始時
如果你的代理實施可選的預覽交互
應開始回調
我們將調用它或者如果你不這樣做
我們將開始交互
現在隨着壓力從交互開始
向預覽狀態移動
我們用previewInteraction向你的代理髮回信息
didUpdatePreviewTransition:ended
來查查看
這些壓力進程更新
被賦予一個從零到一的歸一化值
而真正要強調的重點是
這不僅僅是壓力的直接轉換
因爲它使用我們爲Peek和Pop
所開發的算法我們實際上是檢測用戶的意圖
因此這不僅僅是簡單的壓力轉換
當我們在這兩種壓力狀態之間移動時
我們將在每一步都被通過交互而通知以
我們目前的進度
而一旦我們達到預覽的目標狀態
我們就會得到消息因爲進度將移動到一
並且結束參數也將爲真
而且該裝置也將自動播放觸覺反饋
讓我們來看看此方法施用的一個示例
同樣的 方法是previewInteraction
didUpdatePreviewTransition:ended
在這裏我們只是要通過轉換
來就目前的進度給自己更新
現在請注意這其實是即插即用
對許多UIKit的技術
我們可用它驅動UIViewPropertyAnimator
一個百分比驅動的交互轉變
或者甚至一個UIKit動態系統
這些爲狀態轉換所做的瞬時更新
適用於所有這些技術
並且如果交互結束
我們將希望展示我們已完成了的預覽外觀
這是第一個所需的代理方法
在UIPreviewInteraction上
第二個是爲了對取消做出響應
它被稱作previewInteractionDidCancel
每當用戶擡起手指或者如果因爲任何
其他原因交互應被取消這都將被調用
例如我們接到一個電話在這裏我們將把
我們的進度設置回零並重置我們自己至最初的外觀
但是請注意我們是在一個動畫包內如此行動的
我們將要把我們自己做成動畫回去休息
從而當我們擡起手指時我們可以避免東西在周圍閃爍
所以這就是我們應對預覽狀態轉換的方法
但要記住在AppChat中我們也想對
提交狀態轉換進行迴應
來把我們的內容粘在屏幕上
我們可以採用可選的代理方法
previewInteractiondidUpdateCommitTransition:ended
來通過提交對我們的進度做出迴應
所以當我們在交互之初
和預覽狀態之間時
我們會回調didUpdatePreviewTransition
一旦我們達到預覽的目標狀態
我們就會通過值爲一的進度值以及一個爲真的結束值
而我們也將播放一些觸覺反饋
然後我們將開始發送消息
到didUpdateCommitTransition:ended
且有預覽進度用於提交
這是同一類的進度更新
歸一化值從零到一
而且一旦我們達到了提交的目標狀態
我們會通過讓已經結束的一個的進度值爲真
我們會再播放另一條不同的觸覺反饋
讓我們來講講你可能會採用此方法的方式
那麼在我們實施
previewInteractiondidUpdateCommitTransition:ended時
在這裏我們要更新我們對提交的進度
同樣這適用於
整個UIKit中動畫和動態API套件
一旦交互結束
我們將只展示我們已完成了的提交外觀
關於UIPreviewInteraction就講到這裏
現在如果你正在構建一個遊戲或繪圖應用
有一些你可以使用的低級壓力API
此API提供標準化的訪問
給與每個UITouchObject一起進來的壓力值
通過UITouch上的兩個屬性
壓力和maximumPossibleForce
這些值將被用於填充所有
支持3D Touch的設備以及來自
支持Apple Pencil的Apple Pencil觸控
而在此我們不會進一步詳細說明 相反
我鼓勵查看iOS Talk上的
關於撬動觸控輸入的視頻
這是一個非常棒的演講並深入講解了這些API
現在讓我們回顧一下
如Tyler之前向你們展示
主屏幕快捷操作允許你的用戶直接跳進
在你的應用內的許多常見活動的操作
而大多數的應用將真正受益於
添加主屏幕快捷操作
接下來我介紹了Peek和Pop如何
前所未有地允許無縫的流暢且快速的交互並讓用戶
與你的應用以一種全新的方式進行交互
我們認爲許多應用將的確從添加Peek和Pop受益
最後 我們檢視了UIPreviewInteraction
它可以讓你在新的深度探索3D Touch這個海洋
並真的很好的檢視了
多點觸控的下一個維度
最後需要注意的很重要的一點用戶會期望其設備上的
所有的應用都支持3D touch
所以我們強烈建議你採用這些功能
要了解更多信息並下載AppChat示例應用
我們在整個演講中向你展示了這個應用
它使用了所有這些技術
請查看我身後的這個地址
有幾個相關的演講
一個是關於新的UIKitPropertyAnimator API
它非常適用於UIPreviewInteraction
而另一個是關於在iOS上撬動低級觸控輸入
就是這樣十分感謝大家
祝大家在接下來演講中也有很大收穫 謝謝