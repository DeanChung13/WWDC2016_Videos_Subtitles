Xcode下可視化調試工具
大家下午好
歡迎來到“Xcode下可視化調試工具”演講
我是Chris在Xcode調試工具UI小組工作
衆所周知 調試工具存在已久
就在不久以前
調試工具看上去還是這個樣子
此後不久 UI進行了改進
調試工具開始看上去像這個樣子
但是快進到今天
調試工具變得更加強大
同時也更容易操作
其中大部分要歸功於它變得更爲可視化
這幫助我們更爲快速更爲直觀地解決問題
今天 我將和同事們一起講解
Xcode中最新的可視化調試工具
首先 快速概述一下講座的內容
我們將會講解Xcode的新功能
能報告工具發現的運行時問題
我們還將講解最新的增強功能
對Xcode的視圖調試工具所作的
以及如何把自動佈局調試變得前所未有地簡單
我們還將講解一個新功能可以可視化調試
就是狀態機 以及做出的增強
在FPS性能測量方面從而更好幫助調試SpriteKit
以及SceneKit幀率問題
最後 將講解Xcode的一個新功能
可視化內存圖形調試工具
首先來看問題
我們都知道 編譯時發生的問題比如編譯器警告 錯誤
和靜態分析問題 都已經得到了
Xcode用戶界面充分支持和測試時發現的問題相同
然而 不能同理可證
調試和分析工具的擴展組件發現的運行時問題
這些工具都已經被遺忘
最多會被用來在控制檯上記錄輸出結果
不是最好的體驗
我們認爲可以做得更好
在Xcode 8我們引進了運行時問題
運行時問題把工具在運行時發現的問題上升
和UI裏傳統編譯時問題同等地位
活動查看器會如此顯示
當發現任何運行時問題時並報告問題數量
我們增強了問題瀏覽器包含新的運行時範圍
這區分了運行時問題
和傳統的編譯時問題
比如編譯器警告 錯誤和靜態分析問題
在運行時 會看到什麼樣的問題呢？
在Xcode 8 我們處理三個範圍
首先 線程問題
我們全新的"Thread Sanitizer線程檢查工具"
可檢測線程問題在應用中 在運行時
UI佈局問題
我們擴展了Xcode的視圖調試工具
來自動檢測模糊的佈局問題
在應用中 在運行時
以及 內存問題
全新的內存圖形調試工具
一會兒我們會詳細解釋
它可以自動檢測內存泄漏
在應用中 在運行時
所以 如你在週一所聽到的
Xcode最新的運行時的檢查工具
就是"Thread Sanitizer線程檢查工具"
"Thread Sanitizer線程檢查工具"幫助我們檢測和更好地理解線程問題
在應用中 在運行時
它可以檢測到的問題有 數據競爭
使用爲初始化的互斥鎖來自錯誤線程的解鎖
線程泄漏及信號處理器的不安全調用等
發現以上任何一種問題都會被報告爲運行時問題
"Thread Sanitizer線程檢查工具"是一個強大的全新的運行時分析工具
爲了更充分地理解它可以觀看關於"Thread Sanitizer線程檢查工具"
以及靜態分析演講
視圖調試是一個非常優秀的範例
在Xcode的調試工具中變得越來越可視化
僅僅在過去幾年 關於UI調試問題
我們從必須要讀取調試輸出
到一個像這樣的工具臺 變成這樣
Xcode的可視化視圖調試工具有非常好的用戶體驗
對於調試和理解可視化UI問題
如果你還從未使用過
當應用在運行Xcode時
只需點擊調試工具條下方的“調試視圖層次結構”按鈕
Xcode將會快照你的應用
快照你的視圖層次結構
把它在一可互動的3D場景裏分解出來
在那裏你可以在3D畫布裏檢查視圖層次結構
還可以在分級視圖裏
你可以檢查所有視圖和限制的屬性
利用檢查器
在Xcode 8我們讓視圖調試——
你猜？比過去任何時候都更好
快照現在比過去快了近70％
所以你可以從運行應用
切換到調試UI問題 前所未有的快
渲染複雜佈局
和轉換視圖在Xcode 8裏更準確
談到準確Xcode現可渲染模糊視圖
比如畫布上帶高保真視覺效果的視圖
因此在Xcode的視圖調試工具所見到的
更爲準確地反應了在設備上所見到的
在beta 2將會看到改進的模糊渲染
我們添加了便利性 比如可以直接跳轉
從視圖類到源代碼
只需在對象檢查器上點擊跳轉按鈕
瀏覽過濾也變得更爲強大了
可以通過任何標籤上的文本或按鈕標題上的文本進行過濾
或者你可以通過類名進行過濾也包括超類名
比如 如果通過UI標籤進行過濾將會返回
所有視圖層次結構中該UI標籤的所有子類
甚至可以通過內存地址進行過濾
這樣可以迅速找到特定的視圖
只需知道其內存地址
自動佈局調試也進步顯著
檢查器可以顯示更多和自動佈局相關的屬性
限制在畫布上表現得更好
我們用標記渲染限制
來代表不平等或長寬比關係
我們還用虛線渲染非必須限制
所以你可以很容易分辨
畫布上的必須限制和非必須限制
但是我最欣賞的自動佈局調試的新功能
是它結合了運行時問題
Xcode現可自動檢測模糊佈局問題
在視圖層次結構裏 在運行時
它是怎麼運作的？
當快照視圖層次結構時
Xcode將會檢查每一個視圖並將準確決定
其中任何一個視圖是否存在模糊佈局
以及模糊原因
如果檢測到任何佈局問題將會作爲運行時問題報告
所以可以看見它們顯示在活動查看器裏
還可以看見它們在運行時被列在問題瀏覽器裏
此外 視圖層次結構一覽將會標記
任何有佈局問題的視圖因此可以輕易找到它們
在整個佈局層次結構下
對於一個選中的視圖尺寸檢查器將會包含
任何佈局問題的細節 以及所有
參與該視圖佈局的限制
我們對Xcode新功能感到十分激動
它可以在運行時自動檢測模糊佈局問題
我想爲你們做一個演示
我有一個iPhone連在Mac上
Xcode已經啓動正運行一個叫DemoBots的項目
這是我們今年更新Swift 3中的示例代碼項目之一
在右邊 我正使用QuickTime Player
把手機屏幕映射在桌面上大家才都可以看見
我們的團隊的任務是把一個遊戲指導說明書
添加到DemoBots所以做了一個“如何開始遊戲”界面
然而 在演講前我們發現了一些問題
現在是調試這些問題的好機會
點擊“如何開始遊戲”
這就是“如何開始遊戲”界面
不怎麼樣是吧？
顯然 存在一些問題 來看一下
可以看到DemoBots圖標在後面
上方有一些錯位的文本
我們需要來調試 從哪兒開始？
給你們一點提示
DemoBots是一款用SpriteKit編寫的街機小遊戲
但該屏幕是用UIKit和自動佈局產生的
所以最好的開始的地方是在
在視圖層次和佈局結構上
我們一起來操作
回到Xcode
最底部
找到“調試視圖層次”按鈕
點擊
它將暫停應用 快照整個視圖結構
在編輯器裏
我們返回了剛纔屏幕上所見的準確表達
爲了查看內部結構
我們只需把它拖進畫布
把完整的視圖結構開拓成3D視圖
在這裏 可看到構成該屏幕的所有視圖
後面的視窗
容器視圖 視覺效果視圖
及構成“如何開始遊戲”說明書的視圖
放大看一下
我們看到DemoBots圖標在後面
還有很多標籤和圖像
我們迅速可以瞭解 通過旋轉
找出屏幕上的一團亂的原因
所有這些視圖都彼此疊加
所以我們的佈局有問題
傳統的工作流程是
檢測每一個視圖及其限制
然後試着確定產生布局問題的原因
但在Xcode 8我們有一些額外的可用信息
注意上方的活動查看器Xcode報告
我們有運行時問題
可以點擊它
將會打開問題瀏覽器
但你可能也注意到了左邊這裏
在調試瀏覽器裏
Xcode標記出一些視圖
它告訴我們 這些視圖有佈局問題
直接來看這裏
如果選中第一個視圖
畫布中高亮顯示
然後打開該視圖的尺寸檢查器右邊這裏
在這裏 我們可以在限制中找出佈局問題的原因
該視圖有一個模糊垂直位置
也就是說自動佈局沒有足夠的信息
在垂直維度明確定位該視圖
很典型 限制缺失
來看下一個視圖
有着一樣的問題 垂直位置模糊
下一個視圖也是
若我隨機點擊一些別的
似乎它們都有同樣的問題
我很好奇 這個列表的第一個子視圖
並沒被標記顯示有問題
可能是查看佈局代碼時的一個線索
現在我們來看一下
如果選中父視圖
類名是InstructionsLayoutView
這就是負責顯示“如何開始遊戲”屏幕的視圖
來看看它的源代碼
一種簡單的方法就是選中視圖
右邊這裏
可以找到 對象檢查器
該按鈕可以直接跳轉到視圖源代碼
如此操作
關上檢查器 多留出一點空間
我們來看看InstructionsLayoutView的源代碼
首先開始循環
說明書的每一個部分 都是模塊對象
描述了頁眉部分 段落部分 和圖片
代碼把它們從上到下顯示
對於每一個部分 修復視圖把它添加到視圖層次結構
然後是水平佈局的源代碼
但在水平佈局中沒有發現任何問題
所以略過此處 到垂直佈局
這裏 有兩條通路
第一條是 對於第一個子視圖
把它限制到容器頂端
我們已經注意到 第一個子視圖
並未報告含有任何問題
所以 該限制我們認爲是設置正確的
來看看條件的另一面
這裏 查找可選的previousPartView
如果找到了就把它指定給上面的局部變量
然後可把每個視圖限制到它上面的視圖
看上去這就是缺失的限制
讓我們來看看爲什麼該條件不爲真
選中previousPartView我們從它開始
我將使用Command-A選中Command-F跳出搜索欄
檢查該變量的實例
可以看到其在頂端被定義
它被指定爲nil 在for循環之前
在下方這裏也檢查
在外循環外又檢查一次
來處理底部限制
但看上去我們從未指定給它
快速修復一下
在循環結尾 我們可把previousPartView
設定給當前的partView
然後在每一個循環中前一個視圖都可用
都將指定給上面的視圖
我們將從視圖到其上面的視圖之間建立一個限制
停止 重新運行 看看結果
我把QuickTime移到前面
請注意Xcode能給提供多少信息
甚至在看到代碼之前
{\an2用視圖調試器查看結構內部
看看有什麼問題
更重要的 Xcode會主動告訴我們
應用裏的某些佈局問題
哪個視圖有問題 尤其是什麼樣的問題
這在我們查看代碼之前就有了很多信息
因此我們可以迅速鎖定需要查看的代碼部分
現在應用正在運行點擊“如何開始遊戲”
看上去好多了
我們有了一個美觀的說明頁面
現在Xcode可以報告運行時錯誤
採用和檢測編譯時問題時一樣的UI
今年 Xcode的視圖調試器也有了顯著的改進
包括更爲迅速的快照和更爲準確的渲染
在複雜佈局和模糊視圖方面
在自動調試方面也有了顯著的改進
尤其是 Xcode現在可以
在運行時自動檢測模糊佈局問題
Xcode的視圖調試器支持各種UI
在Mac OS iOS和tvOS上
在你的項目中試一下
我們很樂意得到反饋關於它如何在調試流程中給你帶來幫助
下面 我想把講臺讓給Tyler
他將爲我們講解調試狀態機和幀速率問題
謝謝大家
謝謝Chris
今天 我將爲大家演示一種增強調試體驗的新方法
利用狀態機快速查看
及Xcode 8中FPS性能檢測的內部機理
今天有很多有用的快速查看
已經在Xcode 7裏可用
這些爲你提供了實時查看各種對象的可能
在調試過程中
你甚至可以自定義快速查看
來檢查應用內部對象
現在在Xcode 8
我們擴展了內置的快速查看包含了狀態機
首先我們來看狀態機到底是什麼
以及如何在應用內部使用
你們當中一定有很多人已對GKStateMachine很熟悉
去年它是GameplayKit的一部分
可用於Mac OS iOS和tvOS
狀態機允許你更爲簡單地定義複雜行爲
通過把它構建成爲一個有向圖
在狀態機內
你爲每一個狀態提供一個離散行爲
可以像播放一個動畫這麼簡單
或者更復雜的 比如一個AI
然後對每一個狀態定義條件
狀態機可以據此從一個狀態轉換到另一個狀態
組裝完成後狀態機可以產生極其複雜的行爲
然而 在代碼裏它們也會變得很難辨識
由於它們複雜度的增加
簡單的狀態機可以迅速進化得更爲詳細
在Xcode 7.3對調試狀態機的支持
只侷限在當前狀態和它的轉換
而現在在Xcode 8
我們可以可視化完整的狀態機
因此可以一目瞭然當前狀態
這非常有用 不論你正在
操作簡單的狀態機 還是你在操作
更爲複雜的狀態機
利用快速查看你可以迅速調試潛在問題
並且準確評估狀態機的當前情況
現在我們把焦點轉到性能
任何時候新建任何形式的遊戲或視覺應用
保證良好性能都是關鍵
在Xcode 8我們擴大了FPS性能測量
在這方面進行幫助
你們當中很多人應該已很熟悉
Xcode 7的FPS性能測量
在報告一開始
可以看到實時狀態的數據
這包括了幀速率
即當前每秒被渲染的幀數
以及GPU利用率
可以看到哪部分的GPU利用率最高
以及CPU和GPU的幀時間
可以幫助表明是CPU綁定還是GPU綁定
現在 除了實時數據
Xcode 8還提供了時間線歷史
SpriteKit和SceneKit幀時間
爲CPU和GPU兩者
在iOS和watchOS都可用
這裏很棒的一點是我們分解了CPU的幀時間
以及CPU的各個部分
所以可很清楚地看到有多少時間
用於渲染 或運行更新循環
評估行動和物理甚至多少時間是空閒的
當應用暫停時
可以滾動查看所有性能歷史
就可看到它隨着應用的運行如何變化
如果有某一個特別感興趣的地方
你可以深入檢查更多的細節
查看確切時間點
來看一下如何在應用裏應用
我們找到了佈局問題
在“如何開始遊戲”菜單點進遊戲本身
這個遊戲的目標是把所有的損壞的機器人
變成好的機器人
要達成目標 我有一道光束 射向它們
就可以把它們重置爲好機器人
我們看到這裏有一個壞機器人在追我
我用光束射向它
可看到它變成好機器人了 顯示爲綠色
但是我看到還有光束
顯示在機器人上面 不該有這樣的情況
既然我們用狀態機來管理光束行爲
這是一個很好的對象
來使用狀態機快速查看這裏是怎麼回事
我將會暫停應用瀏覽BeamComponent
我們用BeamComponent來新建和更新
管理光束行爲的狀態機
在更新循環裏添加一個斷點
繼續遊戲 馬上進入斷點
因爲應用已經暫停 可以進入調試區
找到狀態機的實例
快速查看它
在這裏 我們看到整個狀態機
藍色是當前所處狀態即BeamFiringState
灰色是所有
組成狀態機的其餘狀態
我們還可以看到每個狀態之間的轉換
我立即注意到的是有很多轉換條件
指向BeamFiringState但沒有轉換指出去
也就是說 一旦進入到開火模式
就沒辦法離開
來檢查BeamFiringState
看到底是怎麼回事
刪除斷點 關閉調試區
切換到BeamFiringState
現在來看更新循環
這裏可以看到有一些轉換邏輯
既指向CoolingState又指向IdleState
但在下面的方法裏
檢查我們要轉換的狀態是否有效
總是返回假
這是不正確的 因爲我們想要轉換到
冷卻狀態或者空閒狀態
現在修復該問題
通過檢查想要轉換到的狀態
是否是兩個有效的狀態之一
回到遊戲當中
檢查這是否是我們看到的問題
當我們轉換到FiringState滿足條件退出時
我們應該可轉換回IdleState
進入遊戲
向壞機器人開火
把它變爲好機器人
可以看到光束已經不在遊戲者頭上了
看來問題已經解決了
我們還發現了遊戲存在性能問題
底部有很多地面機器人
我發現如果遊戲者被機器人襲擊
性能會急劇下降
我將切換到FPS性能測量
這樣就可以在運行時實時看到性能數據
可以看到在這裏 顯示的是目標幀時間
本例中 是16.6毫秒
也就是保持每秒60幀的幀速率
可以看到一部分時間被用在渲染的時間
以及用在運行客戶更新的時間
還有CPU空閒時間的迴旋餘地
回到遊戲 移到右邊
有一個敵人機器人 我會讓它襲擊我
試着重現性能問題
現在切換回性能測量
看看更新循環裏是怎麼回事
我發現很長一段時間被用於評估操作上
事實上 現在幀速率大幅下降
暫停應用
來看看其中的問題所在
既然已經暫停 我可以及時滾動
回到幀分解
看看應用裏之前的幀時間
可以看到在主菜單
只有小部分時間用於渲染
大部分時間都在空閒
遊戲中的分解部分也是如此
我們已經找出了性能問題
可以點擊 然後按住來查看細節
對於我們發現的性能問題
在這裏 我看到幀時間是36.2毫秒
71%都用於評估操作
也就是說在遊戲中可能存在一個或兩個問題
我們可能在場景中有一個操作
佔用了非常長的時間來評估
或者 可能會有很多操作造成更新循環產生瓶頸
現在已經知道更新循環裏哪裏有問題
我們知道該如何利用狀態機快速查看
來調試遊戲中碰到的問題
以及FPS性能測量如何顯示
更新循環的具體哪裏出了問題
現邀請Daniel Delwood
上臺爲大家講解全新的內存圖形調試器
我們用來確定
操作問題從哪裏產生然後可以對其進行修復
謝謝你 Tyler
我很激動能夠爲大家講解
Xcode 8裏全新的內存圖形調試器
我很喜歡視圖調試器
它是可以更好理解應用的工具
如同視圖調試器瞭解視圖層次結構
內存圖形調試器可以幫助瞭解內存
以及內存之間如何互相引用
它想回答的一個核心問題是
爲什麼某些對象還存在於堆裏？
對象互相引用
你知道 現在引用
和註釋已經成爲自動引用指南世界的重要問題
我們該如何解決存在
不需要的對象 泄漏的對象或遺棄的對象的問題
有一些命令行工具 比如Heap
Heap將快照你的進程
遍歷檢查 找出不同類型的摘要
以及進程中對象數量
你甚至可以使用“地址”標記來尋找特定類型的對象
獲取實例列表
一旦對某個實例感興趣
可以用leaks中尋找關於連接問題的信息
是否未被引用？是否存在泄漏？
是不是從全局位置有一條通路
在應用中一直指向該對象？
在任何此類調查時你都可能需要進一步的細節
比如棧分配追蹤
可以用malloc_history獲得
而這些都不是可視化體驗
這就是我們爲何要把這三個工具集成到
內存圖形調試器的IDE
快速瀏覽一下它的構成
左邊 瀏覽器中顯示堆類型信息
用來開始分析
中間的編輯器
顯示連接問題
右邊 我們用來顯示
通過檢查器顯示棧分配追蹤
講完以上 回到演示例子
從Tyler講到的地方開始看看我們是否
能看到他所看到的操作問題
好
現在我們在FPS性能測量
看到那些應用裏可能出錯的動作
我們可以直接查看
通過選擇內存圖形調試器按鈕
在調試菜單欄
左邊這裏
瀏覽器顯示了我的應用中所有不同類型
分配在應用中的
它們按照模式被分解 然後按照類型
每一個對象 都有一個實例
在本例中 我對搜索堆感興趣
這很容易做到
在過濾器裏打字 搜索“操作”
出現了在SpriteKit裏出現所有類型
我們看到有很多操作——559個
應該是操作太多了的問題
而不是隻有一個一直在運行的操作
選擇其中一個對象
編輯器顯示問題的答案
即爲什麼這個對象還存在
在這裏 它顯示了根操作圖形
可以追蹤選中的對象
回到左邊 回到應用根目錄
可以看到它被一個SKC序列反覆引用
還帶有一個數組
我還可以發現更多問題
這裏有帶一些操作的SKNode
這是該SKNode的部分操作列表
可以點擊 然後快速查看
如果想查看關於該操作更多的信息
我可以選中它 拉出檢查器
檢查器將顯示一些內存細節
比如類名 地址 層次結構
如果是其它對象的子類
我想知道該操作是在哪裏新建的
這樣就可以找到該位置
摺疊該棧追蹤 進入代碼
這裏有一個函數refreshHurtAction
一個HurtAction在運行
可以用快速幫助看到該操作已經添加到
結點的操作列表當中
但實際上我只想有一個單機操作
並確保它取代之前的操作
所以修復很簡單
我將使用withKey變量
取代“playerAction”
快速幫助將會顯示是的 這就是我想要的
如果一個操作在使用正運行的統一鍵值
它將會在該操作加進來之前被移除
很好
這是一種非常簡單的方法對某個特定類型進行調查
但是我還注意到另外一點
當我點擊內存圖像調試按鈕時
運行時問題瀏覽器提醒我有一些問題
點擊該提醒
來到新的運行時問題瀏覽器
顯示在應用裏有很多泄漏
我先從模式裏定義的一個類型開始
比如這個LoadSceneOperation
選中它 圖形沒有顯示同樣的風格
它顯示了一個引用週期
它是一個泄漏的對象
從應用裏的位置無法訪問它
需要找出哪些
泄漏的對象正在彼此引用
快速來看這一點
有一個帶有內部狀態的操作
它在引用一個完成塊
作爲該塊的一部分 有一些捕捉
正在強力引用LoadSceneOperation
有意思
如果點擊該模塊 我可以看到回溯軌跡
馬上去那裏
在這裏
我的LoadSceneOperation的完成塊
我甚至有一個“unowned self”捕捉列表
但是圖形顯示該self沒有問題
問題是LoadSceneOperation正在捕捉自己
就在該模塊中
此處修復也非常簡單
只需要捕捉unowned
就可以繼續了 但是
可惜的是 這不是真正的解決方案
因爲是整個模塊 我的LoadSceneOperation已要結束了
如果它執行了該模塊
LoadSceneOperation將會結束其生命週期
不會存在很長時間
也就是說如果用dispatch_async回到主隊列
該LoadSceneOperation可能已經不可用
系統將會崩潰
只是想告訴大家有時這些捕捉會有點複雜
需要一點調查
希望內存圖形調試器
也能夠幫助你檢查問題
現在我們再來講講泄漏和廢棄內存
內存圖形調試器是一個調試模式
它會暫停 開始對目標應用進行檢查
這樣應用就不會繼續運行並改變狀態
可以有一個恆定的視圖
也可以讓你做一些諸如快速查看的操作或者PO不同的對象
在你進行調查時
而且在所有平臺上都可用
如我所演示的共有兩種不同的圖形風格
第一種是 根路徑圖形風格
它將顯示引用過的內存
也許你廢棄了它
應用中不同的根 比如全局變量
和正在運行的線程是如何引用該內存的
利用漸進展開模式
它讓你從對象開始回溯不同的中間對象
找到那些不應該存在的引用
對未引用或泄露的內存來說第二種風格是週期視圖
其目標是幫助顯示正強引用自身的對象
會再一次找出引用問題
在查看器裏看到的棧記錄集成
它無法自由記錄所有的分配和釋放
這是一種需要選擇加入的診斷
進入方案編輯器 選中“分配棧記錄”
在“診斷”標籤
它將記錄所有的磁盤分配和釋放
方便之後的查詢
但是對於內存圖形調試
你不真正需要所有的分配和釋放
之前的分配模塊通常也沒什麼用
所以在最新的OS中有一個新特性“實時只分配模式”
這樣做開銷較低
它還讓你獲得這些有用的信息
在進行內存圖形調試時
它將把“分配棧記錄”標識爲“lite”
在目標環境下
關於內存圖形調試你們還可能喜歡的一點
我們引入.memgraph文件類型
當在調試某個問題時
你並沒有時間去好好研究
你想把它存下來
或者讓團隊裏的其他工程師也來看看
在Xcode裏你可以點擊“文件”菜單
選擇“導出內存圖形”
這將保存所有
連接信息和堆信息
以及一些VM數據 到一個文件
之後某個時間 你可以雙擊它
加載到Xcode 看一看內存圖形
但是用這種方法 調試器裏沒有進程
所以你無法回溯 也無法快速查看對象無法PO對象
但這仍然是出錯後分析應用的一項非常強大技術
如果你想持續集成
在命令行中有一些選項
只要運行leaks-outputGraph選擇一個路徑
保存到一個.memgraph文件以便之後使用
leaks vmmap heap都可以讀這個文件
好了 到了有趣的部分
我們來講講有用的小技巧
這一切都建立在泄漏結構上
說明圖形是保守的
我們非常非常小心避免在對象沒有泄漏時報告其泄漏
避免誤報
在圖形裏可能會看到多餘的引用
這些引用將被顯示爲灰色 表示未知
可能是有效引用 可能不是
可能不止提供元數據給工具
當你查看這些圖形時 要多多注意
提高準確度的一個方法是
就是開啓“內存塗鴉”
該方案下的另一個診斷工具
它的作用是當分配自由
它將把內存寫入 你就不用了
未初始化的內存寫入新的模塊
對於那些已知的強引用來說
在圖形裏會粗體顯示
Swift 3實際上有很多可用反射元數據
我推薦大家使用
因爲它絕對更爲準確
在理解捕捉和引用方面
最後 我應該關掉內存圖形調試器
暫時關閉所有檢查工具
比如地址檢查工具或"Thread Sanitizer線程檢查工具"
有很多的信息
這是不是一個開始編寫應用的好地方？
驗證你的期待吧
還有別的某種類型的對象要期待嗎？
對象是不是在你想要時被釋放？
你的類型還有沒有泄漏？
如果你對某一個對象很感興趣
目標就是找到一條不應該
連到對象上的路徑
還有兩種常見模式
來自塊和閉包的強捕捉
或圖形中潛在的向上引用
這些需要被標示爲“weak”或“unowned”
講了很多信息
我非常感謝你們的傾聽
Xcode 8中全新改進的可視化工具
我們對此非常激動
如更好的可視化調試 用視圖調試器
用FPS測量以及內存圖形調試器
今天就在應用中放手一試多多解決問題吧