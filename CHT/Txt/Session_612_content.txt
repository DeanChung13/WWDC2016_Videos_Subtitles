Apple Watch的遊戲技術
下午好 歡迎來到Apple Watch的遊戲技術
我希望你們有一次美妙的 WWDC
而且和我一樣對新技術感到興奮
iOS上的遊戲抓住了用戶的想象力
作爲一個長時間的遊戲者
我玩過很多遊戲是由像你們這樣的開發者創造的
聽說Apple Watch遊戲的潛力激起了你們的興趣
所以今天我們很高興能夠展示watchOS 3的遊戲
本場演講涉及你開發一個優秀遊戲所需要的所有方面
在這個最個人化的設備上
我們首先會向你展示怎麼使用Apple Watch的多種輸入
並向用戶提供反饋
我們將向你介紹我們的框架
允許你創造醒目的2D和3D視覺效果
我們還會展示怎麼集成社交遊戲
和多玩家進入你的應用
最後
我們會展示所有開發過程中可以用到的工具
和一些最佳做法
watchOS提供一套豐富的工具來幫助你開始
這包括你可能熟悉的一些東西
比如WatchKit和豐富通知
今天我們會聚焦在新特性上
在WatchKit中我們提供新界面
這允許你在Xcode中用Interface Builder創建遊戲
現可在Digital Crown中使用手勢識別
來對遊戲進行精確操作
還有觸真體驗反饋
是一個很好的方式使你的體驗
更個人化和擬真
SpriteKit和SceneKit
是兩個框架用來讓你創造更豐富的視覺效果來取悅你的用戶
它們提供地方來添加音頻
並形成一個簡單的基礎你可以在之上創建你的遊戲
Game Center提供API來添加社交功能
給你的遊戲 包括成就 排行榜和多人遊戲
但是現在讓我用一個例子來展示什麼是可能的
這是用我們的3D框架SceneKit創建的一個遊戲
最開始你有一個組合含有不同形狀的塊
你的目標是旋轉他們直到它們形成一個熟悉的輪廓
讓我們看一會
現在玩家嬴了我們會再玩一輪
我會稍微說說這裏發生了什麼
我們用平移手勢來控制左右旋轉
當它在同一平面時我們會使用Digital Crown
來旋轉它到合適的位置來獲勝
現我們介紹了Apple Watch的遊戲
並且展示了一個樣本讓我們深入看看如何使你的遊戲
用更自然的方式和用戶互動
Apple Watch是我們最私人的設備
我們通常近距離使用它通常用一根手指觸摸屏幕
或者旋轉錶冠
你可以從加速儀中讀到移動
或者你可以用觸真體驗引擎讓它震動
當一起使用時這創造一種感覺
你在使用一個實體設備
這種操作和迴應是有形的
讓我們從觸摸開始
在watchOS 3中我們提供四種手勢
對遊戲的不同互動工作良好
我會一個個介紹它們
點擊是最簡單的
你觸摸屏幕 你可以選擇一個目標
或者移動到一個位置
平移適用於滾動和在給定方向上的移動
想要瀏覽到另一個屏幕可以使用滑動
比如你的裝備菜單你可以往回滑動來退出
長按是訪問遊戲主菜單的推薦方法
在這你可以提供選項比如退出
繼續或者顯示Game Center統計
現在我們展示了四種手勢的例子
讓我們談談我們提供給你來使用它們的類
對於點擊 我們提供WKTapGestureRecognizer
對於平移WKPanGestureRecognizer
對滑動和長按是類似的
這些手勢在InterfaceBuilder中可用
當你進入對象庫
並且搜索手勢你會找到它們
如果你選擇一個你可以把它加入你的事件
在我們的例子中我們加入了點擊 滑動和平移
這些手勢有多種選項可以配置
比如使它成爲向右滑動或向左 向上 向下
這些其他選項配置多種行爲
如果你使用多種手勢你應該看一下最後這個選項
因爲指定優先級很重要
因爲手勢可能衝突
我說的衝突是什麼意思？
一個右滑動
也可以被認爲是一個點擊再加一個平移
所以開發者需要決定誰有優先級
在遊戲中一個點擊和平移
表示直接和你的遊戲世界進行的互動
我們應該讓它們比滑動有更高的優先級
這會使你進入裝備
回到Interface Builder你配置這個必須首先失敗域
在滑動手勢中
你設置點擊和平移這反映優先級
現在我們給storyboard進入了手勢
你需要實現一個行動方法
這個行動方法獲得相應的類
有很多可以讀取的屬性
比如在對象中的位置和對象邊界
還有最後這個 狀態
我認爲最好用一個代碼來展示它
所以在那個我演示了的解迷應用中我們有一個handlePan行動
我們做的第一件事是我們獲得位置和邊界
然後我們查看狀態如果我們已經開始了平移
我們要設置旋轉
如果我們在一次平移中間無論它改變 結束 取消
我們都要更新它
我想用一些需要考慮的事做爲手勢這部分的結尾
因爲用戶戴着Apple Watch
每個手勢都要用到兩隻手所以最好使它們很短
還有一個需要注意的重點是和其他設備相比
你的手指和屏幕相比相對較大
請考慮到這點
並確保當你互動時內容還是可見的
最後你知道的我們的用戶界面指南
它推薦我們使手勢容易發現
你應該遵守這些
現在你們中的很多人可能對手勢熟悉
但是我們談談一些Apple Watch特有的東西
即Digital Crown
界面指南說它便於選擇和滾動
但是做爲玩家 這使我們回到街機
有一個轉盤可以轉動來旋轉宇宙飛船或移動一個踏板
或者在這個例子中我們可以來回移動一個球
直到我們決定我們想把它放在哪
當我們準備好時我們可以點擊來讓它落到指定位置
利用這個錶冠相當容易
你訪問crownSequencer它在你的主界面類中可用
有一些屬性你可以讀取
比如每秒旋轉數或者我們是否空閒
或者你可以定義一個委託
這個委託提供兩個方法
CrownDidRotate獲得rotationalDelta
rotationalDelta表示錶冠的改變
從這個方法最後一次被調用起的改變
如果它正遠離你 該值爲正如果它正接近你 該值爲負
不論Apple Watch是在左手還是右手都是這樣
當錶冠停止旋轉時調用crownDidBecomeIdle
扼要複述一下 我們認爲Digital Crown有利於遊戲
而且很容易採用
我等不及看到你們能創造什麼新遊戲
用這種新的控制
現在加速儀可以用來增加其他互動
比如給彈球遊戲添加傾斜
或者給檯球遊戲添加旋轉
你通過CMMotionManager訪問加速儀
這裏有一些要考慮的
你可能知道
當你擡起watch屏幕是可見的
但是當你放下手臂時屏幕變成空白
當這發生時會把應用放入後臺
所以你移動手腕的話屏幕可能變空白
所以在遊戲中你要考慮到這點
一個建議是使用後臺處理
你可以調用NSProcessInfo中的performExpiringActivityWithReason
來給你的遊戲循環一些時間來繼續
並給你的用戶一個平滑的體驗
讓我們用一個例子看看怎麼在代碼中使用它
我們首先要訪問CMMotionManager單例
我們在這把它設爲一個屬性來稍後使用它
在主界面的willActivate我們詢問是否加速儀可見
如果可見我們配置一些事比如更新間隔
我們要求motionManager開始發送更新事件
我們提供一塊代碼來接收這些事件
我們可以把它發送回我們的遊戲給用戶提供反饋
當我們結束時我們應該告訴motionManager停止發送更新
這樣可以保存電池壽命
讓我們回顧一下
我們覺得加速儀可以很好地增加其他互動
請注意屏幕有可能變空白所以考慮使用後臺處理
並確保在需要時使用它
並在完成後停止監聽
讓我們來看看觸真體驗技術
在iOS上你只能讓你的設備震動
在Apple Watch上你可以創造更私人的體驗
通過使用不同的觸真體驗模式
每種觸真體驗包含一個震動和短音頻
通過使用觸覺和聽覺
加上屏幕上的視覺線索
你可以創造更擬真更有趣的遊戲體驗
我們提供九種觸真體驗反饋
我想通過一些例子來講解在你的遊戲中可以怎麼使用它
這是通知觸真體驗
這個品紅色的三角形表示觸真體驗震動的時間
這個波形表示和它一起播放的音頻聲音
讓我們聽聽它
如這個例子所示
通知觸真體驗對警告人們很好
當重要的事發生時
需要他們的注意
如果你採用豐富通知那麼你可以免費得到它
但是如果你在遊戲中探索世界
你可以用它告訴你的玩家你的村莊被攻擊了
方向觸真體驗 上和下
被用來警告用戶當一個重要值增加
或減少且數量顯著時
在這個例子中
你的健康值很低
或者當你喝健康藥劑
你感到好一些
還有一個聲音是開始一個行動
比如開始一次競速
或者當你想暫停時
成功觸真體驗提供確認音調
這可以用在
你贏了
或者你失敗了請再試一次
最後一個例子有一個很微妙的點擊觸真體驗
這種觸真體驗有一點特殊
如你所見 它比其他的更小聲更短
實際上 我不確定你是否能聽到音頻但是讓我們試試
這種觸真體驗提供感覺
在一個指定的增量或間隔點擊撥號的感覺
在遊戲中可以用在開一個箱子的鎖
或者給用戶提供反饋他們撞上了障礙
現在我已經給出了一些例子
我想要指出要採用這些觸真體驗事件很容易
你調用play函數然後傳遞定量
指定你想要的種類以及你想要喚起的感覺
讓我用一些要注意的事以結束觸真體驗的演講
Taptic Engine和傳統的音頻不同
傳統音頻中你你一次只能播放一個觸真體驗
還要注意這些效果是用來爲重要事件引起注意
他們的有效性會減少
如果你不斷震動watch
所以請有節制的使用它
我認爲你們會有很棒的體驗
讓我們回顧一下我們討論了手勢識別
和把它們用在遊戲中的一些想法
我們展示瞭如果使用錶冠
來創造引人注目的遊戲
我們討論瞭如果把加速儀包含到你的應用中
最後我們討論了觸真體驗反饋
使你的遊戲更擬真
現在我想交給Fatima
來談談我們的圖形框架謝謝
謝謝Christy
嘿大家好我叫Fatima
在這部分我們要談談我們的圖形框架
SpriteKit和SceneKit
你用來在Apple Watch開發很酷的遊戲
什麼是SpriteKit和SceneKit？
SpriteKit和SceneKit是Apple的2D和3D框架
針對遊戲和圖形
你可以在遊戲中用任一個框架
或者把它們組合到一起
它們使用起來很簡單
在Xcode中有很好的集成工具和編輯器
它們在macOS iOS和tvOS上可用
今年它們也在watchOS上可用了
在Apple Watch上
SpriteKit和SceneKit第一次來到你身邊
GPU加速 實時渲染
這允許你創造非常動態的內容
還使你的遊戲很有互動性
讓我們來看看一些很酷的特性
你可在Apple Watch上使用
讓我們從動畫開始
你可以在SpriteKit中用SKAction創造2D動畫
你可以在SceneKit中用SDNAction創造3D動畫
來使你的遊戲互動性好
你可以用動作來移動 旋轉和縮放你的物體
通過添加一個或一系列動作
來創造更復雜的動畫
接下來我們有顆粒
你在SpriteKit和SceneKit中都可創造顆粒模擬
來爲遊戲增加有趣的效果
使用顆粒模擬你可以模擬火雪 雨
和很多很多其他有趣的效果
接下來我們有物理定律
SpriteKit和SceneKit都集成了物理定律
來使你的遊戲更有趣
你可以在對象上啓用物理定律
然後定義屬性比如質量 速度和摩擦力
這些屬性會定義你的物體如何移動
他們對碰撞有什麼反應對力有什麼反應 在你的模擬中
接下來我們有光照
你可以在遊戲中加入光源
光只是你場景中的另一個節點
所以你可以給它添加動作來到處移動它
有一個很酷的光照的特性
是你可以自動用SKTextures生成普通映射
接下來我們有攝像機
SpriteKit和SceneKit都有攝像機供你使用
如果你決定使用攝像機
那麼你將從攝像機的位置渲染你的場景
所以攝像機是你視口的中心
而攝像機就像你場景中的其他節點一樣
你可以到處移動它通過給它添加動作
接下來我們有形狀和文本
文本可以做爲一個節點加入遊戲
所以現在顯示文本
以及在它之上應用動作和物理定律很容易
我們還有形狀節點
你現在還可以在遊戲中創建動態的幾何形狀
SpriteKit和SceneKit中還有可編程着色器
你可在SpriteKit中創造着色器
你可在SceneKit中創建着色器修改器
來讓你的遊戲元素獲得更加定製化的外觀
現在我們看了一些你可以使用的很酷的特性
讓我們看看SpriteKit和SceneKit在Apple Watch上有什麼不同
我會從SpriteKit開始
在SpriteKit中我們有SKView
我們用來顯示我們的場景
我們的場景可以包括很多節點
比如我們有SKSpriteNode來添加精靈
我們有SKLightNode來添加光照
我們有SKEmitterNode來創建顆粒系統
在watchOS上有些事不同
首先我們沒有SKView
我們不得不用WKInterfaceSKScene來顯示我們的場景
我們也沒有CIFilters但是我們能達到相同的效果
使用SKShader
我們沒有可定位音頻但是我們可以播放聲音
就像其他平臺用SKAction playSound
最後我們沒有SKVideoNode
但可用WKInterfaceMovie來播放視頻
這張表總結了SpriteKit的不同
對SceneKit我們幾乎有一樣的區別
我們有WKInterfaceSCNScene代替SCNView
我們沒有可定位的音頻但是我們有標準音頻
我們無法訪問CIFilters
但是我們可以用着色器修改器來實現相同功能
所以讓我們用一些例子來看看爲Apple Watch開發遊戲
爲一個已有的iOS遊戲
在這我用iOS上的SpriteKit模板
在左邊我可以看到項目的文件
我們可以看看遊戲場景
我們在這可以看到我們用了一個很簡單的場景
還可以看看GameViewController
在這我們可以看到我們用SKView來顯示我們的場景
現創建一個針對Apple Watch的遊戲
我們要做的就是點擊文件新目標
選擇watchOS下的遊戲應用模板
給它一個名字然後點擊完成
這個模板爲我們創建了兩個文件夾
應用文件夾包括我們的storyboard
和擴展文件夾含有我們的InterfaceController
和我們的遊戲場景
讓我們看看storyboard
這是storyboard我們可以看到
在中間我們有我們的界面對象
我們的界面對象在我們的對象庫中被選擇
在這我們可以看到我們有選項
在選擇SceneKit場景顯示SceneKit內容
和SpriteKit場景顯示SpriteKit內容間
我們的界面對象還有一個在界面控制器中定義的出口
我們可以用它來顯示我們的場景
讓我們來看看它
這就是那個界面控制器
讓我們來仔細看看它的代碼
在這我們看到我們的界面對象
在喚醒 有語境中我們可以看到我們在載入場景
和iOS中做的一樣
最後我們使用界面對象
顯示我們的場景就像在iOS用SKView做的一樣
這就是你要創建一個AppleWatch遊戲所需要的全部步驟
爲一個已經存在的iOS遊戲在Apple Watch上創建一個遊戲對象
現在我將有請Christy上臺介紹社交遊戲
謝謝Fatima
讓我們談談Game Center
如今的遊戲鼓勵參與
和與朋友競爭
Game Center使分享成就和分數
甚至是一起玩遊戲變得容易
關於Apple Watch多人遊戲我們會集中在回合制遊戲
回合制遊戲和Apple Watch非常搭配
它支持短的互動
我可以接受 不需要兩個玩家都在場
我可以進行一輪當我完成時我可以把它交給你
你會得到一個豐富通知
你可以有空時進行一輪
有很多如何實現一個回合制遊戲的細節
我們去年已經談過了
但是今天我們會強調什麼是Apple Watch特有的
關於其他細節請看我們的資料
或者觀看以前的演講
我還想說一些新特性
關於今早覆蓋的iOS 10中的Game Center
如果你還沒有看過它我鼓勵你看一下它的視頻
來開始創造一個回合制遊戲
讓我們談談授權
這比iOS簡單
你不需要在Apple Watch上輸入密碼
當你在手機上登錄
自動在Apple Watch上登錄
如果你熟悉iOS上的Game Center
你可能知道你會獲得視圖控制器
並且在一些情況下你要顯示
我是說在iOS上在Watch OS上這不是必須的
讓我們看看代碼
對你們中不熟悉Game Center的
有GKLocalPlayer單例是我們的API的焦點
在這個例子中我們發送一個授權處理器
它被調用
當授權完成無論成功失敗
如果你成功你可以給用戶反饋他們他們是否成功登錄
並且可以開始遊戲
現在我們授權你可以新建一個回合制的匹配
這裏一個重要的決定是如何和其他玩家匹配
最簡單的方法是讓GameCenter爲你選擇其他玩家
這被稱爲自動匹配
或者你可以載入一個最近玩家列表
通過程序邀請一個
讓我們從自動匹配開始
你創建一個GKMatchRequest
你把它傳遞給尋找方法
GKTurnBasedMatch類的方法尋找
當它返回時會給你一個新的回合制匹配的實例
你可以用來儲存你的數據和玩遊戲
請注意這可能會是新匹配
或者 若Norman創建了一個遊戲並且完成了他的回合
我可能會參加他的遊戲的一個空位置
你的遊戲需要考慮這兩種情況
讓我們看看代碼
你創建你的匹配請求
你設置參數像是最大玩家數量
你調用查找
當它成功時你可以開始遊戲
就是這麼簡單
通過程序邀請幾乎是一樣的
你只需要設置另一個參數接收者
這來自你選擇的玩家列表
然而要這麼做你需要訪問你一起玩過遊戲的玩家的一份列表
我會展示一些示例代碼
這向你展示如何訪問最近玩家列表
一個好的地方來假設你有一個類
有一個玩家選擇器讓你在列表中挑選
在喚醒函數中
調用localPlayer單例上的loadRecentPlayers
這假設你以前授權過你的主界面
我們調用loadRecentPlayers你得到一個玩家列表
你最近和他們一起玩過
在手機 平板或watch上通過自動匹配
有一件重要的需要提到的事是一旦你轉入並保存了它
你需要選擇你的對手
爲了幫助你顯示玩家清單
並給你開發一個回合制遊戲的開始
我們創建了一個應用例子
HelloGameKit實現了回合制遊戲的基本功能
它基於新的SpriteKit模板
作爲一個紅利它會展示怎麼使用手勢識別
我想簡短的介紹這個例子
當你啓動應用時它顯示這樣一個屏幕
並且說授權
當授權完成時它在頂部顯示你的名字
在底部給你選擇對手的地方
中間的計數器對你進行的各種點擊計數
記錄並保存到遊戲模型中
這是個簡單的事在回合制遊戲中保存錯誤
現在你已經點擊了在底部選擇一個對手
這會帶來一個玩家選擇器並載入最近玩家列表
讓你選擇其中一個
它還給你選項來自動匹配但是我想和Alan玩
現在他在和我玩
如果我想要訪問匹配列表
我可以向左滑動我會得到匹配瀏覽器
在這我可以創建一個新的和Alan的匹配或者選擇一個已有的遊戲
我將返回遊戲
最後我可以用長按結束我的回合
會把遊戲傳給Alan他可以進行他的回合
這就是HelloGameKit
你可以在這個網址下載它
點擊資源標籤來找到這個例子
讓我們回顧一下 watchOS中的Game Center給你授權流水線
這是一個可編程API但是我們給你了應用例子
有UI包括所有你需要做的事
我們希望這會給你一個好的開始
有了這些
我想要把講臺交給Tyler來談談工具和最佳做法
謝謝Christy
我們已介紹了Apple Watch可用的一些框架
讓我們談談工具
你可能熟悉我們豐富的遊戲工具
已經存在在Xcode中
我很高興告訴你們這些工具都對你們可用
對你的Apple Watch開發
這包括我們的場景編輯器它處理在代碼中設置
和佈局你的場景
並把它移動到Xcode中的視覺編輯器
而不是不斷編輯和迭代你場景的一個位置
你可以看到並控制你的節點的位置
你還可以容易地控制你的場景的層次
用場景概覽視圖
並且創建和修改節點的物理主體
不需要涉及任何代碼
現在我們的場景編輯器還包括一個內置的動作編輯器
讓你可以容易地創建 修改
和預覽複雜的可重用動畫就在你的關卡中
所以如果你在創建一個複雜的劇情剪輯來介紹你的關卡
或者你會在你的代碼中重用的一個角色動畫
有了動作編輯器這都容易做到
當你開發你的遊戲時
你會發現SpriteKit和SceneKit強大的顆粒引擎
在給你的遊戲帶來生命時扮演重要的角色
爲你的遊戲創造完美的顆粒很困難
如果你無法看到它
幸運的是我們提供一個靈活的工具
來創建和可視化你的顆粒
你被允許訪問顆粒的大量屬性
你修改它們後就能馬上看到效果
我們還有工具幫你在AppleWatch中保持優秀的性能
這包括我們的紋理地圖集
當你把圖片放入Sprite地圖集
我們會自動旋轉並重新定位它們
來形成單一的圖像
這減少你的遊戲需要使用的繪製調用次數
還有很好的一點是不需要對你的代碼進行任何改變
你還是可以在這些紋理上操作因爲它們是單獨的文件
當你的遊戲運行時
我們現在提供幀數每秒性能表
在報告的頂部你獲得很多實時統計
包括當前的幀率
以及GPU使用情況 來看看你GPU的哪部分被使用的最多
CPU和GPU的幀時間
這會幫你找出性能瓶頸是CPU或GPU
除了實時統計我們還提供時間軸歷史
你的CPU和GPU幀時間歷史
它會分解CPU幀時間到獨立的部分
所以你會看到多少時間用來渲染
或者運行更新循環或者評估物理動作
以及多少時間是空閒的
當你的應用暫停時你可以在歷史中滾動
在應用性能歷史中滾動這樣你能看到它是如何
隨着你在遊戲中的進展而發展的
如果有特別感興趣的你可以深入
並檢查它的詳情並得到精確時間
有一些最佳用法你可以使用
來確保在Apple Watch上獲得優秀的性能
一個好的減少電池使用的方法
是隻有需要時才更新你的場景
SpriteKit和SceneKit會自動跳過渲染
如果我們偵測到你的場景中沒有變化
如果你有大的資源在你場景開始時載入它們
這樣你就不會因爲載入這些資源經歷中斷
你希望你的整個遊戲過程流暢
你需要有一個幀率的目標
會提供給用戶一個一致的體驗
通過明確設定你的界面想要的每秒幀數來這麼做
如果你發現你確實面臨性能問題
有一些方法你可以使用來解決性能問題
首先減少任何時間你的場景顯示的顆粒數
你可以試着減少資源的細節
如果它們離得很遠或者被大幅度縮放了
這樣做的好處是你通常不會看到任何
在你的遊戲視覺保真度上因爲進行這些減少而造成的改變
如果你還是面臨問題減少你場景的複雜度
直到你找到性能和內容的好的平衡點
你在Apple Watch上開發遊戲時
你應該時刻記得一些設計考量
在整個開發過程中
你不應該簡單地照搬iOS遊戲體驗
我們希望你能重新思考體驗
Apple Watch提供的是輕量的互動
用戶喜歡一眼就看到遊戲的進展
你應該圍繞那些忙碌的人設計互動
你還想要一個簡明簡單的界面
避免顯示太多信息或者同時在屏幕上太忙
你可能把互動分散到多個屏幕中
這樣可以最大化屏幕空間
如果你有按鈕或者可觸摸目標
讓它們足夠大這樣你的用戶可以舒服地和它們互動
你還要保持應用視覺的連續性
它的意思是從一個應用進入你的
應該有一致的體驗
它的一部分是選擇一個支持你的遊戲商標的色調
在整個遊戲中使用
我們還建議當可能時在遊戲中有一個黑色背景
因爲黑色會
與Apple Watch面板無縫混合
創造出一個無邊界的屏幕這一美好的錯覺
你知道了一些Apple Watch可用的優秀輸入
優秀的框架你可以用來開發遊戲
豐富的工具可以用在開發流程上
我們等不及看到令人興奮和有趣的遊戲
你們今年將在Apple Watch上開發
想了解更多信息請訪問開發者網站
你可以在演講編號612下找到我們
這周之前的演講提供了很多有用的信息
包括“SpriteKit的新特性”
Game Center中的新特性SceneKit渲染進展
watchOS快速互動技術
如果你想要深入任何一個我們今天涉及到的領域
我們強烈推薦你看一看
謝謝祝各位在接下來的演講中過得愉快