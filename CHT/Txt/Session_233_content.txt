令應用自適應 第二部分
早上好我叫David Duncan
和Kurt Revis一起今天我們要講講
如何使應用自適應
那麼 第一部分你們會看到Interface Builder加入了的
工具
以及做自適應佈局的基礎
這個部分中我們會跟你講更多
能幫助你做自適應應用的技巧
以及自己定製想要的體驗
同時保持自適應性所需要寫的代碼
那麼 看看今天的議程
我們要談的第一個
只是一些尺寸和屏幕分類的基礎幫助大家溫習一下
我們還要講講在UIKit工具中已經有的一些東西
能夠幫助你用Interface Builder最有效利用UIKit
最後 Kurt會上來講
怎樣跨屏幕構造自定義體驗
那麼 讓我們從尺寸開始
好 尺寸
如果直接拿過來所有的設備
和它們的設備方向和它們在屏幕上的適配
這樣看起來是很複雜的一些東西呢
我不認爲任何人會想把這些問題都連根拔起
搞清楚它們的佈局看上去怎麼樣使它工作
讓我們看看是否可以將需簡化的所有這些做個圖表
好吧 還是挺複雜的
你不必讀它這些文本很難看清楚
看看把文字和顏色去掉會不會簡單些
並沒有什麼幫助那麼我們還可以怎麼做？
好吧 我們在UIKit考慮該問題時我們會想可以怎樣
分配空間給用戶創造好的體驗？
正如你已經猜到的我們在講的是屏幕分類
用網格分開 分成緊湊寬度和常規寬度
緊湊高度和常規高度
我們決定 當你在緊湊型時
你會有更接近iPhone的體驗更好運用空間
但當在常規型時你可以做到一些更高級的事
真正利用空間做到更有趣的一些事
那麼從中學到的就是當你看到常規尺寸時
就是給了你機會給用戶提供更好的用戶體驗
利用空間
超越能在緊湊型尺寸辦到的
那麼 看看基於屏幕分類 UIKit已經能辦到的
大部分視圖和控制實際上並沒有變
如果你看一下開關
它在緊湊型還是常規型是一樣的
導航條在緊湊型還是常規型也是一樣的
但什麼會變呢？
好吧 這裏有個展示
看上去是個全屏展示在iPhone 6s Plus上
如果我們旋轉設備 把它放在緊湊型時我們看到一個表單
所以在展示中看到的一件事是
如果你在常規型尺寸展示表單
轉而到緊湊型尺寸不會有足夠的空間來展示
所以會把它改成全屏展示
現在在UIKit中做着最複雜的適配
基於屏幕分類和有限空間
的是UISplitViewController
在iPhone 6s Plus上看緊湊型寬度的觀看體驗
會看到 如同你常常體驗到的
只能看到一個能夠推送、彈出東西的導航控制器
我們再旋轉到緊湊型寬度時
就引入了邊欄
在iPhone 6s Plus上我們認爲所有常規型尺寸的空間
有邊欄比沒有帶來的用戶體驗更好
儘管我們只有這麼些空間來加上它
跟在iPad上相似橫屏9.7英寸iPad
你會看到也有邊欄
讓你更方便切換於不同郵件之間
如果換到豎屏怎麼辦？
記住 在iPad上還是常規型尺寸
但是我們覺得在iPad上通常有內容
更大、更有趣的內容
內聯圖像等等你需要多餘空間
來和內容交互
然而 我們允許你在邊欄切換
這樣你還是能方便切換於不同郵件之間
這就是UIKit的一些
基於兩種屏幕分類提供最好體驗的功能
和有限的實際空間
爲了更好利用它讓我們看看UIKit的一些實踐
充分利用現有功能
講講Xcode工具裏UIKit的
第一部分中
你們看過了Interface Builder的用來做自適應應用的增強功能
爲了在所有範圍輕易做調試基於屏幕分類
和特徵
但是 Xcode還提供了資源目錄
資源目錄很棒不僅用來整理圖像
還指定了什麼時候該用這些圖像
當然UIKit有很多技術
讓構建自適應應用變得簡單
我們討論自動佈局很多年了
有很多相關演講如果你想了解
可以去回顧它們
當然今天稍晚些有個演講關於自動佈局的新進展
特徵集合在第一部分回顧過了
但還有別的東西比如動態字體
讓你的應用適應不同字體大小
基於用戶想使用的
佈局導引是個很好的方式用於傳遞自動佈局信息
向層級下
我們會討論一些UIKit默認提供的一些佈局導引
最後UIAppearance能很好
聲明指定你想讓你的應用
控制和視圖看上去怎樣
讓我們從資源目錄開始
資源目錄讓你自動適應圖像
基於圖像所在展示的特徵環境
這裏有個小例子
這裏是些Sophia寶寶的圖片
有1x 2x 3x版本的圖像
不管你在iPad 2還是iPhone 6s Plus上
你會得到那個設備下最好分辨率的圖像
另一個優點是
資源目錄可以爲應用瘦身設計
這意味着如果我指定這個應用給iPhone 6s
一個2x設備我不用付出空間損失
給攜帶1x和3x的圖片
同樣的 還壓縮了圖像基於屏幕分類
和其他一些東西
那麼 用資源目錄
可以給圖像做最好的細分
讓你用盡量少的容量
部署給用戶設備的時候
另外 資源目錄提供了元數據信息
爲了各種理由添加到圖像上的
第一件要討論的是對齊嵌入物
把Sophia寶寶弄回來
比如有個應用
有時我們要剪裁這張圖片成正方形
如果隨便取中間部分
會看不見她大部分的臉
真正要的部分是在她臉上畫個正方形
現在你該怎麼辦？
要引入一些度量
搞清楚從邊到正方形的距離
不用把這些寫入代碼和資源相連
你可以直接在資源目錄完成這些
UIImage會在你需要時提供這些數值
類似的 你可以用這些數值創建圖像
把圖像放進資源目錄
意味着你無需巨大的表格關聯資源名字
和元數據
類似的 比如表格視圖有個背景
之類的 你需要調整大小
來適應展示尺寸
你可以創建一個分成9部分的圖片創建切割邊緣
儲存這些進資源目錄
然後當這張圖片改成最終狀態下的尺寸時
它不需要大尺寸圖像就能調整大小
而且特定的根據你在工作的設備大小
好 這些是資源目錄
講講其他可以給應用做的適配
使用動態字體
我們喜歡動態字體
它給用戶提供了指定字體大小的能力
給用戶一些視野上的幫助
指定很大的字體大小來更方便閱讀
今年
我們讓你在應用上用動態字體更加簡單
用兩種方法
第一種 把它放在特徵目錄其中
就不用等着聽通知了
它就在那兒給你使用來自定義文本如果你需要它
但我們發現你在常規型文本視圖下應該不需要做這些
給標籤 文本框和文本視圖
我們把這些變得非常簡單
你只要指定想要的字體樣式
給內容尺寸類別設置調整尺寸的標誌
所有標籤 文本框和文本視圖
都自動適配成當前動態字體尺寸
你不用做任何事
當然 如果你用了這個方法
確定在所有動態字體尺寸下測試應用
如我提到的有些很大的字體
Mac的無障礙檢查器會連接你的應用
你可以動態調回來
而不用來回設置
如果你要在表格或集合視圖展示
回顧一下“集合視圖的新特性”演講
其中有些很好的信息關於性能和行爲的增強功能
在集合視圖中可以很好利用的
那麼討論討論佈局導引
UIView提供兩種佈局導引
邊距導引 和可讀內容導引
我們會依次說
這兩種都源於視圖
不管要放什麼內容
邊距導引由UIView中的一項屬性定義
那就是佈局邊距
定義了插入物的所有邊
那麼 接下來怎麼創建佈局導引呢
那只是由視圖指定的一個長方形而已
邊距導引 當然 提供自動佈局對象
給你生成自定義約束
簡單
那麼 可讀內容導引跟這有什麼關係呢
可讀內容導引
提供信息如何佈局文本
讓文本的每行長度看上去好可讀性高
如果你在用新的12.9英寸iPad Pros
把文本佈局成一邊到另一邊
用戶在閱讀時會不停轉頭
第一件要計算的是文本長度的理想寬度是多少？
我們不想要文本溢出邊距
所以把邊距導引作爲計算的一部分
把兩者結合成可讀內容導引
另一種在UIView中放入文本佈局
現在 可讀內容導引基於動態字體大小
如果動態字體大小變了會怎麼樣？
好吧 我們放大了動態字體大小
理想寬度變大了
如你所見
因爲可讀內容導引基於邊距
導引不會穿過這些邊距
所以你可以鋪開文本
得到可讀性強的文本長度在視圖裏面
那麼讓我們講講UIAppearance
UIAppearance如果你還沒用過 是個聲明方式
給你指定你想讓應用看上去怎麼樣
這什麼意思？
這意味着 比如說不同於有個新的標籤欄就寫代碼
你寫道：
你寫說 對於我所有的標籤欄
外表樣式中所有未選擇的着色是藍色
非常簡單每次創建標籤欄時
未選擇項目會是藍色
但它同樣是基於上下文的
意味着你可以指定基於特徵集合
或基於視圖包含物
這看上去什麼樣？讓我們看看
這是我們的應用
至於樣式 我們想把大的標題圖片放在頂部
在常規型豎向屏幕的時候
圖片會替換導航欄的背景
然而 當我們在緊湊型豎向屏幕時
會呈現並排佈局
圖片不會超出導航條
所以我們會用默認背景
先讓我們做默認背景
創建一個UITraitCollection給豎向緊湊型屏幕
把導航條樣式賦給特徵集合
說我們不想給這個樣式用任何背景圖片
這會導致導航條用回原來默認樣式
類似的 做豎向常規型屏幕時
給它創建一個特徵集合
用這個樣式
指定一個空圖片導致導航條
不使用背景圖片
現在 記住給特徵集合的樣式API
可能會被讀取的很奇怪
我們實際想修改C2的API
所以仔細注意這部分
要結束這個最佳實踐的部分前
這個部分我們回顧瞭如何用資源目錄整理圖片
動態字體適配用戶改變字體大小的願望
佈局導引幫助你構建你自己的佈局
以容易適配所有佈局情況的方式
最後 外表
讓你的應用看上去跟你想要的一樣
那麼接下來我要交給Kurt繼續講
謝謝 David
如果你還記得 從自適應應用 第一部分演講中
要記住的訊息是：
系統會做大部分工作你不用做
現在 我今天要講的是超越系統做的
如果你想超越系統提供的
接下來告訴你怎麼做
這裏的關鍵詞是“如果你想要”
不是必須的
然而 如果你不想要即使你不利用它
還是可以學到如何更有效使用UIKit
那麼我要講一些超越基礎的
我要告訴你怎麼設計應用來解決所有各種
設備方向 尺寸的問題
你如何實現這些設計
應用改變大小時 如何動態改變設計
然後我要講關於使用可重複元素
讓構建應用更方便快捷
我會放在做一個應用的上下文中講這些這兒我們會做個真正的應用
那麼 稱我的應用爲我的非常自適應的應用
幸運的是它也很簡單
在這個應用中只要展現三件事
三個項目每個項目有個標題
只是A B 和C
然後還有更長一些的文本每個項目一個描述
即使這個應用非常簡單我會用到一些技巧 你可以在
更復雜更大的應用中使用
這就是我應用的原型這是其中的數據
那麼我的應用該看上去如何以及如何運行呢？
設計什麼樣？
好 當我在思考設計時
我需要考慮所有尺寸和方向的組合
給每個組合做個特別的設計太費事了
這工作量太大了讓我們試着簡化
我覺得我的應用只需要兩個設計
稱第一個爲“高的”
我把所有項目豎着排放A B 和C豎着放在堆裏
另一個設計叫“寬的”於是橫着排所有項目
現在 我認爲不管應用實際是什麼尺寸
我可以用兩者之一的設計讓它們放的合適
現在我的問題是：
給到一個設備方向和尺寸的組合
怎麼選擇用哪個設計？
我要定義一個規則我的應用專用
我覺得我要選：如果寬度低於高度
用“高的”設計
否則的話 用“寬的”設計
運行所有的組合看效果怎麼樣
在寫代碼之前先在紙上看看
比如 這個iPhone是豎向的
寬度低於高度我們用“高的“設計
把iPhone放到橫向
或者iPad全屏或者iPad部分屏幕
過一遍所有的例子全都試一遍確保這個規則能用
再說一遍我剛剛做的
在設計應用解決尺寸問題時
我考慮了所有的組合
想出了幾個設計來覆蓋所有組合整個範圍
然後定義規則來確定用哪個設計
當我在定義規則時
有很多方式可以用這也是讓我的應用變得特別的地方
但要注意我本來可以檢查
尺寸是否正好匹配
我本來可以看1024x768尺寸
那麼說這是iPad然後基於這個信息決定設計
我不想這麼做因爲這樣做會要解決太多組合
而具體尺寸會隨着時間變化
所以我定義了一個簡單的是否條件
來告訴我用哪個設計
有很多方法做這些
第一條 最明顯的是用屏幕分類
然後就完成了大部分工作
你只要檢查是常規型還是緊湊型
應用會像系統其他應用一樣工作
因爲在用同一個屏幕分類
所有的Xcode工具可以幫到你你會無償得到很多
但是你也可以自己定義一個規則
比如可以比較一個值 比如寬度或高度跟一個閾值比較
或者比較兩個值 像我之前做的寬度和高度比較
或者結合這些規則
重點是想出一個簡單清除的規定
來決定用哪個設計
在考慮設計時即使尺寸相同
比如iPad的一邊或者另一邊
不要把設計特定到設備按鈕位置
或者多線程操作時另一個應用在哪兒
找到應用的大小
用規則決定用哪個設計
最後 把設計用在UI上
改變UI的視圖來適配
現在我該把這段代碼放哪兒？
如果我用個Xcode的新模板或者新的視圖控制器
有viewDidLoad方法的模板
它說 在這裏進行任何額外設置那麼我就在這兒放代碼 對不對？
不幸的是 沒那麼簡單
原因是你不會想做這些因爲視圖在所需時加載
第一次要求視圖時這個視圖會被調用
那得很早了
我們知道那時視圖還不是父視圖
佈局還無效呢
所以你不能指望視圖尺寸
活任何父級尺寸或特徵之類的
只是太早了
對於一次性東西 像初始器loadView、viewDidLoad
你會想放一些設計中都一樣的代碼
對我來說更好的地方放規則代碼
是在視圖控制器的viewWillLayoutSubViews方法裏
你會看到因爲那時視圖在父視圖中
父視圖的佈局已經發生了
尺寸有效視圖尺寸有效
特徵有效一切都很好
這是操縱視圖控制器中元素的好時機
這裏改變視圖控制器的視圖
約束等等
現在 注意要小心因爲這是條非常火的路徑
經常被調用 經常出於你掌控之外的原因
所以在這個方法裏做盡量少的工作
理想條件下你會發現上次被調用後什麼改變了
然後基於變化 儘量少的更新
只改變視圖的必須改變的屬性
最後 小心不要導致佈局循環
如果使父視圖佈局失效
它們會反過來失效你的佈局
馬上你會發現你應用沒做任何事只是不停使生效、
失效佈局然後任何實際都沒有發生
要了解更多關於調試和更多關於佈局循環
可以看看今天稍晚些的自動佈局的新進展演講
那麼這裏是我的兩個設計回到這裏
怎樣實現它們呢？
我可以給每個項目A B C一個視圖
然後用UIStackView
來橫向或豎向排列這些東西
UIStackView做全部工作我不用特別努力思考
這有一些代碼
我簡單示例的視圖控制器是一個UIViewController的子類
爲它做個storyboard
其中有個堆視圖而且這個視圖中已經有了三個視圖
現在我要在viewWillLayoutSubviews方法裏
覆寫這些
第一步 得到尺寸寫view.bounds.size
第二 採用規則
如果寬度大於高度...
或等於高度 選擇用“寬的”設計
最後採用設計
如果再用“寬的”設計
堆視圖的讀取會是橫向的
否則就是豎向的這是所有我要做的
注意這裏我不用做很多工作
我還利用了StackView很聰明這個事實
如果設置讀取已有值
不需要做額外工作
讓我們看看在活動的應用這是我應用在iPhone豎向屏幕上
看到豎向佈局現在我旋轉到橫向
會看到應用也旋轉到橫向
我還無償得到這個動畫
現在回到豎向再展示一下
這樣旋轉了
把這給David看
因爲我被震撼到了堆視圖 免費給了我這個
我沒料到
他說“好 這很棒
但怎麼讓它更好？你能讓它變得更突出嗎？”
如果你是個應用開發者 也許你曾經從客戶那兒聽到過這些
我說“當然 我能讓這更突出”
我可以讓應用稍微有趣些讓它更突出
通過在旋轉時 讓項目向你變大
旋轉後我讓它們回到正常大小
縮回到正常大小
這不是我們必須提倡
你在你應用中做的
不是這個特定的讓應用突出的技巧
重點是把代碼放在哪兒以及具體怎麼做
那麼我把代碼放在viewWillTransition方法裏來調整大小
和協調器
我這麼做因爲它會在應用尺寸變化時被調用
或者在旋轉時
我給協調器設置動畫
在旋轉同時設置之後發生
爲什麼不把所有佈局代碼放在這兒？
因爲應用啓動時第一次不會調用這個方法
還有別的原因 但那是主要原因
那麼我用協調器設一段代碼
來在旋轉時加入動效
我要做的是在這段代碼中
設置參數表示我想要動畫
它就會以相同曲線和相同時間旋轉
接下來設置堆視圖變化
到1.4倍所以變大一點點
然後結束後設置自己的動畫和持續時間
這裏我選了.5然後回到正常大小
設置CGAffineTransform爲默認
也就是正常大小
那麼就這樣
這是同一個應用上面有多加的代碼
會旋轉
向你彈出然後回去
如果再旋轉 它會做同樣的事
就這樣我加入了彈出效果
讓它變得有趣了些
但我沒有變核心佈局代碼
它保持原樣我只是加了些在頂部
最後我想講的是可再用元素
這種方法可以讓你構建應用
由不同設計中可再用的元素
這種應用構建方法更快而且利用了
不同設計而不用重寫所有東西
我們會用到視圖控制器
每個元素往往是一個視圖控制器
這是因爲視圖控制器打包了很多有用的東西在一起
比如你得到了一個樹的視圖
不僅是單個視圖而是一整個樹的視圖
和所有它們的約束一起
可以連接到其他的視圖控制器
於是你可以用segue跳轉到另一個不同的視圖控制器
或者呈現某個東西找到父視圖控制器
之類的
這裏可以和應用的其他部分建立連結
你可以連接到模型對象或者一個對象
代表網路接入之類的
現在你應用的視圖控制器有不同的角色
也許有一個容器視圖控制器
它也許包含了幾個被包含的視圖控制器
也許你曾經寫過被包含的視圖控制器
然後把它們放在UIKit提供的容器裏
比如導航控制器或者分割視圖控制器
或者標籤欄控制器等等
但你可以寫自己的容器視圖控制器
這讓你解鎖很多能量
你可以通過這做到很多事
我會展示給你如何做到又是我的設計
在我的案例中 我認爲我可以有一個外面的容器視圖控制器
我稱它爲示例容器視圖控制器
在那裏面我又三個元素視圖控制器
每個元素有一個視圖控制器
現在 想想我認爲我的設計需要一點精化
如果我沒有很多空間
我會需要展示這些項目的預覽
我沒有地方放全部文本只夠放標題
那麼當我點擊其中一項時
或者 不好意思 輕擊其中一項時它會呈現預覽
會呈現展示全文的另一個視圖控制器
然後如果我再輕擊那個我們就遣散了它 它會不見
做出這個通過...我的示例容器視圖控制器
會有三個小的元素視圖控制器
我們等會兒會定義它
當我們要呈現一個時輕擊它
就創建並呈現了一個新的大的元素視圖控制器
如果我的應用夠大我不需要做這些
我只要展示這裏的大的元素視圖控制器就可以了
直接在容器裏
所以我的容器會有三個另一個類的實例
LargeElementViewController類
當應用動態改變尺寸時
我們要在這兩種視圖控制器層級的狀態之間改變
在這裏展示代碼
我們將從被包含的視圖控制器向上講到
容器
從給這些被包含的視圖控制器的storyboard開始講
它很簡單 這裏有個簡單帶標題的視圖
注意我設置自定義類爲小元素視圖控制器
把storyboard標識符設爲小元素
就能在storyboard找到這些然後之後舉例說明它們
至於大元素視圖控制器它更大 其中有更多文本
同樣道理
設置自定義類爲大元素視圖控制器
然後設置標識符
這兒是給小元素視圖控制器的代碼
從這開始我知道每次展示這些
就要點擊來展示大的視圖了
在viewDidLoad方法中有個適合的時機來做這個
我要設置輕擊手勢識別器
加到視圖中
接下來它被輕擊時會被調用
找到主storyboard
舉例說明大元素視圖控制器
用標識符 大元素
最後只要呈現它們
在大元素視圖控制器中更復雜一些
因爲我們需要知道是否在被呈現
如果在被展示需要輕擊來退出
如果不是不需要
所以我把這段代碼放在viewWillAppear方法裏
我這麼做因爲能用另一個方法
isBeingPresented方法找出這視圖是否被呈現
如果在被展現跟之前一樣加入輕擊手勢識別器
當被輕擊時所有要做的只是退出
現在進入容器視圖控制器
我準備加額外的一個對象
讓它更容易工作
叫做設計對象
設計對象可以包裹
所有描述一個設計的信息
我把它做成一個無法改變的值類出於安全考慮
寫一個函數返回其中一個之後它無法改變
沒人能改變它
它允許比較
這樣就可以看我想要的設計和當前顯示是否不同
讓我們實現它我只有一個簡單的Swift結構
它有兩項信息
第一個是軸
從堆視圖中重複使用這個枚舉可以是豎向或橫向的
然後定義這個自己的枚舉爲是否在用小版本
或裏面視圖控制器的大版本
稱其爲ElementKind
最後這裏有個只讀的計算的屬性
稱爲elementIdentifier
這只是用來告訴我用哪個標識符
做storyboard裏視圖控制器
最後 實現Swift裏的Equatable協議
這裏只是雙等號函數我在兩個設計中比較數據
來看它們是否相同
讓我們進入容器視圖控制器
然後做這些
你記得它會有三個子視圖控制器
它要用這些規則來創建決定用哪個設計
然後更新
每個佈局會重新評估用哪個設計
然後改些東西如果需要的話
那麼這樣示例視圖控制器
這裏有個包含三個位置的數組給三個可選視圖控制器
它們開始是無值
當它一開始被創建時還沒有展示任何東西
我還要跟蹤記錄當前展示的設計
這也是可選的 現在是無值的因爲還沒有發生什麼
在viewWillLayoutSubviews方法中這些現在應該看來很熟悉了
得到尺寸
調用一個叫decideDesign的函數
基於尺寸返回一個新的設計使用
如果這個設計和當前顯示的不同
我就把設計用到UI上改變UI來匹配
注意這和我之前講的僞代碼一模一樣
不管你的應用做什麼
你也可以按照這個模式來
也許你的設計中有不同的東西
你的decideDesign和applyDesign方法不同
但會按照一模一樣的模式
現在把這些函數填進示例應用中
DecideDesign先決定座標軸
我們已經講過了對這個規則怎麼做
對elementKind我將用一個不同規則
我決定選擇比較應用寬度是否低於閾值的規則
選擇用小的視圖控制器否則用大的
這裏我在跟一個定值做比較
這是一個給我應用用的例子
你不一定在你的應用中用這個值這只是一個例子
把這兩樣信息打包
進設計對象然後返回它
用這個設計 採用這兩樣
我需要找出它們是否改變了
座標軸直接傳遞到堆視圖
它很聰明不會做任何不需要做的事
對於elementKind我們還有些工作要做
如果有舊的元素視圖控制器而且元素類型在改變
那麼我們需要毀掉老的創建新的
這裏我們要做的是迭代整個數組
這裏我用了這個枚舉函數
因爲它讓我們得到索引和在那個索引的對象
在迭代的同時
最後 如果我們有一個舊的元素視圖控制器
需要刪除它可以調用這個函數刪除
到storyboard創建一個新的元素視圖控制器
用設計給我的標識符創建
最後調用函數 加入新的子視圖控制器
然後保存它到數組爲了下一次迭代
這是最後一頁代碼幻燈片謝謝你們聽我講到這兒
這些是我們需要做的
來做一個運行良好的容器視圖控制器
完全按照這個順序完成步驟很重要
加入新的視圖控制器時調用addChildViewController
這個方法加入這個視圖控制器到自身的一列視圖控制器中
然後需要加入那個新的視圖控制器的視圖
到視圖層級中
通過運用堆視圖的addArrangedSubviews方法
UIKit不會幫你做這個
也不能幫你做這個因爲我們不知道
在視圖層級中它該放在哪兒
只有你能告訴我們這些
最後 做完前面步驟以後你告訴那個視圖控制器
它移到了新的父視圖控制器那裏是“自己”
要移除舊的做基本上相同的步驟
只是以相反的順序
我們告訴它它會移到一新的父視圖控制器 即無值
從視圖層級中移除它的視圖
最後從自身的子視圖控制器中移除自己
就是這樣最終給你們展示了應用
這裏我們在看橫屏的iPad有很多空間
我們用橫向佈局和大元素視圖控制器
現在我劃到另一個應用固定住
我的應用變小了它換到了豎向佈局
我還是在用大元素視圖控制器
它們和之前我們看的視圖控制器一樣
現在如果我還把應用變得更小
你會注意到我們換到了小點兒的設計
還是豎向 但在用小一點的設計
現在我能輕擊其中一個小視圖控制器
呈現大的那個如果再輕擊 會退出它
這就是我的應用記住我們超越了基本的
我們真的決定了要自己完成這些
我解決了所有組合的設計
實現了每個設計
應用變換尺寸時在不同設計間動態變化
還用了可重複使用元素來完成
我的應用只是一個示例你的應用也能做到這些
我們講過了基礎展示給你Xcode能辦到什麼
展示了一些UIKit提供的很棒的東西
在一整套瑞士軍刀一樣的工具裏
在實例應用中講過了代碼
可我們還只是涉及了表面
還有很多要做
看看這個URL裏的示例代碼
還有 如果你還沒有看第一部分請回顧它
有一個“兼收幷蓄的應用設計”演講會講到字體排印
David提到集合視圖和自動佈局的新特性
還有WWDC去年兩年
我們講過關於自適應應用和多線程任務
真的不想重複太多那些材料
所以請複習那些東西
那些演講中有很多很好的材料
那麼謝謝各位願各位度過一個很棒的週五