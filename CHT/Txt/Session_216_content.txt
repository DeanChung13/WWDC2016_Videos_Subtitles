UIkit 動畫和過渡的新進展
下午好
我是Bruce Nilo
我是UIKit的一名工程經理
今天 我和我的同伴Mike Turner都非常興奮
我們會介紹一些新的動畫API
在iOS 10中的UIKit將會包含這些新特性
我們相信這些API將會讓你更簡單的
創建自然的 順暢的
和可響應的應用
今天我們會先快速重溫一下
UIKit中已有的一些隱式動畫API
然後我們會深入的介紹一個全新的類
我們叫它UIViewPropertyAnimator
我們還會介紹一些用於視圖控制器切換的擴展
以便於你們更好的使用這些新類
Mike將上臺給大家一個很棒的展示展示如何使用這些新的API
還有一個全新的圖片應用的例子
不久你就可以下載到
我們還會討論一些細微的問題
關於這些新類的觸摸處理和點擊測試
和該如何使用這些新的類
來創建甚至可以被中斷的關鍵幀動畫
UIKit中的隱式屬性動畫
基本上是爲了
讓你可以創建動態的內容
你可以通過設置視圖的屬性並讓動畫在一段時間內發生
它是隱式的因爲UIKit爲你創建了動畫
值變化時會被記下來
用原始值和最後的值做個差值
這個值會在你指定的時間段上
用一個可選的定時函數決定這個動畫的節奏
我們再具體的介紹下
這裏有一個非常簡單的動畫
今天的展示中我們會一直使用這個例子
我們有個圓基本就是從左到右來運動
通過設置視圖的中心屬性來讓其運動
在這個圖中我們看到一個虛線圓形
或者是一個虛線正方形它代表了視圖
在實際動畫中你看到的樣子
而實線形狀代表目標值
我們也分別把它們叫做模型值和展示值
我們開始這個動畫然後它以一定的速度進行
實際上你會注意到這個速度是恆定的
問題是今天我們將要怎麼做
今天的實現將會很簡單
你們中大部分可能熟悉animateWithDuration API
在這個例子中 我們指定在X軸上
圓的中心應該從0移動到100
現在定時函數可設置爲.linear
簡單來說它表示一個特性函數
我們快速介紹下在UIKit中什麼是定時函數
它是一個三次函數映射"0到1"到"0到1"
同時有兩個約束
就是說 在動畫開始的時候
即在一開始時
動畫進行的速度值就是這個開始值
結束的時候 就是結束值
現在定時函數不定義你的動畫速度了
現在通過這個誇大的漸入定時函數可以很容易的實現
你會注意到動畫進行到一半時
它的進度移動很少
它真的時進行的相當的慢
我們差不多離完成有90%了
但我們還是隻到了一半的位置
在你指定時間的最後10%裏
我們將會完成剩下的距離
簡單說 它會加速
從速度非常慢到非常快直到最後
這就是定時函數的作用
現在UIKit有四個定時函數
這些是特定的三次貝塞爾函數實例
這是我們以前看到的特定函數
這是漸入漸出
這是漸入
最後 這是漸出
這些是我們提供的非常細微的函數
將會影響一部分動畫的感覺
關於回彈會有什麼呢
我們也有隱式的動畫API提供給你來設置一個回彈
我們不會否認如果你想說
"那不是實際的插值
我們把這個值做得有點過並且有點回彈"
然而 接下來 大家可以都
想一下把回彈作爲另一種類型的定時函數
現在看看我們爲什麼能這麼做
來看看這個簡單的應用
我們讓一個方塊從左面移動到了右面
我們繪製了位置移動圖
在方塊移動的過程中
它有點像定時函數
實際上它不是立方函數
我們過度設置了它的值
但我們仍可認爲它是可以影響動畫的速度的
接下來的API中我們將會對回彈動畫進行分類
現在在iOS 8中有另一個重要的用來製造動畫的版本
我告訴你這些
因爲稍後我們還會談到它
簡單說 考慮一個動畫在動畫進行的中間改變
所以你將從一個位置到另一個位置
到一半的時候 你變了
在iOS 8以前 如果你這麼做你的動畫將會有一箇中斷
除非制定了一個特別的配置
UIViewAnimationOptionBeginFromCurrentState
如果你這麼做了將會看起來好一點
將不會有間斷和跳躍
但是仍然不會順滑
速度變化的很突然
在iOS 8中我們做了一個重大改變
動畫中的特定的屬性被漸進的完成
我們沒有移除之前的動畫我們把後來的加了上去
這樣能平滑處理速度的變化
通過使用新的UIViewPropertyAnimator第一種情況就不會再存在了
好的 現在我們看看新的類我們已經快速瀏覽了
它的一些特性
我們已經很熟悉了
如果你熟悉以前的animateWithDuration配套的API
新的API你也不會陌生
它是可以被中斷的
這意味着你可以暫停和停止動畫
你可以打磨它們意思就是說你可以讓它前進後退
用你喜歡的方式基於這個可編程的API
你可以反轉它們
你可以說別擔心 往回走
我們將會介紹一整套定時函數
而不僅僅是以前的那四個
通過回彈動畫的一種小的子集
最後 當動畫運行時
往上添加動畫將會非常簡單
但是介紹這些API有點困難
所以我不打算做這撓頭的事
讓我們大體看一下這些API是什麼樣子
在所有這些新類的中心是UIViewPropertyAnimator
它實現了兩個新的協議
把它們作爲協議實現的原因
或實現這兩個新的協議我們將會看到它會非常有用
當我們把它和視圖控制器切換放在一起使用時
當你創建一個屬性動畫生成器
你將會創建一個新的對象類型
這會高效的指定定時函數
將會使用在你的動畫中
我們提供了兩個新的具體的類來實現
我們已經引入了一些新的枚舉
以供協議中的方法使用
例如 動畫生成器的狀態可以爲非活動活動或者停止
一會我們再討論這些
我們也引入了位置
即動畫停止的地方
動畫會遍歷所有我們設定的地方麼
我們是通過反轉它來回到開始位置麼
或者我們可能打斷了它還有可能其他的實現
好的
我們先來集中在這個圖的中間部分
然後我們會簡要說下所有的這些新的定時函數
那麼我們來看看這個角上的API
它被定義在UIViewAnimating協議中
有趣的地方都在這
實際上這非常的簡單
有幾個屬性你可以獲得和設置
比如 你可以設置fractionComplete
你可以讓動畫開始
你可以暫停 停止 完成動畫
這些都不用過多解釋
下一個協議給這個動畫生成器增加了隱式的特徵
比如你想在哪裏設置塊和目標值
給這個設置動畫的屬性
這裏同時有個有意思的方法叫做continueAnimation
能讓一個暫停的動畫
和一個完全不同的結束時間一起處理
甚至是一個不同的定時函數
UIViewPropertyAnimator有幾個構造方法
也有一些屬性用來處理觸摸事件
我們會在最後討論它
首先我們討論下如何使用這些基本的東西
我們將會討論一些不是那麼明顯的細節
你可能會在暫停和刷新一個動畫的時候遇到
同時也有一些有趣的可能
取決於你如何反轉一個動畫
最後 我們會介紹所有的定時提供者
讓我們從一個實際的簡單的動畫開始
同時我讓這個例子變得更有趣了一些
爲了教學目的 稍後你會看到
我來問個問題
“你將怎麼樣使用屬性動畫生成器來完成它”
它非常非常簡單
第一步需要創建一個定時對象
就像以前用的枚舉.easeInOut
你需要指定持續時間來實例化其中的一個對象
和這個定時對象
通過使用閉包添加動畫
更新你想設置動畫的屬性
你可添加一個可選的完成後執行函數
這個例子中這個函數把背景色變成了橘色
然後你可以在任何時候開始這個動畫
是的 相對於舊的API有點繁瑣
但現在你有了個對象
你可以用它來做所有的事情
這和以前有點不同
讓我們看下UIViewPropertyAnimator一些其他可用的屬性
其中有三個比較有意思
有狀態 有是否在運行
和是在正向還是反向在運行
這些都是KVO中可觀察的屬性
第一步你需要做的是添加一個動畫
我們將會讓這個圓再一次從左移動到右
一旦你開始你應該添加一個動畫閉包
你可以開始這個動畫
然後你開始這個動畫動畫的狀態會改變 變成運行
現在這個視圖實際的值開始改變
有一個目標值你可以在屏幕上看到
然後動畫開始運行
現在不同的是我可以在動畫運行的時候暫停
我可以通過讓動畫生成器暫停實現
我還可以讓它從相反的方向再來一次
現在動畫還是在在暫停中你可以注意狀態的變化
然後我開始
動畫開始運行從相反的方向
現在我再改變 動畫接着向前運行
當完成的時候
將會調用你註冊的完成處理函數
這次我們通過.end來調用
我們一直用這種方式來初始化
如果在動畫運行時我們沒有再一次反轉它
我們將會調用.start來完成動畫
這樣 你的結束處理函數能知道動畫實際是在哪兒結束的
好的
除了暫停動畫還有其他你可以做
你可以停止動畫
這是什麼意思呢
首先你會注意到的是 立刻
這個圓在中間停住了
在屏幕中間可以看到我們明顯提示了
動畫視圖的實際模式數值
這時你可以對這個圓做任何操作
但我們傳了個false參數來停止
表示不要立即跳到
非活動狀態 保持在準完成狀態
它表示在未來某個時候
你將調用finishAnimation
同時你將指定一個動畫實際結束的位置
在這個例子中 我們既不會在開始完成也不會在結束完成
你的完成函數將會在這個位置被調用
現若你調用了stopAnimation並傳入了true參數
我們將不會調用你的結束函數
它將會在那個點完成
現在我們看看如果你調用finishWithADifferentPosition會發生什麼
若調用finishWithTheEnd
它將會直接跳到動畫的起始位置
你可能回想“爲什麼需要這麼做”
實際上這給了你很多可能
比如 想象下你將要暫停這個圓
或者在你觸摸它的時候來暫停動畫
然後你可以拽這個圓來回轉動
也許你設置了一些UIKit的臨時行爲
在結束位置或者目標位置
當你釋放它 根據你手勢的速度
它可能卡入那些相對位置
一旦到達了那裏就可調用finishAnimation
通過.end和.begin
然後你可以做一些有意思的事情
來種植你開啓的動畫
好的 暫停和刷新
不是很多 對麼
這有點意思
這裏有個樣例程序
我們給這個方塊設置了一些手勢識別
在那個綠色進度條上
我們可以刷那個進度條
我們用方塊的位置更新它的值
然後我們繼續操作方塊
你會發現移動的時候方塊的位置
在圖中看起來有奇怪的突起
這裏我們簡單的說下
在介紹之前 我們看看這些手勢識別
在方塊上 我們添加了輕觸手勢識別
來檢查動畫是否是活動的
如果是活動的 它將會檢查是否在運行
如果它在運行 將會暫停它
如果不是 它將會重新開始
相當直觀
在進度條上我們設置了一個平移手勢
我們會根據位置計算一個分數
我們在平移時
相對整個進度條的邊界
根據我們計算的分數
我們將同時更新動畫生成器和進度條作爲fractionComplete
好的
那麼 這個圖怎麼了
有些有意思的事情在發生
方便解釋它我將會回到之前類似的
誇大的漸入曲線
這次 進入了50%
我們暫停了動畫現在我們想刷信它
需要重點注意的是fractionComplete
實際上你的設置和時間無關
我們剛暫停了動畫
你設置的是相對於終點值的小數
在這種情況下 我們不會有任何進展
現在我們將會刷新這條線
我們將會繼續來一次
我們不想跳到能看出位置
這個正在設置動畫的視圖
所以 實際上 我們是把時間映射回
定時函數開始的位置
就是說當我們繼續這個特殊的例子的話
這個動畫將會快速的完成
所以當我們回到剛纔看到的曲線
你會發現我們有點往回跳
到漸入漸出定時函數
並且注意到這很重要當暫停和刷新的時候
根據任何UI提示你可能需要這麼做
你可能會看到這些不連續性並且需要做些補償
好的 讓我們談下反轉
有三種方式你可以用來反轉
一個是你可以暫停反轉 比如需要交互
需要再來一遍
你會發現你是字面上的直接反轉回來
通過你指定的定時函數
你可以在任何時候反轉
就是說 即使在動畫運行時
你也可以來讓動畫反轉
這有點像打一堵牆
再一次這將會導致速度上的很大的不連續性
這將可能是你想要的
如果你想要一個完美的非彈性碰撞或者類似的東西
如果你不想這樣或者你想讓它更順滑些
你可以累加的使用動畫
在這個例子中 我們將會反轉動畫
不是通過修改反轉屬性
二是通過實際的修改值到原始的位置
它們的不同是
結束的時候處理函數的調用
.end函數將會被調用
你已經改變了目標
你將不會回到初始的目標
你將會回到你剛纔指定的目標
好的 有些有意思的
定時對象可以用
第一個是UICubicTimingParameter類
如果創建這一類時不設定任何參數
你將得到默認的core animation時間曲線
這之前在UIKit層面並不可用
第二 構造函數變量
本質上是現有的canned動畫曲線
最後我們開放了所有l可用的貝賽爾曲線
供你在這個單位正方形內使用
舉個你可能會做的事情爲例
這個特殊的貝塞爾曲線如果給它個名字
就叫“快進 快出”
你一定會欣喜若狂 當你看到想要用來創建時間函數的貝塞爾曲線
我們已經爲你們提供了更多方法去做比如彈跳這樣的動畫
而且再來想一下我們認爲彈跳現在會影響時間
如果創建UISpringTimingParameter對象時不設定引值
你會獲得一個臨界阻尼的彈跳動畫
這是很多人想要的動畫
比如我們就會用這個動畫在導航控制上進行推入或調出
第二個變量很像現有的UIKit彈跳動畫應用編程接口
但是還是點小區別我馬上就會講到
但在講這個之前
我們以爲你打開了一個彈跳方程
你可以定義任何你想要的係數
我們也會切實重視這些係數
但這裏有個問題
就是你定義的時長被忽略了
我們對這個時長的計算是根據彈跳方程的解法
舉這樣一個例子
我說過他們之間有區別
你會發現初始的速率現在變成了矢量
而不是標量
很多時候我們不會注意
這個矢量的y分量
但是如果你在視圖中心做動畫
那麼這個矢量的x和y分量必須都要注意
原因就用這個應用程序實例說明
我們將正這個方形拖離中心
並在鬆手的時候要讓它
根據手勢的速率彈回中心
直至現在這個速率始終沿着一條線
就是兩個正方形之間的連線這不是件好事
因爲我的手勢可能在平面的任何地方結束
而我們事實上並沒有實際考慮到這一點
但現在我們想到了
所以我們來看一下這個小視頻
展示了我們現在是怎樣讓正方形彈回中心
並將二維矢量位置都考慮在內
你會看到在我們開始做時
會同時考慮到x和y分量
這很簡單
現在我們有了這個很好的屬性動畫
那麼如何呢？
我想要利用它實現自定義視圖控制器轉換
而且我希望它們也是可中斷的
三年前我就此做了一整場演講
所以它的確有些複雜
如果你不熟悉自定義視圖控制器轉換
請參考之前的演講
但我會快速地概述一下打個基礎
準備講解我們如何拓展這些協議
視圖控制器轉換一般是一組連鎖協議
其中兩個包括交互轉換和動畫轉換
他們是你創建對象時需要符合的協議
好吧 是你創建的對象要符合的協議
系統會創建另一個對象並傳遞給
該協議的方法
這個稍後我們會講清楚
但是要記得我們爲什麼想這麼做
假設你有一個應用程序帶導航控制器
而且pop看上去挺正常
它是個不錯的臨界阻尼彈跳動畫
但是你的應用需要點不一樣的東西
它需要的是完全不一樣的外觀
它可以爆炸式彈出或許下面還帶模糊效果
這就是自定義視圖控制器轉換讓你能做到的事情
而且它還可以讓你的編寫和驅動更有交互性
要得到這些符合協議的對象
只需要通過一個代理
它可以是導航控制器代理
也可以是視圖控制器的轉換代理
我們要問這個代理
“你是否都有符合動畫轉換的對象
可以在任何時候顯示推入或者彈出？”
如果有 我們將繞過內置轉換
我們要創建其中一個轉換context對象
它可以給你所有你需要的信息
去實現轉場動畫
我們會命令animateTransition將context傳遞給你"
那如何讓這個流程可中斷？
我們所做的是添加了新的方法叫interruptibleAnimator(using
如果要執行它你需要返回一個對象
符合UIViewImplicitlyAnimating
他可以是一個UIViewPropertyAnimator
但不是必須的
它也可以是另一種動畫
即你的執行可以根據UIKit動態或者其他動畫策略
如果你不執行交互控制器
意思是你只執行了自定義動畫控制器
那麼你需要執行animateTransition
這個十分簡單只要你用這個方法
你只要接收可中斷的animator然後返回值
然後只要給一個開始命令
這就是執行animateTransition的所有步驟了
但是我們建議你使用交互控制器
如果你想讓它變成可中斷
重申一下首要的事就是要符合
是說返回的對象要符合轉場動畫的協議
然後我們會要你提供一個符合交互轉場的對象
並且會傳遞之前返回給我們的對象
是作爲一個參數來傳遞
很多時候你希望這個交互控制器
可以真正驅動動畫控制器
若是如此 我們就不用調出animateTransition
而是調出startInteractiveTransition
傳遞的context是完全一樣
用animateTransition也是這樣
我們會提供一個具體的類你可以直接使用
這樣操作起來就十分簡單
在此之前還有一個限制
若要執行UIPercentDrivenInteractiveTransition
那麼animateTransition方法
在動畫控制器中的執行就要按照
現有的UIKit動畫應用編程接口執行
但是現在有了可中斷的animator
UIPercentDriven InteractiveTransition根本就不需要在意這個接口
只要使用UIViewImplicitlyAnimating定義的協議
就這些了
這樣你就可以真正創造一個全然不同的動畫
由UIPercentDrivenI交互轉場驅動
這是不是很酷
假設你已經有了一個這樣的動畫
也有了一個自定義轉場
如何將他們合併呢？
一種方法從表面上來講
將animateTransition方法重命名爲myAnimateTransition
再用同樣的方法創建可中斷的animator
你就只要添加這個任務方法到
animator中一個動畫上就可以了
這不難
我們的確要拓展協議中的某些對象
比如現在的context轉場中就添加了pauseInteractiveTransition
現在這就是進入交互狀態的方法
在這之前要先啓動交互並關閉非交互式
現在你就可以來回移動了
移動要通過調用pauseInteractive結束或取消也一樣
同樣isInteractive屬性以及
transitionWasCancelled就可以隨着你的前後移動
在交互和非交互中切換
我們添加了一個變量叫wantsInteractiveStart
既然已經可以前後移動
那你也許想要交互控制器從非交互式出發
此變量就控制這一行爲
最後我們更新UIPercentDriven交互轉場
這有幾點規定
如果執行InterruptibleAnimator
我們希望它能真正有用
就是說不做其他事情
系統可能會很不高興
我們會始終調用animateTransition
並最先啓動startInteractiveTransition
這樣就有很大的空間
去創建可中斷的animator因爲它將在
之後編寫中被重複調出用同樣的context
我們也希望返回值能一直是同一個
最後animator的時長可以涵蓋整個轉場時長
在整個轉場結束之前它必須處於活動狀態
現在請Mike上臺爲大家展示如何在應用程序中使用應用編程接口
沒給你留多少時間
謝謝你 Bruce
不客氣
首先來看這個演示應用
這個應用使用UIViewPropertyAnimator
和UIViewController轉場的添加函數
在基本應用中創建完美的可中斷自定義轉場
第一 應用要使用UINavigationController
並且內置有一個集合視圖控制器
這是個照片格子可以拉動瀏覽
當我們點擊其中一張照片
它會推進導航棧上其他視圖控制器
讓你的圖片視圖更加清晰具體
如果我們點擊返回鍵這個視圖就彈回導航棧
另外我們可以滑動屏幕從左向右
實現交互轉場返回
這些在UINavigationController基本都免費
就像Bruce剛纔所說我們還有很多套應用編程接口
能讓你自定義轉場
如果我們想放大照片
讓他鋪滿頁面我們也可以做到 這很酷
點擊返回鍵照片就縮小回去
這些在此之前都只是設想
另外你也可以向下拖拽
來啓動交互轉場再轉動幾下
讓整個動作以動畫方式完成
我想向你們展示的是我們如何做到這樣
通過使用UIViewPropertyAnimator
首先你做的就是告訴系統
這裏應該說是導航控制器
你要提供一個自定義轉場
那麼這裏我們就要符合導航控制器的代理
通過AssetTransitionController來實現
這是我們創建的對象可以執行這些轉場協議
這裏我們要注意兩種十分重要的方法
第一個是調出動畫控制器
通過一個特定操作推入或彈出
我們要保存該操作然後返回值給自己
因爲我們就是動畫控制器
然後當我們將對象從那個接口返回後
系統將調出一個交互控制器
在這裏我們還是返回值給自己
因爲我們也要扮演交互控制器
完成之後系統就會知道
這裏會有一個交互轉場
現在來看一下UIViewControllerInteractiveTransitioning
這裏系統會調出startInteractiveTransition
並以轉場context調出我們的對象
這會包含所有有關信息
對於我們開始自定義轉場十分必要
這裏我們將創建一個輔助對象
一會兒我們會看到更多
這個對象將會創建我們的轉場動畫
我們要將context傳遞給我們之前所保存的操作
同時也要傳給panGestureRecognizer就是之前用於啓動交互轉場的程序
IOS10允許交互轉場
分兩個進程開始動畫進程和交互進程
若從panGestureRecognizer開始
就要設initiallyInteractive變量
爲真以便系統知道
我們正在開始這個交互轉場
下面看一下動畫轉場的執行
這裏我們不太在意動畫方法
就像布魯斯提到那樣我們使用的是交互控制器
它會調出startInteractiveTransition
相對於animateTransition
但iOS10裏新的可中斷動畫接口
纔是我們真正的興趣所在
這裏是我們的輔助對象
一會兒會看到它創建了一個UIViewPropertyAnimator
並且將它的值返回了系統
所以這裏就是系統添加任何並列動畫的地方
在這個演示中你會看到頂部的導航條
跟着我們的轉場一起在動
系統會利用這個animator來添加這些動畫
現在看看轉場驅動輔助對象有多快
在此 startInteractiveTransition初始化了這個對象
這就會聯通抱歉
是這裏
這就可以聯通這個輔助方法
和一些動畫然後它會設定一些
背景動畫給這個轉場
視覺效果就是動態的
這兩個視圖控制器和alpha也是動態的
我們稍後再講圖片邊框切換
它會傳遞完成關閉指令也會幫助清理
一些背景視圖
但是這裏的重點是我們如何創建這個屬性動畫
並返回到interruptibleAnimator接口
首先我們從輔助函數中獲得一個轉場時長
我們也是過會兒再看這個
創建PropertyAnimator並選擇時長
以及easeOut曲線
我們會在收到的動畫間傳遞
並在這裏創建一個完成處理
然後調出這些傳給我們的完成命令
重要的是我們要調出
轉場context在動畫結束時
告訴系統“嘿 我們的轉場完成了”
然後到了...
抱歉
completionTransition接口有一個博爾值
讓我們可以得到應該傳遞的值
所以從這個接口傳遞“yes”
這就意味着我們要結束這個轉場
如果傳遞“no”意思就是取消轉場
在我接着講轉場動畫輔助對象之前
我想再展示這個演示應用的一些其他特點
都由UIViewPropertyAnimator實現
回到演示應用我之前展示瞭如何放大圖片
和通過點擊返回鍵縮小屏幕
但我沒有展示你可以在半空中暫停
現在我們正在動畫進程但是暫停動畫
然後進入交互進程
這樣與照片的交互就在轉場中途開始
當我們鬆開手動畫會繼續
然後可以再次中斷
這樣我們可以自由來回往返於動畫進程
和交互進程之間
這真的很炫
在返回代碼告訴你我們如何做到之前
通過用新視圖控制器接口
我想用具體的場景來幫助大家
理解這些代碼是做什麼的
假設我們正在開始
用panGestureRecognizer向下拉動視圖
從而開始一個交互式轉場
然後我們從屏幕上拿起手指
開始動畫進程在動畫播放時
我們在中途暫停然後再次回到動畫
然後取消轉場直接向上拉回
這就是我要描述的場景
對照下面這段代碼
我將這個示例應用分成了四個方法
updateInteraction是手勢識別處理
用來更新交互轉場
當擡起手指
調出endInteraction函數
然後調出動畫函數添加動畫
在開始或者結束位置
然後當我們中斷動畫
最後調出pauseAnimation
這個可以在轉場時長中多次循環
想做多少次都可以
這裏我們只做了兩次
然後是updateInteraction
這是手勢識別處理
當它調出“狀態開始”或者“狀態改變”時
我們會看到手勢識別的翻譯
我們就會用這個去計算要添加的進程步驟
把他們作爲fractionComplete添加到轉場動畫
之後要在背景中擦除這些動畫
就像chrome導航條的背景視覺效果
這個很簡單
就跟在轉場動畫裏設定fractionComplete一樣
這就可以基本免費擦除所有動畫
再調出transitionContext
來更新交互轉場percentComplete
最後我們的圖片就可以在屏幕上移動了
當處於轉場的交互進程時
我們要手動設定邊框
因此我們要做一個小的輔助函數
最後我們重新設定這個手勢識別的翻譯
當我們收到指令時手指離開屏幕
手勢識別會出現“狀態結束”然後調出endInteraction
研究endInteraction時
第一隻看我們的轉場context是否是交互的
我們要保證它是在我們離開交互進程之前完成
然後調出小輔助函數
它告訴我們這個完成是在
動畫的開始位置或者結束位置
如果在結束位置完成
調出context以表明
“嘿 交互轉場在這裏結束
我們要進入動畫進程了”
如果在開始位置完成
意思就是我們取消了這個交互進程
將要進入動畫進程
然後只要做動畫就好
現在來看動畫方法
之前我告訴你們轉場動畫轉換的是
背景chrome和alpha通道
但這裏我們要創建一個二級propertyAnimator
我們要使用它來繪製邊框動畫
讓圖片可以在屏幕上移動
我們之所以這麼做是希望有些動畫
能有不一樣的時間函數相較於背景動畫而言
一會兒就來講看這個
這裏我們要做的只是插入動畫
具體定義結束位置
或者只是定義目標或者是圖片的初始邊框
隨後開始這個屬性動畫
並實時記錄
要記住我們還有一個轉場動畫
時長與我們之前返回系統的轉場時長一樣
我們只要確保這個動畫的方向是正確的
如果我們定義一個toPosition值爲“開始”
我們需要推翻該animator
最後 如果這是第一次聯通這個動畫
轉場動畫就會處於非活動狀態
所以我們要做的就是開始這個轉場動畫
然後就進入動畫進程
另外 如果程序開始後又暫停了
我們要用不一樣的東西
調出continueAnimation
withTimingParameters和durationFactor
continueAnimation讓你可以暫停一個動畫
根據不同時間參數和不同的時長
和剩餘時長隨你喜好
這裏要傳遞“nil”
表示我們要用的時間參數
是在初始化這個轉場動畫時就已經輸入過的
但是我們需要改變後續動畫的durationFactor
這使得我們能使時長同步
讓新創建的itemFrameAnimator時長
與這個轉場動畫的剩餘時長一致
durationFactor從而定義爲
1.0等同於之前設定的初始時長
在創建轉場動畫時
這就是開始動畫進程要做的所有事情
循環的最後一步
看一下pauseAnimation
這發生在動畫進程中但是暫停了
把手指放在圖片視圖下方
然後只要設置一個手勢識別在這個示例應用中的圖片視圖
現在這都是免費的了
因爲UIViewPropertyAnimator會自動點擊測試動畫視圖
在剛剛創建的itemFrameAnimator裏
我們要完全停止這個動畫就要設參數值爲“真”
告訴系統我們不想再繼續此動畫
而且我們要直接寫模態值
應該是顯示值直接返回模式
之後回到轉場動畫調出pauseAnimation
就像updateInteraction裏看到的一樣 我們會擦除動畫
在我們與圖片互動的時候
最後我們會告訴轉場context
我們要離開動畫進程回到交互進程
我再給大家展示另一個技能和訣竅
也是這個演示應用的一個小細節
我們看到現在這個時間很慢這是出於展示的目的
但你可能想要更自然的感覺
再更生動一點
所以如果我們要更改彈跳的時間
讓它跳出頁面
而且只讓圖片跳出頁面
而這些背景動畫還是繼續
按照我們定義的easeOut曲線運行
其實我們可以實現這個變化
讓視覺更加生動只用一行代碼就可以
而且在非中斷時還可以繼續互動
那麼快速看一下這行代碼
回到演示應用
看看propertyAnimator的方便方法
注意我們正在定義一個屬性動畫
其時間參數在這裏爲線性
這也就是爲什麼感覺動畫很機械
我的一個同事留下了這個偉大的註釋
來定義某些SpringTimingParameters
並使用大規模數據 強度阻尼和初始速率
這樣就完整的定義了這個彈跳
當在創建propertyAnimator
我們正在傳遞的時長其實並不使用
而是會被計算
根據我們在彈跳時間中所提供的屬性
因此我們需要有一個動畫時長輔助函數
它只用propertyAnimator應用程序接口
就是下面這個來計算時長
基本上它就爲我們解開了這個彈跳方程
我們可以用這個去匹配轉場動畫的其他時長
這都超級簡單
這個代碼看上去是有點複雜
但也確實只要幾百行而已
UIViewPropertyAnimator使一切成爲可能
就這樣讓我們請回布魯斯
謝謝你 Mike
好的
我得講快點了時間所剩無幾
我們要來講一點點擊測試
假定UserInteractionEnabled值爲真
我們實際上就可以點擊測試我們的視圖
如果值爲“假”我們將吃掉所有觸摸事件
我們將這個屬性叫做isManualHitTestingEnabled
並定義爲“假”
默認值爲“假”的原因是
我們想能夠點擊測試我們的視圖
如果值爲“真”也就是現在的系統活動
當你要觸摸這個視圖下面的位置
就會發現我們無法點擊測試
令人迷惑的是好像只在它運動方向上開始點擊測試
我們不想要這樣的結果尤其是對可中斷的屬性動畫
在這個演講下方我想你們推薦
一個技能讓你們可以重寫點擊測試
做一些計算來繞過顯示層面
調令“super”來點擊測試一個移動視圖
這個技術依然生效
但是現在有了propertyAnimators如果你有移動視圖
默認的手動點擊測試值爲假
我們實際上就在點擊測試這個視圖
所以這很酷炫也很輕鬆
事實上 這個舞臺上我們看到的所有東西
之前都是好用的
現在出了些問題
如果你有深層的視圖層或者其他
我們就無法正確運行
這時你可能就要用其他技術可能在其他演講中有提過
好的
我們今天講了關鍵幀動畫所用的整個應用程序接口
這是UIKit現在所有的接口
如果讓它可中斷？
要重調關鍵幀動畫
作爲一個常用動畫除非你定義一個路徑
來導入你想要的動畫
我們也想讓他們變成可中斷的
事實上我們想要做的跟現在視頻上看到的是一樣的
我們要暫停它 擦除它
這應該都是意料之中
而且 你可以做到
這很簡單
使用現有的接口
封裝動畫控制器的動畫
從而你的關鍵幀動畫也是可中斷的了
我再說最後一點雖然聽上去是在撒謊
互動PopGestureRecognizers
這是內置的導航彈出視圖
現在如果你有一個交互控制器
你就無法使用這個
但是新的iOS 10裏如果你輸入一個錯誤請求
給手勢識別或者你自己
那麼內置的彈出手勢識別就可以識別了
使用內置導航轉場要與你自定義的互動一起
總的來說
我們學習瞭如何使用UIViewPropertyAnimator創建可中斷動畫
你可以用到很多全新的時間函數
你可以使用可中斷的propertyAnimators
去創建可中斷的視圖控制器轉場
更多信息請瀏覽這個網址
這裏有其他有關UIKit的演講
他們講的是動畫的其他種類其中兩個就在明天
我希望你們聽一聽 看一看
謝謝