在Instruments中使用時間分析器
早點分析 經常分析
下午好
我叫Kris Markel
我是Apple性能工具團隊的工程師
今天我們談談在Instruments中使用時間分析器
這是我們的議題
我們要從分析開始講
分析是什麼及如何使用它
然後我要演示一個示例
使應用的速度更快 工作量更少
最後 確保應用有非常棒的用戶響應
在我們開始講正題之前讓我們談談爲什麼要這樣做
原因就是我們想提供一種優秀的用戶體驗
我們想讓用戶喜歡用我們的應用
我們想讓他們喜歡用我們應用是因爲應用的速度很快
速度像獵豹一樣快
可以節省他們的時間來做更多的事
我們想確保用戶的設備一整天都有電
這樣他們一整天都能使用設備
而你的應用一定不想成爲那個
在電量消耗表上排名第一的應用
最後 我們想確保流暢的滾動
在我們的應用中有迅速響應的UI這樣用戶就會喜歡用它
我們該如何實現呢？
我們要用一種叫做分析的技術
這種分析技術回答了關於應用的兩個問題
做了多少工作？
做了什麼工作？
若你尚未注意到標題
我們要使用一種叫做時間分析器的工具來實現
時間分析器回答了另一個問題
應用什麼時候做那個工作？
時間分析器是應用中Instruments的一部分
Instruments是很多工具的集合
這些工具都是用來測定應用的各個方面的
怎麼用呢？
嗯 非常簡單
從Xcode產品菜單中選擇Profile
讓我們現在來操作一下
好的 首先 我要給你們演示一下我的應用
讓你們瞭解它的功能
我的應用使用了照片框架來查找
用戶的圖庫檢測是否有圖片副本
我現在要操作一下
如果我的測試數據中有很多副本就得等一會兒了
那麼 它給出了一個很大的數
好的 完成了
現在 我要選擇一些照片
找一張好點兒的圖 這張吧
然後應用就會使用核心圖像面部識別功能
這樣我可以給人臉上添加一雙金魚眼
然後應用就使用CoreMotion中的力學UI
當你搖動設備時金魚眼會跟着一起晃動
好的 這就是應用
讓我們繼續分析它正在做什麼
那麼從Xcode產品菜單中正如我剛說過的 選擇Profile
這將生成應用的一個發佈版本
然後開啓Instruments開始測定
生成分析用的一個發佈版本很重要
因爲你希望能從編譯器中獲得最優結果
這得等會兒
它正在把應用複製到設備上
好了
現在 Instruments開啓了
它會顯示模板選擇器
你可以瞭解Instruments都提供了哪些工具
今天 當然了我們要用時間分析器
我要點擊選擇按鈕
若你從未用過Instruments
這個用戶界面看起來可能有點兒嚇人
但是很容易上手
我要做的就是點擊左上角的這個記錄按鈕
開啓應用 並開始測定
讓我們實際操作一下
好的 那麼現在 應用開啓了
正在啓動 好了
對吧？我要做副本檢測
等一下
好的
然後 我要做副本檢測了
讓我們看看是否開始獲得數據了
好了
好的 完成了
現在 我要選擇照片
然後我要挑出一張照片
添加一雙金魚眼
搖動一下
現在不管那張圖了
然後停止記錄
點擊停止按鈕
現在我們可以看到
有一個應用正在做什麼的高級概覽
時間分析器給出了兩張圖表
Instruments的頂部是時間線視圖
第一張圖表是CPU的使用情況
就是應用使用了多少CPU
我可以把鼠標懸停在圖表上查看精確數值
第二張圖表是應用所處的生命週期
以及所延續的時間
這讓我有了一個很好的概念關於應用做了多少工作
以及是什麼時候做的
但是 我如何瞭解應用正在做什麼呢？
要了解該信息 我們要往下看Instruments的調用樹視圖
就是這個詳細視圖中的一部分
調用樹視圖呈現了所收集的通過比重合計的
調用棧樣本並顯示在詳細視圖中
這是什麼意思呢？
嗯 以圖形顯示比文字說明更顯而易見
讓我們來看一個圖表
在這裏 時間向右運動
這是我們那個非常簡單的應用
我們有一個主方法這是調用method1
這是調用method2
在這個時間點
時間分析器要從應用中獲得一個調用棧
看起來是這樣的
就跟你在Xcode中的調試器中看到的調用棧是一樣的
但在Instruments或時間分析器中 後續的每一行都會縮進
正因爲如此 才能創建一個樹結構我們一會兒就會看到了
時間在繼續
哦 然後它記錄了那個調用棧
然後記錄了在那個調用棧內
出現每個方法或函數的次數
時間繼續我們可以看到method2結束了
method1調用結束了的method3然後又調用了method2
然後我們繼續 已經過了一毫秒
時間分析器要取第二個樣本
在這個示例中 第二個樣本看起來跟第一個樣本一樣
我們要繼續 更新表
只是爲每個數增加了增量
時間還在繼續
現在我們看到應用正在做不同的事
主方法直接調用了method2然後調用了method3
時間分析器就在這兒取了另一個樣本
現在 我們看到了一個不同的調用棧
在這個示例中 只有兩個方法
然後 我們更新表這是一個樹的分支
現在我們瞭解了 主方法有時調用method1 有時調用method2
我們知道每種方法被調用了多少次
那麼 時間繼續 我們收集更多的樣本
這些樣本恰巧跟第一次的樣本完全一樣
我們要適當地更新表
現在 讓我們看看這個表說明瞭什麼
要注意一點 時間分析器實際上並不是在測定持續的時間
它並不是記錄哪個方法什麼時候開始
什麼時候結束 然後做個減法
而是把這些樣本集合到一個有用的彙總中
當你在時間分析器中查看時間值時
實際上不是一個持續時間的測定
而是樣本時間乘以樣本個數
在絕大部分情況下 是1毫秒
這的確有一些副作用
其中一個就是時間分析器並不會區分
被重複調用的是連續運行的方法
還是稍縱即逝的方法
我們實際上可以看到在調用樹中
method1和method2出現的樣本個數相同
從時間分析器的角度來說它們做了同樣多的工作
但我們知道 實際上method1被調用了兩次 運行時間很長
而method2被調用了四次運行時間很短
時間分析器還集中分析CPU的使用情況 對吧？
它回答了這個問題應用正在做什麼工作？
另一個結果是它不一定會捕捉一切
事實上 表中遺失了什麼？
沒有method3 對嗎？
如果你有執行起來非常快的函數
或執行起來很快而且非常頻繁地調用的方法
這些方法將不會出現在調用樹中
實際上沒問題這就是我們想要的
因爲那並不會影響
所產生的工作量
那麼現在 我們對調用樹有了更好的理解
讓我們看看如何通過它使應用的速度更快 工作量更少
好的 讓我們回去看時間線
我想看一下第一大塊CPU的使用情況
可以看到 在大量時間內CPU的佔用是100%
那麼 我想確切瞭解那時應用正在做什麼
我恰巧知道那時我正在做副本檢測
預計那個工作量會很大所以我一點兒都不吃驚
但無論在哪兒你佔用了大量CPU資源
通常總是能讓它更快一些
所以 爲了更好地瞭解這裏正在發生什麼
我要用觸控板 放大 然後鬆開
我可以更好地瞭解在這個時間段到底發生了什麼
然後我要點擊並拖拽時間線視圖
這樣可以應用一個篩選器
現在調用樹只能顯示在那個
時間框架內所收集樣本的數據
如果你注意看 你會看到
調用樹實際上顯示的數據變少了
只顯示了這個時間段的數據
現在 讓我們更詳細地看一下調用樹
你將在這兒看到幾個欄
有比重和自比重 然後是標識名
比重代表調用樹出現的
指定部分的樣本百分比
你將看到比重旁邊還有個時間
正如我之前講過的那不是持續時間
而是樣本時間乘以樣本個數
然後還有自比重
實際上是在那個方法內所花費的時間
而非在它調用的其他方法內所花費的時間
你在這裏可以看到 這些是0
如果你關閉這個 還是0
仍然是0
這就告訴我們 你知道的在樣本中主方法的比重是99%
但其實這些全部也是在UIApplication主方法中
無論是什麼方法都要調用UIApplication的主方法
我們不會一個接一個地顯示這些
我要使用Instruments 8中的新功能
我按下選項鍵並點擊顯示三角按鈕
這樣能得到一個更好的顯示
這將會關閉調用樹
除非調用樹中有真正令人關注的數據
如果我們繼續往下滾動
我們可以看到我們實際上有一些方法
有自比重
其實若我查看這個特定的release調用
我可以看到 它的比重是117毫秒跟它的自比重一樣
那麼它所有的時間都花在它自己身上了
沒有調用任何後續的函數或方法
其實 你知道的 通過查看這些
我看到這裏調用了很多Objective-C執行時間
實際上它們的自重都很大
這些運行時間方法已經被無限高度優化 運行起來非常快
通常是時間分析器不會捕捉的那類東西
因爲運行速度太快了
但是它們已經被顯示出來了於是我知道通常它們會被頻繁調用
所以纔在樣本中出現
這通常是循環很多Objective-C對象的情況
你將看到這會在軌跡中顯示出來
調用樹體現的第二點是看右邊
我們可以看到調用樹的哪部分來自哪個庫
特定的方法調用
並且在這裏 我們能看到這是隨着照片框架出現的
實際上是按照層級排列的
滾動到右邊
我們可以看到這裏有一行來自應用的代碼
這行代碼導致了工作量的產生
你知道的 這行的比重是0
它自己沒做任何工作
但是它卻觸發了所有工作
我不能再加快Objective-C發佈調用的速度了
但我能看到是否可以少調用幾次
所以 我要雙擊這行
把我帶入代碼中
Instruments給每行添加了一個樣本個數的註釋
那麼 看這個方法我能看到大部分時間
都花在紅色背景行那兒
但是如果我再仔細看一下我實際上能看到其他東西
我嵌套了四個循環
事實上 每個循環重複整個照片採集的過程
這是很典型的一個
叫做N次方行爲的例子
如果我向這行代碼中代入更多數據
速度會變慢 越來越慢
因爲我知道會運行大量數據這很不好
所以我想改變這種情況
我要進入Xcode
這是我的代碼
避免嵌套四個循環的典型方法是使用基於集合的實現
我不再贅述了 我要繼續
創建一個新算法用來執行副本檢測 使用...
使用一個計數集合和另一個查找副本的
集合
現在 讓我們看看我實際上做了點兒改變
再一次 我要進入產品菜單
我要選擇分析
它會重新創建我的應用並把它安裝在設備上
因爲Instruments已運行了
它會立即開始記錄
那麼 當它把應用複製到設備上時讓我們看一下 已經開始分析了
這是Instruments
我的應用已經開啓了
好的 它開始記錄了 我要縮小
好的 我要縮小這樣我們就能看到數據了
我要執行副本檢測
副本 所有照片
我可以看到數據進來了
實際上是以分鐘爲單位記錄的我還以爲是秒
好的 那麼副本檢測實際上速度更快了
事實上 我們再也不會看到貫穿時間線的那個長條了
這是個不錯的變化
我想繼續重新測定應用剩餘的部分
選擇一些照片
添加一雙金魚眼
搖動一下
然後就不用管那張照片了
現在應用是靜態的不應該做任何工作
但是讓我們看看時間分析器怎麼說
停止記錄
加載一分鐘纔有數據
哇哦
好的 我可以看到在調用的末端
佔用了一些CPU資源
並不多 但我希望是0
所以我要繼續 看看它做了什麼
我再次通過觸摸板進行放大
拖拽並選擇看看這裏發生了什麼
然後繼續點開查看正在發生什麼
查看調用樹
這次我看到在CoreMotion中有大量的調用 對吧？
且我知道我的應用正在此做什麼
它正在使用CoreMotion進行檢測並移動眼睛
但如果查看上邊的調用樹
實際上這個調用樹中沒有我的任何代碼
我並沒有執行任何可以直接引起使用CPU的操作
但我應用中的某些東西使CoreMotion做了不該做的
關於應用 我知道的是
我發現當不看屏幕的時候
我不能關閉CoreMotion監控
讓我們繼續改一下
返回Xcode
實際上我已經寫好了所有方法
只需要調用即可讓我們把它們添加到這裏來
然後我們停止觀察這兒
好的 現在讓我們測定這個
並確保會發生我們所期待的改變
再次Instruments會重建應用
並把它放在設備上
因爲Instruments已經開啓並正在運行 它會再次開始記錄
這一次 我要提前放大
我點擊篩選器外面 移除它
好的 一旦應用在設備上安裝
Instruments就會再次開啓對它的記錄
好的 就是這樣
好的 這一次 我要繼續只添加照片
然後我要滾動到一張照片那兒
選擇它
添加眼睛
搖動一下
讓我們再稍微放大點兒
選擇一張新照片這樣屏幕上就沒有眼睛了
然後停止記錄
看看是否發生了我們所期待的變化
一旦Instruments完成數據處理 我就放大這個末端部分
我可以看到在末端CPU的佔用率爲0
所以應用不再做它不需要做的工作了
那麼 讓我們回顧一下我們做了什麼
第一件事是用軌跡面板計算
應用做了多少工作以及什麼時候做的
這樣就很容易找到想要關注的區域
並且觸控板很容易操作軌跡面板或時間線
但用鼠標控制也不錯
使用option鍵-拖拽和control鍵-拖拽放大和縮小
我們在軌跡視圖上找到了一個佔用許多CPU資源的區域
我們想讓它速度更快
所以我們繼續 放大對那個區域進行篩選
我們查看了調用樹 我們發現
產生工作量的地方是應用中的那個部分
然後我們往回看調用樹直到看到我們的代碼
應用中的哪個部分產生了這樣的工作量
即使不是應用自己產生的？
我們看一下代碼 考慮一下
撓撓頭 吃一個三明治
我們發現了可使它速度更快的方式
所以我們實現了那些變更
並證實了實際上會讓它的速度變得更快
在這個例子中這是個意義重大的改進
結果是我們節省了用戶的時間
當用戶使用我的應用來查找副本時
他們再也不用看那個旋轉的加載圖標了
會很快地完成
關於減少工作量我們能做什麼呢？
我們再關注一下軌道視圖上的一個區域
這一次並沒有佔用很多CPU資源
而CPU的佔用量出人意料
我們放大 加上一個篩選器
我們看一下調用樹
這一次 我們再看一下框架我們看到的是CoreMotion
但沒有誘發我們的代碼
所以這次 我們得用另一種方式來思考我們的應用
是應用的哪個部分導致了這個工作量？
我們又一次 也許休息一小會兒再吃個三明治
想想如何使應用停止產生那個工作量
讓它不再出現
我們繼續 重新分析應用
驗證了我們所期望的修改
事實上 結果是我們顯著提高了
應用運行時的電池續航能力
無論任何時候 CPU都可以歸0並進入休眠
這就意味着有效地節省了用電量
即使我們的CPU佔用量很低仍然會有電量消耗
那麼現在 我們變快了工作量變少了
讓我們使應用的響應更積極一些吧
應用的工作方式
是主線程完成所有用戶界面的工作
承擔了響應用戶輸入並更新視圖的任務
無論如何處理用戶輸入都有一個主線程
主線程有一個運行循環只是監聽一個隊列
叫做事件隊列
並等待事件在事件隊列中出現
事件出現時 它把事件發送到UIApplication或NS應用實例
然後把事件傳遞到應用的響應鏈中
如果應用想響應那個事件
那麼它會繼續並誘發你的代碼
然後你可以在這裏的調用棧中看到這個
這是我應用中的調用棧
我們可以看到 有主線程
所有應用的主線程都是以調用主函數開始的
在這裏 我不清楚這些函數具體有什麼作用
但是顯而易見都跟運行循環相關
我看到有函數handleEventQueue
很顯然 這個函數是從事件隊列中把一個事件取出來 並進行處理
我可以看到它把事件傳給了UIApplication
然後傳到響應鏈最後傳給了我的代碼
在這個例子中這是一個按鈕的IB動作
然後我的代碼就執行了操作
那麼 這對於保持應用積極響應來說有什麼意義呢？
嗯 忙時 主線程不能處理隊列
因爲它會開始備份備份你的用戶事件
然後結果是 變得磕磕絆絆不順暢
最糟糕的情況是你的應用變得完全沒有響應
此時用戶會關閉應用也許會從設備上刪除應用
因此 釋放主線程很重要
這樣就能很快地響應用戶輸入
現在 有了這種方案
讓我們看看可以對應用做出哪些改進使它能更積極地做出響應
好了 這次我要縮小軌跡視圖
現在我想要關注的是這個CPU佔用比較多的區域
在這裏 我看到CPU的佔用率遠遠超過100%
也許可以對這裏進行優化
而我恰巧知道 這是我給圖片添加眼睛的時候
那麼我再一次使用觸控板進行放大
點擊並拖拽 加上一個過濾器
現在看一下調用樹
這次 我想特別關注主線程做了什麼
我可以看到 實際上主線程
在樣本中的出現頻率爲63% 64%
因此我就明白了 在這個時間段正在進行一些工作
但我想確切地知道做了多少工作
爲此 我要繼續 看右上角
我們可以使用不同的策略和Instruments
因此 你可以按照CPU或線程瀏覽數據
這一次 我想按照線程來看數據
實際上我可以讓它變大點兒以便查看
在左側的這裏 你可以看到應用中的所有線程
主線程在頂部
所以我可以看到主線程的CPU使用情況
在這裏 很明顯 達到了100%
在這種狀態下它絕不會響應用戶事件了
也不能處理隊列了
如果它正忙於處理應用中的工作
那麼 主線程到底在做什麼？
這一次 我要點擊右側的擴展詳細視圖
這將顯示在主線程上做了大部分工作的調用棧
因爲我的主線程是從左側選出來的
所以我在這裏滾動我可以看到這是運行循環
然後在這裏我看到了我的代碼
這是添加眼睛的代碼
然後正在做更多的添加眼睛的工作
然後這裏正在調用查找面部
所以這是應用中的面部檢測代碼
然後我們可以看到下一行調用了圖形核心
如果我在詳細視圖中點擊這個它將展開那行的調用樹
再一次推導出我的代碼
我沒必要在主線程上做面部檢測
這並不是響應用戶輸入也不是更新視圖
因此可以挪到後臺線程上去實現
那麼 這是執行面部檢測的代碼
我可以看到面部檢測完成後
它會繼續調用displayEyes方法
這裏要注意一個重點displayEyes會更新UI
因此這是主線程上的工作
所以 我需要做的是在後臺線程上執行面部檢測
切回主線程 更新UI
哦 好了
好的 謝謝
此處不應有掌聲
但我接受你們的誇獎
好了 這是在後臺實現這個功能的代碼
我要快速講一下
進入後臺的一個隊列
然後調度查找面部代碼
正如我剛說過的我們要調回主隊列
更新我們的UI
這一次在做分析時
我會按住運行按鈕 選擇分析
可以實現同樣的功能
很可能會相當快
哦 我刪除了代碼
讓我們再做一次
那麼因爲我已經實現了我只需要繼續並...
這個結果滿意嗎...
點擊分析按鈕 好了
它會創建我的應用
並在設備上安裝應用
好的 Instruments應顯示
並開始記錄我的應用了
哦 我要切回Instruments視圖
然後 讓我們縮小一下看看進來的數據
好的 很快讓我們給應用添加一些照片
然後執行眼睛檢測
好了 那麼在這裏我們能看到那個大的CPU峯值
停止記錄
現在 讓我們看看是否實現了我們所期待的變更
我要再次使用觸控板放大圖表的這個區域
點擊並拖拽時間線視圖加一個過濾器
現在 如果我們查看一下調用樹
實際上我在這裏看到主線程在樣本中的比重只有4.8%
這是個好跡象
我已經知道主線程的工作量正在減少
兩個輔助線程分擔了更多的工作量
那麼讓我們切到線程策略
在這裏 我可以看到
實際上 主線程在絕大部分時間裏是完全被釋放的
謝謝大家
讓我們返回幻燈片
談談我們剛纔做了什麼
爲了使應用更積極地做出響應
我們發現了一個區域在這個區域中CPU佔用率很高
我就放大那個區域 添加了一個過濾器 這是很常見的操作
我們做的就是
關注主線程
因爲我想確保我的應用持續地做出積極響應
我摘出主線程上的一些非UI類的工作
然後把那些工作挪到後臺線程上去實現
你很可能猜到了下一個步驟
我驗證了我所做的變更
確保應用正如我所期待的那樣
結果是我得到了更好的用戶體驗
當執行面部檢測時我的用戶界面將持續做出響應
這很棒
關於優化 有幾點建議
我們今天所做的修改相對簡單
但確實增加了應用的複雜程度
一般來說
優化範例是用簡化換取性能
關於優化
但很幸運 因爲我早在開發階段就做了分析
我並沒有等到最後才做
我現在有時間驗證應用是否運轉正常
如果我覺得必要 我可以添加額外的單元測試或UI測試
關注比較複雜的地方仍然能正常運行
在你發佈應用之前
是你能做出修改的最後機會
所以真正的收穫是它會持續地分析你的應用
尤其在你添加新功能之後
要早做分析
要不間斷地做分析
有時候可以只分析運行時間看能發現什麼
你很快就會取得重大進展
因此運行分析還是有好處的可以瞭解是否正在發生有趣的事
關於時間分析器的一些最佳範例
總的來說 你的分析
要儘可能地接近客戶要運行的東西
因此你要一直分析發佈版本
最佳範例
你不僅需要在編譯階段進行優化
還需要在你客戶要使用的發佈版本上進行優化
你要一直在設備上做分析
模擬器不能給你提供有用的數據
要在能支持的最老、最慢的設備上做分析
有一條很好的規則
如果能在較慢的設備上很好地運行
那麼 在較快的設備上一定能更好地運行
你想讓所有用戶在使用你的應用時都有非常棒的體驗
就算用的是較慢的設備也一樣
要儘可能使用大數據集合
在我的示例中 有時候用戶的相冊中有成百上千
或成千上萬張照片
分析應用如何在那種環境下運行非常重要
因此我可以確保客戶在打開應用時應用能順暢運行
那麼 總結一下
如果你希望客戶因爲應用能節約時間而愛上你的應用
有助於他們實現全天電量充沛
並且你的UI響應順暢
然後 你要做的是早做分析並經常分析
如果你想了解更多信息請看這個URL
這裏有一些相關的演講
去年我們做了一場“深度分析”的演講
有關於時間分析器的更多詳細信息 你可以瞭解一下
今年 我們做了一個名爲深度解析系統跟蹤的系列演講
講的是當時間分析器力不從心時
如何使用系統跟蹤工具
謝謝大家祝你們度過一個美好的下午