早上好
歡迎各位出席“用ReplayKit直播”
在這次演講中我們將告訴你關於
我們加入到這個框架中的所有新特性
我是Ben Harry
Apple遊戲技術組的軟件工程師
稍後你們會聽到Edwin Iskander的演講
現在我們知道人們喜歡錄製他們的遊戲
並在社交媒體上分享那些錄像
ReplayKit給我們的用戶提供這些功能
而只需要你 開發者 做很少量的工作
今天的開始
我會花幾分鐘
談談ReplayKit已提供的功能
ReplayKit提供錄製應用的音頻和視覺內容的功能
此外你可以啓用麥克風錄製
通過這樣做 你的用戶在玩遊戲時可以提供聲音說明
當用戶完成了一個錄像
他們可以在遊戲中分享錄像
通過系統共享表
ReplayKit有一個簡單API你今天會看到它
將這些功能加入你的遊戲需要少量的代碼
以後ReplayKit將產生HD質量的視頻
並且對遊戲性能的影響很小
並且從設備電池中使用最少的電量
在Apple 用戶隱私對我們很重要
所以我們實現了一些隱私保護措施
比如我們在用戶開始錄製前會顯示一個提示
用戶可以在錄製他們的遊戲前給予許可
而且
錄製會排除系統UI包括通知
所以
當你在玩遊戲時收到文字消息時
這條消息不會被錄下來
最後 ReplayKit在iOS 9中可用
這是一個ReplayKit目前的特性的列表
現在我會花一些時間
來列舉ReplayKit框架中加入的新特性
首先 我們把ReplayKit支持帶到了Apple TV
所以現在你可以錄製你的遊戲
並且直接分享它從你的tvOS遊戲中
下一個我們加入的新特性是直播
現在用戶可以廣播遊戲
實時地發送給第三方廣播服務
第三個也是最後一個特性
我們增加了錄製FaceTime攝像頭的支持
此外 我們增強了麥克風錄製API
所以當我進入ReplayKit和Apple TV之前
我會給你一個ReplayKit結構的概覽
我想向你們展示你們的應用如何
使用這個框架來和操作系統互動
來創建錄像
所以這裏我們有你的應用
你的應用通知操作系統
它什麼時候想要開始錄製
所以ReplayKit提供RPScreenRecorder類
你會告訴這個類開始錄製
這時一條消息被髮送給重播守護進程
重播守護進程會開始寫入你應用的數據
到一個電影文件
當你告訴RPScreenRecorder停止錄像
重播守護進程會結束你的電影
現在我們在系統裏有一個電影
現在這個電影需要回到你的應用
這樣用戶可以預覽他們剛完成的錄製
要這麼做
我們提供RPpreviewViewController
你在遊戲中使用這個視圖控制器
這樣用戶有一個界面來預覽
他們可以編輯和分享剛完成的視頻
就像我們剛剛看到的 我們有RPScreenRecorder類
你會用這個類來開始 停止和拋棄錄製
你還會用它來檢查是否能在這臺設備上錄像
RPScreenRecorder有一個代理屬性
當能否在設備上錄像發生改變時會通知你
它也會在因爲錯誤停止錄製時通知你
第二個類是RPPreviewController
這個視圖控制器出現在你的遊戲中
使你的用戶能夠預覽錄像
在iOS上編輯和剪接錄像
直接從遊戲裏分享錄像
這個類還有委託方法
它們會讓你知道什麼時候用戶完成了
在預覽用戶界面中完成了
這就是你要使用的
用來在iOS和tvOS上錄製和分享內容的結構和類
現在讓我來到ReplayKit和Apple TV
我會從一個演示開始
我有一個遊戲叫做狐狸
狐狸是爲2015年的 WWDC開發的它是用SceneKit開發的
你可能認出它了
因爲在我們的開發者網站上它被做爲代碼的例子
目標是在這關走動
收集這些花像我剛剛得到的這朵
我會走過這一關並收集花
這關有三朵花並且我得到了第一朵
你可以在路上選擇性的收集這些珍珠
但是我會把注意力集中在花上我得到了兩朵
我知道第三朵花在頂部的中間
在這塊石頭上
所以在此我要打開
我要打開遊戲菜單
我想要錄製它 前面有一個障礙
我上週練習了很多
所以我想要把這和我的朋友分享來向他們表明
現在大部分時間我都可以穿過這個障礙
我要開始我的錄製
這是我提過的同意提示
我會給許可
所以我現在在錄製
請注意在屏幕頂端的錄製指示器
這表明錄製正在進行
好的 我穿過了火
現在我要做的就是走到終點
來得到最後一朵花
這樣我就能結束這關
並且結束錄製
就是這些了
我要停止錄製
一旦停止了 我可以選擇
預覽或分享我剛錄製的視頻所以我要開始預覽
所以我們有一個視頻播放
我們有一個進度條可以用來向前向後跳
我要開始播放它
請注意錄製指示器不會出現在錄像中
我等會會向你們展示這是如何完成的
我有一個視頻 我對它感到滿意
所以想要分享它
我會來到這選擇分享
我們會看到一個AirDrop界面
我會拿到我的手機
我會選擇我的手機
當我在手機上接受這個文件
文件被傳輸了
一旦它在我的手機上
我可以預覽視頻
如果我想我可以編輯和剪接視頻
我可把它分享到最喜歡的社交媒體網站
這就是ReplayKit在Apple TV上看起來的樣子
我現在想花一點時間
來強調這個演示裏的4個主要重點
然後我會向你們展示代碼
和那些重點對應的代碼
讓我開始 我會有遊戲中的菜單
在這我可以開始錄製
然後我們繼續玩遊戲屏幕上會有錄製指示器
回到遊戲菜單來停止錄製
當我停止錄製時 我有不同的選項
預覽或者分享錄製的視頻
我會瀏覽它們每一個
並向你們展示相應的代碼
讓我們從開始錄製開始
當我按下開始錄製按鈕
首先我要獲得共享的RPScreeningRecorder實例
我簡單地告訴它開始錄製
一旦我在錄製我們顯示指示器視圖
像我在視頻中提到的
指示器不會包含在錄像中
這是因爲ReplayKit只會錄製應用的主窗口
所以
我會新建一個UI窗口
這個指示器視圖
創建這個指示器視圖是你的責任
這是因爲你可使它和你的遊戲樣式匹配
一個指示器視圖
我會初始化一個指示器視圖的實例
並簡單地把它做爲一個子視圖加到我創建的主窗口中
在我上面創建的窗口
現在指示器視圖出現在屏幕上
我們知道我們在錄製
當我們完成了錄製
我們按下停止錄製按鈕
再一次 我要獲得共享的RPScreenRecorder實例
現在注意我們返回預覽視圖控制器
是我早前提過的RPPreviewController類
我要隱藏我的指示器視圖
在這有一個重要的地方是保留一個引用
預覽視圖控制器的引用
因爲我們會用它來顯示下一步
用來預覽或分享視頻
最後我會設置代表
這樣我們看到我們有一個預覽控制器
但是我們有兩個界面一個用來預覽 一個用來分享
在Apple TV中我們引入了一個新的模式屬性
當我們想要預覽時我們簡單地把模式設置成預覽
然後顯示一個視圖控制器
類似的 要分享
我們有模式屬性
我們要把模式設置成分享
再一次顯示視圖控制器
現在我們會顯示AirDrop界面
在兩種情況下 當用戶完成了每個界面
我們有委託方法會被調用
預覽控制器結束
很重要的一點是它會被調用時你剛好——
你讓預覽控制器離開
因爲你的應用需要負責顯示它
最後
當你完成了錄製而且我們知道我們不再需要它
一個好的慣例是刪除錄像
現在ReplayKit會自動刪除之前的錄像
當新的錄像開始時
這是因爲一次一個應用只允許一個錄像
你也可以明確的刪除這個錄像
當你知道預覽不可用
比如 可能在這關的最後
沒有機會顯示預覽
這樣你就可以明確地刪除它
通過調用RPScreenRecorder的刪除錄像方法
在最後這幾張幻燈片中
我向你們展示了需要的代碼量
來把這些功能加入你的tvOS遊戲
我鼓勵你們都把ReplayKit添加到你們的tvOS應用中
也添加到iOS應用中如果你們還沒有這麼做
我們花點時間總結ReplayKit和Apple TV
現在有了ReplayKit和Apple TV
你可以錄製應用的音頻和視頻內容
在Apple TV中麥克風被系統保留了
所以你不能在這個平臺上提供語音說明
但是你可以允許用戶預覽視頻
而且直接在遊戲中分享視頻
如你所見 我們有一個很簡單的API
其實這和我們提供給iOS的API是相同的
現在所有提供給Apple TV的這些特性將在tvOS 10中可用
這就是ReplayKit和Apple TV
現在是時間來到我們的第二個新特性
我個人對它感到很興奮
現在請歡迎Edwin Iskandar上臺
好的謝謝大家
嘿你們好嗎？
我是Edwin Iskandar軟件工程師
在Apple的遊戲技術組
和Ben一樣我也非常高興
和你們談論我們的下一個特性
直播
有了直播
玩家可以廣播他們的遊戲到第三方服務
直接從他們的iOS或tvOS設備
這很令人興奮
因爲這第一次成爲可能
無需額外的硬件
或者第三方SDK
允許用戶利用
他們的設備的強大的FaceTime攝像頭和麥克風
來提供實時的豐富的說明
最後我們所做的一切都是安全的
保證所有的音頻和視頻都只有系統
以及廣播服務可以訪問
那麼它是怎麼工作的
我們和Flaregames一起實現了廣播功能
及他們的旗艦遊戲Olympus Rising
它現是app store中一個很棒的遊戲
它獨特的混合了策略 RPG和動作元素
現在我們有一個遊戲作爲廣播源
我們還需要廣播目標
所以我們還和Mob Crush一起工作
它是一個特別針對移動遊戲的廣播服務
所以現在我們有了一個遊戲和一個服務 我們準備好開始了
讓我們看看在運行的它們
在Olympus Rising中Flare的開發者們
實現了遊戲中的一個按鈕來開始廣播
要開始廣播 用戶點擊這個按鈕
然後顯示
他們已經在設備上安裝好的廣播服務
在這個例子中用戶安裝了Mob Crush應用
所以它出現在該列表中
在這時用戶點擊Mob Crush圖標
他們接着看到Mob Crush用來設置廣播的UI
用戶繼續添加一個標題給這個廣播
一旦完成了
他們簡單的按開始廣播按鈕
會回到遊戲並顯示一個倒計時
所以用戶可以預備
並且最後開始直播
現在他們在直播當用戶遊玩時
視頻和音頻數據會流入廣播服務
全球觀衆可以啓動Mob Crush應用
從他們的設備並且幾乎實時地觀看遊戲
在Mob Crush應用中
觀衆還可以在觀看的同時討論遊戲
更酷的是廣播者甚至可以馬上收到通知
當這發生時 當玩他們的遊戲時
就像在體育中
看一些直播的事件會有一些很特別的事
現在iOS和tvOS遊戲原生有這些功能
我們現在已經看過了整個流程
做爲一個遊戲開發者
你可能想知道怎麼在你的遊戲中實現這些？
這是分解了的玩家流程
如你所見 有很多步
初始化廣播
選擇一個廣播服務
設置這個廣播
開始和停止廣播
標明一個廣播正在進行中
上傳視頻和音頻數據到後臺服務器
這最初看起來可能讓人望而卻步
但是對遊戲開發者的好消息是
其中的三步被ReplayKit和廣播服務處理
所以讓我們看看每一步的代碼
要用程序初始化一次廣播
我們用一個新的類名叫RPBroadcastActivityViewController
且調用它的載入方法來獲得它的一個實例
然後我們簡單地顯示它就像其他UI視圖控制器一樣
會給用戶顯示一個廣播服務的列表
最終允許用戶建立廣播
在我們開始做這些前
我們還設置ActivityViewController委託方法
因爲我們想要當設置完成時收到通知
在這時 用戶可以選擇要廣播到的服務
建立廣播
一旦你完成了設置
活動視圖控制器的委託方法就被觸發
這個委託方法被另一個新類提供
RPBroadcastController
它允許我們開始廣播
但是在我們這麼做之前 我們還希望
拋棄ActivityViewController因爲是我們顯示了它
開始在遊戲中顯示倒計時
當倒計時結束
我們最終開始廣播通過調用開始廣播
在新的RPBroadcastController被傳入的實例
現在我們在直播了
因爲我們在直播
我們需要清楚地向用戶指明這點
Olympus Rising在這點上做得很好
通過給廣播按鈕加動畫效果
因爲這個遊戲有很複雜的操作
他們重用按鈕UI來指示正在進行的廣播
來最大化可用的屏幕空間
一些需要注意的事是指示器是廣播過程中嚴格要求的
會在應用審覈時強制實行
在你把它加入遊戲前
所以用程序檢查是否在進行廣播
簡單地查詢broadcastController的isBroadcasting屬性
你可以使用這個屬性的值
來開始或停止你的指示UI動畫
要允許用戶結束廣播Flare的開發者實現了
一個彈出式UI來顯示一個包含停止按鈕的子菜單
當用戶按下停止按鈕
我們簡單地在控制器上調用結束廣播
當廣播結束時 我們更新UI
現在我們覆蓋了基本的流程
讓我們看看更多細節 比如錯誤處理
因爲這個功能有很多部分
有可能事情出錯
所以優美的處理它很重要
讓我們看看在廣播中我們怎麼做
要處理錯誤 簡單地在廣播控制器中設置代表
一旦設定好 你的代表會有它的didFinishWithError方法
當錯誤發生時被調用
當這被觸發時
你應該讓用戶知道它並且對UI做任何需要的更新
現在另一個細節要考慮是當用戶把應用放入後臺
或者應用在廣播過程中被打斷了
比如說接到來電
應用進入後臺
ReplayKit會自動暫停廣播
在這個例子中 當應用
被重新激活並回到前臺
我們提示用戶並詢問他們是否想要繼續廣播
如果用戶想要繼續
調用繼續廣播的方法
如果他們不想繼續調用結束廣播的方法
這樣就行了
對這整個流程 遊戲開發者需要
和兩個類及它們的代表互動
RPBroadcastActivityViewController代表廣播服務
允許用戶建立一個廣播
RPBroadcastController用來開始暫停 繼續和結束一個廣播
如你所見 把廣播添加到你的遊戲中不能更容易了
我催促你這麼做 因爲好處很大
沒有更好的方法來傳播口碑
增加玩家的參與
甚至圍繞你的遊戲創建一個社區
所以這些覆蓋了遊戲的實現
但是關於玩家廣播去的那些廣播服務呢？
比如Mob Crush？
讓我們花點時間簡短地談談這些服務的職責是什麼
對所有在座及在網上觀看的開發者們
我想使它很清楚
在下一部分討論的話題
不是你要負責在你的遊戲中實現的
讓我們回到那個流程圖
我們看到玩家有責任開始一次廣播
並控制什麼時候開始和結束廣播
我們還看到用來選擇廣播的UI是
ReplayKit的BroadcastActivityViewController負責
這留給我們兩個任務
建立廣播
上傳視頻和音頻數據給後臺服務器
使廣播服務能完成它們的步驟
我們引入了一對新的應用擴展
特別針對這個功能
一個UI擴展允許用戶建立一個廣播
一個非UI擴展爲了處理
和上傳音頻和視頻數據
對那些不熟悉擴展的人
它們會嵌入你的母應用並且是一種方法
來擴展你的應用這樣你可以和別的應用一起運行
它們在一個來自你的母應用的一個分開的進程中運行
但是可以和你的母應用共享數據
可以很方便地用來共享東西比如授權數據
一件要記住的事
是和應用相比擴展的資源受限
所以避免在它們中進行需要大量資源的任務
我們使得通過Xcode模板來建立這些擴展變得難以置信的容易
這些是iOS和tvOS中新的目標
如果從這些模板中創建擴展將會預先設置好
所以他們會出現在廣播活動控制列表中 你看到的那個
讓我們看看這兩個新擴展
一個廣播服務需要實現
從廣播UI擴展開始
UI擴展有一些關鍵職責
它負責授權用戶
並且提供註冊如果用戶還沒有註冊
理想地 這些都應該在擴展中完成
這樣用戶體驗就沒有被打斷
但是完全可以接受
和母應用連接
只要用戶有辦法回到遊戲
在註冊過程中要求顯示給用戶
使用這個服務的條款和條件
並且可以接受或拒絕這些條款和條件
我們早前看到
UI擴展負責允許用戶
設置他們的廣播比如添加標題
它還允許用戶
通過社交媒體通知其他人廣播將要開始
其最終職責是通知ReplayKit
以及最終這個遊戲
廣播已經完成設置
現在我們看過了UI擴展讓我們轉到上傳擴展
它負責接收和處理視頻和音頻數據
並且上傳數據給後端服務器
我們知道有很多實現
關於數據處理和上傳到直播流
所以我不會進入到
這個會話中的特定實現
反而
如果你是廣播服務
請聯繫我們 這樣我們可以直接和你合作
這樣我們可以實現一個方案
將最好的體驗帶給我們的客戶
回到我們的流程圖
我們看過了廣播的建立和上傳
我們已經看過了整個廣播流程
而且我們清楚地劃分了職責給遊戲
ReplayKit和廣播服務
這就是直播的全部內容
我們真的覺得這是一個改變遊戲規則的功能
你的玩家會愛上它
對開發者 這會帶來一個新方式
爲你的粉絲體驗你的遊戲不僅僅是玩它們
還可以觀看它們
在我們結束前
我想要以我們對API做的一些增強做爲結尾
關於iOS上的註釋
也就是支持前置攝像頭
和新的麥克風功能
首先 我們加入了FaceTime攝像頭支持
使你可以方便添加picture in picture
視頻註釋到你的遊戲中
玩家的反應是無價的
永遠把這種獨特的風味添加到錄像和廣播中
要在Olympus Rising中啓用它
Flare開發者添加了一個按鈕
在彈出菜單中切換攝像頭
按這個按鈕啓用攝像頭
在左上角顯示一個預覽
讓我們看看他們做到這使用的API
要打開攝像頭
我們簡單地設置IsCameraEnabled屬性爲真 在RPScreenRecorder中
這打開攝像頭硬件
並彈出一個新的RPScreenRecorder
叫做CameraPreviewView是UIView的一個子類
因爲它是UIView
可簡單把它做爲一個子視圖加到遊戲視圖中
並且可以自由的給它設定位置來避免妨礙遊戲
你還可以附加一個調整或識別它
來允許你手動調整它的位置如果你想的話
來看看這的代碼
我們設置IsCameraEnabled屬性爲
真 在錄製廣播時
然後我們獲得一個CameraPreviewView實例
然後設置它的幾何來給它定位
然後簡單地把它作爲子視圖添加到你的遊戲視圖
所以現在我們有了視頻註釋我們還想要添加音頻
麥克風錄製被包括在了去年的iOS 9中
但是現在我們要添加在錄製時靜音的功能
我們知道廣播者
總是有一些有趣的事想說但是有時他們要休息一下
Olympus Rising使得這變得簡單 通過包括
麥克風切換在他們的彈出菜單中
實現麥克風的切換不能更簡單了
已有的IsMicrophoneEnabled屬性
RPScreenRecorder中可以被設爲真
如果你想要啓用麥克風或爲假如果你想將它靜音
這可以在廣播或錄製會話中進行
本場演講到此結束我希望你們喜歡
有了強大的新廣播功能和新的對Apple TV的支持
我們等不及去玩
和觀看你的遊戲直播在iOS和tvOS上
想要了解更多信息請瀏覽屏幕上的網址
在這週中 確保觀看
我們的其他遊戲技術演講
GameplayKit SpriteKit和Game Center中的新特性
好的 我要說的就這麼多
謝謝參加這次演講
希望你們喜歡這周接下來的 WWDC
謝謝