優化應用的網頁內容
大家好
歡迎來到“優化應用的網頁內容”
我是Jonathan Davis
網絡技術的推廣人負責Safari和WebKit
現在我要先說明一些事情
很多人說我長得像Edward Snowden
但我向你保證 我不是他
但這麼多衛星在頭頂盤旋大概都是來抓我們的
除此之外 我很激動地要展示些新東西
它們可以幫助你提升應用網頁內容的性能
我們一直都知道
性能是提供最佳用戶體驗的關鍵
若你是個應用開發者並在應用裏用了WebViews和JSContext
而且你很關心性能那你就來對地方了
說到性能
在當今時代裏性能其實就是指電池壽命
我認爲電池壽命是最終的有限資源
它帶來很不同的結果如果你能撥出最後一通電話
或者發出最後一份重要的文件在電池耗光之前
性能對用戶來說事關重大
他們所選擇的應用不會讓設備變慢
而且耗電量低
我們的經驗就是根據用戶的反饋和各自的體會
性能很重要因爲電池壽命事關重大
所以今年我們致力於提供更好的工具
來找到和修復網頁內容的性能問題
現在我們爲應用提供了工具比如Swift
還有Objective-C代碼比如Instruments
我們還提供了網絡檢查器幫助網頁開發者創建網頁和網站
但不要覺得因爲你選擇了
在應用中用網絡技術就沒有其他工具可用了
實際上我今天展示給你的所有工具
就是開發給人們既能幫助他們建設網站
也能讓他們在應用裏用網絡技術
那麼我首先要向你展示
如何把網絡檢查器連接到JSContext的WebViews
這樣在你需要它的時候它就會立刻出現
之後你會瞭解一些新的功能
它們能讓你瞭解JavaScript代碼如何分配時間
以及這些新功能如何幫你迅速找到性能上的問題
如果你想要看到網絡內容的內存使用情況
我們也給網絡檢查器增添了新的時間線我都已等不及想展示了
它們會幫你節省很多時間來找到內存過大的問題
準備好了？那就開始吧
第一件我們要做的事
是把網絡檢查器連接到應用裏
在應用裏使用網絡技術有很多原因
如JS context裏的一些JavaScript模塊
可以讓你輕鬆交換邏輯並無編譯地添加新的模塊
可能有些人正在tvOS應用裏使用TVML的 JSContext
另外一個使用網絡技術的原因就是你要顯示的網頁內容
比如第三方網站的一個網頁
這個網站你不能控制
可能就要用到Safari視圖控制器
如果不是你也許可以去聽聽
去年的演講“介紹Safari視圖控制器”
但如果你顯示的內容是你自己的或者你可以控制的
或是可自定義的HTML CSS或JavaScript編寫的內容
或者是可以提升應用體驗的內容
WKWebView是最好的選擇
它實際上是個矩形把網頁內容拉入應用
它引入了iOS 8和OS 10 Yosemite
若你還在使用WebView或者UIWebView
那你一定要考慮升級到WKWebView
事實上 升級到WKWebView可以讓你利用
Nitro JavaScript核心引擎和四級JIT編譯器
這能大大提升速度
若想了解更多WKWebView信息
我推薦2014年的演講介紹了現代化的WebKit API
那麼去年我們給WKWebView添加了很多優秀的功能
比如 加載文件URL和自定義用戶代理字符串還有WK網站數據存儲API
現今有了iOS 10和macOS Sierra我們改進了3D-touch支持
現在你的應用就可以執行這些好用的
Peek和Pop事件在WKWebView裏
就像我之前說的因爲你選了
在應用裏應用網絡技術
並不意味着你沒有工具可用
不論哪種情況你可連接網絡檢查器
發掘網頁內容或JavaScript活動情況
但使用網絡檢查器前你必須要激活develop菜單
只要上傳Safari設置然後找到“高級”標籤
然後在底部你會看到這個複選框
寫着在菜單欄顯示Develop菜單
那就點擊它
Develop菜單就會出現在Safari的菜單欄裏
爲讓網絡檢查器連接到iOS設備
你要開啓一個設置
在iOS的設置應用裏點擊Safari
然後拉到底部 點擊“高級”然後把檢查器設置打開
現在你就可以把設備連到Mac上
在Safari裏檢查Develop菜單
Develop菜單裏有些很酷炫的東西
你之前可能從未注意到過
就是你能看到設備的列表
這裏有已連接的iPhoneMacBook Pro和模擬器
要連接一個設備並開始使用這些工具
進行調試那麼只要選擇Device菜單
就會收到 當前設備上運行的WebViews和JSContexts 的列表
這裏的Mac應用並沒有使用WebKit
而用JavaScript
所以我可以直接連接它並使用工具
iOS裏的應用只會出現在用Xcode創建和運行的時候
但是說到Mac應用你還要做一件事
就是保持應用的完整性我們不會讓任何人下載你的應用
並用網絡檢查器巡查你的應用
所以你要添加這個授權
到應用本地開發的授權文件裏
你可能已經有了一個授權文件
如果沒有創建一個也很簡單
你只要創建新的plist拓展名爲.entitlements
並且Xcode的創建設置裏定義一個代碼簽名的授權傳遞路徑
這個要在開發的時候添加
之後在運行應用的時候刪除
一旦有了這個授權
你的設備和應用就出現在Develop菜單
這樣就可以連接了
輕鬆把網絡檢查器連接到JSContext和WebViews上了
我們已正常運行了網絡檢查器和應用
該談談網絡檢查器裏新功能了
我想首先講講分析JavaScript代碼
分析JavaScript
JavaScript的分析器已經存在挺長時間了
今年它變得更好
更有效率能幫助你迅速找到
哪裏調出的JavaScript成本最高
原因很簡單
新的分析器採用了取樣技術不會影響性能
比以前好太多
我們的分析器在編譯器能用之前的時代
實際是個翻譯器
但是現在我們有了這個強大的四級JIT編譯器
那麼這個分析器就真正成爲樣本分析器
樣本分析器告訴你代碼把時間都用在哪裏
幫你解答哪個代碼佔用的時間最多？
它在運行程序中的取樣以每毫秒爲單位
並且短暫地停頓執行
並快照所有正在運行的代碼
它還可以取樣
在代碼運行於JIT編譯器所有四級的時候
所以它的取樣速度跟你代碼的實際速度差不多
由於斷點處理會導致代碼去優化
我們暫時不管它們
那麼當你分析的時候你就可以瞭解網頁應用的真實性能
使用樣本分析器對性能幾乎沒有損害
這就意味着當你分析代碼的時候
速度高達以前的30倍
這就讓代碼分析過程更快也更簡單
而且收到的數據也更準確
這個進步真令人振奮 因爲我們團隊和網絡檢查器團隊
能利用它來發現可以提升速度的地方
就在網絡檢查器本身
好了現在我們有了樣本分析器
看看如何利用網絡檢查器幫我們找到問題
這個內容很多但是可以簡單的拆分開來
更方便的是這都是你已經熟悉的代碼
當我們說到分析JavaScript時
意思是在Events裏爲JavaScript記錄時間線
這就是Events視圖
顯示了一列單獨而且具體的JavaScript事件
特別的是這裏都是D3庫的代碼
所以它能更方便調試代碼
和分析代碼在你正在使用的庫裏
而且這裏的每一條都是代碼運行的事件
這是代碼進出JavaScript核心引擎的情況
包括了監聽事件的回調
比如動畫框架的條目是在請求動畫框架處理器
腳本評估條目顯示JavaScript文件
的上傳和首次評估
這裏還有一些時間信息
告訴你運行的代碼所花費的時間
所以如果有哪個超過了10或15毫秒
你就快要打破
60幀每秒的流暢性能底線
Events視圖很有用但是還有另一個視圖
是我們爲你添加的叫做Call Trees視圖
如果你用過其他分析工具那麼對這個應該很熟悉
只要點擊這個菜單然後轉換到Call Trees視圖
現在顯示了調用堆棧裏函數的累計運行時間
這個叫做Top Down視圖
你可以用它深入發掘Call Tree
來找到耗費大量時間的熱函數
但我最喜歡的視圖是Bottom Up視圖
它能直接讓我找到最熱的函數
就是取樣最頻繁的函數
這裏羅列的是調出的函數
按照用時從大到小分類
它反轉了Call Tree讓你能直接對比各個函數的耗時
你能準確地看到耗時最多的地方
你可以展開這一條並按照路徑返回
找到耗時最多的函數
你就能知道這個成本最高的代碼是何時何地調出的
那麼關於這部分有請我的同事
Brian Burg上臺爲大家展示
謝謝你 Jon樣本分析器很好用
因爲它可以提取十分複雜的內容
並進行分析讓你看到十分精確的信息
而且你可以讓它跑的更快
爲了給你們展示我要用我製作的iPad應用
叫做衛星跟蹤器在這裏看看
衛星跟蹤器會展示給你現在或任何時間
衛星所在的位置
你可以選擇地球上的不同地點
也可以選擇不同的衛星
不同的時區
這很棒吧
如果你擔心頭上盤旋的衛星
要帶個錫紙帽子以防萬一這個應用就是理想之選
但是這裏有個小問題
如果很多衛星或者很多衛星組件
像這樣擠爆了那麼幀率的波動會很大
這肯定不是60幀每秒
它會一直波動
這樣就可以用樣本分析器來查找
發生了什麼爲什麼這麼慢
我們要做的就是打開Safari並進入Develop菜單
找到這裏的iPad並連接上
那麼我要做的第一件事就是進入Frames視圖
看看現在的位置幀率如何
那麼開始記錄
我再轉回iPad
做點什麼
比如轉動一下
或者換一個衛星
換個時區
好了現在回去看看
好的把這個縮小
所有的性能就都顯示在這裏了
有的時候是60幀每秒像左邊這些
在中間則上下都有
因爲我們在更改視圖
這一些就太慢了
我想知道出了什麼問題
那麼我就轉到Events視圖
點擊JavaScript和Events時間線
重點看看樣本分析器的數據
就像Jon之前演示的那樣這裏的Events視圖
會顯示所有運行循環裏的內容
這個例子裏就是動畫和模擬
就是我們在不斷地渲染幀
這不是很有用因爲無法找到耗時最多的地方
那麼我們轉到Call Trees視圖
這裏我們看到Top DownCall Tree
集合顯示了所有的渲染幀
都是最耗時的地方
展開這個就能看到D3有一個Timer函數
它調出一些代碼畫了一些場景
這些場景包括衛星
和時間等
這個很棒能讓我們瞭解代碼在做什麼
但是如果要想找出哪個函數最耗費
最好還是去看Bottom Up視圖
這裏我們列出了所有函數無論誰調用它們
我們看到這個fillText
和tangent是最耗費的兩個
那爲什麼會調出tangent呢？
我們展開這一行看看調令來源
就在這裏是_plotSatellites
好像正在計算轉換用來繪製地球
好的這些看着都很正常
也許我該找出數學課本讓它算得快一點
現在看看fillText
換個畫面回到這裏的應用
我們正在當前時間上繪製文本也在每個數據點上繪製
這說得通
但是如果仔細看我們實際上把這個時間畫了兩次
這就有點奇怪
所以我們展開這一行
就能看到調令來自哪裏
這裏我們好像一次畫了兩個不同的前景
這大概不是我們想要的
那麼來找找哪兒出了問題
如果像這樣畫了兩個前景
那麼我們的工作量實際就是所需的兩倍
爲了讓你的記憶更清晰記住我們有個平面地圖
然後有這個地球它在轉動
那麼現在回到代碼
找一找是什麼控制着兩個地圖的切換
估計哪裏弄錯了
改變地點的時候我們會讓兩個地球互換
這是 updateLocation
好的 因爲已經有一個地圖就不再需要另一個
這是有道理的因爲這裏我們添加了隱藏類
就爲了不讓它顯示出來
這裏在_globeMap我們定義running值爲真
在整個運行中
而且在place中聲明我們顯示的不是_globeProjection
這是對的
當我們顯示平面地圖
我們不會顯示地球它也不會運行
這個平面地圖看上去好像
一直在運行UI也在運行
這也挺奇怪的
那麼我們回到地圖試着做點兒什麼
這裏我們選擇這個數據組
然後進入Earth
它的幀率要好於只做世界地圖
那麼這就很有道理
我想我們在世界地圖活動的時候畫了兩張地圖
但是在平面地圖的時候只畫了一個
那麼我們就在這裏改變這個條件
糟糕應該反過來
好的 先停下看看有沒有修復
回到iPad
好的這看上去很流暢
來到這裏
恩 很好
看上去不錯
那麼我們再去檢查時間渲染
看看是不是60幀每秒
那麼回到Frames視圖
然後開始記錄很不錯
我轉動地球的時候有點慢
但穩定度看上去...
不錯絕對在60幀每秒以下
在這裏有一個條只要低於它就是好的
現在衛星跟蹤器快了很多
我們就知道什麼時候帶上帽子
這很棒
這就是個簡單的例子關於如何使用樣本分析器
來發現最繁忙的內容並讓它運行的更快
下面Jon會跟大家講講內存和分配
謝謝 Brian
你看到了分析很迅速
它能讓你瞭解代碼的真實速度
這樣你就能獲得十分精確的數據
再看看JavaScript和Events時間線
並用它們找到緩慢的回調處理器和定時器
或者在Events視圖裏緩慢的腳本初始化
請用新的Call Trees視圖來瞭解耗時
因爲它們會沿着你選擇的時間線堆積起來
記着Bottom Up是你的新朋友
它能幫助你找到最需要優化的地方
那麼現在我們已經看過了新的樣本分析器
和新的JavaScriptCall Trees視圖
我很激動能用更好的工具來優化CPU時間
這樣就能給用戶快速的體驗
並幫他們節省了電池
這真的不錯現在我們繼續
看看性能的另一方面
就是了解內存都去哪兒了
你肯定想更有效率地使用網頁內容的內存
因爲這是有限資源
有效地使用內存可以優化網頁內容的比例
並能處理大型數據組
而且內存佔用過多會降低性能我們並不想這樣
它也會讓你的網頁內容崩潰
這更非我們所願
好消息是若你運行WKWebView它會以單獨的進程運行
不會讓整個應用崩潰
但是這仍然不是一個好的用戶體驗
爲了幫你解決這些問題我們添加了兩個新時間線
給網絡檢查器和Safari 10
當啓動新網絡檢查器新時間線就默認關閉
所以要打開它們
你只要點擊Edit就在時間線上面
就可以配置自己想看的時間線
這樣就可以只研究自己想用的那個
就和Instruments應用一樣
只要開啓新的時間線就可以記錄新的時間線了
但你可能不想讓它們同時運行
JavaScript和Events時間線樣本分析器
雖然負載較少但還是有
而JavaScript Allocation的時間線會添加更多進程
在垃圾回收過程中這會影響性能
那我們就一直開着Memory時間線
那麼在記錄一個時間線的時候你會看到這個
這個新的Memory時間線圖表顯示了內存如何分配
到不同的目錄裏在不同的時間
這裏有一系列圖表
幫你瞭解內存的使用和劃分
Breakdown表顯示了內存如何分配給
JavaScript和圖畫和構成頁面的分層
以及其他引擎相關的網頁
Max Comparison圖幫你研究內存高峯
這裏有一個高的水印
幫你觀察過去的內存問題
你甚至可以分離各個峯通過選擇一個特定的部分
或者在一個峯值周圍選擇一個特定的時間段
然後你就可以使用下面的目錄分類
來看看是什麼造成了大部分高峯
這裏的每個圖表都是獨立測量的
所以你可以清楚地看到不同時間的變化
JavaScript裏的峯值顯示的是
大量新對象被創建和引用的地方
其中包括的對象有字符串對象和函數
以及所有支持它們的引擎數據比如結構數據和編譯代碼
當你看到JavaScript的用量下降
就是說垃圾回收在回收內存
圖片顯示了分配給圖片的內存
這些圖片都通過解碼顯示
這裏的圖片數據比較大
通常用於可以在視口顯示的圖片
層顯示的是圖層內存
分配在WebKitstileGrid複合層
和其他引擎層
頁面就囊括了所有其他的東西
引擎所追蹤的所有內容
比如DOM和頁面風格以及字體渲染數據
內存緩存和系統分配
所以這個分類能讓你很好的保證
內存用量符合你的預期
若你有很多JavaScript內容你要明白
JavaScript會是分類圖表裏用量最多的一類
在時間線圖表裏你可能會隨着時間看到更多變化
但是對於多圖片的頁面比如畫廊
那麼分層和圖片目錄就可能是最大的
隨着時間變化也更多
這就是Safari 10裏最新的Memory時間線
Memory時間線的補充就是新的JavaScript Allocations時間線
你不僅能看到不同時間裏內存的變化
還能更細的探究
JavaScript Allocations的真實情況
對此我們有個強大的工具JavaScript Allocation Snapshots
快照的強大之處
是你可在JavaScripts堆裏對一個時刻進行快照
然後你就可以深入看到所有被分配的東西
但是更強大的是你有兩個快照的時候
你就可以回頭再看並進行對比
對比快照是我們最強大的工具之一
它可以解答我是不是做了不必要的分配？
一定要利用它因爲你需要多個快照
這也就是爲什麼默認每10秒照一次
不僅要在記錄開始還要在結束
快照是在時間線上設計的所以它們能連到
其他時間線上發生的事情
在這裏其他的都被我關了
這些快照在下面列出並附了一些細節
比如堆的時間和大小
要了解一個特定的問題
就通常需要在開始和結束的時候快照
圍繞你認爲內存會出問題的地方
這裏有三個技巧
你可以依賴自動快照每10秒一次
或者可以親自快照就按快照鍵
或者用代碼執行
最簡單的找到問題的方法還是改代碼
調出takeHeapSnapshot API
傳遞一個自定義的標籤參數它可以是任何
之後能幫你識別它的東西
還有你要做一對快照
在你認爲導致問題的代碼的前後
你還可以通過快照來使用這個代碼
在一個循環內的工作之間
分析內存
下面講講要時刻牢記的幾點關於takeHeapSnapshot API
要記住快照會增添一些額外的進程在垃圾回收進程中
這會影響性能所以你一定要注意
你的代碼是否頻繁的發射快照
你也要捕捉到前後不同的信息
當代碼在一個循環之間的某個時刻運行時
不要留下這個
如果你把它留下對大部分用戶來說沒問題
但一旦有人運行網絡檢查器它們就會使用所有的快照
你大概也不想這樣
所以要記住在啓動前一定把它們刪除
那麼這些快照都顯示了什麼？
讓我們來看一看
你只要點擊時間線上的快照圖標
或者在快照列表條目裏點擊Arrow按鍵
你看到的這一列對象都是之前分配在堆裏的
快照有兩個視圖
這是Instances視圖
展示了堆裏的對象列表按照類來分組
另一個是對象圖像視圖
這實際上概括了所有東西
所有的所有
如果你很熟悉這個代碼
它就能很好地幫助你確認事情或者找到相應的位置
但是實際上更有用的視圖
是在Instances視圖裏
它的強大在於你可以輕鬆地找到對象
不論他們在屬性路徑裏藏得多深
這裏的Count可以幫你意識到潛在的問題
就是它們無法達到預期的時候
比如我能否實現4000多個字符串對象？
你可以展開這個Classes來看看所有分配到這裏的對象
然後判斷什麼是什麼通過這麼多不同的線索
Class是一線索
另外就是對象的實際屬性
這能讓我們很快了解什麼是什麼
但是最簡單的瞭解對象的方法
就是懸停在這個對象識別器上你就會看到這個
這裏實際上顯示的是到對象的最短路徑
它告訴了你究竟是什麼讓這個對象保持活動
它基本上總會給你你需要的答案
特別是在JavaScript的垃圾回收裏
這就是能立刻解開疑惑的方法
但是它最重要的功能和最關鍵的要點
在於它能比較兩個快照
看看這個當你已經收集了一些快照
只要點擊此處“比較快照”按鍵
然後選擇Baseline快照再選一個對比
一下子
你就有了一個新的對比快照可以研究
這個十分有意義
因爲現在只能看到新的對象
在兩個點之間在兩個快照之間
展開對象類分組可以看到所有的對象分配
預覽中顯示了它們的名字和類似遙測數據的東西
這裏就說明它是衛星對象
這裏的彈窗顯示_Satellites Array屬性
由於這是一個快照對比
衛星的對象都是新分配的
這是個很重要的線索顯示代碼在做什麼
那麼爲了讓你們實際看到這些新的存儲功能
我要有請Brian回到臺上來做另一個演示
謝謝 Jon
我把衛星跟蹤器給了我的朋友Ed
他熬了一夜在玩這個
他很開心因爲他從來沒有被衛星跟蹤過
但是這就有個問題
它運行時間越長最終會變得越來越慢
這在我看來很像傳統的內存
打開時間越久就越慢
我想在衛星跟蹤器裏用這些新存儲工具來看看
我們是否泄漏了一些內存
那麼第一件事
我的iPad在這兒
我要回到網絡檢查器...
並且檢查這個應用
我要做的第一件事
在我不知道問題在哪兒的時候就是要使用Memory時間線
它會告訴我頁面上大概發生了什麼
那麼我們開始記錄
轉回來
我在兩個衛星之間來回切換
也許我會在這裏添加一些效果
好的我在來回切換
好了現在去時間線看看
在時間線概覽中你看到一個堆積線形圖
顯示了所有不同的部分和相關的大小
如果你點擊這裏會看到更多的細節
那麼這個頁面上沒有圖片
都是畫布
分層也很平面
頁面有些波動有些內容在垃圾回收
沒有問題
如果你仔細看看JavaScript你會看到...
雖然有些東西被垃圾回收
但是整體來說它還是在隨着時間堆積
如果我們運行一整晚那估計會堆積更多
下一步就是啓用heap快照或allocation快照
這樣我們就能找到隨着時間而分配的內容
爲了實現這個我們要開始新的記錄
這有個快捷鍵Shift 點擊或Shift 空格
這樣就會啓動新的記錄而不是繼續之前那個
等等我忘了改時間線
去掉Memory
選上Allocations
好了開始記錄
回到iPad
添加了小小的takeHeapSnapshot鍵
我已給控制檯添加了一些takeHeapSnapshot的調令
用於切換兩個衛星小組和其他操作
對這個記錄我要轉動地圖
然後不斷在兩個衛星中切換
我們還要看看Spy Satellites看上去也有關聯
好了 你會發現開始有點卡了
因爲我們給JavaScript堆裏的所有東西拍了快照
因此產生了很多對象
這會大幅降低應用的速度
所以一定不要拍很多快照
只在重要的時候拍
這裏你可以看到方塊裏的S就是我們拍的快照
放大一下能看到
隨着時間過去內存十分穩定的增長
當我們開始在兩個衛星之間切換的時候
如果我們要研究這個像Jon說的那樣
我們就要啓動對比來看看是什麼被攔住了
那麼我們就對比快照9和11
立刻我們就看到很多東西
被分配在9和11之間並且仍然在活動中
這就清楚地說明瞭它們被留存了
雖然我們並不想這麼做
那麼我們來看看這些都是什麼
這是些陣列
看上去這個陣列裏全是座標
你知道在應用的不同部分我們會用大量的座標
但是如果我們停在這裏就會看到它的路徑
它們好像是被保存於trajectoryHistory
這是我們用來製作追蹤衛星的東西
好的這樣不錯
但是我想不應該
再在已不顯示的衛星裏用trajectoryHistory
這好像是個bug
我們也分配了一些對象
但奇怪的是在快照9和11之間
我們之前已經看到這些衛星
那麼我就不想再給每個衛星創建新的對象
我們只要直接使用它們只要我們已經爲他們獲取了資源
然後這裏有了很多座標和遙測
好像正在重新解析什麼
我不太確定那麼...
在這個視圖裏我們有很多對象
你不能讀取所有
所以我想做的就是找出很特別的那一個
那麼在這個快照裏
我們有很多字符串陣列和對象
但只有一個Promise
它停留在兩個快照之間
所以我認爲應該調試這個
那麼我就找到代碼看看是哪裏在用Promises
因爲好像它與別的什麼一起被泄露了
於是搜索Promise
好了 這是D3庫這是使用它的代碼
好的來看看這個
好了 在［聽不清］裏我們常常在衛星之間切換
代碼是loadDataset
有人寫了評論太好了
這裏看上去好像有人請求我們改變衛星
那麼這裏就可以異步從URL下載數據
當它返回我們就要解析
然後使用衛星繪圖庫 做更多的解析
然後我們把它存到衛星列表上
這都很不錯但是回到檢查器
我們好像每次都泄露該Promise
如果你更仔細的想想
如果切換到已經下載的數據組會怎樣？
我們甚至都沒有檢查過這個事情
你仔細的看看這裏
每次在兩個衛星之間轉換
我們就發出一個新的網絡請求
如果我們進入這個時間線
就會看到我們在不斷請求同樣的垃圾數據
這是正常的如果回到代碼 發出請求
解析的時候會產生大量的對象
然後我們把它推入衛星陣列
就目前來看它怎麼都不清楚
我們好像一直在做無用功然後不斷泄露
所以這裏我們要做的
是檢查我們是否已經解析了這個衛星對象
因爲這是Promise
如果它確實存在我們可以調出.then
由於這已解決下一次評估Promise的反應時
它就會進行檢查並將衛星放到地圖上
那麼在這裏添加代碼
如果不存在我們就創建一個
好了 現在停下來看看有沒有效果
我們就要回去重新連接
這是我們的應用開始記錄吧
當我們回到應用我就打開快照
打開一些效果
然後往南走
好的 間諜衛星
衛星的科學實驗
科學實驗
好了
如果我們回到這裏我們看到內存的增長大大降低
大概在1兆而不是四五兆
那麼這裏可能有更多的泄露
但是在快照結束的時候我們的內存
跟剛開始渲染的時候一樣大
這樣我們就修復了這個特殊的泄露
這就展示了我們如何使用Allocations和Memory時間線
來解決像這樣的應用的內存泄露問題
這很不錯因爲應用可以用更多的操作
有了diffing功能
我們就可以深入觀察我們所關心的衛星裏的變化
好了衛星跟蹤器就講到這
你回來吧 Jon
謝謝 Brian
你看到了真是不可思議的迅速和簡單
這些新的時間線讓內存零問題
所以請記住Memory時間線是瞭解
內存的使用情況和造成內存高峯的原因
這樣你就知道該去哪裏找問題
然後使用多個Heap快照在JavaScript Allocations時間線裏
以便單獨放大造成內存增長的代碼
還有不要忘了刪除takeHeapSnapshot
在代碼運行之前
要記住性能所受的影響
是JavaScript Allocations時間線記錄時產生的
那麼以上就是新的時間線工具
可用在Safari 10的網絡檢查器上
我想你一定會愛上它們
在結束之前我還想再說幾點
我要建議你們重新考慮下WKWebView
如果你還沒有換掉它
在Safari設置裏打開Develop菜單
連接網絡檢查器到你的應用
然後開始利用這些新功能
節省大量時間Bottom Up視圖和Call Trees用於
找到最需要優化的地方
Memory時間線可以快速看到內存高峯的情況
Heap快照可以輕鬆查找和比較對象分配
時刻關注新功能的更新
今年網絡檢查器和WebKit有更多內容
可以讓你利用應用的網頁內容
來創造絕佳的應用內的用戶體驗
除了Brian和我今天爲你們展示的功能
我們團隊過去一年也爲網絡檢查器添加了很多內容
Quick Open會讓你直接跳到頁面加載的資源
尾調用堆棧現在可顯示調試器裏的尾調用優化函數
初春的時候在OS 10系統下我們引進了Safari 9.1
並更新了網絡檢查器
它顯示了Elements標籤下DOM Tree裏的Pseudo Elements
這裏還有一個新的視覺風格邊欄
可能你還沒注意到
網絡檢查器是一個開發者工具
作爲WebKit開源項目的一部分
WebKit是網頁瀏覽器引擎用來支持你的應用
驅動WebViews和JSContext
當然它也是Safari背後的動力
在過去一年裏我們爲WebKit添加了好多新功能
我們對ES6100％支持
我們改進了對IndexedDBStandard的支持
還添加了Shadow DOM支持WebDriver和CSS變量
以及Picture Element
所以真的是很多內容而且作爲開源項目
一旦有新的出現你就能知道
你們在座大部分人肯定都想能利用它工作
如果你們想對這些內容作出改進
完全有機會
因爲WebKit是開放資源
你可在WebKit.org上找到更多WebKit項目信息
WebKit團隊及其背後的工程師們會在博客上寫他們的開發工作
實際上我們現在有兩個博客
關於Memory時間線和樣本分析器
就是今天講的內容
所以如果你想了解更多可以去那裏看看
我們還有一個功能狀態頁一目瞭然的列出了所有更新
針對網頁標準進程
這裏還有鏈接可以下載WebKit夜間建構
和最新的瀏覽器Safari技術概覽
每幾周更新一次附帶更新的WebKit引擎
所以你可以在WebKit上嘗試這些新的實驗性功能
它們每兩週改進一次
我們團隊投入了大量精力給SafariWebKit和網絡檢查器
網絡檢查器團隊可以使用這些新性能特性
就像我們今天展示的那樣去查詢問題並提高性能
對網絡檢查器本身
我已經迫不及待想看看你們會做些什麼
想了解更多信息請觀看這個演講
在developer.apple.com下載幻燈片
這周的前幾天有很多場相關演講
過去幾年也有不少
這些都能在developer.apple.com上找到
那麼代表Brian 我自己和Safari與WebKit團隊
感謝你們的到來祝大家在接下來的WWDC中過得愉快