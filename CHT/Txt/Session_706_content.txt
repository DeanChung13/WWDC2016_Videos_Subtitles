安全的新特性
下午好！
歡迎大家
感謝各位前來聽安全的新特性
我叫Lucia Ballard我管理Apple的安全傳輸團隊
與我的同事Simon一起
我們將向大家講講我們一直從事於的大量新內容
來幫助你爲客戶提升安全
所以 我希望在座的很多人之前已經聽過Evone的演講
那個演講非常好地概述了我們這麼做的原因和內容
而且是我們系統安全的根本性支柱
這裏我們會深入到更多的詳細信息
所以內容會有這些
首先 我們會談談iOS中關於網絡安全的一些變更
之後我們會討論幾個對我們加密API的更新
然後Simon會談談macOS上的平臺安全
所以 直接進入網絡安全
如果你用手機像我一樣頻繁
你就會知道手機積累了數量驚人的信息
關於你的私人生活
而且很多是通過網絡傳遞的
無論是你在閱讀的文章或是給朋友發送的消息
所有這些點點滴滴的信息即使從單個看起來無關緊要
但累積起來 可以非常驚人地描述出這個人
所以在Apple我們有理由認爲
所有這些信息都應該默認得到保護
我們認爲HTTPS是新的HTTP
所以對於每個通過網絡加載的資源
你應該爲你的用戶提供機密性和數據完整性
另一個關鍵點是並非每個HTTPS都是平等的
HTTPS基於SSL或按現代的說法是TLS
並非這個協議的所有版本都會提供足夠的安全保護
給你的用戶來抵抗攻擊
所以基於這些原則
去年我們推出了App Transport Security
App Transport Security
指的是你做的所有加載使用NSURLSession
或甚至是更舊的NSURLConnection API
你需要使用最頂級牢靠的TLS連接
首先 這意味着TLS版本1.2該版本推出有一段時間了
但只有該版本能夠完全抵抗
我們所知的一切漏洞像是BEAST攻擊
或者POODLE攻擊或其他名字可怕的漏洞攻擊
這也意味着你必須使用強大的加密方法
像是AES-128或更強大的密碼
以及有SHA-2簽名的證書
因爲有SHA-1簽名的證書很容易受到攻擊
最後 這還意味着正向保密
這種方法可以在服務器和客戶端之間交換密鑰
這會帶來十分驚人的屬性意味着哪怕將來那個證書...
那個服務器證書被盜取了
你無法顯示出來
過去發生的任何通信內容
所以把這些都結合在一起
我們認爲 你就有了一個安全的連接
可以保護客戶的數據
現在 我們知道這需要一段時間來趕上
App Transport Security的步伐 所以我們還推出了特例
你可以全局關閉
或你可以爲特定域名設置特例
你知道那個域名無法快速轉成TLS
現在我想知道在座的有多少人在思考 “沒錯
我去年設置了那個特例
之後就沒再考慮了”好吧 現在是重新考慮的時候了
因爲今年我們會開始在
App Store上施行App Transport Security
這會在2016年底開始生效
這意味着對於大多數特例
你需要提供正當的理由
所以 對於所有這些特例
真正關閉了App Transport Security
或其關鍵屬性像是使用TLS 1.2
你首先需要說明你要使用該特例的理由
對於其他特例像是正向保密
我們意識到對它們的支持並非完全通用
所以目前會自動授予這些特例
不需要任何理由
例如 如果你在使用一個夥伴服務器
而且你無法控制他們提供的加密套件
我們能夠讓你繼續和那個服務器對話
我們還添加了一些新的特例來使其易於採用
例如 如果你在使用Streaming Media
而且那個媒體文件已經批量加密了
我們可以能夠通過AV Foundation提供特例
讓你不需連接TLS就能加載那個媒體文件
我想說清楚我們還是認爲正確的做法
是將TLS用於一切上面
但有些情況下我們可以提供特例
來幫助你更順利地過渡
我們還提供網頁內容特例
這裏有時候你的應用需要加載網頁上的任意內容
當然 你無法保證那是使用HTTPS的
所以如果你用WKWebView
那你可以將這個密鑰設置在應用的Info.plist裏面
NSAllowsArbitraryLoadsinWebContentKey
之後所有的這些加載都會免去
App Transport Security要求
但你應用所做的其他事
像是和你自己的服務器對話這還是會得到保護的
所以這是App Transport Security
但我們還在整個系統上爲TLS做變更
因爲加密套件不斷進化
與抵禦攻擊相比 發起攻擊的能力不斷變得越加高效
所以無論你的ATS設置是什麼
我們現在爲所有使用我們網絡API的人默認禁用了RC4
我們還在Secure Transport中禁用了SSLv3
所以即使你下入到我們的底層API
你還是無法使用SSLv3
研究已經遠遠超越這兩項技術了
我們不認爲它們能爲我們的用戶提供有效的安全
所以被禁用了
其他的算法也開始過時了
特別的 SHA-1變得越來越容易受到攻擊
3DES也是
所以 如果你知道你依賴於這些算法
現在該放棄它們了
而且我發現在場的很多人是應用開發者
而且不負責自己的後端
所以你需要聯繫
你公司或其他負責託管後端的那些人
來確保他們放棄
對這些老舊算法的依賴因爲這些算法要被棄用了
現在非常適合你去檢查加載內容的狀態
使用HTTPS 並且確保你能使用App Transport Security
然後你就能快速通過應用審覈了
所以這就是App Transport Security
確保一切都是用牢靠的TLS進行加載的
不過牢靠的TLS是不夠的
你還需要確保你用來驗證TLS連接的證書
能表示正確的服務器
所以我想談談幾個不同的技術
我們今天使用它們來幫助你確保你是真正
連接到正確的服務器上
當你在建立這些安全通信的時候
所以首先我們回來
來稍微談談當今證書的工作原理
所以如果你要連接一個服務器
那個服務器一定要有一個由證書權威機構發放的證書
那個權威機構會驗證主機名
然後說 “沒錯 挺好的你確實是example.com
這是你的密碼證明”
當你連接的時候服務器會發來那個證書
但這不總是完美的機制
如果有攻擊者設法得到了你主機名的證書
那他們就能提供那個證書
而客戶端無法分辨出
攻擊者的服務器和你自己的服務器
如果證書權威機構出錯的話 這就會發生
或更糟的情況
這個證書權威機構被入侵了
有其他人使用他們的私人密鑰來進行簽名
所以今天我很自豪地宣佈我們將加入到
證書透明度的工作中去
證書透明度是一種技術
使用了已發佈證書的公開可驗證日誌
這些日誌從各種源中收集證書
所以有很多證書權威機構參與進來
但事實上任何人都可以提交日誌
之後 這些日誌會發布密碼證明
表明這個證書已被記錄然後客戶端可以檢查那個證明
這裏的做法有很多
證明可以嵌入到證書中
或可以在TLS握手中交出
或可以通過OCSP裝訂傳輸這一點我過會再細說
所以這是其工作原理的簡單概述
首先 證書權威機構
不僅向服務器發行證書
還將證書發送到日誌那裏然後添加到公開日誌上
之後日誌會發送一個有簽名的證明表明這個證書已被包括進去
然後服務器將它和原始證書一起
交給客戶端
這意味着你可以一同驗證這一對
所以證書透明度使發起攻擊變的更加困難
基本上這讓攻擊者身處困境
如果攻擊者可以從未參與的權威機構那裏得到一個證書
他們無法得到那個密碼證明
因爲那個日誌中包括着證書
所以他們只能交出證書然後客戶端就可以拒絕
或者
如果他們使用參與的證書權威機構
那麼那個被感染的證書會被記錄
然後可以公開查看這就讓你有機會
在證書權威機構級別撤銷證書
所以我們認爲這是一種至關重要的技術
來讓你確認與你對話的那個證書
的確是你要對話的那個證書
所以你可以這樣試試
你可以使用相同的info.plist
你用它設置了應用的傳輸安全配置
這是新的關鍵字所以對於每個例子
有一個參與的證書你設置上關鍵字
然後你的客戶端會拒絕任何
無法證明其有公開日誌的證書
我們當前的策略大概要求
你需要有至少來自兩個日誌的證明
這些日誌...我們會將認證的新日誌添加上去
若你的證書能用在Chromium上基本上在我們這裏也能行
有更多的信息
關於通用技術的在certificatetransparency.org
所以我鼓勵你去查看一下
證書透明度是這個生態系統中的一個重要部分
當它無法完全代替吊銷
這還有最後一步當你發現了
證書由於某種原因出現缺陷你必須要終止對其的信任
所以我想花幾分鐘時間
來談談我們推薦的做法
這叫做OCSP裝訂
這種標準已經推出很多年了
但是我們認爲現在是時候
讓大家轉移過去真正開始採用它
因爲現在對它的支持已非常廣泛了
OCSP裝訂是對在線證書狀態協議的增強
並且解決了大量的問題
所以回顧一下這就是OCSP的工作原理
我們有同樣的設置
證書權威機構向服務器發放證書
每一次客戶端連接那個服務器
客戶端就會看到那個證書並且想知道證書是否仍然有效
所以它會請求證書權威機構
就在TLS握手過程中間
然後證書權威機構說
“是的 證書仍然有效” 或者“不是 抱歉證書無效的 不要相信”
這有一些問題
其中之一是速度慢
你處在獲得資源的握手過程中
你不想等待一些其他實體來進行連接
尤其是當那個服務器關閉了你可能要等待一段時間
另一個重大問題是這會稍微泄露出
關於你在線活動的信息
你的證書權威機構會看你連接了哪些主機名
因爲每次你連接的時候你都發送一個響應
OCSP裝訂解決了很多這些擔憂
所以工作原理基本上是這樣
進行請求的不是客戶端而是服務器請求證書權威機構
證書權威機構將一個有簽名的響應交回服務器
由證書權威機構簽名
這樣就可以信任它了
之後服務器將這個證書和承諾一併
發給客戶端 表明證書是有效的全部一致 全部是同一個握手過程
所以這意味着
你的吊銷信息會可靠迅速地送達過來
沒有多餘的等待沒有任何擔憂
而且會保護用戶的隱私
因爲他們唯一建立的就是返回你服務器的連接
你可能注意到這個圖表看起來和證書透明度的圖表相似
那是因爲你可以使用相同的機制
來傳遞證書透明度證明
只要你的證書權威機構參與進來
你可以在一次握手中一同發出所有的信息
如我所說 OCSP裝訂廣泛地支持於
多種操作系統而且還能向後兼容
所以你今天就可以啓用在Apache上 在GenX上
你的後端託管在什麼地方都行
而且現在完全支持所有的Apple平臺
所以如果可以回顧
總結我們在網絡安全上的進展
現在是時候前進到應用傳輸安全標準上了
這是牢靠的算法和牢靠的密碼 TLS 1.2
正向保密和SHA-2證書
還有 現在是時候開始對證書透明度進行試驗了
尋找參與的證書權威機構
然後整合到這個生態系統中
還有 一定要啓用OCSP裝訂
這樣我們就萬無一失了而且要知道你可以確保
建立安全的返回服務器連接
所以這就是網絡安全
現在我想花幾分鐘時間來談談一些加密改進
所以 首先是SecKeySecKey是我們的算法
不好意思 是我們用於非對稱加密操作的API
在這次版本中 我們統一了macOS和iOS上面的API
SecKey現在支持所有的常見操作用非對稱密鑰
RSA 和 ACC 進行的操作
所以這是用非對稱密鑰進行簽名和驗證
這意味着SecKey完全替代了在macOS上被棄用的CDSA調用
而且它還替代了你可能使用的SecTransform
來用非對稱密鑰進行加密
所以我們強烈推薦前進到SecKey上
我們還將它嵌入到新工具包中叫做CryptoTokenKit
CryptoTokenKit是對加密設備的系統支持
所以那張你用來證明身份的小卡片
在企業中用的那種或者是USB token
現在我們直接整合了這些
而且它們可以整合到系統服務中
所以這意味着這些Token內容可以在keychain中獲得
如你所料
而且Token操作可以通過使用SecKey API實現
這是一個複雜的話題其中有很多的深層內容
所以請到security lab見我們
我們可以詳細討論你的使用案例
所以感謝大家的關注接下來我將交給Simon
來談談在平臺安全上的新內容
非常感謝你 Lucia
大家好 我是Simon Cooper我負責管理信任工程團隊
我將談談安全上的新內容
但首先我想談談...稍微談談
軟件是如何傳輸到Mac上的
稍微談談Developer ID
然後我會談談Gatekeeper
和圍繞Gatekeeper的一些打包問題
我們先開始談談軟件是如何傳輸到
我們幾個平臺上的
所以對於iOS 你可以從App Store上獲取應用
你能使用Xcode來創建並運行應用然後將它們安裝在你自己的設備上
這有一些Enterprise Program
允許你將內容傳輸到設備上並進行管理
你會發現所有這些安裝機制
都是由iOS平臺在背後處理完成的
所以現在我想稍微談談macOS
所以你還可以通過Mac App Store獲得應用
而且這種獲取應用的方法十分不錯
你還可以得到有Developer ID簽名的應用
你還可以使用Xcode
來創建你自己的應用然後使用傳統命令行UNIX工具
來以普通的UNIX方式創建內容
所以我們回來稍微談談Developer ID
所以什麼是Developer ID？
Developer ID允許你在App Store之外傳輸應用
這些應用通常使用網頁瀏覽器下載完成的
Developer ID Program會發放給你一個Developer ID簽名身份
當你以該身份給應用簽名時應用會得到Gatekeeper的特別對待
實際上 在Xcode 8中有一些改進的流程
允許你正確地導出有Developer ID簽名的應用
所以我們要做的是改變Developer ID Program
昨天已經宣佈了
我們允許Developer ID和iCloud協同使用
所以Developer ID現在可以使用iCloud的功能
這包括iCloud DriveiCloud Keychain
Push Notifications和VPN
所以這意味着什麼？
這意味着你可以傳輸iCloud驅動的應用
在App Store之外
你現可使用Developer ID將數據分享給
你的iCloud驅動的iOS應用
你能將新的Developer ID應用部署回macOS 10.9
所以大家一定想知道何時能夠做到如此
你今天可開始iCloud Development測試
使用Xcode 8工具
你肯定也注意到了當你在做iCloud測試的時候
這有一個開發和生產環境
當你在部署你的iCloud應用時
你要在生產環境中部署
然後要等待即將發佈的seed
這樣才能開始測試
當你那麼做的時候請使用Xcode 8中的新流程
因爲這會確保你是在生產服務器中進行部署
Xcode團隊還讓我提醒大家
除非你使用GM工具否則請不要發佈應用
所以Developer ID的另一邊是Gatekeeper
Gatekeeper允許我們控制哪些應用可以在你的機器上運行
然後這是Preference Panel
在El Capitan中的Preference Panel上面
有這些選項 你可以運行來自Mac App Store的應用
可運行Mac App Store和未識別開發者的應用
或者你可以運行來自任何地方的應用
當你第一次運行應用時Gatekeeper會運行前提示你
其實我們在Gatekeeper上做了些更改
而且我們對Sierra中的Gatekeeper UI也做更改
我們改變了默認選項而且那些默認選項會是
你可以運行Mac App Store的應用
你可運行Mac App Store和未識別開發者的應用
現在如果Gatekeeper出於某種原因拒絕你的應用
這通常在這個Preference Pane中會出現一個按鈕
讓你打開...繼續打開
不幸的是 在seed版本中這項功能並不起作用
但會在之後的seed版本中得到修復
我還想說我們沒有改變
基本機制和策略的工作方式
所以如果你已經完成管理配置
或者使用命令行工具和策略工具
你可以重新啓用Allow Anywhere
我想稍微談談Gatekeeper上的其他一些變更
但是我首先要談談重新打包問題
和爲解決該問題而開發的Gatekeeper加強的地方
現在重新打包成爲了一個問題
是由於某些應用編寫的方法
有一些類型的應用
在編寫的時候延伸到了其本身之外
並且使用了外部資源
這些應用可能以多種方式傳輸
而且它們可能確實有正確的簽名
但是它們所延伸的外部資源可能沒有簽名
它們可以是代碼或是等價代碼
可以是庫可以是插件
甚至可以是HTML內容
你可能沒注意到本地的HTML內容
如果含有JavaScript這就可以訪問你的整個系統
這些資源還可以是Lua Scripts或Python Scripts
或甚至是Apple Scripts
所以問題在哪？
如果你將這兩個東西一起放入容器中
然後以這種方式傳輸應用可能通過壓縮文件或磁盤鏡像
或者使用ISO鏡像然後你將應用放入容器中
然後你將資源放在應用旁邊
當應用運作並和外部資源對話時
它就會加載這些有潛在危險的東西
你會發現這裏的應用有綠色的邊框
表明有簽名
它延伸到了外面到簽名的外面
並嘗試接觸這些潛在資源
所以如果我將那個應用重新打包
我不是將它和外部資源一同打包
那是你們開發者想放入的內容
我是將惡意內容放進去
之後當用戶運行應用
他們不會得到你的體驗
他們體驗到的是惡意代碼
如果那個惡意代碼是一個動態庫
比如你可能把它放入一個插件目錄裏了
那這幾乎可以肯定你的應用將不會
執行你所預期的事情
所以我們將其稱爲重新打包問題
有一些內容並非直接受到打包問題的影響
那些內容是從Mac AppStore中傳輸過來的應用
這是獲取應用的最佳方式
其他內容
可以不受直接影響的
是你使用帶有簽名的AppleInstaller Package來安裝應用
這不意味着說一旦應用安裝完成
就無法重新打包並傳輸到另一個機制中
但實際的Apple Installer Package
在延伸到外部資源的方面是沒有問題的
有些內容是會受到影響的
前提是你傳輸應用的方法是用壓縮文件或磁盤鏡像
或者如果你將內容組合在
ISO鏡像中以及其他任何一種存檔格式
還有可能的是如果在你的磁盤鏡像
的結構中你組裝應用的方式
是使用一種組合將各處的資源
組合到一起那你也可能受到影響
所以在此問題上我們需要你們的幫助
由於這個問題我們還需要保護我們客戶
我們需要做什麼？
如果你傳輸某些內容
其中有帶簽名的應用和一些外部資源
你可能通過壓縮文件或磁盤鏡像 或ISO鏡像來做
我們要請求你們換成使用磁盤鏡像
我們請求你們這樣做的原因是我們現在可以給磁盤鏡像簽名了
你可以用macOS 10.11.5來給磁盤鏡像簽名
這是El Capitan的當前版本
或所有之後發佈的OS X
你可以使用共同簽署工具來給應用簽名...
來給磁盤鏡像簽名不好意思
這基本上會將
外部資源和應用綁定在一起
這些簽名實際上嵌入在磁盤鏡像中
並隨着磁盤鏡像附帶
而且這個有簽名的磁盤鏡像與舊的OS版本相兼容
現在我想說一些打包建議
避免打包問題的一種方法是...
重新打包方法就是完全避開它
將你的資源放入應用捆綁包中
之後給整個內容簽名
如果你只發布單個應用捆綁包
你應該考慮通過Mac App Store傳輸
你一定要給應用簽名
或許在壓縮文檔中打包
不過請在發佈前驗證那個簽名
或者 如果你有複雜的安裝
你可使用帶簽名的AppleInstaller Package
對於容器
還有應用和資源還有磁盤鏡像
請使用並換成有簽名的磁盤鏡像
容器中的所有內容都要簽名
所以其內部的應用也應該簽上名
而且你應該給磁盤鏡像簽名
並請在發佈前驗證所有的簽名
關於打包的最後幾點
如果你將個性化和許可信息添加到你的應用上
在下載的時候
請在應用的捆綁包路徑上使用擴展屬性
這是描述該做法的技術說明
那就是Tech Note 2206
你也可以通過給個性化磁盤鏡像簽名來做到這一點
這裏有一些你一定不要做的事
給應用簽完名之後不應進行修改
因爲這會破壞代碼簽名
當Gatekeeper來驗證你的應用時 就會出現問題
你絕對不可以傳輸簽名被破壞的應用
然後請不要傳輸ISO鏡像了
現在我想談談Gatekeeper增強
這是我們爲攻克這一問題而開發出來的
這重點是爲了保護客戶
這個機制我們稱之爲Gatekeeper Path Randomization
它補充了所有現有的Gatekeeper保護
而且對於Mac App Store的應用沒有任何變更
當你升級Sierra時也沒有任何變更
對於任何之前在你系統裏運行的應用
這個機制對任何新下載的應用起作用
並且適用於無簽名磁盤鏡像上的應用
我來描述一下究竟這種機制是如何生效的
這是一個複雜對象
這可能在你的下載文件夾裏
而且可能是一個解壓縮文件
或者可能是一個已裝載的磁盤鏡像
包含你的應用和那些額外資源
所以 當你雙擊應用時
當應用運行後它會被重新轉移
通過一些技巧
放到文件系統裏的一個隨機位置
而且它不能訪問資源
所以 這會終止重新打包攻擊
所以在一些情況下這種重新轉移是不會發生的
如果用戶明確地移動應用只是移動應用本身
如果他們將應用和其他東西一同移動
那這個機制不會關閉
如果用戶只移動應用本身可能移動到/Applications
那這個機制會被關閉
如果給磁盤鏡像簽名那這就不會發生
所以任何從帶有簽名的磁盤鏡像運行的應用
這個機制將不會得到應用
這種機制也不會起作用
若你使用帶簽名的AppleInstaller Package安裝軟件
這也不會應用於任何來自Mac App Store的應用
所以簡要來說本次演講中的兩個收穫是
給你傳輸的內容進行簽名然後檢查內容是否有效
所以關於本次演講的更多信息可以在這裏找到