介紹Swift Playgrounds
早上好
早上好
非常感謝大家我是Matt Patenaude
我是Playgrounds團隊的工程師
歡迎參加演講408“介紹Swift Playgrounds”
我非常激動成爲這個團隊中的一員
今天我們要給你們展示一下天哪我們要給你們展示很多東西
好的讓我們開始吧
目前爲止你們已接觸這個應用有48個小時了
所以我確定你們中很多人已經看到這個了
但是也可能你們中有些人設法抵制住了它的誘惑
Swift Playgrounds確實是iPad令人激動的新應用
它能讓你用Swift編程
讓你用手指直接感受Swift的強大
如果你對編程沒有什麼經驗這個應用對你很有用
我們有很棒的學習編碼的課程
你可以從應用上直接下載
我們把它設計的吸引人而且令人激動
無論你處於什麼編程水平
別的不說 你可以用它製作出漂亮的舞步
如果你對編程略有經驗
我們也爲你準備了很棒的起點工具
像這個形狀模板
它能夠讓你用顏色和觸摸這樣的東西做實驗
這在iPad上都是獨一無二的別的地方你不會看到
如果你已經習慣於Xcode中的編程工具
你可以把你的iOS編程工具中的代碼更新到Swift 3
它們在Swift Playgrounds和iPad上都會運行得很好
我們認爲它確實是令人激動的產品
我們知道你會用它做出令人稱奇的東西
好的 我們有很多東西展示給你們
今天的演講分爲三部分
首先讓我的同事Max上臺
他會演示如何使用這個應用
包括神奇的觸摸反饋和手勢
這絕對是iPad的獨一無二的體驗
然後是Jonathan
他會演示如何編譯更有吸引力的內容
用SwiftPlaygrounds
使用新文檔格式的新特徵
最後Izzy會上臺 他要演示
你可以做的一些很酷的東西
一旦你有更多時間玩這個軟件
閒言少敘 有請Max
謝謝Matt
謝謝Matt
首先讓我們看一個截屏
它是Swift Playgrounds的截屏我們可以看到
界面的不同組成部分
在屏幕的左側是源代碼編譯器
右側是實時視圖
源代碼編譯器由幾個區域組成
一個區域是Playground註釋
你可以看到這兒有很多註釋
它可以分散在每個頁面之內
這是一個內容豐富的文本幫助你瞭解文檔的信息
下面有一個源代碼的實例
在這兒你完成所有的編程代碼
在屏幕的底端有快捷菜單
中間是代碼補全
這取決於光標處的代碼
左面是撤銷和恢復按鈕
右面有兩個——是幾個快捷按鈕
一個是刪除按鈕
另一個按鈕用於插入行第三個用來彈出軟鍵盤
這些按鈕將幫助到你
如果你不想用鍵盤編程的話
右面是實時視圖
在這兒能實時看到代碼的執行情況
下面有運行代碼按鈕
按下它將編譯和運行你的代碼
頂部的左邊有文檔按鈕
可以選擇你的文檔
這個按鈕用來顯示內容的列表它能顯示
文檔中所有的章節和頁面
還有兩個按鈕用於瀏覽頁面
右邊是工具菜單
資料菜單和工具菜單
讓我們看看它們裏面是什麼
在資料菜單下是代碼片段
旁邊是圖像列表
你可把這些圖像添到playground或文檔中
第三個是文件列表
你可以從其中選擇添加到你的文檔中去
在工具菜單下你可以找到應用的幫助
文檔的術語表
這兩個按鈕可以分享有關文檔的東西
例如錄屏 把你的操作錄製下來
截屏 把實時視圖的圖像保存下來
最後是還原按鈕可以把頁面還原到初始狀態
現在我們在文件瀏覽器中
你可以看到這兒有很多文件
我要打開Playground的形狀模板
它們都在這兒
這兒只有一行代碼讓rectangle等於某個值
我想在實時視圖中畫一些長方形
我認爲這非常有趣
下面我要在值上點擊
你會看到在底部出現了代碼補全
這兒有許多不同的選項
我要找到長方形
通過點擊代碼補全並且向左拉動滾動條瀏覽整個代碼補全
這是長方形點擊它 它就會插入到文檔中
注意在屏幕的左方出現了一個橘黃色圓圈兒
這說明這行代碼有問題
點擊它 它告訴我這行代碼有錯誤
我需要在長方形後面加上括號這兒有修復選項
你可以點擊第一個它就會插入到文檔中
橘黃色的圓圈兒消失了
現在點擊我的代碼可以看到我畫了一個長方形
它是正方形 但...
現在注意當我們把光標下移的時候
在代碼補全中出現了長方形
我點擊它 然後點擊圓點
現在它列舉出了所有的不同屬性
和函數 我可以把它們用在長方形上
爲了看的更清除
我們改變一下邊框的顏色和寬度
讓我們輸入邊框顏色
這兒有一個等號運算符 點擊它
我們得到一個佔位符代表某種類型的顏色
注意代碼補全中的第二項是一個灰色方框
這意味着我們可以插入所見即所得的顏色
點擊一下我們得到一個白色的方框
點擊方框會出現一個快速編輯器可以改變顏色的值
Swift Playground中有很多快速編輯器
這只是一個顏色編輯器
我把顏色從白色變成黑色點擊運行代碼
現在邊框變成了黑色
現在看上去不太清楚我要增加邊框的寬度
點擊長方形 點擊圓點
點擊邊框寬度和等號現在出現了一個數字盤
它也是一個快速編輯器我們可以快速輸入一個數字
輸入四 噢 點擊運行
現在看起來清楚多了
現在我要我想編一個程序
當我在實時視圖中移動手指的時候會畫出一串正方形
我要寫更多的代碼
我要把實時視圖隱藏讓我有更多的空間寫代碼
我要在屏幕的中央點擊並且按住
它會把屏幕分爲左右兩半兒
現在拖動到右側使實時視圖消失
現在點擊源代碼
Swift Playgrounds有一個很好的軟鍵盤
當你想用屏幕鍵盤編程的時候可以使用它
讓我點擊菜單中的向上按鈕把軟鍵盤顯示出來
注意每個鍵的上方都有一個替代值
後面我們會詳細講解
我們首先使用canvas對象
它在playground形狀裏以便和實時視圖進行互動
讓我鍵入C-a-n我們有了canvas對象
輸入Shared得到shared canvas
現在輸入Drag
注意SwiftPlaygrounds模糊匹配了
onTouchDrag handler僅僅通過輸入Drag
我點擊一下就得到了一個函數的佔位空間
點擊回車就會擴展佔位符的空間讓我們輸入更多的代碼
現在我想創建一個程序能隨着手指拖動產生許多長方形
我要做的就是把剛纔的代碼添加進去
點擊下面的大括號並按住它 向下拖動
把前面的代碼包含到大括號內
下一步就是
我要把長方形的中心設置爲我點擊的地方
讓我們加入一行代碼設置長方形的中心位置
爲canvas共享的當前觸摸點
它是一個數組
如果我點擊並且按住H然後向右拖動
就得到了數組的下標括號
下面我點擊並且按住P得到零號元素
現在關閉代碼視圖 看看實時視圖
點擊運行代碼就可以開始畫圖了
耶
現在我在屏幕中央點擊並且按住
向左拖動把代碼視圖關掉現在我可以在整屏幕上作圖了
我很喜歡它 有點兒藝術性我要把它發送給Matt
我要點擊工具菜單
你可以把實時視圖截屏保存下來
其實有很多程序在運行
幕後做了很多工作使playground這樣運行
有請Jonathan
他會給我們演示
Playgrounds內部的工作原理
好 Jonathan
謝謝 Matt和Max
iPad上的Swift Playgrounds
讓你使用和在Mac上創建的同樣的Swift 3 Playground文檔
你也可以在iPad上創建它們
你可以使用AirDrop、iCloudDrive和其它文檔提供者
來轉換文檔並且在這些環境中運行它們
這很有趣
在傳統的Playground文件格式之外
iPad的Swift Playgrounds引入了一種新的文件格式
它利用了新的環境
Playground Books提供更多編程代碼塊
可以創建交互的題材
在其中你希望別人也可以一起探究
你想給他們展示一些東西
下面
我要向你們展示一些新功能
以及你們如何利用這些新功能
首先Playground Books是由按章節分組的頁面構成的
並且在此基礎上生成了內容列表這是爲了利於瀏覽
Playground Books提供了一種新類型的頁面叫做劇情畫面
這非常有用如果你想進行全屏展示
在你講述故事的過程中
你看 我們的內容團隊很好的應用了它
把大的構思用有趣的方式展示出來
當你介紹概念的時候你可以使用詞彙表功能
動動手指就可以把術語和它們的定義聯繫起來
這些術語和定義集中起來
儲存在某個地方以供參考
滿是Swift代碼的Playground頁面令人生畏
有時你不想從你要展示的細節處分心
Playground Books使學習者能夠集中精力
這是通過使用編輯區域實現的
你用特別的註釋註釋你的Swift代碼
它們開始是空白的學習者可以在以後添加進去
這會減少你的分心特別是在早期階段
當你盡力展示一個複雜概念的時候
Playground Books讓你標記不想顯示的代碼
隱藏代碼區使你能夠靈活的運行、創建
和刪除代碼在中間的某種工作區中
最初把細節隱藏起來是一個很好的方式
然後你可以拉開窗簾兒
在你準備好的時候魔術般的展現已經創建好的代碼
Playground Books讓你可以配置快捷按鈕
它們在代碼補全菜單條上顯示
你可以指定或者刪除標示符、模塊、關鍵字等等
在註釋中定製那些內容會出現
用新的文件格式你可以配置實時視圖
在頁面加載時實時視圖立即呈現出來
它在一個獨立的進程中運行Swift 代碼
完全獨立於編輯器中輸入和運行的代碼
編輯器代碼在左側實時視圖代碼在右側
他們用一個特殊的XPC機制通信
下面我們要看看這是怎麼實現的你可以瀏覽
我的演示這樣你就可以使用這個機制了
交互式可視化是一個很好的方式
在編輯器中創建代碼同時代碼立即運行
如果你想一邊思考
一邊創建實現某個東西
你可以爲鍵入的代碼提供提示內容
學習者可以通過點擊提示按鈕得到提示
如果他們成功的完成了任務你可以讓他們知道
通過一條成功消息
Playground Books記住你對每個頁面評價
學習者在內容列表中可以看到他們已經完成的內容
使用這些提示和評估機制可以使你更有動力設計下去
你還可以訪問文檔中的一個簡單的鍵/值庫
這樣你可以跟蹤偏好或者甚至更高級的進展
當學習者在一頁一頁瀏覽書的時候
Playground Books是可重置的
做出的改變都存放在一個獨立的區域
它們獨立於主文件內容以外如果學習者選擇
他們可以把頁面恢復到第一次打開時的狀態
整個文檔也可以重置
每個頁面都是原始狀態鍵/值庫也被清除
評估可以重置它們可以重新開始
最後 但同樣重要的是在developer.apple.com上
你可以看到該格式的文檔
我們要確保你知道它是如何運行的
你就能夠定製自己內容產品工作流程
讓奇蹟發生吧
從這些例子和參考開始吧
仔細研究甚至把PlaygroundBooks讀爛學到更多東西
Playground Books是我們內容團隊創建的
好你們明白了
現在我想介紹一本Playground Book
它是我創建的我想向你們展示
從作者的角度你會體驗到什麼？
所以本書的讀者
是你們這些Swift的用戶
你們甚至用過Mac上Playgrounds
但是Playground Book格式是新事物
你們也想進一步瞭解它的工作原理
我編輯這本PlaygroundBook旨在創建
一個實時的參考演示演示這些新的
在線實時視圖是如何工作的以及你如何同它交流
現在開始
還有什麼比...
用一個Playground Book
來演示Playground Books
的新特性的更好方式呢？
聽起來有點繞
好的 那麼...
我們開始吧
這兒有文檔瀏覽器
我要找出我的Playground Book
點擊“同實時視圖交流”
你可以看到實時視圖立即開始運行了
注意編輯器上的代碼
甚至還沒有編譯它根本沒有運行
我所寫的代碼在一個獨立的進程中
在線實時視圖顯示了一個漂亮的小臉
它是Em
它是一個Swift程序它喜歡
玩“敲 敲”遊戲
在簡介頁面上我們可以看到
遊戲是爲了交談逗樂
學習者不需要詳細瞭解
我們是如何把消息發送給實時視圖的
我只想讓你們覺得很有趣
上面附加了有趣的描述
我們要做的是發送信息
使用下面的Say函數
這些字符將被髮送到另一面
它們會啓動對話狀態機
這是Em運行的一個程序隨着笑話繼續它會不停的運行
我們從這兒開始這兒已經填好了一個字符串
“敲 敲” 我只要按下運行代碼按紐
Em會回答 “你是誰？”
左邊的代碼被編譯運行
用Say函數奇蹟就發生了
字符串被傳遞到另一面
過一會兒我們會講解奇蹟是如何發生的
讓我們繼續
我要說“Boo”
我在使用外接鍵盤輸入
因爲我不想讓內置鍵盤
佔去屏幕
點擊運行代碼按扭字符串被傳送過去
“Boo！是誰？”
“你在哭嗎？”
點擊運行代碼
Em正確的識別了這個敲敲笑話是經典的
讓我們再試一次看看它會怎樣
我需要重啓Em的對話狀態機
我要開始 鍵入“敲 敲”
點擊運行代碼按鈕編譯和運行 傳送字符串
字符串通過線纜傳到另一面
“你是誰？”
UInt Swift的無符號整數類型
“UInt是誰？”
“你對更好笑的笑話感興趣嗎？”
看起來你們贊同Em此時的迴應
很不幸 但是...
我們在這兒用這個想法做了個實驗
好的進入下一頁
奇蹟的祕密被揭開了
你可以看到Say函數的具體代碼
這些代碼把字符串傳送給實時視圖進程
過一會兒我們再看裏面的細節
這是一本Playground Book
它不斷的監聽在線實時視圖的API
這是從作者的角度看到的
你也可以在下面的頁面中學習到
如何發送更復雜的命令給Em
你可以配置它識別新的設置
改變笑話的模式
你甚至可以把笑話模式儲存在鍵/值庫中
在以後你可以加載它們逗樂
在下一次你打開Playground Book的時候
Playground Book
可以和我們的演講資料一起下載
演講後你可以查閱一下
現在我們要進一步瞭解
從作者的角度看 它是如何運行的？
Playground Books是一個特殊的文件格式
以適應在觸摸設備上教授這些概念
例如iPad等設備
他們是擴展名爲.playgroundbook的文件夾
操作系統認爲它是一個文件包
你可以使用任何編輯器在Mac上編輯
你可以使用Xcode你最喜愛的文本編輯器
使用你的版本控制系統
編譯自己的定製內容管理工作流
如果你需要 還可以在PlaygroundBooks中生成內容
我們看看這個包是由那些文件組成的
這個包包括文件和文件夾
以及使所有一切運行的Swift代碼資源庫配置
這是簡要的概述
後面我們會再詳細講解
先讓我們看看所有一切是怎麼組織起來的
在文件包的根目錄
有一個文件夾叫內容你會猜到
這兒存放你編寫的內容
裏面有兩個文件夾你會認得它們
如果你以前寫過playgrounds程序
Sources文件夾存放全局Swift文件
這些文件已經編譯好了供每個頁面使用
在你的Playground Book中
你甚至不需要導入它們
任何聲明爲public的文件都可被其它頁面使用
一旦你打開頁面
然後是Resources文件夾...
包含頁面需要的資源
儲存有你的圖像文件、聲音文件和其它資源
你可以通過文件名加載它們就可以把它們拖到相應的文件中
注意這兩個文件夾在根目錄上
文件包的根目錄因此它們中的所有文件
在整本書中的每一個頁面都可以使用
如果你願意 你可以把它們限制到只能在某些章節使用
通過把Sources和Resources文件夾放置在那兒
甚至限制到只能在某個頁面使用
並且你可以在其他頁面中不分享這些東西
完全由你決定定製化是供你使用的
下一個文件夾是Chapters文件夾
正如你所料 它由章節組成
每個文件夾含有一個或多個頁面
每個頁面是一個文件夾
它含有可以和你互動的內容
當在應用中使用Playground Book時
我們首先看看這個文件Manifest.plist
它是一個特殊的配置文件設置頁面的工作方式
打開這個文件它看起來是這個樣子的
我們會慢慢看不要擔心
Manifest文件是屬性的列表是鍵和值的詞典
Swift Playground用它決定一個文檔頁面
如何工作
這些manifest文件用於配置章節層和
文檔層的行爲
例如內容列表中的內容排序
今天我們準備主要講解一下頁面的manifest
因爲它對剛纔顯示中你看到的內容影響最大
我們看看每一個配置機制
是如何影響頁面的
屬性列表的第一個鍵是名字你可以猜到
它設置文檔頂部的名字它也用在
內容列表中
下一個鍵實時視圖模式控制實時視圖的工作方式
當頁面第一次被打開時
通常實時視圖是隱藏的直到它在代碼中被激活
或者學習者讓它顯示在屏幕上
如果我想讓它在頁面打開時立即顯示
我可以把這個鍵改爲默認可見
我就得到了我想要的行爲
PosterReference鍵設置
在Resources文件夾中查找一文件
這個文件會成爲一個海報它會覆蓋
實時視圖區域在實時視圖進程
在頁面打開後運行以前
你看一旦實時視圖進程開始運行
海報圖像就消失了
我們就可以看到下面的實時視圖的內容了
LiveViewEdgetoEdge鍵是一個布爾值
它決定實時視圖的內容區域是否
擴展到視窗的邊界
並且在下面顯示運行代碼按鈕
就像在這兒看到的一樣
我想把它設成這樣我就選擇是
如果你把LiveViewEdgetoEdge設置爲否
並且你爲實時視圖設置了背景顏色
就是這樣的
注意它嵌入的的邊界
它沒有被運行代碼按鈕覆蓋
你來決定用哪種模式根據你的內容
例如如果你需要視圖全部控制觸摸區域
就把LiveViewEdgetoEdge設置爲否
就會得到你想要的結果
Playground日誌模式控制內聯結果
你會看到在編輯器每一行的右端有一個返回值
在這個例子中我的實時視圖報告了需要的結果
我就把PlaygroundLoggingMode
設置爲關閉它會完全關閉內聯結果
現在我已介紹了Playground文件格式的互動功能
它們使應用非常有趣
讓我們看看這個文件Contents.swift
你們都已見過了Contents.swift文件
無論是全屏而是位於左側
位於實時視圖的左側就和現在一樣
編輯器中所有的內容來自Contents.swift文件
當你點擊運行按鈕時文件中的所有內容
和它引用的所有內容被執行
在我的簡介頁面中Contents.swift是這樣
頂部是Playground註釋用以幫助描述軟件的功能
你的目標、如何得分和操作說明
通過閱讀頁面
可以瞭解如何和軟件互動
以前用Playgrounds寫過軟件的人會認得它
它是標準的Playground註釋
這兒有幾行代碼用來創建頁面
真正的操作就會實現
但是我不想讓這一部分被人們看到至少在這一頁上
所以我用特別的魔術註釋來標記隱藏代碼塊的開始
和結束
這兩行之間的代碼被隱藏了
但是在運行的時候 它們會被執行
但是當你打開這個頁面的時候它們不會顯示
在iPad的SwiftPlaygrounds中
這個Playgroundpage的真正工作
是從這個語句開始的就是對Say函數的調用
而Say函數被寫在隱藏代碼中
現在我想確保學習者
來到這個頁面填入函數參數的時候
不會不小心造成編譯錯誤
我使用了可編輯代碼區
把特殊的魔術註釋
放在可編輯代碼區的首部和尾部
只有在這兒可以輸入代碼
只要你高興 在頁面上添加多少個這樣註釋都可
一旦你用了這個註釋只有在這個區域能夠輸入內容
這正是我所需要的學習者可以隨便輸入
他們僅僅能夠改變字符串
高級的Playground的作者會注意到這個佔位符的語法
這些尖括號和＃號會產生一個透明圓形罩
顯示在編輯器中
學習者點擊它就可以鍵入任何內容
來代替原來的內容
這種方式很好的提示了
應在某地方進行怎樣的操作
剛纔我總結了Contents.swift中內容
對左側邊框的總結
現在我們轉向
右側邊框看看在線實時視圖中發生了什麼
介紹頁面有一個文件叫做LiveView.swift
這就是
首先我們導入PlaygroundSupport
那些以前用Playgrounds編輯過的人
對XE Playground很熟悉它是一個框架 讓你能訪問
頁面環境
現它被重新命名了它是新的而且升級了
它叫Playground Support你可用它繼續開發軟件
我們請求當前的Playground頁面
然後在頁面上我們設置了實時視圖的屬性
把它設置爲一個新實例叫做FaceViewController
FaceViewController是從哪兒來的呢？
它是Swift代碼的一部分
儲存在文檔根目錄的Sources目錄中
這是我創建的代碼庫
能夠在所有頁面中共享使用
這兒我寫下的所有代碼只要被標記爲public我都可以引用
現在如果你願意 你能夠
在LiveView.swift文件裏面寫下所有的實時視圖代碼
誰也阻止不了你那樣做
但是然後你要把文檔拷貝到
其它的PlaygroundBook頁面中
來共享同樣的實時視圖動作
我的Playground Book文檔的所有頁面
我僅僅使用了這三行代碼作爲設置就使Playground
使在線實時視圖運行
它們都共享了FaceViewController
我只要把這個文件拷貝到
需要使用它的任何頁面中
那些以前編輯過Playgrounds的人
可能感覺這個代碼很熟悉
這不就是設置實時視圖嗎
如果你在Contents.swift中這樣做的話
是的 你仍然可以這樣做
如果你選擇這樣做的話它在主進程中運行
和編譯器的所有代碼一起運行
那真的很有用因爲你能夠訪問實時視圖對象
你可以獲取page.liveview把它投遞到FaceViewController中去
然後和操作別的東西一樣操作它
調用它的方法 改變它的屬性它就是你的進程的一部分
但是那意味着實時視圖僅僅是活動的
當編輯器中的代碼運行的時候
只有當學習者按下運行代碼按紐時它纔開始啓動
學習者按下停止按鈕
或者學習者在編輯器中輸入時它就會停止
如果代碼中有編譯錯誤它不能運行
這些代碼現在正在編輯器中輸入
這就是爲什麼在線實時視圖
和LiveView.swift引入的原因
如果Playground Book頁面中有一個文件叫做LiveView.swift
就自動生成了在線實時視圖
頁面打開時這個文件就運行了
並且它在一個獨立的進程中運行
那太棒了因爲那樣它就一直在運行
即使編輯器中的代碼沒有運行或者不能編譯
換來的是你不能把實時視圖投遞到
FaceViewController實例中並且和它交流
就像你們以前那樣
你必須使用某種跨進程機制
來回傳遞消息 並且...我們後面會詳細講解
我們在Contents.swift的主進程中有了這個代碼
這是編輯器中的代碼運行的主進程
我想把字符串“敲 敲”送到另一側
我們首先要導入PlaygroundSupport
我們訪問當前頁面
我們請求頁面的實時視圖
我們沒有把它投遞到FaceViewController中去
我把它投遞到這個特殊的類PlaygroundRemoteLiveViewProxy中
這個類的實例用來的
通過線纜在兩個進程之間傳遞信息
如果這個條件投遞成功了
那就是代碼中的一個隊列它運行在
主進程中你就會得到這個頁面的在線實時視圖
我們把這個作爲消息
假設這些都好了我們已經把它投遞過去了
現在實時視圖運行了我們有代理
我們設計了一個消息
消息傳送機制使用PlaygroundValue
它是個枚舉類型的值我們一會兒會詳細介紹
看看這一行你可能會猜到
我們設計的一個字符串
“敲 敲”然後我們把這個消息
傳遞給代理
調用發送方法把它傳遞出去
Contents.swift中的代碼會把字符串
傳遞給實時視圖代理然後實時視圖代理
把它傳遞給另一側的監聽方
我們需要連接FaceViewController從而能夠接收到消息
在我們的代碼庫中
我們已經擴展了FaceViewController我們說過它遵循
PlaygroundLiveViewMessageHandler協議
那意味着我們必須實現接收方法以獲得PlaygroundValue值
它將會被調用因爲FaceViewController
是實時視圖 因爲我們把它的值賦給了page.liveview屬性
這就是實時視圖代理所知道的作爲隊列
它需要接收消息
在消息內 我們取得消息的參數
查看它攜帶的枚舉類型抽取相關的值
我現在僅僅關心字符串因此我們就使用
if case let語句檢查這樣如果是爲真
這個枚舉的值就綁定給標識符文本
現在在if語句中有一個字符串
我們要繼續進行下去
在這種情況下 我們把它傳遞給
函數processConversationLine
它會啓動Em的對話狀態機
那麼我們如何把信息傳遞給另一方呢？
例如我們設置了當你在臉上點擊時要顯示的信息
我們得到了字符串“Hello”如何把它傳遞回去呢？
我們如何做呢？
好的 首先 在實時視圖進程中你需要一個機制
能夠觸發發送消息我已經選擇
在臉上設置一個觸摸手勢識別器
那會回調觸摸方法
一旦你觸摸臉部
我們設計一個PlaygroundValue消息 發送一個字符串
例如“hello”然後我們對自己
調用發送把這個消息發送給另一側
現在發送方法來自哪兒？
好的 通過聲明我們遵循
PlaygroundLiveViewMessageHandler協議
它會鎖定我們的類它是自動完成的 很方便
在協議擴展中定義了發送方法它有一個默認的實現
因爲這個類是實時視圖調用發送方法
會僅僅把消息傳送給實時視圖代理
它會到達另一方
就像這樣
你在臉上點擊
產生“hello”字符串並且被傳送給實時視圖代理
現在實時視圖代理要把消息
傳送給另一側的監聽方
看看我們怎麼把它們聯通起來？
我們需要設置很多東西因爲按照默認
你在Contents.swift中寫的代碼
會停止運行
在到達最後一條語句的時候
然而在本例中我們不想這樣做
我們想讓信息異步出現
也就是晚一些出現
我們要先抓取Playground頁面
然後告訴它我們不想讓它停止
通過把needsIndefiniteExecution屬性設置爲真
我們請求實時視圖代理就像我們前面做的那樣
現在我們需要有某個東西
作爲可以接收消息的代理的代理
現在我要開始已經有一個類了
注意它遵循
PlaygroundRemoteLiveViewProxyDelegate協議
這意味着我必須實現remoteLiveViewProxy的接收方法
好啦
它將會被實時視圖代理調用
我們可以把Playground的值分開
使用if case let語句
可以對文本進行一些處理
它定義了代理我們要把它們聯通起來
我們要把它實例化然後把它的值賦給
代理的代理參數 或者代理屬性
現在完成了
現在我們有FaceViewController
你的臉上點擊一下
“Hello”打包作爲PlaygroundValue
被傳送給實時視圖代理然後再傳送給
我們剛剛創建的代理類
它接收到消息奇蹟就發生了
我想指出這個PlaygroundValue枚舉值讓我們
有更多的選項可以靜態的聲明原始值
我們可以在兩個進程之間來回傳遞它們
你可以直接使用這些枚舉值就像在剛纔的幻燈片中看到的那樣
你也可以把對話操作定義到Playgroundvalue中
可以使用自己的數據結構
另一個好處是鍵/值庫也使用Playgroundvalue
現在任務完成了 可以從這個模型中導出或者導入數據
這種工作可以用於雙向進程通訊和保存語句
記住Contents.swift在左側運行的進程中
它被稱爲主進程
如果在你的Playground Book頁面中有LiveView.swift文件
它將會執行在獨立的在線實時視圖中運行
它在右側的進程中運行
它的機制和我們以前的不同所以請研究
我們的參考實例和文檔看看它是如何工作的
所以你可以利用這些新玩意兒
在編輯Playground Books的討論快要結束的時候
我想告訴你們 作爲內容編輯者
你在iPad上實現了偉大的想法
然後你把它同步到Mac上看一下 你會注意的
在頂部出現了一個和Contents文件夾並列的新文件夾
這兒記錄了編輯器中發生的所有變化
所以不要驚訝當你在iPad上編輯內容
瘋狂的在編輯器中輸入和改變內容的時候
你認爲它們都存進了Contents.swift中
但是當你在Mac上打開它的時候
Contents.swift文件回到了開始的狀態
你做出的所有改變去哪兒了？
這就是設計
iPad上的Swift Playgrounds從未改變編輯內容
Swift Playgrounds儲存了學習者改變的文本的dif格式的文檔
位於Edits文件夾中可能的話我們會重新加載它們
這會使內容保持原始狀態
這也是爲何PlaygroundBooks可以被重置
以上是簡要介紹
新的Playground Book格式底層設計的一部分
剛纔說過 請到developer.apple.com上
獲得參考文檔和實例
仔細分析我們內容團隊設計的Playground Books
那兒都有 我們想保證你有足夠的資源
創造出炫酷的東西
現在我讓你們體驗了
作爲作者在創造PlaygroundBooks時的感受
但是正如你們所料的這個應用僅僅可以供你們塗鴉
就像某種便籤簿一樣
但是它很棒！
下面有請我的同事Izzy
展示一下他用SwiftPlaygrounds做的一些東西
Izzy
謝謝你！Jonathan
謝謝你！Jonathan太棒了！
現在直接進入我們的演示
像你們一樣 我對從星期一以來發佈的這些特徵
和這些APIs也很興奮
尤其是 我確實非常感興趣的一個編程領域是
我記得是程序內容生成
這個思想是計算機能夠生成某個東西
而且這個東西和現實世界很相似這非常令我着迷
所以當我看到GameKit添加了支持這個的API
我禁不住想立刻上手
我還不太確信我需要的是什麼但是當我看到這個新的APIs
我看到他們添加了這個新函數叫做GKPerlinNoiseSource
在應用中有幫助顯示了所有的文檔
如果我點擊這兒的幫助
我們可以看到GKPerlinNoiseSource有一些特性
讓它能夠生成自然現象例如雲和土地
那聽起來正是我想要的
有了這個我僅僅寫幾行代碼
我就把它轉換成一張圖片
我想看看我的圖片
如果運行playground
對於你們習慣於在桌面系統上使用Playgrounds的人來說
你會注意到在視圖的右邊有一個結果工具欄
也許你們一些人以前沒有看到這個
在你的playground運行時每一行產生一個結果
我在上面點擊會彈出內容的執行結果
現在有點兒小我寫上更多的代碼
能夠讓它放大一點並且保持像素不變
因爲我考慮到像素問題
後面我們再詳細討論
現在我們有了一個更大的圖像我們可以用
添加視圖按鈕把它添加到代碼中去
讓我們滾動代碼的時候它會隨着一起滾動
現在它很大我們想讓圖像看起來是個圖像
我們製作了噪聲我們還想用它生成3D土地
我們要做的是一個像素一個像素地完成
整個圖片當圖像是深色時
我們想讓它成爲3D土地圖像的較低區域
當圖像是淺色的我們想讓它成爲土地的較高區域
你可以看到在右上角
是顏色較深的區域那將是較低的區域
在左下角是淺色區域那將是較高區域
所以我僅僅寫了用戶界面圖像的一個小擴展
它是一個8位灰度的圖像沿着橫向
和縱向排列它被稱爲地塊
在每個位置有8位灰度值
我們還想把它向上排列
因爲我們的圖像非常小十乘十像素的
8位圖像有255個值 聽起來有點高
所以我寫了一個小的bucket函數
僅僅爲了證明它能運行
我取盡了所有的整數值
你可以看看這兒的彈出圖像它成了一個漂亮的梯子函數
我們的取值範圍僅僅是從0到4而不是從0到255
然後用圖像塊填充我們的圖像
我們得到一個這樣的圖形
很有趣
看起來很酷但它還不是真正的3D土地
你看在我的圖像中每一個點有一個關聯的高度值
它還不是我想要的
我常常在這兒卡住
我還沒有深入瞭解3D APIs
來生成我想要的3D土地模型
我也沒有任何3D技巧像設計師那樣手工實現
但是我恰好知道
學習編碼playground裏面有一個創建你的世界頁面
我可以用它來繼續我的試驗
所以我來到學習編碼playground
這就是那個頁面
這是創建你的世界頁面我僅僅是運行它
你可以看到我們正在雲中漂浮
我要把以前寫的代碼粘貼過來
我要輸入一些代碼先讓我把實時視圖隱藏起來
這兒有我們的
這兒以前是賦值的語句現在我想把它變成一個3D世界
現在創建你的世界頁面爲我們提供了一個世界 這正是我們想要的
在我的世界上我們可以放置
地塊...
這是位置的x和y座標
我們不需要考慮值我們需要設置一個高度
我們想要調用bucket函數
在我們的值上
然後是高度
我們想顯示一些地塊
我很喜歡這個動畫我想讓它多次運行
如果我運行這個...
哦 我忘了加括號 和Max一樣
如果運行它
你可以看到我們在我的世界上堆積地塊兒
運行的很快但這並不是我想要的
地面上有一些奇怪的空白
我不想那樣
我不是在創造飛行島那樣的魔幻世界
我想讓它看起來更像地面
所以讓我們停止
起初我不理解爲什麼產生了這些空白的地面
但是經過思考以後 我知道了
顯然是因爲高度是0
因爲範圍是從0到4而不是從1到5
0處沒有任何地塊
所以有0的地塊兒可以設置爲水域
如果高度
小於1
在我們的世界上
我想放置爲水域
現在若我點擊If語句
用我們的結構化編程助手可以加入一個else語句
放入前面的語句
現在我想讓它速度加快
我的世界有一個速度指令
我想提高速度
讓我們...
好 完美
好 讓我們運行一下 看看結果
現在你可以看到 我的世界中有了水
太酷了
我們從API草稿和一個空白的playground開始
然後我們碰到了障礙 我們來到學習代碼playground
學習代碼playground
對於初學者來說是非常非常有價值的工具
對於熟練的開發者來說它也是強大的平臺 它可以幫助他們
瀏覽APIs實現他們的想法
所以真是太酷了
現在你可以有整套的iOS APIs
其中包括有像CoreBluetooth這樣的東西
我要換到另一個iPad上
這有一個playground使用core Bluetooth
可以和外部設備通訊
這是一個SpheroSPRK Plus機器人
我們能做的是我要將它放置在地面上
因爲我們需要一些空間
現在我能做的是
當我運行我的代碼時
Sphero
會閃爍 並且開始開動
現在它以方形路線移動
從iPad上我使用CoreBluetooth控制第三方機器人
太有趣了
我想讓它更有趣一些
我先把它先隱藏起來
我要做的是...
添加一些顏色代碼
有結構化編程助手
我們可以拖拽成了一個數組添加一些元素
我要設置這些顏色
你知道這都是一些很熟悉的顏色
但我的手指放不上去
在rest函數中我們要讓它重複其中的三種顏色
不要白色
我們把它設置成其它顏色
讓我們再看一下
運行代碼
現在當我們開動Sphero時顏色在不斷變化
停止
確實很有趣
現在讓Matt回來做個總結
非常感謝Izzy
真是太酷了
今天我們看到了很多
首先是Max他展示了
如何使用Swift Playgrounds中很棒的觸摸控制
用各種方式和Swift代碼交互以前我們從來不能做到
Jonathan演示瞭如何編譯吸引人的內容
使用PlaygroundBooks中的新特性
你可以在編輯程序的同時瀏覽或者關閉程序的執行結果
Izzy給你們展示了你可以不受
學習代碼中的內容的限制
你可以使用iOS SDK做實驗和物理設備交互
甚至構造你自己的世界
我們認爲你能用Swift Playgrounds
做很多很酷的東西
我們都等不及要看你能用它做出些什麼
謝謝
更多信息請參閱developer.apple.com
這是演講408
還有一些相關的演講可能你會感興趣查閱一下吧
感謝所有的人請關注WWDC的其它部分