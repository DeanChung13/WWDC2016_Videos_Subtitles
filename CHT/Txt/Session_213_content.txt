利用現代最佳實踐優化現有應用
大家好
好啦
我叫Woody在Apple做軟件工程
歡迎大家參加本次大會歡迎在座的各位
還有在家在線觀看的各位
在接下來的40分鐘裏我想跟大家講幾點內容
我們來看看通過一些方式 你今後可以
開始減少你的技術負債
我們再來看看資源目錄
看看新的設計模式
不完全是新的 但是設計模式
希望你們使用依賴注入
講座的後半段會更新一下
我去年關於LivePlaygrounds的講座
那麼我們就開始吧
去年的講座 在一個實驗室中
我見到其中一個觀衆...
在描述一個場景
描述一件我想你們中許多人都熟悉的事
你的老大給了你一堆功能的要求
這些功能會產生收入 你想獲得報酬於是你照做
然後你有客戶
他們想要修補讓他們頭疼的錯誤
你以你的工作爲傲所以你也想做那個
有些技術負債要解決
有時我認爲開發軟件
就像搭Jenga積木
第一個版本比較穩定你開始往它上面疊加東西
然後它開始變得不穩定之後就崩潰了
所以 你得退一步
可能要先解決一些低層次的問題
帶着這些問題
你纔來參加WWDC
我們疊加在新的API上
我們給你一個新的Swift版本它打破源代碼的兼容性
但引入了一些新的功能
而且有提醒你所以不要抱怨它
然後我們引入了新平臺和新擴展點
及一些現有的應用例如Siri和Messages
如果你想把自己的角色定位爲開發者作爲一個運行循環
所有這些事都被擠進去
你知道會發生什麼有太多東西了
那麼你要做什麼？
有些什麼事是你可以開始
爲今年秋季做準備？
首先 如果你支持iOS 8和9的部署目標
你會覆蓋95%的設備
真的沒必要把那些部署目標設置在7
不要它了
事實上 大概的想法是
你採用當前的推送版本 即9.3
然後將你的部署目標設定在上一個版本 也許是8.4
但不要再到8.3或8.2了
因爲你的客戶不會得益於
我們對8.4的下行版本所執行的優化
當我們在今秋公佈iOS X時
將你的部署目標設置爲9.3
下一個 問題導航
解決那些問題
檢查然後修正它們
當我們告訴你...有...
當我們告訴你有不建議使用的API
不建議使用API是出於一系列原因
包括實現更好的錯誤處理
或作出更好的報告 或允許更多性能
或只是增加靈活度在參數返回值中
而且真的沒有理由不升級
到
新的API因爲我們就告訴你
我們告訴你用什麼
那麼 就用它 轉到那些
接下來 你可能要決定你要將警報視爲錯誤
我們已用Objective-C有一陣子了
但現在我們在Xcode 8中對Swift也有了
沒錯
我想我是第一個告訴你們這個信息的人
我非常喜歡這個想法 很棒
將警報視爲錯誤 這樣它就會強迫你和你的團隊去解決問題
太容易會忽略那些黃色的警報
而且過後再回來處理它們然後你沒有
那整個就成技術負債了
而且
你覺得這樣有用嗎 如果你...
搭建也許一個1.0版的新項目
一個新應用 然後你對你的團隊說我們要發佈1.0
但我們沒有繪圖還沒有
上面沒有任何圖標
我們要發佈它 然後將那些在.1版本里做補充
那根本行不通 沒人會那樣做這就是用戶如何與你的應用互動
嗯 實際上是許多但不是所有用戶與你的應用互動
許多人利用輔助功能與你的應用互動
該功能已嵌入操作系統
所以 你爲什麼要發佈你的應用
爲需要它或使用它的人帶繪圖但裏面又沒有輔助功能？
那不公平
解決關於輔助功能的技術負債
爲其添加支持輔助功能
是你的用戶界面的一部分和繪圖一樣
它是嵌入Xcode的
對此你可使用InterfaceBuilder編程也容易
我們有許多能識別區域的API
你應該用那些 你可以少寫些代碼
儘管那個不算新的
但這些是
Dimension和MeasurementFormatter若你有菜譜或健康類應用
你一直在metric和imperial之間轉換
在你自己的代碼上
不要那些了 用我們秋季將發佈的代碼
我們想要你支持Peek Pop和Quick Actions
好嗎？
你知道嗎如果你現在有iPhone 6S
你可能已經習慣...我們來按這個看看它會做什麼
沒有 我們按那個看看它做什麼
那個會做點什麼很難察覺
那會有多棒如果我們的每個應用
已經支持Peek Pop和Push及3D觸摸？
接下來
要運行Swift Migrator用Xcode 8開發者預覽
如果沒有遷移你的代碼提交錯誤報告並告訴我們
那我們就有機會修正它
等你在秋季實際運行Migrator
在Xcode 8最終版本上
它就很可能可以用
如果它不能用
我們用API解決我們自己的技術負債
公共界面是一樣的
但執行可能會在不同版本之間有變化
可能是你使用任何API的方式
不是我們所預期的
你就有一個邊緣案例
那你也將其告訴我們這就是爲什麼我們做這些預覽版
我們想要你提交錯誤報告
報告並不只是走廊的玩笑
不只是在開發者論壇寫文章
也不只是發送電郵給Apple
提交錯誤報告的恰當方式是...
是這個BugReport.Apple.com
填寫空白處
你填完後會獲得一個號碼用那個號碼你進入
併發帖到開發者論壇
有很多Apple工程師瀏覽開發者論壇
我們想聽聽你的意見
但當你在那些組裏提交或報告一個問題
你沒附上錯誤報告號碼
我們很難在內部跟進和追蹤它
所以 得那樣做
接下來
你可能...
不是非常喜歡向我們提交錯誤報告
因爲你提交它們了之後...
然後你等啊等 石沉大海
你沒得到任何迴應
用Whitney Houston的歌詞說孤單的錯誤報告去哪兒？
它們好像進入一個巨大無比的黑洞因爲你永遠得不到任何迴應
或者你覺得也許
你在一個工程師面前得到迴應而那個工程師
有點不理會你所說的
我只是想和你們保證不是那樣的
我加入Apple後的第一件事就是我搜索了一下
錯誤追蹤系統問題追蹤系統
以尋找我當時作爲一個外部開發者時提交的所有問題
當中許多問題都有跟蹤我只是從未得到來自它們的任何反饋
我想跟各位說 如果你的確提交了錯誤我們的確會查看它們
另一件事是 你可能花很多時間提交錯誤
很多時間你可能是在做一些樣本代碼
你在試不同的設備檢查迴歸
這樣做很好
你花了可能半個小時或一個小時
然後你提交它 然後它回來說是個複本
然後你就覺得 剛浪費了生命的半個、一個小時
爲了別人做過的事情
我只想簡單講講複本
因爲複本首先不是表決系統
不像是 如果你複製別人的錯誤 一字不漏
然後你用同樣的東西提交一個新錯誤
我們說 對此有一個表決我們會先修正它
不太像是那樣子
我們怎麼處理它們即使它們是複本
只是意味這這兩個是相關的
我們也需要複本不是爲了表決的目的
但因爲我們可以有五個人提交相同的根錯誤 相同的根問題
前四個
沒有給我們足夠的信息去找到它
但也許是你的報告也許是你的第五個
儘管是個複本
但是當中的信息是我們所需的讓我們找到問題
事實上
一個在Apple待了幾十年的工程師
說了一句很風趣的話
在幾個星期前
Paul說每個錯誤報告跟一片雪花一樣獨特
應該是這樣的
好 那麼小結一下今天先講的部分是
修正你的警報替代不建議使用的API
本地化你的應用 如果還沒的話
使用輔助功能
或支持輔助功能獲取Peek和Pop
然後看看下一個版本的Xcode
給我們一些關於它的反饋
接着講資源目錄
是時候爲各位講講資源目錄
如果你還沒有文件在你的文件導航裏 像這樣
去獲取它們放在資源目錄裏像那樣
方法...
是你從文件菜單中添加一個目錄
你無須只添加一個目錄
你可在項目中添加許多目錄
也許你正在做一個應用是個卡片遊戲
那麼 你有個目錄用於卡片的正面圖像
第二個目錄用於卡片的背面圖像 我們可以做到
舉個例子 你可能讓你的圖形設計師
從App Store免費下載Xcode
爲你創建資源目錄
然後發送給你或在代碼庫裏檢查
我們也能做到
複製文件到資源目錄時它們正是複本
我們從不參考原始位置
那麼 它們的確參與版本控制
爲了遷移你的項目你點擊big plus鍵
選擇“從項目導入”
我們會給你一列合資格的資源
從文件導航遷移到資源目錄
像這樣你遷移了你的圖像資源
如果你之前...
習慣使用bundle APIpathForResource等等
那已經不能再用了因爲一旦我們編寫了應用
圖像不是周圍自由浮動的所以你找不到任何東西
但如果你使用...
已被命名的圖像
我們可找到它們若其在資源目錄裏
而且我們可以找到它們如果它們只是自由浮動
仍在你的文件導航裏
這個API出來已有一陣了API圖像名有許多優點
超越僅僅只能從圖像目錄中找到內容
資源目錄
例如 它內部緩衝
第一次你以名稱找一個圖像
我們加載它我們給一個參考
第二次你以名稱找同樣那個圖像
我們對同一個東西返回另一個參考
那不是文件內容的API如何運作的
每一次文件內容會加載新圖像
它更加高性能
尤其當你滾動表格使用已被命名圖像時
我們支持一個資源的多個表現
所以 使用已被命名圖像
你給它一個名稱
API名稱
你讓框架考慮你正在運行的設備
考慮顯示屏的分辨率 視網膜
非視網膜 Plus設備上的視網膜
而且可能有其他區別因素
對於媒體資源例如設備中的內存容量
或者設備所支持的Metal的版本
你得到一個圖像返回
有兩大類資源類型對於你可以考慮的圖像
我們有縮放圖像
例如PNG
JPEG
然後我們有單矢量圖像
比如PDF或SPG
我們對待它們有點不同
在逐個資源的基礎上
你可以說這個資源會變成矢量型
那個資源會變成縮放
你通過指定比例因子來實現
我講講一些縮放圖像
然後再講講矢量圖像
對於縮放圖像
在這個例子中我們已經叫你們提供三個不同版本的繪圖
從1X設備非視網膜到2X和3X
如果我們找不到由於你沒有包括
2X和3X 我們拿1X的圖像將它放大
它就變成
在更高端設備上或更高密度設備上使用的圖像
同樣
如果你只是提供給我們3X的繪圖我們在運行時間將它縮放
這兩個情況不是那麼理想
這個情況中 若我拿1X圖像將它放大用於iPhone 6S Plus
它看上去非常凹凸不平
它會有一種視覺上的效果叫圖形失真
它不是很理想
嗯 你的客戶不會喜歡它
這個 初看時你能會想 哦
我只是提供3X繪圖讓你縮放
但那樣有個巨大的問題 因爲
要縮放一個3X圖像我們要打開一個3X圖像
它非常大
然後...
我們提取像素 爲它創建一個縮放版本
它可能是一、兩個數量級更大
所以 想想這個
你在使用一個設備 比如5S、5C
上面沒必要用3X圖像但你只提供3X圖像
那麼 我們從使用的內存的基準線開始
沒問題但是然後我們得加載3X圖像
轉換它 去掉3X圖像然後留下這個縮放的版本
這樣臨時造成一個內存峯值如果你行的話
可能會沒問題
如果你行 我的意思是如果你幸運的話可能會沒問題
但 假設你滾動表格視圖
你在滾動時我們得不斷做這個
突然你應用的內存使用一下子膨脹了
知道當你使用過多內存會發生什麼事嗎？
有誰知道的 大聲說出來
對 沒錯我們終止它
它死機了
由於你沒有提供繪圖所以 請提供繪圖
事實上 你可以非常輕鬆地用進程來實現這個 或者
不是用進程 而是Automator工作流程
你給它一個3X圖像讓它縮放 給它個名稱
縮放它 給它個名稱 很好
把那些扔進你的資源目錄
而如果你想要 你可以
這是另外一個最佳實踐使用這個命名慣例
非視網膜的只是Align Justify.PNG
然後添加2X、添加3X和其他兩個
然後當你拖放它們三個到資源目錄
我們找到一個命名慣例
我們創建一個資源用三種不同的呈現
相對於三個不同的資源
對於矢量資源
矢量資源很神奇因爲文件包括
一套如何繪圖的指示
相對於讓它預先柵格化
它是同一個圖像 不是三個版本同一個圖像縮放到不同的大小
當你指明你要使用
單矢量縮放提供一個矢量圖像
在構建時間 我們將它柵格化成我們需要的不同大小
對你來說更簡單
這像是你可能會對工具欄圖像會做的事
以及導航欄圖像
看 縮放因子 單矢量
也可能二者結合
你可以設置縮放因子爲矢量和比例
你提供給我們一個矢量圖像
好像方框裏那個叫做All
然後 如果你想覆蓋任何其他比例因子
你只要提供那些作爲其他矢量圖像
或PNG、JPEG縮放圖像
然後當我們創建它如果你丟失某些資源
我們會根據矢量圖像將那些柵格化
在那個All方框或目標
否則 我們會使用所提供的縮放圖像
Xcode 8中新的功能是你可以調整壓縮
快出來
你可以調整壓縮那麼 比如對於一個JPEG圖像
你想用有損數據壓縮但也許對於一個PNG
我們不想要任何壓縮因爲它將是
工具欄上的一個項目
我們不想看到它有任何僞影
你可解決的一個問題通過用資源目錄
以防如果柵距還不夠強
是修正該問題或爲我們解決一些問題
我們指的是圓角
圓角的問題是我們有自適應的UI
那麼
你的按鈕可能包含文字標籤契合得非常好
直到應用在另一種語言中運行
然後它改變了大小
當我們改變按鈕大小時我們會想保留
它漂亮的圓角
你獲得圓角按鈕的方式首先是
Interface Builder裏面 選擇一按鈕並指定一背景圖像
然後我們將其應用爲背景
在這個例子中我有一個資源叫做圓角矩形
我將它應用爲我的背景矩形
但你可要看到在兩個不同大小的按鈕中當它拉伸之後
看上去非常糟糕
那麼 你可修正的一種方式是
你一直都在用的方法就是使用可拉伸圖像
你說 我想在兩邊都保留X數量的像素
行 但是今天講座的一個主題是
你寫更少的代碼而更多地依靠框架
以及我們提供的工具
所以 這個是被嵌入資源編輯器
叫做資源切片器
你可以使用它去指定
紅色的部分 不要拉伸這些
不要使它們變形
照亮的部分 重複這些像素
通過那樣做 你得到
完美的圓角而且你不必爲它寫任何代碼
這是你的圖形設計師可以做到的事
作爲資源目錄的一部分
好的 接下來
講講設計模式 叫做依賴注入
首先講講我們想要修正
或嘗試改變的 透過引入這個
我們有UITextField它用代理
代理叫做UITextFieldDelegate
好 當中它包含關於文本框的方法
比如textFieldShouldBeginEditing
OK？
我們有WCSession
WCSession代理
代理中有什麼？關於WCSession的方法
你可以看到這當中的模式
我們用這個來打破
我們有應用代理 當然它有方法
關於應用程序對象
但我們在當中也插入其他東西
比如數據庫 實際上最後什麼都有
包括廚房水槽 堆疊起來
我們這樣做因爲很容易
通過應用程序對象返回
獲得共享對象計算它然後檢索它
但它是太過強的耦合
在你的視圖控制器和應用代理之間
而你的應用代理不是真的需要在那個位置
反而...
像這樣的一個模式 當中每個視圖控制器指向某些共同的對象
也許是你儲存在你的應用代理中
你可以轉換它
利用依賴注入你將模型對象
那個視圖控制器所有的然後你將它向前傳遞
給下一個視圖控制器當視圖控制器呈現時
目的是你給視圖控制所需的一切去運作
那麼 對於Mail你有一系列郵箱
顯示一系列郵箱的一個視圖控制器
會有一個模型對象代表一系列郵箱
你點擊當中的一個郵箱
另一個視圖控制器會顯示那個郵箱中的信息
中間那個
然後你向前傳遞那個郵箱
它顯示那些然後你繼續向前傳遞
你那樣做的方式 以一個Segue
是覆蓋prepareForSegue然後將它傳送至repair
你那樣做的方式如果你是在做編程展示
是對實例化中所見按鈕的行爲中
視圖控制器將模型對象傳遞到那
該技術好處是...
你的視圖控制器現在是獨立的
他們沒有這些強烈的聯繫和依賴
你可以不斷重複使用它們
返回的話 你有一些選擇
你可以做我們所做的通常是寫一個協議
執行它
於是有通知返回說視圖控制器被撤消
然後也許更新你的模型你可以傳遞一個閉包
你可以按參考傳遞對象模型
或者 你可以
如果你使用在線segue
與覆蓋prepareForSegue是一樣的
以兩種方式發生前進和後退
我們喜歡這個的另一個原因是...
因爲視圖控制器很像樂高積木
它們可以單獨地重新排列
以創造新的結構
在此情況下iPhone SE的整體用戶體驗
對於你的應用將是不同的
不同於iPad 12英寸iPadPro 12英寸
如果你的視圖控制器是獨立的要做到那樣很容易
好的
那麼 去年在 WWDC
我做了一個演講 是關於...
Playgrounds、現代化UI
及Objective-C和Swift互操作性
自從那以後 我們添加東西到Playgrounds
是我們去年還做不到的東西我想向大家展示其中一些
用那
我們來做個演示
那麼 這是那個元素週期表應用我去年向你們展示過
從那之後 它被更新了一點
例如
顏色有點變化
不是按物質的狀態氣態 液態
現在它是按物體的種類像過渡金屬 金屬 鹵素
那類的東西
我們還添加了支持以將它展開於是它實際看上去
就像個元素週期表那樣是個集合視圖
我要給大家展示部分代碼
這個代碼庫改動的其中一項自從上次你看到它之後
是數據模型已移至Swift
現在我有一類代表原子元素
像是氮或氧
還有一類代表一個集合
所謂的 不好意思 週期元素
這個類將元素實例化
單獨的原子元素
通過在屬性表中讀取
我將其也儲存在我的應用這裏
但既然我已將數據模型移到Swift
我可向大家展示Playground中的數據模型
去年我做這個時 先打開一個新的Playground
新建文檔 playground
去年我做這個時 我只是在代碼和Playground之間複製粘貼
當你不斷這樣做時
你的Playground變得很大有很多代碼
於是 現在Playground有子文件夾
用於源代碼和資源
我可以將我的模型對象
放進源文件夾
然後我們在幕後編寫它們
然後隱式導入其所有公用符號
到Playground中使其供你們使用
這意味着...
如果我將這個資源文件 我的屬性列表
將其放入資源文件夾
使其對Playground可用
我可以到Playground這裏
實例化一個原子元素的例子
這是鐦
像那樣
所以 能夠將這些源文件
自動導入你的項目中
從源文件夾或資源文件夾中
我認爲是個強大的方法
使你的Playground本身保持小而精
同時當中又能含有更多內容
那麼 除此之外自從去年以來還發生了其他事...
影響了這個應用
國際純粹與應用化學聯合會
確認發現了4種新的元素
於是一下子 我在應用中嵌入的這個屬性列表文件
看似不再是個好主意了
我想我們可以修正它我們就把它放上線
於是我建立一個小小的網頁服務器
這次放一個JSON文件包含所有元素
然後想法是 當我的應用開啓時
起初它會使用嵌入的數據文件
那樣如果沒有網絡連接的話
仍然會有東西讓客戶看
這也是我們推薦你用的模式
然後我們做個背景檢查
在其中我們會檢查是不是有文件的更新
如果有 我們將它放進緩衝文件夾
然後我們在應用裏指向它
我要在Playground裏作出網絡請求
爲此 我們有一個類之前稱爲NSURL Session
現在稱作URL Session
顯示在這裏
我們抓住這個Session...
我喜歡這個Session的原因是當我在第24行喚起它時
我給它一個完成處理程序
因爲這個在背景中異步運行
去到網絡請求讓我的代碼繼續運行
當請求要麼超時
要麼數據進入時做這個回調
在第28行的回調中
你可以看到我打印出一個元素在這裏
但你實際上看不到它在那兒
那是個問題
所以 想想這裏在幹什麼
我們有一運行中Playground我們讓它實施背景操作
在未來一個不確定的時間
我們得到回調說這是我們想做的
但Playground通常像腳本一樣運行
從第一行一直到末尾 然後結束
關鍵詞是“通常”但不一定是這樣
我們可發起一個運行循環
在Playground中執行異步操作
爲此 我們導入一個新模塊叫做PlaygroundSupport
然後你讓Playground做無限運行
然後它永不停止一直在處理
那麼 現在如果我往下滾動到這個部分
你會看到我得到回調
那是鎘
好了
接下來我要擴展去年的內容
去年我展示了一個繪圖一個圓角的“核心圖像”的圖像
這次我不想繪製一個圖像預覽它
在Playground中做一個全表格視圖控制器
Playground中有些新功能可以讓我們做到
我們就打開一些空白
在我的應用中
叫做View
我要做一個UI表格視圖控制器的子類
這就是
選中的區域
我執行那兩個方法是每個表格視圖
和表格視圖控制器都需要有的
對象數量 或者 抱歉 而是...
項目數量 自寫的索引路徑和返回本身
我想看到它變實時
所以這次我們要做的是...我們實例化視圖控制器
然後使用PlaygroundSupport模塊
是我已經導入的就在第4行的那個
我抓住Playground的實時視圖
將那個視圖
變成Assistant Editor它已不再爲Assistant Editor
而是實時視圖
看到沒？是實時表格視圖
它可以滾動 是活動的
謝謝它不只是個靜止圖像
它是個真正互動的表格視圖
如果你想嘗試我們的部分新代理方法
或現有的代理方法
可將其丟進Playground然後和它們互動
無需再把這個放入模擬器中
現在我把它們放在一起
具體來說 我有了這個背景網絡請求正在發生
在我檢索數據後我要重新加載表格視圖
我給大家展示看看
首先 註釋這個
爲了向你們證明它完全從那個網站加載數據
我要更改這個...
於是我有一個空白的元素列表
好
我有一個空白的元素列表
當網絡請求返回它是回調 它被指定了
我剛拉進的新元素列表
然後我們重新加載表格視圖
好的 繼續
那是你所期待的嗎？
不是我第一次看到時所期待的
那肯定是Xcode中的錯誤
我在Apple.com提交錯誤報告
但它實際上不是
它是我代碼中的一個錯誤 不管信不信
它是我代碼中的錯誤現在看發生什麼
我們有這個背景操作進來
這個背景操作有一個背景操作
不是在主線程上
UI在主線程上
那麼
在我的閉包中完成處理程序
我不能從那裏更新主線程
當我重新加載表格視圖時我嘗試這麼做
當我點擊單元格
我們使其無效這就是爲什麼它們會刷新
然後你可以在當時看見它們
這個東西我們可以修正我們在Swift 3有新的東西
是Swift API用於Grand Central Dispatch
所以
不用我們之前有的C API
現在我可以說一個調度隊列排在主隊列
什麼類型的操作？異步的
我們不再需要那個
現在是我要在主線程上做的
現在它彈回主線程
就在那兒
調度隊列 謝謝Swift中的調度隊列
Swift中的實時視圖和無限運行
讓我們轉回到幻燈片
謝謝那麼 小結一下
前面所講的
或者剛纔演示的重點
一些其他小建議
當我拖動那些文件到源文件夾
或資源文件夾時它們是被複制而不是被參考
而且 只有標誌爲公用的方法
標誌爲公用的方法、屬性、數據類型等
纔會在Playground中可供你使用
你可能添加公用說明符 因爲
Swift中默認的可見性說明符是內部的 不是公用的
我提到使用緩衝文件夾
現在 我們仍然有些設備是容量受限的
客戶嘗試查看操作系統的新版本的更新
他們發現不夠容量
所以 在那種情況下當設備容量不足時 我們所做的是
我們查看緩衝文件夾
刪除在全部應用程序緩衝文件夾裏找到的任何東西
這樣我們就釋放了空間
我們需要你幫忙做這個
如果你正臨時下載數據你沒存放在緩衝文件夾
請存放在緩衝文件夾
接下來
我覺得會很乾淨利落的是將
又這樣
將...
使用依賴注入的視圖控制器
重新排列使之適合不同平臺
那麼 我要轉回到演示
打開Bluetooth
將視圖控制器放在tvOS上
好 就是這樣
我已匹配Siri遙控器到我的Mac所以我可以通過模擬器來使用它
和之前的代碼是一模一樣的
一樣的視圖 一樣的表格視圖所有的東西都在那
我可以翻過去 看到...
週期表 像這樣
我得到漂亮的電視效果當我滑動表格單元
及其集合視圖
是相同的佈局代碼和視圖控制器
和我之前有的一模一樣
呃
幾乎一樣
我添加這行代碼 這樣當我...
選擇集合視圖單元時你可以獲得重點那個項目
且我使用OS Compiler指示
說明這僅適用於tvOS
除此之外 都是相同的代碼
這有點讓我想到一點如果你有想過你
將一個應用從一個平臺拖動到另一個平臺
但沒有任何實際改動你可能是做錯了什麼
然後檢查人機界面指南
只爲了看你如何讓那個平臺和那個應用
在那個平臺上更自然 感覺上更...
更像它是屬於那裏的
我們來舉個例子
假設你開發了一個應用是做類似基於雲的會計
然後也許你有一個iPad版本在這個iPad版本上
用戶填寫發票
合理
不合理的是 在我看來
要在60英寸的電視上填寫發票
你不會那樣做你怎麼會那樣做？
這不是個你會在tvOS開啓的應用
但是你的應用的iPad版本也許有一些很棒的可視化效果
關於公司是如何運作的
也許你有一些圖形或圖表
那些在電視上會很棒
你可以有一個應用版本
具備實時狀態面板顯示公司的運作
也許在公司的會議室
它就放映出來 播放動畫顯示更新信息
它是相同的數據模型是相同的數據訪問
但你將數據轉化得讓它更適用於
它運行的平臺
思考一下如何將我們擁有的相同的數據
轉化成可用於那個平臺？
總結
將你的應用現代化是個不斷進行的過程
我們希望你儘可能多地依靠框架
若你可擺脫你應用中的代碼
使用我們在框架中提供的代碼
你可以維護更少的代碼
我們希望你那樣做
我們希望你今天開始查找Xcode的問題
用Swift轉換器
希望你用更少的對象間依賴關係來設計打造你的應用
這樣你會更容易重新編排你的應用
最後 我們希望你考慮將你的應用引入我們的其他平臺
通過轉化你的數據模型
有一些相關的講座你可以查看
就是這些
除此之外 你可以查看
這場講座的鏈接我就講到這
謝謝各位