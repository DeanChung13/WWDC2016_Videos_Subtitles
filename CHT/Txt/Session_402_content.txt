Swift的新特性
早上好
歡迎來到“Swift的新特性”
先說一下Swift 3的發佈目標
Swift作爲開源工程發佈
六個月前
這麼做的重要原因不只是爲了
把代碼推到GitHub上
更是爲了創建一個開放的社區
來推動Swift向前發展
Swift 3是Swift的第一個重要更新
作爲社區的產品
我們談一下社區的演進
和這個語言的演進過程
Chris會講一下
關於社區對Swift 3做了什麼
這次發佈的另一個重要方面是爲了把Swift帶給更多的人
現在的軟件生態系統非常多樣化
人們做很多不同的事情
在不同的情況下
他們或者做服務器端程序
還有應用和其他的東西
我們想讓任何人都能用Swift
我們還會討論Swift在Linux上的重要進展
這真的是Swift第一次重要的更新
自從Swift被移植到Linux上
現在仔細看看這次發佈
Swift已經被不斷迭代和打磨
在過去的兩次發佈中
基於使用它的開發者的反饋
當然 還有來自社區的反饋
自從它開源以後
關於Swift 3的重大事件
我們想讓重要的基礎都固定下來
然後我們能從上面繼續前進
最後 可能是最寬泛的目標
我們很想讓Swift變得更迷人
不應該這樣麼
Swift想成爲一個強大的工具
給開發者用
他們可以用它做一些驚人的事情
這是我們想要的
現在 這可能是比較寬泛的目標
我們努力聽取反饋
從使用Swift的應用開發者那裏
Apple內部如何使用
我想說說我們自己怎麼使用Swift
尤其是去年在我們發佈的系統和工具中
重要的不是我們在Apple使用Swift越來越多
是我們使用的方式越來越多
不僅是寫應用
我們現在內部框架中也在用Swift
Agents 和 Daemons類似這樣的加強了
這種操作系統的深層體驗
如果你看一下 你會發現對Sierra和iOS 10
你會看到像新的音樂應用
使用了大量的Swift
Sierra裏的終端應用
和新的日誌記錄聯繫緊密
也是用大量的Swift
通過Agents和DaemonsSierra中新的畫中畫功能
完全是用Swift寫的
現在看看工具
Xcode也使用了Swift
比如 Xcode 8中的新文檔查看
是用Swift寫的
和爲iOS設計的優美Swift Playgrounds
也是完全用Swift寫的
所以我們Swift做了很多
這讓我們集中精力解決各種不同的問題
無論是性能問題 比如內存使用
保證常規調用正確 等等
在各種情況下 保證Swift可用
我想講一個特別案例
就是Dock
有兩個原因
一個是它沒有人們想象那麼簡單
它不僅僅是桌面的一個條
它代表一大部分macOS的桌面管理體驗
像Mission ControlLaunchPad Spaces
我們認爲他們是Dock的一部分
第二個原因是
這兩次的發佈中我們已用了Swift
在El Capitan開始採用Swift
我們有兩個版本來對比Swift的使用
在Sierra中Dock有很多改變
首先 絕大部分MissionControl被用Swift重寫
輔助引擎已經用Swift重寫了
爲什麼我們這麼做
我們不是爲了重寫代碼而重寫
這使代碼質量提高了
通過接入新的特性和重構
同時有一些新的功能需要實現
所以這是重寫代碼的合適時機
從工程角度 看起來是什麼樣呢
給你點提示Dock有差不多20萬行代碼
有差不多幾萬行Swift
在El Capitan和Sierra
項目中Swift的代碼超過兩倍
實際上 通過重寫
替換掉了大量的C和Objective-C代碼
這裏的影響不容易衡量
因爲我們還做了重構和添加了新特性
但我們看到大約少了15%的代碼
在用Swift替換掉C和Objective-C時
這包括其中新加的特性
直接結果是
這個工程在Sierra中變小了
比在El Capitan中
現在
有更多的統計
我認爲最重要的是
寫Dock的工程師喜歡用Swift
他們沒有被強制使用它
他們是自發的他們很想用Swift
他們的經驗是感覺
他們更容易的寫出他們想寫的代碼
他們喜歡Swift的安全的特性
讓他們堅信他們的代碼很棒
我們說說Swift的開源
如果你還不知道請訪問swift.org
你可以找到各種貢獻的方式
比如 你想做
最專業的編譯器黑客
你可以檢出源代碼來找漏洞
也有其他方式你可以貢獻想法
我們想給Swift帶來什麼
現在 如何運作這個項目很重要
這意味着保持平等
我們非常想開放 透明和自由
每個人都能參與進來推動它向前
你能看到我們做出改變的合理理由
這真的非常重要
所有語言的改變
無論你在Apple工作
或者你是應用開發者
你有想法想要改變Swift
大家用的方法都一樣
我認爲這很重要
這意味着非蘋果工程師可以直接
提交代碼給編譯器和其他儲存庫
我們想授權社區來推動Swift向前
第三 我想它同樣重要
對這個項目是面向代碼的
我們認爲每個人能貢獻代碼時
不會感到歧視很重要
不會被不專業的方式對待我們很注意這些
最後這個項目的開源許可證比較寬鬆
這同樣重要因爲我們想讓Swift
以Apple不曾設想的方式使用
這也是開源Swift的一個目標
我們想讓大家用各種方式使用它
同時社區也有很好的專利保護
這是我們爲何選擇該許可證的原因
你可有很多方式跟隨
Swift主幹開發
你可以檢出源代碼或者編譯編譯器
通常我們也有可下載的快照
你可以從swift.org上下載直接在Xcode中使用
或者在Linux上使用
其他支持的平臺
我們也會提供快照
更棒的是在Xcode 8中的Playgrounds
全部支持這些快照
這是一個很棒的方式來試驗Swift伴隨着它的演進
同時你不再需要重啓Xcode
如果你想用其中的工具鏈
這體驗很清爽
在試用最新版本的Swift時
所有的開發都在GitHub上進行
不止一個工程
有一系列的代碼庫
你可以在swift.org上找到它們的描述
它們可以大體被歸爲三類
語言和它的演進過程
一個包管理工具和一個核心庫集合
我們挨個說一下
包管理工具發佈當Swift開源時
還處於早期階段和活躍開發階段
GitHub有逾1,000個軟件庫
使用包管理
它是什麼
它是一個跨平臺的 包管理用來編譯
給Linux和0S 10打包
我們主要想編譯
讓社區給Swift打造一個生態系統
我們認爲把Swift帶到其他平臺非常重要
像服務器端
它爲順暢的開發設計
它容易上手最小化配置
容易解決依賴
目的是寫代碼然後運行
我們認爲對Swift來說包管理如此基礎
它是一個長期成功
我們持續提交把
包管理集成到Xcode隨着它更成熟
我們討論下核心庫
什麼是核心庫
在iOS中有很多很棒的API
macOS tvOS和watchOS中
其中許多基礎API
我們想讓很多人能使用它
所以核心庫代表
可選擇的實現了不綁定Objective-C運行時間
Linux上的核心API
還有其他Swift會移植到的平臺
有名的例子包括像XE測試組件
你可以用來寫單元測試
一個基礎的子集
需要可移植並不會綁定到Cocoa
同時進行libdispatch移植
然後你可以用這些併發API
這些工作都剛開始進行和Swift開源同時開始
但現在已經有不少了
在Linux上的基礎庫
支持許多很棒的API像操作URL 日期
還有數據 UID等等
我們希望在未來會變的成熟
隨着社區希望更多的功能
現在 來討論下語言
Chris會講很多具體的變化
我想說說這些變化的演化歷程
這些都在Swift軟件庫中發生
比如現在你想要改變Swift
你感覺有些地方很爛
重要的開發中有些地方出了問題
可能兩年前這種設計比較好
但現在應該重新考慮下
或有些很棒的東西我們應該加進去
能給開發者帶來全新的機會
沒關係
你可以從郵件列表開始
告訴其他有相同興趣的開發者
開始觀察
這是個好想法麼它的好處和弊端是什麼
一旦有足夠的關鍵論據
它會成爲一個提議
這裏僅是一個用markdown寫的白皮書
可以在GitHub上查看
這裏有一個實際的提議
通過pull request提交等待審覈
左下角是數字標識 SE0046
每個提議都會被數字標記
我們通過它指定
實際的提議在Swift變化中
Chris引用這些提議
在他講Swift的變化的時候
這些提議是大家建議修改
Swift的方法
合理的建議爲什麼我們需要做這些改變
具體的改變應該是什麼樣
優點和缺點
一旦提議合理將會被接受
之前的審查在接受進入倉庫是開始
審查還是會被開放討論
在郵件列表中但這次會集中
在具體的提議不僅僅是抽象的想法
一段時間後Swift核心團隊
一小部分單獨的推動着項目向前的人
會看社區的反饋
看優點和缺點
根據社區的需要做最終選擇
他們要考慮很多怎麼把提議融合到Swift中
這有意義麼一些提議會被駁回
“嘿 當前這樣的話
行不通
所以回去考慮和改進一下”
或者這對Swift永遠都不合適
有時提議通常也會被接受
通過改進
無論被駁回或者接受所基於的理論都會做記錄
所以每個人都可以回頭看看這個語言的發展史
同時明白什麼被提議
爲什麼被提議爲什麼被拒絕或者接受了
你可以看到所有的提議
通過Swift-evolution倉庫
這個是爲Swift 3建立的
由所有人推動
下面由Chris講一下都發生了什麼
謝謝 Ted
因爲有很多其他事
不幸的是我沒有時間準備演講稿
我打印了所有的提議我想我會給你們讀一下
聽起來不錯吧
開個玩笑
那麼我們將要幹什麼
之前我們說我們想要把Swift的核心體驗變得很棒
不僅是語言
也包括標準庫
使用像Cocoa主要API的體驗
還有使用工具的體驗
我們會挨個介紹
Swift 3的一個目標是代碼兼容
這是個很大的目標這意味着我們想
無論你在應用中寫了什麼樣的代碼
我們要保證當Swift 3發佈的時候
不會有其他問題
這是一個相當困難的任務因爲這不僅關係到
我們用的分號還是逗號
還關係到關鍵的API
做盡可能多的工作讓Swift 3
兼容 然後我們可以一直使用
你寫的代碼
這裏有幾個不同的方面
一個是整合這些到
剛纔Ted說的Swift-evolution提議過程
Swift 3之後的提議
都應當好好考慮下代碼兼容性
現在 我爲最重要的方面Swift 3中最大的改變是
影響我們每天寫的代碼的API
我們深入看一下API命名
先大體瞭解下
API是一個基礎組成
當Apple在創建這個平臺的時候
是你每天使用的重要部分
你用它來創建應用
命名規則
和設計方法
對它的影響很深遠
在Swift 3中
我們會思考寫這些API最好的方式是什麼
我們應該更詳細些麼
還是應該儘可能的簡潔
我們發現最重要的是要清晰
能夠清晰的被使用
我們對API進行了優化
提取最重要的基礎信息
去掉其他不必要的信息
我們看幾個例子給你們展示下
實際操作中我們的一些思考和這麼做是爲了什麼
這裏有幾個Swift 2中的API
我們從數組和往裏面添加內容開始
在Swift 3中 被削減了一半
動詞添加現在操作是操作了
contentsOf是傳進參數描述
現在它是傳遞參數的標籤
調用的時候使用
這能讓它更清晰一些
插入索引 這個已經很合理了
但是這個索引沒有額外的信息
只是重複類型信息最好去掉
在基礎庫中 我們看看NSURL
它有個fileURL方法或者屬性
看看它它返回一個布爾值但不明顯
如果用is開頭將會很清晰
另一個簡單的例子是URLByAppendingPathComponent
它去掉了多餘的返回類型
因爲沒有必要
有非常多的像這樣的改善
把所有的這些加起來
在10:00將會有個關於這些更詳細的介紹
我們看看Objective-C和CAPI在Swift中如何工作
因爲它是你使用API時非常關鍵的一部分
影響你在Swift中的體驗
我們做了很多提升其中一個我們叫import爲成員
這是一個典型的C的核心圖像API
在Swift 2中它會被當做全局函數引用
好的 這樣可以
但這不符合Swift開發者用的API
所以我們引入了一個新特性允許API作者給他們的API標記
用這個宏來把它封裝爲一個屬性當做一個方法導入
提供一個優美的面向對象的API
就像核心圖像和dispatch中的
你也可以在你的代碼裏這麼用
另一個是泛型
去年在Swift 2中我們引入了輕量級的泛型
我們使用它來引入類型結合到Swift中
但Apple的幾個框架
用其他方式採用了輕量泛型
比如 自動佈局和核心數據
在Swift 3中我們可以引入完全通用泛型
到Swift 3中作爲泛型類型
就是說許多冗餘的類型信息
可以不要了
我們講一下
關於常量
在許多Cocoa API中一種常見的模式是
用字符串作爲枚舉
我們這麼做因爲在C語言中最好的方法是
寫一個開放的可擴展的枚舉
但這有很多缺點
這些枚舉 變成了全局常量
在Swift中被引用爲全局的
使用的時候需要輸入很長的名字
在很多地方都不是很好一個是完全類型不安全
你可以傳遞一個任意的字符串但它不會工作
同時它還不好因爲它污染了代碼的完整性
讓人感覺不像Swift API
這是對Swift APIs來說非常好的發展方向
Swift 3中得以解決
現在API的作者可以給typedef添加一個簡單的屬性
不同的是它變成了Swift中的強類型
你可看到通過常用的NSNotification.Name
在這個例子中是在UserDefaults範圍中
現在可以通過點屬性來調用
最棒的是它經過了類型檢查
所以在SDK中它有巨大的提升
通過這一週大家就可瞭解這些新的特性
這周有許多很棒的講座
我們深入瞭解下核心語言
通過這些改變我們回頭看看參數標籤
快速介紹下如果你在Swift 2中有這個函數
你應該三個中取兩個參數使用
爲什麼這樣
因爲沿襲了Objective-C的命名和設計模式
我們想要在Swift中和Cocoa的體驗一致
當然在Swift中從根本上改變了Cocoa的工作方式
現在我們可以把參數標籤給所有變量
可以讓Swift表現更一致和可預測
我們說說泛型
Swift泛型語法 我認爲非常優美並富有表達力
它能讓你知道函數主要是幹啥的
用一個簡潔和友好的方式
不幸的是 當你開始使用更高級例子
你需要添加泛型約束
基本上是這些函數的第二功能
但是它們卻在第一位置
使代碼變得難讀
Swift 3中 我們拓展了語法並修正了這個問題
現在簽名被放在了前面
約束是第二位了
我們討論下未使用的結果
這裏有個簡單的函數它加上一個數字並且返回
在Swift 2中這段代碼不會被警告
即使它是一個漏洞
可能你忘記把它賦給一個變量
可能你完全調用錯了函數 對麼
在Swift 3中你默認會得一個到警告
它很安全 這很棒
這在其他地方也很好
因爲對複雜例子的組合也很好
當然不是所有函數都這麼理想化
在實際中它們可能有副作用
你可能會想如果有副作用
也許我就是爲了這樣使用它
這沒有問題你可以把它賦值給下劃線
告訴編譯器或者維護你代碼的人
你認爲這個函數返回的東西
你明確表示你不關心
對麼
現在 不是所有的函數有這個屬性
有些函數像一些異常
有副作用作爲它們的首要功能
返回值通常是你第二位你不需要關心的
在異常函數的例子中你可以使用一個屬性表示
我知道這個返回值是第二件事
不要產生警告如果我沒有使用
一個友好的系統
我們說說Swift 3中最令人興奮的地方
被去掉的特性
你可能會問爲什麼這麼做
但我們真的讓Swift 3變得很棒
Swift 3是這些的總和
許多部分被放進Swift
在我們真正明白什麼應該被編譯進去
和我們該往哪裏走
所以我們回頭想了下Swift所有的屬性
無論它是何時被引入進來的我們問一下基本的問題
若該特性還沒被加入到Swift現在應該添加麼
對於一些特性 答案是否定的所以我們把它拿走
這樣做很棒
它爲大家簡化了語言
我意識到其中可能有偏見和爭議
Swift-evolution最棒之處是作爲社區讓大家可以在其中討論
它們中的每一個有個有豐富理論基礎的提議
如果你想回頭閱讀關於它的上百封郵件
請到歸檔的郵件列表查閱
我想郵件列表各個方面都有
這些問題都被描述得很好了
Swift也有其他小的提升
我沒有時間去全部說一遍
但我們有像泛型別名
我們有類型安全選擇器和關鍵路徑引用
我們有新的編譯配置
匹配功能提升和其他好多東西
你可以從提議中閱讀
或者從發佈日誌中看到
關於核心語言的另一方面是語法
我想我們大家都喜歡我希望你們喜歡
Swift的基本語法結構
我認爲它是其中一個主要部分
因爲它感覺起來熟悉並在一起工作的很好
不幸的是Swift的有些部分
沒有被好好考慮
我們每天用的語法結構
所以我們進行重新設計
對你最喜歡的顏色添加了美觀一致的色調
我們研究了一些奇怪的例子
因爲它們和語言剩下的地方不一致
它讓語言變得難用
這些被包含進Swift因爲它們很重要
我們回過頭來標準化所有的東西
我們想把它弄正確並在長時間裏保持正確
這還是核心語言的簡述
我想深入點說下類型系統
首先 什麼是類型系統
在Swift中類型系統和類型檢查器
一起定義類型怎麼工作
類型檢查器和編譯器使用類型系統
來保證你的代碼是正確的或檢驗它是正確的
同時推斷你代碼忽略的東西
因爲它默認是隱式的例如 什麼是A類型
在Swift 3中我們想要簡化類型系統
讓它更一致我們也想杜絕
人們遇到的常見類型問題
引起漏洞
我們討論幾個例子
首先是不安全的指針
不知道你們是否注意到你可以在
Swift 2中給一個不安全的指針賦值nil
你可以直接測試它是否nil
你可以使用不安全的指針
不用關心它是否爲nil
它和其他語言不一樣
它讓不安全的指針更不安全了
在Swift 3中不安全的指針不能爲nil
你可以使用optionals就像這個語言的其他部分
你可以用if let安全的測試然後包起來
甚至使所有的語法提示我們提供optionals
讓所有的代碼工作的更穩定些
說到optionals
這個語言另一個有趣的部分是隱式展開optionals
隱式展開optionals是語言非常重要的一部分
通過兩個階段的初始化
或者調用API還沒有驗證時是否爲空
這裏有個簡單的例子
我有個int用了隱式展開optional
對其他類型也可以這麼用
現在 Swift 2中的隱式展開optional的基本工作方式
我想 大家都已經清楚了
這個例子中的X 比如
編譯器必須強制展開那個IUO
爲了做加法 它是這麼做的
對於y 就不必這麼做了
就像從代碼上傳遞下來了
這個傳遞有很多原因
這也很令人意外因爲很多複雜的情況
常常讓我們撓頭不知道代碼到底是在做什麼
在很多情況 你甚至不知道你有IUO
這裏 我有一個int和一個IUO
IUO是強制的麼
我能得到任何數組麼 或者可選的這到底怎麼回事
你永遠不會知道
直到你編譯代碼時並且你得到了一些奇怪的編譯錯誤
我們不想在這裏費力
所以IUO作爲一個概念非常重要
我們保留了它
但是我們改變了它的工作方式用一個新的簡單的模型
這個模型還比較原始
如果使用了IUO
如果值是可選的 那麼就是
這是安全的我們不想展開值
在你不想展開的地方
然而 如果編譯器需要展開它
爲了做類型檢查 它就展開
我們再來看些例子
這裏 有個x
編譯器需要展開它做加法 所以展開
這是IUO的重要部分
與強屬性的有所區別
爲什麼
好的 這裏這個編譯器可以對錶達式做類型檢查
作爲optional
所以現在不需要傳遞IUO
可能在深入到代碼不同層級
它轉換成了一個強的optional
可以讓你思考
這讓數組更可控
因爲現在
當然 它可以作爲一個強的optional被類型檢查
如果你實際上需要展開 這樣也可以
你可以明確地在代碼中使用感嘆號包上它
現在讀代碼的人可以知道是什麼意思
你的代碼好了很多
這是我的快速瀏覽
關於類型系統的一些有意思的事情
我們談談標準庫
標準庫最大的改變是全新的集合索引模型
這是什麼意思你可能使用過索引
或者沒有
有很多方式使用索引
這裏的不同是它們如何移動
之前在Swift 2中你可以調用索引的方法
像Successor 向前移動
在Swift 3中這個模型基本相同
除了現在索引可以自己移動
collection自己移動索引
爲什麼我們要做這些
在Springs有很多很棒的事
首先 我們開始簡化標準庫
許多類型去掉了 這很棒
更好的是 一些常見問題根本上就沒了
你可以隨便使用與發揮
之前可能觸發一個沒人知道的陷阱
同時性能也提高了
因爲我們可以去掉很多特殊情況處理
對這些我們很興奮
我們討論下數字類型
我們有一個新的浮點類型協議或者一個家族協議
可以幫助定義操作讓你們寫通用的算法
超出浮點類型更廣的範圍
更好的是如果你是個數字分析類型的人員
你理解IEEE浮點數
我不是 大部分人都不是
它有很多低層次的操作
像讓數字ULPS出來
其中有些重要的有技巧的東西
我也不全懂這些東西
我認爲這很重要
我理解像Pi樣的東西每個人都喜歡Pi
在Swift 2中使用MPi時我們總是遇到困難
這經常讓我惱怒
它總是錯誤的類型你需要強制轉換它
總讓人泄氣
現在 除了包含IEEE的全部東西
我們有了Pi在浮點數類型中
Swift通常有類型可用
另一個很棒的事情是
如果你有類型上下文
比如這裏我們返回一個CGFloat
替代強制轉換你可以用CGFloat.Pi
更好的是你可以讓編譯器給你做推斷
會有不錯的結果
語言方面有很多提升
貫穿標準庫
其中有些對提高你的Swift代碼很有用
我強烈建議你看下其他Swift演講
可以得到更多信息
這是一個快速瀏覽 關於語言
標準庫Cocoa在Swift如何工作
另一個重要的部分是Swift和這些工具怎麼在一起工作
講到這裏我想請Ewa Matejska給大家講講
Ewa？
謝謝 Chris
大家早上好
讓我們說說Tools
一個比較好的着入點是
就是工具如何提高性能
你可以看到我們這一年非常忙碌
我們討論其中的幾個
我們重新實現了字典
我們集中
優化了字符串哈希算法
爲ASCII字符串
我們看到一些不錯的提升
從去年我們做的一些簡單的測試
我們還添加了棧的推廣
針對類實例數組常量
我們從堆棧中提取出來相當費資源的操作
到棧
我們看到一些相當不錯的提升在我們測試的時候
同時 像我說的
我們集中優化了字符串哈希算法
我們看到它提升很大
在我們對比字符串前綴和後綴
我們有86倍的提升
接下來 我想說一下整體的模塊優化
這是去年我們引入的特性
我想給大家提醒下它是什麼東西
當你看這個圖表
你可以看到一個並行編譯流程
一個文件進入 一個文件出去
通過全模塊優化
我們擴展了編譯從一個文件到多個文件
這真的很棒因爲編譯器有很多信息
來寫新的創新性優化
來讓你的代碼運行的更快
我們認爲從我們的內部測試中已經可以穩定工作了
所以今年我們將把它作爲新工程的默認值
以前的工程會有優化建議
按照它的建議 我們認爲你應該接受
這裏有個重要提醒就是編譯時間
就像圖裏展示的
你會發現編譯器成了瓶頸
就像你想的編譯時間 會增加
爲了抵消它
我們讓編譯器變得更智能
它會盡可能的緩存
來避免重新優化和編譯
最後結果是雖然你第一次編譯時間
變長了
接下來 增量編譯應該更快
說說代碼大小
我們在這方面做了許多工作
從Swift 2.2開始
我們有了不錯的結果
DemoBots是一個樣例應用
你可以從developer.apple.com下載
你可以看到應用二進制文件大小減小
了差不多25%
自從Swift 2.2開始
這真的不錯
好的 關於性能只有這麼多
但關於Xcode還有不少可以講的
今年Xcode我最喜歡的特性是
Swift代碼瀏覽的提升
它對每天的開發影響很大
我們看一個例子
這裏有個例子
我們創建了個整型數組接着進行排序
你認爲會發生什麼
當你右擊Sort跳到聲明
在Xcode 7.1中
你會進入一個綜合的像這樣的頭文件
這是什麼
這是一個可變集合類型
sort這裏返回Self.Generated.Element
註釋中只有一個數組的參考
所以這不是很有意義
也不是很符合邏輯
在Xcode 8中我們做的更好一些
現在你可以看到
這裏有個數組的擴展
和sorted
因爲在Xcode 8中sort被重命名爲sorted
現在返回一個包含元素的數組
這真的提升了
你在Xcode中瀏覽代碼
閱讀時候更有邏輯了
同時 在標準庫中
我們通過邏輯區域添加了分組
比如 數組被分組爲集合
說到標準庫
我們有了各種新的文檔
同時協議被鎖定進了API
你可以有邏輯的瀏覽
就像在綜合接口中
謝謝
我認爲你們會喜歡這部分 是的
多少人有Swift 2.2的代碼？
可能有很多
所以 當然我們像往常一樣有遷移工具
但今年你需要選擇
在Swift 2.3和Swift 3之間
如果你
如果你沒有準備好跳到Swift 3
Swift 2.3就是包含新SDK的Swift 2.2
可以麼
我們會接受提交到app store
的Swift 3和2.3的應用
但你應該注意Xcode中有一些關鍵特性
是專門針對Swift 3的
像Playgrounds和Documentation
和新的特性像Thread Sanitizer
Swift 2.3其實是個臨時解決方案
讓你有時間規劃升級到Swift 3
所以請從今天開始規劃吧
是的
如果你在用Swift 2.3我有幾個建議
這是個例子
這是個小的代碼片段是2.2的
當你將Swift遷移到2.3
它會建議你在frame後添加歎號
因爲核心圖像API
可以編輯
現在這代碼同時用Swift 2.2和Swift 2.3編譯
但如果你個複雜點的腳本
你可以選擇性的編譯你的代碼
用#if #else語句
這是一個小的建議
當你準備好升級到Swift 3
可以使用遷移工具
編輯 轉換當前的Swift語法
你可以再次體驗遷移
這很簡單
從今天開始計劃遷移到Swift 3
這是我想說的關於工具
概括一下
概括說
Chris說了Swift 3如何
集中在基礎改變
這些都公開在Swift.org
像Ted說的
你可以到那裏看看是如何演進的
你還可以看到我們爲Xcode做了很棒的集成
這周還有很多信息這僅僅是開始
我們這周有很多課程
我想推薦一個
就是Swift API設計規範
還在這個房間在這個課程結束以後
祝大家能和我們一起度過這美好的一週
謝謝