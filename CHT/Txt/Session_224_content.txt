iMessage應用和貼圖 第二部分互動信息
下午好
歡迎來到“iMessage應用和貼圖 第二部分”
我叫Alex今天協助我的是Stephen
他將負責演示
在演講的第一部分 Bhaskar
和Lily介紹了貼圖 貼圖包
和簡單的iMessage應用
專注於爲信息提供貼圖數據
今天我們將要來講解互動信息
我們將更深入分析iMessage應用
及Messages框架
什麼是互動信息？
在我背後的信息文本里可以看見高亮顯示的一條
這是Messages擴展提供的一種特殊類型的信息泡泡框
可以看見它在截屏裏被高亮顯示
Messages擴展可以讓用戶新建互動信息
並可以把它們插入輸入框如這裏所示
還可以讓用戶回覆一條互動信息
只需點擊文本里的該互動信息即可
此時擴展將會全屏顯示 如這裏所示
用戶可以和該擴展進行互動編寫一個答覆
然後擴展可以把新內容插入信息中
它會顯示在輸入框 用戶可以發送
我們現在歡迎Stephen上臺
他將在模擬器上演示一個應用實例
我將演示一個完整的iMessage應用
是我編寫的
其中所有的API都會在今天的演講中學到
如果看向模擬器這裏可以看到一個圖標
來自我的iMessage應用叫“冰淇凌”
點擊它iMessage應用將開始運行
在Message範圍裏
所有粉色背景的UI
都是擴展提供的
iMessage應用是一個合作的冰淇凌貼紙製作應用
可在此看到我過去做好的冰淇凌貼紙
點擊“添加”按鈕
iMessage應用將會全屏顯示
這裏會提供良好的製作貼紙用戶體驗
選擇一個冰淇凌蛋卷iMessage應用會退出
顯示一條互動信息到輸入框供用戶發送
在iOS 10 我們添加了支持
讓用戶自己編寫和測試iMessage應用
就在模擬器裏面
回到對話列表
可以看到模擬對話的兩個終端
點擊第二個 顯示接受信息的模擬器
點擊 iMessage應用運行進入
冰淇淋製作過程的下一步
我選擇自己最愛的口味 薄荷脆皮
顯示該信息 發送
現在 如果回到第一個對話
或者第一個對話的最後
點擊該信息
選擇冰淇淋的最後一個部分 撒料
發送
現在我有了一個製作完整的冰淇凌
事實上 若回到iMessage應用
可以在冰淇淋歷史清單中看到
作爲一個貼圖 可以應用到任何地方
這就是互動信息的一個簡單例子
請Alex回來繼續講
謝謝你 Stephen
這是關於iMessage應用部分功能的一個很棒的快速演示
我們來講講如何用API實現
我將講解四點
首先 我將會概括瀏覽API
然後第二點稍微講解一下擴展生命週期
第三點 我們將會講解
如何用API編寫信息
第四點
稍微講講信息是如何被髮送的
首先概括瀏覽API
iMessage應用正在運行
以簡潔顯示模式 這是一個擴展
擴展有一個主類
對於iMessage應用來說這將是
MSMessagesAppViewController的一個子類
總而言之
MSMessagesAppViewController是
UIViewController的一個子類 爲擴展提供UI
在擴展上面 有一個對話
更確切地說 是對話文本
它通過MSConversation對象表示在API中
最後是信息本身
在文本里有這個泡泡框
通過MSMessage類表示
可以看到在本幻燈片中 還有兩個類
MSSession類和MSMessageTemplateLayout類
它們爲如何發送信息提供相關控制
以及信息該如何在文本里顯示
繼續講解iMessage擴展生命週期
在這裏有一個時間線如果一個擴展啓動
可能從應用抽屜裏 將會啓動一個進程
此後不久 調用didBecomeActive(with conversation)
傳入一個對話對象
代表應用運行時的對話
因爲這是UIViewController的子類
我們也調用了viewWillAppear和viewDidAppear
當擴展出現在屏幕上時
如果應用從屏幕消失 會發生什麼呢？
我們把它稱爲“退出活躍”
將會發生的事是 首先會收到viewWillDisappear
和在主類的viewDidDisappear調用
然後將會 抱歉
然後將會調用willResignActive(with conversation)
此時 我們馬上就要切斷
Messages和擴展的連接
此時是可以進行對話操作的最後時間
之後某個時間點 進程會被終止
強調一下 這是因爲進程
建立在擴展上 而擴展是短暫的進程
它們會迅速終止
來看一下
現在有一個進程在運行在信息中顯示UI
用戶將會和該UI進行互動
編寫一個信息 看看API如何處理
首先創建一個MSMessage對象
爲該對象設置一些屬性
在本例中設置一個Https URL
所以信息有一個URL屬性
然後編寫一些關於冰淇淋的細節
在該URL的查詢字符串中
唯一可以產生
這些信息的平臺是iOS
但這些信息將要發送給macOS和watchOS
當信息發送給macOS時
它們會在對話文本里全保真顯示
點擊文本中的一個信息
將會試圖在瀏覽器中打開該URL
所以如果在這裏提供了一個https URL
瀏覽器將會爲用戶
在macOS上顯示該信息
繼續 這裏還有一個accessibilityLabel屬性
屏幕閱讀器讀取文本時將會使用
所以 爲它設置一個信息泡泡框的描述
用屏幕閱讀器的用戶會看到
關於泡泡框豐富的描述 顯示在文本中
最後我們來講佈局
後面會多講一些相關細節
我們用佈局對象指定
文本中一條信息的外觀
現在只有一個佈局MSMessageTemplateLayout
可以爲它設置一些屬性將會影響製作泡泡框
這裏有一個圖形屬性 取一幅UI圖片
爲屏幕上高亮顯示區提供內容
還有一個mediaFileURL屬性
mediaFileURL和image一樣的區域提供內容
但在這裏可以提供UI圖片不支持的內容
比如可提供一個指向本地視頻文件的URL
一個短視頻就會循環播放
在文本里信息泡泡框的背景中
讓我們再多關注一下這兩個屬性
首先注意到如果圖片和URL都被提供
圖片的優先級將會高於URL
我們對尺寸有一些建議
這些屬性提供的資產的尺寸
我們建議爲資產提供的尺寸
大約是300x300pt
可以提供稍大或稍小的資產
我強烈建議在這裏多多測試資產大小
爲了找到最適合應用的尺寸
所有這些資產和貼圖一樣都三倍顯示
iMessages將會對這些圖片進行縮放
當別的設備接收時顯示合適大小
根據接收設備屏幕分辨率
mediaFileURL支持格式有PNG JPEG GIF和視頻文件
視頻文件是指 支持任何
可在Media Player框架裏播放的視頻
建議參考Media Player框架文檔
獲取更詳細信息
關於該媒體文件還要做一點
當發送時 我們會對資產進行轉碼
這是爲了對其在網絡中傳送進行優化
最後我建議在該圖片中不要加入文字
我說過 這些圖片都會按比例縮小
顯示在屏幕爲1倍或2倍的設備上
但我們要求按照3倍提供
如果在該圖片上添加文字尤其是字體小的文字
當這些圖片縮小時 文字將看不清楚
但是注意到我們在例子裏確實這樣做了
圖片上方有一些文字
我們來講解如何在不降低質量的條件下實現這點
佈局對圖片有一些額外的屬性
都是文本屬性
它們在信息裏被轉換
然後在接收設備上繪製
這樣就可以把文本在接收設備上
儘可能顯示得非常清晰
這裏顯示了圖片標題
這是畫在圖片上方的文字
在左下角
我們還有副標題 也是畫在圖片上的
就在圖片標題下面
還有這些字幕屬性
都是在圖片標題下方的標題欄繪製
就是屏幕上的灰色區域
所以 有了字幕 跟蹤字幕
第二字幕 跟蹤第二字幕
如果來看字幕屬性
有可能忽略所有
或都設置爲空
如果這麼做了
就會有一個底部沒有字幕欄的泡泡框
就會看上去這個樣子
最後要說明的一點
泡泡框左上角有一個圖標
該圖表是Messages在內容上方提供和繪製的
通常都會是iMessage應用圖標
就是發送信息的應用的圖標
我們繼續講解
如何發送編寫的信息
爲了實現這點 需要一個MSConversation的實例
可以通過主類的activeConversation
有了一個對話後調用insert(message)
傳入編寫完成的信息
確保處理好任何返回錯誤
這樣做可以讓信息顯示在輸入框
當然 如演講第一部分所提到的
也可以發送其它類型的數據
我們支持發送文本 附件
當然還有貼圖
當輸入框的內容完成
用戶可以通過點擊藍色的“發送”按鈕發送
這裏我要說明 擴展沒有辦法
真正自動發送一條信息
我們總是想讓用戶來決定
把什麼樣的信息發送給朋友
現在我把講臺交還給Stephen
他將講解該如何在示例項目中實現
再次感謝 Alex
我把之前用的示例iMessage應用拿出來
然後把它剝離到最基本的結構開始
冰淇淋貼圖之前製作的
歷史列表都還在
但你會發現點擊“添加”按鈕時沒有反應
在Xcode裏
顯示了MSMessagesAppViewController子類
我覆蓋了週期方法didBecomeActive(with conversation)
調用super 然後調用presentChildViewController
它是我寫的一個幫助方法
將會初始化一個IceCreamHistoryController
並加入ChildViewController
這就是目前的代碼
我現在想要做的是
當點擊“添加”按鈕時
就會開始製作貼圖的進程
該IceCreamHistoryViewController有一個委託協議
我有一個MessagesViewController擴展
將符合該委託協議
通過調用historyViewController
AddButtonTapped
在這裏我將要觸發功能
還要添加一個幫助方法
叫作composeMessage(for iceCream)將會接受一個IceCream對象參數
然後返回到一個MSMessage可以用於對話中
要實現這一點 新建一個URLComponents實例
再把該URLComponents的QueryItems屬性設置爲
模塊的queryItems屬性
下一步是
新建一個MSMessageTemplateLayout實例
並把該佈局的image屬性設置爲模塊的渲染模式
我還想爲信息設置字幕
我會在上面這裏聲明
現在我準備好新建MSMessage對象
聲明一個MSMessage實例
把URL屬性設置爲我的components的URL屬性
然後設置佈局和accessibilityLabel屬性
爲了演示簡單 我重新使用了messageCaption
作爲accessibilityLabel屬性
現在信息已經建立完成要發送到對話中
我要引用activeConversation
然後調用conversation.insert
把信息插入 寫好了
已寫好composeMessage函數
這裏我要調用它
通過HistoryViewControllerAddButtonTapped方法
我總會從添加或傳遞一個新的IceCream實例開始
現在在iOS模擬器中運行
啓動iMessage應用
等待調試器載入 點擊加號按鈕
信息顯示給用戶可以發送
因爲我並沒有真正選擇冰淇凌的部分
我只是有一個冰淇淋的圖片框
可以看到信息下面的字幕
開頭開得不錯
但是我想離開始時的那個演示更近一步
當我點擊加號按鈕時
我想馬上進入貼圖製作UI體驗
爲了實現 需要介紹一個新概念
在這裏iMessage應用正顯示爲簡潔顯示風格
我可以選擇讓iMessage應用
顯示爲展開顯示風格 通過添加代碼
在這裏不再調用composeMessage(for:iceCream())
而是在父類上調用
requestPresentationStyle方法參數爲枚舉expanded
這將觸發一個生命週期回調方法 叫作
willTransition(to presentationStyle)
調入super實現
然後調用幫助方法
爲該顯示風格顯示其正確的子視圖控制器
現在我的presentChildViewController
總是顯示當前的IceCreamHistoryViewController
所以我需要改變顯示風格改變的邏輯
這樣纔可以顯示正確的視圖控制器
首先要添加一個參數 這樣我才知道
正在處理哪個顯示風格
然後我要把這段代碼改爲
只顯示historyViewController
當處於簡潔顯示風格時
如果正處於展開顯示風格
將聲明一個新的IceCream實例
讓我的controller成爲IceCreamBuilderController的一個實例
傳入剛剛聲明的iceCream
最後 在我把它添加爲子視圖控制器以前
需要移除所有之前的子視圖控制器
清理視圖層次結構
現在我需要更新幫助方法的調用地點
這裏我將把正在等待的顯示風格傳遞給方法
在didBecomeActive(with conversation)方法中
爲它傳遞當前的顯示風格
可以把它作爲父視圖控制器的一個屬性
應該沒錯
最後——事實上讓我們
先看看這樣能不能實現
點擊加號按鈕
我的iMessage應用進入展開狀態
正在顯示冰淇淋製作體驗
然而 你會發現點擊“選擇”什麼都沒發生
這是因爲我的iceCreambuilderviewcontroller
也有一個委託協議 也有一個擴展
在這裏的視圖控制器上抱歉有點太快了
該委託協議
通過iceCreamBuilderViewController方法實現
didSelect iceCreamPart,for iceCream
只要點擊選擇按鈕 該方法就會被調用
這裏正好可以調用我寫的幫助方法
composeMessage我將傳遞
更新過的iceCream給它
我還要做的一件事是調用dismiss方法
因爲iMessage應用已經完成內容準備
我想要iMessage應用退出
爲用戶顯示完成消息
啓動應用 點擊加號按鈕
選中一個冰淇凌蛋卷
退出iMessage應用
互動消息準確地顯示 用戶可以發送
這就是如何發送互動信息
的一個快速演示
交回給Alex
謝謝你 Alex 非常棒
所以
Stephen爲大家介紹和演示瞭如何使用API
添加內容到一個對話併發送
Stephen還介紹了顯示風格
我們將進一步講解其更多細節
我們有兩種顯示風格 簡潔和展開
左邊是簡潔風格 右邊是展開風格
這兩種風格之間有一些不同
在簡潔模式 無法訪問鍵盤
而且也
無法橫向滾動 以及無法辨識滑動手勢
這是因爲在簡潔模式用戶可以向左或向右滑動
在iMessage應用之間快速切換
然而 還是可以訪問輸入框
不論何時在簡潔顯示風格里調用插入信息
信息都會馬上插入到輸入框裏
用戶可以立即看到
後續調用插入信息
將會用新的信息取代當前信息
這裏你可以允許用戶反覆編寫信息
看到它在輸入框裏的進展
直到滿意後 就可以發送
與此相對的 在展開顯示風格里
顯然無法訪問輸入框
但卻可以訪問橫向滑動手勢辨識和滾動
也可以使用鍵盤
用戶隨時可以在擴展中進行轉換
在兩種風格間轉換 只需點擊上方的圖標從展開轉換到摺疊
從而轉換到簡潔風格
在簡潔風格下可以點擊屏幕下方的圖標
把應用展開成展開顯示風格
當在使用iMessage應用時響應需要非常及時
在應用顯示的的區域
任何時候轉換髮生時
都會出現主類的回調
轉換開始後 將會調用willTransition(to:presentationStyle)
最後 當轉換結束時
將會調用didTransition(to:presentationStyle)
如Stephen所演示的你可以要求顯示風格爲展開
或簡潔 只需調用requestPresentationStyle方法
在主類中
如演示裏所提到的可以調用dismiss
iMessage應用將退出並顯示鍵盤
我們繼續討論如何回覆信息
這裏介紹兩種情況
一種情況是擴展處於非活動狀態
文本里有一個用戶點擊的泡泡框
我們首先來看這種情況
之後回來看第二種
再看看時間線 應該看上去很熟悉
用戶點擊泡泡框
進程啓動
經過完全相同的步驟
和應用從應用抽屜啓動的過程一樣
將會調用didBecomeActive(with conversation)
然後是viewWillAppear和viewDidAppear
這些步驟完成後
應用將會顯示成展開顯示風格
我們總以展開顯示風格展示應用
當用戶點擊一個按鈕啓動 抱歉
是點擊文本里的泡泡框來啓動
現在來看第二種情況擴展已經處於活躍
本例中 正處於簡潔顯示風格
再看一次時間線
這次 點擊泡泡框 應用處於活躍
所以 不會調用willBecomeActive或者didBecomeActive
將會調用willTransition
(to presentationStyle)方法
然後調用didSelect方法帶有message和conversation參數
在主類上進行調用
讓你知道用戶點擊了文本里的泡泡框
並選中一條信息
最後當展開顯示風格轉換完成
將會調用didTransition(to presentationStyle)
在兩個時間線的最後
應用的UI顯示展開顯示風格
而你想訪問被點擊的信息
實現方法是用MSConversation的selectedMessage屬性
可以從當前活躍的對話中獲得
在主類上
你會想要把選中的信息顯示在UI上
並允許用戶編寫回復
再次請Stephen上臺
他將做最後一個演示如何在示例應用中實現回覆
好的 剛纔離開時正有一個準備發的信息
我會把它發出去
回到對話表
打開對話的另一端
可以看到收到的信息
點擊該信息iMessage應用正常啓動
然而 冰淇凌製作體驗
並沒有顯示冰淇凌製作過程的下一步驟
我還沒辦法選擇冰淇凌球
這是因爲每次顯示當前的視圖控制器
總是傳入一個新的冰淇凌模塊對象
我需要做的是 找到對話中的選中信息
如果信息中存在冰淇凌模塊對象就要使用
回到上面這裏
到新建IceCreamBuilderController實例的地方
引用activeConversation
使用一個可失敗構造器
查看對話中的信息
如果構造失敗 就意味着沒有進展
我就會新建一個冰淇凌模塊
如果存在 則傳入進展中的冰淇凌
還要確認的一件事是要傳入正確的字幕文本
根據選中的冰淇凌零件
爲了實現 需要傳入一個新參數給方法
就是selectedIceCreamPart
這個messageCaption我要變成一個聲明
爲字符串類型然後使用switch方法
在selectedIceCreamPart上來選擇合適的messageCaption
我還要需要更新調用該方法的地址
這裏 傳入新的參數
當啓動iMessage應用時
點擊加號按鈕 發出第一條信息
回到對話表 進入對話另一端
點擊接收到的信息
現在冰淇凌製作視圖控制器顯示正常
可以選擇冰淇凌球
我可以選擇薄荷脆皮
發送
再回到對話的另一端
選擇撒料
這就是發送和接收互動信息的情況
以及如何合作完成一個任務
然而 可以看到在對話界面裏
那些未完成的冰淇凌讓對話看起來有點亂
我並不想看未完成冰淇凌
我只想看冰淇凌成品
我想摺疊所有之前的信息
也許可以留下那些信息的簡明總結
爲了實現 我將使用一個新的對象MSSession
把信息合到一組
這裏當編寫信息時
移動activeConversation引用
當聲明session對象時
查看selectedMessage是否存在於會話中
如果是 則選擇該信息將會在同個分組中繼續
否則 新建一個MSSession對象
然後把該session傳入這裏
到MSMessage構造器
另一件事是
當信息摺疊時提供一個很好的信息總結
這裏聲明一個變量叫summaryText
這裏我會選擇顯示不同的summaryText
根據不同的selectedIceCreamPart
我可以把summaryText變量傳給MSMessage對象
好了
哦 可能需要指定
這下完成了
現在啓動iMessage應用
進行製作冰淇淋的過程
冰淇凌看上去不錯吧
選擇冰淇凌口味
可以看到摺疊起來的摘要文本
當發送信息時可以看到
如果我回到對話的第一部分
再次點擊信息
現在我覺得巧克力撒料不錯
發送後 冰淇凌信息完整了
但是隻顯示了一張圖片
整個文本中都有很好的摘要說明
並且 當進入冰淇凌應用之後
可以看到全新完成的冰淇凌貼圖
可以任我所用
完成了 這就是完整的示例應用
這個例子展示瞭如何編寫
一個互動貼圖製作應用
但是可以用這種方法做任何事
可以集合各種優質服務
編寫優秀的合作遊戲我迫不及待想看看你們的成果
交回給Alex
謝謝你 Stephen另一個非常棒的演示
Stephen實現了回覆
並引入了新的對象MSSession
來看一下MSSession
之前在演示裏看到的
是含有很多未完成冰淇凌的亂糟糟的文本
我們看到如何用MSSession
把它進程處理 變成
像這樣的 更爲乾淨整潔 非常好
實現它我們用了MSSession對象
新建一個MSSession
對第一條信息
是對話的一部分 我們傳入新建的會話
進入該構造器 有了這個會話信息
還可以設置摘要文本
我們利用對話的insert(message)發送
如之前所見
當回覆一條會話信息時
我們不想新建一個會話而是再次使用已有的會話
我們可以獲取當前會話
從當前對話中
activeConversation.selectedMessage
selectedMessage將有一個session屬性
如果它是一個會話信息
然後我們取出該session屬性
傳入信息構造器 如之前所見
在這裏summaryText提供了文本
在對話文本中對信息進行總結
現在也可以忽略該屬性 把它設爲空
如果這麼做的話
在文本中就沒有summaryText的入口
但是信息還是會參與到會話行爲
我們講解了API的基本要點
也看到該如何編寫一個非常簡單的iMessage應用
可以在朋友間發送互動信息
我們將繼續討論API的一些高級特性
我們將從主類上更多覆蓋方法開始
然後繼續討論分組對話
最後討論如何辨別某一特定信息的發送者
首先 當用戶發送一條信息時
我們意識到也許應用想知道發生了什麼
比如 若你是一個遊戲 用戶做出移動
我們需要知道什麼時候更新模塊記錄這次移動
這需要在信息缺失發送出去之後發生
所以 我們有一個didStartSending(_message)方法
在主類上當用戶點擊發送按鈕時會被調用
這點很重要
並不意味着
信息已經真正被髮送
只是意味着用戶點擊了發送按鈕
然後它傳遞了發送消息的企圖
同樣我們還有一個方法叫做didCancelSending
發生在當用戶點擊十字
在信息泡泡框的右上角
didCancelSending可以清除
任何編寫該信息時 累積的的資源
最後 我們還有didReceive(_message)方法
didReceive(_message)方法發生在
被調用 當應用正在運行或處於活躍
一條信息來自一個接收者
對話的某一個參與者
這非常有用 比如
如果應用有
如果用戶正在編輯一條會話信息
在同一個會話中另一條信息進來
這是狀態更新 你需要更新顯示該狀態的UI
讓我們繼續講解分組對話
iMessage應用可應用到分組對話中
當建立分組對話時需要考慮這些問題
我們在這裏
有一個示例對話 來自三個朋友Amber Ben和Chris
Ben給每個人發送了冰淇凌
然後他發送了一個問題給Amber和Chris
你們想要在冰淇凌上面加什麼撒料
巧克力醬還是彩粉？
Amber將要回復巧克力醬
Chris將要回復彩粉
這兩個用戶將在完全相同的時間回覆
現在關注一下Ben
看看他的設備對收到的信息會做何種處理
首先 Amber的回覆先到達Ben的設備
不久以後 就是來自Chris的回覆
你可以發現Amber的回覆變成了摘要信息
Chris的回覆顯示在對話最後的泡泡框裏
另一種情況也是如此
需要注意的是
只有點擊的信息在iMessage應用裏可用
所以例子裏我們無法訪問Amber的回覆
這該如何處理？
現在 我們建議把狀態儲存在雲端
也就是說MSMessage的
來自和發給對話參與者的URL屬性
只需要作出表示會話的標記
然後你會接收到會話當前狀態
當用戶點擊一條信息
以及當用戶發送一條信息時
你應該把當前會話狀態存入雲端
繼續 我們討論發送者標識符
回到Amber Ben和Chris的對話
在這個情境Amber回覆了想要巧克力醬
Chris還沒有回覆
再次關注Ben的設備
這裏有一條信息 但不知道是誰發的
但是我們可以找出相關信息
這裏有發送者參與者標識符
抱歉 重說一遍
這裏有參與者標識符
Apple對用戶隱私非常非常重視
我們非常尊重客戶的隱私
我們完全不對iMessage應用顯示任何聯繫人信息
取而代之我們提供了這些參與者標識符
在Ben的設備上他有一個本地參與者標識符
這是一個UUID在該設備上代表Ben
他還有兩個遠程參與者標識符
代表了對話中的其餘參與者
本例中 有兩個Amber和Chris
看一下進來的信息
我們看見該信息有一個發送者標識符
它將映射一個Ben的列表中的本地參與者標識符
回到大圖來看Amber和Chris的設備
正在發送的信息有發送者標識符
它們映射到每一個發送信息的設備本地標識符
可以利用這些標識符
獲取對話中參與者的數量
可以把信息歸屬於一個發送者所以一旦接收了某條信息
帶有特定的發送者標識符
然後接收了第二條有着相同標識符的信息
你知道它們都來自同一個用戶
還可以和網絡服務相結合
可以用於幫助確定身份
還有一點
可以在這些標識符或標識符字符串
前面加上一個$符號 寫在任何傳遞給
MessageTemplateLayout文本屬性的文本中
同樣 你還可以把這些標識符寫入
要傳遞給summaryText屬性的文本中
當信息顯示UI
在泡泡框裏的文本帶有這種類型格式時
它將會把標識符替換爲
其標識符映射的聯繫人姓名
每一個設備的標識符都是唯一的
若你留意之前的幻燈片裏
每臺設備的每個人的標識符都是不同的
它們的範圍侷限在iMessage應用的安裝裏
這指的是
這些標識符本身將在一定時間內保持恆定
但若用戶刪除了iMessage應用之後重裝
就會有一個完全不同的
標識符集合 在同樣的對話裏
你可以取得發送者參與者標識符
在MSMessage使用senderParticipantIdentifier屬性
還可以通過對話取得本地參與者標識符
利用localParticipantIdentifier屬性
還可以取得遠程參與者標識符列表
從remoteParticipantIdentifier屬性
這就是我們要講的API的高級主題
再講一下支持平臺
互動型信息將會在這些平臺上提供
watchOS 3、 macOSSierra和iOS 10
在這些平臺中 只有iOS 10會真正產生信息
在macOS Sierra用戶可以點擊對話文本中的泡泡框
傳遞給信息URL屬性的URL
將會在Safari裏打開
只有https或http URL才行
在watch上 可以把互動信息傳給
可以寫回復的設備
我們也支持舊平臺備用
這些消息也可以在watchOS 2、 iOS 10
iOS 9和OS 10.11上發送
但是會以備用格式發送
有兩條分開的信息
第一條是模版佈局提供的圖片
第二條是信息提供的URL
再次強調 如果是https URL將會發送
如果是數據URL 則不會發送
我們在備用消息中只發送https或http URL
這就是本次演講的全部內容
總結一下
本週我們介紹了Messages框架iMessage應用
在本演講的第一部分Bhaskar和Lily爲我們介紹了
貼圖集 並演示了
如何編寫可以建立貼圖內容的iMessage應用
今天 我們一起編寫了發送互動內容的iMessage應用
還講瞭如何在分組對話中實現等
我十分期待看到你們大家
走出去利用該API所做的成績
迫不及待想看到大家的產品 就這樣
其它詳細信息可以瀏覽本次演講的網頁
在developer.apple.com
我們還有一個相關演講
如果你還沒有看過“iMessage應用和貼圖 第一部分”
請到網站上觀看
演講到此結束
感謝Stephen的演示
謝謝你們大家的到來