00:00:19.653 --> 00:00:26.093 
iOS安全的工作原理

00:00:29.096 --> 00:00:29.930 
謝謝

00:00:32.900 --> 00:00:35.802 
非常感謝大家參加
下午4點關於安全的演講

00:00:35.869 --> 00:00:39.039 
我知道大家一天辛苦了
不過真的要感謝各位的到來

00:00:39.506 --> 00:00:40.641 
我叫Ivan Krstic

00:00:40.707 --> 00:00:43.377 
我管理Apple的安全工程架構

00:00:43.443 --> 00:00:44.912 
這個團隊從基礎將安全

00:00:44.978 --> 00:00:48.248 
構建給所有用戶手中的產品

00:00:49.650 --> 00:00:50.751 
今天的重點是iOS

00:00:50.817 --> 00:00:54.321 
我非常自豪地告訴大家
安全的作用在

00:00:54.388 --> 00:00:56.990 
這一平臺上扮演着
關鍵設計理念的角色

00:00:58.525 --> 00:01:01.028 
在我們開始之前
我們要先講一下背景

00:01:01.595 --> 00:01:03.830 
爲什麼安全對Apple如此重要

00:01:03.897 --> 00:01:06.834 
爲什麼我們相信
這對用戶至關重要？

00:01:08.468 --> 00:01:13.207 
這是因爲我們的移動設備
前所未有地記錄着我們的生活

00:01:13.907 --> 00:01:18.912 
有史以來從未有過一種
東西會對我們如此瞭解

00:01:20.647 --> 00:01:22.349 
瞭解我們的消費方式

00:01:23.383 --> 00:01:26.320 
瞭解我們發送的郵件
我們拍下的照片

00:01:26.787 --> 00:01:28.121 
瞭解我們的消息

00:01:28.188 --> 00:01:31.692 
從最簡單的問好
到最親密的對話

00:01:31.758 --> 00:01:34.261 
當今的移動設備
前所未有地記錄着我們的生活

00:01:34.328 --> 00:01:35.729 
當你這樣考慮 你會發現

00:01:35.796 --> 00:01:37.764 
保護所有這些信息的安全

00:01:37.831 --> 00:01:39.867 
這不僅僅是技術上的問題

00:01:40.534 --> 00:01:42.002 
對我們來說是一項任務

00:01:42.069 --> 00:01:44.605 
這項任務的中心在於保護

00:01:44.671 --> 00:01:47.241 
我們用戶的個人數字主權

00:01:49.142 --> 00:01:51.311 
而且當你這樣考慮
你還會發現

00:01:51.378 --> 00:01:54.047 
攻擊者的定義也發生了改變

00:01:56.283 --> 00:02:00.153 
現今的攻擊者可能會想要
持有你的數據並進行勒索

00:02:00.821 --> 00:02:04.625 
他們可能是不良的商業
競爭對手 想要佔得優勢

00:02:05.259 --> 00:02:07.094 
他們可能是網絡服務提供商

00:02:07.160 --> 00:02:10.330 
想要不可磨滅地
標記出你的在線活動

00:02:10.396 --> 00:02:13.200 
在未徵求你同意的情況下
進行跟蹤和廣告宣傳

00:02:14.434 --> 00:02:15.903 
這可能是國家

00:02:15.969 --> 00:02:18.872 
像是2014年Sony
Pictures的黑客入侵

00:02:20.374 --> 00:02:24.011 
有時候好奇心也會讓
和我們親近的人受到侵害

00:02:24.077 --> 00:02:26.413 
攻擊者會是誰

00:02:26.480 --> 00:02:28.682 
當然 還有
我們一定不能低估

00:02:28.749 --> 00:02:31.218 
高等貓科動物
所帶來的威脅

00:02:37.524 --> 00:02:38.425 
謝謝

00:02:40.360 --> 00:02:42.362 
所以當你想想這些攻擊者

00:02:42.429 --> 00:02:43.597 
他們想要什麼？

00:02:44.198 --> 00:02:47.835 
我們發現這些動機
通常會在這三個組中

00:02:47.901 --> 00:02:50.204 
有個人跟蹤和監視

00:02:50.838 --> 00:02:54.107 
嘗試獲取你的照片和消息

00:02:54.174 --> 00:02:56.743 
使用你的相機和麥克風

00:02:57.377 --> 00:02:59.079 
還有商業間諜

00:02:59.379 --> 00:03:02.850 
獲取你的商業郵件和文件

00:03:02.916 --> 00:03:04.885 
還有你的知識產權

00:03:04.952 --> 00:03:06.220 
攻擊者想要什麼？

00:03:06.286 --> 00:03:10.858 
最後這裏有直接經濟好處
將金錢直接

00:03:10.924 --> 00:03:13.427 
從你的網上銀行業務交易中盜走
或者植入廣告

00:03:13.493 --> 00:03:15.562 
以及在你瀏覽網頁的時候
進行點擊欺詐

00:03:17.164 --> 00:03:20.133 
爲了做到這些事
攻擊者創建了

00:03:20.701 --> 00:03:23.837 
廣告軟件 間諜軟件 勒索軟件

00:03:23.904 --> 00:03:27.274 
遠程訪問木馬
以及多種多樣的惡意軟件

00:03:29.643 --> 00:03:30.477 
我們怎麼會知道？

00:03:30.544 --> 00:03:32.446 
因爲我們在其他
平臺上見到過

00:03:41.455 --> 00:03:42.923 
但iOS上面沒有

00:03:43.924 --> 00:03:47.127 
iOS上市將近10年之久

00:03:47.194 --> 00:03:49.830 
還沒有出現
一種iOS的惡意軟件

00:03:49.897 --> 00:03:51.765 
大範圍地影響我們的用戶

00:03:56.570 --> 00:03:59.806 
這是因爲大約在10年前
Apple就意識到

00:03:59.873 --> 00:04:03.844 
移動設備會在用戶的生活
中發揮着何種作用

00:04:04.545 --> 00:04:06.580 
我們意識到
現存的安全技術

00:04:06.647 --> 00:04:10.284 
是遠遠不夠的
並且無法勝任這些挑戰

00:04:10.951 --> 00:04:16.723 
所以我們決定構建出我們
所能設想的最佳安全技術

00:04:18.257 --> 00:04:21.327 
來保護我們的客戶
並且規模大得驚人

00:04:21.394 --> 00:04:22.763 
我們所保護的用戶

00:04:22.829 --> 00:04:26.333 
在全球範圍內
擁有10億多激活的iOS設備

00:04:28.735 --> 00:04:31.238 
而且我們的每一項安全功能

00:04:31.305 --> 00:04:33.373 
都會真正地保護用戶免遭威脅

00:04:34.842 --> 00:04:36.977 
IOS安全支柱

00:04:37.044 --> 00:04:38.345 
但我們並不孤單

00:04:38.745 --> 00:04:41.348 
在iOS安全中
有三個關鍵支柱

00:04:43.417 --> 00:04:45.385 
有平臺安全
我們將這類技術

00:04:45.452 --> 00:04:47.487 
構建於我們的
軟件和硬件之中

00:04:48.088 --> 00:04:52.226 
有用戶將他們的軟件
升級到最新最安全的版本

00:04:52.292 --> 00:04:54.061 
然後有像各位這樣的開發者

00:04:54.127 --> 00:04:56.964 
使用我們的安全技術
構建安全的應用

00:04:57.698 --> 00:04:59.666 
我們今天要談談這三個支柱

00:05:00.400 --> 00:05:02.069 
我們從平臺安全開始

00:05:04.404 --> 00:05:07.975 
當你想想之前安全的運作方式
尤其在企業設置中

00:05:09.376 --> 00:05:12.479 
那是一長串的複雜內容

00:05:12.546 --> 00:05:14.915 
用戶必須要遵守
才能保證安全

00:05:14.982 --> 00:05:17.851 
在設備上加載安全配置

00:05:18.085 --> 00:05:21.989 
複雜的批量管理方案
複雜的密碼策略

00:05:22.523 --> 00:05:26.193 
非常困難 非常笨重
用戶根本無法成功

00:05:26.260 --> 00:05:27.794 
而且很難實現安全

00:05:29.129 --> 00:05:32.199 
但因爲Apple擁有
所有的硬件和軟件

00:05:32.266 --> 00:05:35.936 
我們能夠以一種獨特又
創新的方式解決這一問題

00:05:37.137 --> 00:05:38.238 
當你審視iOS安全

00:05:38.305 --> 00:05:40.707 
我們將安全直接構建在硅片上

00:05:41.108 --> 00:05:44.511 
在默認情況下 我們讓設備
在出廠時就是安全的

00:05:44.978 --> 00:05:47.447 
我們讓用戶非常容易地升級

00:05:47.514 --> 00:05:49.316 
並運行最新最安全的版本

00:05:50.684 --> 00:05:54.221 
我們讓用戶非常容易地使用
Touch ID來安全登入設備

00:05:54.888 --> 00:05:58.992 
我們監管App Store
而且我們讓安全易於使用

00:06:01.495 --> 00:06:04.097 
iOS平臺安全
包括大量的功能

00:06:04.164 --> 00:06:06.567 
而今天
我只有時間強調五項功能

00:06:07.100 --> 00:06:08.569 
我們從安全引導開始

00:06:09.603 --> 00:06:11.104 
安全引導

00:06:11.905 --> 00:06:13.774 
能夠信任一個設備的最重要

00:06:13.841 --> 00:06:16.543 
方式之一就是
信任上面運行的軟件

00:06:17.511 --> 00:06:18.946 
我們的做法是

00:06:21.481 --> 00:06:23.383 
在硅片內部構建信任

00:06:26.587 --> 00:06:31.491 
每個iOS設備內部的
Apple設計系統芯片都持有

00:06:31.992 --> 00:06:36.597 
Apple公開密鑰 位於一個叫做
Boot ROM的只讀存儲區域中

00:06:36.663 --> 00:06:39.366 
在出廠前就已寫上
並且之後無法改變

00:06:40.100 --> 00:06:41.835 
當你的iOS設備啓動時

00:06:43.036 --> 00:06:44.271 
我們會用那個公開密鑰

00:06:44.838 --> 00:06:48.442  
然後Boot ROM會在
引導鏈中驗證下一步

00:06:48.509 --> 00:06:50.110  
也就是低級引導加載程序

00:06:50.477 --> 00:06:54.848  
而且只有通過了那個驗證
我們纔會進入到鏈中的下一步

00:06:55.582 --> 00:06:59.419  
我們會重複該過程
直到iOS設備完全開啓

00:07:00.487 --> 00:07:02.623  
這讓我們確定
引導中使用的軟件

00:07:02.689 --> 00:07:05.959  
的每一部分都簽有
Apple的私人密鑰

00:07:10.731 --> 00:07:12.199 
信任安全引導

00:07:12.266 --> 00:07:13.767 
當你想想安全引導

00:07:14.134 --> 00:07:16.270 
非常有趣的是
我們不依靠

00:07:16.336 --> 00:07:19.806 
任何第三方來實現
安全引導信任

00:07:19.873 --> 00:07:24.044 
我們不依賴我們控制
之外的證書權威機構

00:07:24.545 --> 00:07:28.749 
用於安全引導的密鑰
是由Apple生成 管理和提供的

00:07:28.815 --> 00:07:30.384 
用於驗證的代碼

00:07:30.450 --> 00:07:32.686 
剛纔給你們展示了
也是Apple編寫的

00:07:32.753 --> 00:07:36.757 
只有Apple擁有給所有軟件
簽名所需的私人密鑰

00:07:38.358 --> 00:07:41.395 
但這裏還有另一件
有趣的事 那就是

00:07:41.461 --> 00:07:45.399 
當iOS設備去升級
軟件版本時

00:07:45.465 --> 00:07:48.836 
它必須聯繫我們的
安裝授權服務器

00:07:48.902 --> 00:07:52.005 
並請求許可
來升級到指定的版本

00:07:52.172 --> 00:07:55.742 
做法是將升級版本的加密測量

00:07:55.809 --> 00:07:58.912 
發送給服務器
然後詢問是否可以升級

00:08:00.047 --> 00:08:03.016 
我們這麼做是因爲
現在服務器能夠

00:08:03.116 --> 00:08:09.423 
防止iOS設備遷移到
更舊更不安全的iOS版本

00:08:10.858 --> 00:08:15.963 
所以當你將這兩者放在一起
你會得到一個強大可靠的機制

00:08:16.330 --> 00:08:19.266 
依靠每個iOS設備上
所運行的軟件

00:08:20.567 --> 00:08:24.605 
舊版iOS無法從一個設備
複製到另一個設備上

00:08:24.838 --> 00:08:27.875 
該過程的軟件完整性
是無法篡改的

00:08:30.644 --> 00:08:33.746 
現在我們談談保護
用戶的靜態數據

00:08:34.181 --> 00:08:35.482 
數據保護

00:08:35.749 --> 00:08:37.885 
如果你非常認真對待這件事

00:08:38.652 --> 00:08:41.522 
你不要將保護
用戶數據的加密密鑰

00:08:41.587 --> 00:08:44.057 
用在應用處理器中

00:08:44.124 --> 00:08:46.426 
或是設備中的普通處理器

00:08:46.793 --> 00:08:49.696 
這是因爲那裏的攻擊面
實在是太大了

00:08:49.997 --> 00:08:52.165 
如果真的想保護
用戶的靜態數據

00:08:52.232 --> 00:08:55.636 
你要構建專門的硅片
來持有這些加密密鑰

00:08:55.936 --> 00:08:56.803 
我們就這樣做的

00:08:57.104 --> 00:08:58.872 
我們稱之爲
Secure Enclave

00:09:00.240 --> 00:09:02.476 
當你在想密碼的時候

00:09:02.543 --> 00:09:04.811 
通常它們很短
4到6位數

00:09:05.112 --> 00:09:10.284 
如果攻擊者設法將
加密的數據從手機中取走

00:09:10.350 --> 00:09:11.818 
從iOS設備中取走

00:09:12.352 --> 00:09:14.821 
並嘗試所有可能的密碼

00:09:15.222 --> 00:09:16.790 
這不會花多長時間

00:09:18.392 --> 00:09:23.497 
所以取而代之
我們從用戶的密碼中衍生出一個密鑰

00:09:23.564 --> 00:09:28.302 
僅用於Secure Enclave
的硬件密鑰相掛鉤

00:09:28.869 --> 00:09:33.273 
這意味着無法在
離線狀態下猜測出密碼

00:09:33.340 --> 00:09:35.976 
密碼猜測必須要在設備上進行

00:09:36.410 --> 00:09:39.379 
而且設備可以自由
限制嘗試的次數

00:09:41.181 --> 00:09:44.551 
事實上 這就是你
iOS設備的工作原理

00:09:46.820 --> 00:09:51.391 
在幾次錯誤密碼嘗試之後
我們會實行時間延遲

00:09:52.392 --> 00:09:54.428 
但在10次錯誤密碼嘗試之後

00:09:54.494 --> 00:09:58.131 
Secure Enclave將不會
再次解鎖那個設備

00:09:59.967 --> 00:10:02.369 
這與清除數據功能
沒有任何關係

00:10:02.836 --> 00:10:04.271 
當啓用時

00:10:04.571 --> 00:10:08.008 
數據會在10次錯誤密碼
嘗試之後被清除掉

00:10:08.075 --> 00:10:09.877 
即使你沒開這項功能

00:10:11.812 --> 00:10:13.914 
一旦出現10次
錯誤密碼嘗試

00:10:14.214 --> 00:10:17.284 
Secure Enclave
將不會再解鎖那個設備

00:10:17.351 --> 00:10:19.152 
無論你等多長時間

00:10:21.555 --> 00:10:25.192 
所以我們使用行業標準
算法來構建系統

00:10:25.726 --> 00:10:28.428 
我們對其進行
嚴格的內部安全審查

00:10:29.096 --> 00:10:30.430 
以及第三方代碼審覈

00:10:31.198 --> 00:10:32.599 
之後我們還會再進一步

00:10:32.666 --> 00:10:35.035 
我們將我們核心加密庫

00:10:35.102 --> 00:10:38.972 
用於支持數據保護
而且我們將它們發佈到網上

00:10:39.039 --> 00:10:41.408 
供所有人下載檢查

00:10:42.042 --> 00:10:43.443 
我們談談沙盒

00:10:43.510 --> 00:10:44.578 
沙盒

00:10:44.645 --> 00:10:48.815 
沙盒是一種在應用之間
隔離數據的方法

00:10:50.317 --> 00:10:52.786 
這是因爲
即使意圖是好的

00:10:52.853 --> 00:10:54.555 
開發者有時還是會犯錯

00:10:55.155 --> 00:11:00.227 
沙盒這種方法可以減輕
由那些錯誤帶來的潛在危害

00:11:00.527 --> 00:11:03.864 
這有點像汽車中的
氣囊或安全帶

00:11:03.931 --> 00:11:06.500 
能夠減輕事故中受傷的風險

00:11:08.435 --> 00:11:11.805 
我們還使用沙盒
來將一些有關安全的

00:11:11.872 --> 00:11:14.174 
選擇直接交到
用戶的手裏

00:11:14.608 --> 00:11:18.912 
我們有一個叫做TCC的機制
透明 同意 控制

00:11:18.979 --> 00:11:22.416 
我們可以詢問用戶
問他們是否信任指定的應用

00:11:22.482 --> 00:11:25.986 
並將一些敏感數據交給它們
例如地點 照片和聯繫人

00:11:26.453 --> 00:11:29.189 
一旦用戶在這樣的
對話中下了決定

00:11:29.556 --> 00:11:32.860 
沙盒機制和內核
就會執行那個決定

00:11:34.962 --> 00:11:35.896 
代碼簽名

00:11:35.963 --> 00:11:39.766 
我們平臺安全的另一個
關鍵因素就是代碼簽名

00:11:42.469 --> 00:11:44.538 
當攻擊者嘗試攻擊設備時

00:11:44.605 --> 00:11:48.141 
第一步就是嘗試
讓他們的惡意代碼運行起來

00:11:50.277 --> 00:11:54.815 
因此 iOS代碼簽名
不僅是涵蓋操作系統

00:11:55.215 --> 00:11:57.384 
它還涵蓋設備上
運行的每個應用

00:11:58.185 --> 00:12:01.522 
事實上 當你將應用上傳到
App Store上面的時候

00:12:02.022 --> 00:12:06.393 
Xcode會計算每個
可執行文件的密碼散列

00:12:06.460 --> 00:12:08.095 
和應用捆綁包中
資源的密碼散列

00:12:08.562 --> 00:12:11.665 
並且會將它們和應用
一同寫入代碼目錄

00:12:11.732 --> 00:12:13.367 
之後再送到App Store

00:12:14.368 --> 00:12:16.803 
當用戶下載應用並運行它

00:12:17.771 --> 00:12:21.508 
我們的內核會查看
每個可執行的存儲頁面

00:12:21.575 --> 00:12:23.744 
然後和代碼目錄
進行對比 來確保

00:12:23.810 --> 00:12:25.212 
其未被篡改過

00:12:26.947 --> 00:12:30.851 
結果 攻擊者無法將
一些惡意代碼

00:12:30.918 --> 00:12:33.854 
植入到存儲中
並將控制流轉移過去

00:12:34.188 --> 00:12:36.690 
反而 他們必須
依靠於更加複雜的

00:12:37.057 --> 00:12:39.860 
更加困難的方案
來運行他們的惡意代碼

00:12:42.829 --> 00:12:45.599 
Touch ID

00:12:45.999 --> 00:12:47.401 
我們談談Touch ID

00:12:48.035 --> 00:12:48.869 
每天平均80次用戶解鎖

00:12:48.936 --> 00:12:53.440 
我們知道我們的iPhone用戶
每天平均解鎖手機80次

00:12:55.509 --> 00:13:01.515 
如果你設置了密碼
這就會給那80次解鎖帶來麻煩

00:13:04.918 --> 00:13:05.786 
結果

00:13:06.186 --> 00:13:09.990 
幾乎過半的用戶
沒有設置密碼

00:13:10.457 --> 00:13:15.195 
我們知道因爲密碼
可以說是用於保護

00:13:15.262 --> 00:13:19.366 
用戶靜態數據的關鍵部分
所以這個問題我們必須要解決

00:13:20.634 --> 00:13:21.635 
我們需一個解決方案

00:13:21.702 --> 00:13:24.505 
要簡單

00:13:25.205 --> 00:13:26.473 
要快速

00:13:26.540 --> 00:13:29.977 
並能爲用戶的數據
提供極好的保護

00:13:32.546 --> 00:13:34.281 
我們解決方案是Touch ID

00:13:35.549 --> 00:13:39.786 
不過我們不僅是將
指紋傳感器放入手機中

00:13:41.655 --> 00:13:43.123 
你可以更改密碼

00:13:43.190 --> 00:13:45.626 
但你無法更改
你的生物特徵屬性

00:13:45.692 --> 00:13:47.094 
你無法改變你的指紋

00:13:47.594 --> 00:13:48.829 
所以我們知道

00:13:48.896 --> 00:13:52.399 
我們必須提供生物特徵數據
這是我們能構建的

00:13:52.633 --> 00:13:53.567 
最高級別保護

00:13:54.535 --> 00:13:57.304 
所以我們做的是
將指紋傳感器直接連接

00:13:57.871 --> 00:14:01.041 
到Secure Enclave
通過一個加密鏈接

00:14:01.875 --> 00:14:05.245 
而且我們使得
當你的手指觸摸到傳感器時

00:14:06.280 --> 00:14:09.783 
指紋會直接傳輸到
Secure Enclave

00:14:09.850 --> 00:14:12.219 
在那裏進行處理
然後加密

00:14:14.021 --> 00:14:16.657 
而應用處理器無法獲取指紋

00:14:16.723 --> 00:14:19.293 
應用處理器運行
手機上的正常應用

00:14:21.962 --> 00:14:24.164 
我剛纔提過
在Touch ID推出之前

00:14:24.231 --> 00:14:27.701 
大約一半的用戶設置了密碼

00:14:27.768 --> 00:14:29.403 
Touch ID之前的密碼使用率

00:14:29.469 --> 00:14:31.238 
現在九成人用密碼

00:14:31.305 --> 00:14:32.940 
Touch ID之後的密碼使用率

00:14:33.006 --> 00:14:35.843 
這精彩地示範了
Apple的驚人之處

00:14:36.176 --> 00:14:38.846 
我們將硬件工程專業技術

00:14:38.912 --> 00:14:40.914 
軟件工程專業技術

00:14:40.981 --> 00:14:42.850 
對易於使用的投入

00:14:42.916 --> 00:14:46.720 
將它們組合在一起
使得普通用戶

00:14:46.787 --> 00:14:48.722 
不關心指紋傳感器

00:14:49.056 --> 00:14:51.625 
不關心Secure Enclave
或是散列函數

00:14:52.759 --> 00:14:56.897 
他們得到的是
數據安全的驚人提升

00:14:59.700 --> 00:15:01.268 
用戶升級軟件

00:15:01.335 --> 00:15:04.071 
iOS安全的第二個支柱

00:15:05.873 --> 00:15:08.008 
是用戶升級軟件

00:15:10.878 --> 00:15:13.847 
最新版的iOS
總會是最安全的

00:15:14.314 --> 00:15:16.884 
並且我們持續讓
iOS變得更加安全

00:15:17.284 --> 00:15:20.120 
基於現在見過的威脅
和未來預見到的威脅

00:15:21.488 --> 00:15:23.223 
而且我們構建所有深層的技術

00:15:23.290 --> 00:15:27.094 
來信任在我們
硬件上運行的軟件

00:15:28.395 --> 00:15:30.030 
但iOS版本無論多麼安全

00:15:31.398 --> 00:15:34.835 
如果人們不去安裝
最新的版本 這都是沒意義的

00:15:34.902 --> 00:15:36.036 
最安全的那個版本

00:15:37.271 --> 00:15:38.772 
所以當我們考慮軟件升級時

00:15:38.839 --> 00:15:41.341 
這不僅有關於
那個設備和其運行的軟件

00:15:41.408 --> 00:15:44.411 
這還關於我們與運營商的關係

00:15:44.478 --> 00:15:46.480 
以及我們快速發佈升級的能力

00:15:47.181 --> 00:15:48.782 
還有用戶體驗

00:15:49.082 --> 00:15:52.352 
用戶如何看待設備上的升級

00:15:55.455 --> 00:15:58.392 
我們在iOS 9中做的一件事是
我們極大縮小了

00:15:58.458 --> 00:16:00.894 
安裝升級所佔用的空間量

00:16:01.161 --> 00:16:04.932 
這樣擁有較小剩餘空間的
用戶還是可以獲取最新

00:16:04.998 --> 00:16:07.568 
最安全的軟件版本

00:16:07.634 --> 00:16:09.169 
更小的安裝佔用空間

00:16:09.236 --> 00:16:11.638 
之後我們着眼於用戶體驗

00:16:12.372 --> 00:16:16.810 
然後說 有時候用戶
不想因爲升級而被中斷

00:16:16.877 --> 00:16:19.446 
所以我們讓他們選擇
是立刻安裝升級

00:16:19.980 --> 00:16:21.315 
或是在晚上安裝

00:16:21.381 --> 00:16:23.283 
當他們可能沒在
使用手機的時候

00:16:23.350 --> 00:16:25.085 
或者第二天提醒

00:16:27.287 --> 00:16:29.156 
得出的結果很驚人

00:16:30.157 --> 00:16:34.928 
將近85%的客戶
在運行最新的iOS版本

00:16:34.995 --> 00:16:36.663 
我們最安全的版本

00:16:38.198 --> 00:16:41.435 
如果你認爲這很簡單
沒什麼大不了的

00:16:41.635 --> 00:16:43.904 
你只需去看看其他的平臺

00:16:44.304 --> 00:16:47.741 
Android安裝基數

00:16:47.808 --> 00:16:49.843 
順便一說
這個比較很公平

00:16:49.910 --> 00:16:54.014 
因爲Android 6和iOS 9
的發佈時間只相差幾個周

00:16:54.915 --> 00:16:57.551 
準確來說一下

00:16:57.918 --> 00:17:01.288 
在Android 5.1.1版之前
每個版本都有一個漏洞

00:17:01.355 --> 00:17:04.258 
叫做Stagefright
這會被遠程利用

00:17:04.324 --> 00:17:07.027 
你利用它的方法可以是
將一個專門製作的消息發送給

00:17:07.426 --> 00:17:10.864 
一個有漏洞的設備
然後獲得對那個設備的完全控制

00:17:11.431 --> 00:17:13.733 
Google很快修復了這個錯誤

00:17:15.335 --> 00:17:19.339 
但這沒有任何意義 因爲他們的
大多數用戶沒有安裝補丁

00:17:20.240 --> 00:17:23.010 
而沒有安裝補丁
是沒有任何作用的

00:17:23.076 --> 00:17:28.348 
這就是爲何我們投入如此多精力
不僅是構建安全的iOS版本

00:17:28.782 --> 00:17:33.086 
而且還讓用戶能容易
獲取最新最安全的版本

00:17:36.523 --> 00:17:39.193 
iOS安全中的第三個支柱

00:17:39.259 --> 00:17:40.594 
就是各位開發者

00:17:41.061 --> 00:17:44.431 
使用我們提供的安全技術
來打造安全的應用

00:17:44.498 --> 00:17:45.966 
開發者打造安全應用

00:17:46.033 --> 00:17:48.035 
遵循最佳做法

00:17:48.101 --> 00:17:50.537 
這意味着遵循
平臺上的最佳做法

00:17:50.604 --> 00:17:54.942 
我們有數量驚人的應用
使用Touch ID API

00:17:55.475 --> 00:17:59.379 
讓用戶免於記住複雜的密碼

00:17:59.446 --> 00:18:01.181 
然後再直接輸入到應用中

00:18:01.915 --> 00:18:05.352 
去年 我們推出了一項新功能
叫做App Transport Security

00:18:06.153 --> 00:18:09.556 
爲應用的信息提供強大的保護

00:18:09.623 --> 00:18:12.993 
隨着信息通過網絡
傳輸到應用的服務器上

00:18:15.696 --> 00:18:18.866 
今天我很自豪地說
在2016年的年底

00:18:18.932 --> 00:18:22.669 
App Transport Security將成爲
App Store應用的一個必要條件

00:18:24.071 --> 00:18:27.040 
這意味着到了2016年底

00:18:27.107 --> 00:18:30.110 
當你的應用和你自己
服務器的後端進行通信時

00:18:30.177 --> 00:18:34.681 
它們必須使用安全的TLS信道
使用TLS 1.2

00:18:35.883 --> 00:18:39.386 
除非通信中的數據是批量數據

00:18:39.453 --> 00:18:42.256 
例如流媒體和已加密的數據

00:18:43.190 --> 00:18:47.294 
這會將真真正正的安全
提供給我們的用戶

00:18:48.428 --> 00:18:51.265 
以及你應用在網絡上的通信

00:18:53.934 --> 00:18:58.172 
各位開發者還要承擔
另一部分責任

00:18:58.238 --> 00:18:59.173 
當你構建應用的時候

00:18:59.239 --> 00:19:01.842 
這就是要清楚你的代碼
這不僅是你編寫的代碼

00:19:02.075 --> 00:19:05.345 
還有你在應用中加入的
任何第三方代碼

00:19:05.412 --> 00:19:06.547 
清楚你的代碼

00:19:06.747 --> 00:19:11.451 
這是因爲你使用的庫
可能會破壞你應用的安全

00:19:12.152 --> 00:19:15.489 
可能因爲他們在背地裏
做一些你不知情的事

00:19:16.056 --> 00:19:17.491 
但可能

00:19:19.359 --> 00:19:22.262 
因爲這裏有一個
更新更安全的版本

00:19:23.697 --> 00:19:25.432 
這裏有一個很好的例子

00:19:25.499 --> 00:19:29.203 
有一個非常知名的
第三方網絡庫

00:19:29.803 --> 00:19:36.009 
在TLS連接的安全驗證上
出現了重大漏洞

00:19:36.076 --> 00:19:39.746 
這個漏洞很快就被修復了

00:19:39.813 --> 00:19:44.084 
但在一段時間裏 App Store
中有多達25,000個應用

00:19:44.151 --> 00:19:46.854 
不是最新最安全的版本

00:19:48.422 --> 00:19:52.659 
所以從可靠位置獲取
第三方代碼是十分重要的

00:19:53.227 --> 00:19:55.896 
你要清楚它的功能
並且要保持更新

00:19:57.497 --> 00:20:00.234 
所以這些就是我們
iOS安全中的三個關鍵支柱

00:20:00.601 --> 00:20:01.869 
平臺安全

00:20:01.935 --> 00:20:04.438 
這是最佳的安全技術機制

00:20:04.505 --> 00:20:06.740 
我們可以將其構建在
我們的硬件和軟件之中

00:20:07.107 --> 00:20:10.944 
我們的用戶下載
最新最安全的iOS版本

00:20:11.011 --> 00:20:14.014 
以及各位開發者
使用我們的安全技術

00:20:14.081 --> 00:20:15.182 
來打造安全應用

00:20:17.150 --> 00:20:18.385 
我們的成果如何？

00:20:18.452 --> 00:20:20.654 
這個問題問得非常好
那我們的成果如何？

00:20:21.822 --> 00:20:23.490 
iOS安全有多好？

00:20:24.958 --> 00:20:27.694 
安全的有趣之處在於
因爲和性能不同

00:20:28.028 --> 00:20:29.062 
你無法直接測量

00:20:29.129 --> 00:20:32.900 
你無法進行測試 看看得出
一個客觀的答案會花多長時間

00:20:33.834 --> 00:20:38.272 
所以剩下的就是間接指標

00:20:39.273 --> 00:20:42.676 
今天我會和大家分享三點

00:20:45.179 --> 00:20:46.213 
沒大範圍iOS惡意軟件

00:20:46.280 --> 00:20:50.083 
第一個是
自推出後的十年時間裏

00:20:50.317 --> 00:20:54.988 
還沒有任何一種iOS惡意軟件
大範圍影響我們的用戶

00:20:56.190 --> 00:20:58.525 
這一點對我們最爲重要

00:20:59.226 --> 00:21:03.330 
我們的用戶在將近10年時間裏
得到了無微不至的保護

00:21:06.800 --> 00:21:08.468 
下一個間接指標很有意思

00:21:08.535 --> 00:21:12.206 
就是看看一些放出的
不受限的越獄工具

00:21:13.006 --> 00:21:15.676 
這些越獄工具
擊敗了iOS安全機制

00:21:16.743 --> 00:21:22.149 
有意思的地方是
我們看到的最新版本

00:21:22.216 --> 00:21:24.451 
經常需要找到並鏈接起

00:21:24.518 --> 00:21:28.322 
5到10個截然不同的漏洞纔能夠

00:21:28.388 --> 00:21:30.691 
擊敗平臺安全機制

00:21:31.825 --> 00:21:33.994 
這比其他任何平臺都要高得多

00:21:35.329 --> 00:21:39.733 
原因是iOS安全措施是
步調緊密地共同發揮作用

00:21:40.367 --> 00:21:44.938 
這樣擊敗所有的措施
會花上很長時間和大量工夫

00:21:48.141 --> 00:21:50.210 
我的最後一個間接指標

00:21:50.711 --> 00:21:52.479 
我希望各位半信半疑地聽一下

00:21:54.648 --> 00:21:58.952 
可能在座的大多數人已經知道
那就是軟件漏洞黑市

00:22:00.187 --> 00:22:02.789 
時不時地 一些價格

00:22:03.190 --> 00:22:05.325 
會在黑市上變得透明

00:22:06.793 --> 00:22:10.264 
通常這些價格是幾萬美元

00:22:10.330 --> 00:22:11.532 
有時候是十萬美元

00:22:13.300 --> 00:22:15.736 
但在2013年
紐約時報獲悉

00:22:15.802 --> 00:22:19.006 
一個iOS漏洞價值五十萬美元

00:22:20.307 --> 00:22:24.811 
去年 福布斯採訪了
一名越獄工具開發者

00:22:24.878 --> 00:22:28.382 
那個人說大多數專家一致
認爲一款無限制的iOS越獄工具

00:22:28.916 --> 00:22:33.187 
的黑市價格是一百萬美元

00:22:33.253 --> 00:22:36.356 
一百萬美元

00:22:37.791 --> 00:22:40.761 
各位半信半疑地聽
不過這個數字真的非常驚人

00:22:43.630 --> 00:22:44.998 
接下來我們應該怎麼做？

00:22:50.871 --> 00:22:53.574 
很明顯安全是過程
而並非終點

00:22:54.441 --> 00:22:57.077 
在iOS安全上我們還會
繼續努力 永遠不會停歇

00:22:58.979 --> 00:23:01.648 
這也不是我們最近才感興趣的事

00:23:01.715 --> 00:23:04.852 
你現在看到的是
我們10年的結晶

00:23:04.918 --> 00:23:07.120 
爲保護用戶
所做出的最傑出工作

00:23:08.889 --> 00:23:11.625 
但是壞人不會善罷甘休

00:23:11.692 --> 00:23:14.027 
而我們會不斷髮展我們的安全

00:23:14.928 --> 00:23:18.332 
來擊敗現在以及將來的威脅

00:23:19.867 --> 00:23:23.036 
我們會利用我們
硬件和軟件的專業技術

00:23:23.170 --> 00:23:26.573 
我們會構建出我們
所能設想的最好安全技術

00:23:27.174 --> 00:23:31.044 
來保護我們的客戶 和他們
現在使用移動設備的方式

00:23:31.111 --> 00:23:32.846 
以及將來使用的方式

00:23:34.114 --> 00:23:39.152 
並保護我們的客戶不受
現在和將來的攻擊者的侵害

00:23:40.354 --> 00:23:41.555 
哪怕是貓

00:23:44.658 --> 00:23:45.592 
非常感謝

00:23:54.868 --> 00:23:56.136 
如果你想了解更多信息

00:23:56.203 --> 00:23:59.173 
我邀請你去閱讀
iOS安全指南

00:23:59.239 --> 00:24:02.676 
其中有關於這些強大
功能的大量技術細節

00:24:02.743 --> 00:24:05.779 
我剛纔講過的
還包括我沒時間講的

00:24:05.846 --> 00:24:08.515 
例如iCloud Keychain
和雙因素認證

00:24:08.815 --> 00:24:11.718 
在此次會議的網站上
會有一個鏈接

00:24:12.452 --> 00:24:13.353 
再次感謝大家