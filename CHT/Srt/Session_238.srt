00:00:20.320 --> 00:00:22.422
測量值和單位

00:00:34.034 --> 00:00:35.636
嗨 我是Daphne Larose

00:00:35.702 --> 00:00:37.871
我是Foundation團隊
的軟件工程師

00:00:38.105 --> 00:00:39.239
歡迎來到我的講座

00:00:39.439 --> 00:00:41.341
謝謝仍然堅持在這的你們

00:00:41.408 --> 00:00:42.876
我知道現在已經晚了

00:00:45.112 --> 00:00:47.548
當我想到應用

00:00:47.614 --> 00:00:50.050
我們通常和測量值關聯的

00:00:50.584 --> 00:00:52.886
我不知道你們
但是我首先想到的

00:00:52.953 --> 00:00:54.154
是轉換應用

00:00:54.454 --> 00:00:56.857
講得通 把一個單位轉換成另一個

00:00:57.724 --> 00:01:00.427
但是我想知道是否有其他應用

00:01:00.494 --> 00:01:03.263
也使用測量值
但是是用不那麼明顯的方式

00:01:04.932 --> 00:01:09.203
我不知道 但當我思考 測量值

00:01:09.269 --> 00:01:12.706
這很有趣 對嗎
因爲我們一直在用它們

00:01:13.073 --> 00:01:15.309
我們只是一般不會明確地想到它們

00:01:15.709 --> 00:01:17.845
它們會以一種意料之外的方式出現

00:01:18.212 --> 00:01:21.415
其中的一種方式是
它們不以單位的形式出現

00:01:21.481 --> 00:01:24.451
這很普遍
不管環境是什麼

00:01:24.918 --> 00:01:28.622
假設我在法國 我在用一個應用

00:01:28.889 --> 00:01:30.791
是計算路程長度

00:01:31.191 --> 00:01:34.895
我期待這個測量值會顯示公里

00:01:35.329 --> 00:01:37.030
但是它顯示英里

00:01:37.097 --> 00:01:37.931
這就像 嗯

00:01:38.332 --> 00:01:41.735
這是不和諧的
不是很好的用戶體驗

00:01:42.636 --> 00:01:45.038
所以在這次演講中
我們會向你介紹

00:01:45.105 --> 00:01:50.310
一系列可以幫助你確保這不會
在你的應用中發生的API

00:01:52.713 --> 00:01:55.549
如果我們再次思考這個問題
關於其他應用

00:01:55.616 --> 00:01:57.351
我們和測量值相關聯的應用

00:01:57.417 --> 00:01:59.920
我提到過轉換應用
這還是真的

00:02:00.554 --> 00:02:03.023
但是其他例子可以是遊戲 對嗎？

00:02:05.192 --> 00:02:08.127
所以今天我們會談談我在工作的遊戲

00:02:08.195 --> 00:02:10.531
它叫做Jammin' in the Streetz
有一個z

00:02:10.597 --> 00:02:12.799
因爲z很酷
我想要我的遊戲酷

00:02:13.934 --> 00:02:15.102
這個遊戲的假定

00:02:15.169 --> 00:02:18.071
是讓我們的玩家從一關跳舞到另一關

00:02:18.672 --> 00:02:22.142
我爲這個遊戲設定了一些目標

00:02:22.409 --> 00:02:24.878
一 我希望這個遊戲很有趣

00:02:24.945 --> 00:02:27.080
像是有史以來最有趣的一個遊戲

00:02:27.648 --> 00:02:30.984
二 大量表情符號 因爲我愛表情符號

00:02:31.652 --> 00:02:35.155
三 需要在世界範圍內可用
我想要它出現在每個地方

00:02:37.858 --> 00:02:40.894
當我們思考一些遊戲可能包括的內容

00:02:41.428 --> 00:02:43.664
每一輪會被稱爲一個jam會話

00:02:44.264 --> 00:02:46.867
在jam會話裏 它追蹤

00:02:47.134 --> 00:02:51.438
玩家從一關到另一關所花的總時間

00:02:51.939 --> 00:02:53.774
他們移動的距離

00:02:53.841 --> 00:02:56.109
他們進行的舞蹈移動

00:02:56.410 --> 00:02:59.179
甚至像是移動的速率

00:03:01.949 --> 00:03:04.685
但是讓我們想想我剛剛提到的事

00:03:05.319 --> 00:03:06.186
注意到什麼嗎？

00:03:06.820 --> 00:03:10.257
它們都是可測量的
它們都是可量化的 對嗎？

00:03:10.457 --> 00:03:14.027
如果我們現在停止這次演講

00:03:14.461 --> 00:03:16.396
突然拿出電腦嘗試寫代碼

00:03:17.164 --> 00:03:18.565
我們怎麼表現這？

00:03:19.299 --> 00:03:22.069
我們可以用雙精度浮點來表示它們

00:03:22.669 --> 00:03:23.504
這是對的

00:03:24.071 --> 00:03:26.406
簡單 這樣做的問題是

00:03:26.473 --> 00:03:29.376
如果我們在這麼做的時候漏掉了
一些上下文

00:03:29.977 --> 00:03:31.378
讓我們看一個例子

00:03:32.746 --> 00:03:34.014
我們有我們的角色

00:03:34.081 --> 00:03:36.016
我告訴過你 很多表情符號
我很喜歡

00:03:36.950 --> 00:03:39.887
我們的角色有月球漫步
因爲爲什麼不

00:03:40.487 --> 00:03:42.789
他們月球漫步了一段距離

00:03:43.290 --> 00:03:46.660
如果我們儲存距離爲5

00:03:47.327 --> 00:03:51.131
就像 嗯 好吧
但是5究竟是什麼意思？

00:03:51.431 --> 00:03:53.700
這帶來這個問題
5什麼？

00:03:54.768 --> 00:03:57.237
但是如果我們說5英尺
這就像是 好的

00:03:57.304 --> 00:03:58.605
這是有意義的

00:03:58.739 --> 00:04:00.707
現在它在物理空間中有了語境

00:04:02.209 --> 00:04:06.480
所以
讓我們談談

00:04:06.547 --> 00:04:08.815
Foundation引入的方法 或者說API

00:04:08.882 --> 00:04:11.485
來精確的表示整個語境

00:04:12.819 --> 00:04:13.954
你有一個新的結構

00:04:14.421 --> 00:04:16.857
叫做測量值 它在單位類型上是通用的

00:04:16.923 --> 00:04:19.192
我們會講一下什麼是單位類型

00:04:20.761 --> 00:04:24.898
包含一個單位和一個值
以及一個初始化函數

00:04:25.899 --> 00:04:29.503
它酷的地方是你可以

00:04:29.570 --> 00:04:33.340
有一個完整的語境來表達一個測量值

00:04:34.975 --> 00:04:36.710
如果我們返回到我們的角色

00:04:37.277 --> 00:04:38.345
假設在遊戲中

00:04:38.412 --> 00:04:40.948
我們不只是追蹤移動的距離

00:04:41.215 --> 00:04:44.685
我們還追蹤角色的剩餘距離

00:04:45.118 --> 00:04:47.120
我們怎麼用新API這麼做？

00:04:49.089 --> 00:04:53.193
現在我們可以把移動距離表達爲5英尺

00:04:54.094 --> 00:04:55.929
我們還可以把剩餘距離表達爲

00:04:56.196 --> 00:04:58.432
一個測量值 讓我們假設是6英尺

00:04:59.700 --> 00:05:02.569
等等 你可以用它做些很酷的事

00:05:02.936 --> 00:05:05.205
你可以把它們加起來得到總距離

00:05:05.606 --> 00:05:08.141
是一個11英尺的測量值

00:05:09.543 --> 00:05:13.647
你可以乘以它們得到你想要的值

00:05:14.982 --> 00:05:18.852
你可以除以他們得到一個類似的值

00:05:18.919 --> 00:05:19.786
這很好

00:05:21.355 --> 00:05:23.223
如果我們返回來思考單位

00:05:24.324 --> 00:05:27.561
什麼是我們想和單位關聯起來的？

00:05:29.296 --> 00:05:33.400
首先 每個單位有一個符號 容易地

00:05:35.636 --> 00:05:37.871
單位有量度

00:05:37.938 --> 00:05:42.276
一個例子是對於長度量度

00:05:43.410 --> 00:05:46.947
可以用 像是 英尺是長度單位
對嗎？

00:05:49.550 --> 00:05:51.618
單位間可以互相相等

00:05:51.685 --> 00:05:55.489
1英尺大約等於0.3米

00:05:57.457 --> 00:06:00.594
我們現在有API來表示一個單位
對象

00:06:01.428 --> 00:06:03.764
如果你注意的話

00:06:03.830 --> 00:06:06.433
之前我說每個單位有一個符號

00:06:06.633 --> 00:06:10.404
在API中我們在這表示符號

00:06:10.938 --> 00:06:13.974
我們沒有在這顯示量度和相等

00:06:14.041 --> 00:06:17.077
因爲不是每個單位都能等於另一個

00:06:17.144 --> 00:06:19.446
而且不是每個單位都是有尺寸的

00:06:19.947 --> 00:06:22.349
但是至少每個單位都有符號

00:06:22.416 --> 00:06:23.884
所以我們在這它表示它

00:06:24.551 --> 00:06:27.187
但是如果我們返回到量度的概念

00:06:27.254 --> 00:06:29.489
什麼是量度？
這是什麼意思？

00:06:30.123 --> 00:06:32.459
量度是單位的種類

00:06:32.659 --> 00:06:35.195
可以被不同單位表示

00:06:35.462 --> 00:06:37.598
當我們想到長度時
做爲一個例子

00:06:38.232 --> 00:06:43.203
長度可以用公里 英尺 英里等表示

00:06:44.505 --> 00:06:46.507
量度還有基本單位

00:06:46.573 --> 00:06:50.210
回到長度的例子
長度的基本單位是米

00:06:51.879 --> 00:06:54.214
你還可以在量度內進行轉換

00:06:54.281 --> 00:06:55.382
在單一的量度內

00:06:55.449 --> 00:06:58.352
你可以把公里轉換成英尺或反過來

00:06:58.418 --> 00:07:00.254
米到英里 等等

00:07:02.456 --> 00:07:04.625
現在我們有API來表示一個量度

00:07:04.691 --> 00:07:07.361
你看到在這
量度是單位的子類

00:07:07.694 --> 00:07:11.164
這表明它通過繼承獲得符號屬性

00:07:12.699 --> 00:07:14.268
我們有一個轉換器屬性

00:07:14.334 --> 00:07:17.337
我會深入地看一下單位轉換器

00:07:17.404 --> 00:07:20.174
但是基本上它定義這個單位

00:07:20.240 --> 00:07:21.708
和它的基本單位之間的轉換

00:07:22.709 --> 00:07:25.979
我們有初始化函數 需要符號和
轉換器實例

00:07:26.547 --> 00:07:29.082
我已經提到過每個量度有一個基本單位

00:07:29.149 --> 00:07:32.219
所以我們有一個類屬性會返回那個單位

00:07:32.953 --> 00:07:35.055
一件重要的事需要記得

00:07:35.122 --> 00:07:39.259
每個量度實例 屬於一個單位
並且自身是一個單位

00:07:40.594 --> 00:07:42.829
有了這個我們引入的新API

00:07:42.896 --> 00:07:45.199
酷的事是

00:07:45.265 --> 00:07:49.036
我們提供170多種單位

00:07:49.102 --> 00:07:51.071
你可以立即使用

00:07:51.138 --> 00:07:52.439
你甚至無需自己定義它們

00:07:52.506 --> 00:07:53.607
你只需要使用它們

00:07:53.907 --> 00:07:55.509
像是 在這次演講之後

00:07:57.945 --> 00:08:02.583
大部分單位是依照國際單位系統

00:08:02.649 --> 00:08:05.953
所以它們使用你已經習慣的單位
這很酷

00:08:07.321 --> 00:08:08.755
讓我們看一個例子

00:08:09.223 --> 00:08:13.894
我們有長度量度
它有一系列的單位

00:08:13.961 --> 00:08:16.797
是類屬性表示這些量度

00:08:17.064 --> 00:08:18.665
如果我們返回這裏

00:08:18.732 --> 00:08:21.602
量度實例實際上是單位

00:08:22.302 --> 00:08:24.171
任何時候你調用這些屬性

00:08:24.238 --> 00:08:26.406
你獲得一個長度單位的實例

00:08:27.140 --> 00:08:29.409
這些實例的區別是

00:08:29.476 --> 00:08:31.245
第一 它們的符號不同

00:08:31.478 --> 00:08:36.683
第二 轉換器的定義不同

00:08:39.620 --> 00:08:43.423
一個我們提供給你的所有類的概述

00:08:43.490 --> 00:08:44.925
所有不同的單位類型

00:08:45.325 --> 00:08:48.629
記得我說過有170多種

00:08:49.029 --> 00:08:50.831
試着用一用它們

00:08:51.231 --> 00:08:53.834
但是我們有一些很酷的
一些常用的單位類型

00:08:53.901 --> 00:08:56.270
像是面積 質量 溫度 長度

00:08:56.603 --> 00:09:01.041
但是也有一些不常用的像是
光照度和電流

00:09:01.108 --> 00:09:03.744
但是聽起來真的很有趣 若你玩一玩它們

00:09:04.945 --> 00:09:09.283
讓我們返回到我們的移動距離和
剩餘距離的測量值

00:09:09.616 --> 00:09:11.285
這是我們已經見過的代碼

00:09:12.252 --> 00:09:14.021
現在我們要註釋最後兩行

00:09:14.087 --> 00:09:15.422
因爲我們要重新定義它們

00:09:15.889 --> 00:09:17.558
我們只剩已移動距離

00:09:18.091 --> 00:09:21.328
但是我們定義剩餘距離
使用相同的值6

00:09:21.395 --> 00:09:23.397
但是不是傳遞英尺作爲單位

00:09:23.463 --> 00:09:24.865
我們傳遞公里

00:09:27.701 --> 00:09:29.703
現在事情開始變得危險

00:09:29.770 --> 00:09:33.674
因爲我們要把已移動距離
和剩餘距離加起來

00:09:33.740 --> 00:09:36.276
但是一個是英尺 一個是公里

00:09:37.010 --> 00:09:38.946
這對總距離說明什麼？

00:09:39.012 --> 00:09:41.548
它的單位是英尺還是公里？

00:09:41.715 --> 00:09:43.717
講臺會在5秒內爆炸嗎？

00:09:43.784 --> 00:09:44.651
我不知道

00:09:45.219 --> 00:09:46.987
但是 不 它不會

00:09:47.054 --> 00:09:50.257
其實發生的事是
結果的單位是基本單位

00:09:50.490 --> 00:09:51.391
也就是米

00:09:51.592 --> 00:09:53.560
關於測量值酷的事情

00:09:53.627 --> 00:09:56.930
是暗中爲我們處理了一切

00:09:57.097 --> 00:09:58.799
你完全不需要爲此擔心

00:09:58.966 --> 00:10:01.935
你可以用這些操作符
就像普通的標量值一樣

00:10:02.002 --> 00:10:03.737
你獲得期待的結果

00:10:06.039 --> 00:10:10.944
現在讓我們再次假設我想要追蹤角色

00:10:11.011 --> 00:10:14.748
因爲某些原因 因爲是在演示

00:10:14.815 --> 00:10:19.386
我們只是打印字符串
但是我想做些更時髦的事

00:10:19.453 --> 00:10:21.154
同時更有功能性

00:10:21.221 --> 00:10:22.456
但關鍵是我希望能夠

00:10:22.523 --> 00:10:24.925
比較這些測量值
現在你可以

00:10:24.992 --> 00:10:28.795
測量值支持比較操作符
使你能夠這麼做

00:10:28.862 --> 00:10:32.966
如果我們要打印
距離標記

00:10:33.734 --> 00:10:36.069
我們會得到我們想要的剛剛開始

00:10:36.136 --> 00:10:38.405
因爲測量值可以正確推斷

00:10:38.472 --> 00:10:41.375
已移動距離比剩餘距離小

00:10:44.845 --> 00:10:47.314
讓我們談談更多關於定義一個單位

00:10:47.381 --> 00:10:49.483
因爲我們還沒有深入研究它

00:10:50.651 --> 00:10:51.818
之前提過

00:10:51.885 --> 00:10:54.755
單位總是以它們的基本單位定義的

00:10:56.290 --> 00:11:00.594
有一個方法來描述這種轉換

00:11:00.661 --> 00:11:03.063
和基本單位之間的轉換

00:11:03.130 --> 00:11:07.401
我們會在進入單位轉換器的時候
談論更多

00:11:09.503 --> 00:11:12.072
重要的事是記得

00:11:12.139 --> 00:11:15.142
轉換隻能發生在單一量度中

00:11:15.375 --> 00:11:17.377
比如當你想到長度

00:11:17.611 --> 00:11:21.148
你可以把公里轉換成英尺

00:11:21.215 --> 00:11:25.018
但是你會嘗試把公里轉換成秒嗎？

00:11:25.285 --> 00:11:27.821
在概念上這並沒有意義

00:11:28.021 --> 00:11:30.924
在這個情況下
如果你試着對測量值這麼做

00:11:30.991 --> 00:11:31.825
會拋出

00:11:33.260 --> 00:11:35.996
一個Objective-C
或者Swift中的致命錯誤

00:11:39.199 --> 00:11:41.935
記得我提過我們提供

00:11:42.002 --> 00:11:44.605
170多種單位給你立即使用

00:11:44.972 --> 00:11:48.509
有可能你不需要定義你的定製單位

00:11:48.909 --> 00:11:50.777
但是如果你需要 只有在這時

00:11:50.844 --> 00:11:53.747
你需要思考如果定義它們
這很酷

00:11:53.814 --> 00:11:55.015
你實際上可以用它們

00:11:55.082 --> 00:11:57.584
那些已經提供給你的單位

00:11:57.885 --> 00:11:59.786
但是如果你創造定製的單位

00:12:00.020 --> 00:12:02.589
你要思考如何建立轉換器

00:12:04.258 --> 00:12:05.926
酷的是

00:12:05.993 --> 00:12:09.997
測量值可以幫你暗中處理轉換

00:12:10.063 --> 00:12:11.398
即使是你定製的單位

00:12:12.266 --> 00:12:14.468
它就是能自動地工作

00:12:16.103 --> 00:12:17.571
讓我們談談定製單位

00:12:17.638 --> 00:12:19.540
我們要爲遊戲定製一些單位

00:12:21.508 --> 00:12:24.978
我們有jamz單位
因爲我想

00:12:25.045 --> 00:12:27.548
計算一個jam會話中的總時間

00:12:27.614 --> 00:12:30.083
用叫做jamz的單位來計算

00:12:30.184 --> 00:12:31.852
我覺得秒太無聊了

00:12:32.619 --> 00:12:36.757
但如果你看看這裏 我們有
UnitConverterLinear對象

00:12:36.857 --> 00:12:39.092
它是什麼？
我們還沒有說過它

00:12:39.660 --> 00:12:42.763
讓我們返回來說說更多關於轉換的事

00:12:44.131 --> 00:12:45.933
和基本單位之間的轉換

00:12:46.900 --> 00:12:49.870
UnitConverter是根類
它定義兩個方法

00:12:50.204 --> 00:12:53.040
描述這個轉換

00:12:53.407 --> 00:12:57.110
baseUnitValue(fromValue)
和value(fromBaseUnitValue)

00:12:58.011 --> 00:13:01.615
UnitConverterLinear
覆蓋這兩個方法

00:13:01.849 --> 00:13:03.483
併線性地定義它們

00:13:03.550 --> 00:13:05.185
對這裏所有懂數學的人

00:13:05.252 --> 00:13:06.887
它的形式是AX+B

00:13:06.954 --> 00:13:09.122
A是係數 B是常數

00:13:10.791 --> 00:13:12.593
如果我們返回到jamz單位

00:13:14.828 --> 00:13:19.266
我們看到係數是30 一個標量值30

00:13:19.333 --> 00:13:22.970
我們是說一個jamz單位等於30秒

00:13:23.370 --> 00:13:25.472
在我們的線性函數中

00:13:25.939 --> 00:13:28.342
無論jamz爲何值
我們把它乘以30

00:13:28.408 --> 00:13:32.212
所以一次jam會話共是4個jamz
4個jamz

00:13:32.679 --> 00:13:35.015
如果我們想把它轉換成秒

00:13:35.082 --> 00:13:37.484
會是4乘以30等於120秒

00:13:37.918 --> 00:13:39.186
你也可以反過來做

00:13:39.253 --> 00:13:41.722
120除以30來得到jamz值

00:13:41.788 --> 00:13:42.623
耶

00:13:44.491 --> 00:13:48.362
假設我要定義其他定製單位
比如長度

00:13:48.428 --> 00:13:51.832
因爲我不想用英尺和米計算
移動距離

00:13:51.899 --> 00:13:54.535
我想用一些更有趣的東西比如hopz

00:13:55.135 --> 00:13:57.137
所以這裏 相同的概念

00:13:57.638 --> 00:14:01.141
1 hopz等於0.75米

00:14:01.475 --> 00:14:05.212
我們在這定義方程

00:14:05.779 --> 00:14:09.216
其他我需要的定製單位也是一樣

00:14:09.783 --> 00:14:11.785
你現在知道怎麼做了

00:14:14.154 --> 00:14:18.025
如果你還記得
當我談到jam會話

00:14:18.358 --> 00:14:20.694
我命名了一個測量值

00:14:20.761 --> 00:14:23.463
是所進行的舞蹈移動的次數

00:14:24.364 --> 00:14:28.502
不幸的是國際單位系統沒有一個量度

00:14:28.569 --> 00:14:30.270
用來識別舞蹈移動

00:14:30.337 --> 00:14:31.738
我不確定爲什麼

00:14:31.805 --> 00:14:34.374
但是這是一個我們今天要自己
定義的東西

00:14:34.508 --> 00:14:36.176
我們有UnitDanceMove類

00:14:36.610 --> 00:14:39.012
有一個基本單位
wackyArmMovements

00:14:40.480 --> 00:14:41.682
你在這看到

00:14:41.748 --> 00:14:44.785
一個wackyArmMovement
等於另一個wackyArmMovement

00:14:44.852 --> 00:14:47.554
它的意思是另一種定義單位的方式

00:14:47.621 --> 00:14:51.625
是多少個基本單位組成一個
特定單位

00:14:51.992 --> 00:14:54.261
這裏是一對一
所以係數是1

00:14:55.863 --> 00:14:58.198
假設我們想定義一個機械移動

00:14:58.732 --> 00:15:02.536
我認爲它就相當於大概4個
wackyArmMovements

00:15:03.704 --> 00:15:06.740
CabbagePatch是3個
wackyArmMovements

00:15:06.807 --> 00:15:08.008
是的

00:15:08.075 --> 00:15:12.946
當然沒有jazzHands的
舞蹈動作的量度是不完整的

00:15:13.013 --> 00:15:15.315
它等於2個
wackyArmMovements

00:15:15.582 --> 00:15:17.384
我認爲這是精確的
我們會堅持這樣

00:15:18.552 --> 00:15:22.523
現在讓我們返回並創建jam會話

00:15:22.589 --> 00:15:23.991
我在早前已經概述過的

00:15:24.958 --> 00:15:27.794
移動的距離 也就是已經進行的
步數

00:15:27.861 --> 00:15:30.764
會用我們創造的單位hopz

00:15:31.265 --> 00:15:33.734
jamTime的單位自然是jamz

00:15:34.635 --> 00:15:37.104
舞蹈移動的單位將會是機械

00:15:37.171 --> 00:15:41.074
我們的角色當然會一直跳機械舞

00:15:41.942 --> 00:15:45.345
舞蹈速率實際上會是米每秒

00:15:45.412 --> 00:15:46.313
但是如果你記得

00:15:46.647 --> 00:15:49.383
我們的測量值沒有用米或者秒的

00:15:49.449 --> 00:15:51.285
所以我們要怎麼獲得那個值？

00:15:52.152 --> 00:15:54.588
我們可以把
已移動步數轉換成米

00:15:55.289 --> 00:15:58.158
我們還可以把jamTime轉換成秒

00:15:59.092 --> 00:16:01.195
現在我們可以返回一個測量值

00:16:01.261 --> 00:16:03.063
是按照米每秒的

00:16:03.697 --> 00:16:07.467
酷的事是隻需要幾行代碼

00:16:07.534 --> 00:16:11.271
我們就可以完全定義我們的jam會話

00:16:14.808 --> 00:16:17.744
現在我們知道怎樣表示測量值

00:16:17.811 --> 00:16:19.713
和單位做爲模型對象
這很酷

00:16:20.447 --> 00:16:22.082
但是我告訴過你

00:16:22.282 --> 00:16:24.785
我想要這個遊戲在每個地方可用

00:16:25.319 --> 00:16:28.055
要這麼做我們需要格式化這些
測量值

00:16:28.488 --> 00:16:30.190
事情在這變得棘手一點

00:16:31.124 --> 00:16:32.259
如果我們有我們的角色

00:16:32.326 --> 00:16:35.796
我們不說跳舞了5英尺

00:16:35.863 --> 00:16:38.265
而是說跳了5公里機械舞

00:16:38.832 --> 00:16:39.666
硬核

00:16:40.467 --> 00:16:43.504
如果我們想在全世界顯示這些
那看起來會怎樣？

00:16:44.538 --> 00:16:46.707
在加拿大 我們可以這麼寫

00:16:47.140 --> 00:16:49.910
它以前被寫成5公里

00:16:51.245 --> 00:16:53.413
然而如果我們用中文顯示這些

00:16:53.480 --> 00:16:55.482
我們需要翻譯單位

00:16:56.683 --> 00:17:00.921
在阿拉伯語裏我們需要翻譯單位
並改變數字的顯示

00:17:00.988 --> 00:17:03.757
來確保從右到左的正確順序

00:17:04.223 --> 00:17:07.694
這些都是我需要手動在我的應用
裏進行的邏輯

00:17:08.729 --> 00:17:11.964
最後在美國 我們會說 公里？

00:17:12.031 --> 00:17:14.367
那是什麼？
那是什麼東西？

00:17:14.835 --> 00:17:18.172
所以我不光需要處理轉換

00:17:18.238 --> 00:17:20.040
在我的計算過程中

00:17:20.107 --> 00:17:23.242
我還需要僅僅爲了格式處理轉換

00:17:23.310 --> 00:17:26.313
這是我需要加進應用的額外邏輯

00:17:27.948 --> 00:17:29.283
那這裏的解決方案是什麼？

00:17:29.449 --> 00:17:31.685
你可以讓Foundation
爲你做所有的事

00:17:32.219 --> 00:17:34.821
我們有新的格式器叫做
MeasurementFormatter

00:17:35.122 --> 00:17:39.259
它格式化測量值和單位並且知道
地區

00:17:39.326 --> 00:17:41.261
所以你不需要擔心

00:17:42.062 --> 00:17:43.230
讓我們看一看它

00:17:43.697 --> 00:17:44.932
它是格式器的子類

00:17:44.998 --> 00:17:48.435
如果你對其他格式器熟悉
是一樣的概念

00:17:49.837 --> 00:17:51.338
它有unitOptions屬性

00:17:51.405 --> 00:17:54.174
我們稍後會談到
更多unitOptions

00:17:54.708 --> 00:17:55.609
它還有unitStyle

00:17:55.676 --> 00:17:57.711
如果你熟悉其他格式器

00:17:57.778 --> 00:17:58.846
短 中 長

00:18:00.681 --> 00:18:02.115
它有一個可設置的地區

00:18:02.182 --> 00:18:05.919
現在你可能默認使用

00:18:05.986 --> 00:18:08.488
用戶的當前地區

00:18:08.555 --> 00:18:11.425
這就是這個地區永遠的默認值

00:18:11.825 --> 00:18:15.462
但是如果你需要明確設置它
你可以這麼做

00:18:16.563 --> 00:18:18.365
它還接受一個
定製的numberFormatter

00:18:18.432 --> 00:18:21.435
假設你想要你的測量值中的值

00:18:21.502 --> 00:18:23.937
被用科學計數法顯示

00:18:24.037 --> 00:18:26.907
你可以提供一個定製的
numberFormatter來爲你這麼做

00:18:28.876 --> 00:18:33.046
它還有方法接受一個測量值對象和
一個單位對象

00:18:34.715 --> 00:18:37.117
讓我們多談一下單位選項

00:18:37.885 --> 00:18:41.021
酷的事是它開箱可用 根據默認

00:18:41.088 --> 00:18:45.058
這個格式器使用你的用戶所在
地區偏愛的單位進行格式化

00:18:45.225 --> 00:18:46.593
所以你甚至不用思考這些

00:18:46.994 --> 00:18:48.662
它還考慮其他事比如目的

00:18:48.729 --> 00:18:51.798
如果你在計算一個長度

00:18:51.865 --> 00:18:55.002
關於路程距離而不是身高

00:18:55.068 --> 00:18:58.205
你會想要根據語境用不同的單位

00:19:00.073 --> 00:19:04.211
所以我會看看一些
MeasurementFormatter提供的選項

00:19:05.412 --> 00:19:08.382
一個是providedUnit
假設我們有一個情況

00:19:08.448 --> 00:19:11.685
我們想傳入5公里的測量值

00:19:11.919 --> 00:19:13.954
但是我們的地區是美國

00:19:14.021 --> 00:19:17.591
通常在美國我們會爲路程

00:19:17.658 --> 00:19:20.460
把它轉換成英里
因爲我們通常用英里

00:19:20.894 --> 00:19:22.462
但若你設置providedUnit

00:19:22.529 --> 00:19:26.066
它會保證不論你傳入什麼單位

00:19:26.133 --> 00:19:28.035
都會被格式化成你設置的這個單位

00:19:29.570 --> 00:19:31.405
還有一個動作叫做自然比例尺

00:19:31.471 --> 00:19:36.009
這對UI相關的東西很有用

00:19:36.076 --> 00:19:38.478
如果你的應用是在watch上運行

00:19:38.612 --> 00:19:41.248
你很擔心屏幕尺寸

00:19:41.915 --> 00:19:43.951
那麼不是放1000米

00:19:44.017 --> 00:19:46.553
會需要很多你的屏幕

00:19:46.620 --> 00:19:48.989
你實際上可以把它格式化成1公里

00:19:51.191 --> 00:19:52.893
另一個是不帶單位的溫度

00:19:52.960 --> 00:19:56.296
假設你有個測量值顯示90華氏度

00:19:56.463 --> 00:19:59.032
但是你不想要顯示華氏度單位

00:19:59.266 --> 00:20:01.935
你可以這麼設置
得到你想要的結果

00:20:03.670 --> 00:20:05.205
讓我們用一些例子來玩一玩

00:20:05.272 --> 00:20:06.507
我們有我們的格式器

00:20:07.474 --> 00:20:09.643
我們有我們的原始距離測量值

00:20:09.710 --> 00:20:12.579
那是5公里因爲這是我們的角色
跳舞的距離

00:20:13.347 --> 00:20:15.849
現在我們想從中獲得一個結果字符串

00:20:17.017 --> 00:20:19.653
我們會看到結果的單位是英里

00:20:19.720 --> 00:20:22.489
最酷的事是隻用了三行代碼

00:20:22.656 --> 00:20:24.758
我們不但得到了想要的結果

00:20:24.992 --> 00:20:27.728
而且不需要對格式器做任何事

00:20:27.794 --> 00:20:30.597
開箱即用不需要任何設置

00:20:30.864 --> 00:20:32.232
它知道應該做什麼

00:20:33.500 --> 00:20:36.203
現在假設我們給它我們的
定製單位hopz

00:20:36.637 --> 00:20:40.474
以及測量值 MeasurementFormatter
它沒概念

00:20:40.541 --> 00:20:42.976
它不知道hopz實際上是一個單位

00:20:44.545 --> 00:20:46.847
但是我們創建了hopz距離

00:20:47.381 --> 00:20:49.917
我們把它傳遞給格式器

00:20:50.450 --> 00:20:54.321
它實際上還可以爲我們暗地裏進行
轉換

00:20:54.755 --> 00:20:56.089
我們不需要做任何事

00:20:58.192 --> 00:21:01.061
現在讓我們假設我們有定製單位

00:21:01.128 --> 00:21:04.231
我們要人們看到它
所以設置providedUnit

00:21:05.032 --> 00:21:07.701
我們會給它一個測量值
這會有我們的hopz單位

00:21:08.635 --> 00:21:11.672
現在結果會使用那個單位

00:21:13.707 --> 00:21:16.143
這個情況是個很有趣的情況

00:21:16.210 --> 00:21:19.379
因爲我們不但提供一個定製單位

00:21:19.446 --> 00:21:23.050
我們還提供定製量度中的定製單位

00:21:23.250 --> 00:21:24.184
在這一點

00:21:24.918 --> 00:21:27.754
這就像 不是很確定
MeasurementFormatter會做什麼？

00:21:28.388 --> 00:21:31.391
好吧 它做的正是我們期待的
這很好

00:21:33.927 --> 00:21:37.297
現在我要把講臺交給
Foundation團隊的另一成員

00:21:37.497 --> 00:21:40.400
他會展示如何使用測量值

00:21:40.467 --> 00:21:43.937
並且可以在遊戲的高分功能中
使用和格式化它

00:21:44.404 --> 00:21:45.272
謝謝

00:21:46.707 --> 00:21:47.641
謝謝Daphne

00:21:48.876 --> 00:21:50.677
我是Peter Hosey

00:21:50.844 --> 00:21:53.180
我也是Foundation團隊
的一名工程師

00:21:53.914 --> 00:21:57.184
像Daphne說的
這是我們的高分列表

00:21:57.317 --> 00:21:59.987
我們在這顯示遊戲的關卡列表

00:22:00.787 --> 00:22:04.024
當你點擊一個時你看到基本事實

00:22:04.091 --> 00:22:06.527
關於關卡 名字 它的一個圖片

00:22:07.127 --> 00:22:10.364
你看到一些關於玩這關的重要信息

00:22:10.430 --> 00:22:11.498
你需要知道的事

00:22:12.499 --> 00:22:17.437
並且你還會看到你的統計
關於你在遊戲中的表現怎樣

00:22:18.605 --> 00:22:24.578
你看到一些東西 比如你的高分
做了多少wackyArmMovements

00:22:25.179 --> 00:22:27.881
你能看到你跳了多遠多快

00:22:29.149 --> 00:22:32.019
但這些都只是數字

00:22:32.553 --> 00:22:34.555
他們缺少量度

00:22:35.856 --> 00:22:39.526
所以我們不知道
像是6811是多遠？

00:22:42.996 --> 00:22:47.000
現在你自己可以實現一整個單位系統

00:22:47.301 --> 00:22:49.269
你最開始可以只追蹤一個單位

00:22:49.336 --> 00:22:51.471
直到最後追蹤所有這些數字

00:22:52.139 --> 00:22:57.845
你可以再構造更多
比如一個單位轉換系統

00:22:57.911 --> 00:23:00.447
能理解不同地區

00:23:00.514 --> 00:23:02.649
並自動翻譯單位名

00:23:02.716 --> 00:23:04.651
這有很多工作不是嗎？

00:23:05.185 --> 00:23:07.988
像Daphne說過的
讓Foundation爲你工作

00:23:08.622 --> 00:23:10.691
我們現在有測量值和單位

00:23:10.757 --> 00:23:12.926
以及在Foundation中的
MeasurementFormatter類型

00:23:13.460 --> 00:23:16.096
讓我們在我們的遊戲裏用它們

00:23:18.165 --> 00:23:21.101
我們要創建定製單位

00:23:21.235 --> 00:23:23.470
Daphne向你們展示過
像是這樣

00:23:24.037 --> 00:23:27.341
我們有一些長度單位和速度單位

00:23:28.141 --> 00:23:30.978
我們有4個定製的舞蹈移動

00:23:31.044 --> 00:23:33.080
並不來自Foundation

00:23:35.148 --> 00:23:36.984
我們有我們的定製單位

00:23:37.050 --> 00:23:40.888
我們能把這些帶到我們的模型中
它是這個關卡結構

00:23:41.555 --> 00:23:44.224
有我們關於這個關卡的一些基本
事實

00:23:44.892 --> 00:23:49.229
幷包括角色的統計 這只是些數字

00:23:49.696 --> 00:23:51.798
讓我們把它們轉成測量值

00:23:52.199 --> 00:23:55.169
現在我們有舞蹈移動的測量值
一個長度的測量值

00:23:55.235 --> 00:23:56.503
還有一個速度的測量值

00:23:57.004 --> 00:24:00.607
因爲我們改變了屬性
我們也改變初始化函數

00:24:01.175 --> 00:24:04.044
現在可以用測量值來創造一關了

00:24:04.912 --> 00:24:08.515
我們想在列表視圖控制器裏做這些

00:24:08.749 --> 00:24:10.984
這裏 針對這個視圖的控制器
這是列表

00:24:12.252 --> 00:24:17.691
我們的列表視圖控制器的請求
是一個同步的API 它返回

00:24:18.392 --> 00:24:21.595
一個JSON字典列表
每關一個

00:24:21.662 --> 00:24:23.363
包含所有信息

00:24:24.765 --> 00:24:29.169
特別是包括角色的統計
做爲數字

00:24:29.770 --> 00:24:32.973
我們想要圍繞這些數字創造測量值

00:24:34.007 --> 00:24:36.510
這是wackyArmMovements的數字

00:24:36.777 --> 00:24:38.145
這是Hopz的數字

00:24:38.212 --> 00:24:40.814
這是hopzPerJamz的數字

00:24:43.116 --> 00:24:45.953
現在這些信息在我們的模型中

00:24:46.019 --> 00:24:50.023
我們把它作爲測量值創建在我們的
列表視圖控制器中

00:24:50.858 --> 00:24:53.126
這是我們在列表視圖控制器中要
做的唯一改變

00:24:54.194 --> 00:24:56.363
現在我們可以看看詳情視圖控制器

00:24:56.430 --> 00:24:58.999
它在這裏顯示這個視圖

00:24:59.066 --> 00:25:01.702
並且爲每一關顯示這些

00:25:03.837 --> 00:25:07.374
我們還可以在這用我們的新測量值

00:25:08.275 --> 00:25:11.645
我們已經有了一個格式器

00:25:11.712 --> 00:25:14.815
這是一個NumberFormatter
它所做的是填充

00:25:14.882 --> 00:25:18.185
到6個數字 用0來填充
我們想保持它

00:25:18.252 --> 00:25:19.453
但是我們想在其上開發

00:25:19.520 --> 00:25:21.188
我們想讓它顯示單位

00:25:21.855 --> 00:25:24.525
所以我們要再加兩個格式器

00:25:25.492 --> 00:25:27.261
我等下會解釋爲什麼要這麼做

00:25:28.295 --> 00:25:29.630
現在我們已經創建了它們

00:25:30.097 --> 00:25:33.233
我們來到同樣的地方
我們已經配置了數字格式器

00:25:33.300 --> 00:25:35.135
是在我們的
viewDidLoad方法中

00:25:35.202 --> 00:25:38.372
這是從UIViewController繼承的
我們在這覆蓋它

00:25:39.006 --> 00:25:41.141
我們配置
highScoreNumberFormatter

00:25:41.208 --> 00:25:43.377
用我們的最少整數位數

00:25:43.777 --> 00:25:46.246
現在我們要配置
MeasurementFormatter

00:25:46.580 --> 00:25:49.216
用我們的providedUnit
它是wackyArmMovements

00:25:49.883 --> 00:25:51.451
你在這看不出來 不是嗎？

00:25:52.452 --> 00:25:56.890
用我們的NumberFormatter
我們可以繼續填充到6位數字

00:25:58.192 --> 00:26:00.961
我提到過我們新建了兩個新的
MeasurementFormatters

00:26:01.028 --> 00:26:02.529
讓我們配置另一個

00:26:02.996 --> 00:26:05.165
這一個我們想用
標準的數字格式器

00:26:05.232 --> 00:26:07.234
所以我們不設置這個
NumberFormatter

00:26:07.301 --> 00:26:09.937
但是我們仍然設置它使用
providedUnit

00:26:14.508 --> 00:26:16.276
現在如果我運行它

00:26:17.878 --> 00:26:18.979
歐

00:26:19.546 --> 00:26:22.049
我配置了格式器

00:26:22.516 --> 00:26:25.252
我現在需要使用它們給我的字符串

00:26:27.521 --> 00:26:31.758
我們已經談過了一個格式器
我們說從這個值得到的字符串

00:26:33.093 --> 00:26:35.462
當它是一個數字時工作得很好
但現是一個測量值

00:26:35.529 --> 00:26:37.831
所以我們談談
MeasurementFormatter

00:26:37.898 --> 00:26:39.533
這隻需要修改一個單詞

00:26:40.200 --> 00:26:41.802
其他的都完全一樣

00:26:42.436 --> 00:26:43.971
對任何格式器都同樣工作

00:26:44.838 --> 00:26:47.608
另外兩個我們直接從數字獲得
字符串

00:26:47.674 --> 00:26:51.245
你可以想象這不利於你的本地化

00:26:52.312 --> 00:26:54.047
這裏我們也希望用一個格式器

00:26:54.848 --> 00:26:58.952
所以我們會用我們其他的格式器
這還是一樣的東西

00:26:59.019 --> 00:27:01.889
這個情況下我們從測量值得到
字符串

00:27:02.623 --> 00:27:06.460
這返回一個字符串
我們把它傳遞給標籤

00:27:07.461 --> 00:27:08.829
現在我們可以運行應用

00:27:15.235 --> 00:27:17.371
我們看到我們的定製單位顯示了出來

00:27:18.672 --> 00:27:20.140
這是一個開始

00:27:20.440 --> 00:27:24.211
但是我們還是沒有
真正提供真實世界的語境

00:27:24.278 --> 00:27:25.746
這是我們開始的目標

00:27:26.146 --> 00:27:28.882
我們需要用真實世界的單位顯示
這些

00:27:30.517 --> 00:27:33.220
所以我們可以進行一些我們自己
的轉換邏輯

00:27:33.654 --> 00:27:36.356
但是MeasurementFormatter
可以爲我們做這些

00:27:36.924 --> 00:27:39.826
我們要創建另一個
MeasurementFormatter

00:27:40.294 --> 00:27:42.963
因爲我們有定製單位
MeasurementFormatter

00:27:43.030 --> 00:27:46.200
我們還要有能識別地區的
MeasurementFormatter

00:27:47.534 --> 00:27:49.503
我們創建它 和我們配置它一樣

00:27:49.570 --> 00:27:52.172
除了我們實際上不需要做任何事

00:27:52.739 --> 00:27:55.008
因爲MeasurementFormatter可以
立即使用

00:27:55.375 --> 00:28:01.081
自動轉換成玩家想要的針對他們
地區的單位

00:28:04.218 --> 00:28:07.554
這裏會變得有點棘手
請對我有點耐心

00:28:08.655 --> 00:28:12.726
我們正在調用一個格式器
要求得到一個字符串

00:28:12.793 --> 00:28:14.528
並把它直接傳給標籤

00:28:17.397 --> 00:28:19.333
我們要做的

00:28:20.367 --> 00:28:24.071
是我們將首先調用
customUnitsMeasurementFormatter

00:28:24.137 --> 00:28:26.273
得到距離的字符串

00:28:26.974 --> 00:28:29.943
然後調用
localeAwareMeasurementFormatter

00:28:30.010 --> 00:28:31.979
得到它的距離字符串

00:28:32.813 --> 00:28:35.249
然後用一個Swift字符串填寫

00:28:35.315 --> 00:28:38.952
把這兩個放一起生成一個字符串

00:28:39.019 --> 00:28:41.421
我們把這個字符串傳給標籤

00:28:41.622 --> 00:28:44.591
我們爲距離這麼做了
我們也爲舞蹈速率這麼做

00:28:45.726 --> 00:28:47.227
這就是我們需要做的全部工作

00:28:53.367 --> 00:28:56.670
用來顯示我們的兩個定製單位

00:28:56.737 --> 00:28:59.373
和玩家希望的針對他們的地區的
單位

00:29:00.440 --> 00:29:01.642
真實世界中的距離

00:29:06.747 --> 00:29:08.448
但是我們不需要停在這

00:29:08.582 --> 00:29:13.287
因爲目標是讓這個遊戲到達全世界
的每個國家

00:29:14.021 --> 00:29:16.823
英里在美國很好
我們在美國

00:29:16.890 --> 00:29:17.791
我們看到英里

00:29:18.325 --> 00:29:20.527
但是我們想確保它在每個國家都
工作

00:29:21.161 --> 00:29:24.331
所以我要用到一個Xcode功能

00:29:24.765 --> 00:29:29.770
這是你方案的一部分
我要在這編輯我的方案

00:29:39.346 --> 00:29:41.014
我要複製方案

00:29:42.616 --> 00:29:43.750
當複製方案時

00:29:43.817 --> 00:29:45.319
會問我它的名字

00:29:45.385 --> 00:29:49.923
我會給我的方案一個有特色的名字

00:29:53.961 --> 00:29:56.763
現在給我的方案命名了

00:29:57.331 --> 00:30:00.801
我要做一個簡單的改變
在運行的裏面

00:30:03.003 --> 00:30:06.507
選項標籤 應用地區

00:30:07.441 --> 00:30:13.280
我要把我們的測試移動到外國

00:30:13.347 --> 00:30:14.882
像是加拿大

00:30:18.118 --> 00:30:20.554
現在我要運行這個方案

00:30:21.889 --> 00:30:26.760
不需要改變應用代碼
沒有模擬器的配置改變

00:30:26.827 --> 00:30:28.228
只是改變方案

00:30:28.295 --> 00:30:30.931
我們看到在加拿大
它顯示公里

00:30:32.900 --> 00:30:34.868
這就是我們要讓它工作所需的全部
工作

00:30:34.935 --> 00:30:36.436
有了我們新的測量值和單位

00:30:36.503 --> 00:30:38.672
和在Foundation中
MeasurementFormatter類型

00:30:38.972 --> 00:30:39.840
謝謝

00:30:40.274 --> 00:30:41.275
謝謝 Daphne

00:30:42.643 --> 00:30:43.944
非常感謝 Peter

00:30:44.144 --> 00:30:46.446
顯然這個遊戲會很流行

00:30:46.513 --> 00:30:48.348
我很喜歡它

00:30:50.617 --> 00:30:52.085
讓我們很快總結一下

00:30:52.152 --> 00:30:56.957
我們看了這整個演講和演示

00:30:57.024 --> 00:30:59.092
測量值和單位怎麼是模型對象

00:30:59.159 --> 00:31:01.628
我們可以在應用中使用
這很棒

00:31:01.695 --> 00:31:03.964
我們還看到很容易格式化它們

00:31:04.031 --> 00:31:07.768
只需要我們進行少量工作
這很酷

00:31:09.036 --> 00:31:15.742
最好的部分是我們免費得到所有的
這些強大的本地化

00:31:15.809 --> 00:31:18.946
不需要定義任何對象或選項

00:31:19.012 --> 00:31:20.314
開箱即用

00:31:21.148 --> 00:31:23.784
所以現在你不需要突然變成知道
多國語言

00:31:23.851 --> 00:31:29.056
或者改變你應用的任何邏輯和代碼
來支持這些

00:31:29.122 --> 00:31:30.791
你只需要直接使用它

00:31:32.025 --> 00:31:34.795
如果你想要知道更多信息
你需要訪問這個鏈接

00:31:35.362 --> 00:31:37.764
這些會話已是過去式了

00:31:37.831 --> 00:31:41.401
但是如果你們超感興趣
我建議你們下載視頻

00:31:42.703 --> 00:31:43.804
非常感謝