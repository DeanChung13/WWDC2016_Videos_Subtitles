00:00:19.586 --> 00:00:22.222
利用現代最佳實踐優化現有應用

00:00:25.659 --> 00:00:26.527
大家好

00:00:29.229 --> 00:00:30.097
好啦

00:00:32.031 --> 00:00:34.434
我叫Woody
在Apple做軟件工程

00:00:34.501 --> 00:00:37.804
歡迎大家參加本次大會
歡迎在座的各位

00:00:37.871 --> 00:00:40.574
還有在家在線觀看的各位

00:00:41.875 --> 00:00:45.312
在接下來的40分鐘裏
我想跟大家講幾點內容

00:00:45.579 --> 00:00:48.048
我們來看看通過一些方式 你今後可以

00:00:48.115 --> 00:00:49.750
開始減少你的技術負債

00:00:49.983 --> 00:00:51.985
我們再來看看
資源目錄

00:00:52.686 --> 00:00:54.321
看看新的設計模式

00:00:54.388 --> 00:00:56.156
不完全是新的 但是設計模式

00:00:56.223 --> 00:00:59.126
希望你們使用依賴注入

00:00:59.660 --> 00:01:01.795
講座的後半段會更新一下

00:01:01.862 --> 00:01:05.232
我去年關於Live
Playgrounds的講座

00:01:06.033 --> 00:01:07.034
那麼我們就開始吧

00:01:08.068 --> 00:01:10.137
去年的講座 在一個實驗室中

00:01:10.337 --> 00:01:11.538
我見到其中一個觀衆...

00:01:12.306 --> 00:01:13.907
在描述一個場景

00:01:13.974 --> 00:01:18.378
描述一件我想你們中許多人都熟悉的事

00:01:18.946 --> 00:01:23.150
你的老大給了你一堆功能的要求

00:01:23.217 --> 00:01:27.020
這些功能會產生收入 你想獲得報酬
於是你照做

00:01:27.721 --> 00:01:28.889
然後你有客戶

00:01:28.956 --> 00:01:31.258
他們想要修補讓他們頭疼的錯誤

00:01:31.692 --> 00:01:34.294
你以你的工作爲傲
所以你也想做那個

00:01:35.128 --> 00:01:36.763
有些技術負債要解決

00:01:36.830 --> 00:01:38.799
有時我認爲開發軟件

00:01:38.866 --> 00:01:40.934
就像搭Jenga積木

00:01:41.001 --> 00:01:44.605
第一個版本比較穩定
你開始往它上面疊加東西

00:01:44.671 --> 00:01:47.274
然後它開始變得不穩定
之後就崩潰了

00:01:47.341 --> 00:01:48.775
所以 你得退一步

00:01:48.842 --> 00:01:51.078
可能要先解決一些低層次的問題

00:01:53.013 --> 00:01:54.114
帶着這些問題

00:01:55.949 --> 00:01:57.184
你纔來參加WWDC

00:01:58.185 --> 00:01:59.853
我們疊加在新的API上

00:02:02.890 --> 00:02:06.326
我們給你一個新的Swift版本
它打破源代碼的兼容性

00:02:06.393 --> 00:02:07.928
但引入了一些新的功能

00:02:08.328 --> 00:02:11.265
而且有提醒你
所以不要抱怨它

00:02:12.966 --> 00:02:17.237
然後我們引入了新平臺和新擴展點

00:02:17.304 --> 00:02:19.873
及一些現有的應用
例如Siri和Messages

00:02:20.274 --> 00:02:23.844
如果你想把自己的角色定位爲開發者
作爲一個運行循環

00:02:23.911 --> 00:02:25.812
所有這些事都被擠進去

00:02:26.113 --> 00:02:28.415
你知道會發生什麼
有太多東西了

00:02:28.482 --> 00:02:30.384
那麼你要做什麼？

00:02:30.450 --> 00:02:32.553
有些什麼事是你可以開始

00:02:32.619 --> 00:02:34.521
爲今年秋季做準備？

00:02:34.988 --> 00:02:40.127
首先 如果你支持
iOS 8和9的部署目標

00:02:40.494 --> 00:02:42.563
你會覆蓋95%的設備

00:02:42.763 --> 00:02:46.166
真的沒必要把那些部署目標設置在7

00:02:46.600 --> 00:02:47.634
不要它了

00:02:47.701 --> 00:02:49.603
事實上 大概的想法是

00:02:49.670 --> 00:02:53.240
你採用當前的推送版本 即9.3

00:02:53.740 --> 00:02:57.845
然後將你的部署目標設定在
上一個版本 也許是8.4

00:02:58.345 --> 00:03:00.881
但不要再到8.3或8.2了

00:03:00.948 --> 00:03:03.183
因爲你的客戶不會得益於

00:03:03.250 --> 00:03:06.587
我們對8.4的下行版本所執行的優化

00:03:07.487 --> 00:03:09.790
當我們在今秋公佈iOS X時

00:03:10.958 --> 00:03:12.559
將你的部署目標設置爲9.3

00:03:15.028 --> 00:03:17.531
下一個 問題導航

00:03:19.399 --> 00:03:20.667
解決那些問題

00:03:20.734 --> 00:03:22.135
檢查然後修正它們

00:03:23.003 --> 00:03:25.372
當我們告訴你...有...

00:03:25.939 --> 00:03:28.041
當我們告訴你有不建議使用的API

00:03:28.108 --> 00:03:30.043
不建議使用API
是出於一系列原因

00:03:30.110 --> 00:03:32.546
包括實現更好的錯誤處理

00:03:32.613 --> 00:03:36.750
或作出更好的報告 或允許更多性能

00:03:36.817 --> 00:03:39.486
或只是增加靈活度
在參數返回值中

00:03:39.686 --> 00:03:41.688
而且真的沒有理由不升級

00:03:42.189 --> 00:03:43.023
到

00:03:43.790 --> 00:03:45.759
新的API
因爲我們就告訴你

00:03:45.826 --> 00:03:46.994
我們告訴你用什麼

00:03:47.261 --> 00:03:48.896
那麼 就用它 轉到那些

00:03:50.030 --> 00:03:52.833
接下來 你可能要決定
你要將警報視爲錯誤

00:03:53.233 --> 00:03:55.536
我們已用Objective-C
有一陣子了

00:03:55.936 --> 00:03:58.539
但現在我們在Xcode 8中
對Swift也有了

00:04:00.174 --> 00:04:01.074
沒錯

00:04:02.910 --> 00:04:04.912
我想我是第一個告訴你們這個信息的人

00:04:06.146 --> 00:04:08.048
我非常喜歡這個想法 很棒

00:04:08.115 --> 00:04:11.818
將警報視爲錯誤 這樣它就會
強迫你和你的團隊去解決問題

00:04:12.019 --> 00:04:14.488
太容易會忽略那些黃色的警報

00:04:14.555 --> 00:04:16.790
而且過後再回來處理它們
然後你沒有

00:04:16.857 --> 00:04:18.659
那整個就成技術負債了

00:04:20.427 --> 00:04:21.361
而且

00:04:22.095 --> 00:04:24.031
你覺得這樣有用嗎 如果你...

00:04:24.998 --> 00:04:27.067
搭建也許一個1.0版的新項目

00:04:27.134 --> 00:04:30.304
一個新應用 然後你對你的團隊說
我們要發佈1.0

00:04:30.370 --> 00:04:32.439
但我們沒有繪圖
還沒有

00:04:32.506 --> 00:04:33.907
上面沒有任何圖標

00:04:33.974 --> 00:04:36.610
我們要發佈它 然後將
那些在.1版本里做補充

00:04:37.077 --> 00:04:40.681
那根本行不通 沒人會那樣做
這就是用戶如何與你的應用互動

00:04:41.715 --> 00:04:45.118
嗯 實際上是許多但不是
所有用戶與你的應用互動

00:04:45.485 --> 00:04:48.355
許多人利用輔助功能
與你的應用互動

00:04:48.422 --> 00:04:50.190
該功能已嵌入操作系統

00:04:50.991 --> 00:04:53.760
所以 你爲什麼要發佈你的應用

00:04:54.094 --> 00:04:57.831
爲需要它或使用它的人帶繪圖
但裏面又沒有輔助功能？

00:04:57.898 --> 00:04:58.866
那不公平

00:04:59.466 --> 00:05:02.169
解決關於輔助功能的技術負債

00:05:02.236 --> 00:05:04.838
爲其添加支持輔助功能

00:05:04.905 --> 00:05:08.208
是你的用戶界面的一部分
和繪圖一樣

00:05:12.546 --> 00:05:13.547
它是嵌入Xcode的

00:05:13.780 --> 00:05:17.384
對此你可使用Interface
Builder編程也容易

00:05:19.686 --> 00:05:21.955
我們有許多能識別區域的API

00:05:22.523 --> 00:05:25.225
你應該用那些 你可以少寫些代碼

00:05:25.492 --> 00:05:27.027
儘管那個不算新的

00:05:27.561 --> 00:05:28.829
但這些是

00:05:29.730 --> 00:05:32.866
Dimension和MeasurementFormatter
若你有菜譜或健康類應用

00:05:32.933 --> 00:05:35.536
你一直在metric和
imperial之間轉換

00:05:35.602 --> 00:05:36.670
在你自己的代碼上

00:05:36.737 --> 00:05:39.873
不要那些了 用我們秋季將發佈的代碼

00:05:41.108 --> 00:05:43.844
我們想要你支持Peek Pop
和Quick Actions

00:05:44.745 --> 00:05:45.712
好嗎？

00:05:47.214 --> 00:05:49.349
你知道嗎
如果你現在有iPhone 6S

00:05:51.418 --> 00:05:54.254
你可能已經習慣...
我們來按這個看看它會做什麼

00:05:54.321 --> 00:05:56.657
沒有 我們按那個看看它做什麼

00:05:56.723 --> 00:05:58.892
那個會做點什麼
很難察覺

00:05:58.959 --> 00:06:01.261
那會有多棒
如果我們的每個應用

00:06:01.328 --> 00:06:04.798
已經支持Peek Pop和
Push及3D觸摸？

00:06:05.832 --> 00:06:06.667
接下來

00:06:12.773 --> 00:06:16.109
要運行Swift Migrator
用Xcode 8開發者預覽

00:06:16.877 --> 00:06:19.880
如果沒有遷移你的代碼
提交錯誤報告並告訴我們

00:06:20.347 --> 00:06:22.216
那我們就有機會修正它

00:06:22.282 --> 00:06:24.484
等你在秋季實際運行Migrator

00:06:24.785 --> 00:06:26.320
在Xcode 8最終版本上

00:06:27.087 --> 00:06:28.155
它就很可能可以用

00:06:29.623 --> 00:06:30.624
如果它不能用

00:06:30.691 --> 00:06:32.793
我們用API解決我們自己的技術負債

00:06:32.860 --> 00:06:34.294
公共界面是一樣的

00:06:34.361 --> 00:06:36.730
但執行可能會在不同版本之間有變化

00:06:36.797 --> 00:06:39.199
可能是你使用任何API的方式

00:06:40.434 --> 00:06:43.170
不是我們所預期的

00:06:43.904 --> 00:06:45.005
你就有一個邊緣案例

00:06:45.572 --> 00:06:48.542
那你也將其告訴我們
這就是爲什麼我們做這些預覽版

00:06:50.777 --> 00:06:52.246
我們想要你提交錯誤報告

00:06:52.779 --> 00:06:55.716
報告並不只是走廊的玩笑

00:06:55.782 --> 00:06:57.851
不只是在開發者論壇寫文章

00:06:58.185 --> 00:07:00.354
也不只是發送電郵給Apple

00:07:00.888 --> 00:07:02.523
提交錯誤報告的恰當方式是...

00:07:03.457 --> 00:07:05.659
是這個
BugReport.Apple.com

00:07:05.792 --> 00:07:06.760
填寫空白處

00:07:08.295 --> 00:07:11.198
你填完後會獲得一個號碼
用那個號碼你進入

00:07:11.265 --> 00:07:12.699
併發帖到開發者論壇

00:07:12.766 --> 00:07:15.169
有很多Apple工程師
瀏覽開發者論壇

00:07:15.235 --> 00:07:16.703
我們想聽聽你的意見

00:07:17.337 --> 00:07:19.506
但當你在那些組裏提交或報告一個問題

00:07:19.573 --> 00:07:23.010
你沒附上錯誤報告號碼

00:07:23.076 --> 00:07:26.547
我們很難在內部跟進和追蹤它

00:07:26.613 --> 00:07:27.581
所以 得那樣做

00:07:29.983 --> 00:07:30.918
接下來

00:07:32.419 --> 00:07:33.487
你可能...

00:07:35.622 --> 00:07:37.724
不是非常喜歡向我們提交錯誤報告

00:07:39.560 --> 00:07:40.894
因爲你提交它們了之後...

00:07:41.395 --> 00:07:43.397
然後你等啊等 石沉大海

00:07:43.730 --> 00:07:44.865
你沒得到任何迴應

00:07:45.399 --> 00:07:48.769
用Whitney Houston的歌詞說
孤單的錯誤報告去哪兒？

00:07:49.203 --> 00:07:52.840
它們好像進入一個巨大無比的黑洞
因爲你永遠得不到任何迴應

00:07:53.440 --> 00:07:55.008
或者你覺得也許

00:07:55.576 --> 00:07:57.811
你在一個工程師面前得到迴應
而那個工程師

00:07:57.878 --> 00:07:59.980
有點不理會你所說的

00:08:01.815 --> 00:08:04.318
我只是想和你們保證
不是那樣的

00:08:04.384 --> 00:08:07.221
我加入Apple後的第一件事就是
我搜索了一下

00:08:07.287 --> 00:08:10.457
錯誤追蹤系統
問題追蹤系統

00:08:10.824 --> 00:08:14.328
以尋找我當時作爲一個外部開發者時
提交的所有問題

00:08:14.394 --> 00:08:17.564
當中許多問題都有跟蹤
我只是從未得到來自它們的任何反饋

00:08:17.631 --> 00:08:20.467
我想跟各位說 如果你的確提交了錯誤
我們的確會查看它們

00:08:21.635 --> 00:08:24.671
另一件事是 你可能花很多時間提交錯誤

00:08:25.305 --> 00:08:27.541
很多時間你可能是在做一些樣本代碼

00:08:28.208 --> 00:08:30.677
你在試不同的設備
檢查迴歸

00:08:30.744 --> 00:08:31.979
這樣做很好

00:08:32.078 --> 00:08:34.147
你花了可能半個小時或一個小時

00:08:34.581 --> 00:08:37.183
然後你提交它 然後它回來
說是個複本

00:08:37.851 --> 00:08:40.386
然後你就覺得 剛浪費了
生命的半個、一個小時

00:08:40.453 --> 00:08:41.922
爲了別人做過的事情

00:08:43.724 --> 00:08:45.659
我只想簡單講講複本

00:08:46.560 --> 00:08:49.563
因爲複本首先不是表決系統

00:08:49.630 --> 00:08:51.999
不像是 如果你複製
別人的錯誤 一字不漏

00:08:52.132 --> 00:08:54.434
然後你用同樣的東西提交一個新錯誤

00:08:54.501 --> 00:08:56.603
我們說 對此有一個表決
我們會先修正它

00:08:56.670 --> 00:08:58.038
不太像是那樣子

00:08:58.906 --> 00:09:01.241
我們怎麼處理它們
即使它們是複本

00:09:01.308 --> 00:09:02.910
只是意味這這兩個是相關的

00:09:03.477 --> 00:09:06.046
我們也需要複本
不是爲了表決的目的

00:09:06.346 --> 00:09:10.817
但因爲我們可以有五個人提交
相同的根錯誤 相同的根問題

00:09:11.718 --> 00:09:12.786
前四個

00:09:14.555 --> 00:09:16.523
沒有給我們足夠的信息去找到它

00:09:16.957 --> 00:09:19.426
但也許是你的報告
也許是你的第五個

00:09:20.093 --> 00:09:21.295
儘管是個複本

00:09:22.029 --> 00:09:24.932
但是當中的信息是我們所需的
讓我們找到問題

00:09:26.333 --> 00:09:27.167
事實上

00:09:27.968 --> 00:09:31.104
一個在Apple待了幾十年的工程師

00:09:31.638 --> 00:09:32.840
說了一句很風趣的話

00:09:35.509 --> 00:09:36.710
在幾個星期前

00:09:36.777 --> 00:09:40.647
Paul說每個錯誤報告
跟一片雪花一樣獨特

00:09:40.714 --> 00:09:41.548
應該是這樣的

00:09:42.349 --> 00:09:44.685
好 那麼小結一下
今天先講的部分是

00:09:44.885 --> 00:09:47.054
修正你的警報
替代不建議使用的API

00:09:47.287 --> 00:09:49.022
本地化你的應用 如果還沒的話

00:09:49.923 --> 00:09:51.291
使用輔助功能

00:09:52.192 --> 00:09:54.828
或支持輔助功能獲取Peek和Pop

00:09:54.928 --> 00:09:56.997
然後看看下一個版本的Xcode

00:09:57.231 --> 00:09:58.966
給我們一些關於它的反饋

00:09:59.666 --> 00:10:01.568
接着講資源目錄

00:10:04.004 --> 00:10:07.841
是時候爲各位講講
資源目錄

00:10:07.908 --> 00:10:10.577
如果你還沒有文件
在你的文件導航裏 像這樣

00:10:12.579 --> 00:10:14.915
去獲取它們放在資源目錄裏
像那樣

00:10:15.849 --> 00:10:16.683
方法...

00:10:17.985 --> 00:10:20.521
是你從文件菜單中
添加一個目錄

00:10:22.289 --> 00:10:23.991
你無須只添加一個目錄

00:10:24.057 --> 00:10:26.393
你可在項目中添加許多目錄

00:10:26.527 --> 00:10:30.030
也許你正在做一個應用是個卡片遊戲

00:10:31.798 --> 00:10:34.535
那麼 你有個目錄
用於卡片的正面圖像

00:10:34.601 --> 00:10:37.571
第二個目錄用於卡片的
背面圖像 我們可以做到

00:10:38.238 --> 00:10:40.607
舉個例子 你可能讓你的圖形設計師

00:10:40.674 --> 00:10:42.609
從App Store
免費下載Xcode

00:10:44.178 --> 00:10:45.812
爲你創建資源目錄

00:10:46.547 --> 00:10:49.550
然後發送給你
或在代碼庫裏檢查

00:10:49.917 --> 00:10:50.817
我們也能做到

00:10:51.652 --> 00:10:55.289
複製文件到資源目錄時
它們正是複本

00:10:55.422 --> 00:10:57.624
我們從不參考原始位置

00:10:57.691 --> 00:10:59.660
那麼 它們的確參與版本控制

00:11:03.096 --> 00:11:05.432
爲了遷移你的項目
你點擊big plus鍵

00:11:05.732 --> 00:11:07.334
選擇“從項目導入”

00:11:09.369 --> 00:11:11.505
我們會給你一列合資格的資源

00:11:11.572 --> 00:11:15.442
從文件導航遷移
到資源目錄

00:11:18.512 --> 00:11:20.747
像這樣
你遷移了你的圖像資源

00:11:21.915 --> 00:11:23.050
如果你之前...

00:11:23.817 --> 00:11:27.187
習慣使用bundle API
pathForResource等等

00:11:27.254 --> 00:11:29.656
那已經不能再用了
因爲一旦我們編寫了應用

00:11:29.723 --> 00:11:32.726
圖像不是周圍自由浮動的
所以你找不到任何東西

00:11:32.793 --> 00:11:33.794
但如果你使用...

00:11:36.029 --> 00:11:37.030
已被命名的圖像

00:11:37.598 --> 00:11:39.633
我們可找到它們
若其在資源目錄裏

00:11:39.700 --> 00:11:42.669
而且我們可以找到它們
如果它們只是自由浮動

00:11:42.736 --> 00:11:44.071
仍在你的文件導航裏

00:11:44.238 --> 00:11:48.208
這個API出來已有一陣了
API圖像名有許多優點

00:11:48.275 --> 00:11:51.411
超越僅僅只能從
圖像目錄中找到內容

00:11:52.079 --> 00:11:53.280
資源目錄

00:11:53.380 --> 00:11:55.115
例如 它內部緩衝

00:11:55.182 --> 00:11:57.217
第一次你以名稱找一個圖像

00:11:57.284 --> 00:11:58.752
我們加載它
我們給一個參考

00:11:58.819 --> 00:12:00.721
第二次你以名稱找同樣那個圖像

00:12:00.787 --> 00:12:02.723
我們對同一個東西返回另一個參考

00:12:03.290 --> 00:12:06.059
那不是文件內容的API如何運作的

00:12:06.126 --> 00:12:08.128
每一次文件內容會加載新圖像

00:12:08.562 --> 00:12:09.630
它更加高性能

00:12:09.696 --> 00:12:12.833
尤其當你滾動表格
使用已被命名圖像時

00:12:14.735 --> 00:12:16.970
我們支持一個資源的多個表現

00:12:17.037 --> 00:12:18.472
所以 使用已被命名圖像

00:12:19.072 --> 00:12:20.073
你給它一個名稱

00:12:20.507 --> 00:12:21.341
API名稱

00:12:22.109 --> 00:12:25.145
你讓框架考慮你正在運行的設備

00:12:26.380 --> 00:12:28.882
考慮顯示屏的分辨率 視網膜

00:12:28.949 --> 00:12:30.784
非視網膜 Plus設備上的視網膜

00:12:33.954 --> 00:12:35.956
而且可能有其他區別因素

00:12:36.056 --> 00:12:39.092
對於媒體資源例如
設備中的內存容量

00:12:39.493 --> 00:12:42.529
或者設備所支持的Metal的版本

00:12:44.998 --> 00:12:46.099
你得到一個圖像返回

00:12:47.267 --> 00:12:50.771
有兩大類資源類型
對於你可以考慮的圖像

00:12:50.838 --> 00:12:52.139
我們有縮放圖像

00:12:52.206 --> 00:12:53.440
例如PNG

00:12:54.708 --> 00:12:55.642
JPEG

00:12:56.143 --> 00:12:59.112
然後我們有單矢量圖像

00:12:59.179 --> 00:13:01.682
比如PDF或SPG

00:13:03.717 --> 00:13:05.452
我們對待它們有點不同

00:13:05.986 --> 00:13:07.421
在逐個資源的基礎上

00:13:07.487 --> 00:13:09.690
你可以說這個資源會變成矢量型

00:13:09.756 --> 00:13:11.291
那個資源會變成縮放

00:13:12.392 --> 00:13:14.294
你通過指定比例因子來實現

00:13:16.363 --> 00:13:18.532
我講講一些縮放圖像

00:13:18.599 --> 00:13:20.567
然後再講講矢量圖像

00:13:21.301 --> 00:13:22.302
對於縮放圖像

00:13:23.003 --> 00:13:27.207
在這個例子中我們已經叫你們
提供三個不同版本的繪圖

00:13:27.274 --> 00:13:30.244
從1X設備非視網膜
到2X和3X

00:13:31.078 --> 00:13:33.447
如果我們找不到
由於你沒有包括

00:13:34.381 --> 00:13:37.317
2X和3X 我們拿1X的圖像
將它放大

00:13:37.384 --> 00:13:38.519
它就變成

00:13:39.186 --> 00:13:42.890
在更高端設備上或
更高密度設備上使用的圖像

00:13:46.360 --> 00:13:47.261
同樣

00:13:47.761 --> 00:13:51.298
如果你只是提供給我們3X的繪圖
我們在運行時間將它縮放

00:13:52.232 --> 00:13:54.501
這兩個情況不是那麼理想

00:13:54.568 --> 00:13:58.839
這個情況中 若我拿1X圖像將它放大
用於iPhone 6S Plus

00:13:58.906 --> 00:14:00.207
它看上去非常凹凸不平

00:14:00.274 --> 00:14:02.342
它會有一種視覺上的效果
叫圖形失真

00:14:02.409 --> 00:14:03.644
它不是很理想

00:14:04.378 --> 00:14:06.013
嗯 你的客戶不會喜歡它

00:14:07.447 --> 00:14:09.449
這個 初看時你能會想 哦

00:14:09.516 --> 00:14:12.052
我只是提供3X繪圖讓你縮放

00:14:12.686 --> 00:14:14.655
但那樣有個巨大的問題 因爲

00:14:14.755 --> 00:14:17.591
要縮放一個3X圖像
我們要打開一個3X圖像

00:14:18.125 --> 00:14:19.092
它非常大

00:14:19.693 --> 00:14:20.527
然後...

00:14:21.295 --> 00:14:24.865
我們提取像素 爲它創建一個縮放版本

00:14:26.733 --> 00:14:29.403
它可能是一、兩個數量級更大

00:14:30.404 --> 00:14:31.438
所以 想想這個

00:14:32.406 --> 00:14:35.475
你在使用一個設備 比如5S、5C

00:14:36.210 --> 00:14:40.013
上面沒必要用3X圖像
但你只提供3X圖像

00:14:40.814 --> 00:14:43.050
那麼 我們從使用的內存的基準線開始

00:14:43.851 --> 00:14:46.954
沒問題
但是然後我們得加載3X圖像

00:14:47.221 --> 00:14:50.958
轉換它 去掉3X圖像
然後留下這個縮放的版本

00:14:51.225 --> 00:14:54.494
這樣臨時造成一個內存峯值
如果你行的話

00:14:54.561 --> 00:14:56.363
可能會沒問題

00:14:56.430 --> 00:14:59.633
如果你行 我的意思是如果你幸運的話
可能會沒問題

00:15:01.235 --> 00:15:03.403
但 假設你滾動表格視圖

00:15:03.604 --> 00:15:05.706
你在滾動時
我們得不斷做這個

00:15:05.772 --> 00:15:08.442
突然你應用的內存使用一下子膨脹了

00:15:08.809 --> 00:15:10.878
知道當你使用過多內存
會發生什麼事嗎？

00:15:11.044 --> 00:15:12.579
有誰知道的 大聲說出來

00:15:13.380 --> 00:15:15.282
對 沒錯
我們終止它

00:15:15.349 --> 00:15:17.117
它死機了

00:15:17.184 --> 00:15:19.853
由於你沒有提供繪圖
所以 請提供繪圖

00:15:19.920 --> 00:15:23.090
事實上 你可以非常輕鬆地
用進程來實現這個 或者

00:15:23.156 --> 00:15:25.192
不是用進程 而是
Automator工作流程

00:15:25.726 --> 00:15:28.495
你給它一個3X圖像
讓它縮放 給它個名稱

00:15:28.562 --> 00:15:30.097
縮放它 給它個名稱 很好

00:15:30.163 --> 00:15:31.865
把那些扔進
你的資源目錄

00:15:31.932 --> 00:15:33.700
而如果你想要 你可以

00:15:35.302 --> 00:15:38.105
這是另外一個最佳實踐
使用這個命名慣例

00:15:38.505 --> 00:15:41.708
非視網膜的只是
Align Justify.PNG

00:15:42.209 --> 00:15:44.478
然後添加2X、添加3X和其他兩個

00:15:44.845 --> 00:15:48.048
然後當你拖放它們三個
到資源目錄

00:15:48.115 --> 00:15:49.383
我們找到一個命名慣例

00:15:49.449 --> 00:15:52.186
我們創建一個資源
用三種不同的呈現

00:15:52.252 --> 00:15:54.154
相對於三個不同的資源

00:15:54.955 --> 00:15:56.290
對於矢量資源

00:15:56.356 --> 00:15:58.559
矢量資源很神奇
因爲文件包括

00:15:58.625 --> 00:16:00.761
一套如何繪圖的指示

00:16:01.628 --> 00:16:03.463
相對於讓它預先柵格化

00:16:04.198 --> 00:16:08.001
它是同一個圖像 不是三個版本
同一個圖像縮放到不同的大小

00:16:09.503 --> 00:16:11.305
當你指明你要使用

00:16:11.371 --> 00:16:14.208
單矢量縮放
提供一個矢量圖像

00:16:14.274 --> 00:16:17.544
在構建時間 我們將它柵格化成
我們需要的不同大小

00:16:18.612 --> 00:16:19.913
對你來說更簡單

00:16:20.214 --> 00:16:22.883
這像是你可能會對工具欄圖像會做的事

00:16:22.950 --> 00:16:24.284
以及導航欄圖像

00:16:25.919 --> 00:16:27.788
看 縮放因子 單矢量

00:16:28.455 --> 00:16:30.591
也可能二者結合

00:16:31.758 --> 00:16:35.963
你可以設置縮放因子爲矢量和比例

00:16:36.496 --> 00:16:38.298
你提供給我們一個矢量圖像

00:16:38.365 --> 00:16:40.534
好像方框裏那個叫做All

00:16:41.668 --> 00:16:45.405
然後 如果你想覆蓋任何其他比例因子

00:16:45.472 --> 00:16:48.008
你只要提供那些作爲其他矢量圖像

00:16:48.075 --> 00:16:50.777
或PNG、JPEG縮放圖像

00:16:52.212 --> 00:16:54.948
然後當我們創建它
如果你丟失某些資源

00:16:55.015 --> 00:16:57.417
我們會根據矢量圖像將那些柵格化

00:16:57.484 --> 00:16:59.987
在那個All方框或目標

00:17:00.988 --> 00:17:03.490
否則 我們會使用所提供的縮放圖像

00:17:05.592 --> 00:17:08.295
Xcode 8中新的功能是
你可以調整壓縮

00:17:11.164 --> 00:17:12.065
快出來

00:17:12.132 --> 00:17:14.935
你可以調整壓縮
那麼 比如對於一個JPEG圖像

00:17:15.002 --> 00:17:17.738
你想用有損數據壓縮
但也許對於一個PNG

00:17:17.804 --> 00:17:20.073
我們不想要任何壓縮
因爲它將是

00:17:20.140 --> 00:17:21.141
工具欄上的一個項目

00:17:21.208 --> 00:17:23.176
我們不想看到它有任何僞影

00:17:23.944 --> 00:17:26.280
你可解決的一個問題
通過用資源目錄

00:17:26.346 --> 00:17:28.382
以防如果柵距還不夠強

00:17:28.448 --> 00:17:32.419
是修正該問題或爲我們解決一些問題

00:17:32.486 --> 00:17:35.155
我們指的是圓角

00:17:36.823 --> 00:17:39.493
圓角的問題是我們有自適應的UI

00:17:39.860 --> 00:17:40.694
那麼

00:17:41.662 --> 00:17:44.598
你的按鈕可能包含文字標籤
契合得非常好

00:17:45.399 --> 00:17:47.701
直到應用在另一種語言中運行

00:17:47.768 --> 00:17:49.036
然後它改變了大小

00:17:49.536 --> 00:17:52.005
當我們改變按鈕大小時
我們會想保留

00:17:52.072 --> 00:17:53.707
它漂亮的圓角

00:17:55.676 --> 00:17:58.278
你獲得圓角按鈕的方式首先是

00:17:58.345 --> 00:18:02.115
Interface Builder
裏面 選擇一按鈕並指定一背景圖像

00:18:02.916 --> 00:18:04.718
然後我們將其應用爲背景

00:18:07.287 --> 00:18:10.991
在這個例子中
我有一個資源叫做圓角矩形

00:18:12.459 --> 00:18:14.661
我將它應用爲我的背景矩形

00:18:14.728 --> 00:18:17.731
但你可要看到在兩個不同大小的按鈕中
當它拉伸之後

00:18:17.931 --> 00:18:19.333
看上去非常糟糕

00:18:22.603 --> 00:18:24.171
那麼 你可修正的一種方式是

00:18:24.238 --> 00:18:27.407
你一直都在用的方法
就是使用可拉伸圖像

00:18:28.141 --> 00:18:31.111
你說 我想在兩邊都保留X數量的像素

00:18:32.079 --> 00:18:34.915
行 但是今天講座的一個主題是

00:18:34.982 --> 00:18:37.518
你寫更少的代碼而更多地依靠框架

00:18:37.584 --> 00:18:38.919
以及我們提供的工具

00:18:39.553 --> 00:18:42.389
所以 這個是被嵌入
資源編輯器

00:18:42.656 --> 00:18:43.991
叫做資源切片器

00:18:44.458 --> 00:18:46.460
你可以使用它去指定

00:18:47.094 --> 00:18:49.363
紅色的部分 不要拉伸這些

00:18:49.997 --> 00:18:50.964
不要使它們變形

00:18:52.332 --> 00:18:54.935
照亮的部分 重複這些像素

00:18:56.003 --> 00:18:57.204
通過那樣做 你得到

00:18:57.271 --> 00:19:00.073
完美的圓角
而且你不必爲它寫任何代碼

00:19:00.641 --> 00:19:02.676
這是你的圖形設計師可以做到的事

00:19:02.743 --> 00:19:04.545
作爲資源目錄
的一部分

00:19:05.112 --> 00:19:06.313
好的 接下來

00:19:06.580 --> 00:19:09.616
講講設計模式 叫做
依賴注入

00:19:10.484 --> 00:19:12.886
首先講講我們想要修正

00:19:12.953 --> 00:19:14.788
或嘗試改變的 透過引入這個

00:19:16.356 --> 00:19:18.625
我們有UITextField
它用代理

00:19:18.692 --> 00:19:20.994
代理叫做
UITextFieldDelegate

00:19:21.128 --> 00:19:23.964
好 當中它包含關於文本框的方法

00:19:24.031 --> 00:19:25.799
比如
textFieldShouldBeginEditing

00:19:26.133 --> 00:19:26.967
OK？

00:19:27.501 --> 00:19:29.903
我們有WCSession

00:19:30.504 --> 00:19:31.538
WCSession代理

00:19:31.605 --> 00:19:34.374
代理中有什麼？
關於WCSession的方法

00:19:34.675 --> 00:19:35.943
你可以看到這當中的模式

00:19:36.076 --> 00:19:38.679
我們用這個來打破

00:19:40.581 --> 00:19:42.916
我們有應用代理 當然它有方法

00:19:42.983 --> 00:19:44.718
關於應用程序對象

00:19:45.252 --> 00:19:47.054
但我們在當中也插入其他東西

00:19:47.487 --> 00:19:51.258
比如數據庫 實際上最後什麼都有

00:19:51.325 --> 00:19:53.227
包括廚房水槽 堆疊起來

00:19:53.360 --> 00:19:55.262
我們這樣做因爲很容易

00:19:55.329 --> 00:19:57.564
通過應用程序對象返回

00:19:57.631 --> 00:19:59.833
獲得共享對象
計算它然後檢索它

00:19:59.900 --> 00:20:02.002
但它是太過強的耦合

00:20:02.069 --> 00:20:04.605
在你的視圖控制器和應用代理之間

00:20:04.671 --> 00:20:07.941
而你的應用代理
不是真的需要在那個位置

00:20:08.242 --> 00:20:09.209
反而...

00:20:10.477 --> 00:20:14.348
像這樣的一個模式 當中每個
視圖控制器指向某些共同的對象

00:20:14.414 --> 00:20:16.517
也許是你儲存在你的應用代理中

00:20:17.050 --> 00:20:17.985
你可以轉換它

00:20:19.086 --> 00:20:21.855
利用依賴注入
你將模型對象

00:20:22.122 --> 00:20:24.191
那個視圖控制器所有的
然後你將它向前傳遞

00:20:24.258 --> 00:20:27.427
給下一個視圖控制器
當視圖控制器呈現時

00:20:27.494 --> 00:20:31.899
目的是你給視圖控制所需的一切去運作

00:20:33.967 --> 00:20:36.470
那麼 對於Mail
你有一系列郵箱

00:20:36.904 --> 00:20:38.705
顯示一系列郵箱的一個視圖控制器

00:20:38.772 --> 00:20:41.642
會有一個模型對象
代表一系列郵箱

00:20:41.708 --> 00:20:43.577
你點擊當中的一個郵箱

00:20:45.479 --> 00:20:48.348
另一個視圖控制器會顯示
那個郵箱中的信息

00:20:48.582 --> 00:20:49.516
中間那個

00:20:49.583 --> 00:20:51.251
然後你向前傳遞那個郵箱

00:20:51.318 --> 00:20:53.520
它顯示那些
然後你繼續向前傳遞

00:20:54.888 --> 00:20:57.624
你那樣做的方式 以一個Segue

00:20:57.691 --> 00:21:00.127
是覆蓋prepareForSegue
然後將它傳送至repair

00:21:01.361 --> 00:21:03.997
你那樣做的方式
如果你是在做編程展示

00:21:04.064 --> 00:21:06.500
是對實例化中所見按鈕的行爲中

00:21:06.567 --> 00:21:08.969
視圖控制器將模型對象傳遞到那

00:21:10.737 --> 00:21:11.805
該技術好處是...

00:21:12.806 --> 00:21:15.609
你的視圖控制器現在是獨立的

00:21:15.676 --> 00:21:17.845
他們沒有這些強烈的聯繫和依賴

00:21:17.911 --> 00:21:19.213
你可以不斷重複使用它們

00:21:23.283 --> 00:21:25.085
返回的話 你有一些選擇

00:21:25.152 --> 00:21:27.955
你可以做我們所做的
通常是寫一個協議

00:21:28.021 --> 00:21:29.323
執行它

00:21:29.389 --> 00:21:31.425
於是有通知返回
說視圖控制器被撤消

00:21:31.491 --> 00:21:34.228
然後也許更新你的模型
你可以傳遞一個閉包

00:21:34.728 --> 00:21:36.964
你可以按參考傳遞對象模型

00:21:37.030 --> 00:21:38.432
或者 你可以

00:21:38.932 --> 00:21:40.400
如果你使用在線segue

00:21:40.467 --> 00:21:42.603
與覆蓋prepare
ForSegue是一樣的

00:21:42.669 --> 00:21:45.772
以兩種方式發生
前進和後退

00:21:46.807 --> 00:21:48.475
我們喜歡這個的另一個原因是...

00:21:49.309 --> 00:21:52.179
因爲視圖控制器很像樂高積木

00:21:52.813 --> 00:21:55.916
它們可以單獨地重新排列

00:21:55.983 --> 00:21:57.518
以創造新的結構

00:21:57.718 --> 00:22:01.288
在此情況下
iPhone SE的整體用戶體驗

00:22:01.355 --> 00:22:02.990
對於你的應用將是不同的

00:22:03.056 --> 00:22:07.060
不同於iPad 12英寸
iPadPro 12英寸

00:22:08.061 --> 00:22:10.864
如果你的視圖控制器是獨立的
要做到那樣很容易

00:22:12.099 --> 00:22:12.966
好的

00:22:13.033 --> 00:22:16.203
那麼 去年在 WWDC

00:22:16.270 --> 00:22:18.238
我做了一個演講 是關於...

00:22:19.540 --> 00:22:22.576
Playgrounds、現代化UI

00:22:23.443 --> 00:22:26.346
及Objective-C
和Swift互操作性

00:22:27.981 --> 00:22:31.285
自從那以後 我們添加東西
到Playgrounds

00:22:31.552 --> 00:22:34.888
是我們去年還做不到的東西
我想向大家展示其中一些

00:22:35.289 --> 00:22:36.223
用那

00:22:36.924 --> 00:22:38.325
我們來做個演示

00:22:39.860 --> 00:22:43.297
那麼 這是那個元素週期表應用
我去年向你們展示過

00:22:43.363 --> 00:22:45.065
從那之後 它被更新了一點

00:22:45.132 --> 00:22:46.200
例如

00:22:48.035 --> 00:22:49.369
顏色有點變化

00:22:49.436 --> 00:22:51.638
不是按物質的狀態
氣態 液態

00:22:51.705 --> 00:22:55.309
現在它是按物體的種類
像過渡金屬 金屬 鹵素

00:22:55.375 --> 00:22:56.243
那類的東西

00:22:57.377 --> 00:23:00.113
我們還添加了支持以將它展開
於是它實際看上去

00:23:00.581 --> 00:23:03.650
就像個元素週期表
那樣是個集合視圖

00:23:06.286 --> 00:23:07.754
我要給大家展示部分代碼

00:23:13.594 --> 00:23:16.063
這個代碼庫改動的其中一項
自從上次你看到它之後

00:23:16.129 --> 00:23:19.733
是數據模型已移至Swift

00:23:20.734 --> 00:23:24.505
現在我有一類
代表原子元素

00:23:24.805 --> 00:23:26.440
像是氮或氧

00:23:27.074 --> 00:23:29.943
還有一類代表一個集合

00:23:30.010 --> 00:23:32.980
所謂的 不好意思 週期元素

00:23:34.314 --> 00:23:37.417
這個類將元素實例化

00:23:37.484 --> 00:23:38.952
單獨的原子元素

00:23:39.319 --> 00:23:40.888
通過在屬性表中讀取

00:23:41.488 --> 00:23:43.891
我將其也儲存在我的應用這裏

00:23:46.527 --> 00:23:48.529
但既然我已將數據模型移到Swift

00:23:48.595 --> 00:23:50.898
我可向大家展示
Playground中的數據模型

00:23:52.132 --> 00:23:54.701
去年我做這個時 先打開一個
新的Playground

00:23:55.502 --> 00:23:56.937
新建文檔 playground

00:23:59.673 --> 00:24:04.678
去年我做這個時 我只是在代碼和
Playground之間複製粘貼

00:24:06.280 --> 00:24:07.447
當你不斷這樣做時

00:24:07.514 --> 00:24:09.950
你的Playground變得很大
有很多代碼

00:24:10.017 --> 00:24:13.086
於是 現在Playground
有子文件夾

00:24:14.021 --> 00:24:15.822
用於源代碼和資源

00:24:17.824 --> 00:24:19.693
我可以將我的模型對象

00:24:20.494 --> 00:24:22.129
放進源文件夾

00:24:23.964 --> 00:24:26.133
然後我們在幕後編寫它們

00:24:26.667 --> 00:24:29.236
然後隱式導入其所有公用符號

00:24:29.303 --> 00:24:31.572
到Playground中
使其供你們使用

00:24:33.774 --> 00:24:34.675
這意味着...

00:24:35.542 --> 00:24:37.678
如果我將這個資源文件 我的屬性列表

00:24:37.744 --> 00:24:39.680
將其放入資源文件夾

00:24:39.746 --> 00:24:41.748
使其對Playground可用

00:24:43.717 --> 00:24:45.586
我可以到Playground這裏

00:24:49.223 --> 00:24:51.725
實例化一個原子元素的例子

00:24:53.060 --> 00:24:54.027
這是鐦

00:24:56.864 --> 00:24:57.698
像那樣

00:24:58.398 --> 00:25:01.668
所以 能夠將這些源文件

00:25:02.002 --> 00:25:04.872
自動導入你的項目中

00:25:05.572 --> 00:25:08.675
從源文件夾或資源文件夾中

00:25:08.742 --> 00:25:10.043
我認爲是個強大的方法

00:25:10.110 --> 00:25:13.113
使你的Playground本身
保持小而精

00:25:13.180 --> 00:25:15.249
同時當中又能含有更多內容

00:25:16.783 --> 00:25:19.820
那麼 除此之外
自從去年以來還發生了其他事...

00:25:22.389 --> 00:25:24.024
影響了這個應用

00:25:24.825 --> 00:25:28.128
國際純粹與應用化學聯合會

00:25:29.530 --> 00:25:32.766
確認發現了4種新的元素

00:25:33.734 --> 00:25:37.070
於是一下子 我在應用中嵌入的
這個屬性列表文件

00:25:37.137 --> 00:25:39.139
看似不再是個好主意了

00:25:41.208 --> 00:25:43.844
我想我們可以修正它
我們就把它放上線

00:25:44.845 --> 00:25:46.547
於是我建立一個小小的網頁服務器

00:25:47.347 --> 00:25:49.816
這次放一個JSON文件
包含所有元素

00:25:51.118 --> 00:25:53.754
然後想法是 當我的應用開啓時

00:25:54.221 --> 00:25:56.757
起初它會使用嵌入的數據文件

00:25:57.224 --> 00:25:58.792
那樣如果沒有網絡連接的話

00:25:58.859 --> 00:26:01.028
仍然會有東西讓客戶看

00:26:01.094 --> 00:26:03.397
這也是我們推薦你用的模式

00:26:04.932 --> 00:26:06.400
然後我們做個背景檢查

00:26:06.600 --> 00:26:09.102
在其中我們會檢查是不是有文件的更新

00:26:09.169 --> 00:26:10.871
如果有 我們將它放進緩衝文件夾

00:26:10.938 --> 00:26:13.173
然後我們在應用裏指向它

00:26:14.741 --> 00:26:16.743
我要在Playground裏
作出網絡請求

00:26:18.312 --> 00:26:21.148
爲此 我們有一個類
之前稱爲NSURL Session

00:26:21.215 --> 00:26:23.116
現在稱作URL Session

00:26:23.984 --> 00:26:26.420
顯示在這裏

00:26:28.589 --> 00:26:29.890
我們抓住這個Session...

00:26:30.290 --> 00:26:35.162
我喜歡這個Session的原因是
當我在第24行喚起它時

00:26:36.263 --> 00:26:37.831
我給它一個完成處理程序

00:26:38.599 --> 00:26:40.968
因爲這個在背景中異步運行

00:26:41.368 --> 00:26:43.804
去到網絡請求讓我的代碼繼續運行

00:26:44.771 --> 00:26:47.508
當請求要麼超時

00:26:47.574 --> 00:26:50.210
要麼數據進入時
做這個回調

00:26:50.644 --> 00:26:52.679
在第28行的回調中

00:26:53.580 --> 00:26:56.016
你可以看到我打印出一個元素在這裏

00:26:59.353 --> 00:27:01.388
但你實際上看不到它在那兒

00:27:02.289 --> 00:27:03.323
那是個問題

00:27:09.096 --> 00:27:10.831
所以 想想這裏在幹什麼

00:27:10.898 --> 00:27:14.301
我們有一運行中Playground
我們讓它實施背景操作

00:27:14.735 --> 00:27:16.737
在未來一個不確定的時間

00:27:17.237 --> 00:27:19.606
我們得到回調
說這是我們想做的

00:27:19.873 --> 00:27:22.109
但Playground
通常像腳本一樣運行

00:27:22.176 --> 00:27:24.945
從第一行一直到末尾 然後結束

00:27:26.046 --> 00:27:28.415
關鍵詞是“通常”
但不一定是這樣

00:27:28.815 --> 00:27:30.117
我們可發起一個運行循環

00:27:30.184 --> 00:27:32.619
在Playground中
執行異步操作

00:27:33.187 --> 00:27:36.223
爲此 我們導入一個新模塊叫做
PlaygroundSupport

00:27:39.860 --> 00:27:42.729
然後你讓Playground
做無限運行

00:27:44.131 --> 00:27:46.366
然後它永不停止
一直在處理

00:27:47.367 --> 00:27:49.670
那麼 現在如果我往下滾動到這個部分

00:27:51.238 --> 00:27:52.840
你會看到我得到回調

00:27:53.140 --> 00:27:54.141
那是鎘

00:27:57.311 --> 00:27:58.178
好了

00:27:59.213 --> 00:28:02.749
接下來我要擴展去年的內容

00:28:02.816 --> 00:28:07.788
去年我展示了一個繪圖
一個圓角的“核心圖像”的圖像

00:28:08.889 --> 00:28:10.624
這次我不想繪製一個圖像預覽它

00:28:10.691 --> 00:28:13.327
在Playground中
做一個全表格視圖控制器

00:28:16.530 --> 00:28:19.499
Playground中有些新功能
可以讓我們做到

00:28:20.133 --> 00:28:21.435
我們就打開一些空白

00:28:22.503 --> 00:28:23.337
在我的應用中

00:28:26.907 --> 00:28:27.941
叫做View

00:28:30.143 --> 00:28:33.480
我要做一個UI表格視圖控制器的子類

00:28:36.583 --> 00:28:37.684
這就是

00:28:39.987 --> 00:28:40.954
選中的區域

00:28:41.021 --> 00:28:42.990
我執行那兩個方法
是每個表格視圖

00:28:43.056 --> 00:28:45.158
和表格視圖控制器都需要有的

00:28:45.225 --> 00:28:47.194
對象數量 或者 抱歉 而是...

00:28:48.295 --> 00:28:52.032
項目數量 自寫的索引路徑
和返回本身

00:28:53.800 --> 00:28:55.302
我想看到它變實時

00:28:56.303 --> 00:28:59.773
所以這次我們要做的是...
我們實例化視圖控制器

00:29:00.674 --> 00:29:02.976
然後使用PlaygroundSupport模塊

00:29:03.043 --> 00:29:06.146
是我已經導入的
就在第4行的那個

00:29:08.715 --> 00:29:11.685
我抓住Playground
的實時視圖

00:29:14.454 --> 00:29:15.956
將那個視圖

00:29:16.023 --> 00:29:19.726
變成Assistant Editor
它已不再爲Assistant Editor

00:29:21.061 --> 00:29:22.529
而是實時視圖

00:29:29.703 --> 00:29:31.071
看到沒？是實時表格視圖

00:29:31.672 --> 00:29:32.906
它可以滾動 是活動的

00:29:36.877 --> 00:29:38.679
謝謝
它不只是個靜止圖像

00:29:39.179 --> 00:29:40.380
它是個真正互動的表格視圖

00:29:40.447 --> 00:29:42.716
如果你想嘗試我們的部分新代理方法

00:29:42.783 --> 00:29:44.184
或現有的代理方法

00:29:44.251 --> 00:29:46.753
可將其丟進Playground
然後和它們互動

00:29:46.820 --> 00:29:50.257
無需再把這個放入模擬器中

00:29:51.692 --> 00:29:53.627
現在我把它們放在一起

00:29:54.661 --> 00:29:57.898
具體來說 我有了這個背景網絡請求
正在發生

00:29:57.965 --> 00:30:00.701
在我檢索數據後
我要重新加載表格視圖

00:30:00.767 --> 00:30:01.969
我給大家展示看看

00:30:09.309 --> 00:30:11.545
首先 註釋這個

00:30:13.146 --> 00:30:16.517
爲了向你們證明它
完全從那個網站加載數據

00:30:17.050 --> 00:30:19.319
我要更改這個...

00:30:19.620 --> 00:30:21.889
於是我有一個空白的元素列表

00:30:26.827 --> 00:30:27.661
好

00:30:27.728 --> 00:30:30.330
我有一個空白的元素列表

00:30:30.797 --> 00:30:35.102
當網絡請求返回
它是回調 它被指定了

00:30:35.402 --> 00:30:37.971
我剛拉進的新元素列表

00:30:38.438 --> 00:30:39.907
然後我們重新加載表格視圖

00:30:42.075 --> 00:30:43.844
好的 繼續

00:30:51.084 --> 00:30:52.419
那是你所期待的嗎？

00:30:52.853 --> 00:30:54.855
不是我第一次看到時所期待的

00:30:54.922 --> 00:30:56.223
那肯定是Xcode中的錯誤

00:30:56.290 --> 00:30:58.125
我在Apple.com提交錯誤報告

00:30:58.625 --> 00:30:59.626
但它實際上不是

00:31:00.928 --> 00:31:03.130
它是我代碼中的一個錯誤 不管信不信

00:31:03.397 --> 00:31:05.933
它是我代碼中的錯誤
現在看發生什麼

00:31:06.900 --> 00:31:09.636
我們有這個背景操作進來

00:31:10.437 --> 00:31:12.639
這個背景操作有一個背景操作

00:31:12.706 --> 00:31:13.740
不是在主線程上

00:31:14.174 --> 00:31:15.375
UI在主線程上

00:31:16.043 --> 00:31:16.877
那麼

00:31:17.477 --> 00:31:19.780
在我的閉包中
完成處理程序

00:31:19.847 --> 00:31:22.015
我不能從那裏更新主線程

00:31:22.082 --> 00:31:25.252
當我重新加載表格視圖時我嘗試這麼做

00:31:26.486 --> 00:31:27.921
當我點擊單元格

00:31:29.056 --> 00:31:32.192
我們使其無效
這就是爲什麼它們會刷新

00:31:32.259 --> 00:31:33.694
然後你可以在當時看見它們

00:31:36.230 --> 00:31:39.032
這個東西我們可以修正
我們在Swift 3有新的東西

00:31:39.099 --> 00:31:42.269
是Swift API
用於Grand Central Dispatch

00:31:44.204 --> 00:31:45.172
所以

00:31:45.839 --> 00:31:47.941
不用我們之前有的C API

00:31:50.577 --> 00:31:53.380
現在我可以說一個調度隊列
排在主隊列

00:31:53.447 --> 00:31:55.482
什麼類型的操作？
異步的

00:31:55.716 --> 00:31:56.917
我們不再需要那個

00:31:57.117 --> 00:31:58.719
現在是我要在主線程上做的

00:31:58.785 --> 00:32:00.454
現在它彈回主線程

00:32:03.657 --> 00:32:04.491
就在那兒

00:32:06.927 --> 00:32:10.831
調度隊列 謝謝
Swift中的調度隊列

00:32:11.598 --> 00:32:14.434
Swift中的實時視圖
和無限運行

00:32:15.736 --> 00:32:17.671
讓我們轉回到幻燈片

00:32:20.974 --> 00:32:22.943
謝謝
那麼 小結一下

00:32:23.010 --> 00:32:25.612
前面所講的

00:32:25.679 --> 00:32:27.014
或者剛纔演示的重點

00:32:29.616 --> 00:32:30.584
一些其他小建議

00:32:30.651 --> 00:32:32.753
當我拖動那些文件到源文件夾

00:32:32.819 --> 00:32:35.789
或資源文件夾時
它們是被複制而不是被參考

00:32:37.057 --> 00:32:40.294
而且 只有標誌爲公用的方法

00:32:40.360 --> 00:32:42.663
標誌爲公用的方法、屬性、數據類型等

00:32:42.729 --> 00:32:45.032
纔會在Playground中
可供你使用

00:32:45.098 --> 00:32:46.900
你可能添加公用說明符 因爲

00:32:46.967 --> 00:32:50.637
Swift中默認的可見性說明符
是內部的 不是公用的

00:32:53.473 --> 00:32:55.709
我提到使用緩衝文件夾

00:32:56.543 --> 00:33:00.914
現在 我們仍然有些設備是容量受限的

00:33:01.648 --> 00:33:04.451
客戶嘗試查看操作系統的新版本的更新

00:33:04.518 --> 00:33:06.453
他們發現不夠容量

00:33:07.087 --> 00:33:09.756
所以 在那種情況下
當設備容量不足時 我們所做的是

00:33:09.823 --> 00:33:11.458
我們查看緩衝文件夾

00:33:11.525 --> 00:33:14.428
刪除在全部應用程序緩衝文件夾裏
找到的任何東西

00:33:14.494 --> 00:33:15.929
這樣我們就釋放了空間

00:33:16.964 --> 00:33:18.165
我們需要你幫忙做這個

00:33:18.398 --> 00:33:22.536
如果你正臨時下載數據
你沒存放在緩衝文件夾

00:33:22.603 --> 00:33:23.904
請存放在緩衝文件夾

00:33:25.873 --> 00:33:26.707
接下來

00:33:28.175 --> 00:33:29.810
我覺得會很乾淨利落的是將

00:33:31.912 --> 00:33:32.846
又這樣

00:33:32.913 --> 00:33:33.981
將...

00:33:36.984 --> 00:33:39.052
使用依賴注入的視圖控制器

00:33:39.119 --> 00:33:42.523
重新排列使之適合不同平臺

00:33:44.324 --> 00:33:45.959
那麼 我要轉回到演示

00:33:48.562 --> 00:33:49.696
打開Bluetooth

00:33:55.669 --> 00:33:58.839
將視圖控制器放在tvOS上

00:34:15.222 --> 00:34:16.156
好 就是這樣

00:34:19.693 --> 00:34:23.397
我已匹配Siri遙控器到我的Mac
所以我可以通過模擬器來使用它

00:34:24.731 --> 00:34:26.500
和之前的代碼是一模一樣的

00:34:26.567 --> 00:34:29.101
一樣的視圖 一樣的表格視圖
所有的東西都在那

00:34:30.938 --> 00:34:32.339
我可以翻過去 看到...

00:34:34.041 --> 00:34:35.442
週期表 像這樣

00:34:35.509 --> 00:34:37.777
我得到漂亮的電視效果
當我滑動表格單元

00:34:37.844 --> 00:34:38.978
及其集合視圖

00:34:39.246 --> 00:34:41.348
是相同的佈局代碼和視圖控制器

00:34:41.415 --> 00:34:43.317
和我之前有的一模一樣

00:34:44.618 --> 00:34:45.452
呃

00:34:46.620 --> 00:34:47.454
幾乎一樣

00:34:56.196 --> 00:34:58.031
我添加這行代碼 這樣當我...

00:34:58.465 --> 00:35:02.035
選擇集合視圖單元時
你可以獲得重點那個項目

00:35:02.636 --> 00:35:06.039
且我使用OS Compiler指示

00:35:06.106 --> 00:35:07.541
說明這僅適用於tvOS

00:35:08.308 --> 00:35:09.910
除此之外 都是相同的代碼

00:35:10.544 --> 00:35:13.514
這有點讓我想到一點
如果你有想過你

00:35:13.580 --> 00:35:16.783
將一個應用從一個平臺
拖動到另一個平臺

00:35:16.850 --> 00:35:20.320
但沒有任何實際改動
你可能是做錯了什麼

00:35:20.754 --> 00:35:22.890
然後檢查人機界面指南

00:35:22.956 --> 00:35:25.325
只爲了看你如何讓那個平臺
和那個應用

00:35:25.392 --> 00:35:27.728
在那個平臺上更自然 感覺上更...

00:35:29.596 --> 00:35:30.964
更像它是屬於那裏的

00:35:33.667 --> 00:35:34.535
我們來舉個例子

00:35:34.601 --> 00:35:38.138
假設你開發了一個應用
是做類似基於雲的會計

00:35:38.705 --> 00:35:41.542
然後也許你有一個iPad版本
在這個iPad版本上

00:35:41.608 --> 00:35:42.976
用戶填寫發票

00:35:43.477 --> 00:35:44.411
合理

00:35:45.913 --> 00:35:48.615
不合理的是 在我看來

00:35:49.416 --> 00:35:52.419
要在60英寸的電視上填寫發票

00:35:52.819 --> 00:35:54.855
你不會那樣做
你怎麼會那樣做？

00:35:54.922 --> 00:35:58.592
這不是個你會在tvOS開啓的應用

00:35:59.226 --> 00:36:03.263
但是你的應用的iPad版本
也許有一些很棒的可視化效果

00:36:03.330 --> 00:36:04.598
關於公司是如何運作的

00:36:04.665 --> 00:36:06.667
也許你有一些圖形或圖表

00:36:07.434 --> 00:36:08.769
那些在電視上會很棒

00:36:09.002 --> 00:36:10.871
你可以有一個應用版本

00:36:11.772 --> 00:36:14.875
具備實時狀態面板顯示公司的運作

00:36:15.242 --> 00:36:17.311
也許在公司的會議室

00:36:17.377 --> 00:36:19.680
它就放映出來 播放動畫
顯示更新信息

00:36:19.746 --> 00:36:22.449
它是相同的數據模型
是相同的數據訪問

00:36:22.850 --> 00:36:25.986
但你將數據轉化得讓它更適用於

00:36:26.053 --> 00:36:27.788
它運行的平臺

00:36:28.088 --> 00:36:30.724
思考一下
如何將我們擁有的相同的數據

00:36:30.791 --> 00:36:33.160
轉化成可用於那個平臺？

00:36:36.530 --> 00:36:37.364
總結

00:36:37.898 --> 00:36:40.400
將你的應用現代化
是個不斷進行的過程

00:36:40.467 --> 00:36:42.836
我們希望你儘可能多地依靠框架

00:36:44.071 --> 00:36:45.405
若你可擺脫你應用中的代碼

00:36:45.472 --> 00:36:48.175
使用我們在框架中提供的代碼

00:36:48.242 --> 00:36:49.877
你可以維護更少的代碼

00:36:50.377 --> 00:36:51.445
我們希望你那樣做

00:36:52.145 --> 00:36:54.548
我們希望你今天開始
查找Xcode的問題

00:36:54.615 --> 00:36:56.183
用Swift轉換器

00:36:57.451 --> 00:37:00.053
希望你用更少的對象間依賴關係
來設計打造你的應用

00:37:00.120 --> 00:37:02.356
這樣你會更容易重新編排你的應用

00:37:04.758 --> 00:37:09.730
最後 我們希望你考慮將你的應用
引入我們的其他平臺

00:37:14.368 --> 00:37:15.636
通過轉化你的數據模型

00:37:16.436 --> 00:37:18.672
有一些相關的講座你可以查看

00:37:18.739 --> 00:37:19.706
就是這些

00:37:22.209 --> 00:37:23.844
除此之外 你可以查看

00:37:25.012 --> 00:37:28.081
這場講座的鏈接
我就講到這

00:37:28.148 --> 00:37:29.082
謝謝各位