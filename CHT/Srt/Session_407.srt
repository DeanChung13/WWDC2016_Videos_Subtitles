00:00:19.353 --> 00:00:23.023 
審覈應用的輔助功能

00:00:27.127 --> 00:00:27.961 
早上好

00:00:28.996 --> 00:00:30.497 
我是Susumu Harada

00:00:30.731 --> 00:00:32.833 
一名來自輔助功能團隊的工程師

00:00:33.166 --> 00:00:35.269 
今天很高興能和同事Patti

00:00:35.636 --> 00:00:38.238 
一起給大家介紹

00:00:38.305 --> 00:00:44.111 
一種最便捷的工具
用於發現 診斷和修復

00:00:44.178 --> 00:00:46.046 
應用中的輔助功能問題

00:00:47.147 --> 00:00:49.249 
也許有些人還是輔助功能方面的新手

00:00:49.449 --> 00:00:52.686 
所以讓我們簡要介紹下什麼是輔助功能

00:00:52.953 --> 00:00:56.056 
大家在開發應用過程中會遇到的問題

00:00:58.592 --> 00:01:02.696 
首先 輔助功能就是確保每個人

00:01:02.763 --> 00:01:07.301 
都能享受到應用所提供的產品和服務

00:01:07.568 --> 00:01:09.136 
不論他們的能力如何

00:01:10.771 --> 00:01:13.607 
現在 有些用戶可能有視覺

00:01:15.175 --> 00:01:16.176 
或聽覺障礙

00:01:18.111 --> 00:01:21.515 
有些可能正遭受身體和運動困難

00:01:22.716 --> 00:01:24.751 
或者有認知和學習障礙

00:01:26.954 --> 00:01:29.656 
爲了支持廣泛多樣的用戶

00:01:30.057 --> 00:01:34.261 
Apple已努力開發一系列輔助技術

00:01:34.328 --> 00:01:36.697 
幫助增強
各種用戶的能力

00:01:37.064 --> 00:01:39.733 
例如VoiceOver
幫助有視覺障礙的用戶

00:01:39.800 --> 00:01:42.469 
Switch control
幫助運動困難的用戶

00:01:45.205 --> 00:01:50.477 
我們也確定
這些技術可通過平臺用於所有設備

00:01:50.544 --> 00:01:54.214 
包括macOS iOS
watchOS和tvOS

00:01:57.084 --> 00:02:00.420 
儘管這些輔助技術 工具很棒

00:02:00.487 --> 00:02:03.857 
但用戶體驗的核心是你們的應用

00:02:05.559 --> 00:02:10.264 
所以要更好了解
你的應用如何與我們的輔助技術交互

00:02:10.697 --> 00:02:12.833 
過程中可能會遇到的問題

00:02:13.100 --> 00:02:14.935 
首先來看看一個簡單的例子

00:02:15.769 --> 00:02:18.906 
我寫了個簡單的應用
叫做Math Learner

00:02:19.273 --> 00:02:22.242 
我給一位用戶在頂部顯示一個方程

00:02:22.576 --> 00:02:24.444 
底部有四個答案按鈕

00:02:25.245 --> 00:02:27.281 
用戶可以點擊答案按鈕

00:02:27.347 --> 00:02:29.917 
得到答案是否正確的反饋

00:02:30.317 --> 00:02:31.785 
非常簡單

00:02:31.852 --> 00:02:33.687 
看起來運行正常

00:02:34.087 --> 00:02:37.958 
但是現在有位盲人使用該程序怎麼辦

00:02:40.994 --> 00:02:43.830 
顯然若沒有輔助技術

00:02:43.897 --> 00:02:47.167 
他們無法看到屏幕
那就毫無用處

00:02:47.701 --> 00:02:48.669 
幸運的是

00:02:48.869 --> 00:02:51.872 
他們可以使用
我們的屏幕讀取器VoiceOver

00:02:52.372 --> 00:02:55.075 
讀出屏幕上的信息

00:02:55.509 --> 00:02:58.145 
還可以在屏幕上使用各種手勢

00:02:58.212 --> 00:03:00.314 
來導航和與不同控制器交互

00:03:00.781 --> 00:03:02.649 
這樣 應用的輔助功能就很全面

00:03:03.016 --> 00:03:05.686 
當用戶點擊屏幕方程

00:03:06.253 --> 00:03:07.588 
VoiceOver讀出

00:03:07.921 --> 00:03:09.223 
5加3等於

00:03:10.057 --> 00:03:10.891 
很棒吧

00:03:12.726 --> 00:03:16.396 
所以要如何才能讓
像VoiceOver這樣的

00:03:16.463 --> 00:03:19.099 
輔助技術有效與應用連接呢？

00:03:19.433 --> 00:03:21.702 
有幾個關鍵信息

00:03:23.136 --> 00:03:24.538 
但首先要知道的是

00:03:24.605 --> 00:03:27.474 
屏幕上重要元素的位置

00:03:28.742 --> 00:03:31.512 
要知道每個元素的特點

00:03:31.578 --> 00:03:35.716 
或是類型例如這個按鈕
標題或靜態文本是什麼

00:03:38.051 --> 00:03:41.288 
最後 還要知道一個描述標籤

00:03:41.355 --> 00:03:43.223 
以及該元素的唯一標識

00:03:43.290 --> 00:03:46.026 
可以以一種可理解的方式向用戶描述

00:03:48.529 --> 00:03:50.731 
這樣有了這些關鍵信息

00:03:51.198 --> 00:03:53.367 
VoiceOver和
其他輔助技術就可以

00:03:53.433 --> 00:03:55.602 
以一種可用性強的方式向用戶

00:03:56.203 --> 00:03:57.704 
展示交互性

00:04:00.073 --> 00:04:03.110 
所有的輔助功能信息都是通過

00:04:03.377 --> 00:04:05.179 
輔助功能API由應用提供的

00:04:05.746 --> 00:04:09.283 
Apple公司努力打造輔助功能支持

00:04:09.349 --> 00:04:10.984 
納入我們的UI框架

00:04:11.318 --> 00:04:14.121 
所以若你使用標準控件構建自己的應用

00:04:14.555 --> 00:04:17.591 
所有的輔助功能信息都將自動由

00:04:17.658 --> 00:04:19.059 
制定器填入

00:04:19.125 --> 00:04:21.228 
你不必進行其他操作

00:04:23.063 --> 00:04:26.266 
當然 你的應用將會
最終包括自定義控件

00:04:26.333 --> 00:04:28.468 
當它們生效 你可能需要提供

00:04:28.535 --> 00:04:31.038 
一些自己的輔助功能信息

00:04:31.839 --> 00:04:34.608 
如果沒有 你可能最終無法訪問應用

00:04:35.075 --> 00:04:37.411 
所以讓我們來看看會有什麼影響

00:04:38.846 --> 00:04:41.715 
如果我已經執行頂部方程視圖

00:04:41.782 --> 00:04:45.953 
使用完全自定義繪圖代碼
如CA Layers或OpenGL

00:04:46.553 --> 00:04:49.456 
在默認的情況下沒有任何輔助功能

00:04:49.523 --> 00:04:51.658 
所以除非我明顯提供了

00:04:52.693 --> 00:04:55.195 
纔可能完全無形於VoiceOver

00:04:55.262 --> 00:04:56.997 
和其他輔助技術

00:04:58.432 --> 00:05:00.300 
而這四個底部按鈕

00:05:00.367 --> 00:05:03.570 
如果我使用類似按鈕的自定義視圖

00:05:03.637 --> 00:05:04.805 
但忘了說明

00:05:04.872 --> 00:05:07.207 
它們作爲按鈕的輔助功能特點

00:05:07.908 --> 00:05:09.743 
那麼VoiceOver和用戶

00:05:09.810 --> 00:05:12.045 
就無法知道它們可以點擊這些按鈕

00:05:14.314 --> 00:05:16.183 
最後 這是求助按鈕

00:05:16.450 --> 00:05:19.086 
如果我對它使用自定義繪圖代碼

00:05:19.152 --> 00:05:21.755 
忘了給標籤提供輔助功能

00:05:23.524 --> 00:05:26.193 
VoiceOver
就不知道如何向用戶描述

00:05:26.260 --> 00:05:28.929 
而用戶就不知按鈕的用途

00:05:29.863 --> 00:05:30.931 
所以這樣你就會發現

00:05:30.998 --> 00:05:33.667 
要是錯過一些關鍵的可訪問下信息

00:05:34.101 --> 00:05:37.171 
需要依靠輔助技術的用戶體驗

00:05:37.237 --> 00:05:38.238 
就會非常糟糕

00:05:41.575 --> 00:05:45.145 
所以必須確保應用全面的輔助功能

00:05:45.679 --> 00:05:48.348 
從而提供良好的用戶體驗

00:05:49.616 --> 00:05:53.187 
確保應用輔助功能還有另一個好處

00:05:53.387 --> 00:05:55.589 
就是對於具有全面

00:05:56.123 --> 00:05:57.457 
輔助功能的應用

00:05:57.758 --> 00:06:00.027 
你可以自動編寫UI測試

00:06:00.093 --> 00:06:02.930 
通過使用Xcode的UI測試支持

00:06:03.897 --> 00:06:07.100 
獲取更多信息 推薦大家去看

00:06:07.167 --> 00:06:10.103 
去年 WWDC 上的
Xcode的UI測試演講

00:06:11.738 --> 00:06:13.140 
審覈輔助功能

00:06:13.674 --> 00:06:14.508 
好極了 那麼

00:06:14.575 --> 00:06:16.677 
如何才能確保app提供

00:06:16.743 --> 00:06:19.046 
所有必要的輔助功能信息呢

00:06:19.980 --> 00:06:22.115 
我們一直建議的方法就是

00:06:22.316 --> 00:06:24.585 
使用實際的輔助技術

00:06:24.651 --> 00:06:27.287 
例如VoiceOver和
Switch control

00:06:27.721 --> 00:06:29.857 
現在 這還是個很理想的方法

00:06:29.923 --> 00:06:33.493 
因爲這樣你可以反映實際的用戶體驗

00:06:33.827 --> 00:06:36.196 
同時不論是否可以進行訪問

00:06:36.263 --> 00:06:38.332 
都還可以解決可用性的問題

00:06:38.899 --> 00:06:43.036 
但是這確實要求大家熟悉掌握這些技術

00:06:43.871 --> 00:06:46.507 
特別當你的應用支持多平臺時

00:06:46.940 --> 00:06:48.275 
你會覺得這有點難

00:06:48.342 --> 00:06:52.045 
必須的特定設備上多次部署應用

00:06:52.212 --> 00:06:54.982 
通過各種輔助技術運行

00:06:55.048 --> 00:06:57.718 
在每個平臺重複這個過程

00:06:59.486 --> 00:07:03.657 
所有平臺都有一些輔助功能設置

00:07:03.724 --> 00:07:05.058 
用戶可以進行配置

00:07:05.325 --> 00:07:07.694 
例如動態類型的字體大小

00:07:09.129 --> 00:07:12.499 
作爲開發人員可能會覺得有點乏味

00:07:12.566 --> 00:07:15.602 
必須在改變輔助功能設置

00:07:15.669 --> 00:07:17.771 
和返回應用中

00:07:17.838 --> 00:07:18.939 
進行來回切換

00:07:19.206 --> 00:07:21.141 
驗證在應用上的效果

00:07:21.542 --> 00:07:22.876 
再重複該過程

00:07:24.011 --> 00:07:26.046 
所以 聽取大家的反饋後

00:07:26.113 --> 00:07:28.382 
今天很高興發佈一種更爲簡便的

00:07:28.849 --> 00:07:33.387 
全新工具用於審查輔助功能

00:07:33.754 --> 00:07:35.856 
那就是全新的
輔助功能檢查

00:07:39.326 --> 00:07:41.295 
在輔助功能檢查上

00:07:41.962 --> 00:07:43.797 
只有一個按鈕

00:07:44.264 --> 00:07:47.768 
它可以自動審查應用的
一般輔助功能問題

00:07:47.968 --> 00:07:49.136 
非常簡單

00:07:49.736 --> 00:07:52.372 
甚至可以建議你如何解決問題

00:07:54.408 --> 00:07:59.179 
在Interactive Inspection模式中
你可以輕鬆定位應用的任何元素

00:07:59.446 --> 00:08:02.149 
獲得詳細的輔助功能信息

00:08:02.716 --> 00:08:05.452 
不論應用是在模擬器
還是連接設備上運行

00:08:05.586 --> 00:08:07.321 
都可以使用

00:08:09.857 --> 00:08:13.927 
我們還提供了實時預覽功能

00:08:14.328 --> 00:08:17.464 
可以讓大家輕鬆改變輔助功能設置

00:08:17.798 --> 00:08:20.033 
並立即在應用上看到效果

00:08:20.100 --> 00:08:21.602 
卻不用離開應用

00:08:23.937 --> 00:08:28.542 
很高興告訴大家
這款Accessibility Inspector

00:08:28.809 --> 00:08:30.978 
現在已經支持所有平臺

00:08:32.346 --> 00:08:36.450 
只要桌面上有輔助功能檢查應用

00:08:37.083 --> 00:08:42.722 
你就可以審查應用在
macOS iOS watchOS

00:08:42.789 --> 00:08:44.057 
甚至tvOS上的運行

00:08:45.826 --> 00:08:50.097 
而你只要
在模擬器或設備上運行應用

00:08:50.631 --> 00:08:53.233 
選擇inspector上的各個目標

00:08:53.600 --> 00:08:54.568 
就是這麼簡單

00:08:55.903 --> 00:09:00.107 
我們希望這個功能

00:09:00.174 --> 00:09:05.279 
可以最大程度上簡化在所有平臺
上的測試和審查輔助功能的工作

00:09:06.780 --> 00:09:11.118 
給大家演示了這些全新功能
和全新accessibly inspector後

00:09:11.652 --> 00:09:13.220 
我要把時間交給Patti

00:09:20.460 --> 00:09:22.095 
嗨 我是Patty Hoa

00:09:22.162 --> 00:09:23.730 
很興奮

00:09:23.797 --> 00:09:27.601 
可以給大家介紹我們全新
輔助功能檢查

00:09:28.468 --> 00:09:32.172 
我們一直致力於整個大家的反饋

00:09:32.573 --> 00:09:35.542 
我已經等不及向大家展示了

00:09:38.378 --> 00:09:39.379 
請注意

00:09:40.214 --> 00:09:44.117 
輔助功能檢查
現在是開發包的一部分

00:09:44.184 --> 00:09:46.954 
這意味着大家只要進入迷你工具條

00:09:47.020 --> 00:09:50.791 
Open Developer Tools
區域下方的代碼

00:09:50.858 --> 00:09:53.160 
就能運行輔助功能檢查

00:09:54.528 --> 00:09:57.965 
這是我們新Accessibly Inspector的截圖

00:09:58.365 --> 00:10:01.068 
首先希望大家注意下頂部

00:10:01.502 --> 00:10:05.472 
左邊是Target Chooser

00:10:05.873 --> 00:10:08.108 
這可以讓我們

00:10:08.342 --> 00:10:10.978 
檢查所有不同的Apple設備

00:10:11.044 --> 00:10:13.547 
包括iPhone iPad

00:10:13.614 --> 00:10:17.284 
臺式機 watch TV和模擬器

00:10:19.486 --> 00:10:23.090 
中間是Inspection Pointer

00:10:23.457 --> 00:10:25.225 
當你啓用這個時

00:10:25.592 --> 00:10:28.762 
工具就能開始檢查

00:10:29.229 --> 00:10:31.665 
你手指下方的設備上是什麼

00:10:32.199 --> 00:10:35.135 
若是使用模擬器或臺式機

00:10:35.202 --> 00:10:37.571 
就是你鼠標光標下的內容

00:10:39.806 --> 00:10:42.109 
在右側有三個按鈕

00:10:43.477 --> 00:10:46.380 
代表工具的三個主要功能

00:10:46.847 --> 00:10:49.750 
這就是下面我要給大家介紹的

00:10:49.816 --> 00:10:52.753 
會有更多細節和演示

00:10:53.187 --> 00:10:54.855 
是哪三種功能呢

00:10:55.789 --> 00:10:57.357 
第一 檢查

00:10:59.059 --> 00:11:01.795 
檢查功能可以調試分析

00:11:01.862 --> 00:11:03.764 
應用的可訪問狀態

00:11:05.332 --> 00:11:06.900 
然後是審查功能

00:11:07.367 --> 00:11:10.938 
幫助大家找到應用的輔助功能問題

00:11:12.206 --> 00:11:14.174 
最後是設置功能

00:11:15.042 --> 00:11:20.314 
幫助大家快速測試輔助功能設置
對應用的影響

00:11:21.248 --> 00:11:24.418 
我要說的第一點是審查功能

00:11:27.087 --> 00:11:29.156  
大家的最終目標是

00:11:29.223 --> 00:11:32.659  
確保應用對每一個人的輔助功能

00:11:33.126 --> 00:11:35.362 
要做到這一點 首先就要審查應用

00:11:36.663 --> 00:11:40.400 
正如Susumu提過的那樣可以使用

00:11:40.467 --> 00:11:43.437 
VoiceOver
Switch control以及

00:11:43.504 --> 00:11:44.905 
審查應用

00:11:45.706 --> 00:11:48.275 
或者你也可以聘請輔助功能顧問

00:11:48.342 --> 00:11:50.344 
代表你進行評估

00:11:50.744 --> 00:11:52.446 
當 今天我要說的是

00:11:52.513 --> 00:11:55.782 
一種更經濟的解決方法

00:11:56.950 --> 00:12:01.655 
只要使用我們工具的審查功能

00:12:04.658 --> 00:12:07.794 
在審查選項中有這個審查運行按鈕

00:12:08.095 --> 00:12:11.064 
向大家介紹該功能最好的方法就是

00:12:11.131 --> 00:12:12.499 
演示一遍

00:12:21.909 --> 00:12:23.844 
我在屏幕上

00:12:24.044 --> 00:12:25.646 
運行一版

00:12:26.180 --> 00:12:29.316 
iOS版的
Math Learner應用

00:12:29.383 --> 00:12:30.918 
在模擬器上運行

00:12:32.286 --> 00:12:34.755 
這樣你可以玩遊戲 我們有方程

00:12:34.821 --> 00:12:36.790 
我們選擇其中一個選項

00:12:37.191 --> 00:12:38.992 
不是那個 這個

00:12:39.059 --> 00:12:41.228 
三個 這就是玩遊戲的規則

00:12:43.931 --> 00:12:47.134 
好了 現在我想要運行
輔助功能檢查

00:12:48.402 --> 00:12:51.572 
我只要前往Xcode

00:12:54.308 --> 00:12:55.509 
在頂部

00:12:57.611 --> 00:12:59.780 
Open Developer Tool的下方

00:13:00.314 --> 00:13:02.683 
我們要啓動輔助功能檢查

00:13:06.220 --> 00:13:08.288 
你要告訴工具的第一點就是

00:13:08.355 --> 00:13:10.457 
你要審查那個設備

00:13:11.391 --> 00:13:15.195 
在Target Chooser中
我要挑選模擬器

00:13:19.399 --> 00:13:21.802 
之後點擊審查選項條

00:13:22.569 --> 00:13:24.872 
這個就是我之前說的審查運行按鈕

00:13:25.339 --> 00:13:27.207 
我繼續點擊那個

00:13:29.243 --> 00:13:31.812 
幾秒後 我們就完成應用的審查了

00:13:33.981 --> 00:13:35.582 
這些是發現的問題

00:13:36.517 --> 00:13:39.186 
可以進行選擇

00:13:39.253 --> 00:13:41.054 
循環瀏覽這些問題

00:13:41.121 --> 00:13:42.556 
你會發現有

00:13:42.823 --> 00:13:46.660 
一個對應的紅色高亮區顯示問題

00:13:49.229 --> 00:13:51.965 
當然 如果你檢查真實的設備

00:13:52.032 --> 00:13:53.500 
例如iPhone和iPad

00:13:54.301 --> 00:13:56.069 
就可能是這樣的視圖

00:13:57.304 --> 00:14:00.841 
如果你想指定問題的位置

00:14:00.908 --> 00:14:03.477 
就必須離開工具

00:14:03.744 --> 00:14:06.213 
關注iPhone或iPad

00:14:07.080 --> 00:14:08.448 
我們有的只是

00:14:08.882 --> 00:14:10.951 
一個還不錯的功能

00:14:11.018 --> 00:14:14.021 
只是給你工具中有問題的相同元素的

00:14:14.087 --> 00:14:17.124 
一個小預覽 一個截圖

00:14:17.191 --> 00:14:19.860 
這樣你可以繼續關注工具本身

00:14:22.362 --> 00:14:24.131 
好了 我們有這些問題

00:14:24.898 --> 00:14:27.301 
下一步你想做的是什麼

00:14:27.367 --> 00:14:28.502 
就是解決問題

00:14:29.436 --> 00:14:31.104 
先選擇一個問題

00:14:31.905 --> 00:14:33.473 
元素沒有描述

00:14:33.540 --> 00:14:39.213 
點擊三角形展開獲取更多信息

00:14:41.582 --> 00:14:44.618 
好了 所以是元素沒有描述

00:14:44.985 --> 00:14:46.854 
相對應的代碼是什麼

00:14:47.387 --> 00:14:49.323 
你知道要編寫哪一段代碼嗎

00:14:50.490 --> 00:14:52.326 
好吧 如果你在線

00:14:52.392 --> 00:14:55.195 
閱讀所有關於輔助功能API的文件

00:14:55.262 --> 00:14:57.831 
可能可以給你一些修復問題的提示

00:14:58.432 --> 00:15:01.268 
但是今天我要展示
一種更便捷的解決方法

00:15:01.768 --> 00:15:03.270 
只要點擊這個問號

00:15:04.738 --> 00:15:07.574 
工具會識別哪個API需要修復

00:15:08.275 --> 00:15:11.478 
內容是 考慮設置輔助功能的標籤

00:15:12.446 --> 00:15:15.616 
那麼 在這一點上
如果你知道API如何工作

00:15:15.682 --> 00:15:18.752 
你只要直接進入代碼進行修改

00:15:19.620 --> 00:15:22.689 
但如果想要更多
關於API如何運行的信息

00:15:23.223 --> 00:15:24.992 
可以點擊這個鏈接

00:15:25.759 --> 00:15:30.330 
之後可以鏈接到像這樣的文件

00:15:30.397 --> 00:15:34.168 
你可以找到更多關於API的信息

00:15:37.938 --> 00:15:40.541 
好了 因爲我知道需要覆蓋哪個API

00:15:40.941 --> 00:15:42.943 
所以直接進入代碼 進行修復

00:15:50.083 --> 00:15:51.685 
我正在修復的

00:15:51.752 --> 00:15:54.321 
就是那些帶點的按鈕視圖

00:15:54.788 --> 00:15:59.059 
而實現的方式
只不過是一個自定義UI視圖

00:16:00.360 --> 00:16:01.328 
所以現在

00:16:02.429 --> 00:16:04.798 
我只要重寫

00:16:06.166 --> 00:16:07.734 
輔助功能標籤

00:16:11.471 --> 00:16:16.610 
再返回描寫那些點的字符串

00:16:17.678 --> 00:16:20.814 
當然 你應該返回的是本地化字符串

00:16:22.249 --> 00:16:24.618 
好了嗎？現在我用自己的編寫方法

00:16:25.886 --> 00:16:28.722 
我要進行保存 運行 再運行

00:16:41.568 --> 00:16:43.237 
好 讓我們返回Addition

00:16:45.405 --> 00:16:48.008 
清除有的老問題

00:16:49.343 --> 00:16:50.544 
再返回審查

00:16:53.447 --> 00:16:55.616 
代碼做了小變動後

00:16:55.983 --> 00:16:58.252 
我們修復了一堆問題

00:16:58.318 --> 00:16:59.186 
很棒不是嗎

00:17:06.760 --> 00:17:07.594 
好了

00:17:07.661 --> 00:17:11.431 
請注意這個同樣強大的審查功能

00:17:11.498 --> 00:17:13.967 
可以由團隊的其他成員使用

00:17:14.034 --> 00:17:17.271 
如代表你想要進行評估的質量檢查人員

00:17:17.671 --> 00:17:20.607 
當然 他們會報告這些錯誤

00:17:23.911 --> 00:17:27.281 
爲了加快報告流程

00:17:27.714 --> 00:17:30.083 
他們現在只要在運行審查後

00:17:30.150 --> 00:17:31.485 
複製黏貼

00:17:31.985 --> 00:17:33.587 
到錯誤報告中

00:17:34.154 --> 00:17:37.090 
當然 每個合格的錯誤報告

00:17:37.157 --> 00:17:38.425 
都應有屏幕截圖

00:17:39.593 --> 00:17:42.829 
所以我們在這兒有個
Quick Look按鈕

00:17:43.964 --> 00:17:45.132 
只要一點

00:17:46.200 --> 00:17:49.803 
就能夠獲得整個屏幕的截圖

00:17:50.270 --> 00:17:53.473 
加上問題存在的藍色框

00:17:54.308 --> 00:17:55.943 
你只要再一次複製

00:17:57.311 --> 00:17:59.046 
黏貼到你的錯誤報告中

00:17:59.112 --> 00:18:01.081 
現在你已經準備好發送錯誤報告了

00:18:17.364 --> 00:18:21.902 
好了 我們剛纔看的就是審查功能如何

00:18:21.969 --> 00:18:25.105 
幫助你自動檢測應用問題

00:18:25.839 --> 00:18:27.908 
並給你提供建議方案

00:18:27.975 --> 00:18:30.644 
甚至加快錯誤報告過程

00:18:32.813 --> 00:18:35.949 
這個功能的強大之處就是

00:18:36.016 --> 00:18:39.486 
幫助發現應用中的問題

00:18:39.553 --> 00:18:45.125 
類似於在Xcode的編譯警告

00:18:45.692 --> 00:18:48.562 
沒有警告不代表

00:18:48.629 --> 00:18:50.831 
應用 沒有問題

00:18:51.498 --> 00:18:55.502 
這就是必須要進行一些人工審查的原因

00:18:57.604 --> 00:19:00.874 
爲了說明其重要性

00:19:01.475 --> 00:19:03.076 
我給大家舉個例子

00:19:05.245 --> 00:19:07.181 
假設你有一個按鈕

00:19:07.781 --> 00:19:09.583 
功能是發生郵件

00:19:10.684 --> 00:19:13.387 
當然 按鈕帶有一堆屬性

00:19:14.588 --> 00:19:18.125 
當我們創建新按鈕時 我們往往喜歡

00:19:18.458 --> 00:19:21.195 
簡單地從現有按鈕中選擇一個

00:19:21.728 --> 00:19:22.729 
進行復制

00:19:23.730 --> 00:19:27.701 
當然 按鈕所有的屬性都進行傳送

00:19:28.802 --> 00:19:30.871 
我們再去調整一些屬性

00:19:30.938 --> 00:19:35.442 
像動作和圖標

00:19:37.878 --> 00:19:39.847 
這沒問題 一切都順利

00:19:39.913 --> 00:19:44.084 
除非你忘了升級一些屬性

00:19:44.151 --> 00:19:45.219 
會產生問題

00:19:45.285 --> 00:19:48.689 
特別是在這種情況下的
輔助功能標籤屬性

00:19:50.490 --> 00:19:52.860 
對於使用輔助技術
如VoiceOver的用戶

00:19:53.427 --> 00:19:56.363 
輔助功能標籤屬性顯得至關重要

00:19:56.430 --> 00:19:59.132 
原因是唯一擁有的信息

00:19:59.199 --> 00:20:01.568 
就是這個按鈕的功能如何

00:20:02.870 --> 00:20:07.708 
所以使用輔助技術
例如VoiceOver的用戶

00:20:08.075 --> 00:20:10.244 
使用這個按鈕
而輔助功能標籤沒有更新

00:20:10.310 --> 00:20:12.012 
提示說發送郵件

00:20:12.779 --> 00:20:15.749 
當他們按下按鈕以爲在發送郵件

00:20:15.816 --> 00:20:18.685 
但實際上是刪除郵件

00:20:19.152 --> 00:20:20.654 
這就不是個好結果

00:20:23.156 --> 00:20:24.258 
對於這點

00:20:25.259 --> 00:20:28.929 
我們就要幫助大家使用工具

00:20:29.263 --> 00:20:30.230 
進行人工審查

00:20:30.397 --> 00:20:32.666 
這也是我要談談檢查的原因

00:20:36.436 --> 00:20:38.772 
首先讓我介紹下檢查的一些亮點

00:20:38.839 --> 00:20:42.309 
以及是如何在人工審查過程中
幫助大家的

00:20:42.543 --> 00:20:45.946 
假設我們這裏有一個按鈕
其中有8個點

00:20:47.614 --> 00:20:51.685 
檢查選項頂部有Quick Look

00:20:52.719 --> 00:20:58.892 
左邊是描述區域

00:20:59.159 --> 00:21:02.229 
或者是總結元素如何描述的

00:21:02.496 --> 00:21:05.899 
在這種8點按鈕的情況下
我們只要說8

00:21:07.134 --> 00:21:09.503 
右邊是導航按鈕

00:21:09.570 --> 00:21:14.808 
讓你輕鬆從該元素前往鄰近的UI元素

00:21:14.875 --> 00:21:17.578 
通過這個按鈕

00:21:19.713 --> 00:21:22.049 
下面是基本區

00:21:22.816 --> 00:21:26.987 
包含用於描述元素的屬性

00:21:27.588 --> 00:21:29.590 
例如 我們有標籤

00:21:29.656 --> 00:21:31.925 
與輔助標籤相對應

00:21:31.992 --> 00:21:33.627 
返回值8

00:21:33.994 --> 00:21:34.895 
我們有Trait

00:21:34.962 --> 00:21:37.064 
這種情況下 一個按鈕 返回按鈕

00:21:38.699 --> 00:21:41.134 
因爲這個按鈕是相互作用的

00:21:42.569 --> 00:21:45.205 
你要考慮Action區域 看到

00:21:45.272 --> 00:21:48.308 
有Activate Action

00:21:48.575 --> 00:21:52.212 
這樣你只要點擊運行按鈕就能

00:21:52.279 --> 00:21:53.614 
驗證這個活動生效

00:21:56.149 --> 00:21:58.185 
這就是檢查的亮點之一

00:21:58.252 --> 00:22:02.356 
讓我繼續給大家做一個演示

00:22:12.332 --> 00:22:14.868 
好了 我們回到應用

00:22:15.736 --> 00:22:18.272 
現在我們要進入檢查選項

00:22:19.773 --> 00:22:23.277 
記得之前我提到有這個
Inspection Pointer

00:22:23.343 --> 00:22:26.313 
現在啓用了 就意味着 我把鼠標

00:22:26.380 --> 00:22:29.616 
放在模擬器該項目上方

00:22:29.850 --> 00:22:33.720 
工具會開始檢查光標下的元素

00:22:34.121 --> 00:22:36.023 
你可以看見綠色的亮點

00:22:37.691 --> 00:22:39.593 
在桌面模擬器上

00:22:39.660 --> 00:22:43.130 
你如果單擊項目

00:22:44.631 --> 00:22:46.633 
就會關閉Inspection Pointer

00:22:46.934 --> 00:22:49.770 
就可以四處移動鼠標

00:22:49.837 --> 00:22:52.072 
卻不會影響檢查項目

00:22:53.473 --> 00:22:57.144 
我們正在檢查addition
你看到描述

00:22:57.578 --> 00:23:00.514 
現在我點擊進入下一元素按鈕

00:23:01.982 --> 00:23:04.818 
你會看見亮點下降到這些按鈕

00:23:06.153 --> 00:23:07.988 
再點擊 進入下一個

00:23:08.055 --> 00:23:10.624 
同樣得到描述 這是4點按鈕

00:23:11.658 --> 00:23:15.395 
注意我們完全繞過

00:23:15.462 --> 00:23:17.865 
了重要的事情： 這個方程

00:23:18.932 --> 00:23:20.868 
只要進行這個導航

00:23:20.934 --> 00:23:24.071 
就能找到伴隨的問題

00:23:24.137 --> 00:23:26.940 
這種情況下 可能方程會有問題

00:23:28.308 --> 00:23:29.243 
我們繼續往下

00:23:30.410 --> 00:23:32.980 
我們在8點 9點

00:23:34.081 --> 00:23:36.216 
再到幫助按鈕

00:23:36.283 --> 00:23:39.386 
除了描述看起來不太好 對吧

00:23:39.453 --> 00:23:41.555 
IMG 0151

00:23:41.889 --> 00:23:45.659 
不太對頭
再一次 可能是另一個潛在區域

00:23:46.126 --> 00:23:47.427 
需要修復

00:23:48.529 --> 00:23:52.466 
如果可以簡單使用
Quick Look區域

00:23:52.533 --> 00:23:55.135 
在所有應用UI進行導航

00:23:55.202 --> 00:23:59.606 
並驗證描述是否都正確無誤

00:24:00.174 --> 00:24:01.675 
然後你就在正確的軌道上了

00:24:02.142 --> 00:24:06.180 
當然 如果你有其他交互UI

00:24:06.246 --> 00:24:07.314 
類似這些按鈕

00:24:08.182 --> 00:24:10.217 
你只要去
Action Section

00:24:11.351 --> 00:24:12.186 
現在

00:24:13.020 --> 00:24:16.790 
我點擊執行按鈕激活該按鈕

00:24:16.857 --> 00:24:18.559 
來驗證活動效果

00:24:21.028 --> 00:24:23.063 
很好 我剛纔展示的

00:24:23.130 --> 00:24:25.399 
就是如何使用檢查

00:24:25.799 --> 00:24:30.938 
來幫助你進行應用人工審查

00:24:31.805 --> 00:24:36.610 
現在檢查對與應用輔助功能狀態

00:24:36.677 --> 00:24:39.880 
的調試和分析也有很大幫助

00:24:40.881 --> 00:24:45.953 
其中一個例子就是
理解輔助層次結構如何工作

00:24:46.019 --> 00:24:49.456 
這個很重要
特別是在OS X應用上

00:24:49.823 --> 00:24:54.261 
其中相應的視圖層次會變得更復雜

00:24:54.728 --> 00:24:56.530 
爲了展示該功能如何作用

00:24:56.597 --> 00:24:59.666 
我繼續運行同一應用的OS X版本

00:25:07.407 --> 00:25:10.577 
好了 這是OS X 版本的應用

00:25:11.879 --> 00:25:14.982 
我們進行稍微複雜一些的處理 乘法

00:25:15.983 --> 00:25:17.818 
當你進行3乘以6

00:25:17.885 --> 00:25:19.920 
不好意思 再來一次

00:25:19.987 --> 00:25:21.021 
這次怎麼樣

00:25:21.088 --> 00:25:23.857 
錯誤 再來 3乘以6 18

00:25:23.924 --> 00:25:24.758 
正確

00:25:25.459 --> 00:25:28.962 
好了 你進行一樣的操作
就知道 這個應用怎麼工作了

00:25:29.029 --> 00:25:32.766 
在iOS和OS X上運行一樣的應用

00:25:34.601 --> 00:25:35.435 
好了

00:25:35.669 --> 00:25:37.204 
首先要做的就是

00:25:37.371 --> 00:25:41.308 
告訴工具你要檢查一個新設備

00:25:41.975 --> 00:25:43.844 
我們開始選擇

00:25:44.278 --> 00:25:48.115 
我的MacBook Pro原因是
我們正在檢查機子本身

00:25:48.182 --> 00:25:51.685 
這種情況下
我們應選擇先要檢查的應用

00:25:51.752 --> 00:25:53.387 
我想選擇Math Learner

00:25:55.455 --> 00:25:59.126 
我們可以再次運行
審查功能看看發現什麼問題

00:25:59.426 --> 00:26:00.894 
發現了一堆問題

00:26:03.197 --> 00:26:05.699 
我希望大家注意這四個問題

00:26:06.300 --> 00:26:08.402 
就是 可能無法訪問的元素

00:26:08.669 --> 00:26:14.174 
執行這些答案選項
它們只是自定義的NSview

00:26:14.575 --> 00:26:17.244 
這是通過CA文本圖層繪製文本

00:26:18.111 --> 00:26:21.381 
現在 在默認情況下
CA各層沒有輔助支持

00:26:21.782 --> 00:26:23.283 
意味着如果你創建它們

00:26:23.984 --> 00:26:26.653 
VoiceOver客戶
就無法看見它們

00:26:27.154 --> 00:26:30.691 
工具正在告訴你
這些不能訪問

00:26:31.558 --> 00:26:33.227 
爲了瞭解如何解決這個問題

00:26:33.293 --> 00:26:36.897 
幫助瞭解如何可及性層級如何工作

00:26:38.098 --> 00:26:39.566 
我們前往檢查

00:26:41.602 --> 00:26:44.104 
再次 打開Inspection Pointer

00:26:44.905 --> 00:26:46.974 
如果我把鼠標這樣

00:26:47.374 --> 00:26:50.077 
再次 檢查鼠標下的內容

00:26:50.143 --> 00:26:53.747 
我想要檢查的是整個窗口

00:26:54.414 --> 00:26:56.750 
原因是我想知道

00:26:56.817 --> 00:26:59.987 
這個窗口的子元素有哪些

00:27:02.389 --> 00:27:04.191 
所以 我能看到的

00:27:04.258 --> 00:27:07.160 
就是我在層級區域下能看到的

00:27:09.329 --> 00:27:12.799 
這些是該窗口的所有子元素

00:27:14.668 --> 00:27:17.704 
我放到方程上方 你能看到紅色的亮點

00:27:18.405 --> 00:27:19.773 
在圖像上

00:27:20.541 --> 00:27:21.808 
一些狀態文本上

00:27:21.875 --> 00:27:25.212 
還有工具了部分的一堆東西

00:27:25.812 --> 00:27:26.813 
現在

00:27:27.014 --> 00:27:32.486 
那四個關鍵答案選項按鈕
就不再是窗口子元素

00:27:33.720 --> 00:27:35.789 
我們知道要進行修復

00:27:35.889 --> 00:27:38.292 
但今天 我不會演示如何修復

00:27:38.992 --> 00:27:41.461 
而是 讓大家看看

00:27:41.528 --> 00:27:44.965 
我們示例代碼輔助UI例子

00:27:45.432 --> 00:27:48.035 
可以從developer.apple.com下載

00:27:48.602 --> 00:27:50.204 
這個示例應用包含

00:27:50.270 --> 00:27:52.739 
一整個UI場景數據庫

00:27:53.006 --> 00:27:56.243 
你可以向裏面增添輔助支持

00:27:56.944 --> 00:27:58.345 
我建議大家這麼做

00:27:58.979 --> 00:28:00.514 
一旦修復

00:28:01.081 --> 00:28:04.685 
我希望那四個答案選項按鈕

00:28:04.751 --> 00:28:08.121 
就會作爲窗口的子元素

00:28:08.188 --> 00:28:11.091 
你就可以在該層級驗證它

00:28:17.030 --> 00:28:19.833 
我之前展示的都是

00:28:19.900 --> 00:28:21.702 
如何使用檢查功能

00:28:21.768 --> 00:28:24.338 
幫助大家進行人工審查

00:28:25.038 --> 00:28:27.574 
以及如何使用檢查功能

00:28:27.641 --> 00:28:32.112 
進行應用輔助狀態的調試和分析

00:28:33.046 --> 00:28:34.681 
下面我想要談談

00:28:35.849 --> 00:28:37.518 
設置

00:28:39.620 --> 00:28:42.089 
在所有OS平臺上

00:28:42.155 --> 00:28:45.192 
我們有着很多輔助功能設置

00:28:45.492 --> 00:28:47.160 
自帶內置

00:28:48.228 --> 00:28:50.464 
例如在iPhone上

00:28:51.031 --> 00:28:56.737 
在“常規輔助功能”下設置應用

00:28:57.271 --> 00:28:58.272 
你會發現

00:28:58.338 --> 00:29:01.642 
許多很棒的內置輔助功能

00:29:02.009 --> 00:29:04.178 
像Toggle一樣設置

00:29:04.811 --> 00:29:09.483 
如果你想知道
動態字體如何影響你的應用

00:29:09.850 --> 00:29:11.084 
你可以進入

00:29:11.451 --> 00:29:12.853 
調整字體大小

00:29:14.021 --> 00:29:15.389 
調到很大

00:29:16.023 --> 00:29:17.191 
然後返回應用

00:29:18.025 --> 00:29:21.028 
就能直觀驗證大字體在應用的效果

00:29:22.496 --> 00:29:24.565 
然後再返回設置應用

00:29:25.799 --> 00:29:27.968 
重新調到很小

00:29:28.402 --> 00:29:32.272 
再看看很小的字體在應用的效果

00:29:35.609 --> 00:29:39.179 
現在 你可以看到這會很繁瑣

00:29:39.379 --> 00:29:42.149 
如果你一直在設置應用和自己的應用

00:29:42.216 --> 00:29:44.418 
之間來回切換

00:29:45.619 --> 00:29:46.453 
還有

00:29:47.054 --> 00:29:48.488 
你又該如何知道

00:29:48.856 --> 00:29:51.959 
那個輔助設置對測試來說很重要

00:29:52.993 --> 00:29:55.162 
好了 我們的工具可以給出答案

00:29:58.966 --> 00:30:00.701 
這是我們的設置選項

00:30:04.204 --> 00:30:06.240 
我們的設置選項顯示

00:30:06.406 --> 00:30:09.643 
了一些最常見的輔助功能設置

00:30:09.710 --> 00:30:11.345 
希望你們測試一下

00:30:12.479 --> 00:30:14.715 
另外 因爲工具中內置

00:30:15.148 --> 00:30:18.185 
你不必再在應用之間來回切換

00:30:25.425 --> 00:30:28.428 
這個演示告訴大家如何操作

00:30:29.196 --> 00:30:31.932 
在設置選項中 大家可以反轉顏色

00:30:32.332 --> 00:30:36.503 
並立刻看到呈現在應用中的效果

00:30:37.704 --> 00:30:39.907 
我們可以對字體大小做同樣的處理

00:30:39.973 --> 00:30:40.807 
調整

00:30:41.808 --> 00:30:42.876 
直接看到效果

00:30:54.621 --> 00:30:55.923 
你剛纔看到的

00:30:57.291 --> 00:31:01.662 
就是設置功能帶來的便利

00:31:02.095 --> 00:31:04.598 
今天我給大家展示了三大功能

00:31:05.866 --> 00:31:08.502 
第一是審查功能

00:31:08.569 --> 00:31:12.272 
幫助大家自動檢測應用的輔助功能問題

00:31:13.273 --> 00:31:15.075 
並給出修復建議

00:31:15.442 --> 00:31:17.945 
讓大家更快速地報告問題

00:31:20.480 --> 00:31:23.884 
然後我們看到了檢查功能的強大之處

00:31:24.151 --> 00:31:26.720 
指導大家進行整個人工審查過程

00:31:27.087 --> 00:31:31.491 
並對應用的輔助功能狀態
進行調試和分析

00:31:32.593 --> 00:31:35.095 
最後就是剛剛看到的設置功能

00:31:35.429 --> 00:31:37.598 
便於大家查看測試

00:31:37.664 --> 00:31:42.102 
輔助功能的設置改變在應用上的效果

00:31:43.337 --> 00:31:48.242 
有關輔助檢查功能的簡要介紹就是這些

00:31:56.149 --> 00:31:57.251 
好極了 謝謝Patti

00:31:58.886 --> 00:32:03.123 
我們期待大家
體驗我們全新的輔助功能檢查

00:32:04.291 --> 00:32:05.659 
也希望

00:32:05.993 --> 00:32:10.430 
大家在設計下一個應用時能努力

00:32:10.497 --> 00:32:12.566 
確保所有用戶的需求

00:32:13.233 --> 00:32:14.601 
爲了幫助大家實現這一目標

00:32:14.935 --> 00:32:17.971 
我們今天給大家介紹了
全新的輔助功能檢查

00:32:18.405 --> 00:32:23.110 
希望能讓大家更便捷地找到
診斷並修復

00:32:23.177 --> 00:32:24.811 
應用中的輔助功能問題

00:32:26.914 --> 00:32:30.083 
與開發流程無縫整合

00:32:30.651 --> 00:32:34.188 
這樣大家就能簡單地檢查和審查應用

00:32:34.254 --> 00:32:36.823 
不論是在模擬器還是在設備上運行

00:32:37.958 --> 00:32:41.628 
我們很高興告訴大家支持所有平臺

00:32:41.695 --> 00:32:45.299 
包括macOS iOS
watchOS和tvOS

00:32:46.433 --> 00:32:48.602 
我們希望這款新工具

00:32:48.669 --> 00:32:51.004 
能夠讓大家編寫出優秀的應用

00:32:51.071 --> 00:32:53.907 
讓不同能力的用戶都能使用的應用

00:32:55.943 --> 00:33:00.480 
你可以在該URL中的視頻和文本中
找到更多相關信息

00:33:01.782 --> 00:33:05.018 
我們期待收到大家的反饋
真誠希望聽到大家

00:33:05.085 --> 00:33:08.856 
對於如何更好支持
開發工作的意見以及在

00:33:08.922 --> 00:33:11.692 
使用該檢查時遇到的問題

00:33:12.459 --> 00:33:15.062 
你可以給我們傳送改進和錯誤請求

00:33:15.128 --> 00:33:18.699 
不好意思 是報告不是請求 錯誤報告

00:33:19.099 --> 00:33:21.301 
在bugreport.apple.com上

00:33:21.368 --> 00:33:24.037 
也可以加入我們的開發人員論壇

00:33:24.104 --> 00:33:27.107 
網址forums.developer.apple.com

00:33:28.609 --> 00:33:30.177 
要是你昨天錯過

00:33:30.244 --> 00:33:34.114 
我們推薦大家去回顧
並觀看這些精彩的演講視頻

00:33:34.181 --> 00:33:36.783 
包括“輔助功能新變化”的演講

00:33:36.850 --> 00:33:38.785 
和“包容性應用設計”的演講

00:33:39.653 --> 00:33:40.988 
今晚我們

00:33:41.054 --> 00:33:43.924 
在Buena Vista Park
舉行輔助功能技術和

00:33:44.258 --> 00:33:45.592 
包容性設計的討論會

00:33:45.659 --> 00:33:48.028 
不是真正的公園
而是設在一樓的會議廳

00:33:48.128 --> 00:33:49.530 
期待與大家在那兒相見

00:33:49.696 --> 00:33:52.533 
謝謝大家
盡情享受接下來的大會內容