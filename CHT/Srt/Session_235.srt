00:00:19.419 --> 00:00:24.925
構建最棒的鍛鍊應用

00:00:29.563 --> 00:00:30.531
大家好

00:00:30.731 --> 00:00:32.533
歡迎來到“構建最棒的鍛鍊應用”

00:00:32.966 --> 00:00:36.303
你們來到這裏是
因爲你們關注構建最佳用戶體驗

00:00:36.370 --> 00:00:38.338
對於你的健身應用的用戶

00:00:39.006 --> 00:00:40.340
有些用戶很狂熱

00:00:40.707 --> 00:00:42.843
他們每週花好幾個小時
在健身上

00:00:43.110 --> 00:00:46.046
他們期待響應快的
易於使用的應用

00:00:46.113 --> 00:00:47.648
能提供精確的數據

00:00:47.714 --> 00:00:50.117
並能和Apple Health
無縫銜接

00:00:51.218 --> 00:00:52.219
我是Dash

00:00:52.286 --> 00:00:54.555
我是Apple Health & Fitness
團隊的一個工程師

00:00:54.621 --> 00:00:57.591
一會我的同事Jorge
會來加入我

00:00:58.392 --> 00:01:01.562
今天 我們將要向大家展示
如何搭建一個很棒的鍛鍊應用

00:01:01.628 --> 00:01:02.863
能搏得用戶的喜愛

00:01:06.967 --> 00:01:09.403
鍛鍊是保持身體健康
的很重要的一方面

00:01:10.204 --> 00:01:12.973
它能幫助你睡眠
與更好地進行飲食決策

00:01:13.040 --> 00:01:14.141
還能清醒大腦

00:01:20.280 --> 00:01:23.917
你們中的許多人都曾
很努力地創造iOS鍛鍊應用

00:01:23.984 --> 00:01:26.954
能啓發用戶來記錄
他們的身體健康活動

00:01:27.020 --> 00:01:29.122
並追逐新的健康與健身目標

00:01:31.191 --> 00:01:33.727
藉助Apple Watch
鍛鍊應用又提升一個層次

00:01:33.794 --> 00:01:37.531
通過瞬時心率
卡路里燃燒 以及運動探測

00:01:37.598 --> 00:01:40.501
只需一個來自手腕活動的信息

00:01:41.568 --> 00:01:43.403
今天 我們主要關注

00:01:43.470 --> 00:01:46.440
如何搭建Apple Watch
上的最棒的鍛鍊應用

00:01:49.510 --> 00:01:51.745
我們先介紹後臺運行

00:01:51.945 --> 00:01:55.449
一個watchOS 3中的對於
鍛鍊應用而言顛覆性的新功能

00:01:57.618 --> 00:02:01.188
然後 我們會從頭到尾
細數一遍一次鍛鍊的週期

00:02:03.123 --> 00:02:05.626
在這之間 我們將向大家展示
你的鍛鍊應用如何能

00:02:05.692 --> 00:02:07.861
對用戶的活動排名做貢獻

00:02:10.264 --> 00:02:14.735
然後 我們會討論在iOS 10中
添加針對鍛鍊的新API

00:02:16.937 --> 00:02:19.273
最終 我們會看看一些最佳實踐

00:02:20.140 --> 00:02:21.375
那我們開始吧

00:02:23.110 --> 00:02:26.246
每一個鍛鍊應用的核心
是一個鍛鍊週期

00:02:26.313 --> 00:02:27.915
用戶可以開始可以結束

00:02:28.515 --> 00:02:31.151
所以我們先說說
HKWorkoutSession

00:02:32.085 --> 00:02:33.720
這個API用起來很簡單

00:02:33.787 --> 00:02:36.390
爲你的鍛鍊應用
提供了自動化的好處

00:02:37.424 --> 00:02:38.892
當一個鍛鍊週期開始時

00:02:38.959 --> 00:02:41.595
Apple Watch的傳感器
就會通過活動類型

00:02:41.662 --> 00:02:44.865
與某鍛鍊週期對應
來精確計算運動和卡路里

00:02:46.233 --> 00:02:48.168
這還會允許
你的應用來貢獻到

00:02:48.235 --> 00:02:49.703
用戶的活動環

00:02:50.404 --> 00:02:52.306
比如說 在一次鍛鍊期間

00:02:52.372 --> 00:02:55.742
活動會通過鍛鍊類型
來獎勵運動的分鐘數

00:02:55.809 --> 00:02:57.277
到用戶的運動環中

00:02:59.746 --> 00:03:00.914
在一次鍛鍊週期中

00:03:00.981 --> 00:03:04.017
一旦用戶喚醒設備
你的應用就會被展示

00:03:04.484 --> 00:03:06.987
用戶會很喜歡
瞬間訪問你的應用

00:03:07.054 --> 00:03:08.655
在他們使用手錶鍛鍊時

00:03:12.025 --> 00:03:15.395
最終 我們很高興地
宣佈 鍛鍊應用

00:03:15.462 --> 00:03:18.532
在watchOS 3中
現在可以設置在後臺運行

00:03:19.633 --> 00:03:21.635
讓我們多說幾句後臺運行

00:03:27.007 --> 00:03:30.077
後臺運行會大幅提高
你的鍛鍊應用的使用體驗

00:03:30.944 --> 00:03:34.214
你的應用可以在後臺
處理來自傳感器的數據

00:03:34.681 --> 00:03:38.719
比如說 你將能收到
連續的心率值

00:03:38.785 --> 00:03:40.988
即使當你的應用
沒有展示在屏幕上

00:03:42.890 --> 00:03:45.459
你還可以向用戶
提供即時的反饋

00:03:45.526 --> 00:03:47.761
在一次運動週期的任何時間

00:03:48.095 --> 00:03:51.431
你可以向用戶發送觸覺警告
來告知他們當前進度

00:03:53.867 --> 00:03:57.337
這還將允許你很快的
展示最新的數據

00:03:57.404 --> 00:03:59.806
每當用戶看一眼手腕時

00:04:02.809 --> 00:04:04.745
允許後臺運行很簡單

00:04:05.045 --> 00:04:08.549
只需要將workout-processing
添加到BackgroundModes

00:04:08.615 --> 00:04:10.817
在你的擴展Info.plist

00:04:13.820 --> 00:04:16.656
當然 爲了保持
Apple Watch的高性能

00:04:16.723 --> 00:04:18.492
你必須要限制你的後臺任務

00:04:18.559 --> 00:04:20.093
只進行必要的工作

00:04:21.461 --> 00:04:24.331
如果你的應用在後臺
使用過多的CPU資源

00:04:24.731 --> 00:04:26.733
watchOS可能會將其暫停

00:04:29.336 --> 00:04:31.672
我們建議你使用我們的工具

00:04:31.738 --> 00:04:34.174
來測量你的應用的
後臺CPU使用情況

00:04:35.075 --> 00:04:37.744
你可以使用Xcode
內置的CPU反饋工具

00:04:38.946 --> 00:04:41.014
或是instruments
中的time profiler

00:04:42.649 --> 00:04:45.619
watchOS 3還會生成一個
內含backtrace的日誌

00:04:45.686 --> 00:04:48.288
每當你的應用超過了CPU臨界值

00:04:51.024 --> 00:04:52.860
現在你設置好了後臺運行

00:04:52.926 --> 00:04:54.895
我們一步步講解
如何開啓一次鍛鍊

00:04:56.663 --> 00:04:58.665
開啓一次鍛鍊
要進行如下三步

00:05:00.200 --> 00:05:03.770
第一 你需要請求授權
來訪問HealthKit中的數據

00:05:06.473 --> 00:05:08.909
第二 你需要創建一個鍛鍊配置對象

00:05:08.976 --> 00:05:11.411
來表示你想要
開啓的鍛鍊類型

00:05:12.813 --> 00:05:15.582
第三 你需要創建並
開啓一次運動週期

00:05:15.649 --> 00:05:17.251
利用你的鍛鍊配置

00:05:17.718 --> 00:05:19.319
我們一步步來完成

00:05:22.823 --> 00:05:25.192
所有的鍛鍊應用都需要請求權限

00:05:25.259 --> 00:05:26.827
爲將健身寫入HealthKit

00:05:27.561 --> 00:05:29.429
這將允許你的應用中的鍛鍊

00:05:29.496 --> 00:05:32.132
展示在用戶的
健康和運動應用中

00:05:33.500 --> 00:05:35.502
根據你的鍛鍊應用的細節

00:05:35.569 --> 00:05:38.539
你可以請求權限
來讀取燃燒的能量

00:05:38.605 --> 00:05:40.007
距離以及心率

00:05:41.441 --> 00:05:44.378
如果你想了解
有關設置授權的更多信息

00:05:44.444 --> 00:05:46.713
我們建議你看看我們
先前的一次分享

00:05:46.780 --> 00:05:48.415
充分利用HealthKit

00:05:53.020 --> 00:05:56.123
鍛鍊週期是通過
workoutConfiguration對象創建的

00:05:57.658 --> 00:06:00.627
workoutConfiguration
包含了鍛鍊活動類型

00:06:00.694 --> 00:06:02.129
比如跑步或騎行

00:06:02.796 --> 00:06:05.365
以及位置類型
比如室內或室外

00:06:08.101 --> 00:06:11.305
你將要使用配置對象
來創建一個workoutSession

00:06:12.406 --> 00:06:13.974
然後爲了開啓這一週期

00:06:14.041 --> 00:06:17.211
只需將其傳入
HK healthStore的start方法中

00:06:20.647 --> 00:06:21.982
讓我們通過演示來嘗試一下

00:06:22.850 --> 00:06:25.352
僅限今天 我們假裝
我們都在爲一家公司工作

00:06:25.786 --> 00:06:29.489
我們最新的項目是要構建一個
基於watchOS 3的鍛鍊應用

00:06:29.823 --> 00:06:32.092
它專門爲樹懶愛好者設計

00:06:33.193 --> 00:06:34.494
它叫SpeedySloth

00:06:35.095 --> 00:06:39.199
我這裏有一個Xcode項目
已經構建好了鍛鍊應用的UI

00:06:39.633 --> 00:06:40.834
讓我們一起看一眼

00:06:49.743 --> 00:06:53.113
這個事用戶打開應用時
所看到的第一個視圖

00:06:53.514 --> 00:06:57.951
它只有兩個選擇器 一個是活動類型
可以是走路 跑步或遠足

00:06:58.986 --> 00:07:03.190
另一個是位置類型
可以是室外 室內或未知

00:07:04.591 --> 00:07:07.394
當我點擊開始按鈕時
什麼反應也沒有

00:07:07.461 --> 00:07:08.695
讓我們一起修改它

00:07:11.832 --> 00:07:13.901
你剛剛看到的視圖是被

00:07:13.967 --> 00:07:16.570
ConfigurationInterfaceContrller
類所控制

00:07:17.538 --> 00:07:20.440
我在這裏寫了一個方法
叫didTapStartButton

00:07:20.507 --> 00:07:22.643
其會在用戶
每次點擊開始按鈕時調用

00:07:22.910 --> 00:07:23.977
我要在裏面寫代碼了

00:07:28.115 --> 00:07:30.517
我要創建一個
workoutConfiguration對象

00:07:30.918 --> 00:07:34.354
我需要將活動類型
設置爲當前選擇的活動類型

00:07:34.421 --> 00:07:35.923
通過第一個選擇器

00:07:37.124 --> 00:07:38.692
然後將位置類型

00:07:39.626 --> 00:07:42.729
設置爲當前選擇的第二個選擇器
位置類型

00:07:44.198 --> 00:07:46.466
我要將workoutConfiguration
對象傳入

00:07:46.533 --> 00:07:49.736
到一個新的界面控制器
叫做WorkoutInterface Controller

00:07:50.904 --> 00:07:52.639
WorkoutInterface
Controller負責

00:07:52.706 --> 00:07:55.108
在鍛鍊週期中管理UI

00:07:55.609 --> 00:07:58.946
它還負責開啓與停止健身週期

00:07:59.546 --> 00:08:01.548
讓我們看看這個
WorkoutInterface Controller

00:08:07.187 --> 00:08:09.957
我在WorkoutInterface
Controller的喚醒方法中

00:08:10.023 --> 00:08:12.626
我知道我將收到
我們的workoutConfiguration對象

00:08:12.693 --> 00:08:14.494
作爲這個方法中的上下文對象

00:08:15.062 --> 00:08:16.830
讓我們使用它來
開啓一次鍛鍊週期

00:08:20.234 --> 00:08:22.269
首先 我要打開這個上下文對象

00:08:22.336 --> 00:08:24.771
來確保它是一個有效的
workoutConfiguration

00:08:26.573 --> 00:08:29.009
然後我要通過它
創建一次鍛鍊週期

00:08:29.076 --> 00:08:31.278
通過將其傳入HKWorkoutSession
的初始化程序中

00:08:33.679 --> 00:08:36.216
我要將我的鍛鍊週期
的代理設爲self

00:08:36.283 --> 00:08:39.352
而後我將收到回調
獲得類似狀態改變或是錯誤等信息

00:08:42.422 --> 00:08:45.425
然後我講當前時間
保存爲鍛鍊開始的時間

00:08:45.492 --> 00:08:48.562
我們在後面還將用到這個參數
當我們將鍛鍊樣本保存到HealthKit時

00:08:51.498 --> 00:08:55.402
下面 我要將workoutSession
傳入HK healthStore的開始方法

00:08:55.869 --> 00:08:56.937
我們試一試

00:09:10.717 --> 00:09:13.086
現在我們來到了配置界面控制器

00:09:13.153 --> 00:09:14.721
我就選室外步行了

00:09:14.788 --> 00:09:16.823
我要再次點擊開始按鈕

00:09:18.725 --> 00:09:20.861
所以這打開了
WorkoutInterface Controller

00:09:20.928 --> 00:09:23.597
我有預感我們的鍛鍊週期正確開始了

00:09:23.664 --> 00:09:26.633
保險起見 我們看一看
設備上的鐘表界面

00:09:27.467 --> 00:09:30.170
你可以在最上面看到
那裏有一個綠色的跑動小人圖標

00:09:30.237 --> 00:09:33.073
這代表這個手錶上的一個應用

00:09:33.140 --> 00:09:34.641
有一個活動的鍛鍊週期

00:09:35.175 --> 00:09:39.546
用戶可以在任何時候通過點擊
這個圖標進入其所屬的應用

00:09:41.715 --> 00:09:44.218
所以看起來我們的
週期的確正確地開始了

00:09:44.284 --> 00:09:45.619
讓我們回顧一下所完成的

00:09:46.153 --> 00:09:50.190
我們使用用戶信息創建了
workoutConfiguration對象

00:09:50.691 --> 00:09:53.694
然後我們使用這個configuration
創建了一個鍛鍊週期

00:09:54.027 --> 00:09:57.531
然後我們通過將其傳入
healthStore的開始方法來啓動週期

00:09:59.032 --> 00:10:01.235
現在我們有一個活躍的鍛鍊週期

00:10:01.301 --> 00:10:04.805
我們想要在鍛鍊期間
收集一些數據並展示給用戶

00:10:05.439 --> 00:10:07.608
爲了分享給大家
更多有關收集和控制的信息

00:10:07.674 --> 00:10:09.476
我要邀請我的同事Jorge到這裏來

00:10:09.543 --> 00:10:10.511
謝謝你

00:10:15.516 --> 00:10:16.717
謝謝你Dash

00:10:18.919 --> 00:10:19.887
早上好

00:10:20.420 --> 00:10:21.255
我叫Jorge

00:10:21.321 --> 00:10:23.690
我是HealthKit
團隊的一個軟件工程師

00:10:24.391 --> 00:10:27.027
我的同事Dash剛剛展示了

00:10:27.094 --> 00:10:29.897
如何配置並開啓一次鍛鍊週期

00:10:30.297 --> 00:10:34.501
現在 我們將繼續
討論你如何收集數據

00:10:34.568 --> 00:10:38.205
並在一次鍛鍊期間控制你的週期狀態

00:10:44.945 --> 00:10:47.948
我們將要調用
數據收集以及控制

00:10:48.315 --> 00:10:51.084
這些你要進行的
不同的任務

00:10:51.151 --> 00:10:54.388
從你的鍛鍊週期起始點開始

00:10:54.454 --> 00:10:56.623
一直到你決定結束

00:10:57.891 --> 00:10:59.993
讓我們看看
這些不同的步驟

00:11:02.896 --> 00:11:06.066
首先 我們將要
觀察樣本 也就是

00:11:06.133 --> 00:11:09.403
從HealthKit獲取樣本信息

00:11:09.469 --> 00:11:12.773
爲了將其合併到
你的鍛鍊中

00:11:15.409 --> 00:11:17.978
然後 我們要觀察事件

00:11:18.312 --> 00:11:21.648
事件可以被HealthKit生成

00:11:21.715 --> 00:11:25.052
或者你可以在用戶界面
中探測事件

00:11:25.118 --> 00:11:28.822
我們一會再
更深入地討論事件

00:11:31.592 --> 00:11:34.528
一旦你開啓了這兩個任務

00:11:34.595 --> 00:11:36.530
你就處在運行狀態了

00:11:37.030 --> 00:11:41.134
在任何時候
你都可以選擇暫停

00:11:41.502 --> 00:11:44.338
然後可以多次繼續鍛鍊

00:11:45.606 --> 00:11:49.276
然後 你可以決定你要

00:11:49.343 --> 00:11:51.512
結束這次鍛鍊週期

00:11:53.046 --> 00:11:56.617
所以讓我們更深入地
再研究一下這些步驟

00:11:59.753 --> 00:12:02.723
首先 我說了我們想要觀察樣本

00:12:02.789 --> 00:12:07.027
你將需要打開
一個錨對象查詢

00:12:07.094 --> 00:12:10.097
對你所感興趣的
所有數據標籤

00:12:10.531 --> 00:12:16.170
這可能是輪椅長度
或者是活動燃燒的能量

00:12:18.405 --> 00:12:22.376
當你進行此項操作時 你還需創建
updateHandler

00:12:22.442 --> 00:12:27.481
爲了能收到HealthKit的
新事件 新樣本

00:12:30.117 --> 00:12:35.055
這將允許你可以
不停地計算鍛鍊的總體數據

00:12:35.656 --> 00:12:38.692
比如總共的累計距離

00:12:38.759 --> 00:12:41.261
或是總共的累計卡路里數

00:12:41.562 --> 00:12:45.966
這樣 你就能實時更新UI了

00:12:46.600 --> 00:12:49.403
你還可以展示 比如說

00:12:49.469 --> 00:12:51.839
最新測量到的心率

00:12:55.676 --> 00:12:59.947
你可以通知用戶某些目標
比如說

00:13:00.013 --> 00:13:02.783
每當他們在一次
跑步中達到一英里

00:13:02.850 --> 00:13:05.786
或是當他們燃燒掉
第一個100卡路里

00:13:05.853 --> 00:13:07.387
在他們的划船鍛鍊中

00:13:09.089 --> 00:13:11.291
現在讓我們看點代碼

00:13:13.927 --> 00:13:16.530
因爲我們要使用
錨對象查詢

00:13:16.597 --> 00:13:20.968
你需要做的第一件事就是爲你的查詢
創建一個predicate

00:13:22.736 --> 00:13:27.174
我們將使用
你的鍛鍊開始時間

00:13:27.674 --> 00:13:32.279
你不想要那個時間之前
所生成的樣本

00:13:32.346 --> 00:13:34.848
來計算總量

00:13:37.451 --> 00:13:42.155
然後 你將需要
向本地設備索取樣本

00:13:42.222 --> 00:13:43.891
也就是當前的手錶

00:13:45.192 --> 00:13:47.094
你想要避免 比如說

00:13:47.561 --> 00:13:50.998
獲得那些保存在
手錶上的樣本

00:13:51.398 --> 00:13:54.368
作爲一次和iPhone
同步的結果

00:13:56.503 --> 00:13:59.139
最終 你將要構建
兩個predicate

00:13:59.206 --> 00:14:03.343
來組成最終的predicate
並在查詢中使用

00:14:06.313 --> 00:14:09.082
然後 你要建立一個handler

00:14:09.149 --> 00:14:12.452
爲了處理HealthKit的樣本

00:14:13.520 --> 00:14:17.057
你可以將這些樣本
累計並計算總量

00:14:17.124 --> 00:14:21.562
而後可以展示一些
更新的用戶界面

00:14:23.096 --> 00:14:26.600
現在 我們可以創建
錨對象查詢了

00:14:26.834 --> 00:14:30.337
你將要使用你所
感興趣的quantityType

00:14:30.404 --> 00:14:32.039
我們剛構建的predicate

00:14:32.105 --> 00:14:36.276
並使用我們剛剛構建的handler
作爲你最初的結果處理器

00:14:38.779 --> 00:14:41.582
你還要建立
updateHandler

00:14:42.015 --> 00:14:46.286
這樣你才能從HealthKit
獲得鍛鍊期間生成的樣本

00:14:48.255 --> 00:14:52.192
最終 你需要執行
錨對象查詢

00:14:57.664 --> 00:15:00.868
我們還提到你可以
通知你的用戶

00:15:00.934 --> 00:15:02.536
有關某些達成的目標

00:15:02.603 --> 00:15:05.105
比如說 當他們
達到了一英里

00:15:05.172 --> 00:15:07.441
或是在鍛鍊中消耗掉的
第一個100卡路里

00:15:07.708 --> 00:15:09.243
一般的做法是

00:15:09.309 --> 00:15:12.179
進行一次觸覺提示
來告知用戶當前情況

00:15:13.213 --> 00:15:17.651
與之同時 我們建議
你要同時更新用戶界面

00:15:17.718 --> 00:15:21.088
這樣才能展示達成了什麼目標

00:15:21.154 --> 00:15:24.191
很可能當用戶感受到時

00:15:24.758 --> 00:15:28.061
他們會擡起手腕
並看看屏幕

00:15:28.128 --> 00:15:29.496
這次震動是什麼意思

00:15:32.933 --> 00:15:36.303
進行一次觸覺反饋的方式
是調用play方法

00:15:36.370 --> 00:15:38.305
在WatchKit界面設備中

00:15:42.476 --> 00:15:44.144
現在讓我們說說事件

00:15:44.912 --> 00:15:47.848
事件是你要使用的時間戳

00:15:47.915 --> 00:15:50.417
來在鍛鍊中突出特定點

00:15:50.751 --> 00:15:53.987
比如說 你可以使用
暫停與繼續事件

00:15:54.054 --> 00:15:56.924
來突出那些鍛鍊狀態發生改變的點

00:16:01.862 --> 00:16:04.831
有些事件將被你的應用創建

00:16:04.898 --> 00:16:06.800
並隨後存入鍛鍊中

00:16:08.435 --> 00:16:12.406
而有些是由HealthKit
創建併發送給你的

00:16:15.375 --> 00:16:17.110
watchOS 3的新特性

00:16:17.177 --> 00:16:20.848
我們在鍛鍊週期delegate
中有didGenerate事件

00:16:21.915 --> 00:16:26.286
HealthKit要使用
該事件來向你的應用發送事件

00:16:28.121 --> 00:16:31.158
所以讓我們看看
不同種類的事件

00:16:31.225 --> 00:16:32.793
在watchOS 3中

00:16:36.797 --> 00:16:41.168
圈數和標記是
我們剛剛介紹的兩種新事件

00:16:42.669 --> 00:16:47.307
這些事件是你
需要自己創建的

00:16:47.374 --> 00:16:49.309
並存儲在你的鍛鍊中

00:16:51.111 --> 00:16:54.114
它表示你將用到的時間戳

00:16:54.181 --> 00:16:57.451
用於將你的鍛鍊展示
爲圖標或是統計數據

00:16:58.952 --> 00:17:01.655
圈數和標記有一個區別

00:17:03.490 --> 00:17:08.996
圈數代表代表劃分
你的鍛鍊的事件

00:17:09.061 --> 00:17:11.131
它們所佔的比例相同

00:17:11.464 --> 00:17:12.299
比如說

00:17:13.267 --> 00:17:17.003
如果你是在路徑中
進行跑步或騎行鍛鍊

00:17:17.404 --> 00:17:22.843
你需要每次在用戶
完成一圈時創建圈數事件

00:17:27.247 --> 00:17:29.216
標記 與之不同

00:17:29.283 --> 00:17:32.319
可以是鍛鍊中的任意節點

00:17:32.819 --> 00:17:36.490
它們不需要與距離或
其他度量綁定

00:17:37.758 --> 00:17:39.526
它們可以代表 比如說

00:17:39.860 --> 00:17:43.463
你的用戶達到山頂的瞬間

00:17:44.131 --> 00:17:48.435
或是你在路上
看到了一隻樹懶

00:17:54.975 --> 00:17:57.644
現在讓我們說說
暫停與繼續鍛鍊

00:17:59.313 --> 00:18:00.781
在一次鍛鍊週期中

00:18:00.848 --> 00:18:04.818
你的用戶可能會決定
暫時停止活動

00:18:05.519 --> 00:18:10.023
比如說 他們正在跑步
他們可能決定暫停

00:18:10.090 --> 00:18:12.092
來買一瓶水

00:18:14.094 --> 00:18:17.564
在這種情況下
你需要在用戶界面中有方法

00:18:17.631 --> 00:18:19.900
來讓你用戶
告知你這種情況

00:18:20.400 --> 00:18:21.502
當這種情況發生時

00:18:22.603 --> 00:18:26.373
你可以調用HealthKit
來暫停你的鍛鍊

00:18:27.040 --> 00:18:30.777
這將允許HealthKit
來節省手錶中的電量

00:18:30.844 --> 00:18:32.646
以及數據庫中的空間

00:18:34.348 --> 00:18:36.049
當然了 當這種情況發生時

00:18:36.116 --> 00:18:39.920
你也想忽略應用收到的任何新數據

00:18:40.587 --> 00:18:44.291
你不想積累樣本

00:18:45.259 --> 00:18:48.862
到總量中
在週期被暫停期間

00:18:51.965 --> 00:18:55.335
HealthKit會反饋
暫停與繼續調用

00:18:55.869 --> 00:18:58.505
通過生成暫停與繼續事件

00:18:58.572 --> 00:19:03.377
你需要使用鍛鍊週期
代理獲得

00:19:05.145 --> 00:19:08.682
你需要知道當你收到暫停事件時

00:19:09.249 --> 00:19:12.019
HealthKit不會再生成
新的事件了

00:19:12.085 --> 00:19:14.688
直到你繼續你的週期

00:19:19.493 --> 00:19:20.894
watchOS 3的新特性

00:19:21.261 --> 00:19:24.631
你暫停與繼續一次健身
所需要調用的函數

00:19:24.698 --> 00:19:26.500
是HKHealthStore的
一部分

00:19:26.567 --> 00:19:29.236
暫停workoutSession
和繼續workoutSession

00:19:32.105 --> 00:19:34.775
你將要收到的事件
是暫停和繼續事件

00:19:35.275 --> 00:19:39.046
你可能在之前的iOS版本
就已經知道了

00:19:43.383 --> 00:19:45.619
現在讓我們聊聊運動事件

00:19:46.687 --> 00:19:48.288
這是watchOS 3新特性

00:19:48.589 --> 00:19:51.291
運動暫停與運動繼續事件

00:19:52.459 --> 00:19:55.028
你的手錶 在一次跑步鍛鍊期間

00:19:55.462 --> 00:19:59.466
可以探測到用戶停止運動

00:19:59.533 --> 00:20:01.602
這意味着他們停止跑動了

00:20:02.402 --> 00:20:05.572
而一旦他們繼續跑動
我們就可以立即探測到

00:20:07.007 --> 00:20:08.809
當你收到這些事件時

00:20:10.544 --> 00:20:13.914
你要停止收集數據進健身中

00:20:14.181 --> 00:20:18.385
就像用戶手動暫停一樣

00:20:18.752 --> 00:20:24.057
但是 你不需要暫停你的鍛鍊週期

00:20:26.026 --> 00:20:30.697
要注意這只是在
跑步活動類型中實現了

00:20:34.768 --> 00:20:38.338
所以讓我們回到我們的
SpeedySloth演示應用

00:20:38.405 --> 00:20:41.408
看看我們如何可以
具體化這些概念

00:20:41.475 --> 00:20:42.910
我們剛剛所學到的

00:20:47.147 --> 00:20:51.251
所以我要切換到
我們的演示了

00:20:52.953 --> 00:20:54.721
爲了回放一下我們剛剛看到的

00:20:56.590 --> 00:21:00.794
我們有...我們的鍛鍊應用

00:21:00.861 --> 00:21:03.263
它已經啓動了鍛鍊週期

00:21:03.330 --> 00:21:07.935
但我們可以看到屏幕上
卡路里和距離都是0

00:21:08.435 --> 00:21:10.470
我們還沒有累加數據

00:21:10.838 --> 00:21:14.274
所以我們進入鍛鍊中
來看看如何解決這個問題

00:21:16.243 --> 00:21:19.479
回到我們的鍛鍊界面控制器類

00:21:19.613 --> 00:21:23.317
我要找被委託的回調函數

00:21:23.383 --> 00:21:25.319
當決定改變其狀態時

00:21:25.385 --> 00:21:30.624
這是workoutSession
didChangeTo toState fromState

00:21:31.291 --> 00:21:35.229
這裏我有一個switch語句
所有case都是空的

00:21:35.562 --> 00:21:38.298
我現在所感興趣的
是運行時的case

00:21:39.399 --> 00:21:41.768
每當我們從notStarted
狀態進來時

00:21:42.202 --> 00:21:46.473
這意味着你的應用
剛剛啓動了鍛鍊

00:21:48.242 --> 00:21:51.378
所以如果是在跑步
從notStarted狀態進入

00:21:51.445 --> 00:21:55.649
我要調用startAccumulating
Data函數

00:21:56.550 --> 00:21:58.252
讓我們看看這個函數

00:22:00.454 --> 00:22:04.191
我們想更新屏幕
上的這兩個標籤

00:22:04.258 --> 00:22:09.296
一個代表距離
一個代表燃燒的能量

00:22:09.363 --> 00:22:11.798
所以我們要進行兩次查詢

00:22:11.865 --> 00:22:14.434
針對這兩種數據類型

00:22:16.069 --> 00:22:17.571
進行查詢的方式

00:22:17.638 --> 00:22:20.340
和在展示中的一樣

00:22:21.241 --> 00:22:25.846
首先我們要構建一個
在查詢中使用的predicate

00:22:28.148 --> 00:22:30.450
然後 我們要
定義一個處理器

00:22:30.751 --> 00:22:35.389
在這裏 我已經有一個
實現好的過程函數

00:22:35.455 --> 00:22:38.458
它將接收這些樣本
並進行累積

00:22:38.525 --> 00:22:40.527
並更新我的用戶界面

00:22:43.897 --> 00:22:47.000
現在 我準備好創建查詢了

00:22:47.801 --> 00:22:50.504
建立updateHandler
並執行

00:22:53.707 --> 00:22:58.045
最終 我想要保存
這個查詢留用

00:22:58.111 --> 00:23:02.616
因爲由updateHandler
執行的查詢

00:23:02.683 --> 00:23:04.952
我們想在某個時刻停止它

00:23:07.187 --> 00:23:08.388
讓我們開始

00:23:10.257 --> 00:23:11.959
再一次運行我們的應用

00:23:14.461 --> 00:23:15.796
切換到模擬器

00:23:21.301 --> 00:23:22.669
好了

00:23:22.836 --> 00:23:25.005
所以我們要選擇 比如說

00:23:25.639 --> 00:23:28.008
一個室外的跑步鍛鍊

00:23:30.477 --> 00:23:31.378
好了

00:23:33.213 --> 00:23:34.214
當我們開始時

00:23:35.616 --> 00:23:38.819
我們可以看到屏幕上
的數字已經開始增長了

00:23:38.886 --> 00:23:41.588
這是因爲手錶模擬器

00:23:41.655 --> 00:23:44.157
在爲你生成
一些虛擬樣本

00:23:44.224 --> 00:23:46.326
每當你開始一次鍛鍊週期

00:23:47.694 --> 00:23:48.529
棒

00:23:48.595 --> 00:23:51.899
如果你看看屏幕
你可以看到有幾個按鈕

00:23:51.965 --> 00:23:54.067
但他們現在沒有任何工作

00:23:54.701 --> 00:24:00.040
我們已經說了你如何
能暫停併爲應用生成標記事件

00:24:00.107 --> 00:24:02.976
所以讓我們看看代碼
看看我們如何完成

00:24:05.812 --> 00:24:11.585
我在這裏有一個didTapPause
ResumeButton函數

00:24:11.652 --> 00:24:15.122
它與屏幕上的暫停按鈕綁定

00:24:15.189 --> 00:24:17.391
所以我要在這裏寫代碼

00:24:19.159 --> 00:24:22.229
首先我要要檢查
我是否有一個鍛鍊週期

00:24:22.396 --> 00:24:24.831
然後我要檢查它的狀態

00:24:25.232 --> 00:24:26.333
看它是否在運行

00:24:27.201 --> 00:24:29.570
我要暫停這次鍛鍊週期

00:24:29.870 --> 00:24:32.439
如果它是暫停的
我要將其繼續

00:24:34.107 --> 00:24:37.878
好的 這樣的結果是
你的鍛鍊週期狀態會改變

00:24:38.312 --> 00:24:39.780
如果我們退回到

00:24:43.584 --> 00:24:46.420
委託回調

00:24:46.486 --> 00:24:50.757
每當你的鍛鍊週期
變動到特定的狀態

00:24:50.824 --> 00:24:54.328
你可以在這裏看到
暫停狀態是空的

00:24:54.561 --> 00:24:56.463
所以我們要寫點代碼

00:24:56.530 --> 00:25:01.001
在這裏我已實現了
pauseAccumulatingData

00:25:01.268 --> 00:25:04.471
這個函數不再處理

00:25:04.538 --> 00:25:07.741
新的樣本 當它們
進入到我的鍛鍊中時

00:25:09.176 --> 00:25:12.145
類似地 我們要在某點
繼續這次鍛鍊

00:25:12.212 --> 00:25:17.150
所以當我們的週期
回到運行狀態時

00:25:18.285 --> 00:25:21.788
我們會收到
resumeAccumulatingData

00:25:25.292 --> 00:25:31.031
屏幕上的另一個按鍵
是Marker按鍵

00:25:31.965 --> 00:25:36.937
在這裏 我們想要創建
一個markerEvent

00:25:37.871 --> 00:25:41.909
我們剛剛創建了一個類型爲
標記並有當前日期的鍛鍊事件

00:25:42.376 --> 00:25:46.046
我們要將該事件
保存到一個本地的隊列裏

00:25:46.346 --> 00:25:48.749
爲了以後保存到鍛鍊中

00:25:49.116 --> 00:25:55.155
最終 我這裏有一個步驟
要在用戶界面通知用戶

00:25:55.222 --> 00:25:57.357
這個事件剛剛發生

00:25:59.092 --> 00:26:03.497
還要記住我們已經
實現了didGenerate event

00:26:05.599 --> 00:26:08.969
這是來自
鍛鍊週期代理的回調

00:26:09.036 --> 00:26:14.408
在這裏 我們還想保存
由HealthKit生成的事件

00:26:14.474 --> 00:26:17.177
到鍛鍊事件隊列中

00:26:18.645 --> 00:26:20.747
所以讓我們再運行一遍應用

00:26:28.155 --> 00:26:29.823
等它運行起來

00:26:33.393 --> 00:26:34.595
好了 出現了

00:26:34.661 --> 00:26:37.097
我現在要選擇室外步行

00:26:38.298 --> 00:26:41.401
等幾秒屏幕上出現數字

00:26:42.135 --> 00:26:46.039
你可以在屏幕最上看到
有一個活躍的鍛鍊

00:26:46.540 --> 00:26:50.777
每當我點擊暫停按鈕
它都進入暫停狀態

00:26:50.844 --> 00:26:55.048
你可以看到卡路里
和距離的數字沒有增長

00:26:56.049 --> 00:26:57.718
我現在可以點繼續了

00:26:58.051 --> 00:27:01.855
它進入了活動狀態
數字又開始增長了

00:27:04.324 --> 00:27:08.629
你也可以點擊Marker按鈕

00:27:09.196 --> 00:27:11.832
它會在用戶界面中進行展示

00:27:12.266 --> 00:27:16.904
很可能你的用戶所佩戴的
手錶會生成一次抖動

00:27:19.673 --> 00:27:23.143
很好 現在我們回到展示

00:27:26.146 --> 00:27:27.614
回想一下我們所看到的

00:27:30.284 --> 00:27:33.787
我們剛剛看到你如何
使用錨對象查詢

00:27:33.854 --> 00:27:38.492
來從HealthKit獲得信息
並更新鍛鍊總量

00:27:39.226 --> 00:27:42.829
然後我們實現了
暫停與繼續事件

00:27:43.730 --> 00:27:45.332
在你的鍛鍊應用中

00:27:45.399 --> 00:27:50.137
最後 我們展示瞭如何
創建一次事件並保存留用

00:27:54.208 --> 00:27:57.177
下一步是終止你的鍛鍊週期

00:27:57.244 --> 00:28:01.648
說到這裏我要邀請
我的同事Dash回來

00:28:09.223 --> 00:28:10.090
又見面了

00:28:11.091 --> 00:28:13.026
結束並保存一次鍛鍊很簡單

00:28:13.493 --> 00:28:17.264
只需幾步 你的應用
所保存的鍛鍊可以無縫地集成

00:28:17.331 --> 00:28:19.800
與活動與健康應用

00:28:20.100 --> 00:28:22.202
讓我們看看活動應用

00:28:25.839 --> 00:28:28.141
保存到HealthKit的
鍛鍊會自動展示

00:28:28.208 --> 00:28:30.244
在活動應用鍛鍊列表中

00:28:31.078 --> 00:28:34.882
從iOS 10開始
這包含了手機上的鍛鍊

00:28:35.215 --> 00:28:38.318
這意味着用戶可以在
手機應用上進行鍛鍊

00:28:38.385 --> 00:28:40.020
當他們的手錶不在身邊時

00:28:40.087 --> 00:28:42.389
他們一樣會在活動應用
中獲得積分

00:28:47.728 --> 00:28:49.363
有能量樣本的鍛鍊

00:28:49.429 --> 00:28:51.665
可以向用戶的
運動環做貢獻

00:28:51.965 --> 00:28:54.902
用戶會很喜歡從
你的應用獲得鍛鍊積分

00:28:54.968 --> 00:28:56.136
在他們的活動日中

00:28:57.838 --> 00:29:00.240
讓我們一步步學習
如何結束並保存一次鍛鍊

00:29:00.307 --> 00:29:02.543
讓它們展示在
用戶的活動應用中

00:29:03.944 --> 00:29:06.180
完成一次健身有三步

00:29:07.814 --> 00:29:09.883
第一 你要結束鍛鍊週期

00:29:12.186 --> 00:29:14.588
第二 你要將鍛鍊
保存至HealthKit

00:29:15.622 --> 00:29:19.193
第三 你將關聯的樣本
添加到保存的鍛鍊中

00:29:19.259 --> 00:29:20.627
比如燃燒的熱量和距離

00:29:21.795 --> 00:29:23.096
讓我們一個一個解決

00:29:26.366 --> 00:29:29.670
爲結束鍛鍊週期 只需調用
healthStore的結束方法

00:29:29.736 --> 00:29:31.505
並傳入鍛鍊週期

00:29:31.972 --> 00:29:34.775
這將重置設備的
傳感器至正常狀態

00:29:37.044 --> 00:29:38.846
當HealthKit成功結束鍛鍊後

00:29:38.912 --> 00:29:41.081
你的鍛鍊週期代理
會收到回調

00:29:41.148 --> 00:29:42.449
在其狀態改變方法中

00:29:43.383 --> 00:29:45.485
當你看到狀態改爲ended時

00:29:45.552 --> 00:29:47.221
就應該保存鍛鍊了

00:29:50.224 --> 00:29:53.227
你要創建一個HKWorkout樣本
來保存到HealthKit

00:29:53.660 --> 00:29:55.696
你創建鍛鍊所使用的信息

00:29:55.762 --> 00:29:58.332
將會展示在用戶的
健康與活動應用中

00:30:00.567 --> 00:30:04.104
確保你所使用的活動類型
和原先配置健身時一樣

00:30:05.906 --> 00:30:08.175
爲鍛鍊設置一個起始時間和結束時間

00:30:08.842 --> 00:30:11.078
幷包含一個鍛鍊事件隊列

00:30:11.445 --> 00:30:14.114
這個隊列可以包含
諸如暫停與繼續的事件

00:30:14.181 --> 00:30:16.817
以及Jorge剛纔討論過的
標記和圈數

00:30:20.053 --> 00:30:23.790
totalEnergyBurned
值是一個HK數值 代表總值

00:30:23.857 --> 00:30:26.326
在鍛鍊週期期間所有燃燒的能量

00:30:27.628 --> 00:30:30.397
類似地 totalDistance
值也是HK數值

00:30:30.464 --> 00:30:33.233
代表鍛鍊週期期間所運動的總長

00:30:36.003 --> 00:30:38.105
最後 不要忘了添加元數據

00:30:39.072 --> 00:30:40.974
給IndoorWorkout鍵
設一個值

00:30:41.041 --> 00:30:43.310
來爲你的鍛鍊聲明位置類型

00:30:47.047 --> 00:30:49.082
你可將該鍛鍊樣本
存至HealthKit

00:30:49.149 --> 00:30:51.919
只需要將其傳入
healthStore的保存方法

00:30:53.153 --> 00:30:55.255
當你看到它保存成功時

00:30:55.322 --> 00:30:57.424
就可以向鍛鍊添加樣本了

00:30:57.491 --> 00:30:59.193
讓我們說說添加樣本

00:31:02.062 --> 00:31:03.830
當你向一次鍛鍊添加樣本時

00:31:03.897 --> 00:31:07.701
HealthKit會在這些樣本
和鍛鍊之間創建一個鏈接

00:31:09.169 --> 00:31:11.672
應用可以在其後
查詢所有的樣本

00:31:11.738 --> 00:31:13.740
與指定的鍛鍊對應

00:31:14.875 --> 00:31:16.443
這將很有用 如果你想繪圖

00:31:16.510 --> 00:31:18.745
在鍛鍊時間線中
描述細節數據

00:31:21.782 --> 00:31:24.251
想鍛鍊添加能量樣本很必要

00:31:24.318 --> 00:31:26.887
如果你想讓用戶
在活動運動環中獲得積分

00:31:27.421 --> 00:31:29.990
活動會使用這些關聯的能量樣本

00:31:30.057 --> 00:31:31.592
來計算環中的積分

00:31:36.797 --> 00:31:40.267
最終 確保你先前保存在
鍛鍊樣本中的總額

00:31:40.634 --> 00:31:42.970
與這些關聯樣本相符

00:31:45.939 --> 00:31:49.443
爲了向鍛鍊添加樣本
只需要傳入一個HK樣本隊列

00:31:49.510 --> 00:31:52.246
到healthStore的
addSamplesToWorkout方法

00:31:55.682 --> 00:31:59.019
讓我們現更新SpeedySloth
添加結束與保存鍛鍊功能

00:32:00.320 --> 00:32:01.722
我們上一次使用應用時

00:32:01.788 --> 00:32:04.424
Jorge展示瞭如何收集
數據來展示給用戶

00:32:05.058 --> 00:32:07.895
以及如何通過暫停與繼續
控制這個事件

00:32:08.529 --> 00:32:11.532
你可能已經發現在
WorkoutInterfaceController底部

00:32:11.598 --> 00:32:13.367
有一個叫
End Workout的按鈕

00:32:13.967 --> 00:32:15.936
當我點擊它時沒有反應

00:32:16.003 --> 00:32:17.171
我們現在要進行修改

00:32:18.739 --> 00:32:20.641
我又回到了鍛鍊界面控制器

00:32:21.208 --> 00:32:23.443
我有一個方法叫
didTapEndButton

00:32:24.211 --> 00:32:25.345
讓我們向裏面寫代碼

00:32:28.982 --> 00:32:31.852
首先 我要保存當前時間
作爲workoutEndDate

00:32:31.919 --> 00:32:34.555
我們稍後創建鍛鍊樣本時
會用到它

00:32:37.224 --> 00:32:39.626
接下來 我要調用
healthStore的結束方法

00:32:39.693 --> 00:32:41.595
並傳入鍛鍊週期

00:32:43.297 --> 00:32:45.065
當healthKit成功結束週期後

00:32:45.132 --> 00:32:47.668
我們在狀態變更方法
中就會收到一個回調

00:32:48.368 --> 00:32:50.370
我現要回到
狀態變更方法

00:32:53.874 --> 00:32:55.275
Jorge剛纔已經展示

00:32:55.342 --> 00:32:57.444
如何處理運行與暫停狀態

00:32:58.412 --> 00:33:00.480
現在我們想處理
這個終止狀態

00:33:03.417 --> 00:33:05.986
我們想在鍛鍊週期結束時
完成兩項任務

00:33:06.286 --> 00:33:08.355
第一 我想結束所有的查詢

00:33:09.857 --> 00:33:11.291
這個方法已經實現了

00:33:11.358 --> 00:33:14.928
它會遍歷開放查詢的隊列
並逐一停止

00:33:16.964 --> 00:33:19.666
然後 我們想將鍛鍊保存
讓我們現在實現它

00:33:27.374 --> 00:33:30.143
我要創建一個鍛鍊樣本
我要使用活動類型

00:33:30.210 --> 00:33:31.879
直接從鍛鍊配置獲得

00:33:33.747 --> 00:33:37.284
然後我將開始時間與
結束時間設置爲剛纔保存的值

00:33:39.386 --> 00:33:40.988
我添加了
workoutEvents對列

00:33:41.054 --> 00:33:43.757
Jorge展示瞭如何
在鍛鍊週期期間進行構建

00:33:47.361 --> 00:33:49.296
我要使用totalEnergyBurned
的數值

00:33:49.363 --> 00:33:53.467
以及在此期間我們從數據查詢
中積累的totalDistance

00:33:55.903 --> 00:33:58.338
最終 我要添加針對
描述信息的代碼字典

00:33:58.405 --> 00:34:01.308
我要給室內鍛鍊字段賦值

00:34:01.375 --> 00:34:04.011
基於我們鍛鍊配置的位置類型

00:34:07.714 --> 00:34:10.617
我要將鍛鍊樣本
傳入healthStore的保存方法

00:34:10.684 --> 00:34:12.119
它會將其存到HealthKit中

00:34:13.554 --> 00:34:15.522
當我們看到它保存成功後

00:34:15.822 --> 00:34:17.424
我將要調用
addSamplesToWorkout

00:34:17.491 --> 00:34:19.893
這個函數就在這裏
我們現在就實現它

00:34:24.998 --> 00:34:27.266
我想要想這次鍛鍊
添加兩個樣本

00:34:27.333 --> 00:34:30.137
一個作爲totalEnergyBurned
另一個是totalDistance

00:34:33.072 --> 00:34:35.708
對於totalEnergyBurned
我創建了一個quantitySample

00:34:36.176 --> 00:34:38.879
我使用的數值類型
是activeEnergyBurned

00:34:39.947 --> 00:34:42.748
然後我要傳入同一個
totalEnergyBurned數量

00:34:42.815 --> 00:34:44.551
與剛纔我在鍛鍊樣本中使用的相同

00:34:45.085 --> 00:34:48.355
這意味着將有一個
很大的能量消耗樣本

00:34:48.422 --> 00:34:50.389
這跨越了鍛鍊的整個週期

00:34:50.991 --> 00:34:54.561
如果你想要的話 你可以
創建多個更小的能量燃燒樣本

00:34:54.628 --> 00:34:56.630
只需保證它們加起來和

00:34:56.697 --> 00:34:58.532
你在HKWorkout樣本中
的值相同

00:35:03.103 --> 00:35:05.272
我爲totalDistanceSample
進行同樣操作

00:35:06.340 --> 00:35:08.909
我要使用的數值類型是
distanceWalkingRunning

00:35:09.243 --> 00:35:11.178
HealthKit有三種距離類型

00:35:11.245 --> 00:35:13.881
我要用WalkingRunning
因爲我們的鍛鍊應用只處理

00:35:13.947 --> 00:35:15.349
走動與跑動距離

00:35:16.016 --> 00:35:17.918
如果你要構建騎行鍛鍊應用

00:35:17.985 --> 00:35:20.087
你應當使用騎行距離

00:35:20.521 --> 00:35:22.723
我們剛剛添加了一種
新的距離類型

00:35:22.789 --> 00:35:25.859
輪椅距離 你可以使用它
進行基於輪椅的鍛鍊活動

00:35:29.296 --> 00:35:32.299
我要使用和剛纔鍛鍊樣本
一樣的總距離數值

00:35:32.733 --> 00:35:35.002
我要設置同樣的
鍛鍊開始和結束時間

00:35:35.068 --> 00:35:38.405
再一次 這是一個很大的
距離樣本 跨越整個鍛鍊

00:35:41.275 --> 00:35:43.343
我將這兩個樣本添加到鍛鍊

00:35:43.410 --> 00:35:45.546
通過將它們放在一個
隊列中並傳入

00:35:45.612 --> 00:35:47.281
“添加樣本至鍛鍊”方法
在healthStore中

00:35:49.316 --> 00:35:51.351
當我看到添加成功時

00:35:51.418 --> 00:35:54.288
我知道我這次鍛鍊的所有
數據都保存到HealthKit中了

00:35:54.821 --> 00:35:56.823
現在我想將鍛鍊展示給用戶

00:36:00.027 --> 00:36:02.529
我通過傳入HKWorkout
對象來完成

00:36:02.596 --> 00:36:05.699
傳給一個新的界面控制器叫
SummaryInterface Controller

00:36:06.466 --> 00:36:08.402
SummaryInterface Controller
已經寫好了 它知道

00:36:08.468 --> 00:36:11.805
如何在一個總覽視圖中
向用戶展示一個HKWorkout

00:36:14.107 --> 00:36:17.411
我要再次運行應用
我們將看到如何結束鍛鍊

00:36:33.026 --> 00:36:34.728
我們再一次選擇室外跑步

00:36:34.795 --> 00:36:35.896
我要點擊Start

00:36:37.064 --> 00:36:39.399
我們稍等片刻
數據開始收集

00:36:44.638 --> 00:36:46.440
好了我將點擊
結束鍛鍊按鈕

00:36:46.507 --> 00:36:47.641
因爲我們已經有些數據了

00:36:49.743 --> 00:36:53.046
我們的鍛鍊週期結束了
我們的樣本已存到HealthKit

00:36:53.113 --> 00:36:56.016
這裏是總覽視圖
向我們展示鍛鍊樣本

00:36:57.050 --> 00:36:59.920
爲確保它的確成功
保存到了HealthKit

00:36:59.987 --> 00:37:02.623
讓我們看看iPhone
模擬器上的Health應用

00:37:05.325 --> 00:37:07.961
現在我在Health應用
的Workout視圖中

00:37:08.462 --> 00:37:11.265
我要點擊顯示全部數據
而後會看到一個鍛鍊列表

00:37:13.700 --> 00:37:16.937
在頂端你可以看到
一個在11:36剛剛完成的鍛鍊

00:37:17.004 --> 00:37:18.005
這就是我們的鍛鍊

00:37:18.338 --> 00:37:20.774
我要點擊它來
獲得更多信息

00:37:22.643 --> 00:37:24.611
你可以看到這是
一個跑步鍛鍊

00:37:24.678 --> 00:37:27.948
它有近乎13秒的時長
這裏有起始和結束時間

00:37:28.015 --> 00:37:30.384
這是我們鍛鍊樣本中的所有信息了

00:37:30.484 --> 00:37:33.820
你甚至可以在這裏看到元數據
說這不是室內活動

00:37:34.788 --> 00:37:36.723
在底端你可以看到兩個樣本

00:37:36.790 --> 00:37:38.492
我們剛纔將其與鍛鍊關聯

00:37:38.825 --> 00:37:41.128
我們幾乎總共燃燒了2卡路里

00:37:41.195 --> 00:37:42.129
幹得漂亮

00:37:42.663 --> 00:37:45.799
我們跑了一英里的百分之一

00:37:46.967 --> 00:37:49.736
所以看起來所有信息
都成功保存到了HealthKit

00:37:50.270 --> 00:37:51.605
讓我們回看剛纔做了什麼

00:37:54.374 --> 00:37:57.578
我們通過對healthStore
調用end結束了鍛鍊週期

00:37:58.779 --> 00:38:01.882
然後我們在狀態變更
代理方法中等待回調

00:38:02.316 --> 00:38:04.418
當我們看到狀態
改變爲end後

00:38:04.484 --> 00:38:06.920
我們創建了一個鍛鍊樣本
並保存至HealthKit

00:38:07.754 --> 00:38:10.524
然後 我們創建了兩個樣本
來添加到鍛鍊中

00:38:10.591 --> 00:38:13.093
一個爲了totalEnergyBurned
另一個作爲totalDistance

00:38:13.694 --> 00:38:16.697
要記住有必要關聯
燃燒能量的樣本

00:38:16.763 --> 00:38:19.266
這樣用戶就可以在
活動環中獲得積分

00:38:21.602 --> 00:38:24.571
我們剛剛構建了一整個
watchOS 3的鍛鍊應用

00:38:24.638 --> 00:38:25.706
就是這麼簡單

00:38:33.514 --> 00:38:37.384
現在watchOS中的每個應用
都有一個父應用

00:38:37.718 --> 00:38:41.889
我們在iOS 10中專門爲
鍛鍊應用添加了一些API

00:38:42.556 --> 00:38:46.226
爲了向大家介紹這些新API
我要邀請Jorge回到這裏

00:38:46.426 --> 00:38:47.261
謝謝你

00:38:53.967 --> 00:38:54.801
謝謝你 Dash

00:38:58.939 --> 00:39:03.443
你們都爲iPhone開發了
很棒的應用

00:39:03.810 --> 00:39:08.782
鍛鍊應用不只是你的手錶

00:39:09.349 --> 00:39:11.185
從iOS 10開始

00:39:11.251 --> 00:39:14.721
我們提供了新的API
供大家使用

00:39:14.788 --> 00:39:18.258
來在你的iPhone應用中
實現新的功能

00:39:21.995 --> 00:39:27.935
我們提到了每一個手錶
應用都有一個iPhone父應用

00:39:28.902 --> 00:39:35.209
你可以利用這一點
爲你的用戶提供很棒的體驗

00:39:36.877 --> 00:39:39.546
你可以使用
WatchConnectivity

00:39:39.613 --> 00:39:41.949
在兩個應用間通信

00:39:42.115 --> 00:39:45.052
這是實現新特性
很有效的方法

00:39:45.118 --> 00:39:47.888
當你的手錶處在健身狀態

00:39:48.355 --> 00:39:50.023
且應用在運行

00:39:52.426 --> 00:39:54.494
現在我們有了後臺運行

00:39:54.561 --> 00:39:57.965
這樣你的應用可以在任意時刻運行

00:39:58.031 --> 00:40:02.970
這允許你實現很棒的新功能

00:40:04.505 --> 00:40:07.140
但是 爲了實現這一點

00:40:07.207 --> 00:40:10.611
你需要將手錶調到健身狀態

00:40:12.246 --> 00:40:17.017
從iOS 10開始
我們提供功能

00:40:17.084 --> 00:40:22.523
讓你從iPhone中開啓一次鍛鍊

00:40:25.092 --> 00:40:29.329
這就是 你的手錶將
進入鍛鍊狀態

00:40:29.396 --> 00:40:33.467
用戶不需要幹預其用戶界面

00:40:34.535 --> 00:40:37.204
現在 讓我們看看這怎麼完成

00:40:39.740 --> 00:40:41.175
在你的iPhone應用中

00:40:41.909 --> 00:40:45.579
你可以選擇活動類型和位置

00:40:45.646 --> 00:40:48.749
你需要創建一個
workoutConfiguration對象

00:40:49.917 --> 00:40:51.185
一旦完成

00:40:52.186 --> 00:40:54.621
你將workoutConfiguration對象

00:40:54.688 --> 00:40:56.156
發送到手錶應用中

00:40:56.690 --> 00:40:59.760
如果手錶應用沒有運行

00:40:59.826 --> 00:41:01.328
就會自動運行

00:41:03.630 --> 00:41:09.002
現在 鍛鍊應用可以獲取那個配置對象

00:41:09.069 --> 00:41:10.737
並開啓一次鍛鍊週期

00:41:13.907 --> 00:41:15.409
爲了使之正常運行

00:41:15.475 --> 00:41:18.445
你需要進入
鍛鍊運行後臺模式

00:41:18.512 --> 00:41:20.814
我們在展示的前一段提到過

00:41:22.649 --> 00:41:24.852
現在讓我們看看代碼

00:41:26.753 --> 00:41:28.488
你可能對這段代碼很熟悉

00:41:28.555 --> 00:41:30.958
因爲我們在展示的前面看到過

00:41:31.024 --> 00:41:35.429
每當你要在手錶上開啓一次
鍛鍊時都需要這麼做

00:41:37.097 --> 00:41:40.067
你先創建一個workout
Configuration對象

00:41:40.601 --> 00:41:45.172
然後使用它創建一個
workoutSession與startDate

00:41:48.175 --> 00:41:52.479
在這裏 我們想將這些
代碼分成兩部分

00:41:53.981 --> 00:41:56.817
第一部分是創建
workoutConfiguration

00:41:56.884 --> 00:41:59.152
會在iPhone應用中執行

00:42:00.220 --> 00:42:04.758
創建workoutSession與
startDate將在手錶應用上執行

00:42:07.528 --> 00:42:09.763
爲了完成這一點
你需要進行通信

00:42:09.830 --> 00:42:11.431
在兩個應用之間

00:42:11.732 --> 00:42:15.536
所以讓我們先看看
iPhone應用中的代碼

00:42:18.338 --> 00:42:21.742
首先 你需要檢測
WatchConnectivity

00:42:21.808 --> 00:42:23.510
看看有沒有一個
激活的會話

00:42:24.178 --> 00:42:26.813
以及手錶應用是否安裝

00:42:28.782 --> 00:42:32.619
完成之後 你就可以創建
workoutConfiguration了

00:42:34.922 --> 00:42:38.192
下一步 爲了將
workoutConfiguration傳給

00:42:38.258 --> 00:42:40.093
你的手錶應用

00:42:40.160 --> 00:42:44.264
你將要調用iOS 10中的
新方法 startWatchApp

00:42:44.331 --> 00:42:45.933
使用workoutConfiguration

00:42:46.166 --> 00:42:48.635
這是HK healthStore
的新方法

00:42:49.169 --> 00:42:54.541
這會將你的workoutConfiguration
傳送到手錶應用中

00:42:58.712 --> 00:43:01.215
現在讓我們看看
手錶應用代碼

00:43:01.682 --> 00:43:04.618
你需要用workoutConfiguration

00:43:05.285 --> 00:43:07.354
來創建一個鍛鍊週期並開始

00:43:08.755 --> 00:43:14.061
爲此 你需要實現處理
workoutConfiguration

00:43:14.127 --> 00:43:16.530
這是一個新函數

00:43:16.797 --> 00:43:20.200
是WatchKit
ExtensionDelegate的一部分

00:43:20.734 --> 00:43:22.603
通過實現這個函數

00:43:22.669 --> 00:43:26.073
你可以獲取你的
workouConfiguration並可以開始

00:43:27.541 --> 00:43:32.045
現在讓我們回到我們的
SpeedySloth演示應用

00:43:32.279 --> 00:43:38.085
來看看我們我們如何
從iPhone開始我們的建設

00:43:44.858 --> 00:43:45.726
所以

00:43:47.761 --> 00:43:50.864
讓我們看看iPhone模擬器

00:43:50.931 --> 00:43:52.466
我將要創建健康應用

00:43:53.367 --> 00:43:55.636
這裏我有iPhone版本

00:43:55.702 --> 00:43:57.571
的SpeedySloth應用

00:43:58.038 --> 00:43:59.373
我要啓動它

00:43:59.439 --> 00:44:01.208
你可以看到用戶界面

00:44:01.275 --> 00:44:04.611
和手錶上的非常相似

00:44:05.612 --> 00:44:09.650
我們的用戶界面可以讓你

00:44:09.716 --> 00:44:12.553
選擇活動類型和位置類型

00:44:12.619 --> 00:44:16.323
我們還有一個Start按鈕
現在沒有任何功能

00:44:17.391 --> 00:44:20.761
所以我們看看代碼

00:44:20.827 --> 00:44:24.264
來看看我們如何實現該方法

00:44:25.532 --> 00:44:30.337
我要切換到iPhone應用的代碼

00:44:30.704 --> 00:44:34.808
我有一個配置視圖控制器

00:44:35.075 --> 00:44:38.178
這個類負責處理我們
剛剛看到的界面

00:44:38.712 --> 00:44:40.380
在didTapStart按鈕中

00:44:40.881 --> 00:44:44.618
我們要實現我們的方法

00:44:47.087 --> 00:44:51.859
首先 我們要創建
workoutConfiguration對象

00:44:52.192 --> 00:44:54.294
使用選擇的
活動類型和位置類型

00:44:54.361 --> 00:44:58.999
這和在手錶應用上的代碼一樣

00:45:00.767 --> 00:45:05.205
下一步 我們要獲取
workoutViewController

00:45:05.272 --> 00:45:06.740
爲了storyboard

00:45:06.807 --> 00:45:11.411
在健身持續期間
我們要展示這個UI

00:45:13.881 --> 00:45:16.583
我們要設置
workoutViewController的屬性

00:45:16.650 --> 00:45:19.853
爲了傳入我們創建的
workoutConfiguration

00:45:20.587 --> 00:45:24.992
最終 我們要展示用戶界面

00:45:26.360 --> 00:45:29.296
讓我們看看
workoutViewController的代碼

00:45:29.363 --> 00:45:31.932
看看它在做什麼

00:45:34.201 --> 00:45:37.804
在viewDidLoad方法中
我們看到我們做的第一件事

00:45:37.871 --> 00:45:40.007
是初始化手錶連接

00:45:40.073 --> 00:45:43.510
只需要獲取WatchConnectivity
這個會話

00:45:43.577 --> 00:45:45.312
並確保它已經初始化

00:45:47.481 --> 00:45:51.752
然後 我們要調用
startWatchApp函數

00:45:54.221 --> 00:45:55.756
startWatchApp函數...

00:45:58.258 --> 00:46:01.595
會首先檢查我們是否有有效的
workoutConfiguration

00:46:02.329 --> 00:46:05.032
當我們有有效的
WatchConnectivity會話後

00:46:05.966 --> 00:46:08.569
這是和在幻燈片中一樣的代碼

00:46:08.635 --> 00:46:11.371
我們首先檢查連接週期

00:46:11.438 --> 00:46:14.508
被激活 以及手錶應用已經安裝

00:46:16.243 --> 00:46:18.212
最終 我們要調用

00:46:18.278 --> 00:46:21.148
startWatchApp
使用workoutConfiguration

00:46:22.182 --> 00:46:27.020
很棒 現在我們要進入
WatchKit擴展

00:46:27.087 --> 00:46:30.891
來確保我們能獲取到
workoutConfiguration對象

00:46:31.258 --> 00:46:34.595
所以 我們要進入鍛鍊——

00:46:34.895 --> 00:46:37.965
進入手錶應用的
ExtensionDelegate

00:46:40.400 --> 00:46:43.871
並使用同樣的代碼來處理
workoutConfiguration

00:46:44.638 --> 00:46:48.275
當我們進行這一操作時
我們需要封裝workoutConfiguration

00:46:48.342 --> 00:46:53.747
在一個上下文對象中 並傳入
Workout InterfaceController

00:46:53.814 --> 00:46:56.817
這個用戶界面與

00:46:56.884 --> 00:47:00.821
我們每次在手錶上啓動鍛鍊
時所展示的一樣

00:47:04.057 --> 00:47:09.830
還有一件事

00:47:12.332 --> 00:47:15.536
如果我們進入
Workout InterfaceController

00:47:16.403 --> 00:47:18.172
每當一個應用

00:47:18.972 --> 00:47:21.975
讓我們看看 每當
一個活動的鍛鍊週期狀態改變時

00:47:22.309 --> 00:47:25.646
我們要調用這個
updateState函數

00:47:25.913 --> 00:47:28.582
這個函數我們已經實現了

00:47:29.016 --> 00:47:33.287
在我們的代碼中
它只是獲取週期的目前狀態

00:47:33.353 --> 00:47:35.789
並通過WatchConnectivity發送

00:47:35.856 --> 00:47:37.758
給iPhone應用

00:47:39.793 --> 00:47:44.031
所以 現在讓我們切換到
iPhone應用中的代碼

00:47:47.668 --> 00:47:48.635
並看一看

00:47:54.007 --> 00:47:54.908
在這裏

00:47:54.975 --> 00:47:59.012
我們要選擇室外步行鍛鍊

00:47:59.613 --> 00:48:03.217
當我點擊Start按鈕時
你可以看到鍛鍊週期已經開始

00:48:03.283 --> 00:48:05.052
如果你回到手錶模擬器

00:48:05.118 --> 00:48:08.722
你可以看到應用啓動

00:48:09.890 --> 00:48:12.059
回到iPhone應用
你可以看到現在

00:48:12.492 --> 00:48:14.361
它處在運行狀態
如果你不想這樣

00:48:14.428 --> 00:48:17.464
我就可以將鍛鍊週期暫停

00:48:18.365 --> 00:48:20.801
你就可以看到另一端
的狀態已經更新

00:48:21.401 --> 00:48:23.237
而後我們就可以將其終止了

00:48:23.570 --> 00:48:28.141
現在在另一端鍛鍊狀態也已經改變

00:48:37.818 --> 00:48:40.787
回放剛纔所說
我們展示了你如何可以

00:48:42.489 --> 00:48:45.259
在iPhone應用中寫點代碼

00:48:45.325 --> 00:48:49.496
來讓你的手錶進入鍛鍊狀態

00:48:49.563 --> 00:48:53.901
任何時候用戶都不需要
操作手錶

00:48:57.971 --> 00:49:00.407
現在 讓我們聊聊最基本的實踐

00:49:00.474 --> 00:49:05.479
我們希望你能在開發鍛鍊應用時
能遵守以下幾點

00:49:09.016 --> 00:49:12.252
第一就是我們想讓你確保

00:49:12.319 --> 00:49:16.223
你的手錶應用依然可以運行

00:49:16.290 --> 00:49:21.895
當你的手錶與iPhone失聯時

00:49:24.031 --> 00:49:27.434
比如 一個用戶可能希望

00:49:27.935 --> 00:49:30.204
啓動一次鍛鍊週期

00:49:30.938 --> 00:49:34.575
並離開住處 出去跑步
不帶着iPhone

00:49:35.676 --> 00:49:40.347
在這種情況下
我們不希望你停止鍛鍊

00:49:43.684 --> 00:49:50.290
所以 你要做的第一件事就是
讓你的鍛鍊週期處於活動狀態

00:49:50.958 --> 00:49:54.962
及時你與iPhone失去連接

00:49:58.398 --> 00:50:01.068
在這種情況下的另一個
很有趣的點是

00:50:01.134 --> 00:50:03.704
你可以使用HealthKit路程

00:50:03.770 --> 00:50:08.275
因爲HealthKit可以生成
路程樣本

00:50:08.342 --> 00:50:11.645
即使沒有GPS

00:50:16.350 --> 00:50:18.752
還有 我們說過

00:50:20.487 --> 00:50:24.591
你的用戶可以開始健身

00:50:24.658 --> 00:50:28.128
從他們的iPhone或
Apple Watch

00:50:29.496 --> 00:50:32.766
我建議你讓用戶來選擇

00:50:33.166 --> 00:50:36.336
到底是想從哪個設備開始鍛鍊

00:50:41.074 --> 00:50:46.613
還有一些其他建議
包括展示歷史鍛鍊

00:50:48.048 --> 00:50:51.385
如果你這麼做
展示所有來源的鍛鍊

00:50:51.451 --> 00:50:53.487
不但會幫助你自己的應用

00:50:54.454 --> 00:50:57.357
我們還想讓你展示

00:50:57.424 --> 00:50:59.393
其他應用生成的鍛鍊

00:51:02.462 --> 00:51:07.868
如果你這麼做
不要忘了觀察被刪除的對象

00:51:08.836 --> 00:51:11.738
不要展示一些鍛鍊

00:51:11.805 --> 00:51:14.241
而它們已經從HealthKit
數據庫中移除

00:51:18.345 --> 00:51:22.516
所以 總結今天的展示
我們想讓你學到三件事

00:51:22.583 --> 00:51:24.685
從今天的展示中

00:51:25.953 --> 00:51:28.589
第一 我們學習了後臺運行

00:51:28.655 --> 00:51:33.160
這是一個很好的方法
來讓你的應用

00:51:33.460 --> 00:51:35.162
不停地更新

00:51:35.629 --> 00:51:40.801
還要讓你的用戶界面有反饋性

00:51:44.505 --> 00:51:47.541
第二 你學到了你可以貢獻

00:51:47.608 --> 00:51:52.012
到活動環
通過向鍛鍊添加樣本

00:51:52.913 --> 00:51:57.117
不論是在手錶還是
在iPhone應用上

00:52:00.120 --> 00:52:04.625
最終 第三點
我們學到了你如何可以開始鍛鍊

00:52:04.691 --> 00:52:08.161
從手錶或是iPhone中

00:52:10.264 --> 00:52:14.268
所以我們希望大家可以
回到家或是辦公室

00:52:14.735 --> 00:52:18.205
看看你的代碼
並應用上今天所學到的

00:52:18.272 --> 00:52:21.375
來實現你的應用中的很棒的功能

00:52:23.610 --> 00:52:26.313
如需更多信息
你可以訪問這個網站

00:52:26.380 --> 00:52:28.715
你可以找到這次展示的視頻

00:52:30.651 --> 00:52:32.052
我們還有其他關聯的視頻

00:52:32.119 --> 00:52:35.289
一個是HealthKit做的
另一個是Core Motion做的

00:52:35.355 --> 00:52:37.691
如果你錯過這些展示
你可以上網觀看

00:52:38.125 --> 00:52:43.197
還有些幾年前的視頻
也與今天的主題相關

00:52:45.199 --> 00:52:46.400
這就是今天的全部了

00:52:46.733 --> 00:52:47.801
感謝大家

00:52:47.868 --> 00:52:49.036
祝大家今天過得愉快