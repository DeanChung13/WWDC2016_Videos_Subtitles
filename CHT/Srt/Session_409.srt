00:00:20.153 --> 00:00:26.260
高級測試和持續集成

00:00:36.470 --> 00:00:37.804
大家下午好

00:00:38.972 --> 00:00:39.940
我叫Zoltan

00:00:40.607 --> 00:00:43.010
等下我的同事Eric也會上臺

00:00:44.444 --> 00:00:46.513
我們都是Xcode組的工程師

00:00:49.516 --> 00:00:53.320
如今的軟件開發
很像指揮管絃樂隊

00:00:54.454 --> 00:00:57.357
你和我維護一系列測試

00:00:57.824 --> 00:01:00.460
如果它們中的一個
運行不正常

00:01:00.994 --> 00:01:04.932
我們需要快速理解和糾正它

00:01:07.334 --> 00:01:12.439
可能你是個測試大師
有成百上千個測試

00:01:13.574 --> 00:01:19.580
Xcode有工具和技術來指揮
即使是最大型的測試程序組

00:01:20.514 --> 00:01:22.516
今天我們將向你展示

00:01:24.918 --> 00:01:26.720
首先我們要介紹一些概念

00:01:26.787 --> 00:01:29.156
在之前的演講裏還沒有被介紹

00:01:30.257 --> 00:01:34.728
然後我們會介紹
一些Xcode中的新特性

00:01:36.763 --> 00:01:38.632
以及Xcode Server

00:01:40.400 --> 00:01:43.504
尤其是可配置集成用戶

00:01:45.305 --> 00:01:48.242
然後我們會以xcodebuild
的新特性做爲結束

00:01:49.743 --> 00:01:50.878
讓我們開始吧

00:01:58.151 --> 00:01:59.920
做爲測試的簡要重述

00:02:00.287 --> 00:02:02.756
測試有4個特徵

00:02:03.957 --> 00:02:05.559
XCTest

00:02:07.728 --> 00:02:10.264
你用來測試的框架

00:02:11.298 --> 00:02:14.301
針對Objective-C
和Swift

00:02:14.935 --> 00:02:19.206
你的測試被編譯成一些束

00:02:21.675 --> 00:02:25.412
Xcode是編寫測試的IDE

00:02:26.013 --> 00:02:30.250
你還可以在開發時
運行單獨的測試

00:02:33.287 --> 00:02:36.023
你還可以在Xcode裏查看報告

00:02:36.223 --> 00:02:39.293
來自本地運行
和Xcode Server的測試

00:02:41.361 --> 00:02:43.163
關於Xcode Server

00:02:43.797 --> 00:02:47.267
是你的測試的
連續集成解決方案

00:02:48.535 --> 00:02:51.338
你設立bot來
週期性的運行測試

00:02:52.606 --> 00:02:55.142
Xcode Server
會爲你生成報告

00:02:56.310 --> 00:02:59.046
如果發生錯誤
它會通知你

00:03:00.113 --> 00:03:03.150
這是你追蹤項目的一個好方法

00:03:06.620 --> 00:03:09.590
Xcode Server是在
xcodebuild的基礎上建立的

00:03:10.657 --> 00:03:13.861
可在命令行使用xcodebuild

00:03:14.161 --> 00:03:17.898
你可以在終端運行測試
並查看結果

00:03:21.602 --> 00:03:24.404
Xcodebuild是構建部件

00:03:24.471 --> 00:03:28.008
對於我們在後面會看到的
定製連續集成系統的構建部件

00:03:30.110 --> 00:03:33.647
你可以在我們之前的演講裏
瞭解更多關於這4個特徵的信息

00:03:34.147 --> 00:03:38.785
但是今天我們想看一些
之前沒有涉及的概念

00:03:39.419 --> 00:03:41.488
我們想把你帶到幕後

00:03:41.889 --> 00:03:44.458
向你展示
你的測試是怎樣運行的

00:03:46.460 --> 00:03:49.763
要這樣做
最好想象一個時間線

00:03:51.765 --> 00:03:55.435
當你的測試被編譯後
它們必須被託管

00:03:56.136 --> 00:03:59.206
這使得測試首先被運行

00:04:00.474 --> 00:04:02.276
一旦這些測試在運行

00:04:02.476 --> 00:04:04.611
你可以看到詳細的測試進展

00:04:05.012 --> 00:04:08.515
用一個叫監視的技術

00:04:08.949 --> 00:04:12.452
我們來看看這2個概念
託管和監視

00:04:13.220 --> 00:04:14.655
讓我們首先來看看託管

00:04:16.023 --> 00:04:18.091
根據你是否有單元測試或UI測試

00:04:18.158 --> 00:04:21.962
託管的故事不同

00:04:23.463 --> 00:04:29.203
你的測試束被直接載入到
你的應用中

00:04:29.870 --> 00:04:34.174
在這種情況下
我們稱你的應用爲寄主應用

00:04:36.210 --> 00:04:40.314
但是對於你的UI測試
你的測試束將被載入UI測試運行器

00:04:40.380 --> 00:04:44.952
和你的應用是分離的

00:04:46.153 --> 00:04:48.522
在這種情況下
你的應用被稱爲

00:04:48.589 --> 00:04:50.090
目標應用

00:04:51.258 --> 00:04:53.327
這裏有一些暗示

00:04:56.630 --> 00:04:59.533
單元測試中
你可以直接訪問

00:04:59.600 --> 00:05:02.269
你的應用數據結構和API

00:05:04.004 --> 00:05:06.773
但是在你的UI測試中

00:05:07.407 --> 00:05:10.811
你通過輔助功能和發送事件
來訪問應用

00:05:11.144 --> 00:05:16.216
就像用戶一樣從外部來觀察應用

00:05:20.153 --> 00:05:23.156
對於單元測試
你的所有測試都將被運行

00:05:23.824 --> 00:05:26.260
在寄主應用的同一次運行中

00:05:26.627 --> 00:05:30.964
所以在測試之中
你需要注意清理工作

00:05:33.467 --> 00:05:38.305
但是對於UI測試
你的測試可以結束並重新啓動應用

00:05:38.705 --> 00:05:42.943
所以這利於測試
你的應用怎樣啓動

00:05:45.979 --> 00:05:47.247
這就是託管

00:05:47.548 --> 00:05:50.150
這就是你的測試
是怎樣被啓動的

00:05:51.919 --> 00:05:53.554
一旦你的測試在運行中

00:05:53.787 --> 00:05:55.989
你可以用被稱爲監視的技術

00:05:56.056 --> 00:05:59.026
查看你的測試的詳細進展

00:05:59.760 --> 00:06:02.196
讓我們放大這條時間線

00:06:04.464 --> 00:06:08.001
在這裏你可以看到2個測試用例
一個接一個運行

00:06:08.836 --> 00:06:11.572
這些測試用例屬於一個測試組

00:06:12.873 --> 00:06:15.742
一個測試組對應你寫的一個測試類

00:06:17.144 --> 00:06:20.280
如果你在測試束中有多個測試組

00:06:22.549 --> 00:06:24.818
你可能想要做一些設置工作

00:06:24.885 --> 00:06:26.687
爲任何會運行的測試

00:06:27.321 --> 00:06:29.256
或者也許在測試完成後

00:06:29.590 --> 00:06:31.425
做一些析構工作

00:06:32.526 --> 00:06:35.929
或者在測試中
做一些定製的記錄

00:06:38.699 --> 00:06:42.269
你可以用XCTestObservation協議
來做這些

00:06:43.070 --> 00:06:45.706
你編寫一個符合這個協議的對象

00:06:46.106 --> 00:06:49.209
在和一個
共享的監視中心註冊它後

00:06:50.310 --> 00:06:52.346
你的對象會接收到回調

00:06:53.747 --> 00:06:56.550
比如在任何測試開始前

00:06:56.717 --> 00:07:00.087
你得到這個
束將會開始的回調

00:07:01.288 --> 00:07:03.290
那麼在組開始前

00:07:03.624 --> 00:07:06.994
你會得到一個
組將會開始的回調

00:07:08.629 --> 00:07:10.998
對每一個要運行的測試用例

00:07:11.532 --> 00:07:15.202
你會得到一個
用例將會開始的回調

00:07:15.536 --> 00:07:19.506
和測試用例結束的回調

00:07:21.808 --> 00:07:23.277
如果出錯了

00:07:23.443 --> 00:07:26.713
你會得到
用例失敗的回調

00:07:28.148 --> 00:07:30.651
因爲測試結束了

00:07:31.084 --> 00:07:33.287
你會得到
測試組結束的回調

00:07:34.087 --> 00:07:35.956
以及你進行任何工作的最後機會

00:07:36.123 --> 00:07:40.060
在這裏
測試束結束的回調

00:07:43.830 --> 00:07:45.432
這是一個例子

00:07:46.333 --> 00:07:49.002
這個對象遵守
XCTestObservation協議

00:07:49.736 --> 00:07:51.538
在這個對象的初始化函數裏

00:07:51.605 --> 00:07:54.374
我和共享監視中心進行註冊

00:07:55.008 --> 00:07:57.544
隨着測試的進行

00:07:57.778 --> 00:08:00.647
我記錄事件
比如這個

00:08:02.182 --> 00:08:06.386
測試出錯時 我記錄這個

00:08:08.288 --> 00:08:11.091
我也會記錄測試結束

00:08:13.594 --> 00:08:16.129
一個理想的
設立監視器的地方

00:08:16.496 --> 00:08:19.600
是你的測試束
的info.plist文件

00:08:20.767 --> 00:08:24.071
你通過使用Xcode的
Info.plist編輯器來這樣做

00:08:24.404 --> 00:08:27.474
你添加這個NS主類入口

00:08:29.176 --> 00:08:34.581
這是你的監視器
專門針對測試的初始化

00:08:35.749 --> 00:08:38.652
它是和類載入初始器獨立的

00:08:42.756 --> 00:08:45.492
這就是託管和監視

00:08:45.726 --> 00:08:47.761
他們是有用的概念
來幫助理解

00:08:47.828 --> 00:08:50.264
你的測試是怎麼在幕後運行的

00:08:50.564 --> 00:08:53.233
還幫助你診斷測試中出現的問題

00:08:55.636 --> 00:08:57.638
讓我們看看Xcode 8中的新特性

00:08:59.907 --> 00:09:03.110
崩潰是測試失敗的一個常見原因

00:09:04.044 --> 00:09:07.814
崩潰可能發生在宿主應用

00:09:08.081 --> 00:09:09.883
和目標應用中

00:09:11.485 --> 00:09:15.489
通常Xcode會重啓宿主應用

00:09:15.556 --> 00:09:17.157
來完成你的測試組

00:09:17.591 --> 00:09:23.697
這需要你自己來收集
解決崩潰所需的診斷信息

00:09:25.599 --> 00:09:28.235
我很高興的宣佈

00:09:28.569 --> 00:09:31.138
今年Xcode會幫助解決這個問題

00:09:31.538 --> 00:09:35.008
我們會在測試報告中
幫你收集崩潰記錄

00:09:35.809 --> 00:09:39.012
對UI和單元測試

00:09:39.413 --> 00:09:44.418
對本地和在服務器上運行的測試

00:09:44.484 --> 00:09:47.888
崩潰記錄會被收集到測試報告中

00:09:48.422 --> 00:09:52.259
你會在那看到用文本呈現的崩潰

00:09:52.926 --> 00:09:57.297
或者你選擇查看崩潰的上下文

00:09:58.498 --> 00:10:00.167
我想現在向你展示

00:10:02.269 --> 00:10:03.904
Eric和我最近都在夜間活動

00:10:04.505 --> 00:10:07.841
我們在空閒時間開發tvOS應用

00:10:08.108 --> 00:10:11.278
現在我通過按運行按鈕來啓動它

00:10:18.418 --> 00:10:21.154
這個應用是用一些
測試的奇怪的樂隊名稱

00:10:21.221 --> 00:10:24.391
來尋找附近的音樂會

00:10:25.592 --> 00:10:28.762
我可以通過鍵盤上的鍵進入模擬器

00:10:31.665 --> 00:10:34.201
Eric和我爲這個應用加入新特性

00:10:34.434 --> 00:10:37.504
來支持禁用了位置服務的用戶

00:10:38.605 --> 00:10:41.175
讓我向你演示
這對那些用戶是怎樣的

00:10:44.878 --> 00:10:46.713
我會進入主菜單

00:10:50.551 --> 00:10:51.852
在隱私選項裏

00:10:52.519 --> 00:10:55.055
我將禁用位置服務

00:10:59.860 --> 00:11:01.495
我將進入Xcode

00:11:04.031 --> 00:11:06.834
在這我們爲那些用戶
添加了一個視圖控制器

00:11:07.501 --> 00:11:09.203
這允許他們輸入一個郵編

00:11:10.838 --> 00:11:14.908
讓我爲這個視圖控制器再添加個測試

00:11:21.248 --> 00:11:24.518
我希望那些單元測試
在它們自己的方案中運行

00:11:26.153 --> 00:11:28.455
我會向上來到方案菜單

00:11:28.755 --> 00:11:31.825
我將複製這個已有的方案

00:11:36.296 --> 00:11:38.232
並給它取一個有意義的名稱

00:11:42.503 --> 00:11:44.872
然後在這個方案的測試行動裏

00:11:45.606 --> 00:11:47.574
我禁用調試器

00:11:48.075 --> 00:11:51.411
這是一個技術
它允許我運行我的測試

00:11:52.145 --> 00:11:55.048
不會有東西來打斷測試組

00:11:55.115 --> 00:11:57.684
它不會進入調試器

00:11:58.285 --> 00:12:00.854
與你的測試如何在
Xcode Server上運行很類似

00:12:03.323 --> 00:12:06.460
我還會禁用和位置服務不相關的測試

00:12:09.129 --> 00:12:10.631
我將分享該方案

00:12:14.401 --> 00:12:16.303
我用Command-U運行測試

00:12:33.220 --> 00:12:37.624
這是給禁用位置服務用戶的
新視圖控制器

00:12:38.292 --> 00:12:40.594
他們可以選擇輸入郵編

00:12:42.296 --> 00:12:45.132
現在 測試是輸入郵編

00:12:53.140 --> 00:12:55.509
那是出乎意料的崩潰

00:12:56.043 --> 00:12:59.379
當下 Xcode聚集了崩潰日誌

00:12:59.813 --> 00:13:01.448
報告測試失敗

00:13:01.515 --> 00:13:02.916
讓我們看看

00:13:04.885 --> 00:13:06.753
這是失敗的測試

00:13:07.287 --> 00:13:10.791
我可以點擊跳到測試報告

00:13:12.559 --> 00:13:14.962
我將展示測試抄本

00:13:16.063 --> 00:13:19.299
這裏是測試輸入郵編時的事件

00:13:19.900 --> 00:13:22.336
此處最底部是崩潰

00:13:24.037 --> 00:13:28.108
現在我可以點擊查看該崩潰的文本顯示

00:13:28.175 --> 00:13:31.712
但這情況下
我想向你展示崩潰的上下文源碼

00:13:32.112 --> 00:13:34.114
所以 我將點擊此處的箭頭

00:13:36.116 --> 00:13:39.586
這就是崩潰發生的那一行

00:13:40.287 --> 00:13:44.591
你可以在左上角看見調試導航中的棧幀

00:13:47.261 --> 00:13:52.566
現在我就能看見上下文源碼中的崩潰
並且診斷問題所在

00:13:53.700 --> 00:13:57.271
我恰巧發現引用了錯誤的視圖控制器

00:13:57.337 --> 00:14:00.874
應該是presenting ViewController
而不是parent

00:14:02.176 --> 00:14:03.677
所以 我將做個修改

00:14:04.545 --> 00:14:07.981
我將通過去測試導航來重新運行測試

00:14:08.815 --> 00:14:10.717
點擊此處的圖標

00:14:16.290 --> 00:14:19.860
之前我向你們展示過
本地測試運行的測試報告

00:14:20.694 --> 00:14:24.731
但那個報告將看上去與出自
Xcode Server的完全一致

00:14:28.502 --> 00:14:31.038
現在測試是重新輸入郵編

00:14:40.981 --> 00:14:43.283
太棒了 這些測試通過了

00:14:43.984 --> 00:14:46.520
我們現在登記測試並...

00:14:47.120 --> 00:14:51.158
在支持禁用位置服務用戶這方面
建立信心

00:14:52.326 --> 00:14:54.528
但 現在 讓我們回到幻燈片

00:14:56.897 --> 00:15:01.668
你已經看過Xcode
怎樣收集崩潰記錄

00:15:01.969 --> 00:15:04.271
並在測試報告中包括它們

00:15:05.339 --> 00:15:08.876
你可以選擇查看
那些崩潰的文本呈現

00:15:08.942 --> 00:15:14.548
或者你可以查看
崩潰的上下文源碼

00:15:15.015 --> 00:15:17.618
這是診斷問題的一個好方法

00:15:18.018 --> 00:15:21.255
並且在你的源碼
上下文中修正問題

00:15:24.124 --> 00:15:26.693
我們在Xcode Server中
有一些新特性

00:15:27.494 --> 00:15:32.099
爲了向你們展示更多
歡迎同事Eric Dudiak上臺

00:15:37.404 --> 00:15:39.206
下午好
我是Eric Dudiak

00:15:39.273 --> 00:15:41.575
我將和你們談論
Xcode Server

00:15:41.642 --> 00:15:43.644
及Xcode 8中有哪些新特性

00:15:45.078 --> 00:15:48.382
讓我們看一下概述
關於我們要談到的

00:15:48.515 --> 00:15:50.384
Xcode 8和
Xcode Server

00:15:50.884 --> 00:15:54.588
我們有定製的環境變量
你可以設置它來集成

00:15:55.622 --> 00:15:59.660
我們有高級觸發器編輯流程
我們在Xcode 8中改進了它

00:16:03.063 --> 00:16:05.999
我們還有一些
對追蹤和歸責的改進

00:16:06.466 --> 00:16:09.503
來確保bot中出現問題時你被通知

00:16:10.737 --> 00:16:13.340
我們還會看到那將怎樣
和升級集成一起工作

00:16:13.407 --> 00:16:14.808
這是我們爲你提供的一個新特性

00:16:15.943 --> 00:16:18.645
最後我們將看到
可配置的集成用戶

00:16:18.712 --> 00:16:20.247
也是Xcode 8新加入的

00:16:21.114 --> 00:16:24.351
讓我們開始討論定製環境變量

00:16:24.585 --> 00:16:25.752
有點像作弊

00:16:25.819 --> 00:16:28.055
實際上它在Xcode 7.3中出現

00:16:28.355 --> 00:16:30.691
它讓你配置環境

00:16:30.757 --> 00:16:32.926
這個環境在bot傳遞給
Xcodebuild

00:16:32.993 --> 00:16:34.895
這將控制你的集成將被怎樣運行

00:16:34.962 --> 00:16:37.364
你可以配置任意多你想要的設置

00:16:37.431 --> 00:16:39.199
爲你在服務器上運行的bot

00:16:39.433 --> 00:16:41.368
有可能和在本地運行的不同

00:16:41.869 --> 00:16:45.105
定製你的服務器怎樣運行
你的集成是有利的

00:16:45.172 --> 00:16:48.642
不需在你的項目中新建很多方案
就可以完成這個是很好的

00:16:50.611 --> 00:16:52.613
現在來到Xcode 8的新特性

00:16:53.146 --> 00:16:56.183
我們顯著改進了編輯觸發器的體驗

00:16:56.250 --> 00:16:59.353
我們有兩種觸發器
腳本和電子郵件

00:16:59.853 --> 00:17:01.755
首先讓我們談談腳本觸發器

00:17:01.822 --> 00:17:03.724
他們在你的集成前或後運行

00:17:03.790 --> 00:17:06.727
他們就是普通的shell腳本

00:17:06.792 --> 00:17:09.296
我們改進了編輯器
給你更多的空間來查看腳本

00:17:09.363 --> 00:17:12.999
並且你可以看到它們裏面有什麼

00:17:13.066 --> 00:17:15.435
你可以看到更多

00:17:15.969 --> 00:17:18.805
這些行還允許你給觸發器命名

00:17:18.872 --> 00:17:20.641
如果你在組裏工作
這些有幫助

00:17:21.008 --> 00:17:25.112
你的其他組員可以看到
每個觸發器應該做什麼

00:17:25.179 --> 00:17:26.946
如果你有一個很長的腳本

00:17:27.013 --> 00:17:28.949
那是你集成觸發器的一部分

00:17:29.016 --> 00:17:32.119
你可以看到它是在
Xcode正在集成時被喚起的

00:17:32.186 --> 00:17:34.154
當你在狀態UI裏
看產品的集成過程時

00:17:34.221 --> 00:17:36.823
你實際上可以看到
哪個腳本正在運行

00:17:37.791 --> 00:17:39.893
最後如果你後來又有一個新腳本

00:17:39.960 --> 00:17:41.762
你想在其他腳本之前
運行這個新腳本

00:17:41.828 --> 00:17:46.233
你可以在這個UI裏
重新對觸發器排序

00:17:46.300 --> 00:17:49.536
只需要添加一個新的腳本觸發器
並把它拖到頂端

00:17:49.603 --> 00:17:51.738
它會成爲在bot中
第一個運行的

00:17:53.640 --> 00:17:56.276
現在讓我們看看
其他各類的觸發器

00:17:56.343 --> 00:17:57.945
我們有電子郵件通知

00:17:58.011 --> 00:17:59.246
在Xcode Server歷史中

00:17:59.313 --> 00:18:02.783
總是一封郵件
對應一個集成設置

00:18:02.850 --> 00:18:04.685
這會造成大量垃圾郵件

00:18:05.085 --> 00:18:09.223
爲了減少在你的
收件箱中的郵件數量

00:18:09.289 --> 00:18:12.626
我們把這類觸發器
分成2種不同類型

00:18:12.793 --> 00:18:15.495
我們仍然有報告觸發器
或者報告郵件觸發器會出現

00:18:15.562 --> 00:18:17.731
在每次你運行集成

00:18:17.898 --> 00:18:20.033
雖然現在你可以調試它們

00:18:20.334 --> 00:18:23.770
每天或每週只運行一次

00:18:24.004 --> 00:18:25.706
不管你的bot運行多頻繁

00:18:25.772 --> 00:18:27.708
不會產生大量的郵件

00:18:28.108 --> 00:18:29.776
你的收件箱不會被大量郵件淹沒

00:18:29.843 --> 00:18:31.845
我們認爲這對管理者很有利

00:18:31.912 --> 00:18:33.747
管理者希望
持續檢查bot的健康狀態

00:18:34.081 --> 00:18:37.084
但不想收件箱充滿了郵件

00:18:39.219 --> 00:18:42.155
此外我們還允許你
定義郵件裏的某些域

00:18:42.222 --> 00:18:45.759
這樣你就可以配置抄送和回覆域

00:18:46.226 --> 00:18:48.195
使你能更多控制

00:18:48.262 --> 00:18:50.130
你要發送的郵件類型

00:18:51.865 --> 00:18:53.534
我在之前提示過

00:18:53.600 --> 00:18:55.035
我們現在有兩種
不同的電子郵件觸發器

00:18:55.102 --> 00:18:56.537
另一類是問題觸發器

00:18:56.870 --> 00:18:57.971
當有問題發生時

00:18:58.038 --> 00:19:02.342
我們會給你發一封電子郵件

00:19:02.409 --> 00:19:03.577
給對這個問題感興趣的人

00:19:03.644 --> 00:19:05.746
我們會在接下來談談這個

00:19:05.913 --> 00:19:08.015
但是如果你有更多的提交者

00:19:08.515 --> 00:19:10.150
是你要集成的代碼的參與者

00:19:10.217 --> 00:19:11.985
那你當然想要發郵件給他們

00:19:12.152 --> 00:19:13.954
我們允許你在這過濾接收者

00:19:14.021 --> 00:19:16.890
來確保你只給你想要的人發郵件

00:19:17.324 --> 00:19:18.892
讓我們看看這個

00:19:20.327 --> 00:19:22.796
如果你有多個倉庫
你可以選擇只發郵件

00:19:22.930 --> 00:19:25.966
給來自特定倉庫的提交者

00:19:26.333 --> 00:19:29.136
或者你知道哪個域名
所有你想要發送郵件的郵件地址

00:19:29.203 --> 00:19:31.104
都會來自那個域名

00:19:31.371 --> 00:19:33.040
你可以在這添加那些

00:19:35.843 --> 00:19:38.579
讓我們花一些時間來談談問題

00:19:38.745 --> 00:19:40.581
或者構建問題

00:19:41.114 --> 00:19:44.585
沒有人是完美的
也不會每次都寫出完美代碼

00:19:44.651 --> 00:19:46.353
這是我們有連續集成的原因

00:19:46.420 --> 00:19:48.055
這是我們有單元測試的原因

00:19:48.355 --> 00:19:51.325
我們有單元測試因爲我們知道
它們不可避免的會失敗

00:19:51.391 --> 00:19:53.460
所以我們首先寫它們

00:19:53.994 --> 00:19:56.864
我們偶然也提交無法構建的代碼

00:19:56.930 --> 00:19:59.199
我們中的一些人不會在提交前檢查

00:19:59.266 --> 00:20:01.602
事情就是這樣的

00:20:01.768 --> 00:20:04.071
連續集成利於捕捉

00:20:04.204 --> 00:20:07.441
在這些情況下
Xcode會給你發郵件

00:20:07.508 --> 00:20:09.443
通知你你破壞了構建

00:20:10.511 --> 00:20:12.679
但除此之外
還可能發生其他問題

00:20:13.080 --> 00:20:15.148
有時候即使你寫的代碼是完美的

00:20:15.215 --> 00:20:16.750
你周圍的事情會改變

00:20:17.551 --> 00:20:19.286
可能是你安裝新的Xcode

00:20:19.353 --> 00:20:21.021
你得到很多新特性

00:20:21.088 --> 00:20:23.724
你得到新的SDK
可能有些東西在其中被新棄用了

00:20:24.358 --> 00:20:26.760
可能因爲語言的改進產生問題

00:20:27.094 --> 00:20:29.663
我們希望確保每次發佈的Xcode

00:20:29.730 --> 00:20:31.532
都比以前發佈的Xcode更聰明

00:20:31.598 --> 00:20:34.635
所以你可能看到
我們以前沒發現的問題

00:20:34.701 --> 00:20:36.470
它們一直在那
只是Xcode現在追蹤它們

00:20:36.537 --> 00:20:38.238
比如靜態分析問題

00:20:40.807 --> 00:20:42.342
當你看到郵件時重要的事

00:20:42.409 --> 00:20:44.811
是我們想確保它是可操作的

00:20:44.878 --> 00:20:47.247
並讓你知道你收到這封郵件
是因爲出現問題

00:20:47.314 --> 00:20:49.016
一是因爲出現了一些問題

00:20:49.082 --> 00:20:50.617
並且你可以處理這些問題

00:20:51.018 --> 00:20:53.620
第一類是如果你導致了一個問題

00:20:54.154 --> 00:20:55.222
是因爲你損壞了它

00:20:55.289 --> 00:20:58.525
所以這會聯繫你
像你在郵件中看到的這樣

00:20:58.592 --> 00:21:01.395
你會看到像這樣的
說是你導致了這個問題

00:21:01.862 --> 00:21:04.331
我們知道這是因爲
問題出現在一行或一行附近

00:21:04.398 --> 00:21:06.066
你最近修改過的一行

00:21:07.434 --> 00:21:09.703
我們還可能知道在2次集成中

00:21:09.770 --> 00:21:11.805
問題出現時只有你提交過代碼

00:21:11.872 --> 00:21:16.877
這種情況下猜測你造成了損壞
是合理的猜測

00:21:18.478 --> 00:21:19.546
但情況並不總是這樣

00:21:19.613 --> 00:21:23.150
比如 一個應用基於一個框架

00:21:23.350 --> 00:21:26.353
框架裏的一個改變

00:21:26.420 --> 00:21:27.454
可能造成應用的損壞

00:21:27.788 --> 00:21:29.990
沒有任何人對應用提交代碼

00:21:30.057 --> 00:21:32.693
在這種情況下你會看到一封郵件
更像這樣

00:21:32.960 --> 00:21:35.996
它會更少地譴責你的工作

00:21:36.063 --> 00:21:39.700
並且會說你可能
可以在bot裏解決這個問題

00:21:40.434 --> 00:21:44.037
現在我們知道這是因爲
你經常在出問題的範圍內提交代碼

00:21:44.104 --> 00:21:46.740
我們對各種範圍賦予所有權

00:21:48.041 --> 00:21:50.444
並且考慮到這是更模糊的匹配

00:21:50.511 --> 00:21:52.546
和直接把責任歸於某些人相比

00:21:52.713 --> 00:21:55.249
所以郵件會發送給更大的範圍

00:21:55.315 --> 00:21:57.251
會形成一個很寬的網絡

00:21:57.317 --> 00:21:59.653
當試着找出誰可能
對特定問題感興趣

00:22:03.223 --> 00:22:05.626
這對你的代碼中出現的問題有利

00:22:05.692 --> 00:22:07.661
但是有時候問題

00:22:07.728 --> 00:22:09.062
並不是代碼的改變引起的

00:22:09.129 --> 00:22:13.200
最簡單的重現它的方法
是重新設置你的bot

00:22:13.634 --> 00:22:18.539
所以Xcode 8或者Xcode Server
現在會追蹤修改

00:22:18.605 --> 00:22:21.375
對你的bot的配置的修改
並把它們調出

00:22:21.875 --> 00:22:23.677
任何我們有可能把新出現的原因

00:22:23.810 --> 00:22:26.680
歸咎於配置的改變時

00:22:26.747 --> 00:22:29.983
比如說你啓用測試或靜態分析

00:22:30.284 --> 00:22:32.352
也許這類問題一直
存在於你的代碼中

00:22:32.419 --> 00:22:34.755
但是我們實際上把它們歸咎於

00:22:34.821 --> 00:22:36.223
特定的bot配置的改變

00:22:36.423 --> 00:22:38.058
而不是代碼的改變

00:22:39.059 --> 00:22:42.162
我們還在下一次的集成
包含這些信息在郵件裏

00:22:42.229 --> 00:22:44.898
這樣當你看到一封這樣的郵件時
你知道其中的一些改變

00:22:44.965 --> 00:22:47.734
可能因爲你進行了一些配置的修改

00:22:50.504 --> 00:22:52.940
讓我們回到之前談論的一些事

00:22:53.006 --> 00:22:55.442
安裝新Xcode獲得一系列新特性

00:22:56.143 --> 00:22:59.546
當那發生在Xcode 8
中的Xcode Server時

00:22:59.613 --> 00:23:02.049
實際上會重新集成你的整個項目

00:23:02.583 --> 00:23:04.384
我們稱之爲升級集成

00:23:05.219 --> 00:23:08.922
我們會用和之前集成
完全相同的版本

00:23:09.189 --> 00:23:10.691
然後重新運行所有測試

00:23:10.757 --> 00:23:12.926
重新構造所有東西
重新運行靜態分析器

00:23:13.627 --> 00:23:15.462
當這發生時我們知道

00:23:15.529 --> 00:23:18.198
問題發生在你在項目裏
在這個時候

00:23:18.765 --> 00:23:21.134
任何新的問題都是由升級引起的

00:23:21.201 --> 00:23:23.470
因爲我們使用完全相同的代碼

00:23:24.004 --> 00:23:26.173
這節省了你追蹤源代碼改變

00:23:26.240 --> 00:23:28.008
所需的大量時間
問題並不是

00:23:28.075 --> 00:23:31.512
由你對代碼的修改引起的

00:23:33.580 --> 00:23:35.215
這就是一些新特性和問題的責任歸咎

00:23:35.282 --> 00:23:37.384
我想談談Xcode Server
和Xcode 8中

00:23:37.451 --> 00:23:39.052
我最喜歡的新特性

00:23:39.353 --> 00:23:41.822
那就是可配置集成用戶

00:23:42.890 --> 00:23:45.692
我們給你將運行你的集成

00:23:45.759 --> 00:23:47.394
的Mac OS用戶完全的控制

00:23:47.528 --> 00:23:49.530
這給你很多增強的可視性

00:23:49.630 --> 00:23:51.598
關於你的集成是怎樣運行的

00:23:51.932 --> 00:23:52.999
此外它還允許你配置

00:23:53.066 --> 00:23:55.435
你的集成究竟怎樣運行

00:23:55.936 --> 00:23:59.339
Xcode Server中
有一個隱藏的Mac OS用戶

00:23:59.406 --> 00:24:01.909
在後臺運行所有的集成

00:24:01.975 --> 00:24:03.443
你無法訪問密碼

00:24:03.510 --> 00:24:05.579
你無法用它們登錄

00:24:05.879 --> 00:24:09.016
這就是說你得到一個用戶

00:24:09.082 --> 00:24:10.884
你不能進行任何修改

00:24:11.585 --> 00:24:13.887
現在你自己擁有並管理這個用戶

00:24:13.954 --> 00:24:15.556
你會得到密碼

00:24:15.856 --> 00:24:18.525
這個用戶就是一個
普通的Mac OS用戶

00:24:18.592 --> 00:24:19.960
可以是系統上的任何用戶

00:24:20.027 --> 00:24:21.528
可以是你想要的任何用戶

00:24:21.828 --> 00:24:23.063
我們建議用一個新用戶

00:24:23.830 --> 00:24:27.100
但它在登錄窗口
和快速切換用戶中可用

00:24:27.167 --> 00:24:29.069
所以你可以用其他用戶登錄

00:24:30.304 --> 00:24:32.072
你會注意到你在使用這個用戶

00:24:32.172 --> 00:24:36.410
通過一個菜單顯示
Xcode Server集成圖標

00:24:36.944 --> 00:24:38.178
我們會馬上看到

00:24:38.245 --> 00:24:39.813
讓我們看看怎麼建立這個用戶

00:24:39.880 --> 00:24:42.950
在這我打開服務器應用
來到Xcode服務面板

00:24:43.250 --> 00:24:45.586
爲了啓用Xcode Server

00:24:45.919 --> 00:24:47.354
我需要選擇Xcode

00:24:47.421 --> 00:24:50.290
我會選擇我已經安裝的
新的Xcode 8

00:24:50.691 --> 00:24:52.659
我會看到這個對話框

00:24:52.726 --> 00:24:54.995
要求我建立我想使用的集成用戶

00:24:55.062 --> 00:24:57.130
我新建一個

00:24:57.197 --> 00:24:58.699
只用來運行集成的用戶

00:24:59.066 --> 00:25:00.434
給它一個名字和密碼

00:25:00.501 --> 00:25:02.503
和普通用戶一樣的一些事情

00:25:02.970 --> 00:25:04.538
我將視其爲基本用戶

00:25:04.605 --> 00:25:06.473
當我按新建用戶按鈕

00:25:08.408 --> 00:25:10.744
Xcode將在後臺做一些工作

00:25:10.811 --> 00:25:13.514
當它爲運行集成做準備時

00:25:14.047 --> 00:25:16.049
一旦用戶被設立好

00:25:16.149 --> 00:25:18.051
我們被要求用它們登錄

00:25:18.452 --> 00:25:20.754
現在我們被要求用它們登錄
因爲我們要繼續

00:25:20.821 --> 00:25:22.890
運行建立助手

00:25:22.956 --> 00:25:25.425
請記住這是一個真正的
普通Mac OS用戶

00:25:26.159 --> 00:25:29.663
所以我可以登錄
比如 登錄一個測試iCloud賬戶

00:25:29.830 --> 00:25:33.033
我可以保存用來集成的數據

00:25:33.100 --> 00:25:34.301
任何此類

00:25:34.368 --> 00:25:35.736
當Xcode準備好運行集成時

00:25:35.802 --> 00:25:38.605
你會看到一個通知
像右上角這個

00:25:39.039 --> 00:25:40.474
以及在菜單欄的右上角

00:25:40.541 --> 00:25:42.976
你會注意到有一個錘子表明

00:25:43.210 --> 00:25:46.513
是Xcode Server集成用戶

00:25:47.514 --> 00:25:51.585
當這些都完成後
我可以切換回去

00:25:52.819 --> 00:25:55.589
我會回到服務器應用
我會看到指示符

00:25:55.656 --> 00:25:58.225
提示用戶已經可用

00:25:58.292 --> 00:26:00.027
登錄後集成可以開始運行

00:26:00.794 --> 00:26:02.196
我們已看過怎樣建立該用戶

00:26:02.262 --> 00:26:04.598
讓我們看看一些
我們訪問集成用戶

00:26:04.665 --> 00:26:06.767
可以做的事

00:26:06.867 --> 00:26:08.569
讓我們來到演示的機器

00:26:08.635 --> 00:26:11.205
我們有早前看到的
那個相同的項目

00:26:11.972 --> 00:26:14.308
我們看到有一個問題
它崩潰了

00:26:15.209 --> 00:26:16.844
因爲它無法訪問位置

00:26:16.910 --> 00:26:18.812
我們需要手動進入模擬器

00:26:19.012 --> 00:26:21.148
並關閉位置訪問
來在本地測試它

00:26:21.548 --> 00:26:23.984
但是因爲我們在開發應用
我們可能不想這樣做

00:26:24.051 --> 00:26:26.119
我們可能想要保持啓用位置服務

00:26:26.186 --> 00:26:28.155
在我們的Apple TV和模擬器中

00:26:28.522 --> 00:26:31.258
這是我們的用戶
多多少少會遇到的情況

00:26:31.325 --> 00:26:32.626
我們希望怎麼看到應用

00:26:33.393 --> 00:26:35.662
但是現在我們已經解決了
早前看到的問題

00:26:35.729 --> 00:26:37.197
我們不希望它再出現

00:26:37.264 --> 00:26:39.066
如果它出現
我們希望收到通知

00:26:39.499 --> 00:26:41.869
所以碰巧我現在在用的機器

00:26:41.935 --> 00:26:43.403
是我的服務器機器

00:26:43.470 --> 00:26:45.606
要進入我的服務器

00:26:45.672 --> 00:26:48.108
我只需要來到快速用戶切換菜單

00:26:48.375 --> 00:26:50.477
我看到我有一個

00:26:50.544 --> 00:26:54.081
可配置集成用戶
名叫Xcode Server

00:26:54.815 --> 00:26:56.984
我選擇它

00:26:57.417 --> 00:27:01.989
輸入我的只有4位的密碼

00:27:05.592 --> 00:27:06.960
我們就會作爲這個用戶登錄

00:27:07.027 --> 00:27:09.229
我修改桌面背景

00:27:09.296 --> 00:27:11.465
所以我知道這是構建服務用戶

00:27:11.732 --> 00:27:14.701
在這我們看到Xcode的錘子圖標

00:27:14.768 --> 00:27:16.503
它表明這是Xcode Server

00:27:16.570 --> 00:27:18.739
它已經啓動並在等待集成

00:27:18.805 --> 00:27:20.040
已經配置好了

00:27:20.407 --> 00:27:22.776
我想要進入Xcode

00:27:22.843 --> 00:27:26.413
我可以爲這個用戶在Xcode中
配置任何我想要的本地設置

00:27:26.480 --> 00:27:28.515
它們會在我的集成中被使用

00:27:29.082 --> 00:27:30.384
我會用一些小技巧

00:27:30.450 --> 00:27:32.119
如果我來到設備菜單

00:27:32.286 --> 00:27:36.123
我看到了插入這臺電腦
的所有設備和模擬器

00:27:36.657 --> 00:27:40.294
現在Apple很慷慨
我們提供我們生產過的所有設備

00:27:40.627 --> 00:27:43.096
如果這還不夠多

00:27:43.163 --> 00:27:46.266
你可以按這個增加按鈕
來獲得更多模擬器

00:27:46.867 --> 00:27:51.205
Apple TV 1080p模擬器
在我安裝Xcode時就已經內置了

00:27:51.738 --> 00:27:54.942
我會新建一個
沒有位置服務的Apple TV

00:27:55.709 --> 00:27:57.144
它已經啓動了

00:27:57.277 --> 00:28:00.414
我雙擊進入

00:28:02.249 --> 00:28:04.284
它實際上已經禁用了位置服務

00:28:04.518 --> 00:28:07.621
如果我來到設置 一般隱私

00:28:08.121 --> 00:28:09.356
位置服務被關閉了

00:28:09.423 --> 00:28:11.158
所以模擬器已經配置好可以使用

00:28:11.225 --> 00:28:14.595
而另一個也可以在我想要
啓用位置服務時使用

00:28:15.629 --> 00:28:17.898
讓我們快速切回

00:28:19.833 --> 00:28:21.235
並登錄我通常使用的用戶

00:28:21.301 --> 00:28:22.736
通常我需要穿過房間

00:28:22.803 --> 00:28:25.272
到我實際用來工作的電腦
所以這快一些

00:28:25.973 --> 00:28:27.574
這裏我們看到所有的UI測試

00:28:27.641 --> 00:28:30.444
現在我已經有一個bot
正照常進行集成

00:28:30.677 --> 00:28:33.514
但我想新建一個bot用來集成

00:28:33.580 --> 00:28:35.048
在沒有位置數據的情況下

00:28:35.148 --> 00:28:36.984
所以我來到產品新建Bot

00:28:37.050 --> 00:28:40.220
在這個服務器上
使用無位置的方案

00:28:40.554 --> 00:28:42.990
我會給它位置 對不起
是我的倉庫

00:28:43.056 --> 00:28:46.326
這樣我就可以取得我的項目

00:28:48.128 --> 00:28:50.764
和我的普通bot一樣
我禁用歸檔活動

00:28:50.831 --> 00:28:53.066
我不關心那個
但是我想要運行測試

00:28:53.233 --> 00:28:55.102
讓我們保持啓用靜態分析

00:28:56.136 --> 00:28:57.871
我想要在我破壞它時馬上收到通知

00:28:57.938 --> 00:29:00.641
但是每天一次就可以了

00:29:00.741 --> 00:29:03.644
所以如果我們又破壞了它
我會在24小時內知道

00:29:03.710 --> 00:29:05.612
UI測試會在server上捕獲它

00:29:06.013 --> 00:29:07.981
我們會在每天凌晨1點運行它

00:29:08.048 --> 00:29:09.917
在這我選擇設備

00:29:10.384 --> 00:29:14.021
默認情況下 每次集成在
那個操作系統的所有設備上運行

00:29:14.087 --> 00:29:15.389
這是一個tvOS項目

00:29:15.455 --> 00:29:17.891
所以它將在所有
tvOS設備和模擬器上運行

00:29:18.492 --> 00:29:20.694
但是讓我們選擇特定設備

00:29:20.761 --> 00:29:23.130
我將只選擇Apple TV沒有位置

00:29:24.831 --> 00:29:27.100
這是我們早前談過的環境變量視圖

00:29:27.167 --> 00:29:29.403
我不需要任何變量

00:29:29.536 --> 00:29:31.071
我將繼續確保我收到郵件

00:29:31.138 --> 00:29:33.307
當一個問題在特定用例裏出現時

00:29:33.373 --> 00:29:35.108
然後繼續新建這個bot

00:29:37.544 --> 00:29:39.313
它將繼續開始一次集成

00:29:39.379 --> 00:29:42.049
我們在這可以看到它在運行
它正在導出構建

00:29:42.115 --> 00:29:44.084
我們看到UI測試進行了一部分

00:29:44.151 --> 00:29:45.886
讓我們來看看

00:29:45.953 --> 00:29:47.888
我早先準備好的一個集成

00:29:48.288 --> 00:29:49.122
若我們去測試

00:29:49.189 --> 00:29:52.426
我們可以看到所有測試都被運行了
包括郵編測試

00:29:53.160 --> 00:29:55.062
如果我查看一些屏幕截圖

00:29:55.128 --> 00:29:56.763
它實際上運行了那個位置

00:29:56.830 --> 00:29:59.466
因爲它打開了
我們早前看到的視圖控制器

00:30:02.603 --> 00:30:05.506
我們可以看出我們顯著提高了可視性

00:30:05.572 --> 00:30:06.740
關於你的用戶怎樣運行

00:30:06.807 --> 00:30:09.409
你可以登錄它們看到正在發生的一切

00:30:11.011 --> 00:30:14.681
我們看到了你可以定製不同的設置
比如模擬器

00:30:14.748 --> 00:30:18.252
運行你想要在集成中運行的操作

00:30:18.619 --> 00:30:20.654
我們看到這是
普通的Mac OS用戶

00:30:20.721 --> 00:30:22.823
我可以在快速用戶切換中切換到它

00:30:22.890 --> 00:30:24.358
我也有密碼

00:30:24.958 --> 00:30:26.260
我們看到菜單的額外圖標

00:30:26.326 --> 00:30:28.462
顯示集成狀態的信息

00:30:28.529 --> 00:30:30.097
在集成用戶中

00:30:33.233 --> 00:30:35.669
現在隨着這些新特性而來的
是一些責任

00:30:35.736 --> 00:30:37.604
所以我們爲你們準備了
一些最佳實踐

00:30:37.938 --> 00:30:40.174
首先我們強烈推薦你新建一個用戶

00:30:40.240 --> 00:30:42.709
讓他儘量和你的客戶有相同的體驗

00:30:42.776 --> 00:30:44.878
你不想要你的設置

00:30:45.145 --> 00:30:47.714
影響你的bots

00:30:48.715 --> 00:30:51.084
我們還建議你避免使用管理員賬號

00:30:51.151 --> 00:30:53.287
請記住所有能在服務器上
新建和編輯bot的人

00:30:53.353 --> 00:30:56.190
將可以通過觸發器來訪問那個賬戶

00:30:56.256 --> 00:30:58.625
對任何私有或定製數據也是這樣

00:30:58.692 --> 00:31:00.694
避免在那個用戶裏儲存這些數據

00:31:02.496 --> 00:31:04.731
如果你想在後臺保持登錄
那個用戶的狀態

00:31:04.798 --> 00:31:05.866
使用快速用戶切換

00:31:05.933 --> 00:31:09.670
集成可以繼續運行在後臺
就像它們一直做的那樣

00:31:10.003 --> 00:31:12.940
但是如果你想要
做爲最前臺用戶運行集成

00:31:13.006 --> 00:31:14.708
確保關閉了鎖屏

00:31:14.775 --> 00:31:17.878
就像iOS屏幕鎖定bot測試
Mac OS屏幕鎖定也會這樣

00:31:19.279 --> 00:31:22.182
最後確保你對你的所有需要
都這樣設置

00:31:22.249 --> 00:31:24.484
包括我們前面看到的任何模擬器

00:31:24.551 --> 00:31:26.420
如果你在集成中需要

00:31:26.486 --> 00:31:28.121
特定網絡配置

00:31:28.555 --> 00:31:32.192
你想要在UI測試中使用
任何保存的用戶數據和設置

00:31:32.292 --> 00:31:33.794
去配置它們

00:31:34.528 --> 00:31:36.196
最後如果你有高級供應

00:31:36.263 --> 00:31:38.966
比如你的管理員給你一個
供應配置文件

00:31:39.032 --> 00:31:40.734
然而你可以在Xcode上配置

00:31:40.801 --> 00:31:44.605
你實際上現在可以在
可配置集成用戶中配置它

00:31:44.671 --> 00:31:47.074
來確保代碼簽署正常工作

00:31:48.108 --> 00:31:49.576
我要請回Zoltan

00:31:49.643 --> 00:31:52.846
來談談xcodebuild
的一些新特性

00:32:01.054 --> 00:32:01.955
謝謝你Eric

00:32:04.157 --> 00:32:07.928
你們已看過Xcode
的Xcode Server新特性

00:32:08.595 --> 00:32:11.131
現在要向你展示
xcodebuild的新特性

00:32:13.033 --> 00:32:15.068
xcodebuild有測試活動

00:32:15.135 --> 00:32:18.705
針對定製連續集成系統

00:32:19.673 --> 00:32:22.075
你給它一個工作區
一個方案和一個目標

00:32:22.476 --> 00:32:25.412
一個xcodebuild就會盡職的
構建你的源碼

00:32:26.046 --> 00:32:30.017
它會在設備上安裝所需的構建產品

00:32:31.785 --> 00:32:35.756
它會運行你的測試
然後在命令行向你報告結果

00:32:38.091 --> 00:32:41.862
今年我們爲這一行爲引入了
2個選項

00:32:42.729 --> 00:32:44.598
只測試選項

00:32:44.665 --> 00:32:47.901
讓你可以有效的

00:32:48.402 --> 00:32:49.603
限制將被運行的測試

00:32:51.872 --> 00:32:57.611
你可以指定測試用例或測試組
或測試束被運行

00:32:57.678 --> 00:32:59.913
並排除其他測試

00:33:02.482 --> 00:33:04.585
你還可以使用跳過測試選項

00:33:04.651 --> 00:33:09.223
來指定測試用例
被排除在測試中

00:33:09.289 --> 00:33:10.757
而其他測試會被運行

00:33:12.926 --> 00:33:14.194
今年的大新聞是

00:33:14.261 --> 00:33:17.064
xcodebuild有兩個新行爲

00:33:18.432 --> 00:33:21.568
我們可以有效的把測試分成2個

00:33:22.536 --> 00:33:26.907
這些功能已經在Xcode IDE中

00:33:27.908 --> 00:33:30.143
但我們要把它們
帶到xcodebuild中

00:33:30.577 --> 00:33:32.312
讓我們一個個來看

00:33:34.681 --> 00:33:39.286
爲測試構建是
測試活動中的構建部分

00:33:40.554 --> 00:33:44.191
你已經給了它一個工作區
一個方案和一個目標

00:33:44.258 --> 00:33:48.028
它會構建你的源碼

00:33:48.762 --> 00:33:50.764
可能會使一些符號可見

00:33:51.732 --> 00:33:54.668
然後它會把構建好的產品
輸出到導出數據

00:33:55.869 --> 00:33:58.405
它還產生XCTestRun文件

00:33:58.605 --> 00:34:01.642
它是一種清單
規定你測試要運行的一切

00:34:02.376 --> 00:34:04.077
我們晚點會回到這

00:34:06.446 --> 00:34:10.317
不構建測試是第2部分

00:34:11.451 --> 00:34:14.688
像之前一樣給它一個工作區
一個方案和一個目標

00:34:15.789 --> 00:34:20.159
xcodebuild在輸出數據裏
找到已構建好的產品

00:34:20.494 --> 00:34:23.096
它會把它們安裝到所需的設備上

00:34:23.697 --> 00:34:27.768
然後像之前一樣運行你的測試
並報告結果

00:34:33.974 --> 00:34:38.045
但是酷的事是
你不再需要提供工作區

00:34:39.746 --> 00:34:43.550
你只需要提供XCTestRun文件

00:34:43.984 --> 00:34:47.187
Xcode會從二進制文件
運行你的測試

00:34:48.455 --> 00:34:51.123
它會使用XCTestRun文件

00:34:51.257 --> 00:34:54.261
它會找到和這個文件相關的
二進制產品

00:34:54.962 --> 00:34:57.865
它會運行測試並報告結果

00:34:58.665 --> 00:35:00.467
i和之前一樣

00:35:00.534 --> 00:35:02.903
但是不需要訪問你的源碼

00:35:04.271 --> 00:35:07.508
這對分佈式測試環境很理想

00:35:08.375 --> 00:35:13.046
你可以在爲構建優化的電腦上
構建你的測試

00:35:13.714 --> 00:35:16.316
然後把構建好的產品

00:35:16.383 --> 00:35:19.052
轉移到爲測試優化的電腦上

00:35:20.420 --> 00:35:24.358
然後你可以並行的收集測試報告

00:35:26.894 --> 00:35:29.730
XCTestRun讓這一切成爲可能

00:35:30.230 --> 00:35:34.801
它是測試的清單
指定哪些測試要被運行

00:35:34.868 --> 00:35:37.070
哪些要在哪個測試電腦上被跳過

00:35:38.405 --> 00:35:42.276
它向測試提供環境變量
和命令行參數

00:35:43.243 --> 00:35:47.247
關於主頁面的格式
你可以用這個命令來查看

00:35:57.157 --> 00:35:58.892
我們今天覆蓋了很多

00:36:00.027 --> 00:36:03.864
我們首先回顧了測試的4個特徵

00:36:05.299 --> 00:36:08.802
然後我們看了Xcode的一些新概念

00:36:09.670 --> 00:36:12.639
它們幫助你診斷測試中的問題

00:36:14.241 --> 00:36:16.443
然後我們介紹了Xcode的新特性

00:36:17.110 --> 00:36:19.680
Xcode Server
和xcodebuild

00:36:22.516 --> 00:36:24.718
我希望這些新特性的介紹

00:36:25.018 --> 00:36:27.721
能幫助你開發運行良好的測試組

00:36:28.922 --> 00:36:31.792
並最終幫助你開發優秀的應用

00:36:34.361 --> 00:36:36.597
你可以在這個網址
獲得更多本場演講的信息

00:36:37.764 --> 00:36:38.665
謝謝