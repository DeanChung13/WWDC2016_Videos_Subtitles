00:00:19.119 --> 00:00:20.621
介紹Swift Playgrounds

00:00:20.687 --> 00:00:21.522
早上好

00:00:24.057 --> 00:00:25.092
早上好

00:00:27.427 --> 00:00:29.897
非常感謝大家
我是Matt Patenaude

00:00:29.963 --> 00:00:32.031
我是Playgrounds團隊
的工程師

00:00:32.098 --> 00:00:36.136
歡迎參加演講408
“介紹Swift Playgrounds”

00:00:36.770 --> 00:00:40.374
我非常激動成爲這個團隊中的一員

00:00:40.440 --> 00:00:44.278
今天我們要給你們展示一下
天哪我們要給你們展示很多東西

00:00:44.478 --> 00:00:47.047
好的
讓我們開始吧

00:00:48.382 --> 00:00:50.584
目前爲止你們已接觸
這個應用有48個小時了

00:00:50.984 --> 00:00:53.020
所以我確定你們中很多人
已經看到這個了

00:00:53.086 --> 00:00:56.223
但是也可能你們中有些人設法
抵制住了它的誘惑

00:00:56.290 --> 00:01:00.327
Swift Playgrounds
確實是iPad令人激動的新應用

00:01:00.527 --> 00:01:02.629
它能讓你用Swift編程

00:01:02.896 --> 00:01:06.767
讓你用手指直接感受
Swift的強大

00:01:07.568 --> 00:01:11.104
如果你對編程沒有什麼經驗
這個應用對你很有用

00:01:11.238 --> 00:01:14.474
我們有很棒的學習編碼的課程

00:01:14.608 --> 00:01:16.743
你可以從應用上直接下載

00:01:16.810 --> 00:01:20.280
我們把它設計的吸引人
而且令人激動

00:01:20.447 --> 00:01:22.616
無論你處於什麼編程水平

00:01:22.850 --> 00:01:26.253
別的不說 你可以用它
製作出漂亮的舞步

00:01:30.190 --> 00:01:32.092
如果你對編程略有經驗

00:01:32.159 --> 00:01:34.561
我們也爲你準備了很棒的起點工具

00:01:34.628 --> 00:01:35.829
像這個形狀模板

00:01:35.896 --> 00:01:39.600
它能夠讓你用
顏色和觸摸這樣的東西做實驗

00:01:39.666 --> 00:01:43.070
這在iPad上都是獨一無二的
別的地方你不會看到

00:01:43.403 --> 00:01:46.306
如果你已經習慣於Xcode中
的編程工具

00:01:46.406 --> 00:01:51.278
你可以把你的iOS編程工具中的
代碼更新到Swift 3

00:01:51.445 --> 00:01:54.448
它們在Swift Playgrounds
和iPad上都會運行得很好

00:01:54.781 --> 00:01:56.550
我們認爲它確實是令人激動的產品

00:01:56.617 --> 00:01:59.286
我們知道你會用它做出
令人稱奇的東西

00:01:59.386 --> 00:02:01.421
好的 我們有很多東西展示給你們

00:02:01.555 --> 00:02:05.592
今天的演講分爲三部分

00:02:06.493 --> 00:02:09.329
首先讓我的同事Max上臺

00:02:09.429 --> 00:02:11.632
他會演示如何使用這個應用

00:02:11.698 --> 00:02:14.401
包括神奇的觸摸反饋和手勢

00:02:14.468 --> 00:02:17.070
這絕對是iPad的獨一無二的體驗

00:02:17.704 --> 00:02:19.473
然後是Jonathan

00:02:19.540 --> 00:02:22.442
他會演示如何編譯
更有吸引力的內容

00:02:22.509 --> 00:02:23.610
用Swift
Playgrounds

00:02:23.677 --> 00:02:26.280
使用新文檔格式的新特徵

00:02:26.380 --> 00:02:28.916
最後Izzy會上臺 他要演示

00:02:28.982 --> 00:02:30.784
你可以做的一些很酷的東西

00:02:30.851 --> 00:02:33.153
一旦你有更多時間
玩這個軟件

00:02:33.220 --> 00:02:35.155
閒言少敘 有請Max

00:02:40.794 --> 00:02:41.628
謝謝Matt

00:02:42.863 --> 00:02:43.697
謝謝Matt

00:02:44.031 --> 00:02:47.201
首先讓我們看一個截屏

00:02:47.367 --> 00:02:49.603
它是Swift Playgrounds的截屏
我們可以看到

00:02:49.736 --> 00:02:51.738
界面的不同組成部分

00:02:51.805 --> 00:02:57.144
在屏幕的左側是源代碼編譯器

00:02:57.211 --> 00:02:58.846
右側是實時視圖

00:02:58.912 --> 00:03:01.915
源代碼編譯器由幾個區域組成

00:03:01.982 --> 00:03:06.086
一個區域
是Playground註釋

00:03:06.453 --> 00:03:09.122
你可以看到這兒有很多註釋

00:03:09.389 --> 00:03:12.059
它可以分散在每個頁面之內

00:03:12.326 --> 00:03:16.363
這是一個內容豐富的文本
幫助你瞭解文檔的信息

00:03:16.763 --> 00:03:19.366
下面有一個源代碼的實例

00:03:19.566 --> 00:03:22.803
在這兒你完成所有的編程代碼

00:03:23.370 --> 00:03:26.340
在屏幕的底端有快捷菜單

00:03:26.907 --> 00:03:29.209
中間是代碼補全

00:03:29.376 --> 00:03:31.712
這取決於光標處的代碼

00:03:32.179 --> 00:03:35.115
左面是撤銷和恢復按鈕

00:03:35.315 --> 00:03:38.385
右面有兩個——是幾個快捷按鈕

00:03:38.585 --> 00:03:40.053
一個是刪除按鈕

00:03:40.420 --> 00:03:44.191
另一個按鈕用於插入行
第三個用來彈出軟鍵盤

00:03:44.491 --> 00:03:46.793
這些按鈕將幫助到你

00:03:47.127 --> 00:03:50.430
如果你不想用鍵盤編程的話

00:03:50.864 --> 00:03:53.600
右面是實時視圖

00:03:54.168 --> 00:03:57.337
在這兒能實時看到代碼的執行情況

00:03:57.671 --> 00:04:00.841
下面有運行代碼按鈕

00:04:02.042 --> 00:04:04.077
按下它將編譯和運行你的代碼

00:04:04.645 --> 00:04:08.215
頂部的左邊有文檔按鈕

00:04:08.282 --> 00:04:09.750
可以選擇你的文檔

00:04:09.917 --> 00:04:12.452
這個按鈕用來顯示內容的列表
它能顯示

00:04:12.553 --> 00:04:16.023
文檔中所有的章節和頁面

00:04:16.723 --> 00:04:19.125
還有兩個按鈕用於瀏覽頁面

00:04:19.593 --> 00:04:22.796
右邊是工具菜單

00:04:23.297 --> 00:04:25.666
資料菜單和工具菜單

00:04:26.233 --> 00:04:28.168
讓我們看看它們裏面是什麼

00:04:29.203 --> 00:04:32.873
在資料菜單下是代碼片段

00:04:33.507 --> 00:04:37.211
旁邊是圖像列表

00:04:37.277 --> 00:04:39.880
你可把這些圖像添到
playground或文檔中

00:04:40.080 --> 00:04:42.382
第三個是文件列表

00:04:42.683 --> 00:04:47.821
你可以從其中選擇
添加到你的文檔中去

00:04:48.956 --> 00:04:52.359
在工具菜單下你可以
找到應用的幫助

00:04:52.526 --> 00:04:54.895
文檔的術語表

00:04:55.329 --> 00:04:58.098
這兩個按鈕可以分享有關文檔的東西

00:04:58.165 --> 00:05:01.335
例如錄屏 把你的操作錄製下來

00:05:01.668 --> 00:05:05.472
截屏 把實時視圖的圖像保存下來

00:05:05.772 --> 00:05:09.710
最後是還原按鈕
可以把頁面還原到初始狀態

00:05:10.310 --> 00:05:12.446
現在我們在文件瀏覽器中

00:05:13.080 --> 00:05:16.250
你可以看到這兒有很多文件

00:05:16.350 --> 00:05:19.453
我要打開Playground的
形狀模板

00:05:19.686 --> 00:05:20.654
它們都在這兒

00:05:21.221 --> 00:05:25.492
這兒只有一行代碼
讓rectangle等於某個值

00:05:25.993 --> 00:05:28.362
我想在實時視圖中畫一些長方形

00:05:28.495 --> 00:05:29.763
我認爲這非常有趣

00:05:29.830 --> 00:05:31.298
下面我要在值上點擊

00:05:32.633 --> 00:05:35.369
你會看到在底部出現了代碼補全

00:05:35.435 --> 00:05:37.404
這兒有許多不同的選項

00:05:37.471 --> 00:05:40.007
我要找到長方形

00:05:40.741 --> 00:05:44.845
通過點擊代碼補全並且向左
拉動滾動條瀏覽整個代碼補全

00:05:44.912 --> 00:05:48.916
這是長方形
點擊它 它就會插入到文檔中

00:05:49.449 --> 00:05:53.086
注意在屏幕的左方出現了
一個橘黃色圓圈兒

00:05:53.287 --> 00:05:55.656
這說明這行代碼有問題

00:05:56.323 --> 00:05:59.426
點擊它 它告訴我這行代碼有錯誤

00:05:59.493 --> 00:06:03.564
我需要在長方形後面加上括號
這兒有修復選項

00:06:03.630 --> 00:06:07.167
你可以點擊第一個
它就會插入到文檔中

00:06:07.234 --> 00:06:08.635
橘黃色的圓圈兒消失了

00:06:09.169 --> 00:06:13.607
現在點擊我的代碼
可以看到我畫了一個長方形

00:06:14.074 --> 00:06:15.142
它是正方形 但...

00:06:18.345 --> 00:06:20.247
現在注意當我們把光標下移的時候

00:06:20.614 --> 00:06:22.716
在代碼補全中出現了長方形

00:06:22.850 --> 00:06:25.185
我點擊它 然後點擊圓點

00:06:25.252 --> 00:06:27.120
現在它列舉出了所有的不同屬性

00:06:27.187 --> 00:06:29.289
和函數 我可以把它們用在長方形上

00:06:29.623 --> 00:06:32.693
爲了看的更清除

00:06:32.893 --> 00:06:35.262
我們改變一下邊框的顏色和寬度

00:06:35.495 --> 00:06:37.531
讓我們輸入邊框顏色

00:06:37.831 --> 00:06:40.067
這兒有一個等號運算符 點擊它

00:06:40.434 --> 00:06:43.303
我們得到一個佔位符
代表某種類型的顏色

00:06:43.770 --> 00:06:47.708
注意代碼補全中的第二項
是一個灰色方框

00:06:48.075 --> 00:06:51.678
這意味着我們可以插入
所見即所得的顏色

00:06:52.246 --> 00:06:55.549
點擊一下我們得到一個白色的方框

00:06:56.116 --> 00:06:59.753
點擊方框會出現一個快速編輯器
可以改變顏色的值

00:07:00.220 --> 00:07:02.723
Swift Playground中
有很多快速編輯器

00:07:02.789 --> 00:07:04.224
這只是一個顏色編輯器

00:07:04.291 --> 00:07:08.195
我把顏色從白色變成黑色
點擊運行代碼

00:07:08.662 --> 00:07:10.464
現在邊框變成了黑色

00:07:10.531 --> 00:07:14.201
現在看上去不太清楚
我要增加邊框的寬度

00:07:15.102 --> 00:07:17.471
點擊長方形 點擊圓點

00:07:18.238 --> 00:07:22.543
點擊邊框寬度和等號
現在出現了一個數字盤

00:07:22.809 --> 00:07:26.180
它也是一個快速編輯器
我們可以快速輸入一個數字

00:07:26.346 --> 00:07:30.851
輸入四 噢 點擊運行

00:07:31.285 --> 00:07:33.720
現在看起來清楚多了

00:07:34.755 --> 00:07:37.658
現在我要
我想編一個程序

00:07:37.824 --> 00:07:41.828
當我在實時視圖中移動手指的時候
會畫出一串正方形

00:07:42.362 --> 00:07:44.131
我要寫更多的代碼

00:07:44.198 --> 00:07:47.668
我要把實時視圖隱藏
讓我有更多的空間寫代碼

00:07:47.734 --> 00:07:49.803
我要在屏幕的中央點擊並且按住

00:07:49.870 --> 00:07:51.772
它會把屏幕分爲左右兩半兒

00:07:51.839 --> 00:07:54.107
現在拖動到右側使實時視圖消失

00:07:55.309 --> 00:07:57.878
現在點擊源代碼

00:07:58.612 --> 00:08:01.515
Swift Playgrounds
有一個很好的軟鍵盤

00:08:01.582 --> 00:08:04.117
當你想用屏幕鍵盤編程的時候
可以使用它

00:08:04.184 --> 00:08:06.753
讓我點擊菜單中的向上按鈕
把軟鍵盤顯示出來

00:08:07.221 --> 00:08:09.690
注意每個鍵的上方都有一個替代值

00:08:09.756 --> 00:08:10.924
後面我們會詳細講解

00:08:11.592 --> 00:08:13.961
我們首先使用canvas對象

00:08:14.094 --> 00:08:17.965
它在playground形狀裏
以便和實時視圖進行互動

00:08:18.131 --> 00:08:21.335
讓我鍵入C-a-n
我們有了canvas對象

00:08:21.635 --> 00:08:25.339
輸入Shared
得到shared canvas

00:08:25.772 --> 00:08:27.207
現在輸入Drag

00:08:27.674 --> 00:08:30.677
注意Swift
Playgrounds模糊匹配了

00:08:30.744 --> 00:08:34.181
onTouchDrag handler
僅僅通過輸入Drag

00:08:34.381 --> 00:08:38.284
我點擊一下就得到了
一個函數的佔位空間

00:08:38.652 --> 00:08:42.389
點擊回車就會擴展佔位符的空間
讓我們輸入更多的代碼

00:08:43.222 --> 00:08:46.927
現在我想創建一個程序
能隨着手指拖動產生許多長方形

00:08:47.494 --> 00:08:50.864
我要做的就是把剛纔的代碼添加進去

00:08:51.231 --> 00:08:56.170
點擊下面的大括號
並按住它 向下拖動

00:08:56.336 --> 00:08:58.405
把前面的代碼包含到大括號內

00:08:59.706 --> 00:09:01.175
下一步就是

00:09:01.275 --> 00:09:04.545
我要把長方形的中心
設置爲我點擊的地方

00:09:05.112 --> 00:09:10.117
讓我們加入一行代碼
設置長方形的中心位置

00:09:10.450 --> 00:09:15.923
爲canvas共享的當前觸摸點

00:09:16.256 --> 00:09:18.625
它是一個數組

00:09:19.326 --> 00:09:22.095
如果我點擊並且按住H
然後向右拖動

00:09:22.629 --> 00:09:24.198
就得到了數組的下標括號

00:09:24.631 --> 00:09:27.634
下面我點擊並且按住P得到零號元素

00:09:28.735 --> 00:09:31.572
現在關閉代碼視圖 看看實時視圖

00:09:32.139 --> 00:09:35.676
點擊運行代碼就可以開始畫圖了

00:09:36.910 --> 00:09:37.744
耶

00:09:44.885 --> 00:09:47.387
現在我在屏幕中央點擊並且按住

00:09:47.588 --> 00:09:50.757
向左拖動把代碼視圖關掉
現在我可以在整屏幕上作圖了

00:09:52.025 --> 00:09:55.229
我很喜歡它 有點兒藝術性
我要把它發送給Matt

00:09:55.295 --> 00:09:57.631
我要點擊工具菜單

00:09:57.698 --> 00:10:02.536
你可以把實時視圖截屏保存下來

00:10:04.004 --> 00:10:05.772
其實有很多程序在運行

00:10:06.540 --> 00:10:10.177
幕後做了很多工作
使playground這樣運行

00:10:10.544 --> 00:10:11.845
有請Jonathan

00:10:11.912 --> 00:10:15.148
他會給我們演示

00:10:15.682 --> 00:10:21.655
Playgrounds內部的
工作原理

00:10:22.322 --> 00:10:23.490
好 Jonathan

00:10:31.031 --> 00:10:32.332
謝謝 Matt和Max

00:10:33.767 --> 00:10:35.636
iPad上的
Swift Playgrounds

00:10:35.702 --> 00:10:39.573
讓你使用和在Mac上創建的
同樣的Swift 3 Playground文檔

00:10:39.640 --> 00:10:41.508
你也可以在iPad上創建它們

00:10:42.075 --> 00:10:45.579
你可以使用AirDrop、iCloud
Drive和其它文檔提供者

00:10:45.646 --> 00:10:47.948
來轉換文檔並且在這些環境中
運行它們

00:10:48.015 --> 00:10:49.483
這很有趣

00:10:49.917 --> 00:10:52.953
在傳統的
Playground文件格式之外

00:10:53.120 --> 00:10:56.290
iPad的Swift Playgrounds
引入了一種新的文件格式

00:10:56.356 --> 00:10:58.525
它利用了新的環境

00:10:59.193 --> 00:11:01.929
Playground Books
提供更多編程代碼塊

00:11:01.995 --> 00:11:03.864
可以創建交互的題材

00:11:03.931 --> 00:11:06.633
在其中你希望別人也可以一起探究

00:11:06.700 --> 00:11:08.135
你想給他們展示一些東西

00:11:08.202 --> 00:11:09.369
下面

00:11:09.436 --> 00:11:11.805
我要向你們展示一些新功能

00:11:11.872 --> 00:11:15.142
以及你們如何利用這些新功能

00:11:16.877 --> 00:11:21.748
首先Playground Books
是由按章節分組的頁面構成的

00:11:21.949 --> 00:11:25.452
並且在此基礎上生成了內容列表
這是爲了利於瀏覽

00:11:28.255 --> 00:11:31.825
Playground Books提供了
一種新類型的頁面叫做劇情畫面

00:11:31.959 --> 00:11:35.762
這非常有用
如果你想進行全屏展示

00:11:35.996 --> 00:11:38.232
在你講述故事的過程中

00:11:38.298 --> 00:11:41.168
你看 我們的內容團隊
很好的應用了它

00:11:41.235 --> 00:11:43.437
把大的構思用有趣的方式展示出來

00:11:45.372 --> 00:11:48.008
當你介紹概念的時候
你可以使用詞彙表功能

00:11:48.075 --> 00:11:51.044
動動手指就可以
把術語和它們的定義聯繫起來

00:11:51.378 --> 00:11:54.147
這些術語和定義集中起來

00:11:54.214 --> 00:11:56.016
儲存在某個地方以供參考

00:11:58.385 --> 00:12:02.356
滿是Swift代碼的
Playground頁面令人生畏

00:12:02.422 --> 00:12:06.560
有時你不想從你要展示的細節處分心

00:12:06.760 --> 00:12:09.763
Playground Books
使學習者能夠集中精力

00:12:09.830 --> 00:12:11.365
這是通過使用編輯區域實現的

00:12:11.798 --> 00:12:14.968
你用特別的註釋
註釋你的Swift代碼

00:12:15.469 --> 00:12:17.938
它們開始是空白的
學習者可以在以後添加進去

00:12:18.238 --> 00:12:21.241
這會減少你的分心
特別是在早期階段

00:12:21.308 --> 00:12:23.710
當你盡力展示一個
複雜概念的時候

00:12:26.046 --> 00:12:29.716
Playground Books
讓你標記不想顯示的代碼

00:12:30.250 --> 00:12:33.420
隱藏代碼區使你能夠
靈活的運行、創建

00:12:33.487 --> 00:12:36.757
和刪除代碼
在中間的某種工作區中

00:12:36.924 --> 00:12:39.026
最初把細節隱藏起來
是一個很好的方式

00:12:39.092 --> 00:12:40.827
然後你可以拉開窗簾兒

00:12:40.894 --> 00:12:43.897
在你準備好的時候魔術般的展現
已經創建好的代碼

00:12:46.133 --> 00:12:48.502
Playground Books
讓你可以配置快捷按鈕

00:12:48.569 --> 00:12:50.470
它們在代碼補全菜單條上顯示

00:12:50.537 --> 00:12:54.341
你可以指定或者刪除標示符、
模塊、關鍵字等等

00:12:54.608 --> 00:12:56.810
在註釋中定製那些內容會出現

00:12:59.947 --> 00:13:02.950
用新的文件格式
你可以配置實時視圖

00:13:03.050 --> 00:13:06.486
在頁面加載時實時視圖立即呈現出來

00:13:06.753 --> 00:13:08.956
它在一個獨立的進程中
運行Swift 代碼

00:13:09.022 --> 00:13:12.526
完全獨立於
編輯器中輸入和運行的代碼

00:13:12.826 --> 00:13:15.996
編輯器代碼在左側
實時視圖代碼在右側

00:13:16.063 --> 00:13:18.765
他們用一個特殊的XPC機制通信

00:13:19.032 --> 00:13:22.035
下面我們要看看這是怎麼實現的
你可以瀏覽

00:13:22.369 --> 00:13:25.405
我的演示
這樣你就可以使用這個機制了

00:13:25.472 --> 00:13:28.175
交互式可視化是一個很好的方式

00:13:28.242 --> 00:13:31.345
在編輯器中創建代碼
同時代碼立即運行

00:13:33.547 --> 00:13:36.016
如果你想一邊思考

00:13:36.083 --> 00:13:38.352
一邊創建實現某個東西

00:13:38.552 --> 00:13:41.255
你可以爲鍵入的代碼
提供提示內容

00:13:41.355 --> 00:13:43.957
學習者可以通過點擊
提示按鈕得到提示

00:13:45.359 --> 00:13:48.595
如果他們成功的完成了任務
你可以讓他們知道

00:13:48.896 --> 00:13:50.163
通過一條成功消息

00:13:52.766 --> 00:13:55.702
Playground Books
記住你對每個頁面評價

00:13:55.769 --> 00:13:59.072
學習者在內容列表中
可以看到他們已經完成的內容

00:13:59.139 --> 00:14:03.243
使用這些提示和評估機制
可以使你更有動力設計下去

00:14:05.646 --> 00:14:09.383
你還可以訪問文檔中的
一個簡單的鍵/值庫

00:14:09.483 --> 00:14:13.320
這樣你可以跟蹤偏好
或者甚至更高級的進展

00:14:13.420 --> 00:14:15.956
當學習者在一頁一頁瀏覽書的時候

00:14:17.824 --> 00:14:19.860
Playground Books
是可重置的

00:14:20.260 --> 00:14:22.963
做出的改變都存放在一個獨立的區域

00:14:23.030 --> 00:14:26.967
它們獨立於主文件內容以外
如果學習者選擇

00:14:27.467 --> 00:14:31.171
他們可以把頁面恢復到
第一次打開時的狀態

00:14:32.439 --> 00:14:34.575
整個文檔也可以重置

00:14:34.842 --> 00:14:38.011
每個頁面都是原始狀態
鍵/值庫也被清除

00:14:38.111 --> 00:14:40.848
評估可以重置
它們可以重新開始

00:14:43.283 --> 00:14:46.753
最後 但同樣重要的是
在developer.apple.com上

00:14:46.820 --> 00:14:48.822
你可以看到該格式的文檔

00:14:48.922 --> 00:14:50.657
我們要確保你知道它是如何運行的

00:14:50.724 --> 00:14:54.127
你就能夠定製自己內容產品工作流程

00:14:54.194 --> 00:14:55.295
讓奇蹟發生吧

00:14:55.662 --> 00:14:57.598
從這些例子和參考開始吧

00:14:57.664 --> 00:15:00.534
仔細研究甚至把Playground
Books讀爛學到更多東西

00:15:00.601 --> 00:15:03.103
Playground Books是
我們內容團隊創建的

00:15:10.477 --> 00:15:11.478
好你們明白了

00:15:11.545 --> 00:15:13.213
現在我想介紹一本
Playground Book

00:15:13.280 --> 00:15:16.550
它是我創建的
我想向你們展示

00:15:16.617 --> 00:15:18.252
從作者的角度你會體驗到什麼？

00:15:18.385 --> 00:15:20.754
所以本書的讀者

00:15:20.821 --> 00:15:23.690
是你們這些Swift的用戶

00:15:23.757 --> 00:15:26.627
你們甚至用過
Mac上Playgrounds

00:15:26.693 --> 00:15:29.630
但是Playground Book格式
是新事物

00:15:29.696 --> 00:15:31.832
你們也想進一步
瞭解它的工作原理

00:15:31.899 --> 00:15:34.067
我編輯這本Playground
Book旨在創建

00:15:34.134 --> 00:15:37.137
一個實時的參考演示
演示這些新的

00:15:37.204 --> 00:15:40.007
在線實時視圖是如何工作的
以及你如何同它交流

00:15:40.641 --> 00:15:42.142
現在開始

00:15:42.209 --> 00:15:44.144
還有什麼比...

00:15:44.912 --> 00:15:46.313
用一個
Playground Book

00:15:46.380 --> 00:15:49.082
來演示
Playground Books

00:15:49.149 --> 00:15:51.451
的新特性的更好方式呢？

00:15:53.187 --> 00:15:55.189
聽起來有點繞

00:15:55.255 --> 00:15:56.456
好的 那麼...

00:15:56.957 --> 00:15:57.991
我們開始吧

00:15:58.058 --> 00:15:59.293
這兒有文檔瀏覽器

00:15:59.359 --> 00:16:01.195
我要找出
我的Playground Book

00:16:01.261 --> 00:16:03.197
點擊“同實時視圖交流”

00:16:04.264 --> 00:16:07.401
你可以看到實時視圖
立即開始運行了

00:16:07.467 --> 00:16:08.802
注意編輯器上的代碼

00:16:08.869 --> 00:16:11.371
甚至還沒有編譯
它根本沒有運行

00:16:11.438 --> 00:16:14.274
我所寫的代碼在一個獨立的進程中

00:16:14.374 --> 00:16:18.145
在線實時視圖顯示
了一個漂亮的小臉

00:16:18.212 --> 00:16:19.646
它是Em

00:16:19.847 --> 00:16:22.349
它是一個Swift程序
它喜歡

00:16:22.416 --> 00:16:24.251
玩“敲 敲”遊戲

00:16:25.185 --> 00:16:27.821
在簡介頁面上我們可以看到

00:16:27.888 --> 00:16:30.224
遊戲是爲了交談逗樂

00:16:30.424 --> 00:16:32.693
學習者不需要詳細瞭解

00:16:32.759 --> 00:16:36.330
我們是如何把消息發送給實時視圖的

00:16:36.396 --> 00:16:38.599
我只想讓你們覺得很有趣

00:16:38.732 --> 00:16:40.901
上面附加了有趣的描述

00:16:41.168 --> 00:16:43.637
我們要做的是發送信息

00:16:43.704 --> 00:16:45.906
使用下面的Say函數

00:16:46.507 --> 00:16:48.475
這些字符將被髮送到另一面

00:16:48.575 --> 00:16:51.078
它們會啓動對話狀態機

00:16:51.144 --> 00:16:55.516
這是Em運行的一個程序
隨着笑話繼續它會不停的運行

00:16:55.582 --> 00:16:57.918
我們從這兒開始
這兒已經填好了一個字符串

00:16:57.985 --> 00:17:00.220
“敲 敲” 我只要按下
運行代碼按紐

00:17:00.721 --> 00:17:02.689
Em會回答 “你是誰？”

00:17:02.756 --> 00:17:05.392
左邊的代碼被編譯運行

00:17:05.492 --> 00:17:08.462
用Say函數奇蹟就發生了

00:17:08.529 --> 00:17:10.130
字符串被傳遞到另一面

00:17:10.196 --> 00:17:12.299
過一會兒我們會講解
奇蹟是如何發生的

00:17:12.866 --> 00:17:13.934
讓我們繼續

00:17:14.001 --> 00:17:16.103
我要說“Boo”

00:17:16.170 --> 00:17:18.137
我在使用外接鍵盤輸入

00:17:18.204 --> 00:17:19.806
因爲我不想讓內置鍵盤

00:17:19.873 --> 00:17:21.241
佔去屏幕

00:17:21.508 --> 00:17:24.077
點擊運行代碼按扭
字符串被傳送過去

00:17:24.744 --> 00:17:25.846
“Boo！是誰？”

00:17:27.414 --> 00:17:29.016
“你在哭嗎？”

00:17:30.484 --> 00:17:31.618
點擊運行代碼

00:17:37.224 --> 00:17:40.527
Em正確的識別了
這個敲敲笑話是經典的

00:17:40.594 --> 00:17:42.763
讓我們再試一次
看看它會怎樣

00:17:42.930 --> 00:17:45.599
我需要重啓Em的對話狀態機

00:17:45.666 --> 00:17:47.768
我要開始 鍵入“敲 敲”

00:17:47.835 --> 00:17:51.171
點擊運行代碼按鈕
編譯和運行 傳送字符串

00:17:51.271 --> 00:17:52.906
字符串通過線纜傳到另一面

00:17:53.207 --> 00:17:54.074
“你是誰？”

00:17:54.641 --> 00:17:58.011
UInt Swift的無符號整數類型

00:17:59.613 --> 00:18:00.547
“UInt是誰？”

00:18:01.448 --> 00:18:04.818
“你對更好笑的笑話感興趣嗎？”

00:18:13.493 --> 00:18:16.463
看起來你們贊同Em此時的迴應

00:18:16.964 --> 00:18:18.332
很不幸 但是...

00:18:19.633 --> 00:18:23.070
我們在這兒用這個想法做了個實驗

00:18:23.136 --> 00:18:25.305
好的進入下一頁

00:18:25.372 --> 00:18:28.575
奇蹟的祕密被揭開了

00:18:28.642 --> 00:18:30.777
你可以看到Say函數的具體代碼

00:18:30.844 --> 00:18:34.515
這些代碼把字符串傳送給
實時視圖進程

00:18:34.882 --> 00:18:37.217
過一會兒我們再看裏面的細節

00:18:37.551 --> 00:18:39.453
這是一本Playground Book

00:18:39.520 --> 00:18:43.257
它不斷的監聽在線實時視圖的API

00:18:43.323 --> 00:18:44.825
這是從作者的角度看到的

00:18:44.892 --> 00:18:47.194
你也可以在下面的頁面中學習到

00:18:47.261 --> 00:18:50.297
如何發送更復雜的命令給Em

00:18:50.364 --> 00:18:52.399
你可以配置它識別新的設置

00:18:52.466 --> 00:18:54.034
改變笑話的模式

00:18:54.101 --> 00:18:57.171
你甚至可以把笑話模式
儲存在鍵/值庫中

00:18:57.371 --> 00:18:59.606
在以後你可以加載它們逗樂

00:18:59.673 --> 00:19:01.742
在下一次你打開
Playground Book的時候

00:19:02.342 --> 00:19:05.946
Playground Book

00:19:06.013 --> 00:19:07.114
可以和我們的演講資料一起下載

00:19:07.181 --> 00:19:08.882
演講後你可以查閱一下

00:19:08.949 --> 00:19:11.018
現在我們要進一步瞭解

00:19:11.084 --> 00:19:13.854
從作者的角度看 它是如何運行的？

00:19:20.427 --> 00:19:23.664
Playground Books是
一個特殊的文件格式

00:19:23.797 --> 00:19:27.601
以適應在觸摸設備上教授這些概念

00:19:27.734 --> 00:19:29.036
例如iPad等設備

00:19:29.903 --> 00:19:32.673
他們是擴展名爲
.playgroundbook的文件夾

00:19:32.739 --> 00:19:35.976
操作系統認爲它是一個文件包

00:19:36.109 --> 00:19:39.479
你可以使用任何編輯器
在Mac上編輯

00:19:39.546 --> 00:19:41.548
你可以使用Xcode
你最喜愛的文本編輯器

00:19:41.615 --> 00:19:43.250
使用你的版本控制系統

00:19:43.317 --> 00:19:46.119
編譯自己的定製內容管理工作流

00:19:46.186 --> 00:19:49.456
如果你需要 還可以在Playground
Books中生成內容

00:19:50.490 --> 00:19:53.126
我們看看這個包是由那些文件組成的

00:19:53.293 --> 00:19:55.329
這個包包括文件和文件夾

00:19:55.395 --> 00:19:59.032
以及使所有一切運行的
Swift代碼資源庫配置

00:20:00.367 --> 00:20:02.135
這是簡要的概述

00:20:02.202 --> 00:20:04.371
後面我們會再詳細講解

00:20:04.438 --> 00:20:06.607
先讓我們看看所有一切
是怎麼組織起來的

00:20:07.541 --> 00:20:09.409
在文件包的根目錄

00:20:09.476 --> 00:20:12.179
有一個文件夾叫內容
你會猜到

00:20:12.346 --> 00:20:14.381
這兒存放你編寫的內容

00:20:16.049 --> 00:20:18.452
裏面有兩個文件夾
你會認得它們

00:20:18.519 --> 00:20:20.454
如果你以前寫過playgrounds程序

00:20:20.888 --> 00:20:23.590
Sources文件夾
存放全局Swift文件

00:20:23.657 --> 00:20:26.193
這些文件已經編譯好了
供每個頁面使用

00:20:26.260 --> 00:20:27.528
在你的
Playground Book中

00:20:28.061 --> 00:20:30.531
你甚至不需要導入它們

00:20:30.597 --> 00:20:33.033
任何聲明爲public的文件
都可被其它頁面使用

00:20:33.100 --> 00:20:34.568
一旦你打開頁面

00:20:35.102 --> 00:20:36.436
然後是Resources
文件夾...

00:20:38.338 --> 00:20:40.807
包含頁面需要的資源

00:20:40.874 --> 00:20:43.243
儲存有你的圖像文件、
聲音文件和其它資源

00:20:43.310 --> 00:20:46.847
你可以通過文件名加載它們
就可以把它們拖到相應的文件中

00:20:47.281 --> 00:20:50.217
注意這兩個文件夾在根目錄上

00:20:50.284 --> 00:20:52.986
文件包的根目錄
因此它們中的所有文件

00:20:53.053 --> 00:20:56.056
在整本書中的每一個頁面都可以使用

00:20:56.323 --> 00:20:59.326
如果你願意 你可以把它們限制到
只能在某些章節使用

00:20:59.393 --> 00:21:01.862
通過把Sources和
Resources文件夾放置在那兒

00:21:02.062 --> 00:21:03.297
甚至限制到只能在某個頁面使用

00:21:03.363 --> 00:21:05.832
並且你可以在其他頁面中
不分享這些東西

00:21:05.899 --> 00:21:08.268
完全由你決定
定製化是供你使用的

00:21:09.536 --> 00:21:12.072
下一個文件夾是Chapters文件夾

00:21:12.139 --> 00:21:14.942
正如你所料 它由章節組成

00:21:15.075 --> 00:21:18.879
每個文件夾含有一個或多個頁面

00:21:19.279 --> 00:21:21.815
每個頁面是一個文件夾

00:21:23.050 --> 00:21:25.352
它含有可以和你互動的內容

00:21:25.419 --> 00:21:28.322
當在應用中使用
Playground Book時

00:21:28.555 --> 00:21:32.559
我們首先看看這個文件
Manifest.plist

00:21:32.726 --> 00:21:36.730
它是一個特殊的配置文件
設置頁面的工作方式

00:21:36.897 --> 00:21:39.466
打開這個文件
它看起來是這個樣子的

00:21:39.566 --> 00:21:40.767
我們會慢慢看
不要擔心

00:21:41.201 --> 00:21:45.005
Manifest文件是屬性的列表
是鍵和值的詞典

00:21:45.072 --> 00:21:47.641
Swift Playground
用它決定一個文檔頁面

00:21:47.708 --> 00:21:49.610
如何工作

00:21:50.010 --> 00:21:52.379
這些manifest文件
用於配置章節層和

00:21:52.546 --> 00:21:54.948
文檔層的行爲

00:21:55.015 --> 00:21:57.551
例如內容列表中的內容排序

00:21:57.851 --> 00:21:59.887
今天我們準備主要講解
一下頁面的manifest

00:21:59.953 --> 00:22:03.757
因爲它對剛纔顯示中你看到的
內容影響最大

00:22:03.824 --> 00:22:06.994
我們看看每一個配置機制

00:22:07.060 --> 00:22:08.795
是如何影響頁面的

00:22:10.230 --> 00:22:14.768
屬性列表的第一個鍵是名字
你可以猜到

00:22:14.902 --> 00:22:17.905
它設置文檔頂部的名字
它也用在

00:22:17.971 --> 00:22:19.306
內容列表中

00:22:21.308 --> 00:22:24.811
下一個鍵實時視圖模式
控制實時視圖的工作方式

00:22:24.878 --> 00:22:26.313
當頁面第一次被打開時

00:22:26.513 --> 00:22:29.983
通常實時視圖是隱藏的
直到它在代碼中被激活

00:22:30.050 --> 00:22:32.553
或者學習者讓它顯示在屏幕上

00:22:32.619 --> 00:22:35.422
如果我想讓它
在頁面打開時立即顯示

00:22:35.489 --> 00:22:39.092
我可以把這個鍵改爲默認可見

00:22:39.459 --> 00:22:40.894
我就得到了我想要的行爲

00:22:43.063 --> 00:22:47.534
PosterReference鍵
設置

00:22:47.601 --> 00:22:49.736
在Resources文件夾中
查找一文件

00:22:50.404 --> 00:22:53.106
這個文件會成爲一個海報
它會覆蓋

00:22:53.173 --> 00:22:56.343
實時視圖區域
在實時視圖進程

00:22:56.410 --> 00:22:59.179
在頁面打開後運行以前

00:22:59.246 --> 00:23:02.583
你看
一旦實時視圖進程開始運行

00:23:02.649 --> 00:23:04.751
海報圖像就消失了

00:23:05.219 --> 00:23:07.588
我們就可以看到下面的
實時視圖的內容了

00:23:09.690 --> 00:23:12.626
LiveViewEdgetoEdge鍵是
一個布爾值

00:23:12.693 --> 00:23:15.829
它決定實時視圖的內容區域是否

00:23:15.896 --> 00:23:18.899
擴展到視窗的邊界

00:23:18.966 --> 00:23:21.602
並且在下面顯示運行代碼按鈕

00:23:21.668 --> 00:23:22.870
就像在這兒看到的一樣

00:23:22.936 --> 00:23:25.539
我想把它設成這樣我就選擇是

00:23:26.573 --> 00:23:28.876
如果你把LiveViewEdgetoEdge
設置爲否

00:23:28.942 --> 00:23:31.011
並且你爲實時視圖設置了背景顏色

00:23:31.078 --> 00:23:32.246
就是這樣的

00:23:32.513 --> 00:23:35.115
注意它嵌入的的邊界

00:23:35.382 --> 00:23:37.584
它沒有被運行代碼按鈕覆蓋

00:23:37.651 --> 00:23:42.122
你來決定用哪種模式
根據你的內容

00:23:42.422 --> 00:23:47.094
例如如果你需要視圖
全部控制觸摸區域

00:23:47.160 --> 00:23:49.229
就把LiveViewEdgetoEdge
設置爲否

00:23:49.329 --> 00:23:51.098
就會得到你想要的結果

00:23:53.667 --> 00:23:57.004
Playground日誌模式
控制內聯結果

00:23:57.070 --> 00:24:00.607
你會看到在編輯器每一行
的右端有一個返回值

00:24:01.074 --> 00:24:05.179
在這個例子中
我的實時視圖報告了需要的結果

00:24:05.245 --> 00:24:07.548
我就把PlaygroundLoggingMode

00:24:07.614 --> 00:24:11.752
設置爲關閉
它會完全關閉內聯結果

00:24:14.021 --> 00:24:17.357
現在我已介紹了Playground
文件格式的互動功能

00:24:17.424 --> 00:24:20.227
它們使應用非常有趣

00:24:20.627 --> 00:24:23.497
讓我們看看這個文件
Contents.swift

00:24:25.299 --> 00:24:29.269
你們都已見過了
Contents.swift文件

00:24:29.770 --> 00:24:32.439
無論是全屏而是位於左側

00:24:32.506 --> 00:24:34.074
位於實時視圖的左側
就和現在一樣

00:24:34.474 --> 00:24:37.811
編輯器中所有的內容
來自Contents.swift文件

00:24:37.878 --> 00:24:40.848
當你點擊運行按鈕時
文件中的所有內容

00:24:40.914 --> 00:24:43.417
和它引用的所有內容被執行

00:24:44.818 --> 00:24:48.689
在我的簡介頁面中
Contents.swift是這樣

00:24:48.889 --> 00:24:53.260
頂部是Playground註釋
用以幫助描述軟件的功能

00:24:53.360 --> 00:24:56.630
你的目標、如何得分和操作說明

00:24:56.697 --> 00:24:58.465
通過閱讀頁面

00:24:58.532 --> 00:25:00.367
可以瞭解如何和軟件互動

00:25:01.301 --> 00:25:04.071
以前用Playgrounds寫過
軟件的人會認得它

00:25:04.538 --> 00:25:06.740
它是標準的Playground註釋

00:25:08.542 --> 00:25:10.744
這兒有幾行代碼
用來創建頁面

00:25:10.811 --> 00:25:13.580
真正的操作就會實現

00:25:14.047 --> 00:25:17.050
但是我不想讓這一部分被人們看到
至少在這一頁上

00:25:17.384 --> 00:25:20.153
所以我用特別的魔術註釋
來標記隱藏代碼塊的開始

00:25:20.220 --> 00:25:21.889
和結束

00:25:22.222 --> 00:25:24.691
這兩行之間的代碼被隱藏了

00:25:25.125 --> 00:25:27.461
但是在運行的時候 它們會被執行

00:25:27.594 --> 00:25:29.963
但是當你打開這個頁面的時候
它們不會顯示

00:25:30.030 --> 00:25:31.765
在iPad的Swift
Playgrounds中

00:25:33.433 --> 00:25:35.802
這個Playground
page的真正工作

00:25:35.869 --> 00:25:38.138
是從這個語句開始的
就是對Say函數的調用

00:25:38.205 --> 00:25:40.174
而Say函數被寫在隱藏代碼中

00:25:40.574 --> 00:25:43.710
現在我想確保學習者

00:25:43.777 --> 00:25:47.014
來到這個頁面
填入函數參數的時候

00:25:47.080 --> 00:25:49.249
不會不小心造成編譯錯誤

00:25:49.716 --> 00:25:53.520
我使用了可編輯代碼區

00:25:53.754 --> 00:25:55.489
把特殊的魔術註釋

00:25:55.556 --> 00:25:58.091
放在可編輯代碼區的首部和尾部

00:25:58.258 --> 00:26:00.327
只有在這兒可以輸入代碼

00:26:00.961 --> 00:26:03.297
只要你高興 在頁面上添加
多少個這樣註釋都可

00:26:03.564 --> 00:26:07.434
一旦你用了這個註釋
只有在這個區域能夠輸入內容

00:26:07.501 --> 00:26:10.370
這正是我所需要的
學習者可以隨便輸入

00:26:10.437 --> 00:26:12.206
他們僅僅能夠改變字符串

00:26:14.007 --> 00:26:17.311
高級的Playground的作者
會注意到這個佔位符的語法

00:26:17.511 --> 00:26:20.914
這些尖括號和＃號
會產生一個透明圓形罩

00:26:20.981 --> 00:26:22.482
顯示在編輯器中

00:26:22.783 --> 00:26:25.419
學習者點擊它
就可以鍵入任何內容

00:26:25.485 --> 00:26:27.688
來代替原來的內容

00:26:27.888 --> 00:26:29.790
這種方式很好的提示了

00:26:29.857 --> 00:26:31.258
應在某地方進行怎樣的操作

00:26:33.594 --> 00:26:36.964
剛纔我總結了
Contents.swift中內容

00:26:37.130 --> 00:26:39.032
對左側邊框的總結

00:26:39.099 --> 00:26:40.901
現在我們轉向

00:26:40.968 --> 00:26:45.606
右側邊框
看看在線實時視圖中發生了什麼

00:26:47.040 --> 00:26:51.245
介紹頁面有一個文件
叫做LiveView.swift

00:26:52.546 --> 00:26:53.881
這就是

00:26:54.348 --> 00:26:56.683
首先我們導入
PlaygroundSupport

00:26:56.850 --> 00:26:58.952
那些以前用
Playgrounds編輯過的人

00:26:59.019 --> 00:27:02.289
對XE Playground很熟悉
它是一個框架 讓你能訪問

00:27:02.356 --> 00:27:03.790
頁面環境

00:27:04.024 --> 00:27:05.959
現它被重新命名了
它是新的而且升級了

00:27:06.026 --> 00:27:09.229
它叫Playground Support
你可用它繼續開發軟件

00:27:10.564 --> 00:27:13.400
我們請求當前的
Playground頁面

00:27:14.935 --> 00:27:18.372
然後在頁面上我們設置了
實時視圖的屬性

00:27:18.438 --> 00:27:22.276
把它設置爲一個新實例
叫做FaceViewController

00:27:22.676 --> 00:27:24.745
FaceViewController
是從哪兒來的呢？

00:27:25.078 --> 00:27:26.680
它是Swift代碼的一部分

00:27:26.747 --> 00:27:29.516
儲存在文檔根目錄的
Sources目錄中

00:27:29.816 --> 00:27:32.553
這是我創建的代碼庫

00:27:32.619 --> 00:27:34.621
能夠在所有頁面中共享使用

00:27:34.688 --> 00:27:37.824
這兒我寫下的所有代碼
只要被標記爲public我都可以引用

00:27:39.193 --> 00:27:40.994
現在如果你願意 你能夠

00:27:41.061 --> 00:27:45.299
在LiveView.swift文件
裏面寫下所有的實時視圖代碼

00:27:45.365 --> 00:27:47.034
誰也阻止不了你那樣做

00:27:47.367 --> 00:27:49.436
但是然後你要把文檔拷貝到

00:27:49.503 --> 00:27:51.705
其它的Playground
Book頁面中

00:27:51.772 --> 00:27:53.807
來共享同樣的實時視圖動作

00:27:53.907 --> 00:27:56.210
我的Playground Book
文檔的所有頁面

00:27:56.276 --> 00:28:01.515
我僅僅使用了這三行代碼作爲設置
就使Playground

00:28:01.582 --> 00:28:03.450
使在線實時視圖運行

00:28:03.517 --> 00:28:05.052
它們都共享了FaceViewController

00:28:05.118 --> 00:28:06.820
我只要把這個文件拷貝到

00:28:06.887 --> 00:28:09.022
需要使用它的任何頁面中

00:28:11.158 --> 00:28:13.160
那些以前編輯過
Playgrounds的人

00:28:13.227 --> 00:28:16.230
可能感覺這個代碼很熟悉

00:28:16.296 --> 00:28:18.265
這不就是設置實時視圖嗎

00:28:18.332 --> 00:28:20.834
如果你在Contents.swift
中這樣做的話

00:28:21.668 --> 00:28:24.538
是的 你仍然可以這樣做

00:28:24.738 --> 00:28:28.075
如果你選擇這樣做的話
它在主進程中運行

00:28:28.509 --> 00:28:30.978
和編譯器的所有代碼一起運行

00:28:31.044 --> 00:28:35.482
那真的很有用
因爲你能夠訪問實時視圖對象

00:28:35.549 --> 00:28:39.686
你可以獲取page.liveview
把它投遞到FaceViewController中去

00:28:39.753 --> 00:28:41.388
然後和操作別的東西一樣操作它

00:28:41.455 --> 00:28:45.158
調用它的方法 改變它的屬性
它就是你的進程的一部分

00:28:45.659 --> 00:28:47.828
但是那意味着實時視圖僅僅是活動的

00:28:47.895 --> 00:28:50.230
當編輯器中的代碼運行的時候

00:28:50.364 --> 00:28:53.767
只有當學習者按下運行代碼
按紐時它纔開始啓動

00:28:54.067 --> 00:28:56.737
學習者按下停止按鈕

00:28:56.803 --> 00:28:58.672
或者學習者在編輯器中輸入時
它就會停止

00:28:58.805 --> 00:29:02.309
如果代碼中有編譯錯誤它不能運行

00:29:02.376 --> 00:29:04.444
這些代碼現在正在編輯器中輸入

00:29:05.979 --> 00:29:09.683
這就是爲什麼在線實時視圖

00:29:09.750 --> 00:29:11.585
和LiveView.swift
引入的原因

00:29:11.652 --> 00:29:16.757
如果Playground Book頁面中
有一個文件叫做LiveView.swift

00:29:17.057 --> 00:29:19.826
就自動生成了在線實時視圖

00:29:19.893 --> 00:29:22.596
頁面打開時這個文件就運行了

00:29:22.896 --> 00:29:24.865
並且它在一個獨立的進程中運行

00:29:24.932 --> 00:29:28.368
那太棒了
因爲那樣它就一直在運行

00:29:29.536 --> 00:29:32.573
即使編輯器中的代碼沒有運行
或者不能編譯

00:29:33.240 --> 00:29:36.610
換來的是你不能把實時視圖投遞到

00:29:36.677 --> 00:29:38.912
FaceViewController實例中
並且和它交流

00:29:39.012 --> 00:29:40.480
就像你們以前那樣

00:29:40.681 --> 00:29:43.450
你必須使用某種跨進程機制

00:29:43.517 --> 00:29:47.054
來回傳遞消息 並且...
我們後面會詳細講解

00:29:48.589 --> 00:29:51.291
我們在Contents.swift的主進程中
有了這個代碼

00:29:51.592 --> 00:29:55.262
這是編輯器中的代碼運行的主進程

00:29:56.463 --> 00:29:59.566
我想把字符串“敲 敲”
送到另一側

00:29:59.633 --> 00:30:02.035
我們首先要導入
PlaygroundSupport

00:30:02.569 --> 00:30:04.438
我們訪問當前頁面

00:30:04.771 --> 00:30:07.541
我們請求頁面的實時視圖

00:30:07.608 --> 00:30:10.511
我們沒有把它投遞到
FaceViewController中去

00:30:10.611 --> 00:30:14.715
我把它投遞到這個特殊的類
PlaygroundRemoteLiveViewProxy中

00:30:15.215 --> 00:30:17.551
這個類的實例用來的

00:30:17.818 --> 00:30:21.021
通過線纜在兩個進程之間
傳遞信息

00:30:21.154 --> 00:30:23.790
如果這個條件投遞成功了

00:30:23.857 --> 00:30:26.426
那就是代碼中的一個隊列
它運行在

00:30:26.493 --> 00:30:30.597
主進程中
你就會得到這個頁面的在線實時視圖

00:30:30.664 --> 00:30:31.899
我們把這個作爲消息

00:30:32.432 --> 00:30:34.801
假設這些都好了
我們已經把它投遞過去了

00:30:34.868 --> 00:30:37.738
現在實時視圖運行了
我們有代理

00:30:38.405 --> 00:30:39.640
我們設計了一個消息

00:30:40.807 --> 00:30:43.477
消息傳送機制使用
PlaygroundValue

00:30:43.544 --> 00:30:46.947
它是個枚舉類型的值
我們一會兒會詳細介紹

00:30:47.014 --> 00:30:49.049
看看這一行你可能會猜到

00:30:49.116 --> 00:30:52.719
我們設計的一個字符串

00:30:52.786 --> 00:30:55.189
“敲 敲”
然後我們把這個消息

00:30:55.255 --> 00:30:57.357
傳遞給代理

00:30:57.658 --> 00:30:59.793
調用發送方法把它傳遞出去

00:31:01.161 --> 00:31:05.232
Contents.swift中的
代碼會把字符串

00:31:05.299 --> 00:31:09.169
傳遞給實時視圖代理
然後實時視圖代理

00:31:09.236 --> 00:31:14.174
把它傳遞給另一側的監聽方

00:31:14.241 --> 00:31:17.811
我們需要連接FaceViewController
從而能夠接收到消息

00:31:19.580 --> 00:31:21.548
在我們的代碼庫中

00:31:22.082 --> 00:31:25.853
我們已經擴展了FaceViewController
我們說過它遵循

00:31:25.919 --> 00:31:29.089
PlaygroundLiveView
MessageHandler協議

00:31:29.289 --> 00:31:33.493
那意味着我們必須實現接收方法
以獲得PlaygroundValue值

00:31:33.861 --> 00:31:37.397
它將會被調用
因爲FaceViewController

00:31:37.631 --> 00:31:42.669
是實時視圖 因爲我們把它的值賦給了
page.liveview屬性

00:31:42.736 --> 00:31:45.772
這就是實時視圖代理所知道的
作爲隊列

00:31:45.839 --> 00:31:47.841
它需要接收消息

00:31:49.176 --> 00:31:51.612
在消息內 我們取得消息的參數

00:31:51.678 --> 00:31:55.582
查看它攜帶的枚舉類型
抽取相關的值

00:31:55.649 --> 00:31:57.985
我現在僅僅關心字符串
因此我們就使用

00:31:58.051 --> 00:32:02.322
if case let語句檢查
這樣如果是爲真

00:32:02.389 --> 00:32:05.459
這個枚舉的值就
綁定給標識符文本

00:32:06.059 --> 00:32:08.495
現在在if語句中有一個字符串

00:32:08.795 --> 00:32:09.997
我們要繼續進行下去

00:32:10.130 --> 00:32:11.632
在這種情況下 我們把它傳遞給

00:32:11.698 --> 00:32:14.201
函數processConversationLine

00:32:14.334 --> 00:32:17.104
它會啓動Em的對話狀態機

00:32:19.406 --> 00:32:23.010
那麼我們如何把信息
傳遞給另一方呢？

00:32:23.076 --> 00:32:25.179
例如我們設置了當你在臉上
點擊時要顯示的信息

00:32:25.245 --> 00:32:27.748
我們得到了字符串“Hello”
如何把它傳遞回去呢？

00:32:28.081 --> 00:32:29.349
我們如何做呢？

00:32:31.418 --> 00:32:33.954
好的 首先 在實時視圖進程中
你需要一個機制

00:32:34.021 --> 00:32:36.623
能夠觸發發送消息
我已經選擇

00:32:36.723 --> 00:32:39.693
在臉上設置一個
觸摸手勢識別器

00:32:39.760 --> 00:32:41.929
那會回調觸摸方法

00:32:42.362 --> 00:32:43.530
一旦你觸摸臉部

00:32:43.597 --> 00:32:47.668
我們設計一個PlaygroundValue
消息 發送一個字符串

00:32:47.734 --> 00:32:51.872
例如“hello”
然後我們對自己

00:32:51.939 --> 00:32:55.876
調用發送
把這個消息發送給另一側

00:32:55.943 --> 00:32:57.878
現在發送方法來自哪兒？

00:32:58.345 --> 00:33:00.747
好的 通過聲明我們遵循

00:33:00.814 --> 00:33:03.250
PlaygroundLiveView
MessageHandler協議

00:33:03.317 --> 00:33:06.653
它會鎖定我們的類
它是自動完成的 很方便

00:33:07.254 --> 00:33:10.824
在協議擴展中定義了發送方法
它有一個默認的實現

00:33:10.891 --> 00:33:14.761
因爲這個類是實時視圖
調用發送方法

00:33:14.828 --> 00:33:17.764
會僅僅把消息傳送給實時視圖代理

00:33:17.831 --> 00:33:20.133
它會到達另一方

00:33:21.201 --> 00:33:22.102
就像這樣

00:33:22.402 --> 00:33:23.704
你在臉上點擊

00:33:24.204 --> 00:33:26.940
產生“hello”字符串
並且被傳送給實時視圖代理

00:33:27.574 --> 00:33:30.377
現在實時視圖代理要把消息

00:33:30.444 --> 00:33:33.347
傳送給另一側的監聽方

00:33:33.680 --> 00:33:35.482
看看我們怎麼把它們聯通起來？

00:33:36.650 --> 00:33:39.920
我們需要設置很多東西
因爲按照默認

00:33:40.153 --> 00:33:41.054
你在Contents.swift中
寫的代碼

00:33:41.154 --> 00:33:43.757
會停止運行

00:33:43.824 --> 00:33:45.559
在到達最後一條語句的時候

00:33:46.059 --> 00:33:47.694
然而在本例中我們不想這樣做

00:33:47.861 --> 00:33:50.664
我們想讓信息異步出現

00:33:50.764 --> 00:33:52.366
也就是晚一些出現

00:33:52.499 --> 00:33:54.768
我們要先抓取
Playground頁面

00:33:54.835 --> 00:33:57.504
然後告訴它我們不想讓它停止

00:33:57.771 --> 00:34:00.807
通過把needsIndefiniteExecution
屬性設置爲真

00:34:02.075 --> 00:34:04.878
我們請求實時視圖代理
就像我們前面做的那樣

00:34:05.078 --> 00:34:06.947
現在我們需要有某個東西

00:34:07.014 --> 00:34:09.815
作爲可以接收消息的代理的代理

00:34:09.917 --> 00:34:13.687
現在我要開始
已經有一個類了

00:34:14.353 --> 00:34:15.422
注意它遵循

00:34:15.489 --> 00:34:18.458
PlaygroundRemoteLiveView
ProxyDelegate協議

00:34:18.525 --> 00:34:22.563
這意味着我必須實現remoteLiveView
Proxy的接收方法

00:34:23.230 --> 00:34:24.130
好啦

00:34:24.197 --> 00:34:26.266
它將會被實時視圖代理調用

00:34:26.333 --> 00:34:29.837
我們可以把
Playground的值分開

00:34:29.902 --> 00:34:31.737
使用if case let語句

00:34:31.905 --> 00:34:34.675
可以對文本進行一些處理

00:34:35.775 --> 00:34:38.812
它定義了代理
我們要把它們聯通起來

00:34:38.879 --> 00:34:41.215
我們要把它實例化
然後把它的值賦給

00:34:41.348 --> 00:34:44.150
代理的代理參數 或者代理屬性

00:34:44.384 --> 00:34:45.752
現在完成了

00:34:46.353 --> 00:34:48.322
現在我們有
FaceViewController

00:34:48.422 --> 00:34:49.656
你的臉上點擊一下

00:34:49.755 --> 00:34:52.359
“Hello”打包作爲
PlaygroundValue

00:34:52.426 --> 00:34:55.362
被傳送給實時視圖代理
然後再傳送給

00:34:55.429 --> 00:34:58.198
我們剛剛創建的代理類

00:34:58.265 --> 00:35:01.568
它接收到消息
奇蹟就發生了

00:35:04.037 --> 00:35:07.107
我想指出這個PlaygroundValue
枚舉值讓我們

00:35:07.241 --> 00:35:10.944
有更多的選項
可以靜態的聲明原始值

00:35:11.011 --> 00:35:14.848
我們可以在兩個進程之間
來回傳遞它們

00:35:14.915 --> 00:35:18.986
你可以直接使用這些枚舉值
就像在剛纔的幻燈片中看到的那樣

00:35:19.186 --> 00:35:24.291
你也可以把對話操作
定義到Playgroundvalue中

00:35:24.358 --> 00:35:26.226
可以使用自己的數據結構

00:35:27.394 --> 00:35:31.098
另一個好處是鍵/值庫
也使用Playgroundvalue

00:35:31.164 --> 00:35:35.302
現在任務完成了 可以從這個模型中
導出或者導入數據

00:35:35.402 --> 00:35:39.873
這種工作可以用於雙向進程通訊
和保存語句

00:35:42.109 --> 00:35:47.347
記住Contents.swift在
左側運行的進程中

00:35:47.514 --> 00:35:49.616
它被稱爲主進程

00:35:49.850 --> 00:35:54.254
如果在你的Playground Book
頁面中有LiveView.swift文件

00:35:54.354 --> 00:35:58.926
它將會執行
在獨立的在線實時視圖中運行

00:35:58.992 --> 00:36:01.261
它在右側的進程中運行

00:36:01.328 --> 00:36:04.731
它的機制和我們以前的不同
所以請研究

00:36:04.798 --> 00:36:08.202
我們的參考實例和文檔
看看它是如何工作的

00:36:08.268 --> 00:36:10.604
所以你可以利用這些新玩意兒

00:36:11.872 --> 00:36:15.776
在編輯Playground Books的討論
快要結束的時候

00:36:15.843 --> 00:36:21.048
我想告訴你們 作爲內容編輯者

00:36:21.348 --> 00:36:24.918
你在iPad上實現了偉大的想法

00:36:25.285 --> 00:36:28.989
然後你把它同步到Mac上
看一下 你會注意的

00:36:29.056 --> 00:36:33.227
在頂部出現了一個和Contents
文件夾並列的新文件夾

00:36:33.360 --> 00:36:37.397
這兒記錄了編輯器中
發生的所有變化

00:36:37.531 --> 00:36:41.969
所以不要驚訝
當你在iPad上編輯內容

00:36:42.035 --> 00:36:44.905
瘋狂的在編輯器中輸入
和改變內容的時候

00:36:44.972 --> 00:36:46.940
你認爲它們都存進了
Contents.swift中

00:36:47.007 --> 00:36:49.409
但是當你在Mac上打開它的時候

00:36:49.476 --> 00:36:52.579
Contents.swift文件
回到了開始的狀態

00:36:52.646 --> 00:36:54.414
你做出的所有改變去哪兒了？

00:36:54.481 --> 00:36:55.816
這就是設計

00:36:56.817 --> 00:37:01.255
iPad上的Swift Playgrounds
從未改變編輯內容

00:37:01.588 --> 00:37:04.324
Swift Playgrounds儲存了
學習者改變的文本的dif格式的文檔

00:37:04.424 --> 00:37:06.960
位於Edits文件夾中
可能的話我們會重新加載它們

00:37:07.027 --> 00:37:08.795
這會使內容保持原始狀態

00:37:08.862 --> 00:37:11.398
這也是爲何Playground
Books可以被重置

00:37:13.967 --> 00:37:16.970
以上是簡要介紹

00:37:17.204 --> 00:37:21.375
新的Playground Book
格式底層設計的一部分

00:37:21.575 --> 00:37:24.978
剛纔說過 請到
developer.apple.com上

00:37:25.078 --> 00:37:27.915
獲得參考文檔和實例

00:37:27.981 --> 00:37:30.117
仔細分析我們內容團隊設計的
Playground Books

00:37:30.184 --> 00:37:33.453
那兒都有 我們想保證
你有足夠的資源

00:37:33.520 --> 00:37:35.022
創造出炫酷的東西

00:37:36.924 --> 00:37:39.493
現在我讓你們體驗了

00:37:39.560 --> 00:37:42.729
作爲作者在創造Playground
Books時的感受

00:37:42.930 --> 00:37:46.900
但是正如你們所料的
這個應用僅僅可以供你們塗鴉

00:37:46.967 --> 00:37:48.302
就像某種便籤簿一樣

00:37:48.368 --> 00:37:49.670
但是它很棒！

00:37:49.903 --> 00:37:52.306
下面有請我的同事Izzy

00:37:52.372 --> 00:37:56.176
展示一下他用Swift
Playgrounds做的一些東西

00:37:56.343 --> 00:37:57.177
Izzy

00:37:59.179 --> 00:38:00.380
謝謝你！Jonathan

00:38:02.583 --> 00:38:04.451
謝謝你！Jonathan
太棒了！

00:38:04.985 --> 00:38:08.488
現在直接進入我們的演示

00:38:11.892 --> 00:38:16.396
像你們一樣 我對從星期一以來
發佈的這些特徵

00:38:16.463 --> 00:38:19.366
和這些APIs也很興奮

00:38:19.433 --> 00:38:24.905
尤其是 我確實非常感興趣的
一個編程領域是

00:38:24.972 --> 00:38:27.975
我記得是程序內容生成

00:38:28.041 --> 00:38:30.210
這個思想是計算機能夠生成某個東西

00:38:30.310 --> 00:38:33.881
而且這個東西和現實世界很相似
這非常令我着迷

00:38:34.181 --> 00:38:37.351
所以當我看到GameKit
添加了支持這個的API

00:38:37.451 --> 00:38:40.954
我禁不住想立刻上手

00:38:42.556 --> 00:38:47.494
我還不太確信我需要的是什麼
但是當我看到這個新的APIs

00:38:47.561 --> 00:38:50.731
我看到他們添加了這個新函數叫做
GKPerlinNoiseSource

00:38:50.797 --> 00:38:54.701
在應用中有幫助
顯示了所有的文檔

00:38:54.768 --> 00:38:55.903
如果我點擊這兒的幫助

00:38:56.403 --> 00:39:00.807
我們可以看到
GKPerlinNoiseSource有一些特性

00:39:00.874 --> 00:39:04.878
讓它能夠生成自然現象
例如雲和土地

00:39:04.945 --> 00:39:06.680
那聽起來正是我想要的

00:39:07.781 --> 00:39:10.417
有了這個
我僅僅寫幾行代碼

00:39:10.484 --> 00:39:11.985
我就把它轉換成一張圖片

00:39:12.219 --> 00:39:13.820
我想看看我的圖片

00:39:14.655 --> 00:39:15.989
如果運行playground

00:39:16.056 --> 00:39:18.825
對於你們習慣於在桌面系統上
使用Playgrounds的人來說

00:39:18.892 --> 00:39:21.628
你會注意到在視圖的右邊
有一個結果工具欄

00:39:21.695 --> 00:39:23.630
也許你們一些人以前沒有看到這個

00:39:23.697 --> 00:39:27.734
在你的playground運行時
每一行產生一個結果

00:39:27.935 --> 00:39:33.540
我在上面點擊
會彈出內容的執行結果

00:39:33.874 --> 00:39:37.311
現在有點兒小
我寫上更多的代碼

00:39:37.544 --> 00:39:39.980
能夠讓它放大一點並且保持像素不變

00:39:40.314 --> 00:39:41.748
因爲我考慮到像素問題

00:39:41.815 --> 00:39:43.617
後面我們再詳細討論

00:39:43.817 --> 00:39:47.521
現在我們有了一個更大的圖像
我們可以用

00:39:47.588 --> 00:39:48.789
添加視圖按鈕
把它添加到代碼中去

00:39:50.290 --> 00:39:52.492
讓我們滾動代碼的時候
它會隨着一起滾動

00:39:53.961 --> 00:39:57.397
現在它很大
我們想讓圖像看起來是個圖像

00:39:57.464 --> 00:40:01.368
我們製作了噪聲
我們還想用它生成3D土地

00:40:01.468 --> 00:40:04.238
我們要做的是
一個像素一個像素地完成

00:40:04.304 --> 00:40:08.075
整個圖片
當圖像是深色時

00:40:08.175 --> 00:40:10.677
我們想讓它成爲3D土地圖像
的較低區域

00:40:10.744 --> 00:40:14.748
當圖像是淺色的
我們想讓它成爲土地的較高區域

00:40:14.815 --> 00:40:16.683
你可以看到在右上角

00:40:16.750 --> 00:40:19.386
是顏色較深的區域
那將是較低的區域

00:40:19.486 --> 00:40:22.756
在左下角是淺色區域
那將是較高區域

00:40:22.823 --> 00:40:27.861
所以我僅僅寫了用戶界面圖像
的一個小擴展

00:40:28.195 --> 00:40:31.932
它是一個8位灰度的圖像
沿着橫向

00:40:31.999 --> 00:40:35.068
和縱向排列
它被稱爲地塊

00:40:35.502 --> 00:40:38.472
在每個位置有8位灰度值

00:40:38.705 --> 00:40:40.774
我們還想把它向上排列

00:40:41.175 --> 00:40:45.746
因爲我們的圖像非常小
十乘十像素的

00:40:46.613 --> 00:40:50.484
8位圖像有255個值 聽起來有點高

00:40:50.551 --> 00:40:52.653
所以我寫了一個小的bucket函數

00:40:52.719 --> 00:40:54.488
僅僅爲了證明它能運行

00:40:54.555 --> 00:41:00.127
我取盡了所有的整數值

00:41:00.527 --> 00:41:06.900
你可以看看這兒的彈出圖像
它成了一個漂亮的梯子函數

00:41:08.335 --> 00:41:11.939
我們的取值範圍僅僅是從0到4
而不是從0到255

00:41:12.005 --> 00:41:15.275
然後用圖像塊填充我們的圖像

00:41:15.609 --> 00:41:18.445
我們得到一個這樣的圖形

00:41:19.112 --> 00:41:20.714
很有趣

00:41:20.814 --> 00:41:25.052
看起來很酷
但它還不是真正的3D土地

00:41:25.118 --> 00:41:29.656
你看在我的圖像中每一個點
有一個關聯的高度值

00:41:30.424 --> 00:41:32.960
它還不是我想要的

00:41:33.360 --> 00:41:35.696
我常常在這兒卡住

00:41:35.796 --> 00:41:38.966
我還沒有深入瞭解3D APIs

00:41:39.032 --> 00:41:42.469
來生成我想要的3D土地模型

00:41:42.536 --> 00:41:47.174
我也沒有任何3D技巧
像設計師那樣手工實現

00:41:47.541 --> 00:41:48.542
但是我恰好知道

00:41:48.609 --> 00:41:53.013
學習編碼playground
裏面有一個創建你的世界頁面

00:41:53.080 --> 00:41:57.117
我可以用它來繼續我的試驗

00:41:57.184 --> 00:41:59.586
所以我來到
學習編碼playground

00:41:59.653 --> 00:42:02.189
這就是那個頁面

00:42:02.322 --> 00:42:06.360
這是創建你的世界頁面
我僅僅是運行它

00:42:06.927 --> 00:42:09.930
你可以看到
我們正在雲中漂浮

00:42:11.365 --> 00:42:13.600
我要把以前寫的代碼粘貼過來

00:42:14.067 --> 00:42:17.037
我要輸入一些代碼
先讓我把實時視圖隱藏起來

00:42:18.505 --> 00:42:20.807
這兒有我們的

00:42:22.209 --> 00:42:28.949
這兒以前是賦值的語句
現在我想把它變成一個3D世界

00:42:29.249 --> 00:42:34.721
現在創建你的世界頁面爲我們提供了
一個世界 這正是我們想要的

00:42:34.988 --> 00:42:38.192
在我的世界上我們可以放置

00:42:40.260 --> 00:42:41.094
地塊...

00:42:42.496 --> 00:42:44.264
這是位置的x和y座標

00:42:44.331 --> 00:42:48.902
我們不需要考慮值
我們需要設置一個高度

00:42:51.205 --> 00:42:53.073
我們想要調用bucket函數

00:42:54.107 --> 00:42:54.942
在我們的值上

00:42:56.076 --> 00:42:58.478
然後是高度

00:43:01.481 --> 00:43:03.083
我們想顯示一些地塊

00:43:06.420 --> 00:43:09.790
我很喜歡這個動畫
我想讓它多次運行

00:43:10.624 --> 00:43:11.859
如果我運行這個...

00:43:17.664 --> 00:43:21.401
哦 我忘了加括號 和Max一樣

00:43:23.537 --> 00:43:24.671
如果運行它

00:43:27.708 --> 00:43:30.978
你可以看到
我們在我的世界上堆積地塊兒

00:43:31.712 --> 00:43:34.014
運行的很快
但這並不是我想要的

00:43:34.081 --> 00:43:37.117
地面上有一些奇怪的空白

00:43:37.718 --> 00:43:38.852
我不想那樣

00:43:38.919 --> 00:43:41.088
我不是在創造飛行島那樣
的魔幻世界

00:43:41.154 --> 00:43:43.056
我想讓它看起來更像地面

00:43:43.290 --> 00:43:45.125
所以讓我們停止

00:43:45.559 --> 00:43:48.829
起初我不理解爲什麼產生了
這些空白的地面

00:43:48.929 --> 00:43:50.697
但是經過思考以後 我知道了

00:43:50.998 --> 00:43:52.999
顯然是因爲高度是0

00:43:53.066 --> 00:43:55.702
因爲範圍是從0到4
而不是從1到5

00:43:55.802 --> 00:43:57.671
0處沒有任何地塊

00:43:57.871 --> 00:44:00.841
所以有0的地塊兒可以設置爲水域

00:44:01.341 --> 00:44:03.710
如果高度

00:44:05.279 --> 00:44:06.613
小於1

00:44:08.048 --> 00:44:09.183
在我們的世界上

00:44:10.584 --> 00:44:13.620
我想放置爲水域

00:44:17.691 --> 00:44:19.459
現在若我點擊If語句

00:44:20.127 --> 00:44:23.330
用我們的結構化編程助手
可以加入一個else語句

00:44:23.564 --> 00:44:26.834
放入前面的語句

00:44:29.870 --> 00:44:32.005
現在我想讓它速度加快

00:44:32.072 --> 00:44:35.309
我的世界有一個速度指令

00:44:36.443 --> 00:44:38.011
我想提高速度

00:44:40.781 --> 00:44:41.815
讓我們...

00:44:43.884 --> 00:44:46.153
好 完美

00:44:46.820 --> 00:44:49.289
好 讓我們運行一下 看看結果

00:44:54.428 --> 00:44:56.230
現在你可以看到 我的世界中有了水

00:44:58.799 --> 00:45:00.000
太酷了

00:45:06.440 --> 00:45:09.877
我們從API草稿和一個
空白的playground開始

00:45:10.444 --> 00:45:14.515
然後我們碰到了障礙 我們來到
學習代碼playground

00:45:14.615 --> 00:45:16.083
學習代碼playground

00:45:16.149 --> 00:45:18.619
對於初學者來說是非常非常有價值的工具

00:45:18.685 --> 00:45:23.290
對於熟練的開發者來說它也是
強大的平臺 它可以幫助他們

00:45:23.390 --> 00:45:24.858
瀏覽APIs
實現他們的想法

00:45:26.226 --> 00:45:27.427
所以真是太酷了

00:45:27.494 --> 00:45:31.532
現在你可以有整套的
iOS APIs

00:45:31.598 --> 00:45:34.001
其中包括有像Core
Bluetooth這樣的東西

00:45:34.101 --> 00:45:36.537
我要換到另一個iPad上

00:45:39.606 --> 00:45:42.743
這有一個playground
使用core Bluetooth

00:45:43.844 --> 00:45:45.212
可以和外部設備通訊

00:45:48.315 --> 00:45:52.619
這是一個Sphero
SPRK Plus機器人

00:45:53.620 --> 00:45:56.290
我們能做的是
我要將它放置在地面上

00:45:56.356 --> 00:45:58.025
因爲我們需要一些空間

00:45:58.392 --> 00:45:59.526
現在我能做的是

00:46:02.196 --> 00:46:03.430
當我運行我的代碼時

00:46:05.199 --> 00:46:06.266
Sphero

00:46:07.668 --> 00:46:10.804
會閃爍 並且開始開動

00:46:11.705 --> 00:46:14.107
現在它以方形路線移動

00:46:14.408 --> 00:46:21.281
從iPad上我使用Core
Bluetooth控制第三方機器人

00:46:21.348 --> 00:46:22.850
太有趣了

00:46:31.458 --> 00:46:34.695
我想讓它更有趣一些

00:46:34.795 --> 00:46:36.763
我先把它先隱藏起來

00:46:38.699 --> 00:46:39.867
我要做的是...

00:46:42.970 --> 00:46:44.438
添加一些顏色代碼

00:46:47.641 --> 00:46:49.977
有結構化編程助手

00:46:50.043 --> 00:46:54.781
我們可以拖拽成了一個數組
添加一些元素

00:46:58.151 --> 00:46:59.920
我要設置這些顏色

00:47:06.960 --> 00:47:09.496
你知道這都是一些很熟悉的顏色

00:47:09.563 --> 00:47:12.533
但我的手指放不上去

00:47:18.672 --> 00:47:22.242
在rest函數中
我們要讓它重複其中的三種顏色

00:47:33.954 --> 00:47:36.023
不要白色

00:47:36.490 --> 00:47:38.992
我們把它設置成其它顏色

00:47:46.567 --> 00:47:49.970
讓我們再看一下

00:47:51.738 --> 00:47:52.739
運行代碼

00:47:56.109 --> 00:48:01.582
現在當我們開動Sphero時
顏色在不斷變化

00:48:10.290 --> 00:48:11.291
停止

00:48:12.492 --> 00:48:13.627
確實很有趣

00:48:13.827 --> 00:48:16.997
現在讓Matt回來做個總結

00:48:24.304 --> 00:48:25.839
非常感謝Izzy

00:48:26.073 --> 00:48:28.475
真是太酷了

00:48:31.478 --> 00:48:32.946
今天我們看到了很多

00:48:33.480 --> 00:48:36.617
首先是Max
他展示了

00:48:36.683 --> 00:48:39.920
如何使用Swift Playgrounds
中很棒的觸摸控制

00:48:39.987 --> 00:48:43.557
用各種方式和Swift代碼交互
以前我們從來不能做到

00:48:43.624 --> 00:48:47.294
Jonathan演示瞭如何編譯
吸引人的內容

00:48:47.361 --> 00:48:50.030
使用Playground
Books中的新特性

00:48:50.430 --> 00:48:55.536
你可以在編輯程序的同時
瀏覽或者關閉程序的執行結果

00:48:55.836 --> 00:48:58.639
Izzy給你們展示了你可以不受

00:48:58.972 --> 00:49:01.041
學習代碼中的內容的限制

00:49:01.108 --> 00:49:04.678
你可以使用iOS SDK做實驗
和物理設備交互

00:49:04.745 --> 00:49:07.447
甚至構造你自己的世界

00:49:08.782 --> 00:49:12.052
我們認爲你能用
Swift Playgrounds

00:49:12.186 --> 00:49:14.788
做很多很酷的東西

00:49:14.922 --> 00:49:16.823
我們都等不及要看你能用它做出些什麼

00:49:18.659 --> 00:49:19.660
謝謝

00:49:23.230 --> 00:49:26.200
更多信息請參閱
developer.apple.com

00:49:26.266 --> 00:49:27.467
這是演講408

00:49:28.202 --> 00:49:31.104
還有一些相關的演講可能你會感興趣
查閱一下吧

00:49:31.338 --> 00:49:34.408
感謝所有的人
請關注WWDC的其它部分