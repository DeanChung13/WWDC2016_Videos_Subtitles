00:00:20.020 --> 00:00:22.923 
用SiriKit擴展你的應用

00:00:28.595 --> 00:00:29.429 
大家好

00:00:29.563 --> 00:00:31.098 
我是Vineet Khosla

00:00:31.198 --> 00:00:34.868 
今天我將與Diana Huang
和Scott Andrus一起

00:00:35.402 --> 00:00:39.640 
向你們展示如何利用SiriKit
擴展你們的應用程序

00:00:42.309 --> 00:00:43.944 
在簡介的部分

00:00:44.011 --> 00:00:47.414 
大家瞭解了一款支持SiriKit
的應用由三個核心部分組成

00:00:48.448 --> 00:00:51.919 
你們有意圖擴展

00:00:52.519 --> 00:00:54.855 
你們有意圖
用戶界面擴展

00:00:54.922 --> 00:00:57.057 
當然 還有你們的應用程序

00:00:58.692 --> 00:01:01.862 
在意圖擴展下
我們有三個主要的方法

00:01:01.929 --> 00:01:04.665 
它們分別是解析和
確認還有處理

00:01:05.999 --> 00:01:10.971 
在這個部分
我們將探索三個內容

00:01:11.238 --> 00:01:15.843 
首先 我們會聊一下如何讓
你們的應用適用SiriKit

00:01:16.410 --> 00:01:21.949 
然後 我們會聊如何添加
你們的第一個意圖擴展

00:01:22.482 --> 00:01:26.386 
最後 我們會聊一下
如何將你們的應用程序

00:01:26.453 --> 00:01:30.190 
UI和樣式集成到
Siri experience

00:01:30.490 --> 00:01:33.727 
通過編寫I意圖用戶界面擴展

00:01:35.596 --> 00:01:41.802 
在這個部分 我們將使用最愛的
聊天應用獨角獸快信

00:01:42.603 --> 00:01:44.505 
你們有些人一定知道這款應用

00:01:44.605 --> 00:01:48.008 
它是一款人見人愛的應用
被Siri團隊內部用來

00:01:48.075 --> 00:01:49.843 
與我們的獨角獸們聊天

00:01:50.177 --> 00:01:54.615 
這是一款標準的消息應用
是可以用來收發信息

00:01:54.681 --> 00:01:58.318 
但它具備一些特有的不完美之處

00:01:58.385 --> 00:02:00.420 
它的特殊使得它能爲我們的目的服務

00:02:00.487 --> 00:02:03.090 
今天我們將會讓它支持SiriKit

00:02:06.093 --> 00:02:09.128 
SiriKit是構建在擴展之上的

00:02:09.729 --> 00:02:12.766 
但是 在你們的應用與擴展集成之前

00:02:12.833 --> 00:02:16.937 
可爲其與SiriKit相適做些準備

00:02:17.671 --> 00:02:20.507 
我先介紹一些涉及到的地方

00:02:21.308 --> 00:02:26.280 
我們將會聊一下如何準備你們的應用
通過轉移一些你們的代碼

00:02:26.346 --> 00:02:28.148 
至embedded
frameworks

00:02:28.215 --> 00:02:30.951 
Embedded frameworks
是一個很好的重用代碼的方式

00:02:31.018 --> 00:02:33.420 
在應用與擴展之間

00:02:34.321 --> 00:02:37.357 
轉移一些代碼至
embedded frameworks

00:02:37.424 --> 00:02:42.129 
也將會提供給我們一個
很好的單元測試的機會

00:02:42.563 --> 00:02:48.235 
然後 最後我們將簡單介紹一下
什麼是合理的總體結構

00:02:48.535 --> 00:02:50.704 
用於構建你們的擴展

00:02:50.771 --> 00:02:54.341 
基於你們的應用所關聯的意圖

00:02:55.375 --> 00:02:59.446 
現在 讓我們進一步得看一下
embedded frameworks

00:03:01.548 --> 00:03:05.052 
你們的擴展需要
執行和應用一樣的任務

00:03:05.118 --> 00:03:06.820 
它要能操控意圖

00:03:06.887 --> 00:03:10.891 
還有當需要時也能渲染UI

00:03:11.191 --> 00:03:14.661 
利用embedded frameworks
是很好的重用代碼方式

00:03:14.728 --> 00:03:17.898 
在應用之間 同樣也在擴展之間

00:03:17.965 --> 00:03:21.935 
因爲你們要保證用戶有一個統一的體驗

00:03:22.002 --> 00:03:24.071 
無論他們是從你的應用

00:03:24.137 --> 00:03:27.975 
或者是通過SiriKit進入程序

00:03:29.576 --> 00:03:32.980 
以獨角獸快信爲例
我們找到了一些地方

00:03:33.046 --> 00:03:36.817 
應該可以被移到
embedded frameworks

00:03:36.884 --> 00:03:41.355 
我們看了一下獨角獸快信的網絡層

00:03:41.421 --> 00:03:43.757 
這是所有關於傳送

00:03:43.824 --> 00:03:45.993 
和接收信息的部分

00:03:46.059 --> 00:03:50.397 
我們意識到這一部分代碼

00:03:50.464 --> 00:03:52.533 
很適合被全部移至
embedded frameworks

00:03:52.599 --> 00:03:56.637 
進而 它能被我的
應用和擴展重複調用

00:03:57.738 --> 00:04:00.807 
在完成以上的移動後
我們看了一下數據模型

00:04:01.175 --> 00:04:06.513 
你們的應用和擴展應該使用
同一個數據模型

00:04:06.580 --> 00:04:10.350 
在我們的聊天應用裏 它是一個數據庫

00:04:10.417 --> 00:04:13.420 
和其讀寫方法

00:04:13.487 --> 00:04:15.923 
它同樣可以被移到一個
embedded framework裏

00:04:16.223 --> 00:04:19.159 
被應用和擴展調用

00:04:20.527 --> 00:04:26.633 
在完成上述的移動後
我們看了一下決策邏輯

00:04:27.267 --> 00:04:29.603 
這是你們應用的業務邏輯

00:04:29.770 --> 00:04:31.438 
在早些時候我們已經提過

00:04:31.505 --> 00:04:34.341 
我們有解析和
確認還有處理方法

00:04:34.842 --> 00:04:39.546 
這三個方法將與你們
應用的實際業務邏輯一一對應

00:04:39.613 --> 00:04:43.116 
你們應該確保應用

00:04:43.517 --> 00:04:46.320 
和意圖擴展

00:04:46.386 --> 00:04:49.623 
提供給你們用戶一致的體驗
當他們嘗試着去

00:04:49.690 --> 00:04:53.660 
完成一個任務
無論他們從哪裏開始

00:04:53.727 --> 00:04:58.532 
所以我們也將決策邏輯移到了
一個embedded framework裏

00:04:59.466 --> 00:05:03.170 
最後若你的應用與意圖關聯

00:05:03.237 --> 00:05:07.908 
需要讓UI返回至SiriKit

00:05:08.308 --> 00:05:11.912 
那部分代碼也應該被移至
embedded framework

00:05:11.979 --> 00:05:14.147 
那樣 你可以重複調用代碼
同樣

00:05:14.214 --> 00:05:18.519 
提供給你們用戶一個一致的體驗

00:05:18.585 --> 00:05:20.521 
無論你們用戶的入口點是
你們的應用

00:05:20.587 --> 00:05:23.257 
或是一個意圖擴展

00:05:26.727 --> 00:05:30.330 
我建議大家觀看一個2015年的講座

00:05:30.397 --> 00:05:31.965 
應用拓展最佳實踐

00:05:32.032 --> 00:05:34.301 
我看了這個講座
我感到很受益

00:05:36.537 --> 00:05:41.441 
在轉移了大部分我們的代碼至
embedded frameworks之後

00:05:41.909 --> 00:05:46.280 
這給我們提供了一個很好的機會
去寫一些高質量的單元測試

00:05:46.847 --> 00:05:49.550 
我知道大家會覺得這是
一個老生常談的問題

00:05:49.616 --> 00:05:54.121 
我們在座的所有工程師
都十分會寫單元測試

00:05:54.188 --> 00:05:55.989 
我們都遵循測試驅動開發

00:05:56.056 --> 00:05:57.824 
我相信每一次都是這樣的

00:05:58.425 --> 00:06:00.994 
但我們轉移這些代碼

00:06:01.094 --> 00:06:02.863 
至一個embedded
framework將會提供給你們

00:06:02.930 --> 00:06:05.933 
一個新的機會去寫一些
高質量的單元測試

00:06:06.500 --> 00:06:09.570 
特別是針對SiriKit

00:06:09.803 --> 00:06:13.006 
你們可創建一些模擬的意圖

00:06:13.073 --> 00:06:16.610 
然後寫一些測試
確保你們的應用

00:06:16.677 --> 00:06:20.047 
和擴展有正確的響應

00:06:20.347 --> 00:06:22.449 
你們無需實時的和Siri進行溝通

00:06:22.516 --> 00:06:26.854 
你們可以模擬期望中從Siri那裏
接收到的意圖對象

00:06:26.920 --> 00:06:29.756 
然後 你們可以寫一些線下的測試

00:06:31.692 --> 00:06:35.829 
最後 讓我們來思考一下
怎樣構建你們的應用

00:06:36.029 --> 00:06:37.998 
使其有合理的擴展的數量

00:06:38.932 --> 00:06:42.236 
一般來說 一個應用
會與多個意圖關聯

00:06:42.302 --> 00:06:44.404 
因爲 應用要會執行多個任務

00:06:44.471 --> 00:06:49.610 
例子裏獨角獸快信使用
SendMessageIntent

00:06:49.676 --> 00:06:52.946 
但讓我們假想一下
我們想添加一個新的功能

00:06:53.013 --> 00:06:55.349 
我們可以用它來進行視屏和音頻通話

00:06:55.782 --> 00:06:59.319 
那問題是我們如何構建我們的擴展？

00:06:59.553 --> 00:07:03.590 
是否該把操控所有意圖的
意圖放在一個擴展裏？

00:07:03.824 --> 00:07:07.594 
但這樣會使我們的代碼體積變得龐大
進而難以管理

00:07:08.929 --> 00:07:10.797 
我們可以使用另一種構建

00:07:10.864 --> 00:07:12.299 
雖然不是那麼的簡潔

00:07:12.366 --> 00:07:17.037 
把所有意圖的操控分開
放在獨立的擴展裏

00:07:17.671 --> 00:07:20.007 
那看起來不錯 但你也許會

00:07:20.807 --> 00:07:22.609 
重複寫些模版式的代碼

00:07:22.676 --> 00:07:25.546 
也會創建一些多餘的擴展

00:07:25.612 --> 00:07:28.148 
導致對內存施加不必要的壓力

00:07:29.249 --> 00:07:31.385 
那在獨角獸快信裏

00:07:31.451 --> 00:07:33.987 
我的宗旨是

00:07:34.054 --> 00:07:38.659 
考慮如何將有關係的意圖分類到一起

00:07:39.126 --> 00:07:44.531 
在我們的例子裏
我們覺得視頻和音頻的意圖

00:07:44.598 --> 00:07:47.568 
可以被自然地分類到同一個擴展裏

00:07:47.634 --> 00:07:52.439 
因爲這樣可以讓我們
最大限度地利用代碼

00:07:53.307 --> 00:07:58.612 
同時 消息發送的意圖
可以被放在一個分開獨立的擴展裏

00:08:00.147 --> 00:08:03.717 
總而言之 沒有一個一勞永逸的辦法

00:08:03.784 --> 00:08:05.552 
你們是最瞭解你們的應用的人

00:08:05.619 --> 00:08:09.223 
你們知道你們的應用
會使用哪些意圖

00:08:09.289 --> 00:08:12.659 
那你們需要選擇一種構件
它能確保

00:08:12.726 --> 00:08:15.729 
你們的代碼容易被管理 同時

00:08:15.796 --> 00:08:19.466 
不會創建過多的擴展
進而 對內存施加不必要的壓力

00:08:21.568 --> 00:08:24.238 
經過以上的討論之後

00:08:24.338 --> 00:08:28.175 
你的應用已準備好採用SiriKit

00:08:28.242 --> 00:08:31.445 
爲了幫助我們寫我們的第一個意圖擴展

00:08:31.512 --> 00:08:33.480 
我邀請Diana上臺

00:08:42.990 --> 00:08:43.857 
謝謝Vineet

00:08:48.395 --> 00:08:49.463 
大家好

00:08:49.530 --> 00:08:53.367 
我是Diana Huang
我想在這裏和你們聊一下

00:08:53.433 --> 00:08:57.771 
如何創建第一個能與Siri交流
的意圖擴展

00:08:57.838 --> 00:09:01.542 
在你們的應用已經完全
準備好採用SiriKit的情況下

00:09:02.342 --> 00:09:07.915 
我也將會用Xcode向你們展示
獨角獸快信的例子

00:09:09.416 --> 00:09:15.422 
那讓我們現在開始
你們需要遵循有三個步驟

00:09:16.490 --> 00:09:20.761 
首先 你們要添加一個I
意圖擴展 target到你的應用

00:09:21.428 --> 00:09:26.433 
接下來 你們要設置這個擴展的
Info.plist

00:09:27.334 --> 00:09:31.972 
最後 你們需要看一下這個擴展的
principal類

00:09:33.006 --> 00:09:35.943 
讓我們來分別看一下這三個步驟

00:09:37.778 --> 00:09:40.214 
要添加一個I意圖擴展 target

00:09:40.280 --> 00:09:44.818 
你需要依次進入Xcode文件
新建Target

00:09:45.752 --> 00:09:48.989 
然後從列表裏選擇意圖擴展

00:09:49.790 --> 00:09:52.659 
對於你們曾經使用過擴展的人

00:09:52.726 --> 00:09:55.729 
就和創建其它的擴展
targets方式一樣

00:09:57.631 --> 00:10:02.002 
現在 讓我們來看一下擴展的
Info.plist

00:10:03.737 --> 00:10:06.907 
我們看到現有的
NSExtension關鍵值

00:10:07.508 --> 00:10:11.078 
然後 在裏面我們看到
NSExtensionAttributes

00:10:11.912 --> 00:10:13.480 
在字典裏面

00:10:13.547 --> 00:10:17.184 
我們引進兩個新的iOS X的關鍵值

00:10:18.151 --> 00:10:22.189 
分別是IntentsSupported和
IntentsRestricted WhileLocked

00:10:23.624 --> 00:10:27.794 
IntentsSupported
是一個必要的關鍵值

00:10:27.861 --> 00:10:30.631 
爲描述你們的擴展的具體功能

00:10:31.231 --> 00:10:35.202 
換句話說 你們需要將一組
意圖類的名字添加到

00:10:35.269 --> 00:10:40.607 
在IntentsSupported
下的一個數組進而才能被擴展支持

00:10:42.309 --> 00:10:46.213 
IntentsRestricted WhileLocked
是一個可選的關鍵值

00:10:46.280 --> 00:10:48.582 
爲描述鎖屏狀態的行爲

00:10:50.250 --> 00:10:54.855 
在默認的情況下
Siri限制了一些特定的域

00:10:54.922 --> 00:10:57.724 
爲在鎖屏狀態下不被隨意調用

00:10:58.258 --> 00:11:02.396 
例子有 付款域或圖片搜索域

00:11:03.330 --> 00:11:07.568 
但如果你們的應用有比Siri
更高的安全要求

00:11:07.634 --> 00:11:11.905 
那你們可以把想限制的意圖類
加入到一個數組

00:11:11.972 --> 00:11:14.174 
在IntentsRestricted
WhileLocked之下

00:11:15.042 --> 00:11:17.945 
這樣就可以指示Siri
請提示用戶

00:11:18.011 --> 00:11:22.916 
先解除鎖屏
再調用你們的擴展來操控意圖

00:11:25.152 --> 00:11:28.989 
現在我們擴展的Info.plist
也已經被設置好了

00:11:30.224 --> 00:11:32.559 
接着讓我們看看principal類

00:11:33.760 --> 00:11:36.930 
意圖擴展的principal類

00:11:36.997 --> 00:11:40.300 
必須是INExtension的子類

00:11:41.034 --> 00:11:45.439 
這樣符合INIntentHandlerProviding協議

00:11:46.440 --> 00:11:50.444 
這個協議只有一個叫
handlerForintent的方法

00:11:52.346 --> 00:11:55.215 
這個方法的名字
清楚地解釋了它的用途

00:11:55.749 --> 00:12:00.053 
你們有一個意圖對象
你們需要返回一個Handler對象

00:12:00.821 --> 00:12:04.558 
請注意返回的Handler對象
必須符合

00:12:04.625 --> 00:12:06.994 
具體的意圖操控協議

00:12:08.462 --> 00:12:12.966 
以獨角獸快信爲例
我們想支持INSendMessageIntent

00:12:13.934 --> 00:12:18.505 
那當任何時候我們傳遞一個
INSendMessageIntent的實例

00:12:18.939 --> 00:12:24.178 
我們將返回一個符合
INSendMessageIntent操控協議的handler

00:12:26.180 --> 00:12:29.016 
現在我們已經討論過了所有的三個步驟

00:12:29.383 --> 00:12:33.187 
接下來讓我們根據以上的步驟
將獨角獸快信在Xcode裏打開

00:12:35.556 --> 00:12:40.093 
這裏有我們已經在Xcode裏
打開了的獨角獸快信項目

00:12:40.694 --> 00:12:45.199 
時間關係 我已創建好了意圖擴展

00:12:45.799 --> 00:12:48.202 
讓我們直接來看一下第二步

00:12:48.402 --> 00:12:51.104 
設置Info.plist

00:12:53.440 --> 00:12:57.911 
首先 讓我們將它放大些
那樣可以看得更清楚

00:13:02.082 --> 00:13:02.916 
好的

00:13:02.983 --> 00:13:05.786 
在這裏我們看見
NSExtension字典

00:13:06.820 --> 00:13:11.859 
如果我們將它展開 你會看到
NSExtensionAttributes字典

00:13:12.726 --> 00:13:15.662 
如果我們進一步地展開這個字典

00:13:15.729 --> 00:13:18.265 
你會看見那兩個
我們之前介紹的新關鍵值

00:13:19.099 --> 00:13:22.970 
IntentsSupported和
IntentsRestricted WhileLocked

00:13:24.505 --> 00:13:28.041 
首先 爲了支持
INSentMessageIntent

00:13:28.442 --> 00:13:31.912 
在IntentSupported
數組下添加一個項目

00:13:32.913 --> 00:13:35.148 
我們加入意圖類的名字

00:13:35.415 --> 00:13:38.118 
INSendMessageIntent

00:13:39.887 --> 00:13:42.956 
然後 讓我們看一下鎖屏狀態的行爲

00:13:44.024 --> 00:13:49.263 
因爲獨角獸快信
是一款聊天應用

00:13:49.329 --> 00:13:52.132 
被用於獨角獸之間的私密交流

00:13:52.199 --> 00:13:54.635 
獨角獸們很注重隱私

00:13:54.701 --> 00:13:56.570 
所以 我們決定將它鎖定

00:13:56.637 --> 00:13:59.640 
用戶需要先將設備解鎖

00:13:59.706 --> 00:14:03.110 
才能通過Siri發送
獨角獸快信消息

00:14:04.311 --> 00:14:11.151 
爲達到效果 我們將在IntentRestricted
WhileLocked的數組下添加一個項目

00:14:11.752 --> 00:14:14.755 
同樣的 添加意圖類的名字

00:14:15.289 --> 00:14:16.890 
INSendMessageIntent

00:14:18.325 --> 00:14:21.828 
這樣我們就完成了對擴展的
Info.plist的設置

00:14:23.630 --> 00:14:29.903 
在第三個步驟裏我們看看
擴展的principal類

00:14:31.338 --> 00:14:33.707 
當你們創建意圖擴展 target時

00:14:33.974 --> 00:14:37.010 
一個principal類
會被自動地創建

00:14:37.444 --> 00:14:42.449 
我重命名了我的principal類
爲UCIntentHandler

00:14:42.716 --> 00:14:45.385 
它是INExtension一個子類

00:14:47.421 --> 00:14:50.290 
這裏我們還有意圖方法
的handler

00:14:51.859 --> 00:14:55.662 
你可以看到默認的實現返回self

00:14:56.296 --> 00:15:00.934 
它返回一個principal類
本身的實例

00:15:02.202 --> 00:15:04.738 
但爲了讓我們的代碼更清晰

00:15:05.205 --> 00:15:07.074 
更容易被擴張

00:15:07.140 --> 00:15:11.879 
如果我們想將來讓這個擴展支持
更多的意圖

00:15:12.312 --> 00:15:16.316 
那我們要創建一個獨立的
intent handler類

00:15:17.651 --> 00:15:19.219 
我們現在就建立這個類

00:15:20.821 --> 00:15:22.356 
通過創建一個新的文件

00:15:24.758 --> 00:15:27.794 
取名爲UCSentMessage
IntentHandler

00:15:30.564 --> 00:15:35.569 
我們也將導入一些框架
然後加入一些類別的聲明

00:15:37.571 --> 00:15:40.440 
這裏我們導入意圖框架

00:15:40.908 --> 00:15:43.343 
它包含許多SiriKit API

00:15:45.345 --> 00:15:48.081 
我們也將UnicornCore
框架導入

00:15:48.515 --> 00:15:51.185 
那是我們創建的embedded
framework

00:15:51.251 --> 00:15:56.089 
通過在應用與擴展之間分享代碼

00:15:57.658 --> 00:16:01.395 
這就是我們的
UCSentMessage IntentHandler類

00:16:01.461 --> 00:16:05.065 
它符合
INSentMessage IntentHandling協議

00:16:06.433 --> 00:16:09.269 
好的
現在然我們回到principal類

00:16:09.636 --> 00:16:11.839 
取代這裏現有的實現

00:16:12.706 --> 00:16:18.912 
讓它爲傳遞進來的意圖返回一個
UCSentMessageIntentHandler的實例

00:16:18.979 --> 00:16:21.882 
類型僅限爲
INSentMessageIntent

00:16:22.916 --> 00:16:26.119 
至於其它的意圖
我們將返回nil

00:16:28.455 --> 00:16:29.356 
大功告成

00:16:29.423 --> 00:16:31.325 
我們的三個步驟

00:16:31.391 --> 00:16:34.761 
用來添加和設置你們的第一個意圖擴展

00:16:35.662 --> 00:16:37.831 
現在讓我們來看一下應用邏輯

00:16:41.335 --> 00:16:45.472 
希望從SiriKit的簡介部分

00:16:45.539 --> 00:16:47.741 
和Vineet的重述

00:16:48.141 --> 00:16:53.480 
意圖擴展和Siri的互動
會被分成三個階段

00:16:53.847 --> 00:16:56.984 
解析和確認
還有處理

00:16:58.318 --> 00:17:00.454 
讓我們先來聊一下解析

00:17:02.122 --> 00:17:06.292 
在解析階段你要確認

00:17:06.359 --> 00:17:11.265 
和理清每一個意圖參數值

00:17:12.532 --> 00:17:16.435 
所以 我們給每一個
意圖的參數提供了

00:17:16.603 --> 00:17:20.540 
解析方法在意圖操控協議裏

00:17:21.742 --> 00:17:25.012 
那你們或許會問我們應該
實現它們之間的哪一個？

00:17:25.846 --> 00:17:27.414 
試想

00:17:27.981 --> 00:17:32.019 
你是否需要在Siri的幫助下獲取

00:17:32.186 --> 00:17:34.855 
意圖參數值的最終值？

00:17:36.023 --> 00:17:37.591 
如果回答是

00:17:37.658 --> 00:17:42.496 
那你或許應該要實現
這個參數的解析方法

00:17:44.231 --> 00:17:48.101 
讓我們來看一下
獨角獸快信的例子

00:17:49.803 --> 00:17:53.373 
發送消息時 我們需要收件人

00:17:54.341 --> 00:17:58.045 
爲了決定最終收件人的值

00:17:58.111 --> 00:18:04.551 
我們需要在獨角獸快信
地址簿裏查詢聯繫人

00:18:05.819 --> 00:18:09.022 
查詢結果可能是多樣的

00:18:10.257 --> 00:18:12.426 
在最簡單的情況下

00:18:12.492 --> 00:18:14.962 
我們只找到一個聯繫人

00:18:16.463 --> 00:18:17.598 
任務完成

00:18:18.565 --> 00:18:23.370 
然而 也有可能我們找到
兩個或多個聯繫人

00:18:24.171 --> 00:18:26.340 
在這樣的情況下 將會很便捷

00:18:26.406 --> 00:18:31.712 
如果Siri能幫助詢問用戶
從候選名單裏挑出聯繫人

00:18:33.046 --> 00:18:36.817 
同樣也有可能我們沒有找到任何聯繫人

00:18:37.784 --> 00:18:42.189 
在這個情況下
我們也想讓Siri告知用戶

00:18:42.356 --> 00:18:45.392 
那樣用戶或許會選一個其它的收件人

00:18:48.061 --> 00:18:53.033 
在選好了一個收件人之後
我們還需要關聯的信息

00:18:53.867 --> 00:18:58.272 
在這個情況下
我們只需要獲取一個值來繼續

00:18:59.473 --> 00:19:02.609 
如果用戶沒能提供關聯的信息

00:19:02.676 --> 00:19:07.548 
那我們希望Siri能幫助
詢問關聯的信息

00:19:09.183 --> 00:19:11.285 
考慮到以上所有情況

00:19:11.351 --> 00:19:16.523 
聽起來好像 我們應該要爲
收件人和信息實現解析方法

00:19:16.623 --> 00:19:20.861 
我們的確需要通過Siri的幫助
從用戶那取得進一步的輸入

00:19:20.928 --> 00:19:25.599 
才能最終決定
這些參數的最後的值

00:19:27.835 --> 00:19:30.771 
現在參數已經成功地決定了

00:19:31.805 --> 00:19:33.774 
我們到了確認階段

00:19:34.842 --> 00:19:37.878 
在這個階段你們有必要做一下情景模擬

00:19:38.846 --> 00:19:42.749 
試想若你們正在操控這個意圖

00:19:43.050 --> 00:19:44.685 
你們是否有了所有需要的信息？

00:19:45.252 --> 00:19:48.355 
或者 你們是否能夠成功地操控它？

00:19:48.989 --> 00:19:52.459 
你們要得到問題的答案外加
一些額外的信息

00:19:52.526 --> 00:19:56.129 
你們可收集這些信息在爲
Siri的意圖做準備同時

00:19:56.763 --> 00:19:58.832 
那樣Siri纔會適時地

00:19:58.999 --> 00:20:01.735 
傳達這些信息給用戶

00:20:02.469 --> 00:20:04.938 
最終用戶才能做出相應的決定

00:20:05.005 --> 00:20:09.142 
關於是否想繼續他們的活動

00:20:10.310 --> 00:20:11.845 
在獨角獸快信裏

00:20:11.912 --> 00:20:14.948 
由於我們的安全要求

00:20:15.015 --> 00:20:19.019 
我們需要用戶時不時地
重新驗證身份

00:20:19.853 --> 00:20:22.122 
所以確認是最合適的階段

00:20:22.189 --> 00:20:25.659 
讓我們檢驗用戶的身份狀態

00:20:26.693 --> 00:20:31.665 
不管如何 我們都想告訴Siri
狀態檢驗的結果

00:20:31.732 --> 00:20:36.203 
這樣Siri就可以
讓用戶在Siri內部繼續

00:20:36.270 --> 00:20:41.642 
或許調出應用結束本次Siri操作

00:20:43.510 --> 00:20:46.413 
好的
現在意圖也已經被確認

00:20:47.014 --> 00:20:50.651 
我們來到了最後階段
操控它

00:20:51.018 --> 00:20:54.688 
但願這是簡單直接的 對你們來說
最好理解的階段

00:20:55.289 --> 00:20:59.193 
你只需執行行動
然後告訴Siri結果

00:21:00.827 --> 00:21:02.796 
在獨角獸快信裏

00:21:02.863 --> 00:21:05.232 
我們就只要發送消息

00:21:05.299 --> 00:21:09.636 
然後 報告消息是否被成功發送

00:21:11.071 --> 00:21:17.711 
講瞭解析和確認
還有處理方法與有關的概念

00:21:18.045 --> 00:21:20.614 
讓我們用Xcode實現它們

00:21:31.959 --> 00:21:36.363 
這次我們將直接從
IntentHandler類開始

00:21:37.731 --> 00:21:40.767 
在開始之前 一個提醒

00:21:40.834 --> 00:21:44.338 
所有這些簡單的代碼都會上傳

00:21:44.404 --> 00:21:47.841 
如果我跳過一些細節
那或許意味着

00:21:47.908 --> 00:21:50.143 
對於你們 那部分代碼
相對來說沒那麼重要

00:21:50.210 --> 00:21:52.412 
目前 無需看懂那部分的每行代碼

00:21:52.746 --> 00:21:55.616 
但如果你們感興趣
你們一直都可以回到網上

00:21:55.782 --> 00:21:58.652 
然後自己查閱這簡單的項目

00:21:59.486 --> 00:22:00.320 
好的

00:22:00.687 --> 00:22:02.523 
像之前所提及的

00:22:02.589 --> 00:22:06.727 
我們將實現解析和
確認和處理方法

00:22:07.528 --> 00:22:13.200 
我們將爲收件人和
信息實現解析方法

00:22:14.434 --> 00:22:17.004 
讓我們從resolveRecipients入手

00:22:19.840 --> 00:22:24.378 
在這個方法裏我們要注意
recipients這個參數

00:22:24.678 --> 00:22:28.015 
它由一個INPerson的數組代表

00:22:29.149 --> 00:22:31.885 
你們也可以從這個方法的簽名看出

00:22:31.952 --> 00:22:37.724 
你們需要使用這一個數組的
解決結果進行回調

00:22:38.992 --> 00:22:41.929 
所以 有一個一一對應的映射關係

00:22:42.296 --> 00:22:46.567 
在recipients數組與
解決結果數組之間

00:22:47.201 --> 00:22:52.673 
這意味着爲每一個收件人 你們要創建一個
PersonResolutionResult

00:22:53.473 --> 00:22:54.942 
這裏唯一的特例是

00:22:55.008 --> 00:22:58.779 
當你想創建
ResolutionResultNeedsValue

00:22:58.846 --> 00:23:00.747 
或ResolutionResultNotRequired的時候

00:23:01.315 --> 00:23:05.118 
這兩類型的
resolutionResults

00:23:05.185 --> 00:23:11.692 
是在參數層面的解析 而其他的
resolutionResults

00:23:11.758 --> 00:23:16.396 
是更多的注重於個別參數值

00:23:17.998 --> 00:23:21.068 
那在這個方法裏
首先我們要

00:23:22.569 --> 00:23:25.672 
試着打開Recipients對象

00:23:26.740 --> 00:23:30.310 
然後我們將循環依次獲取
每一個收件人

00:23:30.811 --> 00:23:34.348 
然後調出在UnicornCore
框架裏的 API

00:23:34.615 --> 00:23:37.451 
根據名字尋找相應的聯繫人

00:23:39.686 --> 00:23:44.691 
接下來我們將用一個switch語句
在覈對查找聯繫人的數量上

00:23:45.926 --> 00:23:50.998 
如之前所提到的
我們將考慮不同的查找情況

00:23:51.899 --> 00:23:54.635 
兩個或多個相符的聯繫人

00:23:54.701 --> 00:23:57.471 
只有一個相符的聯繫人

00:23:57.638 --> 00:24:00.307 
沒有相符的聯繫人

00:24:02.676 --> 00:24:06.547 
如果我們找到了兩個或更多的聯繫人

00:24:07.014 --> 00:24:11.919 
我們將創建一個PersonResolution
Result.disambiguation

00:24:11.985 --> 00:24:13.954 
用我們所找到的結果

00:24:16.190 --> 00:24:19.593 
如果我們只找到了一個聯繫人

00:24:19.993 --> 00:24:21.028 
我們就可以繼續

00:24:21.094 --> 00:24:26.233 
我們可以告訴Siri通過創建一個
PersonResolutionResult.success

00:24:26.533 --> 00:24:28.735 
用那一個我們找到的人

00:24:31.071 --> 00:24:34.374 
如果我們沒有找到聯繫人

00:24:35.042 --> 00:24:38.278 
我們將創建一個PersonResolution
Result.unsupported

00:24:41.248 --> 00:24:43.884 
我們switch語句在此結束

00:24:46.153 --> 00:24:49.656 
你們或許感覺到
我講解這些代碼的速度很快

00:24:49.723 --> 00:24:53.093 
以至於你沒有機會讀每一行代碼

00:24:53.360 --> 00:24:55.062 
那沒有什麼問題

00:24:55.128 --> 00:24:57.931 
因爲只要你能明白

00:24:57.998 --> 00:25:01.568 
我們有不同的
resolutionResults

00:25:01.635 --> 00:25:04.738 
它們適用於不同的情況

00:25:05.239 --> 00:25:10.577 
當你們自己爲結果方法實現
你們的代碼邏輯

00:25:10.644 --> 00:25:13.447 
你們可以上網查閱關於
resolutionResults的資料

00:25:13.514 --> 00:25:16.383 
完整的關於
resolutionResults的列表

00:25:16.817 --> 00:25:19.152 
然後還有它們的用途

00:25:20.521 --> 00:25:21.421 
好的

00:25:21.855 --> 00:25:25.359 
現在我們有了所有的
resolutionResults

00:25:25.425 --> 00:25:28.428 
那些我們爲
recipients所創建的

00:25:29.263 --> 00:25:33.834 
至此 我們完成了對
resolutionResults數組的構建

00:25:35.702 --> 00:25:39.806 
這樣我們也就完成了最後一行代碼
給在我們能

00:25:39.873 --> 00:25:42.276 
從意圖獲取一些收件人的情況

00:25:43.377 --> 00:25:48.215 
但在如果用戶根本沒有收件人

00:25:49.349 --> 00:25:53.587 
那我們將創建一個
PersonResolution Result.needsValue

00:25:53.820 --> 00:25:59.726 
然後結束流程 告訴Siri
請提示用戶輸入收件人

00:26:02.029 --> 00:26:05.299 
以上就是我們result recipients的方法

00:26:06.700 --> 00:26:10.137 
接下來 我們來實現
resolveContent方法

00:26:10.204 --> 00:26:14.107 
我將檢查值是否存在

00:26:14.174 --> 00:26:15.442 
如果不存在

00:26:15.509 --> 00:26:19.947 
我們指示Siri
請幫助我們提示用戶

00:26:25.519 --> 00:26:28.088 
我們在resolveContent
裏首先做的

00:26:28.155 --> 00:26:32.025 
還是試着拆包
這個content屬性

00:26:32.893 --> 00:26:35.529 
然後查看它
是否真的不爲空

00:26:36.463 --> 00:26:39.066 
如果content確實已經給定

00:26:39.533 --> 00:26:42.102 
建立ResolutionResult.success

00:26:42.503 --> 00:26:43.971 
通過已有的content

00:26:45.672 --> 00:26:50.310 
否則 我們就創建
ResolutionResult.needsValue

00:26:50.377 --> 00:26:52.980 
就像我們在之前那個
解析方法裏做的一樣

00:26:54.414 --> 00:26:56.550 
並以它爲參數
調用completion函數

00:26:59.286 --> 00:27:02.389 
現在我們兩個解析方法
都已經領略了

00:27:03.023 --> 00:27:05.726 
下面我們來看確認方法

00:27:05.792 --> 00:27:09.730 
我們用它來查看
用戶的認證狀態

00:27:17.237 --> 00:27:18.739 
在確認方法裏

00:27:19.139 --> 00:27:24.511 
我們就調用Unicorn Core framework
裏的shared API來查看

00:27:24.578 --> 00:27:27.981 
用戶是否還有
有效的認證狀態

00:27:29.082 --> 00:27:30.551 
如果他/她有的話

00:27:30.617 --> 00:27:34.621 
那我們就創建一個
INSentMessageIntentResponse

00:27:35.022 --> 00:27:38.759 
其code參數爲success
而userActivity參數是nil

00:27:39.860 --> 00:27:43.363 
我一會兒會講解
怎麼用這個userActivity

00:27:45.332 --> 00:27:47.034 
不過我們先來看這個情況

00:27:47.100 --> 00:27:49.536 
用戶不再是已認證的狀態

00:27:50.437 --> 00:27:54.408 
在這種情況下 我們就創建一個
IntentResponse

00:27:54.474 --> 00:27:57.678 
code是
.failureRequiringAppLaunch

00:27:58.612 --> 00:28:02.850 
所以這就是要告訴Siri
Siri應該提供一個選項

00:28:03.050 --> 00:28:06.720 
讓用戶可以進入到
我們的主應用

00:28:06.787 --> 00:28:10.591 
來登錄並完成
這個發送操作

00:28:15.963 --> 00:28:19.132 
好的 以上這些就是
我們的確認方法

00:28:19.900 --> 00:28:23.837 
最後 我們一起來實現處理方法

00:28:29.676 --> 00:28:32.713 
在處理裏
我們就調用

00:28:32.779 --> 00:28:36.650 
UnicornCore框架裏的
shared API

00:28:37.017 --> 00:28:41.421 
來用給定的content和
recipients發送信息

00:28:42.556 --> 00:28:45.993 
我們還要獲取
發送操作的狀態

00:28:47.561 --> 00:28:50.230 
如果信息成功發送

00:28:50.531 --> 00:28:54.801 
創建一IntentResponse
並以success作爲code參數

00:28:55.536 --> 00:28:59.673 
否則就以failure作爲code
參數來創建response對象

00:29:00.407 --> 00:29:03.911 
調用completion並
賦給它IntentResponse

00:29:06.647 --> 00:29:12.152 
至此 我們一起討論瞭解析
確認和處理方法

00:29:13.453 --> 00:29:18.158 
現在我履行之前的承諾
來講解NSUserActivity

00:29:18.225 --> 00:29:21.762 
那些IntentResponse
的初始化方法會用到它

00:29:24.565 --> 00:29:26.967 
我們暫時先拋開
Xcode

00:29:36.944 --> 00:29:38.979 
說到NSUserActivity

00:29:40.247 --> 00:29:42.583 
在SiriKit的背景下

00:29:42.649 --> 00:29:47.688 
NSUserActivity被用來
幫你的應用恢復狀態

00:29:47.855 --> 00:29:51.558 
用於它被Siri或者用戶
啓用的時候

00:29:52.860 --> 00:29:57.064 
默認情況下 Siri會給你創建
一個NSUserActivity

00:29:57.431 --> 00:30:02.402 
這是在你決定把nil賦給
IntentResponse的初始化方法時的情況

00:30:04.137 --> 00:30:09.009 
並且 Siri在創建它時會以
ActivityType作爲intent的類名

00:30:10.277 --> 00:30:13.280 
你還可以選擇用
你自己的UserActivity

00:30:13.580 --> 00:30:15.849 
比如你想要加入一些自定義數據

00:30:17.518 --> 00:30:22.523 
但不論如何 Siri都會將
INInteraction屬性設定

00:30:22.589 --> 00:30:24.725 
在NSUserActivity
對象上

00:30:25.259 --> 00:30:28.228 
這個屬性是在iOS X裏新引進的

00:30:29.463 --> 00:30:35.402 
而且這個對象有意圖
IntentResponse

00:30:35.469 --> 00:30:37.871 
還有意圖處理的狀態

00:30:38.372 --> 00:30:42.109 
Scott一會兒會更詳細講這個對象

00:30:43.377 --> 00:30:49.283 
現在我們再來看看NSUserActivity
在我們程序裏的用法

00:30:50.751 --> 00:30:53.120 
如果你比較細心地看了這段程序的話

00:30:53.587 --> 00:30:56.990 
你可能會發現在確認
和處理方法裏

00:30:57.057 --> 00:30:58.959 
我們一直把nil

00:30:59.426 --> 00:31:04.031 
作爲userActivity參數賦給我們的
IntentResponse初始化方法

00:31:04.398 --> 00:31:05.933 
這樣做完全沒問題

00:31:06.233 --> 00:31:09.970 
這是在假設我們的主應用會處理
UserActivity的情況下

00:31:10.070 --> 00:31:15.342 
就是Siri用INInteraction對象
幫我們創建的UserActivity

00:31:16.944 --> 00:31:19.680 
不過在一些情況下 比較有用的做法是

00:31:19.780 --> 00:31:25.519 
給我們的應用加入
一些擴展過程中的自定義字符串

00:31:26.520 --> 00:31:28.055 
比如說

00:31:29.823 --> 00:31:31.358 
在確認方法裏

00:31:31.592 --> 00:31:36.597 
當我們發現用戶不再是
已登錄或已認證的狀態時

00:31:37.397 --> 00:31:41.935 
我們便需要將一些顯示錯誤的
字符串加入到我們的主應用裏

00:31:42.236 --> 00:31:45.572 
具體做法是我們創建自己的
userActivity

00:31:46.907 --> 00:31:49.343 
並在.userInfo字典裏設定

00:31:50.577 --> 00:31:54.982 
我們想要給我們主應用
加入的顯示錯誤的自定義字符串

00:31:55.716 --> 00:31:59.052 
然後我們把nil刪掉 取而代之的是
userActivity

00:31:59.152 --> 00:32:00.554 
就是我們剛創建的那個

00:32:02.656 --> 00:32:03.857 
好的 很好

00:32:03.924 --> 00:32:07.961 
所以現在我的
獨角獸快信主應用有了

00:32:08.028 --> 00:32:13.433 
這些顯示錯誤的自定義字符串
並且會提示用戶登錄

00:32:13.500 --> 00:32:18.305 
這是在用戶或者Siri此時
要啓動應用的情況下

00:32:19.706 --> 00:32:22.910 
現在我們完成了
意圖擴展的所有編程

00:32:23.343 --> 00:32:25.779 
我們來看看它真正在設備上
運行的效果

00:32:28.849 --> 00:32:32.419 
用獨角獸快信給Scott發一條短信

00:32:32.486 --> 00:32:35.155 
說
你準備好你的演示了嗎

00:32:41.428 --> 00:32:42.296 
沒錯

00:32:48.468 --> 00:32:49.436 
好的
謝謝

00:32:49.636 --> 00:32:51.205 
是的 這個非常振奮人心

00:32:51.271 --> 00:32:55.342 
我們剛用Siri發送了第一條
獨角獸快信信息

00:32:55.442 --> 00:32:56.944 
這絕對是棒棒噠

00:33:00.280 --> 00:33:01.114 
謝謝

00:33:05.319 --> 00:33:08.622 
不過 在獨角獸快信的主應用裏

00:33:08.822 --> 00:33:11.391 
當我給我的獨角獸小夥伴們
發短信時

00:33:11.458 --> 00:33:14.695 
我會經常用
他們的獨角獸暱稱

00:33:15.295 --> 00:33:17.397 
所以我實際上想跟Siri說

00:33:17.464 --> 00:33:21.134 
給Sparkle Sparkly
發一條短信說你準備好演講了嗎

00:33:21.702 --> 00:33:24.972 
顯然Sparkle Sparkly
是Scott的獨角獸暱稱

00:33:25.939 --> 00:33:29.776 
要實現這個功能
我們就要進入我們下一個話題

00:33:29.910 --> 00:33:32.212 
就是用戶特定詞彙

00:33:34.481 --> 00:33:35.315 
是的

00:33:35.382 --> 00:33:36.884 
用戶特定詞彙

00:33:38.252 --> 00:33:39.086 
那麼

00:33:39.720 --> 00:33:45.726 
這是一些自定義單詞或短語
它們對於你的應用獨一無二

00:33:45.792 --> 00:33:48.295 
並且因人而異

00:33:49.129 --> 00:33:50.931 
在我剛給的例子中

00:33:50.998 --> 00:33:54.001 
Sparkle Sparkly
以及其他獨角獸暱稱

00:33:54.067 --> 00:33:57.337 
在這兒都可以作爲
用戶特定詞彙

00:33:58.872 --> 00:34:03.410 
而要讓Siri
理解用戶

00:34:03.477 --> 00:34:06.346 
所說的
這些自定義詞彙

00:34:06.413 --> 00:34:08.215 
你需要把它們提供給Siri

00:34:08.982 --> 00:34:15.255 
你要從你的主應用調用
INVocabulary API

00:34:15.856 --> 00:34:17.123 
我重複一遍

00:34:17.190 --> 00:34:20.127 
你要調用
INVocabulary API

00:34:20.194 --> 00:34:23.397 
從你的主應用裏調用
而不是從你的擴展裏調用

00:34:25.299 --> 00:34:29.036 
好我們來看看我們在獨角獸快信
怎麼做到的

00:34:31.338 --> 00:34:35.141 
在獨角獸快信裏我們有
UCAddressBookManager

00:34:35.609 --> 00:34:38.545 
它管理獨角獸快信
自己的聯繫記錄

00:34:39.413 --> 00:34:41.215 
而我們創建了這個方法

00:34:41.748 --> 00:34:45.351 
來更新Siri
讓Siri知道獨角獸暱稱

00:34:45.985 --> 00:34:50.757 
而一旦哪個聯繫記錄被添加 刪除
或更新時 這個方法就會被調用

00:34:52.125 --> 00:34:54.594 
在這個方法裏我們
首先想做的是

00:34:54.728 --> 00:34:58.131 
獲得一個排好序的
獨角獸暱稱列表

00:34:59.032 --> 00:35:02.970 
並且 我們把更重要的獨角獸暱稱
列在前面

00:35:03.570 --> 00:35:07.207 
把相對不重要的
放在列表後面

00:35:08.275 --> 00:35:12.212 
像這樣優先處理 我們就能幫Siri

00:35:12.279 --> 00:35:17.017 
更好地對獨角獸暱稱進行
優先學習和配對處理

00:35:18.519 --> 00:35:21.855 
在整理好
這個獨角獸暱稱的有序列表後

00:35:22.122 --> 00:35:26.760 
我們調用INVocabulary
API來把它們提供給Siri

00:35:27.761 --> 00:35:31.765 
我們還要給它提供
這些字符串的詞彙類別

00:35:31.965 --> 00:35:35.969 
在這個例子裏獨角獸暱稱的類別是
Type.contentName

00:35:38.071 --> 00:35:42.376 
關於這段程序 我想最後提一點
讓你們注意

00:35:43.277 --> 00:35:48.015 
就是我們要將所有這些操作
分派到不同的任務隊列裏

00:35:49.283 --> 00:35:54.555 
這是因爲
像獲取你整個聯繫列表這樣的操作

00:35:54.621 --> 00:35:58.926 
會特別昂貴
而你不想因爲這個來阻礙你的主線程

00:35:59.793 --> 00:36:03.096 
所以請務必用GCD

00:36:03.397 --> 00:36:08.368 
分派這些昂貴的操作
到不同的任務隊列

00:36:09.269 --> 00:36:10.204 
好的

00:36:10.270 --> 00:36:15.342 
現在 在我們採用了
用戶特定詞彙API後

00:36:15.409 --> 00:36:19.379 
我可以發信息給
Sparkle Sparkly和Celestra

00:36:19.446 --> 00:36:22.683 
還有Buttercup
以及我所有的獨角獸小夥伴們

00:36:22.749 --> 00:36:24.785 
這絕對是棒棒噠

00:36:27.788 --> 00:36:31.525 
現在我又有另外一個功能請求

00:36:32.226 --> 00:36:34.862 
在獨角獸快信裏

00:36:34.928 --> 00:36:37.698 
這個應用的畫風

00:36:37.764 --> 00:36:42.803 
實際上比你在Siri這兒看到的
還要五彩斑斕 像彩虹一樣

00:36:43.971 --> 00:36:47.274 
那麼 我能讓我在Siri裏的
獨角獸快信體驗

00:36:47.341 --> 00:36:52.613 
和在獨角獸快信
主應用裏的一樣色彩繽紛嗎

00:36:53.347 --> 00:36:56.984 
關於這個話題 我現在邀請我的隊友

00:36:57.050 --> 00:37:00.521 
Scott也就是Sparkle Sparkly上臺

00:37:03.390 --> 00:37:04.424 
下午好

00:37:04.625 --> 00:37:07.528 
我是Scott Andrus
SiriKit的工程師

00:37:08.662 --> 00:37:10.998 
現在我們來講講
如何讓這個過程

00:37:11.064 --> 00:37:13.233 
感覺更像是跟獨角獸快信互動

00:37:14.101 --> 00:37:18.172 
要做到這一點我們要用SiriKit
來建立一個用戶界面擴展

00:37:19.239 --> 00:37:23.110 
在iOS X裏 我們引進了
意圖用戶界面擴展點

00:37:23.644 --> 00:37:26.246 
它能讓你創建
很讚的用戶界面擴展

00:37:26.313 --> 00:37:30.117 
來在Siri體驗裏
提供自定義的用戶界面

00:37:30.817 --> 00:37:32.252 
那麼 讓我們開始吧

00:37:33.353 --> 00:37:35.122 
你可能想這麼做的原因是

00:37:35.622 --> 00:37:39.760 
用戶界面擴展能增加你的應用
對用戶的影響

00:37:40.627 --> 00:37:42.963 
通過引入一個用戶界面擴展

00:37:43.564 --> 00:37:46.967 
你可以在Siri體驗的基礎上
展示你的視圖

00:37:47.301 --> 00:37:50.103 
然後 你可以融入自定義的體驗

00:37:50.170 --> 00:37:54.174 
這些體驗相對Siri通常顯示而言
對你的應用更爲獨特

00:37:55.375 --> 00:37:58.345 
這會給開發你的應用
帶來很多很好的機會

00:37:58.679 --> 00:38:02.149 
這些機會具有獨特性
能讓你的應用脫穎而出

00:38:03.951 --> 00:38:06.687 
你還可以提供用戶定製

00:38:06.920 --> 00:38:10.224 
讓你可以跟用戶一對一互動

00:38:11.959 --> 00:38:15.495 
最後 你可以顯示
Siri不會顯示的信息

00:38:15.996 --> 00:38:18.232 
這是你的工具庫裏很好的幫手

00:38:20.701 --> 00:38:22.102 
還有 它長這個樣兒

00:38:24.338 --> 00:38:29.109 
那麼首先 你要做的就是
添加一個意圖用戶界面擴展

00:38:30.143 --> 00:38:31.912 
把它加到你的項目裏

00:38:34.448 --> 00:38:36.617 
並把它嵌入你應用的包裹裏

00:38:38.952 --> 00:38:42.089 
你便會看到Xcode給你
生成的Info.plist文件

00:38:43.090 --> 00:38:46.560 
在裏面 你需要找到新的
IntentsSupported關鍵詞

00:38:46.727 --> 00:38:49.696 
和你在意圖擴展看到的類似

00:38:50.264 --> 00:38:52.466 
在裏面 你要設置一個意圖

00:38:52.533 --> 00:38:56.370 
用它來在Siri體驗中
展示自定義的用戶界面

00:38:59.806 --> 00:39:03.477 
用戶界面擴展在SiriKit中的
結構其實很簡單

00:39:04.945 --> 00:39:08.015 
SiriKit針對你的用戶界面擴展

00:39:08.081 --> 00:39:10.450 
用互動配置

00:39:10.517 --> 00:39:13.987 
這個SiriKit 用戶界面擴展裏
很關鍵的方法

00:39:15.322 --> 00:39:17.291 
你的用戶界面擴展有一個主要類

00:39:17.824 --> 00:39:22.663 
它是UIViewController
遵循INUIHostedViewControlling協議

00:39:24.264 --> 00:39:26.900 
它會將一個
INInteraction對象

00:39:27.234 --> 00:39:29.870 
在配置這一步賦給
你的用戶界面擴展

00:39:32.139 --> 00:39:33.607 
現正如Diana提到的那樣

00:39:34.408 --> 00:39:37.211 
INInteraction類
定義一個對象

00:39:37.411 --> 00:39:39.746 
它涵蓋三個重要的屬性

00:39:40.347 --> 00:39:43.617 
第一個是意圖對象
它要經過確認

00:39:43.684 --> 00:39:46.053 
或者被你的意圖擴展處理

00:39:47.154 --> 00:39:47.988 
第二個屬性就是

00:39:48.055 --> 00:39:52.759 
Intent response對象
你的意圖擴展把它傳給Siri 通過

00:39:52.826 --> 00:39:55.596 
確認和處理的
completion

00:39:56.663 --> 00:40:00.067 
最後一個屬性是意圖處理狀態
一個enum值

00:40:00.400 --> 00:40:02.469 
它描述互動的狀態

00:40:02.569 --> 00:40:04.538 
是你的應用和Siri間的互動

00:40:05.772 --> 00:40:08.375 
這些實現起來
都是非常有用的屬性

00:40:08.742 --> 00:40:11.578 
對你給Siri製作用戶界面很有幫助

00:40:15.148 --> 00:40:20.487 
你的視圖控制器是操縱用戶界面擴展的
途徑 它作爲一個主要類

00:40:20.554 --> 00:40:22.789 
你要用到它來創建你的用戶界面
它作爲

00:40:24.191 --> 00:40:26.126 
UIViewController子類

00:40:26.527 --> 00:40:30.564 
你就可以用你可能習慣用的
所有UIKit的強大功能

00:40:30.631 --> 00:40:34.067 
就像創建Cocoa Touch
應用的用戶界面一樣

00:40:36.036 --> 00:40:38.038 
接着 用“互動”
對象給它配置

00:40:38.105 --> 00:40:40.607 
對象由Siri經“互動配置”傳給你

00:40:42.876 --> 00:40:43.944 
此外 還有別的一些參數

00:40:44.011 --> 00:40:46.346 
在這個方法裏可能值得你注意

00:40:46.413 --> 00:40:49.650 
其中一個是
providedViewContext參數

00:40:50.584 --> 00:40:54.321 
而在iOS X裏 這是一個enum值
它在兩個可能值中取其一

00:40:55.022 --> 00:40:57.558 
Siri snippet或
maps card

00:40:58.559 --> 00:41:01.094 
所以你可以給你的界面
進行不同的配置

00:41:01.161 --> 00:41:03.830 
針對這些模態視圖跟用戶間
不同的互動方式

00:41:04.531 --> 00:41:08.001 
而且如果你要做一個訂車擴展
這個會對你很有幫助

00:41:10.571 --> 00:41:11.505 
最後

00:41:11.905 --> 00:41:14.908 
你會有一個completion
你調用它來讓Siri知道

00:41:14.975 --> 00:41:18.212 
你已經完成對用戶界面的配置

00:41:18.278 --> 00:41:20.280 
你要返回一個
desiredSize

00:41:20.647 --> 00:41:23.517 
告訴Siri怎樣在Siri
snippet調節視圖的大小

00:41:24.952 --> 00:41:26.820 
我想我們已經知道
所有要知道的東西

00:41:27.354 --> 00:41:31.692 
示範如何給獨角獸快信建立
一個SiriKit 用戶界面擴展

00:41:32.893 --> 00:41:33.727 
好

00:41:34.161 --> 00:41:38.031 
我們回到Diana給我們鋪墊的
這個很棒的項目

00:41:38.098 --> 00:41:42.536 
項目用到了我們的Siri擴展
它讓我們能將應用嵌入Siri體驗中

00:41:43.070 --> 00:41:45.873 
我們在意圖用戶界面擴展上
更進一步

00:41:46.740 --> 00:41:49.643 
當Diana創建她的
Siri擴展對象時

00:41:49.977 --> 00:41:53.580 
我們可以配套創建一個
意圖用戶界面擴展對象

00:41:54.181 --> 00:41:56.183 
Xcode建了個分組
專門在左邊這兒的

00:41:56.250 --> 00:41:58.752 
項目導航器建給Siri
用戶界面擴展

00:41:59.853 --> 00:42:00.921 
我們打開它

00:42:01.321 --> 00:42:05.025 
可看到一些很讚的文件讓我們
能開始編意圖用戶界面擴展

00:42:06.326 --> 00:42:08.328 
首先是
IntentViewController類

00:42:08.562 --> 00:42:10.697 
它是我們擴展的主要類

00:42:12.032 --> 00:42:13.967 
還有給這個類的storyboard

00:42:14.968 --> 00:42:17.571 
以及Info.plist
我們先來研究這個

00:42:17.804 --> 00:42:20.140 
用它來設定我們支持的意圖

00:42:22.643 --> 00:42:23.810 
在這裏面

00:42:25.145 --> 00:42:28.749 
NSExtension字典裏有個
IntentsSupported列表

00:42:30.217 --> 00:42:32.152 
我直接在這兒加一個條目

00:42:32.653 --> 00:42:35.455 
現在 關於意圖用戶界面擴餐
我們想做的

00:42:35.789 --> 00:42:39.560 
是在Siri顯示結果時
給用戶展示一個用戶界面

00:42:40.160 --> 00:42:42.563 
用來給其他獨角獸發信息

00:42:43.397 --> 00:42:44.398 
而當顯示這個界面時

00:42:44.464 --> 00:42:46.834 
我們希望它是
一個聊天記錄界面

00:42:47.234 --> 00:42:51.071 
希望它能彰顯我們應用的
“獨角獸性質”

00:42:52.940 --> 00:42:59.379 
所以在這裏面 我要給
INSendMessageIntent添加支持

00:42:59.847 --> 00:43:02.583 
聲明我們要
展示一個用戶界面

00:43:02.749 --> 00:43:05.052 
在Siri給我們的應用
處理意圖時顯示

00:43:06.787 --> 00:43:08.589 
好 編好Info.plist後

00:43:08.655 --> 00:43:10.991 
我們來實現
IntentViewController

00:43:12.693 --> 00:43:13.861 
我縮小頁面回來

00:43:14.461 --> 00:43:16.430 
這兒有我們的IntentViewController類

00:43:17.231 --> 00:43:20.200 
注意到這是一個
UIViewController的子類

00:43:20.267 --> 00:43:23.170 
遵循INUIHostedViewControlling協議

00:43:23.704 --> 00:43:26.507 
既然遵循協議
就要相應地對它進行配置

00:43:26.573 --> 00:43:29.443 
要用“互動”
這兒程序把它作爲模塊提供給我

00:43:31.011 --> 00:43:32.813 
現在我首先要做的

00:43:33.180 --> 00:43:38.252 
是把UnicornCore框架
作爲模塊導入我的Swift文件

00:43:39.086 --> 00:43:41.021 
值得重申的是
這個UnicornCore框架

00:43:41.154 --> 00:43:43.624 
是我們給我們應用
實現的框架

00:43:43.690 --> 00:43:47.327 
所有獨角獸應用都用到它
如Unicorn Pay或Unicorn Rides

00:43:47.394 --> 00:43:52.766 
這是給我們的應用和擴展
共享程序的很好的方法

00:43:53.133 --> 00:43:57.171 
我們在Diana的演示中已經
很好地用了它來共享

00:43:57.237 --> 00:44:00.741 
擴展中解析 確認
和處理的業務邏輯

00:44:01.208 --> 00:44:03.644 
現在我們想用它來共享用戶界面

00:44:03.744 --> 00:44:05.879 
針對我們的用戶界面擴展和應用

00:44:06.013 --> 00:44:08.348 
以此達到我們會有熟悉感覺的效果

00:44:08.415 --> 00:44:11.318 
不論我們在哪兒發送
獨角獸快信信息

00:44:16.256 --> 00:44:19.059 
我們來開始實現“互動配置”方法

00:44:21.495 --> 00:44:22.930 
在這裏面

00:44:22.996 --> 00:44:25.065 
我直接設置一個size變量

00:44:25.132 --> 00:44:28.202 
一旦我完成配置後
就把它返回給Siri

00:44:30.037 --> 00:44:33.207 
現在我要查看
interaction.representsSendMessageIntent是否爲真

00:44:33.941 --> 00:44:36.877  
這兒的用法很方便
因爲我已把它實現爲類擴展

00:44:36.944 --> 00:44:39.880  
以UnicornCore framework裏的
INinteraction爲基礎

00:44:44.117 --> 00:44:46.486  
然後 我建一個
chatViewController實例

00:44:46.854 --> 00:44:50.157 
我們用它來代表
一個信息發送界面

00:44:50.224 --> 00:44:51.825 
我們兩個獨角獸快信
應用都用上

00:44:51.892 --> 00:44:54.328 
而且我們也要在我們的
用戶界面擴展這兒使用

00:44:57.631 --> 00:44:59.132  
我們來配置chatViewController

00:44:59.199 --> 00:45:01.835  
用“配置”的
messageContent

00:45:01.902 --> 00:45:05.038  
我還是用類擴展從“互動”中獲取它

00:45:08.008 --> 00:45:10.511  
建一個UCContact模型對象

00:45:10.844 --> 00:45:13.046  
它基於“互動”的屬性

00:45:13.347 --> 00:45:16.283  
接着 我把模型對象
賦給chatViewController

00:45:16.350 --> 00:45:18.519  
來顯示信息的收件人

00:45:21.588 --> 00:45:23.056  
最後 我用switch語句

00:45:23.123 --> 00:45:25.225  
判斷“互動”的
intentHandlingStatus

00:45:25.626 --> 00:45:28.595 
我們可以以此對我們的
用戶界面進行不同的配置

00:45:28.662 --> 00:45:30.864 
以信息是否已經
發送出去作爲基礎

00:45:31.398 --> 00:45:34.935 
比如在這個例子中
如果信息未發送

00:45:35.002 --> 00:45:39.473  
即intentHandlingStatus
是unspecified inProgress或ready

00:45:39.973 --> 00:45:43.277  
就把chatViewController的
isSent設爲假

00:45:43.710 --> 00:45:47.681  
這說明我應該設定一個草稿式界面
顯示給用戶

00:45:48.515 --> 00:45:51.218  
否則 如果發送已經完成
我可以將isSent

00:45:51.285 --> 00:45:53.020  
在chatViewController裏設爲真

00:45:53.320 --> 00:45:56.390  
表明我已經發了信息
而且要讓用戶也知道

00:46:00.093 --> 00:46:02.963  
最後我就呈現chatViewController
它是一個子控制器

00:46:03.030 --> 00:46:05.199  
其母控制器是這個
IntentViewController主要類

00:46:05.499 --> 00:46:06.800  
這是一個很有用的方法

00:46:07.100 --> 00:46:09.102  
來實現不同的視圖控制器

00:46:09.169 --> 00:46:11.672  
針對我用戶界面擴展裏的
不同意圖

00:46:14.341 --> 00:46:15.175  
最後

00:46:15.442 --> 00:46:19.947  
我可以用iOS X裏用戶界面擴展的
NSExtensionContext

00:46:20.981 --> 00:46:22.249 
來得到一個最大的大小

00:46:22.316 --> 00:46:25.853 
然後我默認地把它用在
我的獨角獸快信裏

00:46:28.288 --> 00:46:30.624  
如因某些原因
得不到extensionContext

00:46:30.858 --> 00:46:33.994  
我就用chatViewController的
desiredSize

00:46:34.061 --> 00:46:34.995  
它對我來說夠好了

00:46:38.866 --> 00:46:40.200 
這是比較樂觀的一種情形

00:46:40.467 --> 00:46:43.337 
假如什麼出了錯
給我們意想不到的“互動”

00:46:44.104 --> 00:46:45.772 
我們可以設大小爲0

00:46:45.839 --> 00:46:50.110 
讓Siri不要在Siri snippet裏
畫我們用戶界面擴展的視圖

00:46:52.479 --> 00:46:53.313  
好

00:46:53.714 --> 00:46:55.048  
我最後要做的

00:46:55.115 --> 00:46:58.752  
是告訴Siri我已經完成實現

00:46:58.819 --> 00:47:00.821  
和配置我的用戶界面

00:47:01.188 --> 00:47:03.690  
這樣它就會在Siri
snippet裏給我們展示

00:47:05.859 --> 00:47:06.693 
好

00:47:06.760 --> 00:47:09.229 
我有這段程序的一個版本
在我的設備上運行

00:47:09.596 --> 00:47:10.998 
我們現在來看看它是怎麼樣的

00:47:16.737 --> 00:47:18.939 
你可以看到
我有獨角獸快信應用

00:47:19.673 --> 00:47:21.375 
我準備發信息給Diana

00:47:23.744 --> 00:47:27.347 
用獨角獸快信
發信息給Diana說

00:47:27.414 --> 00:47:29.116 
“你的演示很棒！”

00:47:40.794 --> 00:47:43.363 
於是我們這兒有一個很棒的
自定義用戶界面

00:47:43.764 --> 00:47:46.166 
但你還會注意到有些東西不太對

00:47:46.567 --> 00:47:48.135 
我們現在來看看是怎麼回事

00:47:56.710 --> 00:47:58.478 
我們剛給你們展示了

00:47:58.545 --> 00:48:00.981 
如何用SiriKit構建
你的用戶界面擴展

00:48:01.548 --> 00:48:02.716 
這非常好

00:48:03.984 --> 00:48:04.952 
但你會意識到

00:48:05.018 --> 00:48:06.887 
有些東西還是有點不妥

00:48:06.954 --> 00:48:09.890 
特別是我們在Siri展示給
用戶的用戶界面

00:48:10.624 --> 00:48:14.027 
於是我們弄了一個複製版聊天記錄界面

00:48:14.094 --> 00:48:15.896 
在Siri snippet裏展示

00:48:16.830 --> 00:48:21.802 
默認地 Siri對不同
意圖都顯示用戶界面

00:48:21.869 --> 00:48:23.704 
如SentMessageIntent

00:48:23.770 --> 00:48:26.707 
剛用它在獨角獸快信
給Diana發了信息

00:48:27.941 --> 00:48:31.345 
同理 對於我們
的獨角獸快信用戶 我們想做的

00:48:31.411 --> 00:48:33.914 
是真正展示我們的
自定義用戶界面

00:48:33.981 --> 00:48:37.417 
讓用戶們對“獨角獸性質”
比較好的感覺

00:48:37.518 --> 00:48:39.820 
就在他們用獨角獸快信
發信息時

00:48:41.555 --> 00:48:44.725 
我們在iOS X可以做到這一點
用一個可選的新協議

00:48:45.592 --> 00:48:50.197 
通過實現
INUIHostedViewSiriProviding協議

00:48:50.664 --> 00:48:51.965 
你可以讓Siri知道

00:48:52.232 --> 00:48:54.835 
你在把信息還是地圖畫在

00:48:55.068 --> 00:48:56.637 
你的用戶界面擴展視圖

00:48:57.137 --> 00:48:59.506 
所以你可以選擇顯示

00:48:59.573 --> 00:49:03.377 
不同的特定內容
到你的用戶界面上

00:49:03.844 --> 00:49:06.680 
並代替Siri操控
這個界面

00:49:07.514 --> 00:49:08.916 
最後 當你這麼做了

00:49:09.483 --> 00:49:11.552 
Siri便會調節你視圖的內容

00:49:12.019 --> 00:49:15.722 
所以你要確認畫出來的
這些屬性準確

00:49:16.123 --> 00:49:17.324 
代表了用戶意願

00:49:20.127 --> 00:49:21.428 
我們來看IntentViewController

00:49:21.495 --> 00:49:23.897 
我們剛在我們的用戶界面擴展裏用了它

00:49:24.932 --> 00:49:26.133 
你可以在這兒看到

00:49:26.200 --> 00:49:30.904 
如果我們實現
INUIHostedViewSiriProviding協議

00:49:31.638 --> 00:49:35.642 
我們就可以實現displaysMessage
屬性並返回真值

00:49:35.876 --> 00:49:40.380 
告訴Siri我們正在
獨角獸快信顯示信息內容

00:49:43.784 --> 00:49:48.455 
而這就是實現你自己的用戶界面
所需要的一切

00:49:48.522 --> 00:49:49.356 
在Siri裏面

00:49:50.624 --> 00:49:53.327 
我們來看看這個在
設備上運行的效果

00:49:53.560 --> 00:49:56.964 
我設備上有這個應用的一個
一模一樣的版本

00:49:59.266 --> 00:50:00.567 
我們回到我的設備上

00:50:01.535 --> 00:50:03.270 
我們來發另一條信息給Diana

00:50:05.739 --> 00:50:09.376 
用獨角獸快信
發信息給Diana說

00:50:09.877 --> 00:50:13.547 
“用獨角獸的蹄子
很難打演示的代碼”

00:50:19.520 --> 00:50:22.189  
現在我們看到跟我們預期
一模一樣的界面

00:50:22.356 --> 00:50:23.957  
也跟我們想展示給用戶的一樣

00:50:34.535 --> 00:50:38.405 
我們的界面不會被
Siri默認顯示的界面所阻礙

00:50:38.772 --> 00:50:42.276 
這給我們一個很好的窗口
來展示一個自定義的用戶界面

00:50:42.342 --> 00:50:46.480 
來真正反映我們應用的
“獨角獸性質”的畫風

00:50:49.950 --> 00:50:51.685 
現在 我最後分享一些點子

00:50:51.852 --> 00:50:54.421 
在我們今天離開之前
再談談用戶界面擴展

00:50:55.856 --> 00:50:57.758 
我想首先留給你們的

00:50:58.158 --> 00:51:01.962 
是你對待用戶界面擴展時
應注意考慮存儲量

00:51:02.963 --> 00:51:05.332 
因爲擴展是默認爲暫時性的

00:51:05.399 --> 00:51:08.135 
僅僅在很短時間內展示給用戶

00:51:08.535 --> 00:51:11.004 
所以系統有一個強制的
比較低的存儲量限制

00:51:11.071 --> 00:51:13.774 
比你在你一般的應用裏
可能習慣的存儲量還要低

00:51:14.341 --> 00:51:19.479 
所以像MKMapView這樣的視圖
用起來特別耗存儲量

00:51:19.780 --> 00:51:23.050 
在建立你的用戶界面擴展時
你們要謹慎地使用這些視圖

00:51:25.953 --> 00:51:29.623 
正如我們所看到的
我們可以獲得最小和最大的視圖大小

00:51:29.923 --> 00:51:33.026 
在用戶界面擴展裏通過
NSExtensionContext獲得

00:51:33.660 --> 00:51:37.231 
這會對你特別有用
特別是當你設計你的應用

00:51:37.297 --> 00:51:41.134 
而你的用戶界面擴展要在很多
不同大小的配置下顯示的時候

00:51:41.768 --> 00:51:45.472 
但你返回給Siri的
desiredSize正是你想要的

00:51:45.539 --> 00:51:46.607 
你想要的大小

00:51:47.241 --> 00:51:49.943 
所以 如果你要用不同的佈局

00:51:50.410 --> 00:51:52.513 
你要確保你的程序有很強的適應性

00:51:52.579 --> 00:51:54.748 
無論如何它的外觀都不錯
不管大小是最小

00:51:54.882 --> 00:51:57.951 
還是最大
不管Siri怎麼畫它

00:52:02.022 --> 00:52:04.625 
總之 我們看到了幾個關鍵點

00:52:04.725 --> 00:52:08.161 
關於延伸我們的應用
來適應SiriKit

00:52:09.062 --> 00:52:12.366 
而首先要做的就是
妥當地準備好你的應用

00:52:12.900 --> 00:52:15.936 
通過很好地利用共享的程序

00:52:16.003 --> 00:52:20.374 
比如嵌入框架
還有實現單元測試

00:52:20.674 --> 00:52:24.611 
來正確地測試 Siri可能
傳給我們的不同的意圖

00:52:25.746 --> 00:52:29.283 
並且規劃好我們的應用
來使用合適數量的擴展

00:52:31.685 --> 00:52:34.154 
我們解決了添加
第一個意圖擴展的問題

00:52:34.688 --> 00:52:38.358 
並實現瞭解析
確認和處理的業務邏輯

00:52:38.892 --> 00:52:41.328 
它讓我們的應用跟Siri
實現很好的對接

00:52:44.164 --> 00:52:47.334 
最後 我們展示瞭如何
在Siri裏提供一個用戶界面

00:52:47.701 --> 00:52:52.706 
來將我們應用自定義的獨特體驗
融入到Siri體驗之中

00:52:55.776 --> 00:52:57.377 
我們這個展示會的樣本代碼

00:52:57.444 --> 00:53:00.480 
以及關於SiriKit的幻燈片和
一些很棒的參考文檔

00:53:00.848 --> 00:53:02.349 
都會公佈在我們的網站上

00:53:04.518 --> 00:53:06.553 
而且我們昨天也有一個很棒的會

00:53:06.887 --> 00:53:08.589 
叫“SiriKit入門”

00:53:08.722 --> 00:53:12.693 
我們談了我們對SiriKit的期望
以及如何將它融入iOS

00:53:14.194 --> 00:53:16.864 
我們也有關於應用擴展最佳實踐的
一個很棒的會

00:53:16.964 --> 00:53:20.400 
是WWDC 2015裏的會
我強烈推薦你們去看

00:53:20.467 --> 00:53:22.603 
特別是如果你想實現
SiriKit擴展

00:53:23.237 --> 00:53:26.640 
我希望你會覺得實現你的
SiriKit擴展

00:53:26.707 --> 00:53:30.844 
及你的應用能像我們實現
獨角獸快信一樣簡單有趣

00:53:31.245 --> 00:53:32.112 
謝謝