00:00:19.419 --> 00:00:20.954
用廣色域來工作

00:00:21.021 --> 00:00:25.125
廣色域顯示的理解與優化

00:00:27.861 --> 00:00:29.129
歡迎大家的到來

00:00:29.196 --> 00:00:31.798
我希望每個人都有個很棒的WWDC

00:00:32.098 --> 00:00:33.033
我叫Justin Stoyles

00:00:33.100 --> 00:00:35.569
我是Apple圖形和媒體組的一員

00:00:35.736 --> 00:00:39.006
我很高興今天和你們談談
用廣色域來工作

00:00:39.940 --> 00:00:41.341
我們今天要覆蓋一些主題

00:00:41.608 --> 00:00:44.945
首先我們要討論一些核心的顏色
概念

00:00:45.045 --> 00:00:48.382
我們會談談什麼是廣色域
它爲什麼重要

00:00:48.916 --> 00:00:50.450
然後我會交給Patrick

00:00:50.551 --> 00:00:53.086
他會向你們展示過程

00:00:53.153 --> 00:00:56.023
把廣色域資源加入應用的過程

00:00:56.356 --> 00:00:58.325
然後我會交給Steve

00:00:58.392 --> 00:01:00.360
他會談談渲染廣色域

00:01:00.661 --> 00:01:01.795
讓我們開始

00:01:02.763 --> 00:01:05.532
我已經提到過 我很高興今天能
和你們談談廣色域

00:01:05.699 --> 00:01:07.734
這是因爲我們正在改變

00:01:07.835 --> 00:01:10.704
我們處理廣色域 或者一般來說顏色
的方法

00:01:10.771 --> 00:01:12.539
在Mac和iOS平臺上

00:01:14.174 --> 00:01:16.243
一個好的開始的點是上世紀90年代

00:01:16.343 --> 00:01:20.147
Apple一直處在解決計算中的顏色
問題的前沿

00:01:20.447 --> 00:01:22.115
最好從ColorSync說起

00:01:22.216 --> 00:01:25.252
ColorSync
是Mac的顏色管理平臺

00:01:25.485 --> 00:01:27.721
它是上世紀90年代開發的
當時

00:01:27.788 --> 00:01:30.290
Apple和其他有相同想法的公司
聚在一起

00:01:30.357 --> 00:01:33.961
有一個想法那就是顏色管理和
再現的標準

00:01:34.027 --> 00:01:35.629
可能可以開始解決一部分問題

00:01:35.696 --> 00:01:38.599
工程師和設計師與顏色打交道時
面對的問題

00:01:39.433 --> 00:01:42.903
該組後來成爲國際顏色聯盟（ICC）

00:01:42.970 --> 00:01:44.338
你可能感到熟悉

00:01:44.771 --> 00:01:47.474
ICC的工作成果
被融入ColorSync中

00:01:47.541 --> 00:01:49.676
我們也把那包含進了OS X

00:01:51.044 --> 00:01:53.914
Apple現仍然處於顯示技術的前沿

00:01:54.014 --> 00:01:56.884
在多個產品線上
我們現在有漂亮的retina顯示

00:01:56.984 --> 00:02:00.220
人們非常非常喜歡它們
但什麼是下一個前沿？

00:02:00.654 --> 00:02:01.488
好吧

00:02:01.822 --> 00:02:05.959
去年我們宣佈了漂亮的有P3顯示
的新iMac

00:02:06.193 --> 00:02:08.095
我們獲得了巨大的反響

00:02:08.161 --> 00:02:10.229
它們多顯示25%的顏色

00:02:10.297 --> 00:02:13.133
它們有P3色彩空間
人們很愛這點

00:02:13.333 --> 00:02:15.068
如果你再快進一年

00:02:15.135 --> 00:02:18.739
我們有新iPad Pro 9.7寸
顯示並有True Tone技術

00:02:18.805 --> 00:02:20.407
所以我們又更進了一步

00:02:20.607 --> 00:02:22.209
現在有很多事在下面發生

00:02:22.276 --> 00:02:24.478
我們今天會試着涉及到這些主題

00:02:24.578 --> 00:02:27.114
我會從核心的顏色概念開始

00:02:27.915 --> 00:02:31.351
讓我們從簡單的開始
什麼是色彩空間？

00:02:31.418 --> 00:02:35.622
一個色彩空間是一個環境
在其中顏色可以被比較和顯示

00:02:35.689 --> 00:02:38.926
它可以是1 2 3 4維空間

00:02:38.992 --> 00:02:42.296
是由顏色成分的亮度定義的

00:02:43.130 --> 00:02:46.834
顏色成分也經常被稱爲顏色通道

00:02:47.301 --> 00:02:50.204
一種表示方法你可能很熟悉
那就是RGB

00:02:50.270 --> 00:02:52.806
這和顯示屏密切相關

00:02:52.873 --> 00:02:55.008
你的子像素是紅 綠 藍

00:02:55.108 --> 00:02:56.910
要考慮這些顏色通道你可以想

00:02:56.977 --> 00:02:59.379
每一個顏色通道的亮度

00:02:59.446 --> 00:03:01.748
決定你在另一端看到的顏色

00:03:03.517 --> 00:03:05.419
有多個不同的色彩空間

00:03:05.485 --> 00:03:08.355
我提前了RGB空間
在顯示中很流行

00:03:08.422 --> 00:03:10.490
但是還有很多
有灰度空間

00:03:10.557 --> 00:03:12.292
被用在單色打印上

00:03:12.659 --> 00:03:15.662
在彩色打印中
我們通常用CMYK空間

00:03:15.762 --> 00:03:18.765
如果你嘗試進行計算和轉換

00:03:18.832 --> 00:03:20.868
我們通常用色彩空間比如LAB

00:03:20.934 --> 00:03:22.302
它是設備不相關的

00:03:24.271 --> 00:03:27.207
現在我們有色彩空間和顏色通道

00:03:27.274 --> 00:03:28.876
我們現在想創建一個座標系統

00:03:28.976 --> 00:03:31.111
我們可以比較和計算顏色

00:03:31.211 --> 00:03:33.413
這就是顏色基色的概念

00:03:33.580 --> 00:03:37.084
顏色基色通常落在

00:03:37.150 --> 00:03:39.786
你可以在特定的顏色通道上達到的
最大值

00:03:40.254 --> 00:03:43.023
在這個RGB色彩空間的例子中

00:03:43.090 --> 00:03:48.028
你可以看到顏色基色是我們在
色彩空間上定位點1.0的地方

00:03:48.195 --> 00:03:51.632
對黑色 在任何一個顏色通道上
都沒有飽和度

00:03:51.698 --> 00:03:54.902
所以我有0 0 0
對白色我有1 1 1

00:03:55.002 --> 00:03:58.906
對紅色我只飽和紅色通道
我有1 0 0

00:03:59.206 --> 00:04:00.207
非常簡單

00:04:00.841 --> 00:04:04.444
當我們提到色域
我們實際上是說所有

00:04:04.511 --> 00:04:08.348
可以被那些單獨的顏色通道的
組合定義的顏色

00:04:09.082 --> 00:04:11.218
現在你知道一些基本的

00:04:11.285 --> 00:04:13.220
我們將會在這個演講中討論的顏色概念

00:04:13.854 --> 00:04:17.291
那麼什麼是廣色域？
首先我們要談一下

00:04:17.357 --> 00:04:19.726
目前的行業標準是什麼

00:04:20.093 --> 00:04:25.699
標準RGB或者sRGB是目前計算機
界使用最廣泛的色彩空間

00:04:25.832 --> 00:04:30.103
它基於BT.709標準
我們用的伽瑪大約是2.2

00:04:30.571 --> 00:04:33.740
典型的光照條件
在這個例子裏是D65

00:04:34.208 --> 00:04:36.677
這是iOS的默認色彩空間

00:04:36.743 --> 00:04:39.279
這實際上也是很多平臺的默認
色彩空間

00:04:39.646 --> 00:04:41.949
這很方便
因爲有一些平臺

00:04:42.015 --> 00:04:44.117
有顏色管理
還有一些沒有

00:04:44.218 --> 00:04:47.788
當目前存在的很多內容都是sRGB

00:04:47.855 --> 00:04:50.157
你可以對你獲得的內容做一些假設

00:04:50.224 --> 00:04:52.693
並且它會在另一端被如實重現

00:04:52.860 --> 00:04:54.328
但事情不永遠是這樣

00:04:54.728 --> 00:04:58.532
sRGB可以很好的用來描述我們日常
工作中使用的顏色

00:04:58.599 --> 00:05:01.568
我們的系統可以很好地顯示這些顏色

00:05:01.668 --> 00:05:05.138
但是很多顏色並不適合sRGB

00:05:06.607 --> 00:05:09.710
很多紡織品是用墨水和染料設計的

00:05:09.810 --> 00:05:12.446
有很多顏色是在sRGB之外的

00:05:12.546 --> 00:05:14.448
主要是因爲這些顏色很捉人眼球

00:05:14.515 --> 00:05:18.519
它們非常生動和令人印象深刻
如果你看看足球做爲例子

00:05:18.585 --> 00:05:21.021
有很多球衣的顏色實際上在sRGB
之外

00:05:21.088 --> 00:05:22.956
因爲他們在進攻
吸引了我們的注意

00:05:23.023 --> 00:05:24.591
無論是看你孩子的足球賽

00:05:24.658 --> 00:05:25.959
還是歐洲盃

00:05:26.026 --> 00:05:27.794
你會看到很多球衣的顏色

00:05:27.861 --> 00:05:30.097
實際上不能用sRGB描述

00:05:31.765 --> 00:05:34.868
很多產品實際上也是用sRGB之外
的顏色設計的

00:05:34.935 --> 00:05:37.604
這些產品是我們每天打交道的

00:05:38.105 --> 00:05:41.241
但是最迷人的例子就是大自然本身

00:05:41.341 --> 00:05:45.012
日落 秋葉 熱帶水體

00:05:45.078 --> 00:05:48.782
這都是大自然中的事物
含有sRGB之外的顏色

00:05:48.949 --> 00:05:50.918
我們想要顯示它們

00:05:51.018 --> 00:05:53.687
好的事情是你可能有很多相片

00:05:53.754 --> 00:05:56.757
你在相機上拍攝的
特別是如果你用RAW格式

00:05:56.823 --> 00:05:58.892
它實際上包含很多顏色數據

00:05:58.959 --> 00:06:02.062
但是你無法在顯示器上看到
如果你的顯示器只支持sRGB

00:06:03.330 --> 00:06:04.631
那對此我們要怎麼辦？

00:06:06.200 --> 00:06:08.702
去年我提過我們引入產品

00:06:08.769 --> 00:06:12.239
有一個新的色彩空間
這個色彩空間是Display P3

00:06:12.406 --> 00:06:15.609
在我們的iMac和
iPad Pro 9.7中

00:06:15.676 --> 00:06:16.710
我們用這個色彩空間

00:06:16.777 --> 00:06:20.047
它是基於SMPTE的
DCI-P3標準

00:06:20.147 --> 00:06:21.281
但它有一點不同

00:06:21.481 --> 00:06:25.018
DCI-P3是爲數字投影定義的
色彩空間

00:06:25.085 --> 00:06:27.421
它在那種觀看條件下表現很好

00:06:27.621 --> 00:06:30.023
但是我們的觀看條件有一點不同

00:06:30.090 --> 00:06:33.060
sRGB表現地很好
對於定義一個標準

00:06:33.160 --> 00:06:34.795
工作在我們的觀看條件下

00:06:34.862 --> 00:06:37.731
所以我們採用了相同的伽瑪
和典型光照條件

00:06:37.798 --> 00:06:39.967
爲我們的白點 像sRGB

00:06:40.033 --> 00:06:43.871
這是Display P3和
DCI-P3的關鍵區別

00:06:44.872 --> 00:06:47.941
爲了理解什麼顏色在sRGB之外

00:06:48.008 --> 00:06:50.110
但我們可在Display P3中
描述

00:06:50.177 --> 00:06:52.179
我會試着用行動向你展示

00:06:54.448 --> 00:06:57.951
這是我相片庫中的一張相片
我用photos導出它

00:06:58.018 --> 00:07:00.020
在Display P3色彩空間

00:07:00.220 --> 00:07:01.588
它是很漂亮的相片

00:07:01.655 --> 00:07:04.057
即使我們今天是用一個sRGB投影
在看它

00:07:04.124 --> 00:07:06.827
或者如果你在觀看視頻
如今你在用sRGB觀看

00:07:06.894 --> 00:07:08.795
這個相片還是看起來很好

00:07:08.962 --> 00:07:12.165
但是相片上有很多東西你可能不
能馬上發現

00:07:12.266 --> 00:07:17.271
但是實際上有很多顏色
實際上沒有被sRGB描述

00:07:17.371 --> 00:07:20.107
這是sRGB色域外的顏色

00:07:20.207 --> 00:07:23.877
這種情況下你最終得到的是
對這些區域進行色調分離

00:07:23.944 --> 00:07:27.114
所以這些顏色被壓縮到sRGB
色域的邊界

00:07:28.115 --> 00:07:29.750
我們要怎麼解決這個情況？

00:07:30.050 --> 00:07:34.421
我們要把更專業的工作流程轉移
到我們的移動平臺

00:07:34.922 --> 00:07:36.190
要使這成爲可能

00:07:36.256 --> 00:07:38.759
不僅僅是把廣色域顯示加入你的系統

00:07:38.825 --> 00:07:41.261
還需要一起做一些其他事

00:07:41.962 --> 00:07:45.032
其中之一是我們需要更新出廠校準

00:07:45.098 --> 00:07:49.036
所以現在我們所有的產品都有
單獨校準的顯示

00:07:49.136 --> 00:07:51.371
在每臺設備上
你可以相信顏色

00:07:51.438 --> 00:07:53.006
是準確一致的

00:07:53.473 --> 00:07:58.612
最後我們在iOS中建立了整個系統
範圍的顏色管理

00:07:58.679 --> 00:08:00.314
這就是我們所做的事

00:08:01.849 --> 00:08:05.018
但是我們不能只是建立一個相同的
顏色管理系統

00:08:05.085 --> 00:08:07.387
使用在Mac上使用的相同方法

00:08:07.454 --> 00:08:10.591
有不同的考慮和限制

00:08:10.657 --> 00:08:11.925
當與移動平臺一起工作時

00:08:12.526 --> 00:08:15.262
一個要考慮的就是無數的應用

00:08:15.329 --> 00:08:17.698
已經存在在iOS生態系統中

00:08:17.965 --> 00:08:21.702
這些應用是在sRGB中開發的
調整了顏色

00:08:21.768 --> 00:08:23.804
和性能
在sRGB中

00:08:24.004 --> 00:08:25.939
我們怎麼保證這些應用

00:08:26.006 --> 00:08:28.642
仍然可以運行在有顏色管理的平臺上

00:08:28.742 --> 00:08:32.513
而不會影響性能和顏色

00:08:32.712 --> 00:08:35.682
我們所做的就是在sRGB的基礎上
創建

00:08:36.316 --> 00:08:39.986
所以我們引入了一個擴大範圍
的sRGB色彩空間

00:08:40.120 --> 00:08:42.956
這是我們用來工作於廣色域的
工作空間

00:08:43.423 --> 00:08:46.059
我們用相同的sRGB基色

00:08:47.194 --> 00:08:50.731
我們用相同的伽瑪2.2
相同的白點

00:08:51.198 --> 00:08:54.601
有趣的差別是我們允許值

00:08:54.668 --> 00:08:57.070
大於1或小於0

00:08:57.137 --> 00:09:00.040
允許我們保持相同的性能

00:09:00.107 --> 00:09:03.143
和外觀
對所有爲sRGB開發的應用

00:09:03.477 --> 00:09:06.513
但是還可以用負值和大於1的值

00:09:06.580 --> 00:09:09.183
允許我們表達任何可見光譜內的
顏色

00:09:09.249 --> 00:09:11.919
同時仍然保持我們的定位點在sRGB
中

00:09:13.420 --> 00:09:15.856
用來說明它的最好辦法是用一個
例子

00:09:16.690 --> 00:09:20.861
所以讓我們假設我想要Display P3
中最飽和的紅色

00:09:20.928 --> 00:09:22.763
那會是1 0 0

00:09:23.163 --> 00:09:26.400
如果想在擴大範圍sRGB中表示它

00:09:27.267 --> 00:09:28.769
那會看起來像這樣

00:09:29.036 --> 00:09:32.372
在紅色通道 我有一個值是大於1

00:09:32.673 --> 00:09:36.109
在綠色和藍色通道我實際上用負值

00:09:36.176 --> 00:09:39.913
所以我減少了綠色和藍色
增加了過飽和的紅色

00:09:39.980 --> 00:09:44.885
這允許我得到一種顏色是在sRGB
色域之外的

00:09:44.952 --> 00:09:49.590
同時使用相同的sRGB定位點
在擴大範圍sRGB中

00:09:51.859 --> 00:09:54.261
有趣的事是如果你用一種像素格式

00:09:54.328 --> 00:09:57.030
允許你用很大的負值和正值

00:09:57.097 --> 00:10:00.534
這種方法允許你表達任何可視光譜
裏的顏色

00:10:00.701 --> 00:10:01.835
所以這是可擴展的

00:10:04.671 --> 00:10:11.411
說到像素格式
sRGB標準是8位

00:10:11.478 --> 00:10:16.350
8位用來描述sRGB中的顏色已經
夠大了

00:10:16.850 --> 00:10:18.118
不完美但是還不錯

00:10:18.352 --> 00:10:20.287
一個簡單的例子來描述

00:10:20.354 --> 00:10:23.390
之間的區別
在我們希望sRGB的精確度

00:10:23.457 --> 00:10:25.993
和更廣色域的精確度之間的區別

00:10:26.660 --> 00:10:27.794
是用這個例子

00:10:27.861 --> 00:10:30.664
假設我想要在家建造一個樓梯

00:10:30.731 --> 00:10:32.266
從地下室到一樓

00:10:32.466 --> 00:10:33.767
我會用8個臺階

00:10:33.834 --> 00:10:36.570
我也許會用12個 但是讓我們簡單
地假設我會用8個

00:10:37.471 --> 00:10:39.039
這對我是合適的高度

00:10:39.306 --> 00:10:42.142
如果我想要把樓梯擴展到二樓

00:10:42.543 --> 00:10:44.511
我不會僅僅用相同數量的臺階

00:10:44.611 --> 00:10:46.580
當我們用數字編碼顏色時

00:10:46.914 --> 00:10:49.683
這對你嘗試表達更多顏色講得通

00:10:49.850 --> 00:10:51.652
你想要更精確

00:10:53.487 --> 00:10:56.957
每顏色通道8位對sRGB足夠了

00:10:57.024 --> 00:11:00.194
如果我們是說使用sRGB之外的顏色

00:11:00.394 --> 00:11:03.764
那麼我們的建議是每顏色通道
使用16位

00:11:06.500 --> 00:11:09.670
現在在我交給Patrick前
我想要用另一點來結束

00:11:09.736 --> 00:11:13.273
我們仔細檢查了整個系統
並且更新了所有框架

00:11:13.340 --> 00:11:15.275
和工具使它們能正確理解顏色

00:11:15.609 --> 00:11:18.445
但是如果你們用開源工具開發應用

00:11:18.745 --> 00:11:22.182
或者從頭開發了你自己的圖像處理
管道

00:11:22.549 --> 00:11:24.451
你需要採取行動來確保

00:11:24.518 --> 00:11:27.454
你所用的工具能正確理解顏色

00:11:27.988 --> 00:11:29.756
此外 我們已經幫你們處理好了

00:11:30.190 --> 00:11:32.459
關於這的更多
我會交給Patrick

00:11:36.763 --> 00:11:39.666
謝謝Justin
我是Patrick Heynen

00:11:39.733 --> 00:11:42.236
我是Cocoa框架組的高級工程師
經理

00:11:42.636 --> 00:11:45.806
我想問廣色域從何而來？

00:11:45.873 --> 00:11:48.175
答案是它實際上不僅僅來自於衣服

00:11:48.509 --> 00:11:50.410
不 它來自你

00:11:51.345 --> 00:11:54.081
也就是它來自應用及其內容

00:11:54.381 --> 00:11:57.384
和你的應用提供的用戶體驗

00:11:58.352 --> 00:12:01.755
哪種內容可以爲廣色域進行修改？

00:12:02.523 --> 00:12:05.225
第一個可能是你們最熟悉的

00:12:05.292 --> 00:12:06.727
就是靜態圖像資源

00:12:06.793 --> 00:12:10.964
它們是PNG JPEG
和單獨的圖形文件

00:12:11.031 --> 00:12:14.134
你捆綁進了你的應用並且一起發行

00:12:14.201 --> 00:12:16.270
和你的應用包一起給你的用戶

00:12:17.604 --> 00:12:21.508
另一類是文檔和基於網絡的圖像
資源

00:12:21.575 --> 00:12:24.344
它們是單獨的圖像內容

00:12:24.411 --> 00:12:27.514
你可以從網絡服務下載

00:12:27.614 --> 00:12:30.050
或者儲存在文檔數據中

00:12:31.985 --> 00:12:33.220
還有其他類

00:12:33.287 --> 00:12:35.756
比如高級媒體
比如Live Photos

00:12:35.822 --> 00:12:41.795
或者來自iPhone iPad內置
攝像頭的內容

00:12:41.862 --> 00:12:43.397
我不會說太多細節

00:12:43.463 --> 00:12:47.534
關於廣色域對這些種類內容的影響

00:12:47.601 --> 00:12:50.070
但我推薦你去看看iOS攝影進展與

00:12:50.204 --> 00:12:52.739
在iOS上編輯
Live Photos和RAW演講

00:12:53.040 --> 00:12:54.575
以獲知更多細節

00:12:55.375 --> 00:12:58.445
最後還有一個內容是GPU紋理

00:12:58.512 --> 00:13:01.448
如果你的應用工作在GPU一級

00:13:01.548 --> 00:13:04.785
比如你的遊戲引擎
或者圖形軟件的高級部分

00:13:04.852 --> 00:13:07.287
並且你會發送顏色信息

00:13:07.354 --> 00:13:10.657
以紋理或着色器值的形式直接
發送給GPU

00:13:10.724 --> 00:13:14.027
對廣色域內容還有其他要考慮的

00:13:14.728 --> 00:13:16.630
我也不會深入太多細節

00:13:16.697 --> 00:13:20.100
但我要介紹同事Dan Omachi
對此所做得極好的處理

00:13:20.167 --> 00:13:21.802
在Metal的新特性第二部分

00:13:23.504 --> 00:13:26.139
好的讓我們回到顏色問題

00:13:26.740 --> 00:13:28.775
Justin早前做了很好的解釋

00:13:29.142 --> 00:13:31.111
但這怎麼應用到應用？

00:13:31.445 --> 00:13:36.550
應用內容可能來自一個很寬範圍的來源

00:13:36.683 --> 00:13:38.585
顏色的豐富程度也在一個很寬的
範圍中

00:13:38.652 --> 00:13:40.153
從灰度

00:13:40.354 --> 00:13:44.658
一直到16位廣色域內容

00:13:45.692 --> 00:13:46.927
同時

00:13:47.060 --> 00:13:50.998
設備和顯示的顏色能力也處於
很寬的範圍中

00:13:51.665 --> 00:13:56.036
比如iPhone 5
只能顯示sRGB

00:13:56.270 --> 00:13:58.238
一直到最新的iPad Pro

00:13:58.305 --> 00:14:02.943
可以完全顯示P3顏色和擴大範圍
sRGB

00:14:03.277 --> 00:14:05.145
你要這麼銜接這些差別？

00:14:06.079 --> 00:14:08.782
我們將解決這些顏色問題

00:14:09.149 --> 00:14:12.452
支柱就是顏色管理

00:14:14.955 --> 00:14:16.190
什麼是顏色管理？

00:14:17.491 --> 00:14:20.127
顏色管理的工作就是確保

00:14:20.661 --> 00:14:23.397
圖像在所有輸出設備上看起來
都是相同的

00:14:23.664 --> 00:14:25.866
不管它被編碼到哪個色彩空間

00:14:25.933 --> 00:14:27.401
或者最初它是如何被創造的

00:14:27.868 --> 00:14:30.470
就是這些
但它是怎麼工作的？

00:14:33.640 --> 00:14:36.476
顏色管理從每個圖像開始

00:14:36.543 --> 00:14:39.079
或者有相關聯的色彩空間的內容種類

00:14:39.179 --> 00:14:40.914
有時被稱爲顏色配置

00:14:42.683 --> 00:14:45.452
這告知系統顏色的實際含義

00:14:45.586 --> 00:14:49.056
然後顏色匹配過程通過算法映射

00:14:49.122 --> 00:14:51.925
這些顏色到特徵和輸出空間

00:14:51.992 --> 00:14:53.794
屬於你要渲染到的設備
的特徵和輸出空間

00:14:55.262 --> 00:14:58.699
當然這是一個計算過程而且不是
免費的

00:14:58.765 --> 00:15:02.102
實際上每個像素都會被涉及
會被轉化和匹配

00:15:03.170 --> 00:15:06.673
而且還需要注意這是有可能有損的過程

00:15:06.740 --> 00:15:07.908
特別是如果你要

00:15:07.975 --> 00:15:11.211
從更廣的色域轉化到更窄的色域

00:15:11.378 --> 00:15:14.548
假設一個16位的P3內容降到
8位的sRGB

00:15:14.915 --> 00:15:18.852
這會造成色彩保真度的丟失

00:15:18.919 --> 00:15:20.120
這是需要注意的事

00:15:20.721 --> 00:15:24.091
這是重要的方面
但是有好消息

00:15:24.558 --> 00:15:28.328
第一個好消息是這個顏色匹配過程

00:15:28.395 --> 00:15:29.596
它們用算法定義的方式

00:15:29.663 --> 00:15:31.899
我不想講解它們背後關於顏色科學
的細節

00:15:31.965 --> 00:15:35.636
但是結果是那些計算很容易被
硬件加速

00:15:35.869 --> 00:15:38.005
不論是用CPU還是GPU

00:15:39.139 --> 00:15:40.407
這導致下一個好消息

00:15:40.474 --> 00:15:44.278
我們把這個功能集成到了系統本身

00:15:44.411 --> 00:15:47.281
它們都通過Quartz 2D
自動運行

00:15:47.381 --> 00:15:49.750
Mac上的ColorSync
以及核心動畫

00:15:51.151 --> 00:15:53.387
實際上你需要確定的是

00:15:53.453 --> 00:15:56.957
你的內容被正確的加了標籤

00:15:57.024 --> 00:16:00.260
在這種情況下 要正確顯示你的
圖像不需要任何代碼

00:16:00.327 --> 00:16:01.562
並且讓顏色正確顯示

00:16:03.463 --> 00:16:04.965
平臺顏色管理

00:16:05.432 --> 00:16:08.936
Justin逃避了的macOS

00:16:09.002 --> 00:16:10.871
從它一開始就有顏色管理

00:16:10.938 --> 00:16:12.773
有些人甚至可能會說早於它的開始

00:16:12.840 --> 00:16:16.643
當它在ColorSync時代
之前被稱爲macOS

00:16:17.311 --> 00:16:20.013
所以這沒有什麼新的
但是在iOS上有一些新的

00:16:20.080 --> 00:16:22.316
從iOS 9.3開始

00:16:22.416 --> 00:16:25.285
我們在大部分設備上有自動顏色
管理支持

00:16:26.954 --> 00:16:30.457
這就是顏色管理
解決顏色問題的關鍵

00:16:32.593 --> 00:16:33.827
現在讓我們談談

00:16:33.894 --> 00:16:37.631
一些設計上的考慮和工具鏈

00:16:37.698 --> 00:16:39.933
和平臺服務是如何被增強的

00:16:40.000 --> 00:16:43.770
來適應在你的應用中獲得廣色域
的內容

00:16:44.471 --> 00:16:47.241
首先它總是從設計開始

00:16:48.942 --> 00:16:51.278
需要考慮的重要的事是

00:16:51.411 --> 00:16:54.314
從設計上看你要在什麼時候達到
廣色域

00:16:56.617 --> 00:16:59.486
我首先要說的是

00:16:59.553 --> 00:17:03.190
很重要的是當這樣做有意義時才
使用廣色域

00:17:03.991 --> 00:17:04.858
而不是在任何地方

00:17:04.925 --> 00:17:08.561
請記住我們日常生活中接觸的
大部分顏色

00:17:08.762 --> 00:17:11.198
其實被包含在漂亮的sRGB三角形中

00:17:11.265 --> 00:17:12.566
這是大部分顏色所在之處

00:17:13.500 --> 00:17:16.869
然而還有那些漂亮的
新的生動的飽和的顏色

00:17:17.104 --> 00:17:20.406
你的應用使用它們是有意義的

00:17:20.674 --> 00:17:22.608
所以很重要的一點是把廣色域內容
看成

00:17:22.675 --> 00:17:24.310
你可以使用的一個工具

00:17:24.411 --> 00:17:27.013
當生動的顏色確實能提高用戶體驗時

00:17:27.079 --> 00:17:28.815
並且爲你的應用增加一些價值

00:17:30.617 --> 00:17:33.754
並沒有必要更新你的所有內容

00:17:33.921 --> 00:17:35.589
並且馬上升級到P3

00:17:35.722 --> 00:17:37.724
這並不是一種技術轉變

00:17:38.058 --> 00:17:40.961
這只是一種新的你可以使用的
創造性工具

00:17:41.228 --> 00:17:42.763
在你想用它時

00:17:43.397 --> 00:17:46.166
好消息是我們改進了工具鏈支持

00:17:46.366 --> 00:17:49.736
使逐漸採用廣色域成爲可能

00:17:51.939 --> 00:17:55.075
讓我們假設你想升級一些內容
到廣色域

00:17:55.142 --> 00:17:56.476
什麼是需要考慮的？

00:17:56.543 --> 00:17:58.378
小心是很重要的

00:17:58.612 --> 00:18:02.816
當你升級設計文件到廣色域

00:18:04.084 --> 00:18:07.487
一個常見圈套是僅僅賦予一個新
的配置文件

00:18:07.554 --> 00:18:10.991
它從sRGB開始
賦予一個新的廣色域配置

00:18:11.191 --> 00:18:13.227
這是一個錯誤
這僅僅重新映射

00:18:13.293 --> 00:18:15.562
已有的顏色信息到新的色彩空間

00:18:15.696 --> 00:18:18.232
這相當有效
但可能不是你想要的

00:18:18.398 --> 00:18:20.133
因爲這只是拉伸所有顏色

00:18:20.200 --> 00:18:22.903
使它們生動
而且設計文件的外觀

00:18:22.970 --> 00:18:24.571
不可避免地被改變

00:18:25.005 --> 00:18:29.810
重要的一點是應該轉而使用
轉化到P3

00:18:31.011 --> 00:18:33.013
這會做一個顏色匹配操作

00:18:33.247 --> 00:18:36.650
你的設計結果不會改變它的外觀

00:18:36.750 --> 00:18:38.685
但是它被準備好使用

00:18:38.819 --> 00:18:41.288
並且有一些內容被提升到那些
漂亮的

00:18:41.355 --> 00:18:43.524
生動飽和的P3顏色

00:18:45.559 --> 00:18:48.128
當你進行廣色域設計時

00:18:48.195 --> 00:18:50.330
這很重要
我們強烈推薦

00:18:50.397 --> 00:18:52.466
你使用Display P3顏色配置

00:18:52.566 --> 00:18:54.434
作爲你的工作文檔配置

00:18:55.936 --> 00:18:59.740
並維持最高的顏色準確度和最高
質量

00:18:59.907 --> 00:19:03.010
工作在每通道16位的顏色模式
下是個好主意

00:19:04.178 --> 00:19:08.982
當然能看到你的設計很好

00:19:09.116 --> 00:19:11.585
所以如果你要在廣色域下工作

00:19:11.652 --> 00:19:14.021
最好進行設計工作

00:19:14.087 --> 00:19:16.523
在可以渲染廣色域的系統上

00:19:16.590 --> 00:19:20.227
比如2015年末推出的iMac
或其他有這個能力的硬件

00:19:22.529 --> 00:19:26.266
當來到產生產品的階段
爲了輸出資源

00:19:27.267 --> 00:19:32.973
使用16位嵌入Display P3
ICC配置的PNG文件很重要

00:19:33.173 --> 00:19:34.908
這是一種黃金標準

00:19:35.108 --> 00:19:38.445
把內容轉換成廣色域內容

00:19:40.614 --> 00:19:41.782
一個簡短的注意事項

00:19:42.983 --> 00:19:46.220
有一些很流行的內容生成工作流程

00:19:46.386 --> 00:19:47.387
它們有不同名字

00:19:47.454 --> 00:19:50.624
我要特別討論Adobe
Photoshop工作流程

00:19:51.158 --> 00:19:54.061
他們被稱爲爲網絡保存和導出資源

00:19:54.127 --> 00:19:58.265
這些工作流程很多都沒有完成向
廣色域的轉變

00:19:58.332 --> 00:20:02.035
它們不能導出16位P3內容

00:20:02.135 --> 00:20:04.404
所以現在不要用它們

00:20:04.638 --> 00:20:08.909
使用一些變通方法
使用保存爲PNG格式

00:20:08.976 --> 00:20:12.513
使用16位並且嵌入顯示配置
做爲一個變通方案

00:20:14.081 --> 00:20:17.885
這就是設計過程和廣色域如何
影響它

00:20:18.685 --> 00:20:22.055
現在讓我們談談工具和如何使用
它們

00:20:22.523 --> 00:20:25.893
要採用你在設計過程中得到的內容

00:20:26.260 --> 00:20:27.628
我要談到的第一件事

00:20:27.694 --> 00:20:30.264
是內容工具故事的中心

00:20:30.497 --> 00:20:32.132
是Xcode資源分類

00:20:32.466 --> 00:20:34.134
你可能對此感到熟悉

00:20:34.268 --> 00:20:36.570
這是Xcode中的普通工具

00:20:36.637 --> 00:20:39.273
允許你整理並分類你的圖像資源

00:20:39.339 --> 00:20:43.710
標記它並提供元數據
把它發送到你的應用中

00:20:46.013 --> 00:20:47.514
資源分類會爲你做什麼？

00:20:47.581 --> 00:20:50.584
它們是最好的靜態資源部署工具

00:20:51.752 --> 00:20:56.089
我們自動對你的資源內容進行
顏色修正

00:20:56.156 --> 00:20:58.625
並對構建目標進行優化

00:20:58.692 --> 00:21:01.495
所以即使你的設計師是完美的

00:21:01.562 --> 00:21:03.764
並且總能交付內容
含有正確的配置

00:21:03.830 --> 00:21:06.834
和所有正確的信息
在他們的交付物中

00:21:06.900 --> 00:21:08.769
但事情並不總是這樣

00:21:08.969 --> 00:21:11.438
這就是自動顏色修正發揮作用
的時候

00:21:11.505 --> 00:21:13.173
來確保我們匹配並標準化全部顏色

00:21:13.240 --> 00:21:16.243
到合適的目標設備的工作空間

00:21:17.911 --> 00:21:20.247
我們還自動進行像素格式優化

00:21:20.314 --> 00:21:23.050
確保對設備使用正確的位深

00:21:24.885 --> 00:21:27.554
最後 但當然不是最不重要的

00:21:27.621 --> 00:21:29.990
資源分類是應用切片的途徑

00:21:30.324 --> 00:21:32.226
應用切片是其瘦身功能的重要組成部分

00:21:32.292 --> 00:21:35.896
它確保只有相關內容被傳送給客戶

00:21:35.963 --> 00:21:38.532
在一個特定設備上
不相關內容不會被傳送

00:21:40.300 --> 00:21:43.470
那我們做了什麼讓資源分類更容易

00:21:43.537 --> 00:21:45.072
與廣色域內容一起工作？

00:21:46.373 --> 00:21:50.511
第一個重要改進是我們現在支持
16位的源內容

00:21:50.577 --> 00:21:55.249
併爲16位的圖像資源提供乾淨的
端對端路徑

00:21:56.183 --> 00:21:58.552
我們有16位半負載來儲存它

00:21:58.819 --> 00:22:02.289
但是你在Xcode 8中可以用到它

00:22:03.090 --> 00:22:08.262
下一個重要的事是我們增加了
給顯示色域分類的功能

00:22:09.329 --> 00:22:12.399
這是什麼意思？
這說明你

00:22:12.466 --> 00:22:18.772
在查看器中有一個新的選項來
提供並剪裁優化了的資源

00:22:18.839 --> 00:22:21.975
爲sRGB或Display P3

00:22:22.109 --> 00:22:25.245
顯示色域和設備通過那些特徵
匹配

00:22:26.480 --> 00:22:27.447
三個簡單選擇

00:22:27.514 --> 00:22:28.882
這就是這個特性

00:22:28.982 --> 00:22:31.418
Xcode提供它來整理資源

00:22:31.485 --> 00:22:33.120
但你怎麼利用它？
你怎麼考慮利用它？

00:22:33.453 --> 00:22:35.656
這裏有三個簡單的選擇

00:22:37.057 --> 00:22:38.225
選擇一

00:22:40.394 --> 00:22:41.295
不做任何事

00:22:42.229 --> 00:22:44.097
這可能看起來激進

00:22:44.198 --> 00:22:46.266
但是完全可以這麼做

00:22:48.035 --> 00:22:50.103
因爲如果你不對資源分類進行改變

00:22:50.304 --> 00:22:52.139
你可能不需要這些生動的新顏色

00:22:52.206 --> 00:22:57.377
你將繼續在所有設備上如實渲染
8位的sRGB內容

00:22:57.644 --> 00:23:00.214
沒有什麼會改變
你不需要更新所有東西

00:23:00.280 --> 00:23:02.282
只需要確保它能運行在新硬件上

00:23:02.649 --> 00:23:04.418
這完全是個有效的選項

00:23:04.484 --> 00:23:09.122
當然這表示你的應用不會包含
任何廣色域

00:23:09.857 --> 00:23:11.925
這是完全可行的設計選擇

00:23:12.226 --> 00:23:14.695
這是部署選擇的結果

00:23:15.229 --> 00:23:19.700
假設你想要在你的應用中使用廣色域

00:23:19.800 --> 00:23:22.703
帶來選擇二
升級到P3

00:23:24.738 --> 00:23:29.042
我們把這種方法稱爲通用P3資源

00:23:29.443 --> 00:23:33.780
它所要做的是使用16位
Display P3文件

00:23:33.847 --> 00:23:34.982
可能從你設計師那得到它

00:23:35.082 --> 00:23:37.551
然後在資源分類中替換你已有的
資源

00:23:37.618 --> 00:23:39.253
使用這個升級過的資源

00:23:40.754 --> 00:23:43.891
在創建時會發生的是
我們會自動生成

00:23:43.957 --> 00:23:48.695
一個sRGB變種 從16位
通用Display P3主檔生成

00:23:49.463 --> 00:23:51.298
我們會進行高質量的顏色匹配

00:23:51.365 --> 00:23:53.634
高質量會降級到8位

00:23:54.001 --> 00:23:56.703
然後在瘦身和內容選擇時

00:23:56.770 --> 00:24:01.308
我們確保正確的內容變種被選擇
用在適當的設備上

00:24:03.377 --> 00:24:06.180
但是如果你對自動轉換不滿意

00:24:06.246 --> 00:24:07.648
你想要完全的控制

00:24:08.248 --> 00:24:10.417
好消息是這也提供給了你

00:24:10.484 --> 00:24:13.220
這就是選擇三 優化資源

00:24:14.555 --> 00:24:16.256
這基本上是個很簡單的選項

00:24:16.323 --> 00:24:23.096
你提供一16位Display P3
內容和你的原始的8位sRGB內容

00:24:23.163 --> 00:24:26.900
我們給你提供地方來整理這兩類資源

00:24:27.100 --> 00:24:30.304
他們會被創建進你的應用並且被
正確的選擇和瘦身

00:24:31.305 --> 00:24:37.044
這就是廣色域資源和資源分類

00:24:38.512 --> 00:24:41.415
我現在想要介紹創造內容

00:24:44.885 --> 00:24:50.090
假設我們有這個漂亮的色度環

00:24:56.630 --> 00:24:58.632
假設我們有這個漂亮的色度環

00:24:58.699 --> 00:25:00.133
這好多了

00:25:01.235 --> 00:25:04.238
我已經決定了
這會獲得好處

00:25:04.304 --> 00:25:06.139
從一些更生動的飽和顏色

00:25:06.507 --> 00:25:08.575
這是怎麼完成的？
讓我們看看這裏

00:25:08.642 --> 00:25:10.677
這只是一個簡單的漸變
一個輻射漸變

00:25:10.744 --> 00:25:12.212
我只想要強調這裏

00:25:12.412 --> 00:25:16.350
在漸變中的這一點是一個純的
飽和綠色

00:25:17.384 --> 00:25:19.086
我從這開始

00:25:20.587 --> 00:25:22.055
我要怎麼升級它？

00:25:22.122 --> 00:25:26.660
我首先要做的是
因爲我要整理類型

00:25:26.793 --> 00:25:30.163
我要創建它的一個備份這樣就不會
弄壞已有的資源

00:25:30.230 --> 00:25:31.565
我在這起一個新的名字

00:25:34.501 --> 00:25:36.904
我現在準備好開始工作了

00:25:37.337 --> 00:25:38.539
我要做的第一件事

00:25:38.605 --> 00:25:41.842
是更新到每通道16位

00:25:42.709 --> 00:25:44.244
我們現準備好用16位工作了

00:25:44.378 --> 00:25:47.915
然後是十分重要的轉換到配置

00:25:49.082 --> 00:25:50.651
我要做的是

00:25:51.151 --> 00:25:54.488
把這變成Display P3
顏色配置

00:25:56.657 --> 00:25:58.358
我們弄好了

00:25:58.592 --> 00:26:01.295
實際上我可以在下面的文檔配置
中確認

00:26:01.361 --> 00:26:04.431
Display P3 16位組件
我準備好了

00:26:04.531 --> 00:26:06.867
讓我們看看這個漸變發生了什麼

00:26:08.402 --> 00:26:10.070
讓我們看看最愛的綠色

00:26:10.804 --> 00:26:13.807
這很有趣是嗎？
這個綠色並沒有改變

00:26:13.874 --> 00:26:16.510
注意這個色度環的外觀完全沒有
改變

00:26:16.577 --> 00:26:19.646
和賦值相比
這是轉化計劃中的結果

00:26:19.980 --> 00:26:23.250
但是相同的綠色現在只有70%的
飽和度

00:26:23.317 --> 00:26:26.720
這表明有多少淨空間

00:26:26.787 --> 00:26:31.592
來擴展到更廣的色域並得到更
純的綠色

00:26:31.725 --> 00:26:34.828
我想要那麼做
但是我不想要一整天都在講臺上

00:26:34.895 --> 00:26:37.531
我會重新應用漸變的預設

00:26:37.598 --> 00:26:41.702
現在一切應該都回到開始的樣子

00:26:41.768 --> 00:26:47.708
100%飽和但是現在是在純的
P3廣色域空間

00:26:47.908 --> 00:26:49.810
現在我有我漂亮的資源了

00:26:49.910 --> 00:26:51.912
我會繼續並保存

00:26:52.846 --> 00:26:55.849
當然這只是一個設計文件

00:26:55.916 --> 00:26:58.685
我只有保存它以後
才能在我的應用使用它

00:26:58.952 --> 00:26:59.786
我將這麼做

00:26:59.853 --> 00:27:03.357
我將把它保存爲
不是Photoshop raw而是PNG

00:27:03.423 --> 00:27:05.659
我要確保嵌入了顏色配置

00:27:06.727 --> 00:27:07.728
並保存它

00:27:09.196 --> 00:27:10.764
好的 我完成了

00:27:10.964 --> 00:27:12.799
其實我還沒完成
我只完成了設計過程

00:27:12.866 --> 00:27:14.801
我沒有把它加入到我的應用

00:27:15.202 --> 00:27:17.404
讓我們這麼做

00:27:20.707 --> 00:27:24.478
我的應用在哪？我的應用在這
這是我的應用 沒有修改的

00:27:24.578 --> 00:27:27.848
這是我已有的sRGB P3色度環

00:27:28.649 --> 00:27:30.617
我想要做的是來到這

00:27:30.684 --> 00:27:35.455
到這個彈出菜單來顯示sRGB
和Display P3色域

00:27:35.522 --> 00:27:39.359
這會立即顯示一系列額外的分類
選項

00:27:39.426 --> 00:27:44.331
我把我的P3色度環放到這個位置

00:27:44.531 --> 00:27:46.600
我弄好了
現在如果我構建並運行

00:27:46.733 --> 00:27:50.070
它會把它們都編譯到我的資源分類中

00:27:50.137 --> 00:27:52.806
若我在iPad Pro 9.7
英寸上運行

00:27:52.873 --> 00:27:56.176
我會得到16位
Display P3資源

00:27:56.243 --> 00:28:00.581
在一個sRGB設備上
如iPhone 6 我會得到該資源

00:28:01.949 --> 00:28:03.016
好的

00:28:03.417 --> 00:28:07.888
這就是在應用中加入內容

00:28:11.558 --> 00:28:15.762
我們已經談過了工具和怎麼用
它們處理內容

00:28:15.829 --> 00:28:17.798
現在是時候討論部署要考慮的事

00:28:17.865 --> 00:28:19.566
你使用完那些工具後發生了什麼

00:28:19.633 --> 00:28:22.536
這會怎麼影響你的應用的運行

00:28:23.136 --> 00:28:27.241
有了資源分類部署應用切片

00:28:27.307 --> 00:28:31.612
將確保適當的變種被傳遞給給定的設備

00:28:31.678 --> 00:28:32.579
這很重要

00:28:32.646 --> 00:28:34.681
因爲有可能有很多內容

00:28:34.781 --> 00:28:36.049
是你應用的一部分

00:28:36.383 --> 00:28:40.587
有了切片 我們確保沒有負載成本

00:28:40.754 --> 00:28:42.422
對你的實際最終用戶

00:28:42.489 --> 00:28:45.526
對將廣色域內容加入你的應用

00:28:45.592 --> 00:28:47.628
因爲我們確保有了應用切片

00:28:47.694 --> 00:28:50.330
廣色域內容只被發送給廣色域設備

00:28:50.430 --> 00:28:52.733
sRGB內容發送給剩下的設備

00:28:52.799 --> 00:28:56.436
它不會浪費不相關設備的空間

00:28:58.739 --> 00:29:01.742
在Mac上其實沒有新東西

00:29:01.808 --> 00:29:04.344
NSImage總是可選擇最好的表達

00:29:04.411 --> 00:29:07.848
從資源分類中可用的表達裏

00:29:07.948 --> 00:29:09.917
它會繼續這麼做

00:29:10.017 --> 00:29:12.152
根據你的目標顯示器的特徵

00:29:12.219 --> 00:29:14.688
比如如果你使用的是廣色域iMac

00:29:14.755 --> 00:29:18.425
你有P3內容在你的資源分類中

00:29:18.492 --> 00:29:22.729
它會在渲染內容時使用這些資源

00:29:22.996 --> 00:29:27.668
就像Mac上1X和2X資源的
行爲一樣

00:29:27.768 --> 00:29:30.604
NSImage和NSImage視圖
和所有有關的AppKit類

00:29:30.671 --> 00:29:33.073
確保自動刷新內容

00:29:33.140 --> 00:29:35.175
當顯示器特徵改變時

00:29:35.242 --> 00:29:38.645
比如你的窗口在內部和外部顯示器
之間移動

00:29:38.745 --> 00:29:42.916
或者顏色特徵或後臺縮放比例改變

00:29:43.750 --> 00:29:44.818
這很好

00:29:44.952 --> 00:29:47.521
但是數據是怎麼儲存的

00:29:47.588 --> 00:29:51.425
這會對你的應用有什麼影響？

00:29:52.292 --> 00:29:55.429
一個好消息是在構建時
我們盡了很大努力

00:29:55.495 --> 00:29:58.966
來優化像素格式和儲存特徵

00:29:59.032 --> 00:30:01.902
爲你的資源分類的所有圖像內容

00:30:02.503 --> 00:30:05.239
並儘量用最有效率的方法來做到
這些

00:30:05.305 --> 00:30:07.007
盡我們最大的能力

00:30:07.074 --> 00:30:12.713
我們現在用16位每成分來儲存
廣色域內容

00:30:12.813 --> 00:30:13.647
我之前提到過

00:30:13.714 --> 00:30:18.018
這允許你有端到端16位的顏色精度

00:30:18.085 --> 00:30:20.554
在你的應用資源中

00:30:21.321 --> 00:30:24.358
我們還有壓縮

00:30:25.292 --> 00:30:29.663
這很方便因爲16位和8位相比有
更多數據

00:30:29.730 --> 00:30:33.767
更多的數據不可避免的導致更大的
足跡

00:30:33.867 --> 00:30:35.169
除非你使用壓縮

00:30:35.235 --> 00:30:38.305
現在我們總是有壓縮
我們總是有無縮壓縮

00:30:38.372 --> 00:30:41.141
比如對PNG文件發生的

00:30:41.975 --> 00:30:45.379
但今年的新特性是一些有損壓縮
選項

00:30:45.445 --> 00:30:49.049
來中和 你知道的 應用足跡尺寸

00:30:49.950 --> 00:30:53.954
第一個我們稱爲基本壓縮

00:30:54.021 --> 00:30:57.291
這是一個和JPEG很像的壓縮系統

00:30:57.391 --> 00:31:01.028
除了增加的紅利
它還可以處理透明度

00:31:01.094 --> 00:31:06.300
它有相似的視覺和性能特徵

00:31:06.366 --> 00:31:10.771
好消息是它表現的很好

00:31:10.838 --> 00:31:13.040
在所有設備上

00:31:13.106 --> 00:31:14.641
就像JPEG一樣

00:31:15.008 --> 00:31:16.009
它是你可以依賴的

00:31:16.076 --> 00:31:19.613
付出很小的視覺質量損失

00:31:19.680 --> 00:31:22.049
來獲得很好的儲存特性

00:31:22.916 --> 00:31:24.985
今年新的還有

00:31:25.052 --> 00:31:28.922
我們有令人興奮的選項
叫做使用ASTC的GPU壓縮

00:31:29.890 --> 00:31:32.626
ASTC代表高級可縮放紋理壓縮

00:31:32.693 --> 00:31:36.797
是用GPU壓縮過的紋理格式

00:31:36.897 --> 00:31:42.903
被很多Apple設備上和其他系統上
的現代GPU支持

00:31:44.505 --> 00:31:49.877
我們把這個選擇帶到你的資源分類中
通過兩種不同形式

00:31:49.943 --> 00:31:52.613
一是GPU最佳質量

00:31:52.679 --> 00:31:56.917
是固定的比特率
4位每像素ASTC壓縮模式

00:31:56.984 --> 00:32:00.020
是很好的選擇 大致上可以
在視覺性能上

00:32:00.087 --> 00:32:03.290
和視覺保真度上
和高質量JPEG相當

00:32:04.858 --> 00:32:07.594
我們還有GPU最小尺寸

00:32:07.661 --> 00:32:10.230
如果你真的想極大地優化你的足跡

00:32:10.330 --> 00:32:14.468
和你的內存足跡
那麼你選擇這個尺寸

00:32:14.535 --> 00:32:16.470
這是1位每像素固定比特率編碼

00:32:16.537 --> 00:32:18.305
有優秀的存儲特性

00:32:19.506 --> 00:32:24.545
當然因爲不是每個設備的每個GPU
都支持

00:32:24.611 --> 00:32:27.648
使用ASTC格式

00:32:28.348 --> 00:32:30.651
我們更進一步
爲你自動生成

00:32:30.717 --> 00:32:35.122
一個軟件後退
爲沒有這個功能的設備

00:32:35.189 --> 00:32:37.124
這很好的一點是它意味着你不需要
擔心

00:32:37.191 --> 00:32:40.561
你的內容會不兼容

00:32:40.661 --> 00:32:41.762
對所有支持的設備

00:32:41.828 --> 00:32:43.397
我們會自動生成這個後退

00:32:43.497 --> 00:32:45.499
合適地使用 瘦身 路由它

00:32:45.566 --> 00:32:48.101
對不支持ASTC的設備

00:32:48.735 --> 00:32:51.238
所以你可以使用GPU壓縮

00:32:51.305 --> 00:32:54.942
不需要冒破壞兼容性的風險

00:32:55.776 --> 00:32:58.312
一個簡短的註解關於GPU如何壓縮

00:32:58.378 --> 00:33:00.514
廣色域資源

00:33:01.048 --> 00:33:06.653
我們用ASTC低動態範圍
（LDR）壓縮模式

00:33:07.387 --> 00:33:09.656
就是說廣色域內容實際上需要

00:33:09.723 --> 00:33:12.025
在壓縮前被降低到8位

00:33:12.092 --> 00:33:15.963
因爲LDR是每樣本8位的壓縮格式

00:33:16.763 --> 00:33:18.832
好消息是我們爲你進行這項工作

00:33:18.899 --> 00:33:22.536
我們自動進行一個高質量的8位
轉換

00:33:22.603 --> 00:33:25.239
在構造中
當我們處理你的圖像時

00:33:26.173 --> 00:33:28.876
但是我們保留可能含有的廣色域
顏色

00:33:28.942 --> 00:33:30.711
在你的原始16位源內容中的顏色

00:33:30.777 --> 00:33:35.382
通過Display P3色彩空間內
編碼和壓縮

00:33:35.449 --> 00:33:38.418
這樣就保留了顯示所有顏色的能力

00:33:38.485 --> 00:33:40.754
在Display P3色域中的所有顏色

00:33:42.823 --> 00:33:44.291
這就是部署

00:33:44.391 --> 00:33:46.393
關於部署特性的一個小討論

00:33:46.460 --> 00:33:49.162
但是這個演講是關於顏色的

00:33:49.296 --> 00:33:50.697
顏色怎麼樣？

00:33:51.565 --> 00:33:53.634
特別是UI中的顏色

00:33:54.434 --> 00:33:55.369
UI中的顏色

00:33:55.469 --> 00:33:59.373
一個重要的觀察是你在屏幕上看到
的大部分像素

00:33:59.439 --> 00:34:01.208
大部分應用繪製的
並不是來自圖像

00:34:01.275 --> 00:34:04.912
即使在這次演講中獲得了重要地位
的應用

00:34:04.978 --> 00:34:06.947
屏幕上的大部分像素實際上是純色

00:34:07.047 --> 00:34:09.416
在你的應用中用代碼繪製

00:34:10.284 --> 00:34:11.918
廣色域顏色的結果是

00:34:11.985 --> 00:34:16.623
對僅僅工作在這麼簡單的層次帶
來了新的挑戰

00:34:16.723 --> 00:34:18.091
讓我們談談它

00:34:18.692 --> 00:34:20.960
特別是我想談談第一個挑戰

00:34:21.027 --> 00:34:22.663
實際上是談論顏色

00:34:22.728 --> 00:34:24.864
因爲這是一個被低估的問題

00:34:24.931 --> 00:34:26.667
被低估的問題

00:34:27.167 --> 00:34:30.170
一般當設計師和工程師交流

00:34:30.237 --> 00:34:34.507
通過書面形式 或者可能甚至是
口頭或視覺形式

00:34:34.574 --> 00:34:37.844
代碼的交流
通常假設了sRGB色彩空間

00:34:38.445 --> 00:34:41.514
這表明你可能曾經看到顏色被
寫下來

00:34:41.614 --> 00:34:45.319
像是RGB 128 45 56
這樣的格式

00:34:45.686 --> 00:34:47.855
很簡單 他們不告訴你
這是在什麼色彩空間

00:34:47.955 --> 00:34:50.090
它假設每個人都知道是什麼顏色

00:34:50.157 --> 00:34:52.826
因爲每個人都使用sRGB 不是嗎？

00:34:53.092 --> 00:34:54.761
不再是了

00:34:55.395 --> 00:34:59.333
這對和廣色域一起工作不再足夠

00:34:59.433 --> 00:35:00.267
那你要怎麼辦？

00:35:00.334 --> 00:35:02.002
你能做的最重要的步驟是指出

00:35:02.069 --> 00:35:05.138
指出什麼色彩空間是你工作和交流的

00:35:05.205 --> 00:35:07.774
或者寫下 或者傳送那個顏色

00:35:09.176 --> 00:35:14.248
當你進行廣色域設計時
用Display P3而非sRGB

00:35:14.581 --> 00:35:15.849
並標明它

00:35:16.149 --> 00:35:21.288
如果你需要使用比0到255的8位
表示更高的精度

00:35:21.421 --> 00:35:22.656
那麼使用浮點數

00:35:23.023 --> 00:35:26.159
做爲一個例子 下一次你在電子
郵件裏發送顏色

00:35:26.660 --> 00:35:28.595
你可能會把它們寫成像這樣的

00:35:28.662 --> 00:35:33.500
有一個註解 P3 255
128 191等等

00:35:34.468 --> 00:35:35.402
選擇顏色

00:35:35.469 --> 00:35:37.004
這是你怎麼交流顏色

00:35:37.070 --> 00:35:39.373
但是那個顏色是從何而來的

00:35:39.439 --> 00:35:41.642
可能是你選擇它
可能是設計師從哪選擇了它

00:35:41.742 --> 00:35:43.944
他們是怎麼選擇顏色的？
用一個色板

00:35:44.578 --> 00:35:47.481
這是Mac的標準色板

00:35:47.548 --> 00:35:49.950
是AppKit的一部分
叫做NSColorPanel

00:35:51.685 --> 00:35:56.223
這當然是個很熟悉的UI
但是它也遭受

00:35:56.290 --> 00:35:58.825
一些我們剛纔提到了的調用顏色
遇到的限制

00:35:58.892 --> 00:36:02.296
典型的 我們選取紅 綠 藍的值
0到255的數字

00:36:02.963 --> 00:36:06.166
色板總是支持在不同的色彩空間
中選擇顏色

00:36:06.233 --> 00:36:09.803
但是這不總是一個直觀和簡單的
用戶體驗

00:36:10.370 --> 00:36:12.706
我很高興地說我們實際上做了
一些改進

00:36:12.773 --> 00:36:14.842
在macOS Sierra的色板中

00:36:14.908 --> 00:36:16.977
使工作在廣色域變得容易一點

00:36:17.511 --> 00:36:18.745
我們做的第一件事

00:36:18.812 --> 00:36:22.883
是我們把最常用最重要的工作空間

00:36:22.983 --> 00:36:26.420
主要是Display P3和
sRGB放在右鍵菜單裏

00:36:26.486 --> 00:36:32.726
在數字選擇器的動作菜單裏sRGB
當然還有Display P3

00:36:32.893 --> 00:36:35.596
我們做的下一件事是我們實際上
允許一個選項

00:36:35.662 --> 00:36:40.067
改變它的顏色的數字顯示方式
從整數變成浮點數

00:36:40.400 --> 00:36:42.836
所以你可以標準化浮點顏色

00:36:42.903 --> 00:36:45.305
如果這對你的工作流程有利

00:36:46.840 --> 00:36:51.612
另一個令人興奮的事是我們
在色度環或環選擇器中完成了它

00:36:52.279 --> 00:36:55.782
我們實際上改變了它的實現
所以它實際上可以渲染

00:36:55.883 --> 00:37:00.954
整個P3顏色的色域
當使用一個合適的顯示器時

00:37:02.256 --> 00:37:05.459
我們還添加了一個新的右鍵菜單
允許你

00:37:05.526 --> 00:37:07.561
使用這個自動行爲

00:37:07.628 --> 00:37:11.098
它自動切換功能 在P3

00:37:11.164 --> 00:37:15.335
和sRGB之間 當你用多臺顯示器時
或者固定在特定色彩空間

00:37:15.836 --> 00:37:17.871
如果你想看到更多

00:37:19.506 --> 00:37:23.810
現在我們選擇了我們的顏色
我們知道怎麼溝通它

00:37:23.877 --> 00:37:26.146
其實要使事情發生
我們需要寫代碼 不是嗎？

00:37:26.346 --> 00:37:28.815
我們怎麼在代碼中構造廣色域顏色？

00:37:30.217 --> 00:37:33.353
我們引入了兩個新的方便的構造函數

00:37:33.420 --> 00:37:38.192
在AppKit和UIKit中直接
使用Display P3顏色數字

00:37:38.959 --> 00:37:41.228
這是NSColor Display P3
紅 綠 藍 透明度

00:37:41.295 --> 00:37:43.797
和UIColor Display P3
紅 綠 藍 透明度

00:37:43.864 --> 00:37:46.066
很好的方法
和來自你的設計師的P3顏色一起工作

00:37:47.000 --> 00:37:51.338
但是當然你的代碼可能工作在
擴大範圍sRGB顏色上

00:37:51.438 --> 00:37:54.842
這可能並不來自設計師
但是可能來自一個不同的子系統

00:37:54.942 --> 00:37:58.946
或者一個提供擴大範圍sRGB顏色
的API

00:37:59.179 --> 00:38:00.480
你怎麼和這些一起工作？

00:38:00.681 --> 00:38:05.085
好消息是我們擴展了已有的標準

00:38:05.152 --> 00:38:08.488
NSColor和UIColor的
紅 綠 藍 透明度構造函數

00:38:08.655 --> 00:38:12.826
並不固定在他們的輸入成分
並且允許值被表示成

00:38:12.893 --> 00:38:14.795
大於1和小於0

00:38:14.928 --> 00:38:18.465
這樣你可簡單構造擴大範圍的sRGB
顏色

00:38:20.501 --> 00:38:23.203
然後是儲存顏色

00:38:24.338 --> 00:38:26.373
如果你想要

00:38:27.574 --> 00:38:30.811
把顏色放入你的文檔數據或者
用某種形式歸檔它們要怎麼做？

00:38:31.044 --> 00:38:34.147
這樣做的話要特別小心

00:38:34.214 --> 00:38:37.985
因爲和這個生態系統的其他部分
一樣

00:38:38.185 --> 00:38:41.889
有很多傳統上的關於顏色空間的
假設

00:38:41.955 --> 00:38:43.457
並假設每個人說的是相同的事

00:38:43.524 --> 00:38:45.592
當你傳遞一個紅 綠 藍數字

00:38:45.659 --> 00:38:47.361
你只需要三個數字對嗎？

00:38:47.427 --> 00:38:49.530
只需這麼做表示一個顏色
這有什麼問題？

00:38:49.997 --> 00:38:51.131
事實證明確實有問題

00:38:51.465 --> 00:38:54.635
因爲你無法分清sRGB

00:38:54.701 --> 00:38:56.470
和P3顏色且你可能做了錯誤選擇

00:38:56.537 --> 00:38:59.173
結果在你的文檔中是錯誤的顏色

00:38:59.773 --> 00:39:02.075
我希望你考慮一下

00:39:02.142 --> 00:39:07.681
在使用廣色域顏色的時候同時編碼
一個兼容的sRGB顏色

00:39:08.382 --> 00:39:12.252
這允許你的應用
特別是舊的版本

00:39:12.352 --> 00:39:13.353
因爲這是文檔數據

00:39:13.420 --> 00:39:16.089
你需要考慮向前向後兼容

00:39:16.490 --> 00:39:20.027
允許舊應用繼續得到sRGB數據

00:39:20.093 --> 00:39:22.996
並繼續把它當成sRGB
這是當時做的假設

00:39:23.363 --> 00:39:26.366
而新的軟件知道新的廣色域代碼

00:39:26.433 --> 00:39:27.634
你一起保存的代碼

00:39:28.669 --> 00:39:31.271
你怎麼創造兼容的sRGB顏色？

00:39:31.338 --> 00:39:34.408
在iOS上你可以用
CGColor.convert API

00:39:34.908 --> 00:39:38.946
在macOS上你可以用珍貴的
NSColor.usingColorSpace API

00:39:39.012 --> 00:39:41.215
來把那些顏色轉化到sRGB色彩空間

00:39:42.049 --> 00:39:45.752
我們實際上把這集成到了macOS
本身中

00:39:46.220 --> 00:39:51.325
你可能熟悉TextEdit
Mac上的文字編輯應用

00:39:51.592 --> 00:39:54.595
它的文檔格式是RTF
也就是富文本格式

00:39:54.661 --> 00:39:56.797
一直存在並被支持

00:39:56.864 --> 00:39:59.766
被Cocoa文本系統作爲
它所需的文檔儲存格式

00:40:00.067 --> 00:40:04.671
當你對一個文本範圍添加一個顏色

00:40:04.738 --> 00:40:07.207
它實際上被儲存在RTF文檔裏的方式

00:40:07.541 --> 00:40:12.946
是簡單的紅 綠 藍 0到255

00:40:13.247 --> 00:40:15.616
這會造成問題
我想現在你們可以理解

00:40:15.682 --> 00:40:17.951
因爲我們不知道
那些紅 綠 藍值

00:40:18.018 --> 00:40:20.988
屬於哪個色彩空間
而且它不允許你表達整個範圍

00:40:21.622 --> 00:40:23.390
所以我們採取了行動

00:40:23.790 --> 00:40:26.894
我們的成果是改進RTF標準

00:40:26.960 --> 00:40:30.664
以及我們怎麼讀寫RTF
至少在我們的平臺上

00:40:31.131 --> 00:40:34.735
通過包含一個擴展的顏色表

00:40:35.235 --> 00:40:37.938
這實際上註釋了每個顏色元組

00:40:38.005 --> 00:40:40.574
它現在被轉化成16位整數

00:40:40.841 --> 00:40:42.976
包含單獨的色彩空間信息

00:40:43.043 --> 00:40:45.879
允許你在多個色彩空間定義顏色

00:40:47.714 --> 00:40:48.782
這很好

00:40:48.882 --> 00:40:51.451
但是這是加利福尼亞州
我們應該衝浪不是嗎？

00:40:51.818 --> 00:40:53.687
這和顏色有什麼關係？

00:40:53.754 --> 00:40:55.556
網絡上有顏色

00:40:58.158 --> 00:41:01.128
關於廣色域和網絡的好消息是

00:41:01.562 --> 00:41:04.031
只要你的圖像內容有正確的標籤

00:41:04.097 --> 00:41:05.933
和正確的顏色配置信息

00:41:06.333 --> 00:41:10.137
那麼所有內容在網頁上渲染時都
會被顏色匹配

00:41:10.404 --> 00:41:12.639
只要你這麼做
你就準備好了

00:41:13.941 --> 00:41:17.177
還有現在有媒介查詢可以用來解析
資源

00:41:17.244 --> 00:41:20.514
在P3和sRGB兼容設備間
這真的很方便

00:41:21.849 --> 00:41:24.618
最後現在有WebKit提案

00:41:24.718 --> 00:41:29.456
用來在除了sRGB以外的色彩空間
中定義顏色

00:41:29.523 --> 00:41:32.125
一種從CSS開始就有的情況

00:41:32.693 --> 00:41:35.596
我要說的就這些
我想把講臺交給Steve Holt

00:41:35.696 --> 00:41:40.200
他會告訴你更多關於在你的應用中
渲染廣色域的事

00:41:40.667 --> 00:41:41.568
謝謝

00:41:44.171 --> 00:41:45.072
謝謝Patrick

00:41:47.040 --> 00:41:49.042
所以在你的應用中

00:41:49.810 --> 00:41:53.580
你經常有從資源分類中獲得的資源

00:41:53.647 --> 00:41:57.217
但是你可能獲得一些內容是由
用戶產生的

00:41:57.284 --> 00:42:00.120
或者來自網絡
你無法控制的來源

00:42:00.754 --> 00:42:04.725
也許你想要產生一些額外的資源
作爲它的一部分

00:42:05.325 --> 00:42:07.160
你怎麼在廣色域中來處理這些？

00:42:07.694 --> 00:42:10.898
當你用廣色域繪製時

00:42:12.332 --> 00:42:14.434
我將用一個簡化的例子

00:42:14.501 --> 00:42:19.740
這是一個盒子
它的一半被渲染

00:42:19.806 --> 00:42:23.143
用Display P3中
我們可用最飽和的紅色

00:42:23.544 --> 00:42:25.746
另一半被渲染

00:42:25.879 --> 00:42:29.583
使用我們可用的最飽和的sRGB顏色

00:42:30.417 --> 00:42:34.388
不幸的是因爲這個視頻是被錄製的

00:42:34.454 --> 00:42:36.857
而且你是用一個投影系統觀看直播

00:42:37.124 --> 00:42:40.160
而它並沒有和我們的新顯示一樣
的顏色保真度

00:42:40.360 --> 00:42:41.261
我們需要作弊

00:42:42.296 --> 00:42:44.898
我們實際上降低了兩種顏色的
飽和度

00:42:44.965 --> 00:42:48.836
我們看到的和代碼不完全一樣

00:42:48.936 --> 00:42:50.537
和我將要展示的代碼的輸出相比

00:42:50.604 --> 00:42:53.540
但是在一臺設備上渲染它
它會在那

00:42:54.441 --> 00:42:58.812
我是UIKit組
Cocoa的框架工程師

00:42:58.912 --> 00:43:03.450
當然我會從桌面的Cocoa開始

00:43:03.550 --> 00:43:05.519
用廣色域Cocoa渲染

00:43:05.586 --> 00:43:07.187
當你在桌面上

00:43:07.254 --> 00:43:10.457
它已經有很好的顏色管理支持

00:43:10.524 --> 00:43:13.193
你圖像和繪製中的顏色配置

00:43:13.994 --> 00:43:16.330
如果你需要在代碼中手動繪製

00:43:16.763 --> 00:43:20.367
而且需要在屏幕外完成
推薦的做法是

00:43:20.434 --> 00:43:24.404
用NSImage和
drawingHandler API

00:43:25.272 --> 00:43:27.207
它被調用時有當前語境

00:43:27.875 --> 00:43:31.712
你可以在任何你使用NSImage的
地方使用它

00:43:31.879 --> 00:43:32.913
它可以在那工作

00:43:33.680 --> 00:43:35.415
讓我們看一些代碼

00:43:37.451 --> 00:43:40.821
很簡單就是設置一個尺寸

00:43:41.388 --> 00:43:46.126
我們用我們想要的尺寸
初始化NSImage

00:43:46.193 --> 00:43:47.594
我們不想它翻轉

00:43:48.195 --> 00:43:51.365
我們配置繪製處理器

00:43:53.834 --> 00:43:56.069
我們從drawRect
得到傳入的矩形

00:43:56.403 --> 00:44:01.608
我們把它分爲兩半
分配displayP3Red並繪製它

00:44:02.476 --> 00:44:05.679
然後分配我們的sRGB紅並繪製它

00:44:06.380 --> 00:44:10.050
然後返回真 因爲我們成功了
我們完成了

00:44:10.751 --> 00:44:12.986
這就是了 它是工作的

00:44:13.387 --> 00:44:15.289
如果你目前在你的應用裏使用它

00:44:15.522 --> 00:44:16.957
你已經做了正確的事

00:44:18.559 --> 00:44:21.328
這就是桌面

00:44:21.828 --> 00:44:24.531
那關於iOS呢？
應該是一樣容易對嗎？

00:44:26.200 --> 00:44:31.071
你們應該熟悉
UIGraphicsBeginImageContext

00:44:31.738 --> 00:44:33.006
這是一個很好的API

00:44:34.808 --> 00:44:36.610
讓我們再看看代碼

00:44:37.110 --> 00:44:39.947
我們得到尺寸
我們用尺寸創造語境

00:44:40.948 --> 00:44:46.753
我們分開我們的矩形 繪製我們的
P3顏色和sRGB顏色

00:44:47.588 --> 00:44:49.556
我們得到我們的圖像並結束語境

00:44:50.958 --> 00:44:52.926
這就是我們得到的

00:44:54.595 --> 00:44:56.496
這不對

00:44:58.465 --> 00:44:59.733
爲什麼這不工作？

00:45:02.536 --> 00:45:07.274
如果我們看看資料
我們有一個有趣的點

00:45:08.108 --> 00:45:12.446
我們標明瞭UIKit中的
BeginImageContext API

00:45:13.380 --> 00:45:16.483
只會返回一個32位整數語境

00:45:16.617 --> 00:45:21.455
這表明你每個通道紅 綠 藍 透明
度只得到8位

00:45:23.557 --> 00:45:28.028
這極大地影響了我們能用它繪製
什麼

00:45:29.396 --> 00:45:32.966
因爲我們不能創建一個語境
每個顏色通道超過8位

00:45:35.736 --> 00:45:39.339
它不能顯示任何擴大範圍sRGB色域
中的顏色

00:45:40.974 --> 00:45:44.244
而且因爲已有的界面是用C語言寫的

00:45:44.511 --> 00:45:48.582
我們不能擴展選項

00:45:48.715 --> 00:45:52.719
我們也不想使UIGraphics
成爲有更多選項的語境

00:45:53.887 --> 00:45:57.958
所以我們在iOS X中提供了一些
新API

00:45:58.692 --> 00:46:00.661
它是UIGraphicsImageRenderer

00:46:02.162 --> 00:46:03.897
它的工作方式很直觀

00:46:03.964 --> 00:46:06.200
我會進入一些代碼

00:46:07.701 --> 00:46:11.038
首先初始化我們的圖像渲染者對象

00:46:11.305 --> 00:46:12.439
你可以重用它

00:46:12.673 --> 00:46:16.243
而且它的屬性會保持相同
在每個

00:46:16.310 --> 00:46:18.345
你使用這個繪製處理器得到的圖像中

00:46:20.547 --> 00:46:22.783
你只需要調用渲染器 圖像

00:46:23.016 --> 00:46:29.656
你提供代碼塊就像平時一樣

00:46:30.524 --> 00:46:34.828
你從描述確切屬性的
格式裏得到的邊界

00:46:34.895 --> 00:46:36.897
這個特定的渲染器所含有的屬性

00:46:37.698 --> 00:46:39.233
然後你分開這個邊界

00:46:40.701 --> 00:46:43.604
你得到並渲染P3紅色方塊

00:46:44.505 --> 00:46:48.075
然後你設置和渲染sRGB紅色方塊

00:46:48.642 --> 00:46:50.611
就像我們之前在AppKit中有的

00:46:51.111 --> 00:46:53.780
我們有一個正確渲染了擴大範圍的

00:46:54.648 --> 00:46:57.651
一半P3一半sRGB的紅色方塊

00:46:59.586 --> 00:47:01.822
關於這個新API的一些其他要注意
的事

00:47:02.723 --> 00:47:04.958
默認它是完全被顏色管理

00:47:06.126 --> 00:47:10.764
它還默認支持
擴大範圍的sRGB色彩空間

00:47:11.832 --> 00:47:14.034
它對這很聰明

00:47:14.568 --> 00:47:20.073
若你有一個設備有P3顯示
像是新iPad Pro 9.7英寸

00:47:20.541 --> 00:47:22.009
我們會默認啓用它

00:47:22.075 --> 00:47:24.077
你不需要進行額外工作

00:47:24.545 --> 00:47:27.114
但是如果你在一臺不支持顯示
擴展了的顏色的設備上

00:47:27.214 --> 00:47:29.616
比如其他iPad和iPhone

00:47:30.350 --> 00:47:33.654
那麼你會得到更標準的每通道8位

00:47:34.021 --> 00:47:37.024
sRGB語境來進行繪製

00:47:37.691 --> 00:47:41.662
所以我們沒有浪費額外的內存
來得到16位浮點語境

00:47:42.763 --> 00:47:46.333
它爲你做的其他事是
管理CGContext的生命週期

00:47:47.067 --> 00:47:49.436
你不需要操心結束這個語境

00:47:49.503 --> 00:47:52.673
或者自己進行其他管理

00:47:54.408 --> 00:47:57.544
對你應用中的任何舊代碼

00:47:57.845 --> 00:48:00.480
它工作在
UIGraphicsGetCurrentContext

00:48:00.814 --> 00:48:03.116
所以如果你調用一些函數比如
繪製矩形

00:48:03.650 --> 00:48:04.952
你會做正確的事

00:48:06.854 --> 00:48:09.656
這就是在屏幕外繪製

00:48:10.157 --> 00:48:11.325
關於在屏幕上繪製呢？

00:48:12.492 --> 00:48:13.994
我們重新開始一個新iKit

00:48:15.229 --> 00:48:18.031
在UIView上
我們有新的Swift 3

00:48:18.365 --> 00:48:20.434
在Swift 3中被新命名 繪製

00:48:20.767 --> 00:48:23.370
我們在這爲你做正確的事

00:48:24.004 --> 00:48:27.641
當你在你的UIView子類中調用
繪製

00:48:28.408 --> 00:48:31.144
如果你是在iPad 9.7英寸上

00:48:32.012 --> 00:48:37.885
我們會正確的在擴大範圍sRGB
色彩空間中調用你的繪製方法

00:48:37.985 --> 00:48:40.087
使用浮點像素格式

00:48:41.088 --> 00:48:44.491
如果你不是在一個新設備上那麼

00:48:45.292 --> 00:48:49.129
你得到現在你得到的
每通道8位的sRGB

00:48:50.597 --> 00:48:54.201
當然如果你有圖像
我們有UIImageView

00:48:54.568 --> 00:48:57.471
從iOS 9.3起被顏色管理

00:48:57.538 --> 00:48:59.573
並在現在被繼續顏色管理

00:48:59.640 --> 00:49:02.643
屏幕上的廣色域CocoaTouch

00:49:02.743 --> 00:49:05.045
如果你需要知道你是如何渲染的

00:49:05.746 --> 00:49:08.982
你可以看看你的視圖中的
UITraitCollection的新特徵

00:49:09.082 --> 00:49:11.618
在視圖控制器中被稱爲顯示色域

00:49:13.153 --> 00:49:15.889
它獲得一個
UIDisplayGamut枚舉

00:49:15.956 --> 00:49:19.193
它的屬性是P3如果你在一個新的

00:49:19.259 --> 00:49:23.697
P3類的顯示上 或者sRGB如果你
在一個新的sRGB類的顯示上

00:49:23.797 --> 00:49:27.701
這可以很有用
如果你需要匹配一個特定

00:49:28.335 --> 00:49:32.039
UI顏色和一個從資源分類獲得的
資源

00:49:32.105 --> 00:49:36.310
所以你正確地匹配顏色到你的資源

00:49:38.278 --> 00:49:43.150
現在如果你知道一個視圖永遠都
不需要

00:49:43.250 --> 00:49:45.586
擴大範圍sRGB語境？

00:49:46.653 --> 00:49:52.993
CALayer上有一個新的屬性是
內容格式

00:49:53.126 --> 00:49:58.398
這爲你控制CA創建的語境的位深

00:49:58.498 --> 00:50:01.335
當它渲染那個視圖時

00:50:01.935 --> 00:50:08.709
根據默認 在iPad Pro 9.7英寸上
它會使用擴大範圍語境

00:50:08.909 --> 00:50:13.580
在其他設備上它會默認使用傳統的
sRGB語境

00:50:14.348 --> 00:50:18.118
你通過使用這些格式文字來控制它

00:50:18.218 --> 00:50:19.720
控制位深

00:50:19.786 --> 00:50:22.723
在Cocoa中 回到桌面

00:50:23.624 --> 00:50:27.060
NSView和
UIView是一樣的

00:50:27.127 --> 00:50:30.631
它會使用和NSWindow
相同的語境來繪製

00:50:31.331 --> 00:50:36.370
你可以看看所有傳統的屬性

00:50:36.436 --> 00:50:40.774
有窗口後備存儲 屏幕目標配置等

00:50:41.675 --> 00:50:43.377
如果窗口改變了顯示屏

00:50:44.111 --> 00:50:47.181
viewDidChangeBackingProperties
這個你視圖中的回調會被調用

00:50:47.548 --> 00:50:49.416
你還可以監聽

00:50:49.483 --> 00:50:53.086
NSWindowDidChange-
BackingPropertiesNotification

00:50:53.153 --> 00:50:55.255
它會在你的視圖窗口中被省略

00:50:55.722 --> 00:51:01.228
這些是從很久之前你就一直在
打交道的相同的東西

00:51:01.895 --> 00:51:04.031
僅僅是提醒一下

00:51:04.331 --> 00:51:07.634
NSWindow的支持屬性

00:51:08.669 --> 00:51:14.441
包括顯示縮放 色彩空間和輸出
顯示色域

00:51:16.443 --> 00:51:23.417
和在iOS中一樣 你還可以控制
從AppKit獲得的語境的位深

00:51:25.219 --> 00:51:28.055
通過NSWindow的
WindowDepth屬性

00:51:28.121 --> 00:51:30.958
你可以把它設置成這些位深中的
任意一個

00:51:31.024 --> 00:51:36.864
所以如果你在一個廣色域顯示器上
但並不需要額外的精度

00:51:37.464 --> 00:51:40.868
你可以設成24位RGB

00:51:40.934 --> 00:51:43.804
那它就不會爲你創建擴展的語境

00:51:44.872 --> 00:51:47.241
我們今天學到了什麼？

00:51:48.108 --> 00:51:49.009
好吧

00:51:50.310 --> 00:51:53.580
你看到了廣色域的視覺和怎麼把
這帶給

00:51:53.647 --> 00:51:56.650
下一代的顯示和你的用戶

00:51:57.885 --> 00:52:00.587
我們談了一點關於色域的知識和
顏色管理

00:52:01.054 --> 00:52:03.924
以及怎麼和廣色域內容一起工作

00:52:03.991 --> 00:52:05.692
你想帶給你的用戶的內容

00:52:08.028 --> 00:52:10.430
我們回顧了怎麼在你的應用中使用
顏色

00:52:12.065 --> 00:52:15.736
怎麼把你的繪製代碼提升到顏色
的下一個層次

00:52:16.870 --> 00:52:21.475
通過確保它在廣色域情況下能
正確繪製

00:52:22.609 --> 00:52:26.880
關於更多信息
你當然可以獲得這些幻燈片

00:52:26.947 --> 00:52:29.249
在這個演講的網站上

00:52:29.983 --> 00:52:33.187
還有很多相關的演講

00:52:34.221 --> 00:52:35.389
這是第1頁

00:52:37.191 --> 00:52:38.659
請獲得它們

00:52:38.725 --> 00:52:41.995
如果它們已經發布了
我不會枚舉它們 它們有很多

00:52:43.463 --> 00:52:48.001
請用WWDC應用觀看視頻
或者在WWDC網站上在線觀看

00:52:48.502 --> 00:52:49.436
謝謝