00:00:19.853 --> 00:00:24.291 
Swift的新特性

00:00:24.992 --> 00:00:25.826 
早上好

00:00:29.730 --> 00:00:32.198 
歡迎來到“Swift的新特性”

00:00:33.200 --> 00:00:37.171 
先說一下Swift 3的發佈目標

00:00:37.938 --> 00:00:40.440 
Swift作爲開源工程發佈

00:00:40.507 --> 00:00:41.708 
六個月前

00:00:42.276 --> 00:00:45.979 
這麼做的重要原因不只是爲了

00:00:46.046 --> 00:00:46.980 
把代碼推到GitHub上

00:00:47.314 --> 00:00:49.850 
更是爲了創建一個開放的社區

00:00:50.184 --> 00:00:53.253 
來推動Swift向前發展

00:00:53.987 --> 00:00:57.191 
Swift 3是Swift的
第一個重要更新

00:00:57.257 --> 00:01:00.994 
作爲社區的產品

00:01:01.361 --> 00:01:04.263 
我們談一下社區的演進

00:01:04.331 --> 00:01:08.435 
和這個語言的演進過程

00:01:08.602 --> 00:01:09.837 
Chris會講一下

00:01:09.903 --> 00:01:12.472 
關於社區對Swift 3做了什麼

00:01:14.641 --> 00:01:19.713 
這次發佈的另一個重要方面是爲了
把Swift帶給更多的人

00:01:20.380 --> 00:01:23.417 
現在的軟件生態系統非常多樣化

00:01:23.483 --> 00:01:25.819 
人們做很多不同的事情

00:01:25.886 --> 00:01:27.087 
在不同的情況下

00:01:27.321 --> 00:01:28.989 
他們或者做服務器端程序

00:01:29.056 --> 00:01:30.958 
還有應用和其他的東西

00:01:31.024 --> 00:01:33.560 
我們想讓任何人都能用Swift

00:01:33.794 --> 00:01:37.598 
我們還會討論Swift
在Linux上的重要進展

00:01:37.998 --> 00:01:41.435 
這真的是Swift第一次重要的更新

00:01:41.502 --> 00:01:43.604 
自從Swift被移植到Linux上

00:01:45.472 --> 00:01:47.908 
現在仔細看看這次發佈

00:01:48.242 --> 00:01:51.378 
Swift已經被不斷迭代和打磨

00:01:51.445 --> 00:01:53.247 
在過去的兩次發佈中

00:01:53.313 --> 00:01:56.984 
基於使用它的開發者的反饋

00:01:57.751 --> 00:02:00.053 
當然 還有來自社區的反饋

00:02:00.120 --> 00:02:01.488 
自從它開源以後

00:02:02.055 --> 00:02:03.257 
關於Swift 3的重大事件

00:02:03.323 --> 00:02:06.960 
我們想讓重要的基礎都固定下來

00:02:07.027 --> 00:02:10.229 
然後我們能從上面繼續前進

00:02:11.298 --> 00:02:14.101 
最後 可能是最寬泛的目標

00:02:14.168 --> 00:02:17.471 
我們很想讓Swift變得更迷人

00:02:17.738 --> 00:02:18.572 
不應該這樣麼

00:02:19.039 --> 00:02:21.675 
Swift想成爲一個強大的工具

00:02:21.742 --> 00:02:23.477 
給開發者用

00:02:23.544 --> 00:02:27.014 
他們可以用它做一些驚人的事情

00:02:27.181 --> 00:02:28.749 
這是我們想要的

00:02:29.383 --> 00:02:31.885 
現在 這可能是比較寬泛的目標

00:02:31.952 --> 00:02:35.756 
我們努力聽取反饋

00:02:35.822 --> 00:02:38.058 
從使用Swift的應用開發者那裏

00:02:38.525 --> 00:02:41.495 
Apple內部如何使用

00:02:42.029 --> 00:02:44.498 
我想說說我們自己怎麼使用Swift

00:02:44.565 --> 00:02:48.602 
尤其是去年在我們發佈的系統和工具中

00:02:49.736 --> 00:02:52.673 
重要的不是我們在
Apple使用Swift越來越多

00:02:52.739 --> 00:02:55.542 
是我們使用的方式越來越多

00:02:55.609 --> 00:02:57.811 
不僅是寫應用

00:02:57.878 --> 00:03:00.147 
我們現在內部框架中也在用Swift

00:03:00.214 --> 00:03:02.950 
Agents 和 Daemons
類似這樣的加強了

00:03:03.016 --> 00:03:05.986 
這種操作系統的深層體驗

00:03:06.620 --> 00:03:10.224 
如果你看一下 你會發現
對Sierra和iOS 10

00:03:10.290 --> 00:03:12.593 
你會看到像新的音樂應用

00:03:13.026 --> 00:03:14.795 
使用了大量的Swift

00:03:14.862 --> 00:03:17.030 
Sierra裏的終端應用

00:03:17.097 --> 00:03:20.501 
和新的日誌記錄聯繫緊密

00:03:21.468 --> 00:03:23.971 
也是用大量的Swift

00:03:25.239 --> 00:03:29.409 
通過Agents和Daemons
Sierra中新的畫中畫功能

00:03:29.476 --> 00:03:31.879 
完全是用Swift寫的

00:03:32.579 --> 00:03:34.047 
現在看看工具

00:03:34.114 --> 00:03:37.284 
Xcode也使用了Swift

00:03:37.618 --> 00:03:40.287 
比如 Xcode 8中的新文檔查看

00:03:40.354 --> 00:03:41.922 
是用Swift寫的

00:03:42.389 --> 00:03:45.425 
和爲iOS設計的優美
Swift Playgrounds

00:03:45.759 --> 00:03:47.928 
也是完全用Swift寫的

00:03:48.495 --> 00:03:52.165 
所以我們Swift做了很多

00:03:52.232 --> 00:03:56.670 
這讓我們集中精力解決各種不同的問題

00:03:56.737 --> 00:04:00.274 
無論是性能問題 比如內存使用

00:04:00.340 --> 00:04:02.442 
保證常規調用正確 等等

00:04:02.509 --> 00:04:06.013 
在各種情況下 保證Swift可用

00:04:07.281 --> 00:04:10.017 
我想講一個特別案例

00:04:10.284 --> 00:04:11.385 
就是Dock

00:04:12.219 --> 00:04:15.055 
有兩個原因

00:04:16.290 --> 00:04:19.059 
一個是它沒有人們想象那麼簡單

00:04:19.125 --> 00:04:23.063 
它不僅僅是桌面的一個條

00:04:23.397 --> 00:04:27.935 
它代表一大部分macOS
的桌面管理體驗

00:04:28.302 --> 00:04:32.272 
像Mission Control
LaunchPad Spaces

00:04:32.639 --> 00:04:34.942 
我們認爲他們是Dock的一部分

00:04:36.043 --> 00:04:38.111 
第二個原因是

00:04:38.178 --> 00:04:40.347 
這兩次的發佈中我們已用了Swift

00:04:40.414 --> 00:04:42.983 
在El Capitan
開始採用Swift

00:04:43.050 --> 00:04:46.887 
我們有兩個版本
來對比Swift的使用

00:04:48.555 --> 00:04:51.491 
在Sierra中Dock有很多改變

00:04:52.392 --> 00:04:56.363 
首先 絕大部分Mission
Control被用Swift重寫

00:04:56.430 --> 00:04:59.066 
輔助引擎已經用Swift重寫了

00:04:59.266 --> 00:05:00.100 
爲什麼我們這麼做

00:05:00.167 --> 00:05:03.270 
我們不是爲了重寫代碼而重寫

00:05:03.604 --> 00:05:06.039 
這使代碼質量提高了

00:05:06.106 --> 00:05:09.109 
通過接入新的特性和重構

00:05:09.476 --> 00:05:11.812 
同時有一些新的功能需要實現

00:05:11.879 --> 00:05:16.850 
所以這是重寫代碼的合適時機

00:05:17.985 --> 00:05:20.621 
從工程角度 看起來是什麼樣呢

00:05:22.089 --> 00:05:25.325 
給你點提示
Dock有差不多20萬行代碼

00:05:26.059 --> 00:05:28.829 
有差不多幾萬行Swift

00:05:29.796 --> 00:05:32.733 
在El Capitan
和Sierra

00:05:33.300 --> 00:05:36.303 
項目中Swift的代碼超過兩倍

00:05:37.471 --> 00:05:39.840 
實際上 通過重寫

00:05:40.107 --> 00:05:43.710 
替換掉了大量的C
和Objective-C代碼

00:05:45.345 --> 00:05:47.748 
這裏的影響不容易衡量

00:05:48.081 --> 00:05:51.218 
因爲我們還做了重構和添加了新特性

00:05:51.285 --> 00:05:53.720 
但我們看到大約少了15%的代碼

00:05:53.787 --> 00:05:57.558 
在用Swift替換掉C
和Objective-C時

00:05:57.624 --> 00:06:00.761 
這包括其中新加的特性

00:06:01.562 --> 00:06:03.830 
直接結果是

00:06:03.897 --> 00:06:06.099 
這個工程在Sierra中變小了

00:06:06.533 --> 00:06:09.002 
比在El Capitan中

00:06:10.003 --> 00:06:10.838 
現在

00:06:11.138 --> 00:06:13.240 
有更多的統計

00:06:13.507 --> 00:06:15.442 
我認爲最重要的是

00:06:15.509 --> 00:06:18.812 
寫Dock的工程師喜歡用Swift

00:06:19.279 --> 00:06:20.814 
他們沒有被強制使用它

00:06:21.048 --> 00:06:24.685 
他們是自發的
他們很想用Swift

00:06:25.352 --> 00:06:27.855 
他們的經驗是感覺

00:06:27.921 --> 00:06:30.924 
他們更容易的寫出他們想寫的代碼

00:06:30.991 --> 00:06:33.193 
他們喜歡Swift的安全的特性

00:06:33.260 --> 00:06:36.096 
讓他們堅信他們的代碼很棒

00:06:38.098 --> 00:06:39.800 
我們說說Swift的開源

00:06:40.634 --> 00:06:44.438 
如果你還不知道
請訪問swift.org

00:06:45.072 --> 00:06:48.742 
你可以找到各種貢獻的方式

00:06:49.076 --> 00:06:50.177 
比如 你想做

00:06:50.244 --> 00:06:53.080 
最專業的編譯器黑客

00:06:53.146 --> 00:06:56.049 
你可以檢出源代碼來找漏洞

00:06:57.551 --> 00:07:00.153 
也有其他方式你可以貢獻想法

00:07:00.220 --> 00:07:02.589 
我們想給Swift帶來什麼

00:07:04.658 --> 00:07:07.594 
現在 如何運作這個項目很重要

00:07:08.362 --> 00:07:10.531 
這意味着保持平等

00:07:10.998 --> 00:07:15.903 
我們非常想開放 透明和自由

00:07:15.969 --> 00:07:20.374 
每個人都能參與進來推動它向前

00:07:20.607 --> 00:07:23.677 
你能看到我們做出改變的合理理由

00:07:24.178 --> 00:07:25.445 
這真的非常重要

00:07:25.512 --> 00:07:26.847 
所有語言的改變

00:07:26.914 --> 00:07:29.650 
無論你在Apple工作

00:07:30.017 --> 00:07:32.119 
或者你是應用開發者

00:07:32.186 --> 00:07:34.788 
你有想法想要改變Swift

00:07:34.855 --> 00:07:36.356 
大家用的方法都一樣

00:07:36.757 --> 00:07:38.592 
我認爲這很重要

00:07:38.992 --> 00:07:42.796 
這意味着非蘋果工程師
可以直接

00:07:42.863 --> 00:07:46.433 
提交代碼給編譯器和其他儲存庫

00:07:46.600 --> 00:07:50.404 
我們想授權社區來推動Swift向前

00:07:51.438 --> 00:07:53.607 
第三 我想它同樣重要

00:07:53.774 --> 00:07:56.343 
對這個項目是面向代碼的

00:07:56.476 --> 00:07:59.379 
我們認爲每個人能貢獻代碼時

00:07:59.446 --> 00:08:01.849 
不會感到歧視很重要

00:08:01.915 --> 00:08:05.719 
不會被不專業的方式對待
我們很注意這些

00:08:06.820 --> 00:08:11.825 
最後這個項目的開源許可證比較寬鬆

00:08:12.226 --> 00:08:15.229 
這同樣重要
因爲我們想讓Swift

00:08:15.362 --> 00:08:17.097 
以Apple不曾設想的方式使用

00:08:17.164 --> 00:08:19.967 
這也是開源Swift的一個目標

00:08:20.033 --> 00:08:23.937 
我們想讓大家用各種方式使用它

00:08:24.338 --> 00:08:27.975 
同時社區也有很好的專利保護

00:08:28.041 --> 00:08:29.810 
這是我們爲何選擇該許可證的原因

00:08:32.078 --> 00:08:33.179 
你可有很多方式跟隨

00:08:33.246 --> 00:08:37.551 
Swift主幹開發

00:08:37.618 --> 00:08:39.886 
你可以檢出源代碼或者編譯編譯器

00:08:40.520 --> 00:08:43.256 
通常我們也有可下載的快照

00:08:43.323 --> 00:08:46.960 
你可以從swift.org上下載
直接在Xcode中使用

00:08:47.027 --> 00:08:48.262 
或者在Linux上使用

00:08:48.328 --> 00:08:50.564 
其他支持的平臺

00:08:50.631 --> 00:08:52.799 
我們也會提供快照

00:08:53.567 --> 00:08:56.904 
更棒的是在Xcode 8中的
Playgrounds

00:08:56.970 --> 00:08:59.006 
全部支持這些快照

00:08:59.072 --> 00:09:03.310 
這是一個很棒的方式來試驗Swift
伴隨着它的演進

00:09:03.644 --> 00:09:05.546 
同時你不再需要重啓Xcode

00:09:05.612 --> 00:09:07.481 
如果你想用其中的工具鏈

00:09:07.548 --> 00:09:10.317 
這體驗很清爽

00:09:10.384 --> 00:09:12.553 
在試用最新版本的Swift時

00:09:14.188 --> 00:09:17.224 
所有的開發都在GitHub上進行

00:09:17.791 --> 00:09:19.826 
不止一個工程

00:09:19.893 --> 00:09:22.429 
有一系列的代碼庫

00:09:22.496 --> 00:09:25.199 
你可以在swift.org上
找到它們的描述

00:09:26.233 --> 00:09:30.470 
它們可以大體被歸爲三類

00:09:31.171 --> 00:09:33.540 
語言和它的演進過程

00:09:33.774 --> 00:09:36.743 
一個包管理工具和一個核心庫集合

00:09:37.110 --> 00:09:38.212 
我們挨個說一下

00:09:39.713 --> 00:09:43.717 
包管理工具發佈
當Swift開源時

00:09:44.218 --> 00:09:47.087 
還處於早期階段和活躍開發階段

00:09:47.154 --> 00:09:51.024 
GitHub有逾1,000個軟件庫

00:09:51.091 --> 00:09:52.659 
使用包管理

00:09:53.493 --> 00:09:54.328 
它是什麼

00:09:55.329 --> 00:09:58.465 
它是一個跨平臺的 包管理
用來編譯

00:09:58.532 --> 00:10:00.801 
給Linux和0S 10打包

00:10:01.101 --> 00:10:02.903 
我們主要想編譯

00:10:03.203 --> 00:10:07.040 
讓社區給Swift打造一個生態系統

00:10:07.107 --> 00:10:09.943 
我們認爲把Swift帶到
其他平臺非常重要

00:10:10.010 --> 00:10:11.612 
像服務器端

00:10:13.413 --> 00:10:15.716 
它爲順暢的開發設計

00:10:15.782 --> 00:10:19.219 
它容易上手
最小化配置

00:10:19.486 --> 00:10:21.355 
容易解決依賴

00:10:21.421 --> 00:10:24.224 
目的是寫代碼然後運行

00:10:25.726 --> 00:10:28.262 
我們認爲對Swift來說
包管理如此基礎

00:10:28.762 --> 00:10:31.932 
它是一個長期成功

00:10:32.199 --> 00:10:34.701 
我們持續提交把

00:10:34.768 --> 00:10:37.638 
包管理集成到Xcode
隨着它更成熟

00:10:41.241 --> 00:10:43.277 
我們討論下核心庫

00:10:43.443 --> 00:10:44.311 
什麼是核心庫

00:10:45.546 --> 00:10:47.414 
在iOS中有很多很棒的API

00:10:47.614 --> 00:10:51.652 
macOS tvOS和
watchOS中

00:10:52.186 --> 00:10:55.489 
其中許多基礎API

00:10:55.556 --> 00:10:58.492 
我們想讓很多人能使用它

00:10:59.059 --> 00:11:00.894 
所以核心庫代表

00:11:01.361 --> 00:11:05.232 
可選擇的實現了不綁定
Objective-C運行時間

00:11:05.599 --> 00:11:08.035 
Linux上的核心API

00:11:08.101 --> 00:11:11.038 
還有其他Swift會移植到的平臺

00:11:11.939 --> 00:11:14.575 
有名的例子包括像XE測試組件

00:11:14.641 --> 00:11:16.376 
你可以用來寫單元測試

00:11:16.944 --> 00:11:19.012 
一個基礎的子集

00:11:19.346 --> 00:11:21.515 
需要可移植並不會綁定到Cocoa

00:11:21.882 --> 00:11:24.718 
同時進行libdispatch移植

00:11:24.785 --> 00:11:26.820 
然後你可以用這些併發API

00:11:27.821 --> 00:11:31.191 
這些工作都剛開始進行
和Swift開源同時開始

00:11:31.258 --> 00:11:32.893 
但現在已經有不少了

00:11:33.227 --> 00:11:35.195 
在Linux上的基礎庫

00:11:35.262 --> 00:11:38.999 
支持許多很棒的API
像操作URL 日期

00:11:39.066 --> 00:11:41.835 
還有數據 UID等等

00:11:41.902 --> 00:11:46.173 
我們希望在未來會變的成熟

00:11:46.240 --> 00:11:49.476 
隨着社區希望更多的功能

00:11:52.479 --> 00:11:55.048 
現在 來討論下語言

00:11:55.782 --> 00:11:58.452 
Chris會講很多具體的變化

00:11:58.652 --> 00:12:01.989 
我想說說這些變化的演化歷程

00:12:02.489 --> 00:12:05.392 
這些都在Swift軟件庫中發生

00:12:06.760 --> 00:12:09.963 
比如現在你想要改變Swift

00:12:10.030 --> 00:12:11.765 
你感覺有些地方很爛

00:12:11.832 --> 00:12:15.936 
重要的開發中有些地方出了問題

00:12:16.003 --> 00:12:18.172 
可能兩年前這種設計比較好

00:12:18.238 --> 00:12:19.806 
但現在應該重新考慮下

00:12:20.274 --> 00:12:23.844 
或有些很棒的東西我們應該加進去

00:12:24.144 --> 00:12:27.848 
能給開發者帶來全新的機會

00:12:28.215 --> 00:12:29.049 
沒關係

00:12:29.183 --> 00:12:32.452 
你可以從郵件列表開始

00:12:32.519 --> 00:12:35.822 
告訴其他有相同興趣的開發者

00:12:36.256 --> 00:12:37.090 
開始觀察

00:12:37.824 --> 00:12:40.794 
這是個好想法麼
它的好處和弊端是什麼

00:12:41.628 --> 00:12:43.564 
一旦有足夠的關鍵論據

00:12:44.131 --> 00:12:46.133 
它會成爲一個提議

00:12:46.800 --> 00:12:50.037 
這裏僅是一個用
markdown寫的白皮書

00:12:50.971 --> 00:12:54.208 
可以在GitHub上查看

00:12:55.108 --> 00:12:57.978 
這裏有一個實際的提議

00:12:58.745 --> 00:13:01.882 
通過pull request
提交等待審覈

00:13:02.649 --> 00:13:08.288 
左下角是數字標識 SE0046

00:13:08.622 --> 00:13:10.057 
每個提議都會被數字標記

00:13:10.123 --> 00:13:11.558 
我們通過它指定

00:13:11.625 --> 00:13:15.395 
實際的提議在Swift變化中

00:13:15.696 --> 00:13:17.497 
Chris引用這些提議

00:13:17.898 --> 00:13:21.368 
在他講Swift的變化的時候

00:13:22.236 --> 00:13:24.872 
這些提議是大家建議修改

00:13:25.239 --> 00:13:27.908 
Swift的方法

00:13:27.975 --> 00:13:30.844 
合理的建議爲什麼我們需要做這些改變

00:13:32.713 --> 00:13:35.048 
具體的改變應該是什麼樣

00:13:35.649 --> 00:13:36.683 
優點和缺點

00:13:36.984 --> 00:13:40.954 
一旦提議合理將會被接受

00:13:42.589 --> 00:13:47.628 
之前的審查在接受進入倉庫是開始

00:13:48.662 --> 00:13:51.164 
審查還是會被開放討論

00:13:51.231 --> 00:13:53.800 
在郵件列表中
但這次會集中

00:13:53.867 --> 00:13:57.104 
在具體的提議
不僅僅是抽象的想法

00:13:58.071 --> 00:14:00.941 
一段時間後
Swift核心團隊

00:14:01.008 --> 00:14:04.545 
一小部分單獨的推動着項目向前的人

00:14:04.611 --> 00:14:06.547 
會看社區的反饋

00:14:07.214 --> 00:14:08.849 
看優點和缺點

00:14:09.249 --> 00:14:13.420 
根據社區的需要做最終選擇

00:14:13.854 --> 00:14:17.925 
他們要考慮很多
怎麼把提議融合到Swift中

00:14:18.225 --> 00:14:20.527 
這有意義麼
一些提議會被駁回

00:14:20.594 --> 00:14:22.896 
“嘿 當前這樣的話

00:14:22.963 --> 00:14:24.164 
行不通

00:14:24.231 --> 00:14:27.234 
所以回去考慮和改進一下”

00:14:27.467 --> 00:14:29.636 
或者這對Swift永遠都不合適

00:14:31.004 --> 00:14:33.106 
有時提議通常也會被接受

00:14:33.273 --> 00:14:34.775 
通過改進

00:14:34.842 --> 00:14:38.912 
無論被駁回或者接受
所基於的理論都會做記錄

00:14:38.979 --> 00:14:42.015 
所以每個人都可以回頭看看
這個語言的發展史

00:14:42.082 --> 00:14:44.051 
同時明白什麼被提議

00:14:44.117 --> 00:14:47.988 
爲什麼被提議
爲什麼被拒絕或者接受了

00:14:49.623 --> 00:14:51.425 
你可以看到所有的提議

00:14:51.491 --> 00:14:54.328 
通過Swift-evolution
倉庫

00:14:54.561 --> 00:14:56.997 
這個是爲Swift 3建立的

00:14:57.064 --> 00:14:59.399 
由所有人推動

00:15:00.467 --> 00:15:04.104 
下面由Chris講一下都發生了什麼

00:15:07.307 --> 00:15:08.141 
謝謝 Ted

00:15:12.145 --> 00:15:13.580 
因爲有很多其他事

00:15:13.647 --> 00:15:17.484 
不幸的是我沒有時間準備演講稿

00:15:17.551 --> 00:15:20.521 
我打印了所有的提議
我想我會給你們讀一下

00:15:20.888 --> 00:15:21.722 
聽起來不錯吧

00:15:23.190 --> 00:15:24.024 
開個玩笑

00:15:25.259 --> 00:15:26.760 
那麼我們將要幹什麼

00:15:27.461 --> 00:15:30.330 
之前我們說我們想要把
Swift的核心體驗變得很棒

00:15:30.397 --> 00:15:32.165 
不僅是語言

00:15:32.232 --> 00:15:33.901 
也包括標準庫

00:15:34.234 --> 00:15:37.070 
使用像Cocoa主要API的體驗

00:15:37.304 --> 00:15:38.972 
還有使用工具的體驗

00:15:39.039 --> 00:15:41.241 
我們會挨個介紹

00:15:42.543 --> 00:15:45.212 
Swift 3的一個目標是代碼兼容

00:15:45.579 --> 00:15:47.881 
這是個很大的目標
這意味着我們想

00:15:47.948 --> 00:15:50.617 
無論你在應用中
寫了什麼樣的代碼

00:15:50.684 --> 00:15:53.020 
我們要保證
當Swift 3發佈的時候

00:15:53.086 --> 00:15:54.922 
不會有其他問題

00:15:55.455 --> 00:15:59.193 
這是一個相當困難的任務
因爲這不僅關係到

00:15:59.626 --> 00:16:03.931 
我們用的分號還是逗號

00:16:03.997 --> 00:16:05.832 
還關係到關鍵的API

00:16:05.899 --> 00:16:08.635 
做盡可能多的工作讓Swift 3

00:16:08.702 --> 00:16:10.204 
兼容 然後我們可以一直使用

00:16:10.270 --> 00:16:12.840 
你寫的代碼

00:16:13.540 --> 00:16:16.043 
這裏有幾個不同的方面

00:16:16.109 --> 00:16:17.544 
一個是整合這些到

00:16:17.611 --> 00:16:20.881 
剛纔Ted說的Swift-evolution提議過程

00:16:20.948 --> 00:16:23.217 
Swift 3之後的提議

00:16:23.584 --> 00:16:25.886 
都應當好好考慮下代碼兼容性

00:16:26.753 --> 00:16:30.057 
現在 我爲最重要的方面
Swift 3中最大的改變是

00:16:30.123 --> 00:16:33.961 
影響我們每天寫的代碼的API

00:16:34.428 --> 00:16:36.129 
我們深入看一下API命名

00:16:36.196 --> 00:16:38.365 
先大體瞭解下

00:16:39.633 --> 00:16:42.035 
API是一個基礎組成

00:16:42.102 --> 00:16:44.938 
當Apple在創建這個平臺的時候

00:16:45.005 --> 00:16:47.875 
是你每天使用的重要部分

00:16:47.941 --> 00:16:50.110 
你用它來創建應用

00:16:50.344 --> 00:16:51.311 
命名規則

00:16:51.378 --> 00:16:53.747 
和設計方法

00:16:53.814 --> 00:16:55.749 
對它的影響很深遠

00:16:56.383 --> 00:16:58.018 
在Swift 3中

00:16:58.385 --> 00:17:00.721 
我們會思考寫這些API最好的
方式是什麼

00:17:00.787 --> 00:17:02.656 
我們應該更詳細些麼

00:17:02.723 --> 00:17:06.159 
還是應該儘可能的簡潔

00:17:06.693 --> 00:17:10.196 
我們發現最重要的是要清晰

00:17:10.263 --> 00:17:12.065 
能夠清晰的被使用

00:17:12.232 --> 00:17:13.500 
我們對API進行了優化

00:17:13.567 --> 00:17:15.969 
提取最重要的基礎信息

00:17:16.036 --> 00:17:18.672 
去掉其他不必要的信息

00:17:19.339 --> 00:17:21.808 
我們看幾個例子
給你們展示下

00:17:21.875 --> 00:17:25.512 
實際操作中我們的一些思考
和這麼做是爲了什麼

00:17:25.846 --> 00:17:28.682 
這裏有幾個Swift 2中的API

00:17:29.583 --> 00:17:31.952 
我們從數組和往裏面添加內容開始

00:17:32.286 --> 00:17:34.721 
在Swift 3中 被削減了一半

00:17:35.289 --> 00:17:38.859 
動詞添加
現在操作是操作了

00:17:39.259 --> 00:17:43.397 
contentsOf是傳進參數描述

00:17:43.463 --> 00:17:45.599 
現在它是傳遞參數的標籤

00:17:45.999 --> 00:17:47.734 
調用的時候使用

00:17:47.935 --> 00:17:49.903 
這能讓它更清晰一些

00:17:50.370 --> 00:17:54.107 
插入索引 這個已經很合理了

00:17:54.174 --> 00:17:57.744 
但是這個索引沒有額外的信息

00:17:57.811 --> 00:18:01.448 
只是重複類型信息最好去掉

00:18:02.149 --> 00:18:05.219 
在基礎庫中 我們看看NSURL

00:18:05.586 --> 00:18:08.021 
它有個fileURL方法或者屬性

00:18:08.088 --> 00:18:11.091 
看看它
它返回一個布爾值但不明顯

00:18:11.158 --> 00:18:14.061 
如果用is開頭將會很清晰

00:18:14.628 --> 00:18:17.898 
另一個簡單的例子是
URLByAppendingPathComponent

00:18:18.265 --> 00:18:20.834 
它去掉了多餘的返回類型

00:18:20.901 --> 00:18:22.302 
因爲沒有必要

00:18:22.736 --> 00:18:25.005 
有非常多的像這樣的改善

00:18:25.305 --> 00:18:27.574 
把所有的這些加起來

00:18:27.641 --> 00:18:31.211 
在10:00將會有個
關於這些更詳細的介紹

00:18:33.080 --> 00:18:36.383 
我們看看Objective-C和CAPI
在Swift中如何工作

00:18:36.450 --> 00:18:40.888 
因爲它是你使用API時
非常關鍵的一部分

00:18:40.954 --> 00:18:42.756 
影響你在Swift中的體驗

00:18:43.423 --> 00:18:47.060 
我們做了很多提升
其中一個我們叫import爲成員

00:18:47.461 --> 00:18:49.963 
這是一個典型的C的核心圖像API

00:18:50.664 --> 00:18:53.467 
在Swift 2中
它會被當做全局函數引用

00:18:53.867 --> 00:18:55.002 
好的 這樣可以

00:18:55.068 --> 00:18:58.138 
但這不符合Swift開發者
用的API

00:18:58.205 --> 00:19:02.809 
所以我們引入了一個新特性
允許API作者給他們的API標記

00:19:02.876 --> 00:19:06.880 
用這個宏來把它封裝爲一個屬性
當做一個方法導入

00:19:06.947 --> 00:19:08.715  
提供一個優美的面向對象的API

00:19:08.782 --> 00:19:11.151  
就像核心圖像和dispatch中的

00:19:11.251 --> 00:19:13.453  
你也可以在你的代碼裏這麼用

00:19:14.888 --> 00:19:16.924 
另一個是泛型

00:19:16.990 --> 00:19:19.760 
去年在Swift 2中
我們引入了輕量級的泛型

00:19:19.826 --> 00:19:23.030 
我們使用它來引入類型
結合到Swift中

00:19:23.931 --> 00:19:25.532 
但Apple的幾個框架

00:19:25.599 --> 00:19:27.234 
用其他方式採用了輕量泛型

00:19:27.301 --> 00:19:29.703 
比如 自動佈局和核心數據

00:19:30.437 --> 00:19:35.843 
在Swift 3中
我們可以引入完全通用泛型

00:19:35.909 --> 00:19:38.512 
到Swift 3中作爲泛型類型

00:19:38.579 --> 00:19:42.149 
就是說許多冗餘的類型信息

00:19:42.216 --> 00:19:43.383 
可以不要了

00:19:44.885 --> 00:19:45.719 
我們講一下

00:19:51.992 --> 00:19:53.393 
關於常量

00:19:53.660 --> 00:19:56.196 
在許多Cocoa API中
一種常見的模式是

00:19:56.263 --> 00:19:58.732 
用字符串作爲枚舉

00:19:59.132 --> 00:20:03.704 
我們這麼做因爲在C語言中
最好的方法是

00:20:03.770 --> 00:20:06.507 
寫一個開放的可擴展的枚舉

00:20:06.907 --> 00:20:08.642 
但這有很多缺點

00:20:08.709 --> 00:20:12.346 
這些枚舉 變成了全局常量

00:20:12.412 --> 00:20:15.048 
在Swift中被引用爲全局的

00:20:15.115 --> 00:20:16.984  
使用的時候需要輸入很長的名字

00:20:17.050 --> 00:20:21.355  
在很多地方都不是很好
一個是完全類型不安全

00:20:21.421 --> 00:20:24.091  
你可以傳遞一個任意的字符串
但它不會工作

00:20:24.458 --> 00:20:27.261 
同時它還不好因爲
它污染了代碼的完整性

00:20:27.327 --> 00:20:30.564 
讓人感覺不像Swift API

00:20:30.831 --> 00:20:34.134 
這是對Swift APIs
來說非常好的發展方向

00:20:35.369 --> 00:20:36.803 
Swift 3中得以解決

00:20:36.870 --> 00:20:41.308  
現在API的作者可以
給typedef添加一個簡單的屬性

00:20:41.375 --> 00:20:44.878  
不同的是
它變成了Swift中的強類型

00:20:44.978 --> 00:20:48.081  
你可看到通過常用的
NSNotification.Name

00:20:48.282 --> 00:20:52.452  
在這個例子中
是在UserDefaults範圍中

00:20:52.519 --> 00:20:55.589  
現在可以通過點屬性來調用

00:20:55.956 --> 00:20:59.126  
最棒的是它經過了類型檢查

00:21:04.898 --> 00:21:07.201 
所以在SDK中它有巨大的提升

00:21:07.267 --> 00:21:09.970 
通過這一週大家就可瞭解這些新的特性

00:21:10.037 --> 00:21:12.072 
這周有許多很棒的講座

00:21:12.706 --> 00:21:14.842 
我們深入瞭解下核心語言

00:21:15.876 --> 00:21:20.814 
通過這些改變
我們回頭看看參數標籤

00:21:20.881 --> 00:21:24.284 
快速介紹下
如果你在Swift 2中有這個函數

00:21:24.551 --> 00:21:28.755 
你應該三個中取兩個參數使用

00:21:28.822 --> 00:21:29.656 
爲什麼這樣

00:21:30.057 --> 00:21:35.262 
因爲沿襲了Objective-C
的命名和設計模式

00:21:35.329 --> 00:21:39.032 
我們想要在Swift中
和Cocoa的體驗一致

00:21:39.566 --> 00:21:42.603 
當然在Swift中
從根本上改變了Cocoa的工作方式

00:21:42.669 --> 00:21:45.806 
現在我們可以把參數標籤給所有變量

00:21:45.873 --> 00:21:49.042 
可以讓Swift表現更一致和可預測

00:21:54.615 --> 00:21:55.949 
我們說說泛型

00:21:56.149 --> 00:21:59.853 
Swift泛型語法 我認爲
非常優美並富有表達力

00:21:59.920 --> 00:22:04.157 
它能讓你知道函數主要是幹啥的

00:22:04.224 --> 00:22:06.393 
用一個簡潔和友好的方式

00:22:07.394 --> 00:22:10.097 
不幸的是 當你開始
使用更高級例子

00:22:10.163 --> 00:22:12.099 
你需要添加泛型約束

00:22:12.165 --> 00:22:16.303 
基本上是這些函數的第二功能

00:22:16.370 --> 00:22:18.972 
但是它們卻在第一位置

00:22:19.406 --> 00:22:22.342 
使代碼變得難讀

00:22:22.576 --> 00:22:25.245 
Swift 3中 我們拓展了語法
並修正了這個問題

00:22:25.312 --> 00:22:28.048 
現在簽名被放在了前面

00:22:28.115 --> 00:22:30.250 
約束是第二位了

00:22:35.022 --> 00:22:36.657 
我們討論下未使用的結果

00:22:36.857 --> 00:22:39.960 
這裏有個簡單的函數
它加上一個數字並且返回

00:22:40.227 --> 00:22:42.663 
在Swift 2中
這段代碼不會被警告

00:22:42.729 --> 00:22:44.665 
即使它是一個漏洞

00:22:44.731 --> 00:22:46.533 
可能你忘記把它賦給一個變量

00:22:46.600 --> 00:22:49.837 
可能你完全調用錯了函數 對麼

00:22:50.404 --> 00:22:53.540 
在Swift 3中
你默認會得一個到警告

00:22:53.607 --> 00:22:55.075 
它很安全 這很棒

00:22:55.542 --> 00:22:57.511 
這在其他地方也很好

00:22:57.578 --> 00:23:00.747 
因爲對複雜例子的組合也很好

00:23:01.348 --> 00:23:04.318 
當然不是所有函數都這麼理想化

00:23:04.384 --> 00:23:07.354 
在實際中它們可能有副作用

00:23:08.088 --> 00:23:10.624 
你可能會想
如果有副作用

00:23:10.691 --> 00:23:13.093 
也許我就是爲了這樣使用它

00:23:13.660 --> 00:23:16.630 
這沒有問題
你可以把它賦值給下劃線

00:23:16.697 --> 00:23:21.034 
告訴編譯器或者維護你代碼的人

00:23:21.101 --> 00:23:23.770 
你認爲這個函數返回的東西

00:23:23.837 --> 00:23:25.906 
你明確表示你不關心

00:23:25.973 --> 00:23:26.807 
對麼

00:23:27.174 --> 00:23:29.910 
現在 不是所有的函數有這個屬性

00:23:29.977 --> 00:23:32.446 
有些函數
像一些異常

00:23:32.579 --> 00:23:35.082 
有副作用
作爲它們的首要功能

00:23:35.148 --> 00:23:38.619 
返回值通常是你第二位你不需要關心的

00:23:38.785 --> 00:23:41.788 
在異常函數的例子中
你可以使用一個屬性表示

00:23:41.855 --> 00:23:44.625 
我知道這個返回值是第二件事

00:23:44.691 --> 00:23:47.394 
不要產生警告如果我沒有使用

00:23:47.461 --> 00:23:48.562 
一個友好的系統

00:23:50.063 --> 00:23:55.602 
我們說說Swift 3中
最令人興奮的地方

00:23:55.869 --> 00:23:57.271 
被去掉的特性

00:23:57.337 --> 00:24:00.073 
你可能會問
爲什麼這麼做

00:24:00.440 --> 00:24:02.943 
但我們真的讓Swift 3變得很棒

00:24:03.310 --> 00:24:06.013 
Swift 3是這些的總和

00:24:06.079 --> 00:24:08.916 
許多部分被放進Swift

00:24:08.982 --> 00:24:11.385 
在我們真正明白
什麼應該被編譯進去

00:24:11.451 --> 00:24:12.853 
和我們該往哪裏走

00:24:13.353 --> 00:24:16.857 
所以我們回頭想了下
Swift所有的屬性

00:24:16.924 --> 00:24:19.826 
無論它是何時被引入進來的
我們問一下基本的問題

00:24:20.394 --> 00:24:24.198 
若該特性還沒被加入到Swift
現在應該添加麼

00:24:25.566 --> 00:24:28.669 
對於一些特性 答案是否定的
所以我們把它拿走

00:24:28.969 --> 00:24:31.071 
這樣做很棒

00:24:31.138 --> 00:24:33.473 
它爲大家簡化了語言

00:24:33.874 --> 00:24:38.745 
我意識到其中可能有偏見和爭議

00:24:39.746 --> 00:24:43.183 
Swift-evolution最棒
之處是作爲社區讓大家可以在其中討論

00:24:43.517 --> 00:24:47.454 
它們中的每一個
有個有豐富理論基礎的提議

00:24:47.521 --> 00:24:50.991 
如果你想回頭閱讀關於它的上百封郵件

00:24:51.058 --> 00:24:54.661 
請到歸檔的郵件列表查閱

00:24:54.761 --> 00:24:57.497 
我想郵件列表各個方面都有

00:24:57.564 --> 00:24:59.900 
這些問題都被描述得很好了

00:25:01.435 --> 00:25:04.671 
Swift也有其他小的提升

00:25:04.738 --> 00:25:06.373 
我沒有時間去全部說一遍

00:25:06.440 --> 00:25:08.642 
但我們有像泛型別名

00:25:08.709 --> 00:25:12.713 
我們有類型安全選擇器
和關鍵路徑引用

00:25:12.980 --> 00:25:14.748 
我們有新的編譯配置

00:25:14.815 --> 00:25:17.284 
匹配功能提升
和其他好多東西

00:25:17.351 --> 00:25:19.119 
你可以從提議中閱讀

00:25:19.186 --> 00:25:20.654 
或者從發佈日誌中看到

00:25:21.922 --> 00:25:26.593 
關於核心語言的另一方面是語法

00:25:27.060 --> 00:25:30.197 
我想我們大家都喜歡
我希望你們喜歡

00:25:30.264 --> 00:25:33.300 
Swift的基本語法結構

00:25:33.367 --> 00:25:35.068 
我認爲它是其中一個主要部分

00:25:35.135 --> 00:25:37.905 
因爲它感覺起來熟悉
並在一起工作的很好

00:25:38.405 --> 00:25:40.574 
不幸的是
Swift的有些部分

00:25:40.641 --> 00:25:45.512 
沒有被好好考慮

00:25:45.579 --> 00:25:47.848 
我們每天用的語法結構

00:25:48.382 --> 00:25:50.083 
所以我們進行重新設計

00:25:50.150 --> 00:25:52.886 
對你最喜歡
的顏色添加了美觀一致的色調

00:25:54.388 --> 00:25:57.057 
我們研究了一些奇怪的例子

00:25:57.124 --> 00:26:01.094 
因爲它們和語言剩下的地方不一致

00:26:01.161 --> 00:26:03.063 
它讓語言變得難用

00:26:03.130 --> 00:26:06.233 
這些被包含進Swift
因爲它們很重要

00:26:06.533 --> 00:26:08.902 
我們回過頭來標準化所有的東西

00:26:08.969 --> 00:26:11.939 
我們想把它弄正確
並在長時間裏保持正確

00:26:13.006 --> 00:26:14.975 
這還是核心語言的簡述

00:26:15.042 --> 00:26:17.845 
我想深入點說下類型系統

00:26:19.046 --> 00:26:20.848 
首先 什麼是類型系統

00:26:20.981 --> 00:26:23.951 
在Swift中類型系統和類型檢查器

00:26:24.418 --> 00:26:25.786 
一起定義類型怎麼工作

00:26:26.220 --> 00:26:28.755 
類型檢查器和編譯器使用類型系統

00:26:28.822 --> 00:26:33.560 
來保證你的代碼是正確的
或檢驗它是正確的

00:26:33.627 --> 00:26:36.163 
同時推斷你代碼忽略的東西

00:26:36.230 --> 00:26:39.266 
因爲它默認是隱式的
例如 什麼是A類型

00:26:39.900 --> 00:26:42.503 
在Swift 3中
我們想要簡化類型系統

00:26:42.569 --> 00:26:45.272 
讓它更一致
我們也想杜絕

00:26:45.339 --> 00:26:47.975 
人們遇到的常見類型問題

00:26:48.041 --> 00:26:49.843 
引起漏洞

00:26:50.477 --> 00:26:52.412 
我們討論幾個例子

00:26:53.013 --> 00:26:54.848 
首先是不安全的指針

00:26:56.083 --> 00:26:58.919 
不知道你們是否注意到你可以在

00:26:58.986 --> 00:27:01.822 
Swift 2中
給一個不安全的指針賦值nil

00:27:01.889 --> 00:27:03.991 
你可以直接測試它是否nil

00:27:04.191 --> 00:27:05.859 
你可以使用不安全的指針

00:27:05.926 --> 00:27:08.562 
不用關心它是否爲nil

00:27:08.829 --> 00:27:11.231 
它和其他語言不一樣

00:27:11.298 --> 00:27:13.901 
它讓不安全的指針更不安全了

00:27:14.601 --> 00:27:17.538 
在Swift 3中
不安全的指針不能爲nil

00:27:17.604 --> 00:27:20.641 
你可以使用optionals
就像這個語言的其他部分

00:27:20.707 --> 00:27:24.411 
你可以用if let安全的測試
然後包起來

00:27:24.478 --> 00:27:27.881 
甚至使所有的語法
提示我們提供optionals

00:27:27.948 --> 00:27:30.784 
讓所有的代碼工作的更穩定些

00:27:32.486 --> 00:27:34.421 
說到optionals

00:27:34.488 --> 00:27:38.358 
這個語言另一個有趣的部分
是隱式展開optionals

00:27:38.825 --> 00:27:41.828 
隱式展開optionals
是語言非常重要的一部分

00:27:41.895 --> 00:27:44.131 
通過兩個階段的初始化

00:27:44.198 --> 00:27:47.367 
或者調用API還沒有驗證時是否爲空

00:27:47.668 --> 00:27:49.036 
這裏有個簡單的例子

00:27:49.102 --> 00:27:52.539 
我有個int
用了隱式展開optional

00:27:52.606 --> 00:27:55.676 
對其他類型也可以這麼用

00:27:56.109 --> 00:27:59.012 
現在 Swift 2中的隱式展開
optional的基本工作方式

00:27:59.079 --> 00:28:01.315 
我想 大家都已經清楚了

00:28:02.049 --> 00:28:03.951 
這個例子中的X 比如

00:28:04.585 --> 00:28:08.055 
編譯器必須強制展開那個IUO

00:28:08.121 --> 00:28:10.157 
爲了做加法 它是這麼做的

00:28:10.390 --> 00:28:12.559 
對於y 就不必這麼做了

00:28:12.626 --> 00:28:15.229 
就像從代碼上傳遞下來了

00:28:15.529 --> 00:28:18.365 
這個傳遞有很多原因

00:28:18.498 --> 00:28:21.535 
這也很令人意外
因爲很多複雜的情況

00:28:21.602 --> 00:28:25.439 
常常讓我們撓頭
不知道代碼到底是在做什麼

00:28:25.839 --> 00:28:29.576 
在很多情況 你甚至不知道你有IUO

00:28:29.977 --> 00:28:33.180 
這裏 我有一個int和一個IUO

00:28:33.247 --> 00:28:35.716 
IUO是強制的麼

00:28:35.782 --> 00:28:38.418 
我能得到任何數組麼 或者可選的
這到底怎麼回事

00:28:38.485 --> 00:28:39.953 
你永遠不會知道

00:28:40.020 --> 00:28:42.823 
直到你編譯代碼時
並且你得到了一些奇怪的編譯錯誤

00:28:42.890 --> 00:28:45.626 
我們不想在這裏費力

00:28:46.727 --> 00:28:50.397 
所以IUO作爲一個概念非常重要

00:28:51.331 --> 00:28:52.332 
我們保留了它

00:28:52.733 --> 00:28:55.903 
但是我們改變了它的工作方式
用一個新的簡單的模型

00:28:56.637 --> 00:28:58.138 
這個模型還比較原始

00:28:58.472 --> 00:29:01.008 
如果使用了IUO

00:29:01.642 --> 00:29:04.745 
如果值是可選的 那麼就是

00:29:05.078 --> 00:29:08.148 
這是安全的
我們不想展開值

00:29:08.215 --> 00:29:09.483 
在你不想展開的地方

00:29:09.883 --> 00:29:12.352 
然而 如果編譯器需要展開它

00:29:12.419 --> 00:29:14.421 
爲了做類型檢查 它就展開

00:29:15.255 --> 00:29:17.224 
我們再來看些例子

00:29:17.691 --> 00:29:18.725 
這裏 有個x

00:29:18.792 --> 00:29:21.828 
編譯器需要展開它做加法 所以展開

00:29:21.895 --> 00:29:24.765 
這是IUO的重要部分

00:29:24.831 --> 00:29:26.233 
與強屬性的有所區別

00:29:27.267 --> 00:29:28.101 
爲什麼

00:29:28.535 --> 00:29:31.171 
好的 這裏這個編譯器可以
對錶達式做類型檢查

00:29:31.638 --> 00:29:32.906 
作爲optional

00:29:32.973 --> 00:29:35.809 
所以現在不需要傳遞IUO

00:29:35.876 --> 00:29:39.079 
可能在深入到代碼不同層級

00:29:39.146 --> 00:29:40.681 
它轉換成了一個強的optional

00:29:40.747 --> 00:29:43.517 
可以讓你思考

00:29:43.817 --> 00:29:45.819 
這讓數組更可控

00:29:45.886 --> 00:29:46.753 
因爲現在

00:29:47.020 --> 00:29:50.924 
當然 它可以作爲一個
強的optional被類型檢查

00:29:51.592 --> 00:29:54.962 
如果你實際上需要展開 這樣也可以

00:29:55.028 --> 00:29:58.599 
你可以明確地
在代碼中使用感嘆號包上它

00:29:58.665 --> 00:30:00.767 
現在讀代碼的人可以知道是什麼意思

00:30:00.834 --> 00:30:02.469 
你的代碼好了很多

00:30:03.971 --> 00:30:05.572 
這是我的快速瀏覽

00:30:05.639 --> 00:30:08.008 
關於類型系統的一些有意思的事情

00:30:08.075 --> 00:30:10.010 
我們談談標準庫

00:30:11.578 --> 00:30:15.382 
標準庫最大的改變是
全新的集合索引模型

00:30:16.083 --> 00:30:18.585 
這是什麼意思
你可能使用過索引

00:30:18.652 --> 00:30:19.486 
或者沒有

00:30:19.553 --> 00:30:21.588 
有很多方式使用索引

00:30:21.655 --> 00:30:23.590 
這裏的不同是它們如何移動

00:30:23.957 --> 00:30:26.660 
之前在Swift 2中
你可以調用索引的方法

00:30:26.727 --> 00:30:28.495 
像Successor 向前移動

00:30:29.029 --> 00:30:31.331 
在Swift 3中這個模型基本相同

00:30:31.398 --> 00:30:34.234 
除了現在索引可以自己移動

00:30:34.535 --> 00:30:38.238 
collection自己移動索引

00:30:39.373 --> 00:30:40.541 
爲什麼我們要做這些

00:30:40.607 --> 00:30:42.442 
在Springs有很多很棒的事

00:30:42.509 --> 00:30:44.344 
首先 我們開始簡化標準庫

00:30:44.411 --> 00:30:46.580 
許多類型去掉了 這很棒

00:30:46.980 --> 00:30:50.984 
更好的是 一些常見問題根本上就沒了

00:30:51.218 --> 00:30:54.188 
你可以隨便使用與發揮

00:30:54.254 --> 00:30:57.491 
之前可能觸發一個沒人知道的陷阱

00:30:58.025 --> 00:30:59.726 
同時性能也提高了

00:30:59.793 --> 00:31:03.063 
因爲我們可以去掉很多特殊情況處理

00:31:03.130 --> 00:31:04.798 
對這些我們很興奮

00:31:06.066 --> 00:31:07.401 
我們討論下數字類型

00:31:07.868 --> 00:31:10.871 
我們有一個新的浮點類型協議
或者一個家族協議

00:31:10.938 --> 00:31:14.208 
可以幫助定義操作讓你們寫通用的算法

00:31:14.274 --> 00:31:16.476 
超出浮點類型更廣的範圍

00:31:17.144 --> 00:31:20.480 
更好的是
如果你是個數字分析類型的人員

00:31:20.547 --> 00:31:22.416 
你理解IEEE浮點數

00:31:22.482 --> 00:31:25.052 
我不是 大部分人都不是

00:31:25.118 --> 00:31:28.355 
它有很多低層次的操作

00:31:28.422 --> 00:31:31.859 
像讓數字ULPS出來

00:31:31.925 --> 00:31:33.861 
其中有些重要的有技巧的東西

00:31:35.429 --> 00:31:36.930 
我也不全懂這些東西

00:31:36.997 --> 00:31:40.367 
我認爲這很重要

00:31:40.434 --> 00:31:44.404 
我理解像Pi樣的東西
每個人都喜歡Pi

00:31:44.838 --> 00:31:48.308 
在Swift 2中
使用MPi時我們總是遇到困難

00:31:48.375 --> 00:31:49.643 
這經常讓我惱怒

00:31:49.710 --> 00:31:52.346 
它總是錯誤的類型
你需要強制轉換它

00:31:52.412 --> 00:31:54.481 
總讓人泄氣

00:31:55.115 --> 00:31:59.353 
現在 除了包含IEEE的全部東西

00:31:59.419 --> 00:32:02.689 
我們有了Pi
在浮點數類型中

00:32:03.290 --> 00:32:05.392 
Swift通常有類型可用

00:32:05.459 --> 00:32:07.561 
另一個很棒的事情是

00:32:08.228 --> 00:32:10.564 
如果你有類型上下文

00:32:10.631 --> 00:32:12.866 
比如這裏我們返回一個CGFloat

00:32:13.166 --> 00:32:16.336 
替代強制轉換
你可以用CGFloat.Pi

00:32:16.637 --> 00:32:20.307 
更好的是你可以讓編譯器給你做推斷

00:32:20.374 --> 00:32:21.975 
會有不錯的結果

00:32:27.514 --> 00:32:29.716 
語言方面
有很多提升

00:32:29.783 --> 00:32:31.185 
貫穿標準庫

00:32:31.251 --> 00:32:35.155 
其中有些對提高你的
Swift代碼很有用

00:32:35.222 --> 00:32:39.026 
我強烈建議你看下其他Swift演講

00:32:39.092 --> 00:32:40.460 
可以得到更多信息

00:32:41.361 --> 00:32:43.363 
這是一個快速瀏覽 關於語言

00:32:43.430 --> 00:32:45.766 
標準庫
Cocoa在Swift如何工作

00:32:45.999 --> 00:32:49.970 
另一個重要的部分是
Swift和這些工具怎麼在一起工作

00:32:50.337 --> 00:32:54.007 
講到這裏
我想請Ewa Matejska給大家講講

00:32:54.508 --> 00:32:55.342 
Ewa？

00:32:58.178 --> 00:32:59.146 
謝謝 Chris

00:33:01.515 --> 00:33:02.783 
大家早上好

00:33:03.417 --> 00:33:04.985 
讓我們說說Tools

00:33:05.319 --> 00:33:06.720 
一個比較好的着入點是

00:33:06.787 --> 00:33:09.556 
就是工具如何提高性能

00:33:10.424 --> 00:33:12.893 
你可以看到
我們這一年非常忙碌

00:33:13.493 --> 00:33:15.963 
我們討論其中的幾個

00:33:17.464 --> 00:33:20.701 
我們重新實現了字典

00:33:21.034 --> 00:33:23.170 
我們集中

00:33:23.504 --> 00:33:26.073 
優化了字符串哈希算法

00:33:26.139 --> 00:33:27.307 
爲ASCII字符串

00:33:27.674 --> 00:33:29.977 
我們看到一些不錯的提升

00:33:30.477 --> 00:33:35.415 
從去年我們做的一些簡單的測試

00:33:36.617 --> 00:33:38.685 
我們還添加了棧的推廣

00:33:39.419 --> 00:33:42.055 
針對類實例數組常量

00:33:42.122 --> 00:33:45.058 
我們從堆棧中提取出來
相當費資源的操作

00:33:45.759 --> 00:33:46.693 
到棧

00:33:47.127 --> 00:33:52.332 
我們看到一些相當不錯的提升
在我們測試的時候

00:33:53.300 --> 00:33:55.068 
同時 像我說的

00:33:55.135 --> 00:33:58.005 
我們集中優化了
字符串哈希算法

00:33:58.372 --> 00:34:00.541 
我們看到它提升很大

00:34:00.974 --> 00:34:06.413 
在我們對比字符串前綴和後綴

00:34:06.480 --> 00:34:08.447 
我們有86倍的提升

00:34:10.150 --> 00:34:14.254 
接下來 我想說一下整體的模塊優化

00:34:14.955 --> 00:34:16.989 
這是去年我們引入的特性

00:34:17.056 --> 00:34:20.194 
我想給大家提醒下它是什麼東西

00:34:21.428 --> 00:34:23.096 
當你看這個圖表

00:34:23.463 --> 00:34:26.600 
你可以看到一個並行編譯流程

00:34:27.134 --> 00:34:29.837 
一個文件進入 一個文件出去

00:34:30.237 --> 00:34:32.339 
通過全模塊優化

00:34:33.273 --> 00:34:37.844 
我們擴展了編譯從一個文件到多個文件

00:34:38.745 --> 00:34:42.416 
這真的很棒
因爲編譯器有很多信息

00:34:42.683 --> 00:34:45.585 
來寫新的創新性優化

00:34:45.652 --> 00:34:47.721 
來讓你的代碼運行的更快

00:34:48.522 --> 00:34:52.492 
我們認爲從我們的內部測試中
已經可以穩定工作了

00:34:52.926 --> 00:34:57.798 
所以今年我們將把它
作爲新工程的默認值

00:34:58.699 --> 00:35:02.870 
以前的工程會有優化建議

00:35:03.170 --> 00:35:06.840 
按照它的建議 我們認爲你應該接受

00:35:08.542 --> 00:35:11.445 
這裏有個重要提醒
就是編譯時間

00:35:12.112 --> 00:35:14.815 
就像圖裏展示的

00:35:14.882 --> 00:35:17.684 
你會發現編譯器成了瓶頸

00:35:18.852 --> 00:35:22.055 
就像你想的
編譯時間 會增加

00:35:22.723 --> 00:35:24.224 
爲了抵消它

00:35:24.625 --> 00:35:26.927 
我們讓編譯器變得更智能

00:35:26.994 --> 00:35:29.563 
它會盡可能的緩存

00:35:30.097 --> 00:35:33.267 
來避免重新優化和編譯

00:35:33.967 --> 00:35:37.871 
最後結果是
雖然你第一次編譯時間

00:35:38.338 --> 00:35:41.041 
變長了

00:35:41.241 --> 00:35:44.645 
接下來 增量編譯應該更快

00:35:46.780 --> 00:35:48.582 
說說代碼大小

00:35:49.416 --> 00:35:53.420 
我們在這方面做了許多工作

00:35:53.487 --> 00:35:55.656 
從Swift 2.2開始

00:35:55.989 --> 00:35:57.858 
我們有了不錯的結果

00:35:58.392 --> 00:36:00.794  
DemoBots是一個樣例應用

00:36:00.861 --> 00:36:03.630  
你可以從developer.apple.com下載

00:36:04.264 --> 00:36:07.401  
你可以看到應用二進制文件大小減小

00:36:07.467 --> 00:36:09.203  
了差不多25%

00:36:09.736 --> 00:36:11.905  
自從Swift 2.2開始

00:36:12.339 --> 00:36:14.474  
這真的不錯

00:36:15.642 --> 00:36:18.045  
好的 關於性能只有這麼多

00:36:18.612 --> 00:36:21.548 
但關於Xcode還有不少可以講的

00:36:23.183 --> 00:36:25.652 
今年Xcode我最喜歡的特性是

00:36:25.719 --> 00:36:29.523 
Swift代碼瀏覽的提升

00:36:29.790 --> 00:36:33.527 
它對每天的開發影響很大

00:36:34.494 --> 00:36:36.196 
我們看一個例子

00:36:36.763 --> 00:36:38.332 
這裏有個例子

00:36:38.999 --> 00:36:43.203 
我們創建了個整型數組
接着進行排序

00:36:43.604 --> 00:36:45.072 
你認爲會發生什麼

00:36:45.305 --> 00:36:49.309 
當你右擊Sort跳到聲明

00:36:50.744 --> 00:36:52.613 
在Xcode 7.1中

00:36:53.547 --> 00:36:56.483 
你會進入一個綜合的像這樣的頭文件

00:36:56.917 --> 00:36:58.318 
這是什麼

00:36:58.385 --> 00:37:01.121 
這是一個可變集合類型

00:37:01.722 --> 00:37:05.526 
sort這裏返回
Self.Generated.Element

00:37:05.859 --> 00:37:09.029 
註釋中只有一個數組的參考

00:37:09.563 --> 00:37:12.132 
所以這不是很有意義

00:37:12.199 --> 00:37:13.467 
也不是很符合邏輯

00:37:13.734 --> 00:37:16.503 
在Xcode 8中
我們做的更好一些

00:37:16.937 --> 00:37:18.372 
現在你可以看到

00:37:18.605 --> 00:37:21.508 
這裏有個數組的擴展

00:37:21.942 --> 00:37:23.810 
和sorted

00:37:23.877 --> 00:37:27.481 
因爲在Xcode 8中
sort被重命名爲sorted

00:37:27.881 --> 00:37:30.117 
現在返回一個包含元素的數組

00:37:30.751 --> 00:37:32.352 
這真的提升了

00:37:32.586 --> 00:37:37.424 
你在Xcode中瀏覽代碼

00:37:37.491 --> 00:37:38.859 
閱讀時候更有邏輯了

00:37:40.294 --> 00:37:42.596 
同時 在標準庫中

00:37:42.996 --> 00:37:45.799 
我們通過邏輯區域添加了分組

00:37:45.866 --> 00:37:49.870 
比如 數組被分組爲集合

00:37:50.637 --> 00:37:52.806 
說到標準庫

00:37:53.607 --> 00:37:56.243 
我們有了各種新的文檔

00:37:56.944 --> 00:38:02.049 
同時協議被鎖定進了API

00:38:02.115 --> 00:38:04.885 
你可以有邏輯的瀏覽

00:38:05.185 --> 00:38:07.888 
就像在綜合接口中

00:38:09.957 --> 00:38:10.791 
謝謝

00:38:13.727 --> 00:38:16.230 
我認爲你們會喜歡這部分 是的

00:38:17.331 --> 00:38:20.267 
多少人有Swift 2.2的代碼？

00:38:20.734 --> 00:38:21.969 
可能有很多

00:38:22.302 --> 00:38:25.806 
所以 當然
我們像往常一樣有遷移工具

00:38:26.139 --> 00:38:27.808 
但今年你需要選擇

00:38:28.475 --> 00:38:32.446 
在Swift 2.3和
Swift 3之間

00:38:33.113 --> 00:38:33.947 
如果你

00:38:37.284 --> 00:38:40.254 
如果你沒有準備好跳到Swift 3

00:38:40.954 --> 00:38:45.526 
Swift 2.3就是包含
新SDK的Swift 2.2

00:38:46.093 --> 00:38:46.927 
可以麼

00:38:47.027 --> 00:38:50.531 
我們會接受提交到app store

00:38:50.597 --> 00:38:53.100 
的Swift 3和2.3的應用

00:38:54.001 --> 00:38:57.171 
但你應該注意Xcode中
有一些關鍵特性

00:38:57.237 --> 00:38:58.805 
是專門針對Swift 3的

00:38:58.872 --> 00:39:00.974 
像Playgrounds和
Documentation

00:39:01.508 --> 00:39:04.144 
和新的特性
像Thread Sanitizer

00:39:05.245 --> 00:39:08.715 
Swift 2.3
其實是個臨時解決方案

00:39:09.016 --> 00:39:12.953 
讓你有時間規劃升級到Swift 3

00:39:13.320 --> 00:39:14.788 
所以請從今天開始規劃吧

00:39:15.889 --> 00:39:17.024 
是的

00:39:19.059 --> 00:39:22.529 
如果你在用Swift 2.3
我有幾個建議

00:39:23.163 --> 00:39:24.631 
這是個例子

00:39:24.698 --> 00:39:28.969 
這是個小的代碼片段是2.2的

00:39:29.570 --> 00:39:33.607 
當你將Swift遷移到2.3

00:39:33.674 --> 00:39:37.511 
它會建議你在frame後添加歎號

00:39:37.578 --> 00:39:40.113 
因爲核心圖像API

00:39:40.180 --> 00:39:43.717 
可以編輯

00:39:44.785 --> 00:39:49.823 
現在這代碼同時用Swift 2.2
和Swift 2.3編譯

00:39:49.890 --> 00:39:52.726 
但如果你個複雜點的腳本

00:39:52.993 --> 00:39:55.095 
你可以選擇性的編譯你的代碼

00:39:55.329 --> 00:39:58.765 
用#if #else語句

00:39:59.032 --> 00:40:00.367 
這是一個小的建議

00:40:02.436 --> 00:40:05.639 
當你準備好升級到Swift 3

00:40:06.707 --> 00:40:08.408 
可以使用遷移工具

00:40:08.742 --> 00:40:12.279 
編輯 轉換當前的Swift語法

00:40:12.546 --> 00:40:15.415 
你可以再次體驗遷移

00:40:16.216 --> 00:40:17.818 
這很簡單

00:40:17.885 --> 00:40:20.087 
從今天開始計劃遷移到Swift 3

00:40:21.622 --> 00:40:23.690 
這是我想說的關於工具

00:40:24.558 --> 00:40:26.059 
概括一下

00:40:27.127 --> 00:40:27.961 
概括說

00:40:28.562 --> 00:40:31.398 
Chris說了Swift 3如何

00:40:31.465 --> 00:40:33.400 
集中在基礎改變

00:40:34.134 --> 00:40:37.304 
這些都公開在Swift.org

00:40:37.371 --> 00:40:38.739 
像Ted說的

00:40:38.805 --> 00:40:42.075 
你可以到那裏看看是如何演進的

00:40:42.242 --> 00:40:45.913 
你還可以看到我們爲
Xcode做了很棒的集成

00:40:46.713 --> 00:40:50.684 
這周還有很多信息
這僅僅是開始

00:40:50.751 --> 00:40:53.020 
我們這周有很多課程

00:40:53.253 --> 00:40:54.621 
我想推薦一個

00:40:55.055 --> 00:40:57.624 
就是Swift API設計規範

00:40:57.891 --> 00:41:00.060 
還在這個房間在這個課程結束以後

00:41:00.360 --> 00:41:01.929 
祝大家能和我們一起度過這美好的一週

00:41:02.196 --> 00:41:03.030 
謝謝