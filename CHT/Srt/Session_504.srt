00:00:19.353 --> 00:00:21.421 
HTTP Live Streaming的新特性

00:00:21.488 --> 00:00:22.322 
打開了嗎？

00:00:26.293 --> 00:00:27.127 
下午好

00:00:27.928 --> 00:00:29.196 
我是Roger Pantos

00:00:29.263 --> 00:00:32.031 
本次會話關於"HTTP Live
Streaming的新特性"

00:00:32.766 --> 00:00:36.403 
我們談論HLS有七八年之久了

00:00:36.470 --> 00:00:40.407 
然而 每次我談的時候
營銷部的人都說

00:00:40.741 --> 00:00:43.544 
"你一定要跟人們說
有什麼新進展了！"

00:00:43.710 --> 00:00:47.948 
所以開始吧
這就是新的內容

00:00:49.216 --> 00:00:52.052 
但首先
用20秒簡介HLS

00:00:52.286 --> 00:00:55.255 
HLS重點在於播放
播放列表 什麼是播放列表？

00:00:55.322 --> 00:00:57.291 
就是這樣的東西
是TXT文件

00:00:57.558 --> 00:01:00.594 
上面有標籤
是藍色的那些

00:01:00.894 --> 00:01:04.096 
還有分段 白色的那些
每一個都是10秒的媒體文件

00:01:04.164 --> 00:01:07.201 
如果你想播放一個
你在這些標籤中翻找一遍

00:01:07.267 --> 00:01:09.036 
找找有趣的東西

00:01:09.102 --> 00:01:12.673 
比如...這個寫着
這是INF分段 先加載它

00:01:12.906 --> 00:01:13.740 
所以去加載

00:01:14.241 --> 00:01:16.243 
然後加載segment1
播放它

00:01:16.310 --> 00:01:17.945 
加載segment2
播放它

00:01:18.011 --> 00:01:20.514 
可能這是直播播放列表
所以你刷新播放列表

00:01:20.581 --> 00:01:22.282 
加載segment3
播放它

00:01:22.349 --> 00:01:24.718 
簡而言之
這基本上就是HLS

00:01:25.085 --> 00:01:27.888 
所以現在我們都
明白這是怎麼一回事了

00:01:28.622 --> 00:01:29.890 
我們來講講新的內容

00:01:30.624 --> 00:01:31.959 
很好 好了

00:01:33.427 --> 00:01:35.095 
MPEG-4 Fragment Support

00:01:35.162 --> 00:01:37.898 
MPEG-4是個什麼東西
爲什麼要被分成片段？

00:01:39.333 --> 00:01:42.069 
在座的大多數人
可能熟悉MPEG-4文件

00:01:42.135 --> 00:01:46.473 
如果你的硬盤上有一部電影
這很可能就是MP4格式的

00:01:46.540 --> 00:01:47.908 
或者是相近的格式

00:01:48.909 --> 00:01:53.146 
如果你去深入觀察
它包括一個樣本表

00:01:53.213 --> 00:01:57.651 
通常是開頭
然後所有的樣本數據都在其後

00:01:58.418 --> 00:01:59.853 
我們最初是這樣做的

00:01:59.920 --> 00:02:04.791 
之後 我們推出了新的分段
隨後稱之爲片段

00:02:04.858 --> 00:02:08.362 
片段基本上是指一種方法
能將你的MPEG-4文件

00:02:08.428 --> 00:02:11.698 
分割成這些
小的可播放數據島

00:02:11.765 --> 00:02:14.168 
小的樣本表
小的樣本數據

00:02:14.234 --> 00:02:16.670 
小的樣本表
更多小的樣本數據

00:02:17.204 --> 00:02:20.741 
這些小島
都叫做"片段"

00:02:21.241 --> 00:02:26.613 
所以我們今天宣佈的
本質上就是你現在能做的是

00:02:26.680 --> 00:02:30.651 
你能夠將這些東西
這些MPEG-4片段

00:02:30.717 --> 00:02:33.053 
在你的HLS播放列表中
當做分段使用

00:02:33.120 --> 00:02:35.489 
就像傳輸流文件那樣

00:02:35.556 --> 00:02:37.591 
或者基本音頻流

00:02:38.392 --> 00:02:41.929 
我們會更新細則
來給你詳細信息

00:02:41.995 --> 00:02:44.331 
我認爲現在
會有本次會議的鏈接

00:02:45.399 --> 00:02:46.233 
不過...

00:02:47.734 --> 00:02:53.507 
它能讓你做的
本質上是使用fMP4分段

00:02:53.574 --> 00:02:58.812 
傳輸流能做的事
你都可以用fMP4做到

00:02:58.979 --> 00:03:02.916 
這包括iframe播放列表
包括不連續性

00:03:02.983 --> 00:03:06.486 
包括直播流 等等
同樣的功能

00:03:06.753 --> 00:03:10.290 
當然 我們會應用到
我們所有的HLS平臺上

00:03:10.490 --> 00:03:13.827 
所以你可以選擇將你所有的
流媒體編碼成fMP4文件

00:03:13.894 --> 00:03:16.029 
然後在所有平臺上使用

00:03:16.597 --> 00:03:21.101 
爲什麼要這麼做？
簡言之 互操作性

00:03:21.635 --> 00:03:26.740 
如果你要將你整個
媒體庫用一種方式編碼

00:03:26.807 --> 00:03:31.812 
傳輸到Apple平臺上
之後你還要重新進行編碼

00:03:31.879 --> 00:03:35.649 
換一種方式 例如傳輸到
Android設備上 那就太糟了

00:03:36.683 --> 00:03:39.653 
但如果你只有一個庫

00:03:40.120 --> 00:03:43.724 
那你的傳輸成本會下降
你的存儲成本會下降...

00:03:43.924 --> 00:03:45.726 
緩存的使用率會更好

00:03:45.792 --> 00:03:49.029 
因爲你不再是拼命搶用緩存了

00:03:49.363 --> 00:03:52.032 
而且作爲附加福利

00:03:53.267 --> 00:03:56.603 
還有 如果你有
單一的生產鏈

00:03:56.737 --> 00:03:58.705 
你可以在你全部的生態系統中

00:04:00.507 --> 00:04:04.077 
使用相同的工具和驗證方法

00:04:04.411 --> 00:04:05.746 
作爲附加福利

00:04:05.812 --> 00:04:09.449 
因爲fMP4不使用
同樣的信息分包

00:04:09.516 --> 00:04:10.918 
而傳輸流使用

00:04:11.451 --> 00:04:17.057 
在較低的比特率下
你會得到略微更高的效率

00:04:17.124 --> 00:04:18.791 
所以這算是附贈的好處

00:04:19.959 --> 00:04:24.198 
所以HLS對各位播放列表
作家帶來了什麼變化？

00:04:24.698 --> 00:04:26.633 
實際上 沒什麼變化

00:04:26.700 --> 00:04:29.536 
如果我們拿之前
看過的播放列表

00:04:29.603 --> 00:04:33.040 
並將它轉化成fMP4格式
我們只需要這樣做

00:04:33.440 --> 00:04:37.044 
我們更改初始化分段
使其指向Movie Box

00:04:37.110 --> 00:04:40.347 
然後每個分段
就成爲了MPEG-4片段

00:04:41.014 --> 00:04:42.115 
這就行了

00:04:42.182 --> 00:04:45.319 
播放列表級別上的
其他東西幾乎是一樣的

00:04:45.819 --> 00:04:49.156 
在分段級別上
這裏還有一點我想談談

00:04:49.223 --> 00:04:50.357 
那就是加密

00:04:50.457 --> 00:04:53.927 
如你所知 HLS有
兩種不同的加密方法

00:04:53.994 --> 00:04:56.463 
你要麼可以只加密整個分段

00:04:56.663 --> 00:04:58.398 
AES CBC 全部加密

00:04:58.665 --> 00:05:01.702 
這對傳輸流或是
fMP4都是一樣的

00:05:02.202 --> 00:05:06.039 
對於樣本加密 例如
如果你想用FairPlay Streaming

00:05:06.273 --> 00:05:10.077 
這就稍微複雜了
因爲你必需說明

00:05:10.143 --> 00:05:12.679 
哪部分文件已加密
哪部分未加密

00:05:13.380 --> 00:05:16.850 
這一次...上一次
我們做的是傳輸流

00:05:16.917 --> 00:05:18.652 
我們本質上創造出我們自己的格式

00:05:19.386 --> 00:05:21.655 
這一次 我們決定
使用現有的格式

00:05:21.889 --> 00:05:23.190 
而且...

00:05:26.560 --> 00:05:29.596 
在這MPEG中叫做
"共用加密"

00:05:29.663 --> 00:05:31.832 
是一種標準
幾年前推出的

00:05:32.032 --> 00:05:35.602 
最新版的標準裏
有一個叫做cbcs的模式

00:05:35.669 --> 00:05:37.738 
這可以兼容
FairPlay Streaming

00:05:37.804 --> 00:05:40.240 
所以如果你在
HLS中做樣本加密

00:05:40.440 --> 00:05:43.610 
你會使用共用加密
的cbcs模式來做

00:05:44.411 --> 00:05:47.114 
有了加密
播放列表和其他東西

00:05:47.181 --> 00:05:50.851 
這基本上就是
HLS的全部內容了

00:05:51.118 --> 00:05:53.120 
圍繞片段化MPEG-4

00:05:53.520 --> 00:05:57.791 
但如果我們要想實現
那個快樂 閃亮 有活力的世界

00:05:57.858 --> 00:06:00.961 
在那裏每個人可以
只有一條目錄

00:06:01.161 --> 00:06:04.364 
可以傳輸到任何地方
那我們就必須超越HLS

00:06:04.631 --> 00:06:07.901 
我們要做的一件事是
我們需要寫下一套規則

00:06:07.968 --> 00:06:12.673 
上面寫着 "你要這樣
創作你的fMP4分段或

00:06:12.739 --> 00:06:15.976 
片段諸如此類
來讓它們在任何地方播放"

00:06:16.610 --> 00:06:18.345 
而且我們也一直在這方面努力

00:06:18.812 --> 00:06:23.016 
一開始是我們和
微軟做的一個假設演練

00:06:23.083 --> 00:06:26.486 
一旦當我們進展到
覺着靠譜的時候

00:06:26.553 --> 00:06:30.724 
覺着能行了
我們就向MPEG提了這件事

00:06:31.024 --> 00:06:33.927 
那裏的很多人都認爲
這個想法很不錯

00:06:33.994 --> 00:06:38.899 
所以最後得出的
是一套約束條件

00:06:38.966 --> 00:06:42.169 
用於如何創建你的fMP4分段

00:06:42.469 --> 00:06:45.873 
所以你要將
音頻和視頻分開傳輸

00:06:46.039 --> 00:06:48.742 
你要在每個視頻分段
開頭加入一個iframe

00:06:48.809 --> 00:06:51.245 
你要保證能嚴格
對齊所有分段

00:06:51.311 --> 00:06:52.779 
涵蓋不同的比特率

00:06:53.413 --> 00:06:56.583 
你不需要做這些的
如果你的目標只是HLS

00:06:56.984 --> 00:07:01.622 
當你想要讓你的媒體庫
擁有最廣泛的受衆

00:07:01.688 --> 00:07:05.125 
那我們爲你準備了一系列推薦

00:07:05.392 --> 00:07:11.365 
我認爲這會讓所有人
受益...至少我希望如此

00:07:12.266 --> 00:07:13.200 
所以...

00:07:13.634 --> 00:07:17.905 
現在我要轉換一下
來談談其他事情

00:07:18.272 --> 00:07:20.407 
大家都愛討論的話題
...元數據

00:07:21.008 --> 00:07:26.013 
所以爲了描述它
我首先開始談談

00:07:26.079 --> 00:07:29.750 
一些我們已經在HLS上爲
元數據所做的現有的東西

00:07:30.651 --> 00:07:32.486 
靜態元數據和ID3

00:07:32.986 --> 00:07:36.990 
靜態元數據是用於
靜態元數據的 不出意料

00:07:37.858 --> 00:07:40.360 
它會提供
內容標題之類的東西

00:07:40.427 --> 00:07:41.828 
大多數是文本

00:07:42.062 --> 00:07:44.431 
這就能很容易地
放入播放列表文件中

00:07:44.498 --> 00:07:46.466 
要麼直接是標籤

00:07:46.533 --> 00:07:50.037 
或者打包成JSON文件
然後通過URL引用

00:07:52.639 --> 00:07:55.175 
現在只有一個標題
或一個作者

00:07:55.242 --> 00:07:58.512 
或一個版權
對應每個演示文件 是靜態的

00:07:59.213 --> 00:08:03.183  
但這樣的好處是
在你任何想要的時候都能獲得

00:08:03.250 --> 00:08:04.618  
馬上就能獲得

00:08:06.053 --> 00:08:08.021  
所以拿它和ID3對比

00:08:10.557 --> 00:08:16.063  
因爲計時元數據和
媒體演示文件的時間軸相連接

00:08:16.129 --> 00:08:19.066  
還經常在流媒體中
用於爲事件發信號

00:08:19.132 --> 00:08:22.169  
例如 廣告的開始
節目的開始

00:08:23.504 --> 00:08:28.008  
它存在於媒體格式的本身
所以是一種叫做ID3的二進制格式

00:08:28.642 --> 00:08:32.145  
這讓它體積小巧
同時還變得難以創作

00:08:32.212 --> 00:08:34.014  
因爲需要專業的工具

00:08:34.081 --> 00:08:36.082  
如果你要排除故障
這會讓你痛不欲生

00:08:36.149 --> 00:08:37.417  
很難讀取ID3

00:08:38.352 --> 00:08:40.287  
但你想要多少數量都行

00:08:40.354 --> 00:08:42.856  
而且可以放置到
時間軸上的任意位置

00:08:43.056 --> 00:08:44.391  
所以這十分強大

00:08:45.125 --> 00:08:47.961  
而在另一面
因爲它存在於媒體文件中

00:08:48.028 --> 00:08:50.831  
我們只能在播放之後
才能提供給你

00:08:52.165 --> 00:08:55.302  
所以這個新玩意
有什麼作用？

00:08:56.803 --> 00:09:01.775  
我們添加的是一種在播放列表
自身內部創建計時元數據的方式

00:09:02.743 --> 00:09:07.714  
所以現在你在ID3中用的
同樣東西都可以在這上面使用

00:09:09.449 --> 00:09:12.719  
你可以將它們創建成文本
這很簡單

00:09:12.920 --> 00:09:15.489  
你可以輕鬆地把它們
放入播放列表中

00:09:16.723 --> 00:09:18.325  
而且想要多少數量都行

00:09:18.392 --> 00:09:21.295  
它們可以覆蓋
可以嵌套 什麼都行

00:09:22.729 --> 00:09:26.567  
另一方面
因爲它們在播放列表中

00:09:26.633 --> 00:09:29.837  
我們讀取完播放列表之後
就可以馬上提供給你整個集合

00:09:30.671 --> 00:09:32.639  
無論播放指針位於
媒體文件的哪個位置

00:09:33.240 --> 00:09:35.075 
這就非常有助於

00:09:35.142 --> 00:09:38.378 
做特別像是
導航控制之類的事情

00:09:39.813 --> 00:09:45.219 
所以它是什麼樣子？
我們如何應用它呢？

00:09:45.586 --> 00:09:48.555 
我們在HLS中已經有
日期的概念了

00:09:48.822 --> 00:09:53.360 
PROGRAM-DATE-TIME標籤允許
你精準地在播放列表內部發送時間信號

00:09:53.427 --> 00:09:55.295 
所以我們以此爲基礎 我們說

00:09:55.529 --> 00:10:01.268 
每個比特的元數據都
將會被表達成時間範圍

00:10:01.668 --> 00:10:04.304 
並附帶有一組的屬性

00:10:04.805 --> 00:10:07.574 
其中一些是我們的
其中一些是你們的

00:10:09.877 --> 00:10:11.979 
我們設置句法
所以能整潔地從直播流

00:10:12.045 --> 00:10:13.947 
添加和移除這些東西

00:10:14.214 --> 00:10:16.517 
所以這能完美契合
直播工作流

00:10:18.785 --> 00:10:20.454 
它是什麼樣子？

00:10:21.255 --> 00:10:22.956 
我們來看一下這些句子

00:10:24.758 --> 00:10:27.294 
我們將新的標籤稱作
DATERANGE標籤

00:10:27.361 --> 00:10:28.562 
這是另一個播放列表

00:10:28.629 --> 00:10:30.831 
第一句基本上
在說現在是什麼時間

00:10:31.064 --> 00:10:33.333 
第二個是DATERANGE標籤
如果你去看看

00:10:33.400 --> 00:10:36.670 
你能看到
這是由屬性組成的

00:10:37.037 --> 00:10:40.841 
這些藍色的部分是細則中定義出來的

00:10:41.108 --> 00:10:43.210 
ID START-DATE
DURATION

00:10:44.044 --> 00:10:50.317 
我們爲各位保留了X-namespace
這與HTTP相似

00:10:50.384 --> 00:10:53.554 
這樣你能用它來
放入你想要的屬性值對

00:10:53.854 --> 00:10:57.524 
在本案例中 有人決定
放入AD-ID和beacon URL

00:10:58.392 --> 00:10:59.893 
這是一個示例

00:10:59.960 --> 00:11:02.362 
這是它們在播放列表中的樣子

00:11:03.830 --> 00:11:08.669 
當你在進行內容創建時
你可以用在直播或點播上

00:11:08.735 --> 00:11:11.171 
這隻需要有
DATERANGE標籤和日期

00:11:11.872 --> 00:11:15.709 
很明顯 在創建播放列表時
你可以將這些東西放進去

00:11:15.976 --> 00:11:19.880 
不過另一個好處是
因爲播放列表易於操作

00:11:19.947 --> 00:11:22.282 
如果你有後期製作工作流

00:11:22.349 --> 00:11:24.651 
在做廣告插入

00:11:24.718 --> 00:11:27.054 
可以非常容易地使用元數據

00:11:27.120 --> 00:11:29.323 
同時增強播放列表和演示文件

00:11:30.591 --> 00:11:32.192 
應衆人要求

00:11:32.259 --> 00:11:36.763 
我們還包括瞭如何
映射SCTE-35的規則

00:11:36.830 --> 00:11:41.068 
你可以在源媒體文件中找到它
然後用於DATERANGE標籤之內

00:11:41.201 --> 00:11:46.306 
這樣你可以在HLS中
無損地執行SCTE-35

00:11:47.574 --> 00:11:51.011 
最後我們添加了
媒體流驗證程序的支持

00:11:51.178 --> 00:11:52.779 
我想花點時間

00:11:52.846 --> 00:11:55.315 
宣傳一下
我們有的新工具

00:11:55.749 --> 00:11:57.284 
我們辦了一次演講

00:11:57.351 --> 00:11:59.486 
現在我們沒有時間說這件事

00:11:59.553 --> 00:12:02.422 
但我們辦了一次演講
談論了新的工具

00:12:02.756 --> 00:12:04.691 
所以我鼓勵大家去看看

00:12:04.892 --> 00:12:07.661 
你可以在你的應用
或其他東西上點播

00:12:08.595 --> 00:12:10.764 
你應該看看
有什麼新的本領

00:12:10.831 --> 00:12:13.267 
特別出現在驗證程序上了

00:12:14.434 --> 00:12:15.569 
對於重放

00:12:15.636 --> 00:12:20.240 
當你想讓視頻流
中的元數據起作用

00:12:21.975 --> 00:12:24.011 
你要有一組
AVFoundation API

00:12:24.211 --> 00:12:26.813 
所以這個時候
你一定要在應用內部

00:12:27.381 --> 00:12:31.151 
而且API本質上就是
"給我你目前有的所有數據"

00:12:31.552 --> 00:12:35.189 
然後如果你有直播播放列表
當有新內容出現時要通知我

00:12:36.323 --> 00:12:41.562 
這中心圍繞在
一個新的對象 叫做

00:12:41.728 --> 00:12:44.932 
AVPlayerItemMetadataCollector

00:12:45.599 --> 00:12:49.603 
我們這裏有一個小樣本
你能看到沒有什麼特別的

00:12:50.704 --> 00:12:52.639 
你創建資源和PlayerItem

00:12:52.706 --> 00:12:54.908 
然後你說
"我想收集一些元數據"

00:12:54.975 --> 00:12:57.110 
所以你創建
MetadataCollector

00:12:57.377 --> 00:13:00.013 
你將自己設定成委託
這樣我們可以將內容告訴你

00:13:00.214 --> 00:13:01.882 
然後將它添加到
PlayerItem

00:13:02.249 --> 00:13:07.321 
這就好了
之後你就得到所有元數據項了

00:13:07.788 --> 00:13:11.658 
所以使用起來十分容易
十分強大

00:13:12.025 --> 00:13:15.262 
我認爲這會很快成爲
一種首選方式

00:13:15.329 --> 00:13:17.564 
來將元數據輸入到HLS中

00:13:18.432 --> 00:13:21.835 
所以接下來
我們今天要講的

00:13:21.902 --> 00:13:27.140 
是另一個功能
這也是應衆人要求的

00:13:27.641 --> 00:13:33.847 
那就是離線模式下
播放HLS的功能

00:13:39.920 --> 00:13:41.922 
我想請我的同事

00:13:41.989 --> 00:13:44.258 
Jordan Schneider
上臺給大家作說明

00:13:52.165 --> 00:13:57.471 
嗨 看看幻燈片好不好用

00:13:58.672 --> 00:13:59.540 
好了

00:13:59.773 --> 00:14:03.744 
在iOS 10中 我們讓你能夠下載

00:14:03.810 --> 00:14:06.647 
並播放HLS內容不需要網絡連接

00:14:07.381 --> 00:14:11.151 
現在你可以將離線媒體
重播功能提供給你們的用戶了

00:14:11.218 --> 00:14:13.687 
使用現有的流媒體庫

00:14:14.354 --> 00:14:17.324 
作爲此功能的一部分
我們擴展了

00:14:17.391 --> 00:14:20.594 
去年我們推出的
FairPlay Streaming支持

00:14:21.195 --> 00:14:24.131 
來兼容離線HLS

00:14:24.698 --> 00:14:28.702 
而且我們給大家提供
一種下載HLS內容的方式

00:14:28.769 --> 00:14:30.571 
即使你的應用在後臺運行

00:14:31.104 --> 00:14:36.076 
最後 我們推出播放
部分下載內容的功能

00:14:36.143 --> 00:14:38.478 
即使你的下載可能還在進行中

00:14:39.313 --> 00:14:44.251 
所以第一個問題-
應該何時使用離線HLS？

00:14:44.685 --> 00:14:48.355 
沒錯 如果你想將這種功能

00:14:48.422 --> 00:14:52.159 
主要用於
當用戶想要播放內容的時候

00:14:52.226 --> 00:14:55.128 
然而他們可能沒有網絡連接

00:14:55.195 --> 00:14:56.964 
例如當他們進入飛行模式

00:14:57.130 --> 00:15:00.567 
不過 此項功能並非
針對於預先加載媒體文件

00:15:00.868 --> 00:15:03.504 
我們有使用AVPlayerItem
的其他做法

00:15:04.671 --> 00:15:09.810 
所以爲什麼使用HLS播放離線內容
而不是直接下載好電影文件呢？

00:15:10.277 --> 00:15:13.514 
第一點 你的內容
可能已經是用HLS製作了

00:15:13.580 --> 00:15:18.318 
所以採用HLS來播放
離線內容可能對你非常便利

00:15:18.385 --> 00:15:19.953 
從工程學角度來說

00:15:20.354 --> 00:15:22.523 
同時除了視頻軌

00:15:22.890 --> 00:15:26.927 
電影文件可以包括很多
不同的音頻軌和字幕軌

00:15:26.994 --> 00:15:30.297 
你的用戶可能不太需要
或是在離線存留着

00:15:30.998 --> 00:15:35.269 
在HLS中 因爲所有的
軌道都是分隔保存於

00:15:35.335 --> 00:15:41.341  
服務器的不同播放列表中
我們能實現更大一點的靈活度

00:15:41.608 --> 00:15:45.779  
我們能精確控制
被下載的媒體選擇

00:15:46.046 --> 00:15:50.217  
節省用戶的時間 網絡數據
和設備上的存儲空間

00:15:50.684 --> 00:15:55.756  
例如 默認下 我們下載了
一個用戶的默認媒體選擇

00:15:55.822 --> 00:15:59.293  
用戶在離線播放時
很可能只會關心這些文件

00:15:59.359 --> 00:16:03.030  
我們還給你提供的方式是
確切配置

00:16:03.096 --> 00:16:06.733  
你和用戶想下載的
可以離線回放的內容

00:16:08.268 --> 00:16:12.339  
離線播放HLS
的另一好處在於

00:16:12.406 --> 00:16:14.208  
使用相同的資源

00:16:14.274 --> 00:16:18.478  
我們仍可以下載
未被下載的媒體選擇選項

00:16:18.545 --> 00:16:21.915  
只要它們還存儲在
你的服務器中 這非常不錯

00:16:22.783 --> 00:16:24.585 
所以怎麼做呢？

00:16:25.319 --> 00:16:29.489 
在iOS 10中 我們推出一個
新的類 用於下載AVAssets

00:16:29.556 --> 00:16:31.058 
叫做AVAssetDownloadTask

00:16:31.625 --> 00:16:35.262 
這個類繼承了
URL會話的功能

00:16:35.495 --> 00:16:39.700 
更重要的是
在後臺下載資源的功能

00:16:39.766 --> 00:16:43.203 
即使你的應用沒有使用
其所有的機制運行

00:16:43.804 --> 00:16:45.572 
我們讓你有能力...

00:16:45.639 --> 00:16:48.342 
控制下載哪些媒體選擇

00:16:48.775 --> 00:16:50.844 
因爲這是HLS

00:16:50.911 --> 00:16:54.815 
我們讓你有能力
選擇你想要的資源品質

00:16:54.882 --> 00:16:56.917 
還可以離線下載下來

00:16:57.451 --> 00:17:01.321  
AVAssetDownloadTask
的界面是這個樣

00:17:01.688 --> 00:17:04.090  
繼承了
URLSessionTask

00:17:04.156 --> 00:17:06.359  
我想在這裏提一下
這不是繼承了

00:17:06.425 --> 00:17:08.328  
URLSessionDownloadTask

00:17:08.662 --> 00:17:12.799  
作用很相似 但是
我想指出幾點不同之處

00:17:13.599 --> 00:17:18.672  
所以爲了創建這些東西
你要設置URLSession

00:17:18.739 --> 00:17:21.909  
現在我們有一個特定的
URLSession子類 叫做

00:17:21.974 --> 00:17:25.212  
AVAssetDownloadURLSession
你需要使用這些東西

00:17:25.279 --> 00:17:28.849  
所以調用makeAssetDownloadTask
來創建資源下載任務

00:17:29.349 --> 00:17:31.518  
之後爲了選擇品質

00:17:31.585 --> 00:17:34.388  
我們有最低要求
比特率的選項鍵

00:17:34.454 --> 00:17:36.390  
以及媒體選擇鍵

00:17:37.124 --> 00:17:40.060  
現在我應該說一下
每個AVAssetDownloadTask

00:17:40.127 --> 00:17:42.829 
對應單個的媒體選擇

00:17:43.096 --> 00:17:46.233 
如果你想在同一資源上
下載多個媒體選擇

00:17:46.300 --> 00:17:49.770 
那你需要設置多個
AVAssetDownloadTask才行

00:17:50.037 --> 00:17:51.972 
我會在幾張幻燈片中展示的

00:17:52.706 --> 00:17:55.509 
要想使用這些東西
我們要這樣做

00:17:55.809 --> 00:17:59.179 
首先要設置一個
AVAssetDownloadTask

00:17:59.246 --> 00:18:01.615 
任意進行配置
然後開始下載

00:18:02.082 --> 00:18:05.452 
我們要響應下載過程中
可能發生的任何事件

00:18:05.519 --> 00:18:07.754 
例如監控下載進程

00:18:08.255 --> 00:18:09.723 
一旦下載完畢

00:18:09.790 --> 00:18:13.527 
我們要存儲位置
來在離線時進行回放

00:18:14.261 --> 00:18:18.031 
你可能要下載額外的
媒體選擇供你的用戶所用

00:18:18.699 --> 00:18:21.235 
最後 你要播放該內容

00:18:22.369 --> 00:18:26.006 
所以要想設置這些下載

00:18:26.073 --> 00:18:28.542 
設置完資源後
首先要做的是

00:18:28.609 --> 00:18:31.678 
你要去設置
backgroundConfiguration

00:18:31.745 --> 00:18:34.648 
來自background
URLSessionConfiguration

00:18:35.482 --> 00:18:38.685 
然後你要創建你的
AssetDownloadURLSession

00:18:39.052 --> 00:18:41.021 
然後創建你的下載任務

00:18:41.154 --> 00:18:45.325 
這裏我有一個下載任務
下載品質

00:18:45.392 --> 00:18:47.928 
的媒體比特率
大概是每秒2兆位

00:18:48.228 --> 00:18:52.699 
但默認下 我們會下載
提供的最高品質的視頻

00:18:53.367 --> 00:18:56.303 
一旦設置完成
因爲這是URLSessionTask

00:18:56.370 --> 00:18:58.272 
你可以調用resume
來設置你的下載

00:18:59.439 --> 00:19:02.843 
所以一旦下載開始了
那你就要去監控它

00:19:03.010 --> 00:19:07.347 
爲此 我們爲你準備了新協議
叫做AVAssetDownloadDelegate

00:19:07.581 --> 00:19:12.286 
這繼承了URLSessionTaskDelegate
中相同的委託方法

00:19:12.586 --> 00:19:16.623 
我想指出兩件事
是我們在這裏推出的

00:19:17.157 --> 00:19:21.562 
一個是我們使用的
監控下載進程的方法

00:19:22.196 --> 00:19:26.166 
在此方法中
我們顯示出下載進程

00:19:26.233 --> 00:19:30.704 
和時間範圍 而不是字節
來實現更好的媒體界面表達

00:19:31.271 --> 00:19:32.739 
之後我們有一個

00:19:32.806 --> 00:19:36.009 
didFinishDownloadingTo location
委託方法 來通知你

00:19:36.076 --> 00:19:38.612 
下載文件的所在位置

00:19:38.912 --> 00:19:41.982 
這相似於
URLSessionDownloadDelegate

00:19:42.049 --> 00:19:46.086 
的協議方法 你需要做的
事情的預期

00:19:46.153 --> 00:19:50.424 
當你得到這個委託方法
是稍微有點不同的

00:19:50.490 --> 00:19:52.059 
我馬上就指出來

00:19:53.594 --> 00:19:57.331 
這是我們進程
委託方法的一個示例

00:19:57.397 --> 00:20:02.503 
這裏我將時間範圍轉化成
已完成下載的百分數

00:20:02.569 --> 00:20:05.606 
我不會對其深入說明
不過這就是它的做法

00:20:06.507 --> 00:20:09.743 
你的應用可能在
下載過程中被關閉

00:20:10.043 --> 00:20:13.547 
進程可能被終止
那你怎麼辦？

00:20:13.614 --> 00:20:14.915 
你的下載會繼續

00:20:14.982 --> 00:20:17.551 
爲了應對該情況
你的響應方法完全與

00:20:17.618 --> 00:20:19.486 
URLSessionDownloadTasks
相同

00:20:19.786 --> 00:20:22.556 
當你的應用啓用後
你要去設置

00:20:22.623 --> 00:20:26.159 
另一個後臺配置
你使用的標識符相同於

00:20:26.226 --> 00:20:30.297 
最初設置下載時的標識符
然後從中創建一個URLSession

00:20:30.631 --> 00:20:32.499 
從那裏
調用getAllTasks方法

00:20:32.566 --> 00:20:35.669 
然後這裏 你可以恢復
你的AVAssetDownloadTask

00:20:35.736 --> 00:20:37.738 
其中會有當前的進程

00:20:37.804 --> 00:20:40.541 
你可以用它來更新
應用中可能有的任何UI

00:20:40.607 --> 00:20:43.744 
然後你甚至可以用它
來抓取原始AVAsset

00:20:43.810 --> 00:20:45.546 
之前你用它來
設置你的下載

00:20:46.246 --> 00:20:50.584 
所以一旦下載完成
首先你要做的是

00:20:50.651 --> 00:20:52.786 
儲存下載資源的位置

00:20:53.420 --> 00:20:57.925 
所以每當有東西存到這個位置
這個方法就會被調用

00:20:57.991 --> 00:21:02.963 
包括當部分下載的內容
被用戶取消的時候

00:21:03.297 --> 00:21:05.666 
現在你可以用

00:21:05.732 --> 00:21:12.172 
先前取消的下載內容恢復下載

00:21:12.472 --> 00:21:16.443 
或者你甚至可以用它
回放部分下載的內容

00:21:16.510 --> 00:21:18.612 
如果你不想讓那個下載

00:21:18.679 --> 00:21:21.582 
或者那個內容
佔用你的應用儲存空間

00:21:21.815 --> 00:21:24.017 
那你可能要在這裏刪除它

00:21:24.451 --> 00:21:25.352 
所以...

00:21:26.019 --> 00:21:28.055 
不同於
URLSessionDownloadDelegate

00:21:28.255 --> 00:21:32.059 
我們希望各位
不要將資源從這裏移開

00:21:32.459 --> 00:21:36.096 
我們這樣做是因爲讓系統
能夠找到這些文件是很重要的

00:21:36.163 --> 00:21:38.398 
因爲系統會回收磁盤空間

00:21:38.465 --> 00:21:41.301 
如果磁盤空間很少的話
而且會在某個時刻

00:21:41.368 --> 00:21:44.838 
會從應用容器中刪除該資源

00:21:45.339 --> 00:21:50.043 
所以你想保存的是
位置的相對路徑

00:21:50.110 --> 00:21:54.147 
從這裏 你能夠在將來
恢復你的資源 從而進行回放

00:21:55.582 --> 00:21:59.953 
所以 現在你下載完
資源的一個版本

00:22:00.287 --> 00:22:03.023 
比如說 你想下載
額外的媒體選擇

00:22:03.190 --> 00:22:07.794 
這個適合在我們的
didCompleteWithError委託方法中做

00:22:07.861 --> 00:22:10.197 
這跟URLSessionTask
有的那個一樣

00:22:10.797 --> 00:22:13.200 
適合在這裏做的原因是

00:22:13.267 --> 00:22:16.570 
因爲同一資源上的
媒體選擇是連續下載的

00:22:16.803 --> 00:22:22.142 
通常這裏適合進行
任何完成下載的清理工作

00:22:22.543 --> 00:22:27.381 
所以用額外媒體選擇
選項來進行增強

00:22:27.447 --> 00:22:28.682 
比如 西班牙語音頻

00:22:28.749 --> 00:22:31.685 
我們首先會抓取
要下載的spanishOption

00:22:32.085 --> 00:22:37.958 
然後我們改變最初放入的
AVMediaSelection

00:22:38.025 --> 00:22:40.928 
從這裏選擇spanishOption

00:22:41.495 --> 00:22:43.130 
一旦選擇好了

00:22:43.197 --> 00:22:46.133 
我們要去創建一個新的
AVAssetDownloadTask

00:22:46.633 --> 00:22:48.702 
最好是在同一會話中

00:22:48.769 --> 00:22:51.872 
外加傳遞我們要
下載的額外媒體選擇

00:22:51.939 --> 00:22:55.075 
然後我們調用resume
這樣整個過程就會重複

00:22:55.142 --> 00:22:58.512 
如果想的話 我們可以
之後下載額外媒體選擇

00:23:00.380 --> 00:23:02.449 
現在我們談談
播放的事情

00:23:03.083 --> 00:23:09.656 
假如說我們有...這裏示範了
如何創建下載任務的方法

00:23:09.723 --> 00:23:13.193 
注意到我輸入了一個
帶有networkURL的資源了嗎？

00:23:13.594 --> 00:23:17.297 
但我們離線回放HLS

00:23:17.364 --> 00:23:20.501 
如果我們仍可以用
原始的urlAsset

00:23:20.567 --> 00:23:25.572 
那我們應該使用
那個AVAsset實例來播放

00:23:26.106 --> 00:23:29.676 
我們可以從AssetDownloadTask
上的urlAsset屬性中抓取

00:23:30.043 --> 00:23:32.145 
如果你輸入帶有
networkURL的新資源

00:23:32.212 --> 00:23:35.682 
AVFoundation無法知道
從何處尋找下載的內容

00:23:35.983 --> 00:23:39.553 
所以你應該使用同一資源
然後你就能離線回放了

00:23:40.053 --> 00:23:45.158 
然而 如果你無法引用
那個原始AVAsset

00:23:45.559 --> 00:23:50.631 
例如 很長時間之後
你的應用可能沒在運作

00:23:50.898 --> 00:23:54.801 
那你要做的就是
創建新的AVAsset

00:23:54.868 --> 00:23:57.571 
用我們提供給你的下載位置

00:23:57.638 --> 00:24:00.407 
在didFinishDownloadingTo
委託方法中

00:24:00.474 --> 00:24:02.342 
並用它創建一個
PlayerItem

00:24:03.143 --> 00:24:09.149 
在這個案例中 如果你想
對資源進行操作 例如

00:24:09.216 --> 00:24:11.552 
用額外媒體選擇下載來增強

00:24:11.618 --> 00:24:13.620 
你真的應該重新使用
那個同一個資源

00:24:13.687 --> 00:24:18.659 
你不應該有大量的AVAsset
指向磁盤上相同的fileURL

00:24:18.759 --> 00:24:21.495 
這有助於讓
AVFoundation高效地

00:24:21.562 --> 00:24:24.331 
重新使用已經下載的媒體數據

00:24:25.299 --> 00:24:29.503 
所以我們還有一個附加級
來幫助你嚴謹規定

00:24:29.570 --> 00:24:33.941 
用戶能離線播放的內容
這叫做AVAssetCache

00:24:34.341 --> 00:24:37.344 
你從一個AVAsset的
資源緩存屬性中抓取

00:24:37.711 --> 00:24:41.181 
這有兩個作用
一個是能告訴你

00:24:41.248 --> 00:24:44.885 
是否這個資源的
各個版本都能離線播放

00:24:45.385 --> 00:24:47.721 
另一個是
它能告訴你

00:24:47.788 --> 00:24:50.991 
是否出現了可用於
離線的特定媒體選擇選項

00:24:51.225 --> 00:24:53.660 
如果它不允許離線
但還是能夠播放的

00:24:53.727 --> 00:24:56.997 
前提是要有網絡連接
而且那個媒體選擇選項

00:24:57.064 --> 00:24:59.800 
仍然存在於
你去下載的那個服務器上

00:25:00.334 --> 00:25:03.170 
這就是如何使用
AVAssetDownloadTask

00:25:03.237 --> 00:25:06.640 
並播放後續的下載資源

00:25:06.740 --> 00:25:09.710 
我應該提一下第五點
如果你在下載資源磁盤上播放

00:25:09.776 --> 00:25:12.946 
這會在該過程的任何時刻發生

00:25:13.013 --> 00:25:16.583 
這甚至可能在
開始下載之前發生

00:25:16.650 --> 00:25:19.653 
或在下載過程中發生
而且AVFoundation會高效地

00:25:19.720 --> 00:25:22.990 
重新使用已經從網絡上
下載下來的內容

00:25:23.924 --> 00:25:25.392 
我想換一下話題

00:25:25.459 --> 00:25:27.828 
來談談
保護離線內容

00:25:29.029 --> 00:25:32.032 
去年 我們推出了
FairPlay Streaming

00:25:32.099 --> 00:25:34.801 
爲HLS生態系統帶來了
強大的內容保護

00:25:35.536 --> 00:25:37.237 
然而 在iOS 9中

00:25:37.304 --> 00:25:40.374 
FairPlay Streaming需要
對密鑰服務器的活動連接

00:25:40.440 --> 00:25:43.177 
這無法用在離線回放上面

00:25:43.710 --> 00:25:45.812 
所以今年我們擴展
FairPlay Streaming

00:25:45.879 --> 00:25:49.850 
使其在離線HLS情況下
無需網絡連接也能工作

00:25:50.317 --> 00:25:54.922 
我們的做法是將你的密鑰
以安全的方式打包並存儲在磁盤上

00:25:54.988 --> 00:25:56.790 
並重新用於離線回放

00:25:57.191 --> 00:26:00.394 
但你的應用本身
還是會保存這個密鑰

00:26:00.460 --> 00:26:03.697 
並響應來自
AVFoundation的密鑰請求

00:26:03.764 --> 00:26:07.668 
用於每次回放 一旦密鑰
進入緩存 就不需要接入網絡了

00:26:08.569 --> 00:26:12.306 
所以要想支持這些密鑰
需要對你的密鑰服務器進行更改

00:26:12.372 --> 00:26:15.409 
具體是新的TLV值
這樣你的密鑰服務器

00:26:15.475 --> 00:26:19.046 
必須明確地選擇加入密鑰
從而滿足使用離線回放的資格

00:26:20.180 --> 00:26:23.550 
最後
我們想提醒一下FPS Keys

00:26:23.784 --> 00:26:26.687 
你必須在主播放列表中
將它們聲明爲會話密鑰

00:26:26.753 --> 00:26:28.922 
如果你想確認
是否下載完成的話

00:26:29.590 --> 00:26:30.424 
所以...

00:26:31.091 --> 00:26:33.260  
爲離線FairPlay Streaming
保存密鑰

00:26:33.327 --> 00:26:37.331  
真的就是基於在線
FairPlay Streaming的請求流

00:26:37.531 --> 00:26:41.435  
你要更改的只是和修改
這個請求流有關的內容

00:26:41.902 --> 00:26:44.905  
我在這裏快速總結一下
來指出你需要做的事情

00:26:45.172 --> 00:26:47.508  
但如要了解更多信息
你應該觀看去年的演講

00:26:47.574 --> 00:26:49.343  
我們在那裏講得十分詳細了

00:26:50.477 --> 00:26:52.679  
與FairPlay Streaming
回放一樣

00:26:52.746 --> 00:26:54.448  
AVFoundation會
下載你的播放列表

00:26:54.515 --> 00:26:57.084  
並在找到密鑰標籤時
觸發密鑰請求

00:26:57.150 --> 00:27:00.554  
這會讓你的應用有機會
保存密鑰 從而用於離線回放

00:27:01.088 --> 00:27:05.192  
所以你的應用首先會
回調AVFoundation

00:27:05.259 --> 00:27:06.860  
來獲取流媒體密鑰請求

00:27:07.160 --> 00:27:10.797  
然後會和你的服務器對話
這會取走

00:27:10.864 --> 00:27:14.835  
那個流媒體密鑰請求 然後
給你一個內容密鑰上下文或CKC

00:27:15.302 --> 00:27:17.971  
在線上FairPlay Streaming中
你會在這裏完成

00:27:18.038 --> 00:27:21.909  
請求流 並用那個CKC
返回到AVFoundation

00:27:22.442 --> 00:27:25.312  
然而
在離線FairPlay Streaming中

00:27:25.712 --> 00:27:29.116  
在這裏你要將那個CKC
交給AVFoundation

00:27:29.183 --> 00:27:31.852  
這樣AVFoundation
能將其凍幹成一種格式

00:27:31.919 --> 00:27:35.422  
可以安全存儲在
你應用的存儲空間中

00:27:35.656 --> 00:27:39.793  
你也可以在後續的
回放中重新用上它

00:27:39.927 --> 00:27:40.761  
之後...

00:27:40.827 --> 00:27:43.297  
一旦你將它寫入
你的應用存儲空間中

00:27:43.363 --> 00:27:46.500  
你要將那個凍乾的密鑰
返回給AVFoundation

00:27:46.567 --> 00:27:47.668  
來完成這個請求

00:27:47.935 --> 00:27:50.304  
如果你的應用離線了
那你需要做的只是

00:27:50.370 --> 00:27:53.373  
從你的應用存儲空間中
讀取那個凍乾的密鑰 並返還給

00:27:53.440 --> 00:27:56.543  
AVFoundation 這樣
不需要網絡就能做得到

00:27:57.945 --> 00:28:00.280 
所以我們來看看這究竟
會怎樣改變你的代碼

00:28:00.714 --> 00:28:04.852 
在線上FairPlay Streaming中
這些密鑰請求作爲

00:28:04.918 --> 00:28:06.687 
AVAssetResourceLoader
的一部分

00:28:06.887 --> 00:28:11.124 
具體是AVAssetResourceLoadingRequest
上面的委託方法

00:28:11.491 --> 00:28:13.560 
一旦收到請求
首先你要做的是

00:28:13.627 --> 00:28:19.099 
請求AVFoundation
創建流媒體內容密鑰請求

00:28:19.166 --> 00:28:21.702 
或是SPC
這會發送到你的服務器上

00:28:21.768 --> 00:28:26.073 
這會返回一個CKC 之後
你用它來響應AVFoundation

00:28:27.541 --> 00:28:30.744 
現在 在離線FairPlay Streaming中
我們有一個新方法

00:28:30.811 --> 00:28:32.980 
這是用來凍幹密鑰的方法

00:28:33.046 --> 00:28:36.650 
你輸入從服務器返回的CKC

00:28:36.950 --> 00:28:41.255 
然後返回那個爲你保存的
數據團 從而用於離線存儲

00:28:42.022 --> 00:28:44.791 
我們還有一個新的內容類型
作爲這個請求流的一部分

00:28:44.858 --> 00:28:46.527 
是persistentContentKey類型

00:28:46.894 --> 00:28:48.262 
和一個新的選項

00:28:48.328 --> 00:28:52.232 
來爲應用方法輸入我們的
流媒體內容密鑰請求數據

00:28:54.034 --> 00:28:58.839 
所以我們是這樣
修改那個密鑰請求流的

00:28:58.906 --> 00:29:00.874 
用於我們要離線保存的密鑰

00:29:01.441 --> 00:29:06.146 
我們首先要做的是請求
AVFoundation創建SPC

00:29:06.547 --> 00:29:09.683 
不同之處是我們要輸入
所需的persistentKey選項

00:29:09.750 --> 00:29:12.019 
這樣 AVFoundation
和你的密鑰服務器

00:29:12.085 --> 00:29:16.290 
會知道去請求一個
適用於凍幹過程的密鑰

00:29:16.957 --> 00:29:19.560 
所以它將SPC發送到
你的服務器 從而得到CKC

00:29:19.927 --> 00:29:23.330 
一旦拿回了CKC 你就調用
你的persistentContentKey方法

00:29:23.397 --> 00:29:26.066 
來創建這個凍乾的密鑰
然後可以保存於磁盤上

00:29:26.500 --> 00:29:28.769 
之後你要將這個密鑰
真正寫到你的磁盤上

00:29:28.836 --> 00:29:33.073 
你要將內容類型設置成
persistentContentKey類型

00:29:33.674 --> 00:29:38.445 
然後用那個持久性CKC
來完成數據加載請求

00:29:38.512 --> 00:29:40.714 
那個CKC保存在你的磁盤上

00:29:41.448 --> 00:29:43.183 
現在如果你離線了

00:29:43.250 --> 00:29:46.053 
或者比如說 你之前已經
滿足了這個密鑰請求

00:29:46.587 --> 00:29:48.655 
那你要這樣做

00:29:49.189 --> 00:29:51.458 
你會得到
資源loadingRequest

00:29:52.292 --> 00:29:58.498 
你只需從應用存儲空間中
讀取你的凍幹密鑰

00:29:59.266 --> 00:30:03.003 
設置persistentContentKey類型
然後響應密鑰loadingRequest

00:30:03.070 --> 00:30:06.507 
完全不需要接入網絡
這很明顯是必須的

00:30:06.573 --> 00:30:09.543 
因爲你可能在飛行模式下

00:30:09.610 --> 00:30:12.379 
並且在這個過程中
沒有任何網絡連接

00:30:13.514 --> 00:30:15.849 
這就是如何修改
FairPlay Streaming

00:30:15.916 --> 00:30:18.051 
來用於你的離線HLS內容

00:30:19.253 --> 00:30:22.856 
現在我想談談管理
資源的最佳做法

00:30:23.490 --> 00:30:26.426 
很重要的一點是
這些下載會佔用

00:30:26.493 --> 00:30:29.429 
你的應用磁盤使用量
所以你要稍微多留意

00:30:30.063 --> 00:30:32.733 
你真的應該清除
磁盤上任何不需要的資源

00:30:33.066 --> 00:30:36.637 
具體點 你一定要
爲你的用戶提供一種

00:30:36.703 --> 00:30:39.206 
查看所有下載內容的方式

00:30:39.273 --> 00:30:42.176 
並允許他們刪除
那些不再需要的內容

00:30:44.111 --> 00:30:48.582 
要記住 用戶取消的下載
還會保留在磁盤上

00:30:48.649 --> 00:30:52.119 
你可以用這些資源在
將來的某個時刻恢復下載

00:30:52.186 --> 00:30:55.255 
如果你不想恢復下載
那你就要注意在

00:30:55.322 --> 00:30:58.025 
取消下載的時候
刪除那些資源

00:30:59.126 --> 00:31:04.164 
我們希望各位基於
明確的用戶行動來保留下載

00:31:04.231 --> 00:31:06.667 
你不應該去下載一堆東西

00:31:06.733 --> 00:31:08.902 
因爲用戶可能不想離線觀看

00:31:09.636 --> 00:31:12.940 
我們冒昧地
選擇性排除了這些下載

00:31:13.006 --> 00:31:14.241 
在iCloud備份上面

00:31:16.310 --> 00:31:18.946 
我之前提過了
你應該做好準備 這個系統會在

00:31:19.012 --> 00:31:22.416 
在低磁盤空間的情況下
刪除資源來回收磁盤空間

00:31:22.916 --> 00:31:25.152 
這不會在應用運行的時候發生

00:31:25.219 --> 00:31:27.521 
這隻會在你應用終止後發生

00:31:28.589 --> 00:31:32.893 
當你的程序啓動後
你應該稍微保守地

00:31:32.960 --> 00:31:35.696 
推測你的資源是否真的

00:31:35.762 --> 00:31:37.931 
提前下載在磁盤上了

00:31:40.400 --> 00:31:44.771 
你不要將資源從我們
提供的位置中移走

00:31:44.838 --> 00:31:48.609 
因爲讓系統能夠找到
這些資源是非常重要的

00:31:50.110 --> 00:31:55.349 
最終 因爲下載的資源可能包含

00:31:55.415 --> 00:31:57.985 
未被下載的媒體選擇

00:31:58.051 --> 00:32:01.355 
注意不要改變你服務器上的資源

00:32:01.488 --> 00:32:08.495 
如果你一定要更改
媒體播放列表的位置

00:32:08.562 --> 00:32:10.831 
並改變你的主播放列表

00:32:10.898 --> 00:32:14.001 
那你應該將修改後的資源
託管到新的URL上

00:32:14.067 --> 00:32:16.336 
而不是更改原來的那個

00:32:17.471 --> 00:32:19.473 
這就是 離線HLS

00:32:19.540 --> 00:32:23.143 
我們高興向各位發佈
並期待各位會採用它

00:32:24.111 --> 00:32:27.214 
總之 今年我們有
新功能供你們使用

00:32:27.281 --> 00:32:34.221 
我們有MP4片段支持
這會帶來通用的媒體格式

00:32:34.288 --> 00:32:37.324 
可以用在你們所支持的
所有不同平臺上

00:32:37.958 --> 00:32:40.761 
記住 這個兼容所有的HLS功能

00:32:40.827 --> 00:32:43.897 
而且對HLS播放列表
只需微小改動便可採用

00:32:45.065 --> 00:32:49.536 
接下來 我們有使用DATERANGE標籤
的新播放列表內的元數據

00:32:49.603 --> 00:32:54.641 
在直播內容中
非常適合使用元數據

00:32:54.708 --> 00:32:57.277 
內容可能有動態更新的元數據

00:32:57.344 --> 00:32:59.179 
像是廣告邊界之類的東西

00:33:00.047 --> 00:33:03.450 
最後我們提供離線HLS回放

00:33:03.817 --> 00:33:08.455 
其中我們有一個
強大的媒體下載引擎

00:33:08.522 --> 00:33:12.292  
你還可以配置要下載的
媒體選擇和品質

00:33:12.926 --> 00:33:16.663  
我們還擴展
FairPlay Streaming支持

00:33:16.730 --> 00:33:18.632  
沒有網絡連接時也能工作

00:33:19.867 --> 00:33:21.301  
所以要想獲取更多信息

00:33:21.368 --> 00:33:26.106 
包括如何使用
AVAssetDownloadTask的樣本代碼

00:33:26.173 --> 00:33:29.810 
和關於這些新版本的
更多的資料

00:33:29.877 --> 00:33:34.114 
去查看我們開發網站上
針對本次會議的頁面

00:33:36.116 --> 00:33:39.319 
我想指出
Roger之前提到的會議

00:33:39.586 --> 00:33:42.723 
已播出的創作和驗證演講

00:33:43.190 --> 00:33:47.661 
現在你可以在WWDC應用
上觀看這個視頻

00:33:48.095 --> 00:33:50.063 
我極力推薦觀看

00:33:50.831 --> 00:33:53.734 
感謝各位的到來
希望大家會喜歡之後的發佈會