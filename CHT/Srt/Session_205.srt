00:00:20.020 --> 00:00:21.989 
COCOA TOUCH的新特性

00:00:22.055 --> 00:00:22.890 
下午好

00:00:24.491 --> 00:00:25.325 
歡迎各位

00:00:28.028 --> 00:00:31.265 
我叫Olivier Gutknecht
負責管理UIKit 團隊

00:00:31.765 --> 00:00:35.602 
今天我們要探討UIKit的新功能

00:00:36.103 --> 00:00:39.139 
以及iOS X 中的其他系統架構

00:00:40.574 --> 00:00:44.278 
但我首先想說的是

00:00:44.845 --> 00:00:48.448 
COCOA TOUCH的舊特性

00:00:49.650 --> 00:00:55.122 
爲什麼？自從上屆 WWDC 以來

00:00:55.189 --> 00:00:56.657 
我們引進了大量的重要產品

00:00:57.925 --> 00:01:01.495 
帶有3D Touch
的iPhone 6S

00:01:02.262 --> 00:01:05.364 
9.7和12.9英寸的
iPad Pro

00:01:07.267 --> 00:01:11.638 
還有Apple Pencil
和Smart Keyboard

00:01:12.639 --> 00:01:18.145 
而且 這些產品採用了多項關鍵技術

00:01:18.212 --> 00:01:21.682 
採用這些技術可以讓你的應用更出色

00:01:22.749 --> 00:01:25.853 
我首先想談的是自適應性

00:01:27.221 --> 00:01:30.591 
我們2年前引進了自適應性

00:01:31.191 --> 00:01:35.229 
我們當時引入的
一項技術是尺寸分級概念

00:01:36.196 --> 00:01:39.900 
iPhone是一個緊湊型產品

00:01:41.001 --> 00:01:43.437 
iPad是常規產品

00:01:44.471 --> 00:01:47.474 
現在我們有了12.9英寸
的iPad Pro

00:01:48.542 --> 00:01:50.744 
我們需要更大的尺寸等級嗎

00:01:52.179 --> 00:01:53.113 
我們不需要

00:01:54.481 --> 00:01:57.150 
因爲現在我們擁有所有工具

00:01:57.651 --> 00:02:00.254 
在架構中表達它

00:02:01.255 --> 00:02:02.823 
我們擁有特徵系統

00:02:02.956 --> 00:02:05.325 
它決定你的應用如何理解

00:02:05.826 --> 00:02:09.096 
你的應用的上下文和背景

00:02:09.329 --> 00:02:13.133 
尺寸等級是一個很重要的特徵

00:02:13.667 --> 00:02:14.868 
但你擁有了需要的一切

00:02:15.135 --> 00:02:18.472 
基於這些設備的佈局創建尺寸

00:02:20.040 --> 00:02:22.776 
我們爲尺寸等級添加了新的支持

00:02:23.677 --> 00:02:27.748 
在接口Builder和架構本身中

00:02:28.482 --> 00:02:32.753 
包括從自動佈局到動態類資產分類

00:02:33.120 --> 00:02:35.422 
配有佈局指南 甚至UI外觀

00:02:35.956 --> 00:02:38.258 
一切都已準備好 並且完全集成

00:02:39.660 --> 00:02:42.062 
我們還將

00:02:42.396 --> 00:02:45.933 
在本週舉行製作應用自適應佈局
的兩場研習會

00:02:45.999 --> 00:02:50.103 
第一場研習會重點關注基礎知識和工具

00:02:50.671 --> 00:02:53.941 
第二場研習會將關注API

00:02:54.074 --> 00:02:57.377 
以及你用於製作自適應的技術

00:02:58.145 --> 00:03:00.914 
今天早上舉行了一場令人驚歎的研習會

00:03:00.981 --> 00:03:03.116 
重點介紹的是設計 你應該看看

00:03:05.319 --> 00:03:08.655 
我其次想談的是觸控輸入

00:03:10.257 --> 00:03:14.962 
去年iPad Air 2上市
現在是iPad Pro

00:03:15.596 --> 00:03:18.332 
我們採用了120 Hz觸控掃描

00:03:18.699 --> 00:03:22.569 
我們的掃描速度比屏幕刷新率快

00:03:23.403 --> 00:03:27.107 
配備Apple Pencil之後
我們有了另外的性能

00:03:27.474 --> 00:03:32.179 
通過觸控技術
你可以獲得精準定位 力度

00:03:33.480 --> 00:03:37.284 
在iPhone 6S上
你也有相同的力度信息

00:03:37.351 --> 00:03:43.090 
3D Touch技術
已用在iOS 9和iOS 9.1上

00:03:43.957 --> 00:03:49.162 
你需要用API在這些設備上
創建令人驚訝的UI

00:03:49.596 --> 00:03:51.665 
Dominique Wagner
將爲你展示

00:03:51.732 --> 00:03:54.568 
如何在iOS上利用觸控輸入

00:03:58.005 --> 00:04:02.743 
我最後想談的是
Smart Keyboard

00:04:03.677 --> 00:04:08.749 
我們爲你提供了一個API
你可以在應用上實現鍵盤快捷鍵

00:04:09.349 --> 00:04:12.152 
我想 你現在有更多用戶

00:04:12.219 --> 00:04:14.154 
通過鍵盤和你的應用交互

00:04:14.888 --> 00:04:18.959 
所以上下文快捷鍵需求獲得增長

00:04:19.860 --> 00:04:21.928 
爲此採用API是合理的

00:04:23.096 --> 00:04:25.999 
其實API在iOS 7中是新的

00:04:27.100 --> 00:04:29.736 
它變得重要起來
因爲自iOS 9之後

00:04:30.270 --> 00:04:33.874 
我們可以展示這些漂亮的自動快捷鍵

00:04:34.208 --> 00:04:35.375 
只需要按住命令鍵即可

00:04:38.846 --> 00:04:43.350 
現在 讓我們來談談
Cocoa Touch的新特性

00:04:43.951 --> 00:04:46.520 
我今天想談四個方面

00:04:47.588 --> 00:04:50.490 
首先是核心技術

00:04:50.991 --> 00:04:53.393 
你可能已經在應用中使用了

00:04:54.261 --> 00:04:59.733 
然後我們要討論
使用UIKit和其他 API

00:05:00.167 --> 00:05:03.337 
你如何爲你的應用構建更好的UI

00:05:03.837 --> 00:05:07.241 
我們將爲你展示

00:05:07.307 --> 00:05:10.143 
在iOS X中
新系統特性如何讓你的應用更好

00:05:11.478 --> 00:05:13.580 
最後我們還將討論

00:05:13.981 --> 00:05:16.517 
你的應用自身如何擴展

00:05:16.984 --> 00:05:19.253 
系統的所有新擴展點

00:05:21.455 --> 00:05:23.657 
接下來我們來談談這些核心技術

00:05:25.459 --> 00:05:29.263 
Swift 3很可能是
第一個要提到的

00:05:29.897 --> 00:05:36.170 
因爲採用Swift 3之後
每個API都煥然一新

00:05:36.803 --> 00:05:40.140 
因爲我們改變了規則 我們改變了

00:05:40.741 --> 00:05:43.510 
如何從Objective-C
轉化爲Swift的方式

00:05:43.777 --> 00:05:47.748 
我們正在這樣做 讓你的代碼更佳

00:05:48.248 --> 00:05:52.319 
所以 在Swift上編寫代碼時
它給人極強的真實感

00:05:52.653 --> 00:05:55.422 
例如 首選字體

00:05:56.023 --> 00:05:58.325 
我們現在使用第一個參數

00:05:58.559 --> 00:06:00.627 
讓意圖更明確

00:06:02.329 --> 00:06:05.299 
我們儘量不重複自己UI顏色

00:06:05.365 --> 00:06:08.535 
黑色現在只是白色或黑色

00:06:10.370 --> 00:06:16.476 
對於Swift 3
我最喜歡的是一個方面是

00:06:16.543 --> 00:06:20.581 
AIP和核心圖形讓人真的感覺非常棒

00:06:20.681 --> 00:06:22.749 
編寫UIKit應用時

00:06:23.817 --> 00:06:27.387 
甚至像多線程優化技術（GCD）

00:06:28.689 --> 00:06:31.458 
現在也是一個完整的對象API

00:06:34.695 --> 00:06:36.463 
我們來談談GCD

00:06:37.231 --> 00:06:42.803 
還有一種我非常喜歡的功能
很常見的東西

00:06:42.870 --> 00:06:45.806 
通過這項執行技術
創造你自己的私人隊列

00:06:46.840 --> 00:06:52.946 
當同步執行隊列工作項目時

00:06:53.680 --> 00:06:58.218 
iOS X中出現新的特性
你可以真正設置隊列

00:06:58.719 --> 00:07:04.057 
在自動釋放池中爲每個工作項自動換行

00:07:04.791 --> 00:07:07.828 
真的很容易 你只需創建一個調度隊列

00:07:08.428 --> 00:07:11.832 
然後你提供一個釋放池工作項目

00:07:12.499 --> 00:07:18.238 
我們有一個完整的GCD
隊列及編程研習會

00:07:20.941 --> 00:07:24.077 
還有Foundation框架
它也改編了大量的

00:07:24.144 --> 00:07:28.849 
Swift增強性能 在許多類別中
我們放棄了MS前綴

00:07:29.216 --> 00:07:33.053 
我們有一項主要新功能
我們正在將多種值類型

00:07:33.487 --> 00:07:34.588 
添加至Foundation API上

00:07:35.489 --> 00:07:36.523 
不僅如此

00:07:37.324 --> 00:07:39.960 
我們也全面支持

00:07:40.427 --> 00:07:42.229 
Foundation的單位和計量

00:07:43.664 --> 00:07:48.902 
另外 是爲AP 601格式
有一個新的日期格式器

00:07:49.336 --> 00:07:51.438 
如果你知道AP 601是什麼

00:07:52.339 --> 00:07:54.074 
你很可能欣喜若狂

00:07:59.780 --> 00:08:05.085 
另一個好功能是我們如何更好地

00:08:05.152 --> 00:08:07.387 
使用新曆日期間隔進行日期計算

00:08:07.821 --> 00:08:09.923 
我們舉行了兩個關於
Foundation的研習會

00:08:10.390 --> 00:08:12.192  
Foundation和
Swift的新特性

00:08:12.259 --> 00:08:13.894  
以及測量和單位

00:08:16.263 --> 00:08:20.934 
昨天 我們宣佈支持通用鍵盤

00:08:21.535 --> 00:08:25.439 
在你的Mac上覆制
然後粘貼在你的iOS設備上

00:08:26.240 --> 00:08:28.308 
你如何在你的應用上應用這種功能？

00:08:29.176 --> 00:08:33.547 
只需使用現有UI Pasteboard API
就這麼簡單

00:08:34.648 --> 00:08:35.948 
你還需要知道另外一點

00:08:38.150 --> 00:08:43.190 
你可能必須在你的設備上
獲得很大的資源

00:08:43.323 --> 00:08:45.893 
如果我需要複製一張非常大的圖片

00:08:46.627 --> 00:08:48.228 
可能需要一兩秒鐘

00:08:48.295 --> 00:08:49.530 
你可能會看到這個UI

00:08:50.297 --> 00:08:55.002 
爲了避免檢索遠程數據時的問題

00:08:55.169 --> 00:08:58.372 
你應該首先檢查
看看你是否需要相關數據

00:08:58.539 --> 00:09:00.107 
所以爲了避免看到這個UI

00:09:00.807 --> 00:09:03.944 
爲此在UI Pasteboard上
我們添加了四個新方法

00:09:04.278 --> 00:09:08.982 
因此你可以輕鬆檢查屏幕
URL、圖像和顏色

00:09:11.818 --> 00:09:14.154 
在UI Pasteboard上
另外一個特性是

00:09:15.022 --> 00:09:19.226 
你現在可以控制你放在粘貼板上的東西

00:09:19.726 --> 00:09:25.165 
現在你可以在本地設備上限制你的數據

00:09:25.866 --> 00:09:27.801 
或者設置到期日期

00:09:36.043 --> 00:09:38.612 
但我現在想說的是顏色

00:09:40.614 --> 00:09:44.518 
它不是一種軟件功能
而是真正的硬件功能

00:09:44.585 --> 00:09:47.788 
在我們新的iMac 5 K上

00:09:48.689 --> 00:09:52.326 
以及9.7 英寸的
iPad Pro 上

00:09:53.760 --> 00:09:57.331 
這是一個技術轉變
你現在可以在屏幕上描繪

00:09:58.198 --> 00:10:00.767 
之前在物理上不可能實現的色彩

00:10:01.502 --> 00:10:06.607 
而且 我們正在改變
我們描繪色彩的方式

00:10:07.741 --> 00:10:11.245 
iOS設備曾經使用sRGB顏色空間

00:10:11.879 --> 00:10:16.183 
現在通過這件設備
你將在擴展的sRGB色彩空間內工作

00:10:16.683 --> 00:10:17.851 
這對於你意味着什麼？

00:10:18.752 --> 00:10:23.423 
首先 iOS實際上
已經實現色彩管理

00:10:24.024 --> 00:10:30.664 
iOS和TVOS以及在
iOS X中 我們正在公開API

00:10:30.931 --> 00:10:32.566 
從而適應廣泛的色彩範圍

00:10:34.601 --> 00:10:37.371 
第一種方式是隻使用
UI Image View

00:10:38.305 --> 00:10:40.941 
UI Image View實際上
已實現色彩管理

00:10:41.175 --> 00:10:43.710 
始於iOS 9.3
所以你已經準備好了

00:10:44.745 --> 00:10:46.346 
UI Color怎麼樣呢？

00:10:48.081 --> 00:10:49.716 
我們讓它變得很簡單

00:10:50.651 --> 00:10:55.289 
我們在其中已設有一個
採用RGB色彩模式的初始化器

00:10:56.657 --> 00:11:01.995 
其中第二個新的初始化器
採用display P3 RGB色彩模式

00:11:03.030 --> 00:11:07.901 
第一個初始化器是你如何繪製任意顏色

00:11:08.168 --> 00:11:10.470 
在擴展的sRGB空間內

00:11:11.405 --> 00:11:14.174 
現在你可以表達超出

00:11:14.474 --> 00:11:18.679 
0-1範圍內的色彩
如果你想要超越傳統的sRGB

00:11:19.947 --> 00:11:21.915 
第二個是 displayP3

00:11:22.416 --> 00:11:24.351 
displayP3是真正的彩色顯示

00:11:24.418 --> 00:11:26.720 
在創作側非常常見

00:11:26.787 --> 00:11:30.190 
如果你收到一個有廣泛色彩的規範

00:11:30.257 --> 00:11:32.326 
很有可能你將使用displayP3

00:11:32.392 --> 00:11:36.196 
這就是爲什麼我們提供初始化器的原因

00:11:36.396 --> 00:11:37.231 
就是這樣的原因

00:11:37.898 --> 00:11:39.800 
我們沒有色彩空間分類

00:11:40.400 --> 00:11:43.370 
你只需要使用這兩個初始化器
即可大功告成

00:11:47.975 --> 00:11:51.478 
但我現在想談談圖像渲染

00:11:55.282 --> 00:11:57.484 
圖像渲染是

00:11:57.551 --> 00:12:00.521 
你今天可能已經在使用的東西

00:12:00.954 --> 00:12:03.423 
通過UI 圖形開始圖像上下文

00:12:03.991 --> 00:12:05.726 
添加來自文本API的圖像

00:12:06.293 --> 00:12:09.663 
這有幾分像你想幹就乾的事

00:12:10.497 --> 00:12:12.366 
渲染離屏圖像

00:12:12.900 --> 00:12:15.035 
因此 這個API有一個問題

00:12:16.136 --> 00:12:21.375 
它實際上是32位sRGB
是一個內置的假定

00:12:22.109 --> 00:12:27.714 
此外 這並非我們最好的API
它在數據塊之前就存在

00:12:28.215 --> 00:12:30.450 
而它不是真正可擴展的

00:12:30.517 --> 00:12:34.221 
因此 你編寫圖像所用的東西

00:12:34.288 --> 00:12:37.257 
開始圖像上下文API看起來就像這樣

00:12:37.958 --> 00:12:40.627 
我不知道有多少人已犯下這個錯誤

00:12:40.694 --> 00:12:43.964 
試圖在開始圖像上下文之後獲得圖像

00:12:44.498 --> 00:12:45.365 
我肯定犯過這種錯

00:12:46.567 --> 00:12:49.236 
但現在 我們有一個新的類型

00:12:50.737 --> 00:12:52.573 
新的 UI 圖形渲染類型

00:12:54.241 --> 00:12:58.545 
它帶給你的首先是完全的色彩管理

00:12:59.580 --> 00:13:01.515 
它要在默認情況下做正確的事

00:13:02.382 --> 00:13:05.686 
如果你在9.7 英寸的 iPad上

00:13:06.453 --> 00:13:08.889 
你將獲得一個廣泛的色彩上下文

00:13:09.323 --> 00:13:11.959 
如果不是在該設備上
你可以獲得傳統上下文

00:13:13.293 --> 00:13:16.330 
另外 它基於數據塊設計 易於使用

00:13:16.930 --> 00:13:19.533 
此外 它是一個基於API的對象

00:13:19.600 --> 00:13:23.403 
我們必須爲圖形和PDF
增加我們的類型

00:13:25.239 --> 00:13:27.774 
此外 很重要的是

00:13:28.642 --> 00:13:32.980 
這個類型將管理
你的色彩上下文的生存期

00:13:33.547 --> 00:13:37.150 
這意味着我們可以在
hood下做一些內存優化

00:13:38.218 --> 00:13:39.319  
讓我給你舉個例子

00:13:40.554 --> 00:13:46.393  
相當於之前的情況
你只需要創建你的渲染器

00:13:48.262 --> 00:13:49.763  
你試圖生成一個圖像

00:13:50.297 --> 00:13:54.101  
它只要提供數據塊
這裏是你的繪製代碼

00:13:55.102 --> 00:13:56.870  
有關這一點最酷的事是

00:13:57.504 --> 00:14:00.908  
如果你再次調用 這裏的圖像方法

00:14:01.441 --> 00:14:04.578  
我們打算僅再次使用這個上下文

00:14:10.784 --> 00:14:17.357 
圖像相關的一個新功能是資源分類

00:14:18.492 --> 00:14:23.297 
我們擁有資源分類 支持各種色彩資源

00:14:24.264 --> 00:14:28.402 
從右到左和從左到右的資源
以及壓縮功能

00:14:29.303 --> 00:14:31.038 
當然它們是完全集成於

00:14:31.271 --> 00:14:33.607 
UIKit的特色系統

00:14:34.675 --> 00:14:36.877 
所以 讓我們看看第一個

00:14:37.945 --> 00:14:38.912 
什麼是色彩資源？

00:14:38.979 --> 00:14:40.514 
我們想在這裏做什麼？

00:14:41.281 --> 00:14:44.985 
如果你嵌入廣泛的色彩資源

00:14:45.452 --> 00:14:48.689 
在你的應用中 你希望能夠部署

00:14:49.323 --> 00:14:51.058 
在非全綵色設備上

00:14:51.725 --> 00:14:53.627 
因此 我們想做的是

00:14:53.694 --> 00:14:59.233 
我們將爲你自動提供一代sRGB變體

00:15:00.067 --> 00:15:02.870 
它將彎曲和
App Thinning兼容

00:15:02.936 --> 00:15:05.639 
所以我們將只部署需要的東西

00:15:06.173 --> 00:15:07.207 
在正確的設備上

00:15:11.879 --> 00:15:15.349 
資源分類中的另外一個新功能是壓縮

00:15:16.917 --> 00:15:20.053 
我們添加了對有損壓縮方案的支持

00:15:21.088 --> 00:15:26.460 
而且它自動挑選 如果你選擇了它

00:15:27.961 --> 00:15:32.165 
它會爲給定設備生成正確的變體

00:15:32.232 --> 00:15:37.404 
於是你將在足跡和質量之間
保持絕佳的平衡

00:15:38.005 --> 00:15:41.375 
而且它同樣完全兼容
App Thinning

00:15:41.441 --> 00:15:45.012 
因此 們只將需要的東西
部署在給定設備上

00:15:47.581 --> 00:15:51.685 
我想在此介紹資源分類的最後一個功能

00:15:52.319 --> 00:15:54.588 
方向或圖像資源支持

00:15:56.490 --> 00:16:00.394  
現在它意味着直接在資源分類層級上

00:16:00.761 --> 00:16:05.098  
你可以指定一個圖形爲RTL資源

00:16:06.033 --> 00:16:08.802  
或者是從左到右的資源

00:16:09.336 --> 00:16:11.371  
或者某種自動翻轉的資源

00:16:12.272 --> 00:16:14.007  
直接在資源管理系統中

00:16:14.808 --> 00:16:19.413  
我們也有關於
國際用戶界面的完整研習會

00:16:20.214 --> 00:16:23.584  
其中可以讓你瞭解更多
有關iOS X的改進

00:16:26.653 --> 00:16:28.388 
但我現在想談的是

00:16:28.455 --> 00:16:32.726 
如何創建更好的用戶界面

00:16:33.126 --> 00:16:35.429 
以及在iOS X中的交互

00:16:37.130 --> 00:16:39.933 
首先你需要確保

00:16:41.068 --> 00:16:44.671 
每個人都可以和你的應用交互

00:16:45.539 --> 00:16:47.975 
我們有新的輔助功能檢查器

00:16:48.609 --> 00:16:51.778 
你可以利用這個工具 它真的很牛

00:16:51.845 --> 00:16:54.815 
你可以連接到一個應用上

00:16:55.082 --> 00:16:58.051 
然後你將自動瞭解給定

00:16:58.685 --> 00:16:59.987 
UI元素的輔助功能屬性

00:17:01.722 --> 00:17:03.323 
還有另一個很不錯的功能

00:17:07.895 --> 00:17:12.232 
你還可以在應用上啓動審覈功能

00:17:12.699 --> 00:17:14.134 
在模擬器或你的設備上運行

00:17:14.434 --> 00:17:18.338 
這樣可以讓你獲得提示

00:17:18.472 --> 00:17:22.075 
瞭解你希望修復的問題 以及你真正想

00:17:22.142 --> 00:17:23.877 
修復的與你的應用相關的問題

00:17:26.213 --> 00:17:31.919 
有一點要注意 就像Xode
如果你沒有收到任何警告

00:17:32.619 --> 00:17:34.922 
並不意味着你的應用完美無缺

00:17:35.589 --> 00:17:37.558 
但這是很好的第一步

00:17:38.825 --> 00:17:41.328 
我們也有新的方式

00:17:41.828 --> 00:17:44.932 
和 iOS X上的應用交互

00:17:46.433 --> 00:17:50.237 
我們添加了一個新手勢 語音識別器

00:17:51.572 --> 00:17:54.007 
[外語]

00:17:56.677 --> 00:17:58.178 
而且不限於英語

00:17:59.012 --> 00:18:01.281 
它是一個非常簡單的API

00:18:02.516 --> 00:18:05.686 
SFSpeech識別器

00:18:05.752 --> 00:18:08.589 
它可以做連續語音識別

00:18:09.590 --> 00:18:13.160 
而且你可以將其連接到音頻文件

00:18:14.094 --> 00:18:15.996 
或者實時音頻流上

00:18:16.730 --> 00:18:19.466 
你可以做實時的連續語音識別

00:18:22.669 --> 00:18:27.508 
你可以將其配置爲優化識別

00:18:27.875 --> 00:18:31.044 
用於聽寫或實現簡易字符串

00:18:32.212 --> 00:18:35.349 
這裏只是舉一個API的例子

00:18:35.883 --> 00:18:39.753 
你創建一個識別器
你將其配置了一個請求

00:18:40.521 --> 00:18:42.723 
你開始一項任務 然後

00:18:42.789 --> 00:18:45.192 
我們回電告知你結果

00:18:46.126 --> 00:18:47.261 
真的方便使用

00:18:47.761 --> 00:18:52.766 
我們在 WWDC應用上
有關於這個API的相應視頻

00:18:55.502 --> 00:19:01.074 
iOS X中的另一大改進是文本輸入

00:19:01.575 --> 00:19:06.380 
你現在可以做的一件事是

00:19:06.446 --> 00:19:09.983 
爲你的文本字段中的內容添加信息

00:19:10.851 --> 00:19:15.422 
你可以通過這個功能提供智能建議

00:19:15.923 --> 00:19:20.294 
以Quick type模式
例如如果我的文本字段是關於位置

00:19:20.861 --> 00:19:23.430 
我在Quick type中看到地址

00:19:25.132 --> 00:19:30.671 
我們有很多預定義的內容類型
對人而言

00:19:30.804 --> 00:19:36.510 
你可以指定名 姓氏 全名或地點

00:19:36.677 --> 00:19:38.846 
在此情況下 它將配置成

00:19:38.912 --> 00:19:41.615 
一個完整的街道地址

00:19:43.183 --> 00:19:47.054 
或甚至可以配置電子郵件
電話 信用卡卡號

00:19:50.457 --> 00:19:52.693 
關於文本輸入

00:19:53.060 --> 00:19:57.097 
以及文本的另一點是
你如何在iOS中呈現文本

00:19:58.565 --> 00:20:03.537 
在iOS 7中 我們添加了
支持動態類型 在iOS X中

00:20:03.737 --> 00:20:06.840 
我們正在製作內容尺寸分類

00:20:06.907 --> 00:20:08.675 
用於動態類型 一種特徵

00:20:09.710 --> 00:20:10.677 
那麼 這意味着什麼？

00:20:11.712 --> 00:20:16.450 
在iOS X之前的內容
尺寸類別只是一個屬性

00:20:16.717 --> 00:20:17.684 
在UI App上

00:20:19.286 --> 00:20:22.923 
而且 你實際發送了通知

00:20:23.857 --> 00:20:27.094 
如果用戶改變了內容尺寸

00:20:27.628 --> 00:20:30.797 
你必須重新發出通知並且更新你的UI

00:20:33.233 --> 00:20:37.938 
現在 因爲它集成爲一個特性

00:20:38.438 --> 00:20:40.307 
它在視圖控制器上可用了 這意味着

00:20:40.374 --> 00:20:44.645 
你可以在所有UI擴展中使用動態類型

00:20:47.414 --> 00:20:51.251 
我們實際上還添加了對動態類型的支持

00:20:51.685 --> 00:20:54.454 
在新的UIKit中的現有元素內

00:20:54.855 --> 00:21:00.527 
因此 如果你通過文本字段
文本視圖 標籤創建UI

00:21:01.461 --> 00:21:06.033 
你希望對尺寸變化重新做出反應

00:21:07.534 --> 00:21:10.804 
現在在iOS X中
你可以使用是的調整字體功能

00:21:11.471 --> 00:21:16.176 
調整內容尺寸分類
你的標籤 文本視圖

00:21:16.343 --> 00:21:19.046 
文本字段僅對此重新做出反應

00:21:19.813 --> 00:21:23.083 
例如 你正在使用音頻應用 你的應用

00:21:23.517 --> 00:21:25.052 
將會自動更新

00:21:25.552 --> 00:21:29.189 
對於動態類型而言
這是一個很棒的功能

00:21:29.489 --> 00:21:33.193 
完全自動支持 標籤和文本字段

00:21:40.033 --> 00:21:44.972 
我們曾經希望在UIKit中
添加新的自定義

00:21:45.339 --> 00:21:48.141 
選項卡欄項是一個極好的案例

00:21:48.609 --> 00:21:52.346 
現在你可以自定義批處理
顏色和文本屬性

00:21:52.479 --> 00:21:57.985 
在標籤欄項中
你還可以自定義選定的主題顏色

00:21:58.552 --> 00:22:01.154 
因此 我們可以說我有一個標準標籤欄

00:22:01.288 --> 00:22:02.789 
看起來就像那樣

00:22:03.423 --> 00:22:07.060 
如果我將此代碼添加到我的應用中

00:22:10.097 --> 00:22:13.300  
它將成爲我的新標籤欄UI

00:22:14.168 --> 00:22:16.737  
也許這就是我並非設計師的原因

00:22:25.179 --> 00:22:27.581 
另一項極佳的定製 在網頁視圖中

00:22:28.849 --> 00:22:33.420 
爲3D Touch iPhone
裝入Peek和Pop時

00:22:34.521 --> 00:22:37.758 
我們曾在UIKit中
有非常簡單的API用於視圖控制器

00:22:38.125 --> 00:22:41.295 
我們曾有內置的支持WK網頁視圖

00:22:42.196 --> 00:22:45.832 
現在在iOS X中
你可以很好的控制

00:22:46.200 --> 00:22:49.169 
web視圖中的Peek和Pop行爲

00:22:49.236 --> 00:22:53.640 
這意味着你可以使用自定義視圖控制器

00:22:54.041 --> 00:22:54.975 
用於做Peek

00:22:55.576 --> 00:23:00.214 
你可以有預覽操作
以及很棒的後續結果

00:23:00.280 --> 00:23:04.051 
當你Pop網頁視圖中時 你可以決定

00:23:04.117 --> 00:23:06.386 
留在你的應用內

00:23:07.154 --> 00:23:12.860 
它就像web視圖類上的
新的委託方法一樣可用

00:23:14.261 --> 00:23:17.865 
但Peek和Pop
最讓我感到激動的是

00:23:18.332 --> 00:23:21.969 
新的UI預覽交互類型

00:23:22.769 --> 00:23:27.274 
因此在UIKit內的
Peek和Pop完全是兩回事

00:23:28.876 --> 00:23:33.480 
有一種視覺效果 這種模糊效果
這種很棒的動畫

00:23:33.547 --> 00:23:35.449 
當你想要預覽某種東西時

00:23:36.617 --> 00:23:40.587 
有一種觸摸 我們如何對壓力做出迴應

00:23:40.854 --> 00:23:44.258 
我們如何檢測用戶的意圖 是撞擊

00:23:44.324 --> 00:23:46.360 
一次滾動 還是Peek的開始？

00:23:47.294 --> 00:23:50.697 
通過UI預覽互動 你可以做到

00:23:51.131 --> 00:23:54.935 
使用UIKit提供的
執行實現這種觸摸

00:23:55.903 --> 00:23:58.338 
但爲Peek和Pop
提供你自己的動畫

00:23:59.339 --> 00:24:04.411 
這是此類型上的一種新的委託
你可以知道

00:24:04.478 --> 00:24:07.014 
當你從Peek轉到Pop時
我們將會

00:24:07.080 --> 00:24:10.350 
爲你提供改進 一連串的改進

00:24:10.417 --> 00:24:14.288 
你可以插入自己的互動 你自己的動畫

00:24:14.354 --> 00:24:16.723 
你可以實現完全定製的Peek

00:24:16.790 --> 00:24:18.792 
以及Pop UI
這確實是一個很大的改進

00:24:24.231 --> 00:24:28.135 
如果你希望全面瞭解
Peek和Pop及3D Touch

00:24:28.202 --> 00:24:31.839 
我們週四下午4點將舉行完整會話

00:24:35.008 --> 00:24:39.246 
我們添加的另外一個新特性

00:24:39.313 --> 00:24:41.381 
在大家曾經需要的滾動視圖中

00:24:42.516 --> 00:24:46.720 
它實際上完全支持UI刷新控件

00:24:53.527 --> 00:24:55.762 
它在UI滾動視圖上可用

00:24:56.563 --> 00:24:57.998 
在類型的滾動視圖上也可用

00:24:58.298 --> 00:25:01.835 
我們已經支持表格視圖和刷新控制

00:25:01.902 --> 00:25:05.305 
因此 它意味着現在
你可以使用刷新控制

00:25:05.672 --> 00:25:06.607 
修正視圖

00:25:08.742 --> 00:25:10.978 
我們來談談集合視圖

00:25:12.646 --> 00:25:14.414 
這是UIKit上一個很不錯的功能

00:25:15.215 --> 00:25:18.485 
去年我們添加了

00:25:18.552 --> 00:25:21.955 
對流佈局中
自動自調整尺寸的單元格的支持

00:25:24.124 --> 00:25:25.826 
在此之前你必須要做的是

00:25:25.893 --> 00:25:28.762 
你必須計算預估尺寸

00:25:29.830 --> 00:25:31.498 
有時它並不容易

00:25:32.232 --> 00:25:35.869 
但在UIKit水平上
我們知道屏幕上呈現何種單元格

00:25:36.303 --> 00:25:38.639 
因此我們在流佈局中有個一個新的模式

00:25:39.106 --> 00:25:41.909 
你可以自動通過 我們將爲你

00:25:41.975 --> 00:25:44.545 
估算 你無需自己去做

00:25:44.611 --> 00:25:46.280 
這個估算了

00:25:53.720 --> 00:25:56.523 
你知道我們爲UI校正視圖
支持重新排序了嗎？

00:25:57.291 --> 00:25:59.459 
我們做了 而且我們正在改善

00:25:59.526 --> 00:26:03.530 
在集合視圖中添加分頁支持

00:26:04.264 --> 00:26:07.100 
這是滾動視圖級展示的東西

00:26:07.568 --> 00:26:10.103 
校正視圖將爲你完成工作

00:26:11.839 --> 00:26:16.610 
但我對今年的一項功能非常激動

00:26:16.677 --> 00:26:19.413 
關於集合視圖的平滑滾動

00:26:20.781 --> 00:26:23.217 
它是一個真正簡單聰明的想法

00:26:24.051 --> 00:26:27.855 
如果我在集合視圖中有一個網格

00:26:29.022 --> 00:26:31.225 
我會滾動這個網格

00:26:32.693 --> 00:26:37.397 
在某種程度上 我需要上個單元格

00:26:37.965 --> 00:26:39.967 
同時出現在屏幕上

00:26:40.634 --> 00:26:45.472 
對於佈局而言
如果你的單元格有點複雜

00:26:45.873 --> 00:26:48.842 
它可能需要一定的時間
你可能剝奪一個架構

00:26:49.877 --> 00:26:50.711 
那樣並不好

00:26:51.879 --> 00:26:56.984 
因此 我們現在正在做的是
我們稱之爲單元格預取的東西

00:26:58.952 --> 00:27:04.491 
這裏的想法是
實際要在屏幕上實現一個單元格前

00:27:05.192 --> 00:27:08.662 
我們可能向你要求這個單元格
我們不會

00:27:08.729 --> 00:27:14.234 
將一個單元格作爲單元格數據塊
就像一整行

00:27:14.635 --> 00:27:17.471 
我們會要求一個單元格
然後下一個 再下一個

00:27:17.771 --> 00:27:19.673 
所以我們要攤銷成本

00:27:20.941 --> 00:27:24.044 
從而在你的應用中建立單元格

00:27:25.779 --> 00:27:28.649 
好事是這是自動完成的

00:27:29.449 --> 00:27:32.319 
如果你爲iOS X重建你的應用

00:27:32.753 --> 00:27:35.088 
你可以免費實現這樣的行爲

00:27:44.631 --> 00:27:45.465 
而且還有更多

00:27:47.901 --> 00:27:53.874 
我們有一個新的協議
我們稱之爲數據預取

00:27:54.808 --> 00:27:56.844 
因爲有時不僅僅是

00:27:56.910 --> 00:27:59.413 
爲你的單元格製作佈局

00:28:00.113 --> 00:28:01.748 
有時你需要獲取數據

00:28:02.983 --> 00:28:04.218 
你需要從光盤讀取

00:28:04.451 --> 00:28:08.355 
你需要從網絡獲取數據 因此它很棒

00:28:08.422 --> 00:28:12.192 
如果我們可以告訴你嘿
我們需要速索引

00:28:13.193 --> 00:28:15.128 
你可以提前準備

00:28:16.864 --> 00:28:18.732 
這正是這個新協議的作用

00:28:19.233 --> 00:28:22.803 
你可以實施幾種委託方法
我們將會告訴你

00:28:22.870 --> 00:28:26.907 
我們何時將會要求一個單元格

00:28:26.974 --> 00:28:28.475 
因此你可以將數據準備好

00:28:28.976 --> 00:28:31.678 
從而再次改善

00:28:31.745 --> 00:28:33.780 
你的基於應用的集合視圖的表現

00:28:34.748 --> 00:28:38.285 
我們在表格視圖上也提供了這種功能

00:28:50.797 --> 00:28:55.068 
我們將舉行關於新UI集合視圖的
完整會話

00:28:55.469 --> 00:28:57.704 
單元格預取 數據預取

00:28:57.938 --> 00:29:00.007 
重新排序 不要錯過哦

00:29:04.912 --> 00:29:10.350 
但我認爲今年UIKit的主要新功能

00:29:11.151 --> 00:29:13.820 
是我們稱之爲UI視圖屬性動畫大師

00:29:15.255 --> 00:29:16.790 
它是一種新的API

00:29:18.225 --> 00:29:20.727 
它是一種新的API

00:29:20.794 --> 00:29:24.865 
讓你建立可以中斷的動畫

00:29:25.399 --> 00:29:29.336 
你可以清除的動畫 你可以倒退的動畫

00:29:30.737 --> 00:29:34.575 
我們正在展示新的時間曲線

00:29:35.776 --> 00:29:37.211 
它是完全動態的

00:29:37.744 --> 00:29:39.680 
你可以快速添加動畫

00:29:40.113 --> 00:29:44.384 
我在此要說的是 新的API

00:29:44.918 --> 00:29:48.155 
就像一部電影中的時間軸

00:29:48.222 --> 00:29:52.593 
你可以清除 快進 播放 倒退

00:29:53.594 --> 00:29:57.464 
該模型很簡單 使用極其簡單

00:29:58.332 --> 00:30:02.169 
你只需要創建一個新的動畫

00:30:03.403 --> 00:30:06.173 
你設置時間參數和持續時間

00:30:06.240 --> 00:30:07.541 
你添加自己的動畫

00:30:07.941 --> 00:30:10.711 
你啓動動畫 因爲你有一個對象

00:30:10.777 --> 00:30:14.648 
代表該動畫 你可以快進

00:30:14.948 --> 00:30:17.351 
或者改變其進度

00:30:18.886 --> 00:30:21.021 
它還完全集成在

00:30:21.088 --> 00:30:23.624 
i視圖控制器運行系統中

00:30:23.957 --> 00:30:26.693 
我們將會對此詳細解釋

00:30:28.328 --> 00:30:31.899 
本週三將舉行UI動畫
和技術進步的會話

00:30:33.166 --> 00:30:37.004 
但我想告訴你的是
你可以用它創建什麼

00:30:37.638 --> 00:30:41.141 
這是一個非常簡單的照片應用

00:30:43.343 --> 00:30:47.014 
你之前可以做到的是

00:30:47.881 --> 00:30:49.416 
在導航控制器中實現自定義過渡

00:30:49.983 --> 00:30:54.821 
但有了這個動畫API
我可以啓動過渡

00:30:56.757 --> 00:31:00.460 
在飛行中用一個手勢捕捉它 移動它

00:31:01.595 --> 00:31:02.429 
釋放它

00:31:05.933 --> 00:31:06.900 
然後再次捕捉它

00:31:08.869 --> 00:31:10.571 
我會倒轉我的過渡

00:31:11.638 --> 00:31:12.940 
讓動畫結束

00:31:14.675 --> 00:31:16.176 
令人驚歎的是

00:31:17.144 --> 00:31:19.179 
它是隻是一個過渡

00:31:19.713 --> 00:31:24.451 
所以我們在相同的上下文中移動
從非交互式

00:31:25.018 --> 00:31:28.889 
前往交互式手勢驅動 再回到非交互式

00:31:29.223 --> 00:31:32.059 
到手勢驅動 再到交互式
再到非交互式

00:31:32.292 --> 00:31:37.297 
你可以完全將基於手勢的
互動和動畫混合起來

00:31:37.364 --> 00:31:40.167 
我們認爲這是一項期待已久的偉大功能

00:31:40.234 --> 00:31:41.969 
通過它可以看到你將創建的東西

00:31:50.544 --> 00:31:56.149 
現在 我想談談我們爲iOS X
帶來的新特點

00:31:59.553 --> 00:32:03.924 
這裏關鍵的事情是 沒有什麼

00:32:03.991 --> 00:32:06.093 
是你絕對要採用的

00:32:06.527 --> 00:32:09.062 
不 恰恰相反 我們該做什麼來幫助你

00:32:09.663 --> 00:32:11.565 
我們擁有一些新的功能

00:32:11.632 --> 00:32:14.268 
它們將會讓你的應用變得更好

00:32:15.802 --> 00:32:18.839 
這些新功能將簡化你的體系結構

00:32:20.307 --> 00:32:23.243 
用於調整應用的東西將會更加集成

00:32:24.244 --> 00:32:26.847 
一個好案例是某種非常簡單的東西

00:32:27.447 --> 00:32:29.950 
就是我們過去如何更改開放式URL

00:32:31.118 --> 00:32:33.587 
因此 我們首先要讓它變成異步

00:32:34.454 --> 00:32:40.160 
使用完成處理程序
但我們還要添加通用鏈接

00:32:40.561 --> 00:32:43.664 
因此你知道通用鏈接
是當你打開一個URL時

00:32:44.831 --> 00:32:46.667 
例如鏈接至社交網絡

00:32:47.134 --> 00:32:50.437 
如果你有一個本地應用
它就會打開本地應用

00:32:51.371 --> 00:32:55.209 
但現在有了這個新的API
你可以實際檢查

00:32:56.276 --> 00:33:00.113 
系統上是否已安裝一個應用

00:33:00.814 --> 00:33:04.218 
如果沒有 你可以留在你的應用中

00:33:04.284 --> 00:33:07.721 
你可以仍然保留這種體驗 而不是

00:33:07.788 --> 00:33:10.224 
例如打開Safari

00:33:10.724 --> 00:33:13.560 
因此它將真正改善

00:33:13.927 --> 00:33:16.997 
你如何整合內容和處理系統中
這些應用的方法

00:33:18.498 --> 00:33:23.203 
另一大功能是我們對核心數據的更改

00:33:25.038 --> 00:33:28.976 
第一個是我們稱之爲查詢生成的功能

00:33:30.744 --> 00:33:35.115 
這裏的想法是
你的菜單I擁有上下文很常見

00:33:35.182 --> 00:33:39.853 
而且你打算在背景隊列工作

00:33:40.053 --> 00:33:43.490 
在單獨的上下文中

00:33:44.658 --> 00:33:47.160 
你能做的是通過查詢生成

00:33:47.661 --> 00:33:49.296 
你實際上可以pin

00:33:51.231 --> 00:33:53.901 
你的模型在你的菜單上

00:33:54.668 --> 00:33:58.505 
你可以準確控制 當你希望從

00:33:59.239 --> 00:34:01.141 
你的模型一個版本移至另一個版本

00:34:01.808 --> 00:34:06.113 
它意味着你不必要再處理力度

00:34:06.246 --> 00:34:07.814 
因爲某種東西改變了背景隊列

00:34:07.881 --> 00:34:12.585 
因爲你可以準確決定
菜單I何時應該移動

00:34:13.020 --> 00:34:14.188 
至數據的一個新版本

00:34:14.888 --> 00:34:16.523 
這是一個真正偉大的方式

00:34:16.590 --> 00:34:20.092 
簡化了你的應用中的核心數據代碼

00:34:20.627 --> 00:34:24.531 
另外一個功能是關於連接池

00:34:25.065 --> 00:34:27.266 
目前在一次存儲中 我們完全支持

00:34:27.333 --> 00:34:30.938 
多位讀者 一位作者模式

00:34:31.371 --> 00:34:33.639 
這將給你帶來極大的性能提高

00:34:34.174 --> 00:34:39.446 
我們在工具側還有新的功能 瞭解它們

00:34:40.013 --> 00:34:42.081 
我建議你去參加週五舉行的

00:34:42.149 --> 00:34:45.485 
核心數據的新特性會話

00:34:47.321 --> 00:34:51.024 
爲你的應用數據建模的另外一個方式
是使用CloudKit

00:34:51.757 --> 00:34:56.063 
對於CloudKit
我們已經爲公共數據庫

00:34:56.897 --> 00:35:00.434 
以及私人用戶數據庫保留

00:35:01.101 --> 00:35:04.571 
我們要在iOS X中
添加的是記錄分享

00:35:05.072 --> 00:35:09.543 
因此你可以讓多個用戶訪問相同的記錄

00:35:09.843 --> 00:35:12.513 
這就會打開一個全新類別的

00:35:13.013 --> 00:35:14.615 
具有CloudKit的應用

00:35:16.216 --> 00:35:17.150 
這棒極了

00:35:17.651 --> 00:35:21.255 
但一些東西有時很難處理

00:35:21.321 --> 00:35:25.893 
基於應用的協作 即如何處理UI流

00:35:26.660 --> 00:35:30.430 
你如何邀請人們參與文檔協作？

00:35:31.365 --> 00:35:34.668 
你如何以一種安全的方式實現它？

00:35:35.335 --> 00:35:39.706 
因此 我們添加了
新的UI雲共享控制器

00:35:40.240 --> 00:35:42.743 
這是由UIKit展示的視圖控制器

00:35:43.377 --> 00:35:47.814 
使用非常方便
只需提供新的共享對象即可

00:35:47.915 --> 00:35:50.751 
它將會控制CloudKit中
的控制記錄共享

00:35:51.285 --> 00:35:55.589 
我們將會爲你自動生成UI

00:35:55.956 --> 00:36:00.260 
以管理邀請流和被邀請人的名單

00:36:01.128 --> 00:36:05.199 
很容易在CloudKit中
建立基於應用的協作

00:36:05.799 --> 00:36:07.634 
我們會舉行關於
CloudKit的完整會話

00:36:07.701 --> 00:36:11.805 
介紹CloudKit的新特性
地點是Pesidio 時間是週四

00:36:14.308 --> 00:36:18.545 
現在我想談談NS用戶活動

00:36:20.247 --> 00:36:23.417 
NS 用戶活動是一個類

00:36:23.483 --> 00:36:26.620 
我們利用它捕捉你的應用的狀態

00:36:27.321 --> 00:36:30.390 
我們已經在多個方面使用它

00:36:30.691 --> 00:36:34.061 
例如Handoff和
Spotlight

00:36:34.761 --> 00:36:38.332 
我們在iOS X現在要做的是

00:36:38.398 --> 00:36:41.001 
添加對用戶活動位置的支持

00:36:41.068 --> 00:36:44.972 
因此 如果我的應用要處理地址

00:36:45.672 --> 00:36:49.109 
我可以表達的是 用戶當前活動

00:36:50.677 --> 00:36:51.845 
和此地址有關

00:36:52.212 --> 00:36:57.084 
你只需要提供你附加在
活動上的地圖套件項目

00:36:57.451 --> 00:37:01.855 
現在你明白我如何創建這個建議

00:37:01.989 --> 00:37:03.991 
在幾分鐘前的文本字段中

00:37:04.458 --> 00:37:07.928 
系統會注意到 哦 也許這個應用

00:37:08.595 --> 00:37:09.997 
正在處理這些地址

00:37:10.230 --> 00:37:11.832 
因此那很可能是一個極好的建議

00:37:11.899 --> 00:37:14.601 
用於處理地址文本文件

00:37:14.935 --> 00:37:18.372 
它會爲你完全自動打開

00:37:19.039 --> 00:37:20.474 
如果你在活動下有選項

00:37:21.275 --> 00:37:25.379 
我們有許多的新方式來提高

00:37:25.445 --> 00:37:29.016 
你的應用使用率
通過與我們稱之爲主動建議

00:37:29.082 --> 00:37:32.753 
它是以智能 活動爲基礎的功能

00:37:33.654 --> 00:37:36.256 
在iOS X中 在你的應用上

00:37:37.824 --> 00:37:38.659 
另一個地方

00:37:40.627 --> 00:37:45.799 
我們使用NS用戶活動是搜索

00:37:46.633 --> 00:37:50.938 
在iOS 9中也是如此
我們已經爲索引活動添加了支持

00:37:51.772 --> 00:37:57.611 
它的用法非常簡單
我們只需要創建一個活動

00:37:57.678 --> 00:37:59.646 
並提供文本字段信息

00:37:59.713 --> 00:38:01.982 
它就會在Spotlight中
顯示出來

00:38:02.883 --> 00:38:04.651 
但現在你可以做到的是

00:38:05.352 --> 00:38:07.988 
我們這裏有一個新的按鈕
在應用中搜索

00:38:08.856 --> 00:38:13.727 
你的用戶現在可以返回
直接轉到你的應用

00:38:15.028 --> 00:38:18.131 
而且你可以繼續自動搜索

00:38:18.465 --> 00:38:19.600 
在你的應用裏

00:38:20.167 --> 00:38:21.602 
使用非常方便

00:38:22.069 --> 00:38:26.473 
第一步 你需要爲你的
info Plist添加新的密鑰

00:38:27.741 --> 00:38:30.911 
告訴我們你支持
Spotlight繼續功能

00:38:32.846 --> 00:38:37.584 
第二步是運用新的UI應用委託方法

00:38:39.586 --> 00:38:40.754 
實施起來非常方便

00:38:41.488 --> 00:38:45.058 
我們爲你提供用戶活動
你可以創建UI

00:38:45.125 --> 00:38:48.362 
並繼續在你的應用中顯示搜索

00:38:50.030 --> 00:38:54.434 
去年最新的改進也和搜索有關

00:38:55.469 --> 00:38:59.206 
我們添加了對你的內容索引的支持
通過Core Spotlight

00:39:00.274 --> 00:39:05.145 
但現在你實際上可以在
Spotlight中搜索你的數據

00:39:05.212 --> 00:39:07.181 
我們正在打開Spotlight索引

00:39:07.848 --> 00:39:09.249 
這棒極了 因爲我們

00:39:10.017 --> 00:39:14.454 
爲電源和性能實現了該索引的完全優化

00:39:14.721 --> 00:39:18.759 
我們有非常強大的quarry模型

00:39:19.193 --> 00:39:21.061 
因此使用很方便

00:39:22.296 --> 00:39:24.398 
你只需要建立一個搜索查詢

00:39:27.367 --> 00:39:28.268 
你提供一個請求

00:39:29.169 --> 00:39:32.272 
你可以爲你的數據
搜索Spotlight索引

00:39:32.706 --> 00:39:37.244 
所以你可以將系統索引數據

00:39:37.311 --> 00:39:40.080 
例如來自網絡的數據
爲你的應用整合起來

00:39:41.048 --> 00:39:46.086 
我們今年將舉行一個關於
搜索API的會話

00:39:46.153 --> 00:39:48.222 
介紹延續性

00:39:49.156 --> 00:39:51.425 
核心Spotlight搜索
以及其他功能

00:39:56.763 --> 00:39:59.666 
我們提供了Replay Kit

00:39:59.733 --> 00:40:01.735 
它是在你的應用中錄屏的方式

00:40:02.202 --> 00:40:06.640 
在iOS X中
可使用Replay Kit爲流媒體

00:40:07.641 --> 00:40:10.277 
因此你可以進行現場直播

00:40:10.811 --> 00:40:14.615 
利用你的應用 因爲我們還提供擴展點

00:40:14.681 --> 00:40:18.552 
它意味着你第三方服務

00:40:19.019 --> 00:40:21.321 
給你帶來直播能力

00:40:21.388 --> 00:40:24.925 
例如我們在playground上
正在使用它

00:40:29.229 --> 00:40:32.866 
另一個大的架構是SceneKit

00:40:34.568 --> 00:40:38.505 
SceneKit是強大的3D引擎

00:40:38.572 --> 00:40:42.976 
你可以使用它在應用中
集成3D交互式組件

00:40:44.044 --> 00:40:47.247 
今年主要新功能是一種

00:40:47.648 --> 00:40:50.450 
全新的渲染引擎 基於物理的渲染

00:40:51.919 --> 00:40:55.789 
可以說 它現在支持高動態範圍

00:40:56.423 --> 00:40:59.293 
或者內部使用一個線性交叉空間

00:40:59.359 --> 00:41:00.894 
但我認爲它是更好地向你展示

00:41:02.129 --> 00:41:05.799 
這是你在iOS 9上的消防車

00:41:08.001 --> 00:41:09.970 
這是你在iOS X上的消防車

00:41:10.704 --> 00:41:11.605 
真的令人驚歎

00:41:17.277 --> 00:41:19.646 
它目前在Watch OS 2
上可用

00:41:20.447 --> 00:41:23.617 
我們將在Presidio舉行一次
完整的SceneKit Rendering會話

00:41:26.854 --> 00:41:29.389 
但我現在想談談Apple Pay

00:41:30.657 --> 00:41:32.226 
關於Apple Pay
有兩個方面要談

00:41:33.427 --> 00:41:38.031 
首先我們正在推廣Apple Pay

00:41:38.098 --> 00:41:40.133 
讓你的用戶可用

00:41:41.001 --> 00:41:46.206 
今天Apple Pay
已裝在iOS和Watch上

00:41:46.573 --> 00:41:49.243 
正如你昨天瞭解到的 我們正在推廣它

00:41:49.309 --> 00:41:51.378 
讓Apple Pay在web上可用

00:41:52.145 --> 00:41:54.515 
我們在Mac支持Apple Pay

00:41:54.715 --> 00:41:57.317 
所以對於用戶而言
Apple Pay無處不在

00:41:58.552 --> 00:42:01.355 
但令人高興的是 作爲開發人員

00:42:02.022 --> 00:42:04.291 
我們已經支持Apple Pay

00:42:04.925 --> 00:42:06.660 
在你的基於UIKit的應用中

00:42:07.327 --> 00:42:10.497 
但是現在你可在
Safari中用Apple Pay

00:42:10.564 --> 00:42:12.766 
採用新的Javascript架構

00:42:13.333 --> 00:42:16.837 
但它也可能意味着
你可以使用Apple Pay

00:42:17.271 --> 00:42:20.507 
在內嵌的Safari視圖控制器中

00:42:21.842 --> 00:42:24.144 
你使用Apple Pay
的另外一個地方是

00:42:24.611 --> 00:42:26.880 
在非UI代碼中

00:42:27.915 --> 00:42:30.918 
我們有一個新的API供非UI擴展用

00:42:31.351 --> 00:42:36.190 
在擴展中使用Apple Pay
真的令人驚歎

00:42:36.256 --> 00:42:38.992 
對於你的iMessage應用而言
是極佳的功能

00:42:39.426 --> 00:42:43.463 
這是你現在可以直接創建的一種流

00:42:43.530 --> 00:42:45.332 
在信息中通過一個擴展實現

00:42:45.799 --> 00:42:50.170 
我想提供有關Apple Pay
的兩個會話

00:42:50.571 --> 00:42:52.105 
不幸的是 第一場研習會

00:42:52.172 --> 00:42:55.108 
和網頁上Apple Pay同時舉行

00:42:55.175 --> 00:42:58.879 
之後是
Apple Pay錢包的新特性

00:43:01.849 --> 00:43:08.589 
我最後想談談你如何讓iOS變得更好

00:43:08.655 --> 00:43:11.525 
你如何和iOS集成

00:43:12.025 --> 00:43:17.531 
我們在iOS X中有新的主要擴展點

00:43:17.931 --> 00:43:21.201 
以及信息Siri Callkit中
也是如此

00:43:22.035 --> 00:43:26.940 
我們也改善了已有擴展 例如像鍵盤

00:43:27.207 --> 00:43:30.377 
現在你可以使用
相同的Globekey

00:43:32.012 --> 00:43:35.115 
來自你的鍵盤擴展的鍵盤peeker

00:43:35.182 --> 00:43:38.652 
我們也可以給你提供

00:43:38.952 --> 00:43:41.088 
用戶交互用語言提示

00:43:41.154 --> 00:43:45.058 
因此你可以在第三方擴展中
創建多語言支持

00:43:46.159 --> 00:43:49.129 
我們對iOS X的另一個改進是

00:43:49.396 --> 00:43:51.632 
是各種小工具的新顯示模式

00:43:52.132 --> 00:43:58.572 
此前你必須給我們提供你偏好的尺寸

00:43:58.872 --> 00:44:02.009 
現在我們有一個用戶控制的尺寸

00:44:02.276 --> 00:44:05.412 
緊湊模式有固定的高度

00:44:06.313 --> 00:44:09.550 
擴展模式有可變高度

00:44:10.083 --> 00:44:11.318 
使用真的非常方便

00:44:12.319 --> 00:44:14.555 
你不必做任何事情
通過我們新的API

00:44:14.621 --> 00:44:17.658 
你可以知道小工具何時會從

00:44:17.724 --> 00:44:19.693 
緊湊型移至擴展型

00:44:20.093 --> 00:44:23.430 
你可以給我們一個最大的尺寸
你可以知道顯示模式

00:44:23.497 --> 00:44:26.200 
你可以定製你需要顯示的信息

00:44:27.034 --> 00:44:30.237 
還有一件事 我需要指出來

00:44:30.537 --> 00:44:34.875 
儘管是小工具 它會在鎖屏上顯示出來

00:44:35.976 --> 00:44:41.048 
因此 小心處理你展示的數據類型

00:44:42.282 --> 00:44:47.321 
要時刻牢記的一件事是

00:44:47.387 --> 00:44:49.690 
和你在小工具中展示的數據保持一致

00:44:50.023 --> 00:44:52.426 
如果我來配置 如果我添加你的小工具

00:44:52.492 --> 00:44:54.328 
到我的主屏幕上 鎖屏上

00:44:55.395 --> 00:44:58.398 
我期望我總會看到相同種類的數據

00:44:58.465 --> 00:45:01.435 
保持相同的隱私級別

00:45:01.502 --> 00:45:05.239 
我不希望看到令人吃驚的東西

00:45:05.506 --> 00:45:07.641 
在我的iPhone鎖住時
在我的鎖屏上顯示

00:45:10.677 --> 00:45:14.781 
在iOS X上一個完全性的
架構是用戶通知

00:45:15.616 --> 00:45:21.121 
用戶通知曾經是我們

00:45:22.055 --> 00:45:23.490 
在UI應用層級常見的東西

00:45:24.091 --> 00:45:27.694 
我們有一個新的架構
但我們要展示相同的功能

00:45:28.195 --> 00:45:30.230 
我們將在這裏添加幾個增強功能

00:45:30.497 --> 00:45:35.402 
首先我們統一了本地通知和遠程通知

00:45:35.669 --> 00:45:37.871 
因此更容易處理

00:45:44.344 --> 00:45:47.915 
你可以更好地控制你的提供方式

00:45:48.415 --> 00:45:51.251 
我們向用戶提供通知的方式

00:45:52.586 --> 00:45:55.355 
我們要告訴你的另外一個優點是

00:45:56.924 --> 00:45:58.759 
在顯示通知之前

00:45:59.326 --> 00:46:02.462 
在應用上你會更好地控制

00:46:02.629 --> 00:46:04.064 
通知本身

00:46:05.799 --> 00:46:10.604 
此外 這也是一個
跨不同平臺的統一模型

00:46:12.773 --> 00:46:15.742 
除了這些API增強功能之外

00:46:16.877 --> 00:46:18.612 
我們還有兩個擴展

00:46:19.546 --> 00:46:22.649 
第一個是服務擴展

00:46:23.984 --> 00:46:27.421 
服務擴展是你可以

00:46:29.823 --> 00:46:33.393 
插入設備的擴展 當我們收到通知時

00:46:33.460 --> 00:46:35.596 
在此之前 它實際上已經被顯示了

00:46:35.896 --> 00:46:41.401 
在它在屏幕上顯示前
你可以處理有效載荷

00:46:42.202 --> 00:46:46.573 
有兩個極佳的使用案例
你可以用它建立

00:46:48.208 --> 00:46:53.180 
你可以有媒體附件 有效載荷是相當小

00:46:53.847 --> 00:46:57.584 
但如果你瞭解你要爲
給定有效載荷顯示什麼

00:46:58.018 --> 00:47:00.487 
當你收到該通知時 你可以

00:47:00.988 --> 00:47:02.456 
取回它並顯示

00:47:03.757 --> 00:47:06.827 
另外一個非常棒的功能是端到端加密

00:47:07.494 --> 00:47:10.330 
因爲你現在負責兩端

00:47:10.731 --> 00:47:13.200 
在服務器和本地設備上

00:47:13.800 --> 00:47:15.135 
因此你可以收到某種東西

00:47:15.802 --> 00:47:17.804 
然後用你自己的代碼解密

00:47:17.871 --> 00:47:20.140 
我們認爲這是一項非常棒的新功能

00:47:20.574 --> 00:47:22.409 
爲擴展提供了極佳的新可能性

00:47:30.117 --> 00:47:32.686 
這是我們擁有的另外一個擴展

00:47:32.986 --> 00:47:35.656 
用於用戶通知架構

00:47:36.390 --> 00:47:41.428 
你可以在你的通知中嵌入UI視圖

00:47:42.629 --> 00:47:46.266 
儘管還有一個限制 你不能直接

00:47:47.201 --> 00:47:51.038 
和視圖進行交互 但你有通知行動

00:47:51.972 --> 00:47:55.709  
我們將舉行關於用戶通知的兩場研習會

00:47:56.310 --> 00:47:59.012  
通知介紹和高級通知

00:47:59.446 --> 00:48:01.148  
地點是Pacific Heights
時間是週三

00:48:02.616 --> 00:48:07.054 
iOS X中的另外一個
新功能是CallKit

00:48:07.120 --> 00:48:09.823 
我們再次提供了一個新的擴展點

00:48:11.225 --> 00:48:13.126 
目錄擴展

00:48:13.560 --> 00:48:18.298 
我們允許你配置我們如何阻止來電

00:48:19.533 --> 00:48:20.934 
你對此可以完全掌控

00:48:22.002 --> 00:48:27.574 
第二個功能是我們如何識別電話號碼

00:48:27.941 --> 00:48:29.042 
並顯示我們的標籤

00:48:29.576 --> 00:48:32.479 
以當我們接到一個電話時
我們首先要檢查

00:48:32.679 --> 00:48:37.050 
地址簿 然後如果我們找不到匹配

00:48:37.651 --> 00:48:39.086 
我們可以添加你的擴展

00:48:40.587 --> 00:48:42.189 
因此使用API非常簡單

00:48:43.156 --> 00:48:45.492 
它是非UI擴展點

00:48:45.792 --> 00:48:47.528 
完全是兩種方法

00:48:48.829 --> 00:48:51.431 
但真正不錯的新功能

00:48:51.732 --> 00:48:55.602 
在CallKit中電話提供者API

00:48:56.370 --> 00:48:57.871 
通過電話供者API

00:48:58.805 --> 00:49:01.675 
我們擁有真正的第一方體驗

00:49:02.309 --> 00:49:04.945 
用於你的IP電話應用

00:49:05.412 --> 00:49:07.614 
也就是說 你可以獲得某種性能

00:49:07.681 --> 00:49:10.417 
如全屏來電UI

00:49:11.185 --> 00:49:12.686 
當你在應用上接到一個電話

00:49:13.153 --> 00:49:14.288 
但不僅如此

00:49:14.988 --> 00:49:17.157 
我們完全將你的應用

00:49:18.058 --> 00:49:20.661 
和iOS上的核心管理結合起來

00:49:20.994 --> 00:49:25.499 
比如像你的收藏和最近閱讀

00:49:25.566 --> 00:49:29.136 
我們從你的應用上自動獲得電話

00:49:30.737 --> 00:49:33.040 
你可以支持Siri
還可支持CarPlay

00:49:33.140 --> 00:49:36.210 
你可以和免打擾和藍牙結合起來

00:49:36.610 --> 00:49:39.046 
這是手機的一項主要新功能

00:49:44.418 --> 00:49:46.954 
我們可以全部瞭解它

00:49:47.020 --> 00:49:49.656 
在具有CallKit的
Enhancing VOIP應用中

00:49:53.060 --> 00:49:54.661 
我現在要談談Siri

00:49:56.630 --> 00:49:59.867 
你可能還不知道

00:50:00.367 --> 00:50:07.107 
在不同的語境中
Siri也會有相應的不同變化

00:50:07.608 --> 00:50:11.345 
因此 如果你在主屏幕上
正使用Siri

00:50:11.645 --> 00:50:15.749 
使用home鍵 或若你在使用
帶有Hey Siri功能的Siri

00:50:16.817 --> 00:50:19.486 
或者如果你在使用
帶有CarPlay功能的Siri

00:50:20.821 --> 00:50:22.856 
或者作爲一種輔助功能

00:50:24.057 --> 00:50:27.761 
Siri將根據那樣的
上下文對自身調整

00:50:28.061 --> 00:50:31.498 
你可以和Siri進行最佳可能的交互

00:50:33.333 --> 00:50:34.902 
它是相當複雜的任務

00:50:35.202 --> 00:50:38.205 
因爲它涉及識別階段

00:50:40.007 --> 00:50:42.843 
理解域 理解環境

00:50:43.243 --> 00:50:46.146 
這是我們要爲你免費提供的東西

00:50:46.780 --> 00:50:49.816 
當你創建一個SiriKit擴展時

00:50:50.384 --> 00:50:51.752 
我們將提供給你的是

00:50:52.286 --> 00:50:55.222 
一個代表請求的意圖

00:50:55.822 --> 00:50:59.426 
這就是你的擴展將和它交互的方式

00:51:00.294 --> 00:51:05.732  
你也可以提供
你自己的詞彙幫助Siri

00:51:06.233 --> 00:51:09.870  
它可能對於特定應用或用戶

00:51:10.304 --> 00:51:13.240  
因此我們可以再次調整識別

00:51:13.774 --> 00:51:15.909  
和Siri的交互

00:51:17.044 --> 00:51:18.045  
它如此如何工作的？

00:51:18.178 --> 00:51:21.215 
意圖擴展背後的想法是

00:51:22.149 --> 00:51:25.752 
它是一個非UI擴展 將代表

00:51:25.819 --> 00:51:28.155 
Siri和你的應用之間的交互

00:51:29.456 --> 00:51:32.025 
因此 它是基於意圖的概念

00:51:32.492 --> 00:51:34.361 
來自於Siri和響應

00:51:34.661 --> 00:51:36.463 
這裏主要的想法是

00:51:36.830 --> 00:51:39.733 
意圖是域特殊性東西

00:51:40.133 --> 00:51:41.768 
因此你可以有消息域

00:51:42.302 --> 00:51:43.937 
付款域等等

00:51:44.271 --> 00:51:47.374 
對於消息 你有一個意圖清單

00:51:47.708 --> 00:51:51.879 
Siri可以識別它
進行交互併發送

00:51:51.945 --> 00:51:55.682 
至用於...的應用來管理
與Siri的交互

00:51:56.216 --> 00:52:01.154 
這裏的主要目標
對於Siri意圖而言

00:52:01.221 --> 00:52:05.492 
擴展是確保你和Siri
在同一個頁面上

00:52:05.859 --> 00:52:07.594 
當Siri理解一個請求時

00:52:07.961 --> 00:52:11.498 
對於有效請求 我們需要對其確認

00:52:12.533 --> 00:52:15.135  
我們執行這個請求 基本上是流

00:52:15.602 --> 00:52:18.972  
當你使用Siri說事情時 比如

00:52:19.339 --> 00:52:22.910  
告訴 WWDC 談話的Miko
我們需要在會議後見面

00:52:22.976 --> 00:52:26.013  
Siri要在意圖內進行編碼

00:52:26.079 --> 00:52:30.250  
事實上 它是處於消息域中

00:52:30.684 --> 00:52:34.021  
它是同一個消息意圖 這裏有一個收據

00:52:34.454 --> 00:52:37.157  
這是有關你的應用
和我們從你那裏獲得的內容

00:52:39.459 --> 00:52:41.895 
我們爲Siri Kit提供
另一個擴展

00:52:42.362 --> 00:52:44.264 
即意圖UI擴展

00:52:44.865 --> 00:52:46.600 
它實際上是一個可選擴展

00:52:47.201 --> 00:52:51.705 
但通過它你可以
將自己的UI嵌入Siri副本上

00:52:51.872 --> 00:52:55.576 
因此你可以確認它調整到你的內容上

00:52:55.976 --> 00:52:56.944 
這真的很棒

00:52:58.111 --> 00:53:02.182 
關於意圖系統的另一個優點是

00:53:02.916 --> 00:53:05.485 
它不僅和Siri有關

00:53:06.053 --> 00:53:09.156 
它是一種描述請求的方式 當然

00:53:09.223 --> 00:53:12.326 
我們在Siri中使用它
和你的應用溝通

00:53:12.993 --> 00:53:15.796 
但這也是我們和
CallKit集成的方式

00:53:16.096 --> 00:53:20.033 
這是我們如何在地圖上
正確分享擴展的方式

00:53:20.100 --> 00:53:22.336 
這個功能很棒的原因是

00:53:22.803 --> 00:53:26.773 
這是你如何給系統提供

00:53:26.840 --> 00:53:30.277 
關於你的用戶在做什麼的信息的方式

00:53:30.410 --> 00:53:32.312 
例如 在你的消息應用中

00:53:33.046 --> 00:53:36.283 
當然 它和用戶的活動結合起來

00:53:36.683 --> 00:53:38.819 
由此 我們可以說

00:53:38.886 --> 00:53:45.792 
我在使用我的 WWDC 談話應用
發送消息

00:53:46.193 --> 00:53:51.331 
然後在UI聯繫人中
我們要顯示該信息

00:53:51.398 --> 00:53:53.267 
有關此信息自動聯繫

00:53:53.700 --> 00:53:56.270 
當我們有一個行動清單時

00:53:57.437 --> 00:54:02.442 
我們可直接向你顯示你的應用 如果你

00:54:02.509 --> 00:54:05.379 
通過意圖展示該信息

00:54:07.514 --> 00:54:08.415 
在某一點上

00:54:09.950 --> 00:54:12.486 
你的應用講述默認應用

00:54:12.886 --> 00:54:14.755 
在標準聯繫人卡上

00:54:15.289 --> 00:54:16.924 
這真的令人驚歎

00:54:16.990 --> 00:54:20.093 
爲你的應用增加可視性

00:54:22.829 --> 00:54:25.532 
我最後要談談iMessage應用

00:54:26.567 --> 00:54:30.070 
因此 消息真的變成一個平臺

00:54:30.137 --> 00:54:32.873 
我們在這裏有兩個功能

00:54:32.940 --> 00:54:34.875 
一個是貼紙包

00:54:35.475 --> 00:54:38.278 
另一個是消息擴展

00:54:38.345 --> 00:54:42.149 
對於貼紙包 不需要代碼

00:54:42.449 --> 00:54:47.454 
你只需要打包你的靜態或動態圖像

00:54:48.822 --> 00:54:50.924 
你使用Xcode完成它

00:54:50.991 --> 00:54:55.162 
你可以通過消息存儲發佈它

00:54:56.396 --> 00:54:57.764 
你還可以做另外一件事

00:54:58.232 --> 00:55:03.070 
使用iMessage應用
等於使用性的消息擴展

00:55:03.537 --> 00:55:08.108 
你可以用它編寫
完全基於UIKit的擴展

00:55:08.809 --> 00:55:10.844 
你可以做其他事情 例如

00:55:11.411 --> 00:55:15.048 
動態生成貼紙內容

00:55:15.115 --> 00:55:18.719 
你甚至可以使用該擴展中全新的相機

00:55:19.119 --> 00:55:24.024 
你可以調整你的UI
實現緊湊或擴大模式

00:55:24.324 --> 00:55:26.827 
它將成爲live-in消息

00:55:27.094 --> 00:55:29.663 
這是一個極佳的功能
但你可以做得更多

00:55:29.730 --> 00:55:32.699 
你可以自定義泡泡

00:55:33.200 --> 00:55:35.269 
它意味着你的擴展

00:55:35.335 --> 00:55:39.273 
使用的消息架構實際上

00:55:39.339 --> 00:55:44.344 
在和它結合的消息中有一個對話概念

00:55:44.411 --> 00:55:48.448 
與其他用戶的更改關聯

00:55:48.515 --> 00:55:51.385 
我們也全面支持消息擴展

00:55:51.552 --> 00:55:53.420 
在iOS X的模擬器中

00:55:53.487 --> 00:55:55.022 
因此使用非常方便

00:55:55.189 --> 00:55:59.826 
這是一個非常棒的功能
可以讓你和消息結合起來

00:56:01.562 --> 00:56:04.965 
當然你還能用它實現另外一個功能

00:56:05.032 --> 00:56:08.669 
在你的互動泡泡中完全自定義內容

00:56:10.604 --> 00:56:14.074 
我們舉行了兩場會話
介紹iMessage應用

00:56:15.576 --> 00:56:18.412  
信息應用以及貼紙
時間是今天早上

00:56:18.745 --> 00:56:22.282  
a第二場會議重點介紹擴展部件

00:56:22.349 --> 00:56:25.018  
時間是週四下午1:40

00:56:25.385 --> 00:56:28.222 
非常感謝大家 享受 WWDC 大會