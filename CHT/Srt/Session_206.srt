00:00:19.319 --> 00:00:20.153 
tvOS有什麼新內容

00:00:21.922 --> 00:00:23.991 
歡迎來到tvOS有何新內容這一會話

00:00:26.727 --> 00:00:29.396 
我是Hans
我是tvOS團隊中的一名工程師

00:00:31.131 --> 00:00:34.201 
今年我們非常高興
歡迎你

00:00:34.635 --> 00:00:37.538 
參加tvOS第一次的全球開發者大會

00:00:44.011 --> 00:00:47.981 
那麼我想通過對tvOS簡要概述
來作爲今天下午的開始

00:00:49.316 --> 00:00:52.386 
我們會引導大家認識
tvOS 10的一些新功能

00:00:53.320 --> 00:00:56.924 
然後我們將就其中的幾個
深入討論更多細節

00:00:57.457 --> 00:00:59.092 
我們甚至有一個很好的案例示範

00:01:00.561 --> 00:01:01.395 
現在開始

00:01:03.730 --> 00:01:06.600 
僅僅九個月前
我們發佈了新的Apple TV

00:01:07.334 --> 00:01:09.369 
伴隨它還發布了tvOS

00:01:10.571 --> 00:01:15.142 
tvOS是一個現代操作系統
專爲現代硬件所設計

00:01:16.009 --> 00:01:19.680 
而其僅是64位的
沒有32位的運行時間

00:01:20.614 --> 00:01:24.351 
因此它會爲你節省
很多的時間

00:01:25.185 --> 00:01:30.157 
來測試32位兼容性
或爲32位片段進行配置

00:01:32.593 --> 00:01:34.194 
與你的iPhone

00:01:36.563 --> 00:01:38.498 
iPad甚至Mac都不同

00:01:39.366 --> 00:01:42.135 
Apple TV一直連接到
高速網絡

00:01:42.836 --> 00:01:46.039 
這使得tvOS成爲這樣一個理想平臺

00:01:46.306 --> 00:01:51.445 
在那裏你可以卸載一些任務
比如管理你的應用的資源

00:01:52.012 --> 00:01:52.880 
用戶數據

00:01:53.614 --> 00:01:58.051 
甚至是你的應用內容將其放到
某些技術中去 如CloudKit等

00:01:58.819 --> 00:02:00.120 
以及按需資源

00:02:02.256 --> 00:02:04.625 
CloudKit是你

00:02:04.858 --> 00:02:07.861 
在icloud中通往幾乎無限的
存儲空間的界面

00:02:09.263 --> 00:02:12.099 
它爲你的資源提供了一個結構存儲

00:02:13.033 --> 00:02:16.937 
它也爲用戶數據提供了一個公共的
和私人的數據庫

00:02:17.938 --> 00:02:19.940 
正如你在前一會話中所聽到的

00:02:20.407 --> 00:02:24.578 
可以跨iOS Mac OS和
tvOS平臺來將其使用

00:02:25.312 --> 00:02:26.647 
並且也可以被分享

00:02:28.949 --> 00:02:31.351 
並且由於到iCloud認證

00:02:31.952 --> 00:02:33.720 
你再也不必問你的客戶

00:02:34.188 --> 00:02:35.656 
要一個單獨的登錄賬號了

00:02:37.824 --> 00:02:42.896 
即使你的應用碰巧在其他
沒有CloudKit的平臺上運行

00:02:43.297 --> 00:02:44.631 
這也依然成立

00:02:45.766 --> 00:02:49.236 
而通過使用CloudKit JS
以及其網絡服務API

00:02:49.837 --> 00:02:52.339 
你就不必去推出自己的解決方案了

00:02:52.406 --> 00:02:55.209 
而仍然可利用
安全性和效率方面的優勢

00:02:58.378 --> 00:03:02.983 
目前 如果按照傳統做法
客戶不得不下載整個應用

00:03:03.350 --> 00:03:05.219 
這樣才能將其發佈並開始使用

00:03:06.320 --> 00:03:10.023 
而只要應用體積增大
這就成爲一個痛點

00:03:11.692 --> 00:03:15.095 
因爲我們等着下800兆的文件
不是要爲了找樂子的

00:03:17.231 --> 00:03:19.399 
這不僅令用戶沮喪

00:03:19.466 --> 00:03:21.401 
同時對我們開發者來說也是一個挑戰

00:03:21.902 --> 00:03:23.070 
因爲客戶

00:03:23.570 --> 00:03:26.907 
甚至可能在他們能夠嘗試之前
就對我們的應用失去興趣

00:03:29.009 --> 00:03:30.511 
按需資源……

00:03:31.778 --> 00:03:34.615 
利用Apple TV的
一直在線的優勢

00:03:35.716 --> 00:03:38.619 
並提供一種機制
據此你的應用甚至可以

00:03:38.685 --> 00:03:40.921 
在其所有內容被下載之前
就作出發佈

00:03:42.089 --> 00:03:44.958 
這意味着你的客戶
他們可以更快的用上此應用

00:03:46.326 --> 00:03:48.195 
而當應用被下載時

00:03:49.263 --> 00:03:52.132 
該系統可以繼續
下載更多內容

00:03:52.432 --> 00:03:55.035 
所以在需要它們的時候
它們就已經準備好了

00:03:55.736 --> 00:03:57.704 
進一步減少等待時間

00:04:00.674 --> 00:04:05.846 
而且應用的尺寸可以非常大

00:04:05.913 --> 00:04:09.883 
事實上
比傳統上所能同意的大得多

00:04:10.651 --> 00:04:11.885 
讓我們來看看這個

00:04:15.255 --> 00:04:20.093 
每個應用都有一個
可執行資源和基礎資源的主應用包

00:04:21.128 --> 00:04:22.529 
使用ODR時

00:04:22.796 --> 00:04:26.667 
你的主應用包的尺寸
可高達200兆字節

00:04:28.001 --> 00:04:32.206 
你可以向此應用包添加第一組
待下載內容

00:04:32.639 --> 00:04:35.609 
這樣當應用安裝時
它們就已經準備好了

00:04:36.610 --> 00:04:39.646 
例如這可能是
你的遊戲的前三關

00:04:41.481 --> 00:04:44.184 
第一組被稱爲
初始安裝標籤

00:04:45.919 --> 00:04:48.055 
而這可以最多高達兩個千兆字節

00:04:50.190 --> 00:04:51.692 
如果你有更多的內容呢？

00:04:52.292 --> 00:04:55.529 
那麼
你可以指定安裝之後

00:04:56.530 --> 00:04:59.199 
需要立即下載的
額外的資源包

00:05:01.201 --> 00:05:03.403  
而這就被稱作預取標籤

00:05:04.638 --> 00:05:09.109  
預取標籤用於你知道
你會盡快需要的內容

00:05:09.543 --> 00:05:13.013 
但不夠快到足以解釋
對你應用的首次發佈的阻止

00:05:13.213 --> 00:05:15.682 
從而防止你的用戶使用此應用

00:05:18.785 --> 00:05:19.620 
因此 例如

00:05:22.122 --> 00:05:23.357 
如果你的用戶正在玩

00:05:24.958 --> 00:05:26.260 
你的遊戲的第一關

00:05:27.327 --> 00:05:30.364 
該系統將開始下載
第四、五、六關

00:05:31.265 --> 00:05:34.968 
而當用戶過了第三關時
下一關

00:05:35.903 --> 00:05:39.273 
已經下載好
就等着用戶去玩了

00:05:40.407 --> 00:05:44.344 
所以這樣的等待就已經
從用戶被轉移到該系統了

00:05:45.245 --> 00:05:48.682 
而系統不介意等待
但用戶介意

00:05:50.884 --> 00:05:53.387 
預取標籤使用其剩餘允許量時

00:05:55.355 --> 00:05:57.057 
其尺寸可以高達四個千兆字節

00:05:58.091 --> 00:06:02.496 
所以如果你爲初始安裝標籤
用了500兆字節

00:06:03.330 --> 00:06:06.800 
那麼你爲預取標籤
就有3.5千兆字節

00:06:08.602 --> 00:06:12.506 
如果你已經用了
你的初始安裝標籤的兩千兆字節

00:06:12.806 --> 00:06:16.543 
則你自然就爲你的預取標籤
有兩千兆字節

00:06:17.744 --> 00:06:19.913 
如果你沒有初始安裝標籤呢？

00:06:21.615 --> 00:06:24.618 
從數學上來講你的預取標籤
有四千兆字節 但是

00:06:25.853 --> 00:06:28.856 
你可能希望將一些內容
移入初始安裝標籤

00:06:28.922 --> 00:06:30.324 
這樣它們就可被早點使用了

00:06:35.429 --> 00:06:36.496 
類似的

00:06:37.331 --> 00:06:41.168 
在應用被進一步使用時
更多的資源包可以被下載

00:06:42.736 --> 00:06:46.139 
總下載內容
可高達20千兆字節

00:06:46.640 --> 00:06:50.644 
使應用包和可下載內容的總尺寸

00:06:51.078 --> 00:06:53.046 
達到令人驚歎的20.2千兆字節

00:06:58.585 --> 00:07:00.220 
而這不僅只是一個大數字

00:07:00.821 --> 00:07:04.458 
它還是一個客戶感受不到
其沉重和繁瑣的大數字

00:07:04.858 --> 00:07:06.627 
因爲他們可以更早開始

00:07:06.793 --> 00:07:09.897 
而且他們可以繼續使用應用
而沒有多少中斷

00:07:12.132 --> 00:07:16.837 
晶體管是一個很棒的遊戲
也是使用ODR的好例子

00:07:17.838 --> 00:07:20.674 
它的應用包有160兆字節

00:07:21.208 --> 00:07:23.710 
初始安裝標籤有500兆字節

00:07:23.777 --> 00:07:26.880 
所以它能快速下載並安裝

00:07:28.782 --> 00:07:31.985 
但由於900兆字節的
預取標籤

00:07:33.487 --> 00:07:37.357 
玩家就可以不斷被
新而華麗的遊戲關卡所挑戰

00:07:38.358 --> 00:07:40.694 
而幾乎沒有任何中斷

00:07:42.629 --> 00:07:44.631 
但是ODR不只用於遊戲

00:07:46.934 --> 00:07:50.070 
我最喜歡的應用之一是
Earthlapse TV

00:07:51.605 --> 00:07:52.840 
Earthlapse TV

00:07:53.373 --> 00:07:57.344 
推出從國際空間站
得到的時間推移視頻

00:07:58.178 --> 00:08:01.448 
並在你的客廳
創建一個虛擬窗口

00:08:02.983 --> 00:08:07.187 
它擁有超過一千兆字節的
超高品質的內容

00:08:07.654 --> 00:08:11.191 
然而它下載
和啓動都很迅速

00:08:12.159 --> 00:08:15.395 
並且在內容之間跳躍時
幾乎沒有任何等待

00:08:18.198 --> 00:08:19.166 
所以這就是ODR

00:08:20.367 --> 00:08:23.470 
順便提一下
那是從Cupola模塊看到的加拿大

00:08:27.608 --> 00:08:30.110 
現在讓我們來看看
我們如何與電視進行交互

00:08:32.111 --> 00:08:35.015 
我們每天都使用電話
而且我們已經很習慣了

00:08:36.650 --> 00:08:40.587 
但獨特的是
我們的關注和行動都

00:08:41.388 --> 00:08:44.458 
就在我們面前
在觸摸表面上

00:08:46.593 --> 00:08:48.395 
然而當你看電視時

00:08:49.263 --> 00:08:52.866 
我們的注意力在10英尺之外
在房間的另一側

00:08:54.134 --> 00:08:57.804 
而我們的行動在遙控器上
就在我們手中

00:08:58.438 --> 00:09:00.674 
兩者之間
沒有直接的聯繫

00:09:02.910 --> 00:09:06.280 
tvOS提供了一個獨特的機會

00:09:06.613 --> 00:09:09.783 
來使這方面的體驗
更爲直接和相關

00:09:11.451 --> 00:09:13.220 
首先是Siri Remote

00:09:14.154 --> 00:09:15.522 
通過其觸摸表面

00:09:15.956 --> 00:09:20.060 
Siri Remote實現了
一種新的基於集中的交互

00:09:21.028 --> 00:09:23.664 
而其是專爲
這樣的環境所設計的

00:09:24.865 --> 00:09:30.470 
通過在觸摸表面上
按下按鈕和使用手勢

00:09:31.772 --> 00:09:34.641 
用戶可以將焦點
從一個元素移到另一個上

00:09:36.577 --> 00:09:40.681 
停留在特定的一個上
然後點擊來觸發操作

00:09:47.821 --> 00:09:49.857 
爲了配合這一集中交互

00:09:50.123 --> 00:09:53.794 
tvOS也引入了
一種新的視差效果

00:09:55.462 --> 00:09:58.765 
這種視差效果使你感覺到
你的焦點在哪裏

00:09:59.533 --> 00:10:02.503 
也讓你覺得
你和屏幕相連在一起

00:10:04.705 --> 00:10:07.441 
而利用視差效果的
最好的方式

00:10:07.741 --> 00:10:09.877 
是使用分層圖像

00:10:12.813 --> 00:10:15.849 
分層圖像
是爲tvOS所設計的一種圖像類型

00:10:16.817 --> 00:10:19.353 
當元素處於對焦狀態時

00:10:19.720 --> 00:10:21.154 
它會增強深度和活力

00:10:24.391 --> 00:10:26.693 
它最多可以有五層

00:10:27.828 --> 00:10:30.097 
實際上它也是應用圖標所需要的

00:10:33.133 --> 00:10:37.137 
爲了創建新的分層圖像
你可使用Xcode的資源目錄

00:10:38.105 --> 00:10:40.607 
Mac OS的Parallax
Previewer應用

00:10:41.942 --> 00:10:45.145 
以及Photoshop的
Parallax Exporter插件

00:10:45.879 --> 00:10:49.750 
當然所有這些
都可從developer.apple.com下載

00:10:52.686 --> 00:10:57.524 
現在讓我們退一步
看一看主屏幕

00:10:59.092 --> 00:11:02.563 
主屏幕這裏
這個10英尺的體驗被最佳示出

00:11:04.865 --> 00:11:10.470 
第一行應用圖標上面
是所謂的Top Shelf區域

00:11:11.872 --> 00:11:14.975 
而放在第一行的應用
能夠參與其中

00:11:17.811 --> 00:11:21.715 
你的應用可呈現最相關的特性或內容

00:11:21.782 --> 00:11:25.152 
因爲內容的快捷方式
深藏在你的應用的內部

00:11:25.986 --> 00:11:28.021 
所以你的客戶
可以直接跳到它

00:11:28.856 --> 00:11:32.693 
而這可能是
例如你的電影的一張海報

00:11:39.199 --> 00:11:44.037 
音樂專輯封面
橫幅廣告

00:11:44.505 --> 00:11:46.073 
或可讓應用有意義的任何東西

00:11:51.245 --> 00:11:54.915 
Top Shelf是一個把客戶帶回
你的應用的偉大的管道

00:11:54.982 --> 00:11:57.684 
因此我們強烈建議
你利用它

00:11:57.985 --> 00:12:00.954 
而不是僅僅讓它提供一個佔位符圖像

00:12:04.358 --> 00:12:07.528 
現在讓我們再回到
主屏幕

00:12:08.929 --> 00:12:11.632 
主屏幕上是你關心的應用的集合

00:12:12.466 --> 00:12:14.168 
如你在keynote中聽到的

00:12:15.269 --> 00:12:17.271 
我們相信電視的未來是應用

00:12:18.672 --> 00:12:21.942 
這一切都被App Store所實現

00:12:24.111 --> 00:12:28.182 
App Store正如在
iOS上一樣 是你去瀏覽

00:12:28.582 --> 00:12:30.584 
發現和下載應用的地方

00:12:31.952 --> 00:12:34.988 
而且由於它在
iOS和tvOS上都存在

00:12:36.757 --> 00:12:38.659 
所以它支持通用購買

00:12:39.826 --> 00:12:43.063 
所以如果你的客戶
已在iOS上下載了此應用

00:12:43.564 --> 00:12:47.467 
他們就可免費在tvOS上享用此應用
只需按下一個按鈕

00:12:49.937 --> 00:12:53.340 
由於Apple TV的持續連接

00:12:53.674 --> 00:12:57.377 
在tvOS 10中
我們要介紹的是自動下載

00:12:58.378 --> 00:13:00.581 
所以在iOS上被下載的應用

00:13:00.647 --> 00:13:02.816 
將被自動下載到電視裏

00:13:04.818 --> 00:13:05.652 
就那麼簡單

00:13:07.154 --> 00:13:10.290 
這樣會更容易讓你的客戶
來獲取你的應用

00:13:11.758 --> 00:13:13.527 
但是你打算怎麼將其建立呢？

00:13:15.495 --> 00:13:19.600 
tvOS 提供與iOS、
Mac OS和watchOS相同的

00:13:20.634 --> 00:13:23.470 
開發工具和語言

00:13:24.805 --> 00:13:27.441 
還有許多你已經知道的
相同的框架 例如

00:13:27.808 --> 00:13:32.012 
UIKit、Foundation、
Core Animation

00:13:32.079 --> 00:13:34.348 
AVFoundation、
Core Audio

00:13:34.748 --> 00:13:38.585 
等等等等 在tvOS上都可用

00:13:39.486 --> 00:13:43.757 
另外在tvOS 9.2中
我們也把MapKit帶到了電視之中

00:13:45.926 --> 00:13:47.928 
但是這仍然只是整個列表中的一個部分

00:13:47.995 --> 00:13:50.264 
可供你挑選的還有很多

00:13:51.632 --> 00:13:53.800 
例如 如果你正在開發一個遊戲

00:13:54.301 --> 00:13:55.936 
你會很高興知道

00:13:56.003 --> 00:13:58.172 
你所喜愛的
所有遊戲技術

00:13:58.705 --> 00:14:00.908 
在tvOS上都是可用的：

00:14:01.408 --> 00:14:04.811 
Game Center、Game
Controller、GameplayKit

00:14:05.612 --> 00:14:08.682 
Model I/O、MetalKit
Performance Traders

00:14:09.116 --> 00:14:11.852 
SpriteKit
SceneKit還有很多很多

00:14:11.919 --> 00:14:14.154 
要什麼有什麼

00:14:16.890 --> 00:14:21.962 
最後tvOS還引入了
一個全新的高級框架

00:14:22.362 --> 00:14:24.064 
叫做TVMLKit

00:14:25.732 --> 00:14:28.402 
TVMLKit通過爲你處理

00:14:28.468 --> 00:14:30.704 
諸如佈局和焦點管理之類的重活累活

00:14:31.305 --> 00:14:34.107 
來使你可以
相當方便的打造

00:14:34.608 --> 00:14:36.109 
以內容爲中心的應用

00:14:37.578 --> 00:14:41.715 
而它通過爲佈局使用預定義模板

00:14:42.549 --> 00:14:44.685 
應用邏輯使用
JavaScript來操作

00:14:45.686 --> 00:14:48.488 
它用於快速迭代和部署 真的很棒

00:14:49.089 --> 00:14:51.558 
而且當然
它也被調整過來得到強大的性能

00:14:53.193 --> 00:14:57.598 
事實上Apple自己的一些應用
也是用TVML

00:14:59.199 --> 00:15:00.200 
那個電影應用所打造的

00:15:02.402 --> 00:15:05.739 
的確App Store本身就是
用TVMLKit打造的

00:15:08.141 --> 00:15:11.612 
而所有在iOS上幫你微調
和優化你的應用

00:15:11.979 --> 00:15:14.882 
的開發工具

00:15:15.115 --> 00:15:19.786 
例如Unit Testing
App Analytics和TestFlight

00:15:20.487 --> 00:15:22.489 
在tvOS上也都是可用的

00:15:27.361 --> 00:15:31.732 
今年tvOS繼續提供
令人興奮的新功能

00:15:32.499 --> 00:15:34.001 
如同你在主題演講中聽到一樣

00:15:35.002 --> 00:15:37.171 
我們正在把HomeKit引入電視

00:15:37.304 --> 00:15:39.806 
這樣就能從電視上
控制與HomeKit相兼容的

00:15:39.873 --> 00:15:40.707 
配件了

00:15:42.442 --> 00:15:44.111 
我們也正在引入PhotoKit

00:15:44.545 --> 00:15:47.781 
這樣你的應用就可以利用
你客戶的iCloud照片庫了

00:15:50.784 --> 00:15:53.587 
使用SpriteKit
甚至變得更簡單了

00:15:54.421 --> 00:15:57.624 
多虧了來自焦點引擎的
本地支持

00:15:58.792 --> 00:16:02.396 
你的運動和導航
會感覺更自然

00:16:03.664 --> 00:16:06.200 
並與OS其他部分完全集成
而這是免費的

00:16:07.868 --> 00:16:09.803 
說起運動和導航

00:16:11.138 --> 00:16:14.341 
玩遊戲的一個組成部分
是你如何控制它們

00:16:17.010 --> 00:16:20.180 
你可以把Siri Remote當做
一個輕量級的遊戲控制器

00:16:20.781 --> 00:16:26.053 
豎着拿
並使用像刷卡之類的手勢

00:16:26.587 --> 00:16:28.555 
以及例如 點擊跳躍

00:16:29.957 --> 00:16:30.858 
來控制遊戲

00:16:31.992 --> 00:16:36.029 
如果你的標題要求
稍微複雜的輸入

00:16:39.066 --> 00:16:41.235 
你可以把它作爲
僅有基本的D-pads

00:16:41.301 --> 00:16:44.304 
和兩按鈕控制的
小型遊戲平板電腦橫着拿

00:16:46.440 --> 00:16:50.444 
如果你的遊戲標題要求
甚至更爲複雜的輸入

00:16:51.078 --> 00:16:53.113 
你可以使用擴展遊戲控制器

00:16:53.180 --> 00:16:55.215 
和你在
國情諮文演說中所聽到的一樣

00:16:55.282 --> 00:16:56.216 
最多可以用4個

00:16:57.885 --> 00:16:59.720 
你現在有一個選項

00:17:00.254 --> 00:17:02.990 
來要求使用
基於MFI的遊戲控制器

00:17:03.857 --> 00:17:06.093 
而app store將會在必要時
根據情況

00:17:06.159 --> 00:17:07.094 
向用戶彈出提示

00:17:08.896 --> 00:17:13.032 
我們也在將ReplayKit移入電視

00:17:14.468 --> 00:17:15.636 
使用ReplayKit

00:17:16.502 --> 00:17:19.940 
玩家可以在本地設備上
錄製自己的gameplay

00:17:21.008 --> 00:17:23.877 
並通過AirDrop與朋友們分享

00:17:24.912 --> 00:17:25.945 
但是這還不是全部

00:17:27.114 --> 00:17:30.083 
遊戲玩家現可在
諸如Mobcrush的服務上

00:17:30.517 --> 00:17:32.319 
實時廣播其gameplay

00:17:35.689 --> 00:17:38.792 
在tvOS 10中我們也將和
iOS 10一道引入

00:17:41.662 --> 00:17:45.132 
一個全新的
UserNotification.framework

00:17:46.233 --> 00:17:47.067 
還有

00:17:48.368 --> 00:17:51.405 
ExternalAccessory.framework
這個用於

00:17:51.672 --> 00:17:52.673 
來自iOS的藍牙配件

00:17:54.174 --> 00:17:57.678 
我們也在推出一個全新的
Apple TV遙控應用

00:17:58.879 --> 00:18:02.549 
最後用戶可以設置
其系統外觀

00:18:02.616 --> 00:18:04.151 
的明暗程度

00:18:06.687 --> 00:18:09.156 
而當你實際打造應用時

00:18:10.324 --> 00:18:11.425 
你會有很多選擇

00:18:13.427 --> 00:18:15.929 
你可能需要把UIKit
用作你的基準

00:18:16.330 --> 00:18:19.233 
並利用所有可用的框架

00:18:19.733 --> 00:18:22.836 
如果你已經習慣
全天然框架

00:18:25.105 --> 00:18:26.740 
或若你有一個現有的iOS應用

00:18:27.608 --> 00:18:30.410 
我們本週會有一些偉大的會話
請你不要錯過

00:18:30.978 --> 00:18:33.547  
包括在tvOS上掌握UIKit

00:18:35.282 --> 00:18:38.785  
在那裏你可以把你的UIKit應用
提升一個層次

00:18:40.120 --> 00:18:42.122 
而就在tvOS上的焦點交互

00:18:43.590 --> 00:18:45.058 
我們將回顧焦點系統

00:18:45.759 --> 00:18:47.928 
討論一些tvOS 10上的新功能

00:18:48.328 --> 00:18:49.963 
還要討論SpriteKit

00:18:54.234 --> 00:18:56.737 
我們還建議你看看TVMLKit

00:18:58.505 --> 00:19:01.909 
TVMLKit是一個令人難以置信的
豐富的框架

00:19:03.377 --> 00:19:08.182 
若你的技能已經
包括JavaScript和XML

00:19:09.750 --> 00:19:11.785 
那麼就真的很容易使用TVMLKit

00:19:11.852 --> 00:19:14.855 
來迅速開發和部署以內容爲中心的應用

00:19:15.989 --> 00:19:18.825 
而由於TVMLKit是打造於
UIKit之上的

00:19:19.326 --> 00:19:22.829 
你甚至可以混合進UIKit中
來做進一步的定製

00:19:26.366 --> 00:19:29.670  
而這些會話側重
從TVMLKit取得最大獲益

00:19:29.736 --> 00:19:32.072  
所以我們強烈建議你來看看

00:19:33.473 --> 00:19:35.509  
如果你是一個遊戲開發者
那麼當然

00:19:35.909 --> 00:19:39.646 
所有打包成GameKit
的遊戲技術

00:19:39.713 --> 00:19:40.981 
很可能也是你的選擇

00:19:46.587 --> 00:19:48.889  
下面我要加速了

00:19:49.489 --> 00:19:52.926 
我們要深入研究
tvOS 10中的一些新特性

00:19:53.293 --> 00:19:56.864 
爲此 現在有請
我的同事Marshall Huss

00:20:05.072 --> 00:20:07.941 
下午好我是Marshall
我是一名tvOS工程師

00:20:08.509 --> 00:20:10.777 
今天我們要深入研究如何應用

00:20:10.844 --> 00:20:14.381 
tvOS 10中的某些新特性

00:20:15.916 --> 00:20:19.052 
在主題演講中聽到新的
Apple TV Remote應用

00:20:20.087 --> 00:20:22.756 
我們來看看如何使用通知

00:20:22.956 --> 00:20:25.392 
當你有新內容時
如何通知用戶

00:20:26.827 --> 00:20:29.329 
最後我們要看看如何在你的應用中

00:20:29.396 --> 00:20:31.331 
實現明/暗外觀調整

00:20:34.067 --> 00:20:37.938 
因此新的Apple TV Remote應用
和Siri Remote的工作模式一模一樣

00:20:38.005 --> 00:20:41.275 
所以不需要做任何更改
就能讓你的應用運行起來

00:20:42.209 --> 00:20:45.212 
它還包括
一個新的遊戲控制器佈局

00:20:45.646 --> 00:20:47.447 
這樣用戶可以用它來打遊戲

00:20:50.083 --> 00:20:52.352 
現在如果用戶正在使用此應用

00:20:52.419 --> 00:20:55.522 
你的應用針對遊戲控制器框架做了連接

00:20:55.589 --> 00:20:58.225 
則他們會在導航欄得到一個新圖標

00:20:58.292 --> 00:20:59.326 
看起來是這樣的

00:21:00.060 --> 00:21:03.463 
當該用戶點擊該圖標時
他們面前會呈現

00:21:03.530 --> 00:21:06.633 
一個遊戲控制器佈局
可通過旋轉電話來使用

00:21:08.202 --> 00:21:11.805  
要了解如何最大限度利用
遊戲控制器框架

00:21:11.872 --> 00:21:13.974  
我們本週晚些時候
會有一個會話

00:21:15.008 --> 00:21:18.879  
種子今天就可用
請去下載和嘗試

00:21:21.048 --> 00:21:23.951 
接下來
我們要看看通知

00:21:24.218 --> 00:21:26.186 
以及當你有新的內容可用時

00:21:26.253 --> 00:21:28.055 
如何使用它們來通知用戶

00:21:28.689 --> 00:21:30.791 
你可能會習慣的
一個操作此事的好方法

00:21:30.958 --> 00:21:32.759 
是把你的應用圖標做成徽章

00:21:32.826 --> 00:21:35.128 
我們已經在tvOS 10中
增加了這種支持

00:21:36.396 --> 00:21:40.067 
現在就iOS你得向用戶要求權限

00:21:40.133 --> 00:21:42.069 
來把應用圖標做成徽章

00:21:42.202 --> 00:21:44.438 
但在tvOS上
這看起來有點不同

00:21:44.638 --> 00:21:46.974 
他們會得到
全屏模式警報

00:21:47.608 --> 00:21:48.709 
所以一定要確保

00:21:48.775 --> 00:21:51.111 
你在適當的時間
申請許可

00:21:51.178 --> 00:21:54.181 
否則這可能是
用戶使用應用的第一次體驗

00:21:55.849 --> 00:21:58.886 
我們還添加了
對於遠程通知的支持

00:21:58.952 --> 00:22:01.688 
這樣你就可以使用
Apple的推送通知服務

00:22:01.755 --> 00:22:03.323 
來發送遠程通知了

00:22:04.057 --> 00:22:06.660 
我們支持兩種通知類型

00:22:06.793 --> 00:22:11.999 
那些都是我們剛纔看到的徽章
而且也會有內容提供

00:22:13.400 --> 00:22:15.869 
現在如果你的應用在後臺

00:22:15.936 --> 00:22:19.072 
那麼這些有內容可用的應用
將不會叫醒你的應用

00:22:19.139 --> 00:22:21.275 
就像你可能在iOS中所習慣的那樣

00:22:21.675 --> 00:22:23.443 
讓我們來看看這是什麼意思

00:22:24.044 --> 00:22:26.513 
比方說你的用戶
有新的內容可用

00:22:26.580 --> 00:22:27.848 
好的通知方式是發送一個

00:22:27.915 --> 00:22:31.785 
有內容的推送通知
以及一個數值爲1的徽章

00:22:32.286 --> 00:22:35.689 
如果應用未打開
tvOS將保留此通知

00:22:36.190 --> 00:22:37.624 
並更新用戶的徽章

00:22:38.091 --> 00:22:40.227 
現在用戶獲得更多的可用內容

00:22:40.294 --> 00:22:43.864 
所以你可以發送另一個推送通知
其將更新徽章圖標

00:22:45.632 --> 00:22:48.368 
tvOS將保留
最新的通知

00:22:48.602 --> 00:22:50.170 
並等待應用回來

00:22:50.237 --> 00:22:52.639 
最後
你會得到更多的可用內容

00:22:52.706 --> 00:22:54.308 
而你也可以再次更新徽章

00:22:54.641 --> 00:22:55.642 
當用戶準備好之後

00:22:55.709 --> 00:22:58.045 
回到應用並看看他們有什麼新內容時

00:22:58.345 --> 00:22:59.379 
他們可以打開應用

00:22:59.813 --> 00:23:02.816 
而我們提供上次通知
這樣你就可以到你的服務器

00:23:02.883 --> 00:23:05.319 
並也許獲得
任何可用的新內容

00:23:07.721 --> 00:23:08.956 
爲了支持這一點

00:23:09.022 --> 00:23:11.592 
你必須使用
新用戶通知框架

00:23:11.992 --> 00:23:15.562 
如果你之前已經
在iOS中應用過通知

00:23:15.629 --> 00:23:17.831 
你可能習慣了使用UIKit API

00:23:18.332 --> 00:23:20.734 
到現在爲止那些在tvOS中
是被禁止的

00:23:20.801 --> 00:23:22.102 
而它們將被保持禁止

00:23:22.169 --> 00:23:25.005 
所以爲了全力支持本地通知
和[聽不清]的通知

00:23:25.072 --> 00:23:28.408 
你將需要使用
新用戶通知框架

00:23:28.809 --> 00:23:30.611 
我們本週會有關於你可以如何學習

00:23:30.677 --> 00:23:33.413 
在你的應用中
完全將其應用的會話

00:23:35.148 --> 00:23:37.317 
而終於在今天
我們要去看一看

00:23:37.384 --> 00:23:39.987 
tvOS上的
新的明暗外觀

00:23:41.188 --> 00:23:44.491 
我們看到這是
給用戶的一個全系統的設置

00:23:45.025 --> 00:23:47.594 
用戶將確定其何時
想在明暗之間

00:23:47.661 --> 00:23:48.762 
做出改變

00:23:49.296 --> 00:23:50.631 
現在要考慮的事情

00:23:50.697 --> 00:23:53.133 
是用戶可能在不同的環境
有一定的空間

00:23:53.200 --> 00:23:55.135 
它可以是在一個電影廳中
那裏很暗

00:23:55.202 --> 00:23:57.771 
它可能是在起居室中
裏面有很多窗戶

00:23:57.838 --> 00:24:00.440 
或者用戶可以
根據一天中的時間改變它

00:24:00.941 --> 00:24:03.577 
所以爲了尊重用戶的選擇
爲其提供最好的

00:24:03.644 --> 00:24:05.679 
用戶體驗非常重要

00:24:07.581 --> 00:24:10.150 
爲了充分支持這一點
我們已經

00:24:10.450 --> 00:24:12.152 
在UITraitCollection上添加了新的API

00:24:14.221 --> 00:24:17.391 
你必須真正選擇加入
黑暗的外觀

00:24:20.294 --> 00:24:22.129 
如果你不選擇加入

00:24:22.196 --> 00:24:25.365 
你的應用將繼續留在亮處
就像在tvOS 9中所做的一樣

00:24:28.502 --> 00:24:30.571 
讓我們一起來看看
如何才能讓你的應用

00:24:30.637 --> 00:24:33.173 
採用新的明
暗系統的外觀

00:24:34.942 --> 00:24:38.045 
第一步是添加一把新鑰匙
到你的Info.plist

00:24:38.111 --> 00:24:41.014 
我們添加了一個叫做
UIUserInterfaceStyle

00:24:41.481 --> 00:24:44.718 
如果設置了明值
它就總是解析爲明

00:24:44.985 --> 00:24:47.821 
如果設置了暗值
你的應用就總是解析爲暗

00:24:48.088 --> 00:24:50.791 
或者如果你使用我們所推薦的 自動的

00:24:50.858 --> 00:24:53.060 
它尊重用戶和系統設定

00:24:53.126 --> 00:24:55.162 
並通過你的應用進行傳播

00:24:56.230 --> 00:24:59.900 
如果你用Xcode 8爲
tvOS製作新項目

00:24:59.967 --> 00:25:02.002 
這實際上將默認爲自動

00:25:03.403 --> 00:25:05.772 
有新API和
TraitCollection

00:25:05.839 --> 00:25:08.876 
我們增加了一個新屬性
稱爲UserInterfaceStyle

00:25:09.543 --> 00:25:12.613 
這可能有不確定的值
可能是

00:25:12.679 --> 00:25:15.282 
如果你的視圖尚未被插入視圖層次結構

00:25:15.449 --> 00:25:17.284 
或者它可以或明或暗

00:25:17.351 --> 00:25:20.654 
具體取決於系統設置
和你的應用支持什麼

00:25:24.258 --> 00:25:27.327 
爲了支持開發者將其採用

00:25:27.394 --> 00:25:29.162 
我們增加了開發工具支持

00:25:29.363 --> 00:25:31.565 
到界面生成器和模擬器

00:25:32.399 --> 00:25:34.301 
如果你使用標準的UIKit控制

00:25:34.368 --> 00:25:36.870 
這些實際上會爲你自動改變

00:25:37.337 --> 00:25:39.740 
如果你習慣使用外觀代理

00:25:39.806 --> 00:25:42.809 
那麼重構一點點
然後你就可以指定顏色了

00:25:42.876 --> 00:25:44.545 
這取決於TraitCollection

00:25:44.945 --> 00:25:46.647 
如果你想要最大程度的控制

00:25:46.713 --> 00:25:48.749 
你可以應用
TraitCollectionDidChange

00:25:48.815 --> 00:25:50.651 
在你的視圖或視圖控制裏

00:25:53.287 --> 00:25:56.690 
現在在界面生成器
你可以指定顏色

00:25:56.757 --> 00:25:58.792 
就在檢查者中規定明暗

00:26:00.827 --> 00:26:03.697 
我們向Storyboard
增加了一個明暗預覽

00:26:03.764 --> 00:26:06.033 
這樣你就可以迅速開發
和設計你的應用了

00:26:06.567 --> 00:26:09.069 
我們還向模擬器增加了一個快捷方式
從而能

00:26:09.136 --> 00:26:11.839 
這些系統外觀之間
快速切換

00:26:15.209 --> 00:26:18.745 
我提過UIKit控制
會將其自動更新

00:26:19.146 --> 00:26:21.248 
而我們在自己的系統應用中
對其大量應用

00:26:21.481 --> 00:26:22.749 
我們看到某些視圖

00:26:22.816 --> 00:26:25.619 
比如這個鍵盤
或文本字段或分段控制

00:26:25.686 --> 00:26:29.256 
會自動更新風格
以在電視壁紙上顯示最好的效果

00:26:29.590 --> 00:26:32.092 
若你使用表格視圖
像我們在設置應用中一樣

00:26:32.359 --> 00:26:34.862 
它會自動調整其背景顏色

00:26:34.928 --> 00:26:37.297 
文本顏色
以及所有的參數來使其看起來好看

00:26:37.364 --> 00:26:39.867 
如果你正在使用系統內置鍵盤

00:26:39.967 --> 00:26:41.468 
那麼那些也會自行調整

00:26:43.670 --> 00:26:46.640 
如果你正在嘗試自定義你的文字

00:26:46.707 --> 00:26:49.576 
我們已添加支持到
UILabel和UITextView

00:26:49.643 --> 00:26:52.212 
這樣它們也就會自動改變其顏色

00:26:52.946 --> 00:26:56.016 
爲輕巧美觀
文字顏色設置爲黑色

00:26:56.483 --> 00:26:58.752 
外觀爲暗時
它將被設定爲白色

00:26:59.052 --> 00:27:01.622 
但有需要注意的是
如果你設置過文本顏色

00:27:01.688 --> 00:27:04.057 
則你將自行負責
爲此兩種模式

00:27:04.124 --> 00:27:05.692 
更新該顏色

00:27:08.061 --> 00:27:11.298 
我們還添加了
兩個新的模糊樣式到API

00:27:12.366 --> 00:27:15.235 
你現在可以使用
UIBlurEffectStyleRegular

00:27:15.302 --> 00:27:17.371 
或UIBlurEffectStyleProminent了

00:27:17.771 --> 00:27:19.573 
我們稱這些爲自動樣式

00:27:19.640 --> 00:27:22.976 
他們實際上將基於系統設置內容來調整

00:27:23.043 --> 00:27:24.912 
有效的模糊效果的風格

00:27:25.345 --> 00:27:27.981 
所以如果你使用
UIBlurEffectStyleRegular

00:27:28.048 --> 00:27:31.318 
而系統是淺色 則其將使用
UIBlurEffectStyle.light

00:27:31.485 --> 00:27:34.087 
如果使用常規和深色
你將使用深色

00:27:34.154 --> 00:27:37.591 
如果你使用突出 其將使用
.extraLight和.extraDark

00:27:38.292 --> 00:27:40.327 
.extraDark被放在
稍後種子中

00:27:44.198 --> 00:27:47.334 
現在你可以用外觀代理
定製你的應用了

00:27:47.401 --> 00:27:49.837 
所以你可能有這樣的代碼

00:27:50.170 --> 00:27:52.806 
它設置一個按鈕的標題顏色爲紅色

00:27:53.407 --> 00:27:55.008 
重新調整一點點

00:27:55.075 --> 00:27:57.544 
就可爲明暗兩色都提供
TraitCollection

00:27:57.611 --> 00:27:59.780 
而使用外觀代理API

00:27:59.847 --> 00:28:03.050 
我們可以爲那些具體的
TraitCollections 設置一種顏色

00:28:03.116 --> 00:28:06.687 
現在這種情況下我們的按鈕
將在淺色外觀下使用紅色

00:28:06.954 --> 00:28:08.856 
將在深色外觀下使用藍色

00:28:10.624 --> 00:28:13.527 
最後如果你想要
在這些變化中有最多的控制

00:28:13.594 --> 00:28:15.229 
你可以直接回復他們

00:28:16.096 --> 00:28:18.298 
使用TraitCollectionDidChange
你就能在

00:28:18.365 --> 00:28:20.067 
在你的視圖或視圖控制器中做到

00:28:20.167 --> 00:28:22.870 
讓我們來看一個對此應用會是什麼樣子

00:28:23.136 --> 00:28:26.640 
首先我們在視圖控制器中覆寫了
TraitCollectionDidChange

00:28:28.175 --> 00:28:30.711 
然後我們檢查以確保
UITraitCollection

00:28:30.777 --> 00:28:33.180 
對新的
用戶界面的樣式屬性

00:28:33.247 --> 00:28:36.683 
這使我們能夠在tvOS上
爲我們的用戶建立這個功能

00:28:36.750 --> 00:28:39.119 
但依然支持
可能在使用tvOS 9的用戶

00:28:41.021 --> 00:28:41.855 
下一個

00:28:41.922 --> 00:28:44.691 
我們檢查用戶界面風格
實際改變了

00:28:44.758 --> 00:28:47.294 
否則我們可能會做
比我們所需要的更多的工作

00:28:48.529 --> 00:28:51.865 
最後我們可以檢查
用戶界面風格

00:28:51.932 --> 00:28:53.800 
並相應地更新我們的控制

00:28:56.570 --> 00:28:58.505 
現在對此的一項高級用途是

00:28:58.572 --> 00:29:00.641 
你是否想覆寫
TraitCollections

00:29:00.707 --> 00:29:03.310 
可能是這種情況
如果你希望你的應用

00:29:03.377 --> 00:29:06.180 
支持自動風格
但也可以在你的應用中

00:29:06.246 --> 00:29:07.681 
有某些視圖或視圖控制器

00:29:07.781 --> 00:29:10.617 
而你想要指定樣式本身

00:29:11.385 --> 00:29:12.953 
我們將此用於我們的系統應用

00:29:13.187 --> 00:29:18.959 
我們的產品頁面和電影
而電視節目實際使用

00:29:19.026 --> 00:29:20.894 
其藝術作品
所基於各種元素的樣子

00:29:21.094 --> 00:29:23.030 
在這種情況下我們有淺色藝術作品

00:29:23.096 --> 00:29:25.532 
所以我們就按鈕樣式使用黑色文本

00:29:25.599 --> 00:29:27.000 
使顏色鮮活

00:29:27.634 --> 00:29:31.104 
我們也有深色網頁
我們在深色風格上

00:29:31.171 --> 00:29:33.440 
用白色文本 而按鈕也被相應更新

00:29:35.676 --> 00:29:37.544 
爲了覆寫這些
TraitCollections

00:29:37.611 --> 00:29:39.847 
我們使用API
其已經被添加進iOS 8

00:29:39.913 --> 00:29:43.183 
而這是用於ChildViewController
的setOverrideTraitCollection

00:29:43.517 --> 00:29:46.386 
爲了將其使用
我們可以用小包裝

00:29:47.187 --> 00:29:49.356 
讓我們看這樣一個例子
可能可能看起來像

00:29:50.490 --> 00:29:51.625 
首先我們創建...

00:29:54.061 --> 00:29:55.863 
一個新的類
AppearanceViewController

00:29:55.929 --> 00:29:58.131 
然後我們從UIViewController處繼承

00:29:58.866 --> 00:30:00.868 
我們可添加一個屬性
它有這樣的一種風格

00:30:00.934 --> 00:30:03.770 
即我們可能會想設置
ChildViewControllers

00:30:03.837 --> 00:30:07.441 
然後我們可以添加另一個屬性
在這裏我們

00:30:07.508 --> 00:30:09.610 
實際設置視圖控制器

00:30:13.814 --> 00:30:17.518 
然後我們爲ChildViewController
設置了OverrideTraitCollection

00:30:17.584 --> 00:30:19.553 
用我們指定的樣式

00:30:19.920 --> 00:30:23.223  
最後我們使用標準
ChildViewController包含

00:30:24.691 --> 00:30:26.493 
現在如果你想使用這個類

00:30:27.094 --> 00:30:29.830 
我們可以提供
AppearanceViewController

00:30:30.130 --> 00:30:34.735 
指定我們想要的風格
無論基於我們希望的何種屬性

00:30:35.502 --> 00:30:37.204 
我們可以設置ViewController

00:30:37.838 --> 00:30:39.640 
然後我們將其轉讓給用戶

00:30:42.409 --> 00:30:44.011 
接下來有請Brandon

00:30:44.077 --> 00:30:46.847 
來向你展示怎麼樣
來爲tvOS 10而更新你的應用

00:31:03.597 --> 00:31:04.665 
謝謝 Marshall

00:31:04.965 --> 00:31:06.433 
大家好 我是Brandon

00:31:06.500 --> 00:31:10.070 
非常激動向你們展示
我們一直在努力做的tvOS應用

00:31:10.337 --> 00:31:12.139 
它被稱爲世界壁爐

00:31:12.239 --> 00:31:14.875 
壁爐愛好者們
到目前爲止很喜愛它

00:31:15.209 --> 00:31:16.076 
讓我們來看看

00:31:19.246 --> 00:31:22.015 
這個應用允許你把
來自世界各地的壁爐樣式

00:31:22.082 --> 00:31:23.550 
直接帶到你的客廳

00:31:23.817 --> 00:31:26.220 
讓我們來看看
佛蒙特州的壁爐是什麼模樣

00:31:28.655 --> 00:31:30.657 
啊 這裏感覺很舒適 不是嗎？

00:31:31.258 --> 00:31:32.292 
我認爲這很棒

00:31:34.895 --> 00:31:37.764 
現在儘管模擬器外觀
將被設置爲深色

00:31:37.831 --> 00:31:39.833 
我們的應用使用的是默認的淺色外觀

00:31:39.900 --> 00:31:41.935 
因爲我們沒有指定偏好

00:31:42.269 --> 00:31:44.371 
我很高興能採用
新的深色外觀

00:31:44.438 --> 00:31:45.906 
讓我們現在就去更新應用

00:31:49.042 --> 00:31:50.344 
我們需要做的第一件事情

00:31:50.410 --> 00:31:54.014 
是將此新用戶界面風格密鑰
添加到我們的Info.plist

00:32:01.688 --> 00:32:04.157 
我們會把它的值設爲自動
並重新運行我們的應用

00:32:06.326 --> 00:32:08.662 
我們選擇自動
因爲我們希望讓我們應用的外觀

00:32:08.729 --> 00:32:10.731 
匹配用戶的外觀設置

00:32:16.303 --> 00:32:18.472 
好的
目前爲止看起來很不錯

00:32:19.006 --> 00:32:22.643 
所以我們所有的標準UIKit視圖
都已被自動更新

00:32:22.910 --> 00:32:25.312 
因此在這種情況下標籤欄
和壁紙

00:32:25.379 --> 00:32:26.713 
現在就有了一個深色的外觀

00:32:27.447 --> 00:32:28.282 
對於你們某些來說

00:32:28.348 --> 00:32:30.884 
這可能就是你
更新你的應用所需要做的一切

00:32:30.951 --> 00:32:33.120 
但是我們的設計師已經決定

00:32:33.187 --> 00:32:36.290 
他們希望深色外觀
有一個不同的標誌顏色

00:32:36.957 --> 00:32:39.526 
而在集合視圖樣式中的
背景顏色

00:32:39.593 --> 00:32:41.161 
有那麼一點點突兀

00:32:41.361 --> 00:32:42.863 
那麼就讓我們來做這些更改

00:32:44.231 --> 00:32:46.133 
讓我們去我們的main.storyboard

00:32:47.935 --> 00:32:51.004 
而我們需要做的第一件事

00:32:51.071 --> 00:32:53.340 
因爲這是一個現有項目

00:32:53.407 --> 00:32:57.544 
我們需要在Xcode 8中啓動
性狀變體功能

00:32:58.078 --> 00:33:01.048 
因此要做到這一點
我們會去文件檢查器中

00:33:01.849 --> 00:33:04.451 
點擊Use Trait
Variations 複選框

00:33:05.018 --> 00:33:08.956 
當我們這樣做時會得到警告
即性狀變化僅僅兼容

00:33:09.323 --> 00:33:10.624 
Xcode 8或更高版本

00:33:10.691 --> 00:33:12.392 
這很好 所以我們將繼續

00:33:13.994 --> 00:33:17.264 
現在我們要點擊我們的標誌
去Attributes Inspector

00:33:17.431 --> 00:33:20.434 
在一些屬性旁邊
有這些新的加號按鈕

00:33:20.501 --> 00:33:21.869 
所以我們會將其點擊

00:33:21.935 --> 00:33:25.038 
併爲我們的標誌圖像
添加一個深色接口

00:33:25.105 --> 00:33:26.406 
我們會將其指定爲黃色

00:33:28.208 --> 00:33:29.843 
現在Xcode 8一很酷功能

00:33:29.910 --> 00:33:32.546 
可在Interface
Builder的外觀間

00:33:32.613 --> 00:33:34.414 
直接切換

00:33:34.781 --> 00:33:37.217 
要做到這一點我們就下到
我們的故事板的底部

00:33:37.284 --> 00:33:39.853  
並點擊View As:
Apple TV（淺色風格）.

00:33:40.587 --> 00:33:41.989  
我們在這裏有兩個選擇

00:33:42.222 --> 00:33:43.957  
淺色和深色

00:33:45.392 --> 00:33:48.795 
當我們點擊深色時
一切都將自動更新

00:33:48.862 --> 00:33:50.297 
我們的標誌變了顏色

00:33:50.364 --> 00:33:54.501 
而且標籤欄和牆紙
也都已經改變了顏色

00:33:55.836 --> 00:33:58.972 
看起來很不錯
現在來更新我們的背景顏色

00:34:00.741 --> 00:34:02.042 
在AppDelegate中

00:34:02.242 --> 00:34:05.879 
我們使用外觀代理
來設置我們CollectionViewCell的

00:34:05.946 --> 00:34:07.347 
背景顏色

00:34:07.948 --> 00:34:11.318 
現在我們要背景顏色
根據具體特性變化

00:34:11.385 --> 00:34:13.954 
因此我們需要使用
具體特性的外觀代理

00:34:14.521 --> 00:34:18.458 
所以首先我們要
通過創建一個UITraitCollection來開始

00:34:18.525 --> 00:34:20.994 
因此用淺色的UserInterfaceStyle

00:34:21.594 --> 00:34:24.931 
來讓淺色等於
UITraitCollection

00:34:27.134 --> 00:34:29.536 
然後我們將更換
我們的通用外觀代理

00:34:29.670 --> 00:34:31.705 
用的是具體特性的外觀代理

00:34:32.039 --> 00:34:36.043  
因此對於TraitCollection我們會用
剛剛創建的TraitCollection

00:34:37.978 --> 00:34:41.315 
就深色我們會同樣操作
並指定一個不同的背景顏色

00:34:42.216 --> 00:34:44.351 
現在我們無法在
Interface Builder中查看

00:34:44.418 --> 00:34:45.418 
我們重新運行應用

00:34:46.652 --> 00:34:49.156 
我們增加了一個鍵盤快捷鍵
這樣你就可以切換

00:34:49.456 --> 00:34:53.427 
在模擬器中的
淺色與深色外觀之間快速切換

00:34:54.862 --> 00:34:56.830 
要做到這一點
點擊Command Shift D

00:34:57.164 --> 00:34:58.665 
來切換淺色外觀

00:34:58.966 --> 00:35:02.002 
然後Command Shift D
來切換回深色外觀

00:35:02.769 --> 00:35:04.404 
到目前爲止看起來都相當不錯

00:35:04.471 --> 00:35:08.141 
但我注意到 現在我們已經改變了

00:35:08.208 --> 00:35:10.143 
我們的背景顏色
卻很難再看到圖標了

00:35:10.544 --> 00:35:12.045 
所以讓我們把這個也更新一下

00:35:13.981 --> 00:35:16.683 
我們會去我們定製的
收藏ViewCell子類別

00:35:17.217 --> 00:35:21.021 
而之前我們在awakeFromNib
功能中設置着色顏色

00:35:21.855 --> 00:35:25.459 
既然我們要在我們的TraitCollection改變時
讓着色顏色改變

00:35:25.526 --> 00:35:28.695 
我們將覆寫
TraitCollectionDidChange功能

00:35:30.764 --> 00:35:34.168 
我們將使用與我們的淺色界面風格
相同的的顏色

00:35:34.668 --> 00:35:37.337 
而爲我們的深色
我們將實際使用淺灰色

00:35:38.672 --> 00:35:42.409 
現在TraitCollectionDidChange
將在每次

00:35:42.476 --> 00:35:45.179 
你的視圖被添加到
一個視圖層次時被調用

00:35:45.245 --> 00:35:47.481 
我們在這裏刪除我們的初始化代碼

00:35:47.848 --> 00:35:51.351 
但爲了向下兼容
我們只是把它留在那裏

00:35:52.753 --> 00:35:54.621 
讓我們運行應用
看看現在效果如何

00:36:02.095 --> 00:36:03.730 
好的 看起來好多了

00:36:04.498 --> 00:36:07.401 
讓我們切換到淺色外觀
確保一切都沒有改變

00:36:07.467 --> 00:36:08.735 
看起來仍然不錯

00:36:09.102 --> 00:36:11.905 
現在回到深色外觀
看起來真棒

00:36:12.439 --> 00:36:15.776 
我們剛剛更新了我們的應用
來採用新的深色外觀

00:36:16.109 --> 00:36:18.345 
我們已經爲tvOS 10做好準備了

00:36:18.812 --> 00:36:21.014 
現在有請Hans
回到舞臺

00:36:27.521 --> 00:36:28.522 
謝謝你Brandon

00:36:29.223 --> 00:36:32.025 
非常棒的案例示範

00:36:34.828 --> 00:36:36.063 
所以和你所見的一樣

00:36:36.129 --> 00:36:38.732 
採用淺色和深色外觀
是相當容易的

00:36:39.266 --> 00:36:43.403 
我們希望大家都可以
在你的應用中很快採用它

00:36:47.274 --> 00:36:51.311 
今天下午我們已經看到了
tvOS中的許多功能的一小部分

00:36:52.546 --> 00:36:56.617 
tvOS提供你已知的相同的工具
服務和框架

00:36:57.084 --> 00:36:59.987 
所以它真的
很容易上手

00:37:02.022 --> 00:37:03.624 
而基於焦點的交互

00:37:04.291 --> 00:37:07.895 
結合了視差效果的分層圖像
和Top Shelf

00:37:08.462 --> 00:37:10.631 
它們一起共同創造了

00:37:10.898 --> 00:37:13.400 
一個直接和相連的10英尺體驗

00:37:15.369 --> 00:37:18.672 
而有了Universal Purchase
和Auto Download

00:37:19.106 --> 00:37:21.909 
你的客戶將能夠從未如此密切的
享受使用你的應用

00:37:23.877 --> 00:37:27.314 
我們也推出了一個全新的
Apple TV Remote應用

00:37:27.381 --> 00:37:29.583 
而且它已經被做成了一個種子
就請下載

00:37:29.983 --> 00:37:31.218 
並用它測試你的應用

00:37:33.387 --> 00:37:36.623 
而有了ReplayKit和
SpriteKit支持

00:37:36.690 --> 00:37:38.091 
且直接來自聚焦引擎

00:37:39.726 --> 00:37:42.229 
遊戲體驗更棒了

00:37:44.097 --> 00:37:49.002 
最後用戶可以根據其喜好來設置
自己的系統外觀

00:37:50.637 --> 00:37:53.307 
我們希望
你會就所見所聞而高興

00:37:54.341 --> 00:37:55.742 
通過本週許多很棒的會話

00:37:55.976 --> 00:37:58.378 
你還可以學到更多

00:37:59.746 --> 00:38:04.585 
今年早些時候的 Apple
TV Tech Talk視頻

00:38:05.018 --> 00:38:07.754 
就指導你完成基礎知識學習
非常有用

00:38:09.089 --> 00:38:12.059 
也可從developer.apple.com下載

00:38:12.693 --> 00:38:16.864 
當然所有這些信息
都被放在會話鏈接

00:38:18.198 --> 00:38:19.032 
最後

00:38:19.466 --> 00:38:23.270 
等不及要看到
你們爲電視的未來所創作的產品了

00:38:24.338 --> 00:38:27.174 
非常感謝大家的光臨
請享受其餘會議