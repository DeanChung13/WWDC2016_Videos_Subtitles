00:00:19.620 --> 00:00:25.993
Apple File System介紹
下一代存儲的快照

00:00:26.927 --> 00:00:28.428
好了 歡迎各位

00:00:28.495 --> 00:00:32.198
我叫Eric Tamura
旁邊是Dominic Giampaolo

00:00:32.266 --> 00:00:35.135
我們會向各位講一下
Apple File System

00:00:42.743 --> 00:00:47.181
這是關於今天展示內容的
一些流程圖

00:00:47.447 --> 00:00:50.484
我會稍微講一下
介紹與動機

00:00:50.584 --> 00:00:52.152
爲什麼我們決定去構建它

00:00:52.553 --> 00:00:55.689
我們添加了一些新功能
作爲Apple File System的一部分

00:00:55.756 --> 00:00:57.791
我們簡短地展示這些新功能

00:00:57.858 --> 00:00:59.026
然後在結尾我們會

00:00:59.092 --> 00:01:02.396
談談你可以在應用中
使用的一些新API

00:01:04.431 --> 00:01:06.133
我們開始吧

00:01:06.533 --> 00:01:08.302
就像Sebastian提過的

00:01:08.368 --> 00:01:12.072
Apple File System可用在
macOS Sierra的 WWDC 版本

00:01:12.139 --> 00:01:13.807
你們昨天都得到了

00:01:14.174 --> 00:01:17.244
並且它會作爲
開發者預覽版技術

00:01:17.311 --> 00:01:21.682
於秋季macOS Sierra的
發佈之後 在其上面使用

00:01:22.950 --> 00:01:24.818
什麼是Apple File System？

00:01:25.085 --> 00:01:28.989
它是我們下一代文件系統
是我們爲Apple產品所構建的

00:01:29.356 --> 00:01:30.657
你可能會關心這個

00:01:30.724 --> 00:01:36.029
因爲它會在watchOS
iOS tvOS和macOS上運行

00:01:36.630 --> 00:01:38.232
對於預期的受衆

00:01:38.298 --> 00:01:41.668
我們預計你們要麼
在這些平臺上是初來乍到

00:01:41.735 --> 00:01:43.170
或者是一位長期開發者

00:01:43.604 --> 00:01:45.072
但我們打算涵蓋

00:01:45.138 --> 00:01:48.609
新文件系統中
所有高級功能的足夠細節

00:01:48.675 --> 00:01:49.977
這樣你能跟得上

00:01:51.011 --> 00:01:54.314
該產品的一個特點是
我們想從

00:01:54.381 --> 00:01:57.150
從Apple Watch
一路擴展到Mac Pro

00:01:58.452 --> 00:02:01.555
我們也想利用閃存和SSD存儲

00:02:01.622 --> 00:02:04.725
因爲幾乎我們所有的產品
都使用SSD

00:02:06.159 --> 00:02:09.496
最後 其構建有加密
作爲主要功能

00:02:09.562 --> 00:02:13.133
從最開始到現在
我們將這個想法變爲現實

00:02:14.501 --> 00:02:17.070
你可能會想那HFS+怎麼辦

00:02:17.137 --> 00:02:21.708
我們目前把HFS+
作爲主文件系統發佈

00:02:22.843 --> 00:02:25.612
但其最初設計
到目前幾乎有30年之久

00:02:25.679 --> 00:02:28.815
你們當中有多少人希望
我們再發布30年的HFS+？

00:02:30.384 --> 00:02:34.688
很好 所以HFS+設計於

00:02:34.755 --> 00:02:37.658
軟盤和硬盤代表
最新技術水平的時代

00:02:38.392 --> 00:02:39.626
自此世界改變了很多

00:02:39.693 --> 00:02:44.698
現在我們使用SSD 而且
其它下一代存儲技術也不斷髮展

00:02:45.699 --> 00:02:48.936
HFS+的數據結構
相對來說也是單線程的

00:02:49.002 --> 00:02:53.807
所以B-trees要依靠
大分塊來訪問或改變它們

00:02:56.610 --> 00:02:59.079
並且數據結構也相對死板

00:02:59.146 --> 00:03:03.317
我們的意思是 像是
HFS+中的文件記錄或目錄記錄

00:03:03.383 --> 00:03:06.687
差不多相當於其他
文件系統的索引節點

00:03:06.753 --> 00:03:09.990
是固定的 這是爲了添加
新的字段來擴展文件系統

00:03:10.057 --> 00:03:12.359
加入新的功能
我們必須付出代價

00:03:12.426 --> 00:03:15.229
那就是向後不兼容的卷格式改變

00:03:15.295 --> 00:03:18.398
我們的意思是
如果我們給HFS+添加新功能

00:03:18.465 --> 00:03:22.936
回到10.5版本 然後
附加那個相同的文件系統

00:03:23.136 --> 00:03:24.238
這會發生什麼？

00:03:24.671 --> 00:03:27.107
所以如果我們關心向後兼容

00:03:27.174 --> 00:03:30.644
以及向前兼容
我們開始考慮

00:03:30.711 --> 00:03:34.515
也許打造完全
嶄新的東西是有意義的

00:03:35.849 --> 00:03:37.784
所以我們考慮出新的東西

00:03:38.719 --> 00:03:43.257
我們想要的是爲Apple產品
專門設計和優化的東西

00:03:43.524 --> 00:03:46.960
其他文件系統良好地
執行着其他目的

00:03:47.394 --> 00:03:53.500
尤其 文件管理器或者企業級別
存儲服務器有很多的功能

00:03:53.567 --> 00:03:55.636
對於Apple產品沒有太大意義

00:03:55.702 --> 00:03:58.939
我們通常在所有產品上
使用單個存儲設備

00:03:59.139 --> 00:04:02.042
而且我們的規模廣泛

00:04:02.109 --> 00:04:07.347
在Apple Watch上
你有更少的DRAM和存儲空間

00:04:07.414 --> 00:04:10.050
與Mac Pro相比
Mac Pro有數十GB的

00:04:10.117 --> 00:04:12.953
潛在DRAM
以及數TB的存儲空間

00:04:13.086 --> 00:04:15.389
所以我們想要
靈活動態的東西

00:04:15.489 --> 00:04:18.492
而且在那些平臺上運行

00:04:20.894 --> 00:04:22.162
我們想打造的其它東西

00:04:22.229 --> 00:04:24.965
我們想新加並增強安全功能

00:04:25.032 --> 00:04:29.269
我們現在已經在iOS上
發佈了HFS+的一個版本

00:04:29.469 --> 00:04:31.572
使用每文件加密

00:04:31.638 --> 00:04:34.341
所以在存儲空間上
每個文件都是不同加密的

00:04:34.408 --> 00:04:37.110
不同於這個文件系統
上的其它任何文件

00:04:37.845 --> 00:04:39.413
我們想更進一步

00:04:39.479 --> 00:04:43.183
我們會在稍後的展示中
深入談談這些功能

00:04:44.384 --> 00:04:47.821
最後 我們想加入一些
新的通用文件系統功能

00:04:48.455 --> 00:04:51.925
是應大家要求
而且我們認爲是十分重要的

00:04:51.992 --> 00:04:54.161
對於我們平臺的未來

00:04:55.429 --> 00:04:56.997
在我們講這些新功能之前

00:04:57.064 --> 00:05:00.133
我想給大家簡短介紹一下

00:05:00.200 --> 00:05:02.769
Apple存儲軟件的樣子

00:05:03.170 --> 00:05:07.808
在文件系統和存儲方面
我們會談論HFS+

00:05:08.375 --> 00:05:12.112
但我們涉及的範圍
不止是HFS+

00:05:12.179 --> 00:05:14.381
這裏實際上有很多輔助技術

00:05:14.448 --> 00:05:16.617
構成了我們的存儲軟件

00:05:17.518 --> 00:05:18.952
在一開始
我們有HFS標準

00:05:19.019 --> 00:05:21.421
這幾乎
至今有30年之久

00:05:21.655 --> 00:05:25.492
若干年後
我們添加了HFS+

00:05:25.659 --> 00:05:27.261
不過我們加入了死機防護

00:05:27.327 --> 00:05:30.664
我們還加入了
區分大小寫變體的日誌

00:05:32.065 --> 00:05:35.502
我們還增加了CoreStorage
這給了我們全盤加密

00:05:35.569 --> 00:05:39.206
以及Fusion Drive
這將SSD的速度與

00:05:39.273 --> 00:05:41.441
硬盤的容量相組合

00:05:42.075 --> 00:05:44.745
我們不能忘記
所有針對iOS的變體

00:05:44.811 --> 00:05:49.383
我們有針對iOS的HFS+變體
以及支持

00:05:49.449 --> 00:05:51.885
剛纔談到的每文件加密的變體

00:05:52.653 --> 00:05:55.355
所以我們的目的是
所有這些技術

00:05:55.422 --> 00:05:59.560
都被一樣東西所取代
那就是Apple File System

00:06:02.329 --> 00:06:05.966
我來稍微談談Apple File
System中的一些新功能

00:06:09.136 --> 00:06:13.207
這個簡明的視圖
囊括了我們現有內容

00:06:13.273 --> 00:06:15.876
我們有一些
改進的文件系統底層技術

00:06:16.176 --> 00:06:21.381
HFS兼容性 空間分享
克隆文件和目錄

00:06:21.448 --> 00:06:24.418
快照和快照恢復

00:06:24.852 --> 00:06:27.354
一項我們稱之爲
目錄大小快速調整的功能

00:06:27.688 --> 00:06:30.324
原子級安全存儲基元
以及加密

00:06:30.390 --> 00:06:31.859
你不必把它們都記下來

00:06:31.925 --> 00:06:35.529
我們會在下面的幻燈片中
進行深入講解的

00:06:37.664 --> 00:06:40.667
首先來談談
一些改進的底層技術

00:06:40.734 --> 00:06:42.936
改進的文件系統底層技術

00:06:43.003 --> 00:06:45.839
首先閃存和SSD優化

00:06:46.540 --> 00:06:49.877
在我們所有的設備上
在我們所有的iOS設備上

00:06:49.943 --> 00:06:52.779
而且很多Mac上
是內置有SSD的

00:06:52.946 --> 00:06:55.949
我們想盡可能地
對固態硬盤進行優化

00:06:56.950 --> 00:06:59.987
其還有死機防護功能
APFS或Apple File System

00:07:00.053 --> 00:07:02.923
採用嶄新的
寫入時複製元數據方案

00:07:02.990 --> 00:07:07.661
所以每個元數據寫入都
寫入到穩態存儲上的新位置

00:07:07.828 --> 00:07:10.898
我們將其與
事務處理子系統相組合

00:07:10.964 --> 00:07:13.967
這保證瞭如果斷電
如果機器死機

00:07:14.034 --> 00:07:16.770
或糟糕的事情發生
你會看到一致視圖

00:07:16.837 --> 00:07:20.807
關於之前的磁盤內容
或者什麼變更都看不到

00:07:23.477 --> 00:07:25.879
我們有現代64位原生字段

00:07:25.946 --> 00:07:29.049
所以索引節點號
擴展成了64位

00:07:29.316 --> 00:07:32.486
我們有時間戳現在也是64位

00:07:32.553 --> 00:07:34.988
我們支持納秒時間戳粒度

00:07:35.255 --> 00:07:38.692
我們也支持Sparks Files
在Apple File System上是首次

00:07:39.893 --> 00:07:43.830
所有指向磁盤上
分塊實際位置的

00:07:43.897 --> 00:07:47.100
文件和目錄記錄
也擴展成了64位

00:07:48.368 --> 00:07:51.471
我們的數據結構也是可擴展的
而且允許未來擴展

00:07:51.772 --> 00:07:54.374
所以我們討論
HFS+的一件事是

00:07:54.441 --> 00:07:57.244
其數據結構相對死板

00:07:57.711 --> 00:07:59.913
在APFS或Apple
File System上

00:08:00.347 --> 00:08:04.718
代表核心索引節點的
數據結構現在是靈活的

00:08:05.018 --> 00:08:07.921
所以字段是可選的
或我們可能尚未將其創造出來

00:08:07.988 --> 00:08:10.757
所以我們在過程中
可能選擇添加的新字段

00:08:11.124 --> 00:08:13.427
會被正確識別成不支持

00:08:13.493 --> 00:08:16.763
或是我不清楚
你是否將那個存儲

00:08:16.830 --> 00:08:20.200
附加到當前版本的
macOS Sierra

00:08:20.667 --> 00:08:22.469
這樣我們可以添加新功能

00:08:22.536 --> 00:08:26.006
不需要擔心
會破壞掉向後兼容

00:08:26.573 --> 00:08:28.775
這還允許我們
擁有可選字段

00:08:28.842 --> 00:08:32.578
在一些系統上
單是文件的存在

00:08:32.645 --> 00:08:34.982
就足夠傳遞出一些信息

00:08:35.349 --> 00:08:38.619
如果你有0字節的文件
你不一定需要

00:08:38.684 --> 00:08:41.121
所有機器指向
哪個分塊在磁盤上

00:08:41.188 --> 00:08:43.857
因爲它們不需要
所以這些字段是可選的

00:08:45.592 --> 00:08:48.262
這也優化於Apple
Software生態系統

00:08:48.328 --> 00:08:52.165
我們想添加功能
並優化API

00:08:52.232 --> 00:08:55.569
這對我們平臺的
向前發展極其重要

00:08:58.639 --> 00:09:00.607
我們也有低延遲設計

00:09:00.674 --> 00:09:04.945
在文件系統中 延遲
通常是延遲與吞吐量之間的折衷

00:09:05.012 --> 00:09:08.081
我們選擇傾向延遲這一邊

00:09:08.549 --> 00:09:10.584
這麼做是因爲
我們想讓你的應用

00:09:10.651 --> 00:09:15.489
當用戶在桌面上點擊應用
或在手機上按下應用時

00:09:15.556 --> 00:09:17.624
你想讓應用快速出現
響應迅速

00:09:17.691 --> 00:09:19.426
而且有非常明快的動畫

00:09:19.760 --> 00:09:21.828
這個的原因是
當你進入文件系統

00:09:21.895 --> 00:09:25.933
我們想確保
你會盡快得到你想要的回答

00:09:27.501 --> 00:09:30.771
最後我們有原生加密支持
內置於系統內部

00:09:31.138 --> 00:09:34.575
我們提過了 在HFS+上
使用的是每文件加密

00:09:34.641 --> 00:09:37.244
不過它們是通過
擴展屬性存儲在磁盤上的

00:09:37.578 --> 00:09:40.981
在Apple File System上並非如此
它們現在就如頭等公民一般

00:09:41.048 --> 00:09:44.184
是文件系統內部的一級對象

00:09:45.819 --> 00:09:47.421
這就是底層技術的略微介紹

00:09:47.721 --> 00:09:48.956
HFS兼容性

00:09:49.022 --> 00:09:52.326
如果你們的應用
在HFS+上運行良好

00:09:52.659 --> 00:09:54.828
我們打算讓它們繼續運行

00:09:54.895 --> 00:09:57.865
不需要你那邊
進行任何更改

00:09:58.265 --> 00:10:02.236
Apple File System會支持
並替換HFS+的功能

00:10:02.302 --> 00:10:03.303
這裏有個星號

00:10:03.370 --> 00:10:06.874
因爲有三個功能
我們不會繼續支持

00:10:07.207 --> 00:10:10.811
一個是交換數據
另一個是Search FS

00:10:10.878 --> 00:10:14.781
然後第三個是
“時間機器”的目錄硬鏈接

00:10:15.749 --> 00:10:21.388
不過其他剩下的API和行爲
都會得到支持 和HFS+一樣

00:10:23.056 --> 00:10:24.958
現在我想稍微講講
空間分享

00:10:25.025 --> 00:10:28.428
這是Apple File System上
新添加的一項功能

00:10:29.196 --> 00:10:32.099
我快速調查一下
在座的有多少人

00:10:32.165 --> 00:10:35.669
有Mac或者在Mac上
使用一個以上的分區？

00:10:36.870 --> 00:10:41.842
非常好 我們也是
在內部我們做的一件事

00:10:41.909 --> 00:10:45.279
是我們想讓開發版本的OS
在一個分區上

00:10:45.345 --> 00:10:48.615
我們想讓穩定發佈版本
在另一個分區上

00:10:48.815 --> 00:10:50.851
或你可能選擇將主目錄放在一個分區上

00:10:50.918 --> 00:10:54.154
其他你不在意的不同數據
放在另一個上面

00:10:54.621 --> 00:10:57.891
不過我們得知了一件事
通過分析

00:10:57.958 --> 00:10:59.960
來自用戶選擇性輸入的
數據收集

00:11:00.027 --> 00:11:02.429
以及向Apple設備
報告的統計數據

00:11:02.496 --> 00:11:07.167
大多數終端用戶不這樣做
他們只有一個分區

00:11:07.734 --> 00:11:10.137
他們不做的原因是這很困難

00:11:10.370 --> 00:11:13.040
你必須清楚知道
如何給磁盤佈局

00:11:13.106 --> 00:11:16.777
在你設置的時候
而且更換它是比較昂貴的

00:11:17.211 --> 00:11:19.847
此外 一個分區上的空閒空間
如你所知

00:11:19.913 --> 00:11:23.650
不會轉換成
另一分區上的可用空閒空間

00:11:24.151 --> 00:11:27.254
所以我們使用名爲
空間分享的功能來解決該問題

00:11:27.654 --> 00:11:28.889
我們看看這個例子

00:11:28.956 --> 00:11:32.159
我們會在流程中
說明這項功能

00:11:32.226 --> 00:11:35.362
假設你在下載
最新最棒的貓咪視頻

00:11:35.429 --> 00:11:38.498
從朋友那裏得來的
在網絡上用AirDrop下載

00:11:39.266 --> 00:11:42.402
假設文件變大
越來越大

00:11:42.469 --> 00:11:45.973
事實上
大到你的空間都被佔滿了

00:11:46.039 --> 00:11:48.008
在你運行的那個分區上

00:11:48.509 --> 00:11:50.244
這種情況下
你做不了多少事情

00:11:50.310 --> 00:11:51.545
若空間佔滿
那就是佔滿了

00:11:51.979 --> 00:11:55.916
你可以做的一件事是
之後馬上完全銷燬

00:11:55.983 --> 00:11:58.652
那個分區
然後擴張分區1

00:11:58.719 --> 00:11:59.786
我們來看看

00:12:00.053 --> 00:12:04.758
我們可以銷燬分區2
分區1擴張

00:12:04.825 --> 00:12:08.562
現在你有足夠的空間
來繼續下載貓咪視頻了

00:12:09.763 --> 00:12:12.999
但這也很不靈活
而且會帶來一些問題

00:12:13.066 --> 00:12:16.570
如果你下載的文件不在分區1上

00:12:16.637 --> 00:12:19.072
而實際上是在分區0

00:12:19.673 --> 00:12:21.942
這種情況下
你會下載文件

00:12:22.009 --> 00:12:26.246
越來越大
就算你有空閒空間

00:12:26.313 --> 00:12:29.383
或者願意銷燬分區2上的內容

00:12:29.550 --> 00:12:33.687
我們可以銷燬它
不過這樣分區0不會擴張

00:12:33.820 --> 00:12:35.956
因爲它並不靠近任何我們剛纔

00:12:36.023 --> 00:12:37.391
騰出來的空閒空間

00:12:37.524 --> 00:12:40.727
所以我們認爲這是可以
使用空間分享解決的問題

00:12:41.128 --> 00:12:43.764
在Apple File System中
我們想出了這一基本概念

00:12:43.830 --> 00:12:46.033
我們稱其爲容器
很合適的名字

00:12:46.099 --> 00:12:49.736
因爲它包含了卷或單個文件系統

00:12:50.571 --> 00:12:53.607
在這個實例中
Apple File System的容器

00:12:53.674 --> 00:12:55.609
代表了最低級別的功能

00:12:55.676 --> 00:12:58.579
這個封裝了我們的塊分配器

00:12:58.645 --> 00:13:00.981
以及我們的死機防護子系統

00:13:01.715 --> 00:13:04.718
假如說我們有分區0
在分區中佔有一定

00:13:04.785 --> 00:13:07.921
數量的空閒空間

00:13:08.989 --> 00:13:11.925
卷可以擴張或縮小

00:13:12.860 --> 00:13:15.429
但在所有這些情況下
空閒空間會動態地調整成

00:13:15.495 --> 00:13:18.565
在你進行請求時
可用的大小

00:13:18.932 --> 00:13:21.335
還可在容器中
創建一個以上的卷

00:13:21.401 --> 00:13:23.570
這會逐漸佔用更多空間

00:13:24.104 --> 00:13:26.807
如果你想在這個時候

00:13:26.874 --> 00:13:28.375
擴張卷0
你就能做到

00:13:28.442 --> 00:13:31.812
如果你詢問
系統中還剩多少空間可用

00:13:31.879 --> 00:13:35.015
綠色長方形底部的區域就是

00:13:35.249 --> 00:13:36.250
開發者們 要注意

00:13:36.316 --> 00:13:38.452
這個東西稍微不同於

00:13:38.519 --> 00:13:40.988
你之前計算空閒空間的方法

00:13:41.054 --> 00:13:44.491
如果你使用一些範例
例如使用總共存儲大小

00:13:44.558 --> 00:13:47.027
減去已用空間
來得出空閒空間

00:13:47.094 --> 00:13:50.030
這不會再起作用了
因爲容器上的

00:13:50.097 --> 00:13:52.999
其他卷
也在參與空間分享

00:13:53.433 --> 00:13:58.438
此外 你也沒有必要
將所有已用空間加起來

00:14:00.140 --> 00:14:02.142
接下來 我請Dominic上臺

00:14:02.209 --> 00:14:05.045
它會給大家講講
克隆文件和目錄

00:14:10.918 --> 00:14:13.353
嗨 我叫Dominic
我將講解一些

00:14:13.420 --> 00:14:16.156
我們在APFS中有的
其他高級功能

00:14:16.657 --> 00:14:19.793
首先 我們來談談
克隆文件和目錄

00:14:19.860 --> 00:14:23.096
這裏我們有一個文件
TOP_SECRET_APFS.key

00:14:23.397 --> 00:14:24.831
這在Eric的主目錄中

00:14:24.898 --> 00:14:27.234
它引用了兩個數據快

00:14:27.467 --> 00:14:30.504
現在如果Eric
想做這次展示的檔案

00:14:30.737 --> 00:14:33.373
它在這一時刻中存在着
他可以複製數據

00:14:33.440 --> 00:14:36.143
通過全部讀取
然後再寫出來

00:14:36.410 --> 00:14:41.582
這很明顯會消耗CPU
電力以及磁盤空間使用

00:14:41.682 --> 00:14:44.585
相反 在APFS上
你可以克隆文件

00:14:44.751 --> 00:14:47.721
通過克隆文件
你複製了數據的引用

00:14:47.788 --> 00:14:49.389
而不是實際數據

00:14:49.456 --> 00:14:53.493
所以很明顯會更快
而且如果是大文件

00:14:53.594 --> 00:14:55.629
你不會使用兩倍的空間

00:14:55.696 --> 00:14:57.631
你使用的是
大小完全一樣的空間

00:14:57.698 --> 00:15:02.035
外加用於數據額外引用
少量遞增空間

00:15:02.336 --> 00:15:04.805
克隆在文件系統中能保證

00:15:04.872 --> 00:15:08.575
如果在原件或克隆
上進行修改

00:15:08.742 --> 00:15:11.545
文件系統會將
那個數據寫入新的位置

00:15:11.612 --> 00:15:13.647
所以克隆原封不動

00:15:14.815 --> 00:15:16.850
所以這一點要着重記住

00:15:16.917 --> 00:15:20.787
當你有克隆時
你在克隆的時候

00:15:20.854 --> 00:15:22.289
你沒在使用任何額外空間

00:15:22.356 --> 00:15:26.660
隨着你繼續進行修改
你會開始使用越來越多的空間

00:15:27.895 --> 00:15:31.465
此外 因爲APFS
iOS和macOS

00:15:31.532 --> 00:15:34.735
支持應用程序捆綁包中的文檔

00:15:34.801 --> 00:15:38.739
APFS還會允許你克隆
整個目錄層級

00:15:38.805 --> 00:15:40.607
文檔捆綁包是一個目錄

00:15:40.674 --> 00:15:43.076
其內部包含着一套文件

00:15:43.143 --> 00:15:46.113
APFS可以原子級別地克隆它

00:15:47.114 --> 00:15:49.183
接下來我們談談快照

00:15:49.716 --> 00:15:53.520
這裏我們有文件系統的
另一個代表 其中有兩個文件

00:15:53.587 --> 00:15:55.856
BikeRacing和
CoffeeOrigins

00:15:55.989 --> 00:15:59.660
BikeRacing有兩個數據塊
CoffeeOrigins是一個

00:15:59.860 --> 00:16:03.597
如果我們捕獲文件系統的快照
我們現在有一個分離的

00:16:03.664 --> 00:16:07.568
可獨立掛載的
只讀的文件系統副本

00:16:07.634 --> 00:16:12.806
這代表在捕獲快照的那一時刻
文件系統中的數據

00:16:12.940 --> 00:16:16.910
跟克隆很相似 如果在
活動的文件系統中進行寫入

00:16:16.977 --> 00:16:19.646
文件系統會將
那個數據放入新的位置

00:16:19.713 --> 00:16:21.915
保留快照的完整性

00:16:22.850 --> 00:16:26.887
同樣的 如果我們刪除
CoffeeOrigins.key

00:16:26.954 --> 00:16:30.991
嘗試清空一些空間
文件系統無法回收那些數據塊

00:16:31.058 --> 00:16:33.927
因爲如你所見
快照的文件系統

00:16:33.994 --> 00:16:35.896
繼續引用這那些數據塊

00:16:36.029 --> 00:16:37.631
這是一個很重要的考慮

00:16:37.698 --> 00:16:40.434
開發者在快照上工作時需要留意

00:16:40.501 --> 00:16:43.971
因爲當一個文件被刪除
如果它存在於

00:16:44.037 --> 00:16:46.840
快照捕獲的時刻
那數據塊就無法回收

00:16:46.907 --> 00:16:49.710
所以快照可以致使你
使用所有的磁盤空間

00:16:49.776 --> 00:16:52.913
如果你不定期回收它們

00:16:53.580 --> 00:16:56.316
我們預計開發者
可能會將快照

00:16:56.383 --> 00:16:59.486
用於獲取穩定只讀的數據副本

00:16:59.553 --> 00:17:02.856
將其用於備份
不過我們也想知道來自

00:17:02.923 --> 00:17:05.791
開發者的其他反饋
關於快照的其他可能用途

00:17:05.858 --> 00:17:08.228
所以請在12:30
到實驗室和我們見面

00:17:08.694 --> 00:17:11.031
讓我們知道
你會如何使用快照

00:17:12.833 --> 00:17:14.902
現在我們談談
快照恢復

00:17:14.968 --> 00:17:17.069
這是APFS支持的
另一項功能

00:17:17.137 --> 00:17:19.306
我們有相同的文件系統狀態

00:17:19.373 --> 00:17:22.009
不過我們決定
不要這樣

00:17:22.075 --> 00:17:25.412
我們想恢復
這基本上是全局撤銷

00:17:25.479 --> 00:17:28.248
我們想回到之前捕獲這個快照

00:17:28.315 --> 00:17:30.651
那一時刻的文件系統

00:17:30.951 --> 00:17:35.088
你可以標記文件系統
恢復到快照狀態

00:17:35.155 --> 00:17:36.657
下一次掛載的時候

00:17:36.990 --> 00:17:42.496
文件系統會返回到
捕獲這個快照的那一時刻

00:17:42.563 --> 00:17:45.732
之後允許你繼續
從那時開始進行更改

00:17:45.799 --> 00:17:48.836
你能看到
CoffeeOrigins.key回來了

00:17:48.902 --> 00:17:51.972
而且在其他文件上
做出的更改也被丟棄了

00:17:52.039 --> 00:17:54.041
快照會繼續存在

00:17:54.107 --> 00:17:56.844
而且你可以無限次數進行恢復

00:17:59.146 --> 00:18:01.982
好了 我們來談談
目錄大小快速調整

00:18:02.249 --> 00:18:03.750
這項功能回答了一個問題

00:18:03.817 --> 00:18:06.553
那就是目錄層級
會使用多少的空間

00:18:06.620 --> 00:18:09.690
應用程序會經常
需要計算這個大小

00:18:09.756 --> 00:18:13.327
用於操作大小調整
給用戶提供進程

00:18:13.393 --> 00:18:16.363
這樣做的一個明顯方式
是打開目錄層級

00:18:16.430 --> 00:18:18.665
遞歸性地迭代所有的內容

00:18:18.732 --> 00:18:22.269
然後查看所有項目的大小
加在一起

00:18:22.703 --> 00:18:26.473
當然 用戶會非常樂意
更快一點得知那個答案

00:18:26.540 --> 00:18:27.741
在下一張幻燈片上

00:18:27.808 --> 00:18:30.477
如果你把注意力
集中在屏幕的左邊

00:18:30.544 --> 00:18:34.615
當Get Info面板顯示出來
你會看到上面寫着 計算大小

00:18:36.817 --> 00:18:39.586
幾秒鐘之後
就會填充上大小

00:18:39.653 --> 00:18:41.522
這是我們想提升的地方

00:18:42.089 --> 00:18:44.358
文件系統可以跟蹤它

00:18:44.458 --> 00:18:47.227
很明顯 你可以保存
目錄層級的大小

00:18:47.294 --> 00:18:50.998
外加目錄本身
不過這有一個主要問題

00:18:51.231 --> 00:18:55.302
如果安全地在鏈上更新
父目錄以及父目錄的上級？

00:18:55.769 --> 00:18:58.438
我們深入到了文件系統的內部

00:18:58.505 --> 00:19:02.309
不過當你在修改時
鎖定了子目錄

00:19:02.376 --> 00:19:05.946
你無法再鎖定父目錄
應爲這會違反鎖定順序

00:19:06.113 --> 00:19:09.149
文件系統總是會
從父目錄向子目錄鎖定

00:19:09.216 --> 00:19:10.918
從來不是從子目錄到父目錄

00:19:10.984 --> 00:19:14.021
如果你反着來做
就會出現死鎖

00:19:14.855 --> 00:19:17.724
而APFS繞過了這個問題

00:19:17.958 --> 00:19:20.327
如果問題是將
大小和目錄一起保存

00:19:20.394 --> 00:19:22.396
那我們將大小保存到別的地方

00:19:22.796 --> 00:19:24.698
所以通過分隔保存大小

00:19:24.765 --> 00:19:27.568
我們可以使用
原子級操作來將大小更新在

00:19:27.634 --> 00:19:30.704
由文件系統
所維護的單獨記錄中

00:19:30.904 --> 00:19:33.473
而且不會違反任何鎖定順序

00:19:34.041 --> 00:19:37.678
額外的大小記錄
會帶來少量增量成本

00:19:37.744 --> 00:19:40.848
不過這基本與IO一起
可忽略不計

00:19:43.016 --> 00:19:46.420
好了 接下來我們要談談
原子級安全存儲基元

00:19:46.687 --> 00:19:48.822
第一個例子
只是一個基本文件

00:19:48.889 --> 00:19:52.659
這是當今安全存儲
怎樣在普通文件上起作用的

00:19:52.893 --> 00:19:55.128
這裏我有
MakeMoneyFast.key

00:19:55.462 --> 00:19:57.231
我想出了一些
聰明絕頂的新方案

00:19:57.297 --> 00:19:58.699
能快速賺錢

00:19:58.799 --> 00:20:00.901
當應用程序保存那個數據時

00:20:00.968 --> 00:20:04.071
它會被寫入邊下的
一個臨時位置

00:20:04.304 --> 00:20:07.107
當應用程序得知一切都寫好

00:20:07.174 --> 00:20:11.111
並安全存在磁盤上
它會請求文件系統進行重命名

00:20:11.278 --> 00:20:14.047
文件重命名
一直都是原子級的

00:20:14.214 --> 00:20:16.783
文件系統保證
要麼完全發生

00:20:16.850 --> 00:20:19.353
而且是安全的
要麼根本不發生

00:20:19.720 --> 00:20:22.089
此外 文件系統會負責刪除

00:20:22.155 --> 00:20:24.124
文檔先前的版本

00:20:24.291 --> 00:20:26.760
這對普通文件來說非常好
但如果你有

00:20:26.827 --> 00:20:28.395
文檔捆綁包該怎麼辦？

00:20:28.662 --> 00:20:32.566
我們這裏有一個文檔捆綁包
ClutchConcertReview.rtfd

00:20:32.633 --> 00:20:37.237
這是一個目錄
其中包含着文檔的資源

00:20:37.571 --> 00:20:40.307
今天會發生的是
假如我去看Clutch表演

00:20:40.374 --> 00:20:43.610
他們的表演十分出色
然後我更新我的評論

00:20:43.944 --> 00:20:48.815
這個改變寫出來了
但現在發生的是無法

00:20:48.882 --> 00:20:51.985
將一個目錄在另一個目錄
上面進行原子級重命名

00:20:52.052 --> 00:20:54.922
因爲POSIX語義不允許這樣

00:20:54.988 --> 00:20:57.257
如果有東西在目的地內部

00:20:57.424 --> 00:20:59.359
我們開始玩一個脫殼遊戲

00:20:59.960 --> 00:21:02.829
首先 將文檔移動開
活動的文檔

00:21:02.896 --> 00:21:06.500
這時如果出現什麼差錯
然後應用程序崩潰

00:21:06.567 --> 00:21:09.536
或者系統斷電
用戶數據就消失了

00:21:10.070 --> 00:21:13.040
之後 應用程序將數據移動到位

00:21:13.106 --> 00:21:17.144
最後 它要負責刪除
目錄的先前版本

00:21:17.477 --> 00:21:18.645
文檔捆綁包

00:21:18.712 --> 00:21:20.781
所以這不是原子級
而且不安全

00:21:20.848 --> 00:21:22.749
這個問題困擾我們

00:21:22.816 --> 00:21:25.319
很長時間
而且我們想改進它

00:21:25.519 --> 00:21:29.423
在APFS上我們推出了
新的系統 叫做renamex_np

00:21:29.489 --> 00:21:33.961
用於非POSIX 這允許
目錄的原子級安全存儲

00:21:34.027 --> 00:21:38.298
現在當應用程序將數據
寫入其臨時位置時

00:21:38.498 --> 00:21:43.971
並請求執行重命名操作
APFS會原子級地負責交換

00:21:44.338 --> 00:21:46.707
並刪除文檔的先前版本

00:21:46.773 --> 00:21:48.876
所以現在是原子級的並且安全

00:21:49.142 --> 00:21:51.378
當然 作爲開發者
你可能不會藉助於

00:21:51.445 --> 00:21:53.981
這種低級的系統調用

00:21:54.081 --> 00:21:56.683
因爲已經爲大家
在Foundation中採用好了

00:21:56.750 --> 00:22:01.355
所以你會在APFS上
享受到這個改進行爲的益處

00:22:08.295 --> 00:22:10.297
接下來 我將談談加密

00:22:11.131 --> 00:22:13.400
就如Eric所說
有了HFS+

00:22:13.634 --> 00:22:19.840
在Mac上 我們使用叫做Core
Storage的層 位於HFS下層

00:22:20.007 --> 00:22:22.442
提供全盤加密
以及其他內容

00:22:22.509 --> 00:22:25.546
這是一個相當複雜的層
而且功能很多

00:22:25.946 --> 00:22:28.015
在iOS上
我們有不同的變體

00:22:28.081 --> 00:22:31.685
保存加密密鑰
和有效擴展屬性

00:22:31.752 --> 00:22:33.620
這些加密密鑰會與

00:22:33.687 --> 00:22:37.424
iOS設備上的
加速AES硬件一同協作

00:22:37.491 --> 00:22:39.226
來提供每文件加密

00:22:39.426 --> 00:22:43.197
這是個有點複雜故事
有兩個非常不同的代碼庫

00:22:43.263 --> 00:22:47.568
在APFS上 我們想嘗試
提供更完成的故事

00:22:47.634 --> 00:22:49.203
在我們所有的產品上

00:22:49.903 --> 00:22:53.540
APFS支持多種級別的
文件系統加密

00:22:53.974 --> 00:22:55.209
不過首先
最簡單的級別

00:22:55.275 --> 00:22:57.578
我們一開始就做好了
那就是沒有加密

00:22:57.711 --> 00:22:59.446
所有的數據
都是以純文本寫成

00:22:59.513 --> 00:23:02.616
所有數據和元數據都是
以純文本寫入磁盤中的

00:23:03.016 --> 00:23:05.853
下一級別是
每個卷配有一個密鑰

00:23:06.420 --> 00:23:11.058
所有敏感的元數據和數據
都是使用相同的密鑰加密

00:23:11.124 --> 00:23:14.194
這基本上相當於全盤加密

00:23:14.494 --> 00:23:18.031
我們支持的最複雜級別
是多密鑰加密

00:23:18.398 --> 00:23:21.535
這裏 所有敏感的元數據是由

00:23:22.135 --> 00:23:26.240
單個密鑰加密
密鑰不同於用於加密

00:23:26.306 --> 00:23:30.277
單個文件的每文件密鑰

00:23:30.577 --> 00:23:33.547
此外 由於快照和
克隆的工作原理

00:23:33.714 --> 00:23:36.350
APFS支持每盤區加密

00:23:36.416 --> 00:23:40.053
所以文件的每個區域
都可以使用自己的密鑰加密

00:23:40.487 --> 00:23:44.625
這是獨一無二的 而且沒有
其他文件系統支持此類功能

00:23:44.892 --> 00:23:47.661
此外 這允許我們
統一我們的加密故事

00:23:47.728 --> 00:23:49.596
在我們所有的平臺之間

00:23:49.897 --> 00:23:52.432
好了 之後我將交給Eric

00:23:59.806 --> 00:24:01.708
好了 現在我將快速展示

00:24:01.775 --> 00:24:06.914
WWDC 版macOS Sierra上的
Apple File System

00:24:09.950 --> 00:24:14.221
可能最簡單最快速的試驗
Apple File System的方法就是

00:24:14.288 --> 00:24:16.790
使用磁盤鏡像
我們首先那樣做

00:24:17.824 --> 00:24:22.563
你能看到在命令行上
輸入了hdiutil create-fs APFS

00:24:22.629 --> 00:24:25.666
這會指定 給我創建
APFS類型的磁盤鏡像

00:24:26.033 --> 00:24:28.569
我們指定大小
然後進行稀疏束

00:24:28.802 --> 00:24:32.172
這會出現警告
因爲這是尚在開發中的項目

00:24:32.239 --> 00:24:34.541
我們希望你清楚

00:24:34.608 --> 00:24:39.279
你使用的東西目前
並非是100％完成的

00:24:39.813 --> 00:24:42.816
這時它會提醒我
我說是

00:24:44.518 --> 00:24:47.654
你這就創建出磁盤鏡像了
如果我附加

00:24:52.259 --> 00:24:55.395
你可以在桌面上檢查它
進行Get Info

00:24:56.196 --> 00:24:59.366
你能看到文件系統的類型
確實是APFS

00:24:59.433 --> 00:25:01.502
這可能是最簡單的方式
如果你只想

00:25:01.568 --> 00:25:04.137
得出某個東西來嘗試

00:25:06.273 --> 00:25:08.775
接下來 我想展示一些其他

00:25:09.176 --> 00:25:12.379
我們加入的更高級功能

00:25:13.313 --> 00:25:14.314
關上它

00:25:15.082 --> 00:25:20.521
這裏我有兩個優盤
它們只是普通的優盤

00:25:20.587 --> 00:25:23.257
你可以從任何
標準辦公用品商店買到

00:25:23.624 --> 00:25:24.625
我插入一個

00:25:24.691 --> 00:25:29.196
其中一個是HFS+格式
另一個是Apple File System格式

00:25:39.006 --> 00:25:41.708
在這兩個上面
都進行Get Info

00:25:41.775 --> 00:25:44.945
這樣在操作過程中
你能看到空閒空間

00:25:45.913 --> 00:25:51.718
這個時候我有
意大利旅行的一些演示照片

00:25:51.818 --> 00:25:57.024
這兩個的目錄層級中
都有不少存儲空間

00:25:57.324 --> 00:26:00.527
首先我們開始
複製HFS卷中的

00:26:00.594 --> 00:26:04.731
最新版iTunes
然後在APFS中也是同樣

00:26:04.798 --> 00:26:08.235
開始複製 進行中

00:26:08.635 --> 00:26:11.839
你能看到這裏的進程條
不過APFS已經完成了

00:26:11.905 --> 00:26:13.574
因爲它在後臺使用克隆

00:26:13.640 --> 00:26:17.010
Finder已經採用了
所有新的克隆行爲

00:26:17.077 --> 00:26:19.646
所以如果你進行復制
Finder會自動替你

00:26:19.713 --> 00:26:21.181
在後臺進行克隆

00:26:21.515 --> 00:26:22.983
然而HFS還沒有完成

00:26:27.621 --> 00:26:30.991
好了 我可以用
演示照片做同樣的事

00:26:31.058 --> 00:26:33.727
你在這裏能看到
這裏有幾張照片

00:26:33.794 --> 00:26:36.363
它們全是幾MB的大小

00:26:37.764 --> 00:26:43.003
注意這裏的空閒空間
3.35GB空閒

00:26:43.070 --> 00:26:47.040
如果我進行復制
這實際上會替我克隆

00:26:47.107 --> 00:26:50.677
你會看到空閒空間
根本沒有減小

00:26:53.280 --> 00:26:56.984
接下來
我將展示捕獲快照

00:26:59.086 --> 00:27:01.054
這用叫做
SnapshotUtil的工具

00:27:01.121 --> 00:27:05.692
這會在公測版發佈之後
供大家使用

00:27:06.560 --> 00:27:08.362
抱歉 這個要作爲根運行

00:27:11.932 --> 00:27:17.804
好了 現在我創建了一個快照
我能用SnapshotUtil-s檢查它

00:27:23.544 --> 00:27:26.747
你能看到
它現在識別出APFS_Snap

00:27:27.047 --> 00:27:32.519
我在這次演講之前
創建了一個掛載點

00:27:32.920 --> 00:27:36.857
我會掛載這個時候的快照

00:27:37.624 --> 00:27:40.460
你能看到這個快照
出現在桌面上了

00:27:40.527 --> 00:27:43.463
這包含系統文件的只讀視圖

00:27:43.530 --> 00:27:47.434
與捕獲快照時候的樣子相同

00:27:53.907 --> 00:27:57.511
現在 在APFS卷中
我將創建一個臨時文件

00:27:59.346 --> 00:28:02.115
大家好 我是臨時文件

00:28:03.016 --> 00:28:05.953
保存 關閉
你能看到它在這裏顯示

00:28:06.019 --> 00:28:09.456
在APFS卷中
這是掛載的讀寫

00:28:09.990 --> 00:28:11.892
但在快照中不存在

00:28:14.795 --> 00:28:19.600
相應地 我還能刪除
一些演示照片

00:28:19.666 --> 00:28:22.669
將它們移到垃圾箱 然後刪除

00:28:24.104 --> 00:28:26.473
空閒空間實際上還是沒有減小

00:28:26.540 --> 00:28:31.044
因爲現在它們被
快照的存在所固定

00:28:31.111 --> 00:28:36.116
如果我想刪除它們
我還要刪除快照

00:28:38.452 --> 00:28:43.257
好了 這簡短展示了Apple
File System的實際效果

00:28:50.964 --> 00:28:53.100
好了 我們來談談
一些新的API

00:28:53.166 --> 00:28:55.502
我們爲支持Apple
File System而添加

00:28:56.436 --> 00:28:59.873
首先 我們預計可能
大家會熟悉這一個

00:28:59.940 --> 00:29:02.676
如果你使用Foundation
或FileManager

00:29:02.743 --> 00:29:08.015
這兩者都得到Swift增強
如果你用copyItem或replaceItem

00:29:08.148 --> 00:29:11.051
它們會採用克隆或
安全存儲語義

00:29:11.118 --> 00:29:13.287
我們剛纔自動給你描述了

00:29:13.353 --> 00:29:15.689
你不需要做任何事
不費任何功夫

00:29:15.756 --> 00:29:19.393
它會自動弄清你使用的
文件系統是HFS+

00:29:19.459 --> 00:29:23.230
還是Apple File System
而且只有在合適時使用行爲

00:29:24.464 --> 00:29:27.901
但是 如果你斷定
Foundation或FileManager

00:29:27.968 --> 00:29:29.403
無法提供你所要的確切內容

00:29:29.469 --> 00:29:33.340
你可以到下面 我們有一個
叫做libcopyfile的庫

00:29:33.407 --> 00:29:36.376
這個支持深層級的複製

00:29:36.443 --> 00:29:38.111
我們在有克隆功能之前

00:29:38.178 --> 00:29:39.646
已經用它很多年了

00:29:40.047 --> 00:29:43.283
複製文件支持新的位
叫做COPYFILE CLONE

00:29:43.350 --> 00:29:46.987
這與其下方的
5或6個位相同

00:29:47.254 --> 00:29:48.655
我們決定將其選擇性加入

00:29:48.722 --> 00:29:51.458
因爲如果你使用
像這樣的專門庫

00:29:51.825 --> 00:29:54.695
你未必想要ACL和擴展屬性

00:29:54.761 --> 00:29:57.931
以及剩下的內容
完完全全地複製過來

00:29:58.699 --> 00:30:01.568
而克隆會隱式地
複製所有那些東西

00:30:01.635 --> 00:30:05.572
這個庫也會自動
爲你調用克隆

00:30:05.639 --> 00:30:07.508
如果後端文件系統支持

00:30:07.574 --> 00:30:09.943
如果不支持 那它就會
繼續像往常一樣運行

00:30:11.411 --> 00:30:13.347
這些就是新的安全存儲API

00:30:13.413 --> 00:30:17.584
renamex Np和renameatx Np
是新的系統調用

00:30:17.651 --> 00:30:20.254
支持安全存儲基元

00:30:20.787 --> 00:30:24.224
你可以在Man Pages上使用
在macOS Sierra版本中

00:30:24.291 --> 00:30:26.994
如果你想去看一下Man Page
它們就在這裏

00:30:27.561 --> 00:30:29.663
這些也是克隆API

00:30:29.730 --> 00:30:34.234
所以克隆文件及其變體
支持克隆文件和目錄

00:30:35.836 --> 00:30:38.972
說一下兼容性
我們認爲最簡單的方式

00:30:39.039 --> 00:30:44.278
訪問Apple File System鏡像
就是使用我給你展示的hdiutil

00:30:44.411 --> 00:30:45.913
目前只在macOS Sierra上的

00:30:45.979 --> 00:30:49.316
命令行中可用
作爲開發者預覽版技術

00:30:49.383 --> 00:30:53.353
還並未特意地完全
爲Disk Utility做優化

00:30:54.054 --> 00:30:58.358
所以最快的方法是使用
hdiutil create-fs APFS

00:30:58.425 --> 00:31:00.627
你可以得到磁盤鏡像
然後附加它

00:31:01.461 --> 00:31:05.699
你還可用diskutil APFS
增加容器

00:31:05.766 --> 00:31:08.268
創建容器
添加捲 刪除卷

00:31:09.002 --> 00:31:13.006
任何你想對容器
本身進行的低級操作

00:31:13.640 --> 00:31:17.211
最後 我們還有FS檢查
這是我們在研發的功能

00:31:17.277 --> 00:31:20.280
這個能夠驗證文件系統

00:31:20.347 --> 00:31:21.815
也可以進行修復

00:31:21.982 --> 00:31:24.251
所以還會繼續開發該功能

00:31:25.853 --> 00:31:30.224
macOS Sierra中
APFS上目前的一些限制

00:31:31.124 --> 00:31:32.860
這隻會在數據捲上支持

00:31:32.926 --> 00:31:35.829
現在不支持從Apple
File System啓動

00:31:36.997 --> 00:31:41.201
現在Apple File
System不支持“時間機器”備份

00:31:42.569 --> 00:31:45.572
FileVault和Fusion Drive
支持還尚需等待

00:31:47.074 --> 00:31:50.177
當前的卷格式
只能是區分大小寫的

00:31:50.244 --> 00:31:53.547
如果你不確定你的程序
是否需要不區分大小寫

00:31:53.814 --> 00:31:57.050
請試一下
創建磁盤鏡像或設置在

00:31:57.117 --> 00:32:01.522
Mac上的分區裏
試着證實它並將你的應用

00:32:01.588 --> 00:32:05.359
在Apple File System中運行
然後告訴我們它的效果

00:32:07.461 --> 00:32:09.229
其他對兼容性的備註

00:32:09.596 --> 00:32:12.999
Apple File System
無法通過AFP分享

00:32:13.066 --> 00:32:17.871
如果你想使用文件分享
我們建議你使用SMB代替

00:32:18.705 --> 00:32:21.808
作爲未來首選的文件分享機制

00:32:22.342 --> 00:32:24.478
OS X Yosemite
或更早版本

00:32:24.545 --> 00:32:26.680
將無法識別Apple
File System卷

00:32:26.747 --> 00:32:29.082
所以請不要把Apple
File System實例

00:32:29.149 --> 00:32:31.952
帶回到OS X Yosemite
或更早版本

00:32:32.019 --> 00:32:36.690
你必定會碰到
你不想回應的對話

00:32:37.824 --> 00:32:43.397
所以macOS Sierra
會有開發者預覽版的

00:32:43.463 --> 00:32:45.165
Apple File System

00:32:45.566 --> 00:32:47.935
這會是開發者預覽版技術

00:32:48.001 --> 00:32:52.472
一旦macOS Sierra
於今秋髮布

00:32:53.307 --> 00:32:55.909
現在你可能會好奇
我們有什麼樣的推出計劃

00:32:55.976 --> 00:32:59.980
各位如何在你們設備上獲取Apple
File System？

00:33:01.315 --> 00:33:02.416
我們會討論這個的

00:33:03.517 --> 00:33:04.952
升級到Apple File System

00:33:05.018 --> 00:33:07.354
你想要這些我們展示過的
出色的新功能

00:33:07.421 --> 00:33:08.388
那你怎樣獲得它們？

00:33:08.822 --> 00:33:11.758
一個可能方法是
要求所有人

00:33:11.825 --> 00:33:14.628
所有用戶備份系統
保存起來

00:33:14.695 --> 00:33:16.563
確保所有東西都絕對安全

00:33:16.630 --> 00:33:18.799
然後擦除卷
擦除設備

00:33:18.866 --> 00:33:21.969
還原 放入新的OS
然後從備份中還原

00:33:22.035 --> 00:33:23.904
這個過程會花數小時

00:33:23.971 --> 00:33:25.806
然後期盼所有東西
在還原後

00:33:25.873 --> 00:33:27.140
都完好如初

00:33:27.541 --> 00:33:28.709
我們不會這樣做

00:33:29.276 --> 00:33:32.579
相反 Apple會提供
就地升級路徑

00:33:32.646 --> 00:33:35.649
從HFS+
到Apple File System

00:33:41.355 --> 00:33:44.958
在此期間 用戶數據
仍保持在其原來位置

00:33:45.259 --> 00:33:49.062
Apple會將嶄新的APFS元數據

00:33:49.129 --> 00:33:54.668
寫入HPF+空閒空間
我們這麼做是爲了死機防護

00:33:55.269 --> 00:33:59.239
這個操作可能會耗時
幾秒或者幾分鐘

00:33:59.806 --> 00:34:02.809
在這段期間
如果設備斷電 死機

00:34:02.876 --> 00:34:05.479
任何發生的糟糕事情
我們想要設備上的數據

00:34:05.546 --> 00:34:08.114
安然無恙
彷彿什麼都未發生過一樣

00:34:08.482 --> 00:34:13.120
所以Apple File System Converter
會盡可能以原子級別執行操作

00:34:13.187 --> 00:34:14.855
這不是完全瞬時完成的

00:34:14.922 --> 00:34:16.822
但隨着操作持續進行

00:34:16.889 --> 00:34:17.958
如果設備死機

00:34:18.225 --> 00:34:23.429
我們的打算是
使其完好如初 歸於原樣

00:34:24.231 --> 00:34:29.735
Apple File System 將於2017年
在所有設備上以默認程序發佈

00:34:37.311 --> 00:34:38.411
總而言之

00:34:40.047 --> 00:34:42.081
Apple File System
會是默認的文件系統

00:34:42.149 --> 00:34:44.384
用於2017年的
所有Apple產品

00:34:45.118 --> 00:34:49.188
它超現代 有死機防護
支持空間分享

00:34:50.224 --> 00:34:53.793
我們支持克隆和快照
增強的數據安全功能

00:34:53.860 --> 00:34:57.197
像我們剛剛討論的
多密鑰加密

00:34:59.132 --> 00:35:01.201
它也專門優化和設計

00:35:01.268 --> 00:35:03.804
用於我們所有設備裏的
Apple生態系統

00:35:05.439 --> 00:35:07.975
你可以得到更多關於
Apple File System的信息

00:35:08.041 --> 00:35:09.776
在我身後的URL中

00:35:10.344 --> 00:35:13.514
那裏會有開發者指南
以及一些示例代碼

00:35:13.580 --> 00:35:17.784
這樣你可以看到
克隆文件和目錄的實際演示

00:35:19.653 --> 00:35:22.189
給在座各位說一些要點

00:35:22.256 --> 00:35:26.093
Apple File System
即將到來 2017年將在轉眼間來臨

00:35:26.994 --> 00:35:29.763
我想請大家將你們的應用
在Apple File System上測試

00:35:29.830 --> 00:35:32.599
用你們昨天獲得的macOS版本

00:35:32.999 --> 00:35:35.068
試着在Apple File System上
運行你們的應用

00:35:35.135 --> 00:35:38.305
請告訴我們這一過程的進展如何

00:35:38.972 --> 00:35:41.875
如果你要報告任何錯誤
請使用Bug Reporter報告

00:35:41.942 --> 00:35:44.178
通過傳統的手段
這樣我們可以調查

00:35:44.244 --> 00:35:47.281
我們都希望大家會
像我們一樣喜歡它

00:35:49.283 --> 00:35:52.019
還有一些相關演講

00:35:52.085 --> 00:35:54.888
如果你有興趣學習
更多關於安全功能的內容

00:35:54.955 --> 00:35:57.024
在我們的平臺上
特別是iOS

00:35:57.758 --> 00:36:01.428
我們建議你可以看看
iOS Security實際工作原理

00:36:01.495 --> 00:36:04.331
將於今天4點鐘
在本會議廳開始

00:36:04.731 --> 00:36:06.700
至此 這就是
Apple File System

00:36:06.767 --> 00:36:08.635
我們迫不及待想知道
各位會如何使用它