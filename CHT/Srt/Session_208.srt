00:00:19.820 --> 00:00:23.490
WatchOS 3的新特性

00:00:31.732 --> 00:00:32.566
好的

00:00:32.732 --> 00:00:33.667
謝謝

00:00:34.201 --> 00:00:37.938
我很激動能跟大家講講
watchOS 3的新特性

00:00:38.505 --> 00:00:41.942
當然我們十分關注
watchOS 3

00:00:42.242 --> 00:00:44.611
努力優化系統性能

00:00:45.012 --> 00:00:47.381
並對此做出了很多改進

00:00:47.447 --> 00:00:50.751
以確保你所有的應用
快速流暢地運行

00:00:51.919 --> 00:00:54.922
我們還投入了大量的時間
來優化導航

00:00:55.455 --> 00:00:58.492
它實際上促進了性能的優化

00:00:58.926 --> 00:01:01.361
因爲我們能越快地
讓用戶打開應用

00:01:01.728 --> 00:01:04.531
他們就能越早開始使用
也就能越快地

00:01:04.598 --> 00:01:07.501
放下手腕
能繼續做其他事情

00:01:09.336 --> 00:01:11.905
除了對系統進行提升

00:01:12.172 --> 00:01:14.041
我們也花了很多時間

00:01:14.107 --> 00:01:17.144
優化我們所有應用中不同的東西

00:01:19.179 --> 00:01:23.050
所有這些改進
實際上都圍繞着三個主要方面

00:01:23.116 --> 00:01:25.953
對於手錶應用
我向你保證也提醒你

00:01:26.019 --> 00:01:29.523
你會聽到很多這方面的信息
在其他手錶主題的演講裏

00:01:30.190 --> 00:01:33.327
那麼首先要保證的
就是一目瞭然

00:01:34.194 --> 00:01:38.198
要想手錶應用能一目瞭然
就需要很多不同的元素

00:01:38.265 --> 00:01:40.133
最基礎的就是錶盤

00:01:40.634 --> 00:01:42.936
因爲錶盤上的complication

00:01:43.003 --> 00:01:44.771
給你很好的機會

00:01:44.838 --> 00:01:47.574
顯示最重要的信息

00:01:47.641 --> 00:01:50.377
讓用戶在你的應用上
掃一眼就行

00:01:52.112 --> 00:01:55.048
當然 在watchOS 2
我們也做了快捷視圖

00:01:55.115 --> 00:01:58.318
在watchOS 3 這個功能
被合併進了一個新的停靠欄

00:01:58.719 --> 00:02:01.955
這是顯示簡單明瞭的信息
很好的地方

00:02:02.222 --> 00:02:05.025
因爲它很快就可以被找到
無論從系統的什麼地方

00:02:05.092 --> 00:02:07.995
並且能讓你十分輕鬆地
大概瞭解和概覽

00:02:08.195 --> 00:02:11.131
你的應用上最好和最重要的信息

00:02:11.865 --> 00:02:13.467
除了要能一目瞭然

00:02:13.901 --> 00:02:16.503
我們還想讓所有的應用
都隨時可操作

00:02:17.404 --> 00:02:20.107
隨時操作性也包含了很多內容

00:02:20.741 --> 00:02:23.310
它可以指你能在手錶上進行操作

00:02:23.844 --> 00:02:26.780
你看到了我們已經重新設計了
很多內置應用

00:02:26.847 --> 00:02:29.049
以保證我們最常用的功能

00:02:29.116 --> 00:02:31.718
只要點擊幾下
就能輕鬆訪問

00:02:32.452 --> 00:02:34.855
比如鍛鍊應用
現在就能很快進入了

00:02:34.922 --> 00:02:36.557
並且只要點一下就能開始鍛鍊了

00:02:37.591 --> 00:02:40.260
定時應用現在改進了
常用定時器

00:02:40.327 --> 00:02:42.296
你可以把它直接設在
最頂部

00:02:42.529 --> 00:02:44.331
只要你進入應用
點一下

00:02:44.398 --> 00:02:46.466
就可以開始計時了

00:02:47.401 --> 00:02:48.969
這種方式是

00:02:49.036 --> 00:02:50.771
我們極力建議你們去考慮的

00:02:50.838 --> 00:02:53.941
就是找到應用裏
最常用的操作

00:02:54.107 --> 00:02:57.377
把它們放到最頂層
讓它們更容易被訪問

00:02:59.112 --> 00:03:01.348
當然 可操作性
並不一定意味着

00:03:01.415 --> 00:03:04.117
你必須能對手錶本身進行操作

00:03:04.351 --> 00:03:08.689
它可能就只是指
方便顯示用戶想要操作的內容

00:03:09.056 --> 00:03:12.125
即便是他們最終不一定
會在手錶上操作

00:03:12.559 --> 00:03:16.296
我想再次強調complications
是最好的選擇 新停靠欄也是

00:03:16.363 --> 00:03:19.166
它們顯示了
是最要的信息給用戶

00:03:19.233 --> 00:03:21.301
方便他們
在真實的情況下操作

00:03:23.136 --> 00:03:25.739
第三個方面
當然就是反應力

00:03:25.973 --> 00:03:29.042
要保證你的應用
保持更新並能及時響應

00:03:29.109 --> 00:03:30.644
每當用戶有需要的時候

00:03:31.745 --> 00:03:34.147
我們對watchOS 3
做的大部分性能提升

00:03:34.214 --> 00:03:35.983
都是面向這一方面

00:03:36.049 --> 00:03:39.086
就是讓所有應用
以最快的速度響應

00:03:39.453 --> 00:03:41.955
通過將它們存在內存裏
這個過會兒講

00:03:42.022 --> 00:03:44.758
並且保證
它們可以很快地恢復工作

00:03:45.125 --> 00:03:47.694
我們就能保證
它們擁有最快的反應速度

00:03:47.995 --> 00:03:48.996
你最好能

00:03:49.062 --> 00:03:50.998
確保應用的及時反應

00:03:51.064 --> 00:03:53.400
就是採用新的後臺應用刷新技術

00:03:53.467 --> 00:03:54.968
這個一會兒我們細講

00:03:55.202 --> 00:03:57.371
來保證你的應用
已經將內容準備好

00:03:57.437 --> 00:04:01.408
在用戶要使用的時候
顯示給他們

00:04:03.577 --> 00:04:05.812
那麼想到應用
當然

00:04:05.879 --> 00:04:08.515
我們可以回到
應用的全屏視圖

00:04:08.582 --> 00:04:12.252
這是大多數人
對應用的第一印象

00:04:13.020 --> 00:04:15.122
但是這也許不是最常用的地方

00:04:15.189 --> 00:04:17.558
讓用戶在Apple Watch上
與應用互動

00:04:18.291 --> 00:04:19.692
因爲要讓互動簡短

00:04:19.760 --> 00:04:21.628
我們有其他很棒的界面

00:04:21.695 --> 00:04:25.299
能讓我們更快捷地使用
大部分最常用的操作

00:04:25.966 --> 00:04:27.668
當然complications

00:04:27.734 --> 00:04:30.337
直接在錶盤上顯示
你需要的信息

00:04:30.504 --> 00:04:34.208
還有通知 會以最及時的速度
彈出信息

00:04:35.242 --> 00:04:37.477
Apple Watch通知系統很棒

00:04:37.544 --> 00:04:41.281
因爲你要執行代碼
來彈出通知

00:04:41.348 --> 00:04:44.885
其內容和自定義UI
都正好是你想要的界面

00:04:47.454 --> 00:04:49.690
當然 在watchOS 3上
有了新停靠欄

00:04:49.890 --> 00:04:52.926
打開應用
只要按一下側鍵

00:04:53.260 --> 00:04:54.928
不管你現在系統的什麼位置

00:04:56.430 --> 00:04:59.867
那麼 停靠欄裏的應用很棒
因爲他們可以立即反應

00:04:59.967 --> 00:05:02.469
你點一下
它馬上就會全屏顯示

00:05:02.536 --> 00:05:05.572
你就可以立刻開始互動
完全無需等待

00:05:06.273 --> 00:05:09.276
停靠欄這麼好
不僅因爲它能直接與應用互動

00:05:09.343 --> 00:05:11.211
還因爲它能消化信息

00:05:11.612 --> 00:05:13.180
watchOS2裏的快捷視圖

00:05:13.247 --> 00:05:16.083
這個功能現在被挪到了
watchOS 3的停靠欄裏

00:05:16.450 --> 00:05:20.454
所以你可以快速
從你最喜愛的應用裏

00:05:20.521 --> 00:05:22.789
滑動瀏覽視圖信息

00:05:22.856 --> 00:05:25.859
因爲它高度精簡了
來自所有應用的信息

00:05:26.560 --> 00:05:29.396
所以停靠欄集合了
我們能提供的最好的快捷視圖

00:05:29.463 --> 00:05:31.164
讓你能快速地訪問應用

00:05:31.365 --> 00:05:33.166
並提供了更多的功能性

00:05:33.700 --> 00:05:36.336
對於像Reminder這樣的應用
兩者都要具備

00:05:36.703 --> 00:05:39.873
你可以快速瀏覽
你需要去做的事情

00:05:40.340 --> 00:05:42.676
當你點進去的時候
它會立刻全屏

00:05:42.743 --> 00:05:44.745
並且可以互動
這樣你就可以勾掉事項了

00:05:45.779 --> 00:05:49.082
對於其他類型的應用
可能就只具備功能性

00:05:49.616 --> 00:05:51.618
比如
鍛鍊應用

00:05:51.685 --> 00:05:53.453
我們將一些最常用的鍛鍊方法

00:05:53.520 --> 00:05:55.589
你最想做的鍛鍊
放到了最頂層

00:05:55.656 --> 00:05:58.992
那麼你可以點擊它們
讓應用全屏

00:05:59.059 --> 00:06:01.495
再點一下
就可以開始鍛鍊了

00:06:03.163 --> 00:06:06.500
停靠欄 如我們所說
對於瀏覽信息也很有幫助

00:06:06.934 --> 00:06:09.336
例如活動應用 這類應用好處在於

00:06:09.403 --> 00:06:12.339
只概括顯示
這個應用的信息

00:06:14.274 --> 00:06:15.342
在活動環裏

00:06:15.409 --> 00:06:18.745
通常都是全屏顯示
你可以看到高度概括的信息

00:06:18.812 --> 00:06:21.348
這真正是一目瞭然
很便於理解

00:06:23.050 --> 00:06:26.086
活動應用經過重新設計
如果你進入它

00:06:26.320 --> 00:06:28.021
會發現
應用的導航被簡化了

00:06:28.589 --> 00:06:32.159
在watchOS 2裏
它有四個水平排列的標籤

00:06:32.459 --> 00:06:34.027
每個都可以垂直拉動

00:06:34.094 --> 00:06:36.930
而在watchOS 3裏僅一個視圖
也可以垂直拉動

00:06:36.997 --> 00:06:39.366
最頂部是活動的概括

00:06:39.433 --> 00:06:40.701
下面就是細節顯示

00:06:41.001 --> 00:06:42.736
所以它又簡單又快捷

00:06:42.803 --> 00:06:44.872
讓你不用進入應用
就能看到你想要的信息

00:06:47.241 --> 00:06:50.978
現在我們想讓
手錶上的互動時間儘可能短

00:06:51.211 --> 00:06:54.548
那麼這個新的導航模式
和這些改進

00:06:54.615 --> 00:06:58.218
可以讓應用立刻
反應並啓動

00:06:58.552 --> 00:06:59.920
它幫助我們保證

00:06:59.987 --> 00:07:02.856
那些Apple Watch上
最常用的任務

00:07:02.923 --> 00:07:05.292
可以在幾秒鐘之內完成

00:07:06.326 --> 00:07:07.361
在你考慮

00:07:07.427 --> 00:07:09.596
如何更新
Apple Watch的應用

00:07:09.663 --> 00:07:11.832
watchOS 3的應用
或若你還沒有應用

00:07:11.899 --> 00:07:13.834
你就要考慮
要放些什麼內容進去

00:07:13.934 --> 00:07:16.537
我會強烈建議你們
花些時間

00:07:16.603 --> 00:07:19.373
想想如何縮短互動時間

00:07:19.940 --> 00:07:22.142
2秒的確是個
很短的時間

00:07:22.442 --> 00:07:24.811
但是就在爭取達到這一目標的過程中
你能真正找到

00:07:24.878 --> 00:07:26.914
最適合你應用的設計方法

00:07:26.980 --> 00:07:30.751
讓他們在Apple Watch上
給出最完美的體驗

00:07:32.619 --> 00:07:35.489
在接下來的時間裏
我要講四件事

00:07:36.256 --> 00:07:38.025
第一是後臺應用刷新

00:07:38.225 --> 00:07:41.628
就像我之前說的那樣
這是watchOS 3中最大的改進

00:07:41.695 --> 00:07:44.398
這十分重要
對創建反應靈敏的手錶應用來說

00:07:44.464 --> 00:07:46.700
我們會用很多時間
來講這一點

00:07:47.801 --> 00:07:50.871
接着我要講一點
導航簡化的內容

00:07:51.238 --> 00:07:54.341
因爲我們做了很多努力
去簡化系統的導航

00:07:54.641 --> 00:07:57.711
但是下一步就是要簡化
應用裏的導航

00:07:57.945 --> 00:08:01.081
我將分享一些
我們自己是如何做的想法

00:08:01.148 --> 00:08:04.218
而且我相信
你也一定能想出很多方法

00:08:04.284 --> 00:08:06.453
去簡化你的應用導航

00:08:07.621 --> 00:08:10.824
之後我們再來講一下
拓展API的可用性

00:08:11.091 --> 00:08:14.561
我們從watch SDK平臺上
帶來了一些很棒的框架

00:08:14.628 --> 00:08:15.963
還有了一些全新的框架

00:08:16.230 --> 00:08:19.600
而且也對現有的框架
做了很多改進

00:08:19.666 --> 00:08:22.636
所以我們會講到
裏面很多高層次的知識點

00:08:22.970 --> 00:08:24.938
還會爲你推薦一些
其他精彩演講

00:08:25.005 --> 00:08:26.340
能讓你瞭解更多細節

00:08:27.074 --> 00:08:30.210
最後我們會講
可發現性和配置

00:08:30.277 --> 00:08:32.712
因爲創建應用只是第一步

00:08:32.913 --> 00:08:36.082
你還要把它帶到用戶面前
並且在手錶上進行配置

00:08:37.284 --> 00:08:39.520
那麼我們就從
後臺應用刷新開始

00:08:40.721 --> 00:08:42.990
後臺應用刷新
是很重要的一部分

00:08:43.123 --> 00:08:45.259
在創建反應靈敏的手錶應用時

00:08:46.793 --> 00:08:48.829
在你開始任何工作之前

00:08:49.196 --> 00:08:51.465
後臺應用刷新
就已經開始爲你工作了

00:08:52.032 --> 00:08:55.836
你不需要真的去採用任何API
來獲得它的幫助

00:08:56.670 --> 00:08:57.905
那麼第一件事就是

00:08:58.505 --> 00:09:01.675
把所有用戶喜愛的應用
都存在內存裏

00:09:02.609 --> 00:09:04.344
他們在後臺啓動

00:09:04.411 --> 00:09:06.713
然後暫停
並一直處於待命狀態

00:09:06.780 --> 00:09:08.715
這樣一旦用戶要用它們

00:09:08.782 --> 00:09:11.151
它就只要簡單的恢復
而我們就不用等待

00:09:11.218 --> 00:09:12.653
一個完全啓動的過程

00:09:13.887 --> 00:09:16.690
那麼 我提到過
這適用於用戶喜愛的應用

00:09:16.890 --> 00:09:19.026
但我的指向十分具體

00:09:19.459 --> 00:09:22.462
這是用戶當前錶盤上
所有的應用

00:09:22.529 --> 00:09:25.632
那麼任何多功能表盤上的應用

00:09:25.999 --> 00:09:27.534
就是他們最喜歡的應用

00:09:27.835 --> 00:09:30.270
同樣 用戶放到停靠欄裏的所有應用

00:09:30.337 --> 00:09:31.438
也是他們最喜歡的應用

00:09:32.072 --> 00:09:34.208
這些應用都存在內存裏

00:09:34.274 --> 00:09:36.577
並隨時在需要時啓動

00:09:37.144 --> 00:09:39.346
這是用戶最方便
訪問的應用

00:09:39.413 --> 00:09:41.615
因爲他們只要輕點一下表盤

00:09:41.682 --> 00:09:43.684
或者只要滑動停靠欄就好

00:09:44.017 --> 00:09:45.919
因此它們要一直在那裏
隨時待命

00:09:45.986 --> 00:09:47.421
反應越快越好

00:09:48.055 --> 00:09:49.923
就像我說的
你什麼都不用做

00:09:49.990 --> 00:09:53.193
即使是現有watchOS 2應用
也能自動做到這一點

00:09:55.229 --> 00:09:58.732
但在使用後臺應用刷新時
還是要用到一些API

00:09:58.799 --> 00:10:01.301
你可以用它們
讓你的應用反應更快

00:10:01.368 --> 00:10:03.003
一旦它們成爲前臺

00:10:03.070 --> 00:10:05.439
就要保證它們是最新的
並隨時可用

00:10:06.974 --> 00:10:09.610
你能用它做的第一件事
顯然就是

00:10:09.676 --> 00:10:12.045
升級你的complication
以及升級你的應用

00:10:12.513 --> 00:10:15.015
讓應用保持最新
就要一直升級

00:10:15.449 --> 00:10:17.885
另外還有一個很重要的方面

00:10:18.151 --> 00:10:19.920
這可能不會那麼直觀

00:10:20.153 --> 00:10:23.156
就是你還要更新快照

00:10:24.258 --> 00:10:26.493
你可能會想
快照是什麼意思

00:10:26.560 --> 00:10:29.463
因爲你從來沒有
給快照寫過代碼

00:10:29.796 --> 00:10:32.633
它特別適用於
停靠欄裏的應用

00:10:33.400 --> 00:10:36.670
現在 當停靠欄
第一次出現在前臺時

00:10:36.737 --> 00:10:39.573
所有停靠欄裏的應用
都在內存裏

00:10:39.640 --> 00:10:41.642
但是他們是暫停的
當前並不運行

00:10:42.109 --> 00:10:44.344
一旦停靠欄轉到前臺
它顯示的

00:10:44.411 --> 00:10:47.214
就是一個快照
是應用最後一次運行的狀態

00:10:48.682 --> 00:10:50.918
一旦用戶選定了
停靠欄裏的一個應用

00:10:51.018 --> 00:10:52.586
它就會恢復工作

00:10:52.653 --> 00:10:54.655
即便它依然縮在停靠欄裏

00:10:54.788 --> 00:10:56.490
但與此同時
我們還展示了一個快照

00:10:56.557 --> 00:10:58.192
表示了最近一次的狀態

00:10:58.659 --> 00:11:01.128
重要的是
快照也要更新

00:11:01.195 --> 00:11:04.364
這樣你就不會一直顯示舊信息
直到應用重新恢復工作

00:11:05.966 --> 00:11:08.602
更重要的是
如果你快速滑動停靠欄

00:11:08.669 --> 00:11:10.470
而不停在任何一個應用上

00:11:10.971 --> 00:11:14.174
它們在滑動中不會暫停和恢復

00:11:14.241 --> 00:11:18.278
因此滑動時看到的
只是上次最後顯示的快照

00:11:18.712 --> 00:11:19.913
所以你必須要確保

00:11:19.980 --> 00:11:23.217
這些快照更新到
當前的信息

00:11:23.650 --> 00:11:26.653
而後臺應用刷新
就讓這件事變得十分簡單

00:11:27.788 --> 00:11:30.057
一開始這裏有些自動的行爲

00:11:30.123 --> 00:11:31.325
是系統給你的

00:11:31.491 --> 00:11:34.795
甚至在你添加任何請求更新之前

00:11:36.630 --> 00:11:38.732
第一個 應該很顯然

00:11:38.799 --> 00:11:40.901
如果你已經進入應用
並使用它

00:11:41.201 --> 00:11:43.770
那麼用戶可能已經
看到了一些新信息

00:11:43.837 --> 00:11:47.207
或者已經進行了一些操作
想要更新這個快照

00:11:47.274 --> 00:11:48.909
以便在下次顯示

00:11:49.409 --> 00:11:50.744
當用戶退出應用

00:11:50.811 --> 00:11:53.480
系統會自動安排
一次快照更新

00:11:53.547 --> 00:11:55.349
代你完成這件事

00:11:56.250 --> 00:11:57.684
這處理起來其實十分簡單

00:11:57.751 --> 00:12:00.187
因爲有了這個
新的後臺應用刷新方法

00:12:00.254 --> 00:12:02.990
這是所有後臺刷新活動
要經過的路徑

00:12:03.190 --> 00:12:06.627
只要在WatchKit擴展代理上
添加這個簡單的方法

00:12:06.860 --> 00:12:10.097
它會被回調
在任何一個刷新活動出現的時候

00:12:10.531 --> 00:12:13.133
那麼第一個就是
自動快照

00:12:13.200 --> 00:12:15.068
這發生在應用暫停的時候

00:12:16.737 --> 00:12:20.541
但用戶可能也會在其他時候
從應用上瀏覽信息

00:12:20.908 --> 00:12:23.210
所以就要常常更新快照

00:12:23.277 --> 00:12:24.745
我們就都自動處理了

00:12:25.245 --> 00:12:27.147
另一個可能就不這麼明顯

00:12:27.214 --> 00:12:29.016
就是在一個通知被瀏覽以後

00:12:29.683 --> 00:12:32.686
如果用戶看到一個長通知

00:12:32.753 --> 00:12:34.321
他們可能已經看見
一些新信息

00:12:34.388 --> 00:12:36.490
將你應用裏的新動態通知他們

00:12:36.890 --> 00:12:37.991
如果他們進入停靠欄

00:12:38.058 --> 00:12:40.160
但是看到的信息
是過時的

00:12:40.227 --> 00:12:41.995
肯定會很大跌眼鏡

00:12:42.596 --> 00:12:44.831
所以當你的通知關閉後

00:12:44.998 --> 00:12:47.801
系統會自動安排
一個後臺快照任務

00:12:47.868 --> 00:12:49.503
跟這個例子裏一樣

00:12:49.570 --> 00:12:52.472
這樣你就能更新快照和complication

00:12:52.539 --> 00:12:55.075
從而保證一切
都保持最新狀態並且同步

00:12:55.943 --> 00:12:57.845
當然 有的時候

00:12:57.911 --> 00:13:00.247
你會想自己安排更新

00:13:00.414 --> 00:13:02.282
你瞭解你的用戶
也清楚你的數據

00:13:02.449 --> 00:13:06.119
所以有時候你就想
自己主動更新內容

00:13:07.054 --> 00:13:09.056
那麼這裏有兩種方法可用

00:13:09.590 --> 00:13:11.592
第一是關於complication

00:13:11.758 --> 00:13:14.394
接下來的問題就是
快照裏要放什麼內容？

00:13:14.528 --> 00:13:16.830
首先也是最需要
放進快照裏的

00:13:16.897 --> 00:13:19.566
就是你的應用裏
日常顯示的內容

00:13:19.900 --> 00:13:21.268
這樣看上去很實時

00:13:21.335 --> 00:13:24.471
並且用戶打開應用時
能看到你想要呈現的內容

00:13:26.139 --> 00:13:27.174
但是你也可以選擇

00:13:27.241 --> 00:13:29.810
提供一些不同的
自定義信息

00:13:29.877 --> 00:13:33.447
這樣在停靠欄上就很好看
而且便於一目瞭然地理解

00:13:35.249 --> 00:13:37.951
比如
Dexcom G5手機應用

00:13:38.085 --> 00:13:40.854
在這個應用裏
我最關心的

00:13:41.221 --> 00:13:42.990
是我當前的血糖水平

00:13:43.657 --> 00:13:44.858
所以在停靠欄裏

00:13:45.192 --> 00:13:48.061
我會看到突出的大數字
就在屏幕中央

00:13:49.463 --> 00:13:51.164
但是當我實際進入應用

00:13:51.231 --> 00:13:54.401
我就會更關心細節
而不僅僅是個讀數

00:13:55.602 --> 00:13:57.137
所以當我把應用全屏

00:13:57.204 --> 00:14:00.207
它就可以轉換
並顯示更多的信息

00:14:00.274 --> 00:14:02.709
當我打開應用看到的
在這個例子裏

00:14:02.776 --> 00:14:05.812
是一個歷史圖表
顯示過去時間裏更多的信息

00:14:07.080 --> 00:14:08.649
你不一定非要

00:14:08.715 --> 00:14:10.250
在停靠欄快照裏
顯示不同信息

00:14:10.317 --> 00:14:12.186
通常不那麼做

00:14:12.252 --> 00:14:14.621
只要顯示
應用裏的內容就好

00:14:15.155 --> 00:14:18.091
但你的確有了更多靈活性
所以如果對應用來說

00:14:18.158 --> 00:14:20.260
在停靠欄快照裏
顯示不一樣的東西很有意義

00:14:20.327 --> 00:14:23.130
那麼就要保證
進入應用的時候的轉換

00:14:23.197 --> 00:14:26.033
流暢和諧
不會出現衝突

00:14:30.037 --> 00:14:32.406
除了這些自動的快照任務

00:14:32.472 --> 00:14:34.074
和保持快照更新

00:14:34.141 --> 00:14:35.876
你可能也想定期

00:14:35.943 --> 00:14:38.846
在應用後臺
更新數據

00:14:38.912 --> 00:14:41.515
那麼也有幾種方法
讓你去實現它

00:14:41.949 --> 00:14:44.251
現在 你可能只想上網

00:14:44.318 --> 00:14:46.453
獲取一些數據
那你就使用

00:14:46.520 --> 00:14:49.556
NSURLSession
和Watch Connectivity

00:14:51.225 --> 00:14:53.026
但是其實還有很多其他方法

00:14:53.093 --> 00:14:56.129
首先一個就是
更新complication

00:14:56.496 --> 00:14:59.166
complications
可以直接在錶盤上看到

00:14:59.466 --> 00:15:00.767
所以更重要的就是

00:15:00.834 --> 00:15:02.736
他們也要實時更新

00:15:03.036 --> 00:15:05.606
那麼現在有一種更新
只針對

00:15:05.672 --> 00:15:07.207
當前錶盤上的應用

00:15:07.574 --> 00:15:09.743
這就是
靜默complication推送更新

00:15:10.777 --> 00:15:13.280
現在這些更新類型
都在watchOS 2系統下

00:15:13.780 --> 00:15:16.950
但是它們不太好使
因爲你無法保證

00:15:17.017 --> 00:15:19.253
在一天的時間內
能更新多少

00:15:19.720 --> 00:15:21.121
所以比較難以把握

00:15:21.188 --> 00:15:23.557
你能使用多少
和什麼時候發送

00:15:23.857 --> 00:15:27.861
在watchOS 3下
這個更新有了巨大的改進

00:15:27.928 --> 00:15:30.130
我們現在可以保證
在一天的時間內

00:15:30.197 --> 00:15:33.133
錶盤上的每個應用
可以收到50個推送更新

00:15:34.401 --> 00:15:36.303
這很好
因爲它讓你有機會

00:15:36.370 --> 00:15:39.039
計劃在一天的時間內
要使用多少個更新

00:15:39.706 --> 00:15:41.842
那麼舉個例子
假設我們有個股票的應用

00:15:42.676 --> 00:15:44.211
我們就用最天真的想法

00:15:44.278 --> 00:15:47.381
就是在一整天裏
發佈50個更新

00:15:47.681 --> 00:15:49.783
這樣就是每30分鐘更新一次

00:15:50.884 --> 00:15:53.086
這也不是太壞
但是我們可以做到更好

00:15:53.153 --> 00:15:56.456
如果我們思考一下
這裏顯示的數據

00:15:56.523 --> 00:15:59.293
它們的相關信息
以及我們的用戶行爲

00:16:00.494 --> 00:16:01.728
比如說
假設我們知道

00:16:01.795 --> 00:16:04.765
用戶一般會在
12點到6點之間睡覺

00:16:06.166 --> 00:16:07.568
這樣的話

00:16:07.634 --> 00:16:11.338
我們就不需要
在這個時間段更新

00:16:11.405 --> 00:16:13.407
那麼我們就可以
把剩餘的更新次數

00:16:13.473 --> 00:16:14.708
分佈在其他時間段

00:16:15.342 --> 00:16:18.879
這樣我們的更新頻率
就提高到20分鐘一次

00:16:19.112 --> 00:16:22.182
這是個很大的改進
卻只花費了很少的力氣

00:16:23.784 --> 00:16:25.385
當然 如果我們更瞭解

00:16:25.452 --> 00:16:28.455
數據本身
並能將其也納入考慮

00:16:29.022 --> 00:16:31.124
那麼我們還能做到更好

00:16:31.792 --> 00:16:33.594
那麼假設我們知道
我們的股票

00:16:33.660 --> 00:16:35.729
只來自於
紐約證券交易所

00:16:36.096 --> 00:16:39.233
那麼我們的更新只要在
9:00到16:00之間

00:16:39.299 --> 00:16:40.467
就是開盤的時候

00:16:41.134 --> 00:16:44.571
這樣頻率就提升到
8.5分鐘一次

00:16:45.405 --> 00:16:46.240
很顯然

00:16:46.306 --> 00:16:49.610
這個特定的例子
不適用於大部分應用

00:16:49.810 --> 00:16:52.112
但是這個理念是可以的

00:16:52.513 --> 00:16:55.282
考慮下你所有的額外信息

00:16:55.349 --> 00:16:56.683
比如 你用戶的習慣

00:16:56.917 --> 00:16:58.886
以及你所顯示的數據類型

00:16:58.986 --> 00:17:03.223
你就有很多機會
來進一步提高用戶體驗

00:17:03.290 --> 00:17:04.958
當他們在手錶上使用應用的時候

00:17:07.461 --> 00:17:11.464
但是這些都只是當前錶盤上
顯示的complications

00:17:12.566 --> 00:17:15.269
如果你的應用不在當前的錶盤上

00:17:15.335 --> 00:17:17.905
而是在停靠欄裏
或者在當前錶盤上

00:17:17.971 --> 00:17:19.640
推送更新
似乎沒有多大意義

00:17:19.705 --> 00:17:22.009
還有其他方法
能讓你更新數據

00:17:23.143 --> 00:17:24.744
在這些情況下 你可能會想

00:17:24.810 --> 00:17:27.513
定期在後臺更新

00:17:27.580 --> 00:17:28.749
在一天的時間內

00:17:32.719 --> 00:17:34.955
那麼我們還有另外一個
後臺應用刷新API

00:17:35.022 --> 00:17:37.791
它可以讓你設置
下一次你要運行的時間

00:17:37.858 --> 00:17:40.661
而且每次運行
都會有些不同的東西

00:17:40.727 --> 00:17:41.795
供你選擇

00:17:42.229 --> 00:17:46.133
你能通過NSURLSession或
Watch Connectivity下載數據

00:17:47.201 --> 00:17:49.970
你也可以只從手錶的數據庫裏
下載新數據

00:17:50.037 --> 00:17:52.105
前提是你已經
擁有所有信息

00:17:53.574 --> 00:17:54.408
另外

00:17:54.474 --> 00:17:57.477
你還可以設置
下次更新的時間段

00:17:57.911 --> 00:18:01.381
所以這不是個固定的週期
不需要提前都想好

00:18:01.582 --> 00:18:03.550
每次運行
你都有機會選擇

00:18:03.617 --> 00:18:05.519
下一次最佳的更新時間

00:18:05.786 --> 00:18:08.789
這樣你就可以
按照數據類型進行優化

00:18:08.856 --> 00:18:11.124
因爲你知道什麼時候會更新

00:18:12.726 --> 00:18:13.994
現在 至少

00:18:14.061 --> 00:18:17.331
你能保證應用
可以每小時運行一次

00:18:18.198 --> 00:18:20.801
但是我們還有其他工具
可以讓你

00:18:20.868 --> 00:18:22.769
更頻繁的更新

00:18:23.604 --> 00:18:27.908
那麼第一件事就是你的應用
要支持complication

00:18:28.175 --> 00:18:30.511
如果當前錶盤上
有complication

00:18:30.744 --> 00:18:31.979
那麼你的應用就可以

00:18:32.045 --> 00:18:34.014
更快的更新
不止每小時一次

00:18:34.915 --> 00:18:37.050
但是即便不在當前錶盤上

00:18:37.384 --> 00:18:39.853
你也能提高更新頻率

00:18:41.255 --> 00:18:43.824
可用的更新總數

00:18:44.291 --> 00:18:47.127
是固定的
對所有當前停靠欄裏的應用來說

00:18:47.561 --> 00:18:50.130
如果停靠欄已滿
並且所有十個應用都在

00:18:50.297 --> 00:18:53.133
那麼每個應用的更新
都是一小時一次

00:18:53.400 --> 00:18:56.703
但是如果用戶的停靠欄沒有滿
裏面只有幾個應用

00:18:57.004 --> 00:18:59.873
那麼本來用於
其他未使用的應用的更新次數

00:18:59.940 --> 00:19:01.708
可以分發給當前的應用

00:19:02.442 --> 00:19:06.813
這樣的話
一小時就不止一次更新了

00:19:08.115 --> 00:19:09.950
在你設計應用的時候

00:19:10.017 --> 00:19:12.452
也許一小時一次最便於計劃

00:19:12.519 --> 00:19:14.254
因爲這是最低保證

00:19:14.588 --> 00:19:17.257
但是記住
你可以讓運行

00:19:17.324 --> 00:19:20.227
更頻繁
根據不同的情況

00:19:23.030 --> 00:19:26.433
我最後想要講的一點
是關於complication推送

00:19:27.868 --> 00:19:29.803
complication推送
當你想到推送

00:19:29.870 --> 00:19:33.440
第一個能想到的
就是服務器發起的推送

00:19:34.041 --> 00:19:35.409
這的確是一個選擇

00:19:35.475 --> 00:19:38.345
你可以從服務器發起
complication靜默推送

00:19:38.912 --> 00:19:40.314
但是你可能想不到

00:19:40.380 --> 00:19:42.683
其實complication推送

00:19:42.749 --> 00:19:45.085
也可以來自
iPhone上的應用

00:19:46.053 --> 00:19:49.623
推送更新API其實是Watch
Connectivity框架一部分

00:19:49.990 --> 00:19:53.026
那麼如果你iPhone上的應用
因爲某些其他原因而運行

00:19:53.093 --> 00:19:54.695
比如用戶直接在使用

00:19:54.761 --> 00:19:57.865
又或者它在手機上運行了
後臺應用刷新API

00:19:58.198 --> 00:20:00.968
它可給手錶發一個
complication推送更新

00:20:01.335 --> 00:20:03.403
來更新
complication的UI

00:20:05.005 --> 00:20:06.640
所以 即便你沒有服務器

00:20:06.707 --> 00:20:08.842
也可以進行推送

00:20:09.076 --> 00:20:11.512
並且可以利用這個方法

00:20:11.578 --> 00:20:13.347
讓你的錶盤保持更新

00:20:13.847 --> 00:20:14.915
這就是你要記住的

00:20:14.982 --> 00:20:18.752
當你設計應用的
complications和刷新策略時

00:20:20.487 --> 00:20:23.223
那麼現在來快速總結下
後臺應用刷新

00:20:23.290 --> 00:20:25.025
和它的工作原理

00:20:25.092 --> 00:20:27.027
而且我要特別再強調一次

00:20:27.094 --> 00:20:30.497
它是創建反應靈敏的應用時
非常重要的部分

00:20:30.764 --> 00:20:33.400
無論你在Apple Watch上創建
什麼類型的應用

00:20:33.467 --> 00:20:35.502
我強烈建議
你們去看看

00:20:35.569 --> 00:20:37.938
“讓你的手錶時刻更新”的演講

00:20:38.005 --> 00:20:40.040
更多地瞭解後臺應用刷新

00:20:40.107 --> 00:20:43.510
以及如何讓你的應用
保持活躍 靈敏和更新

00:20:45.345 --> 00:20:48.448
那麼下面我們來講講
導航優化

00:20:50.083 --> 00:20:52.686
我之前說過
我們已經做了很多工作

00:20:52.753 --> 00:20:56.089
優化Apple Watch本身的導航

00:20:56.323 --> 00:20:59.159
所以系統已經可以
很快的找到你的應用

00:20:59.393 --> 00:21:02.930
下一步就是
優化應用裏的導航

00:21:03.063 --> 00:21:05.332
這就能很快找到信息

00:21:05.399 --> 00:21:06.867
和用戶需要的操作

00:21:08.302 --> 00:21:11.672
那麼我就以一個常用的模式
作爲開頭

00:21:12.506 --> 00:21:16.109
許多應用都會
對它們的數據進行分層

00:21:16.810 --> 00:21:18.612
打個比方
這裏有個頂層視圖

00:21:18.679 --> 00:21:22.950
上面有很多信息
列的都是優先事項

00:21:23.083 --> 00:21:25.219
這種情況下
我寫了一個應用來記錄

00:21:25.285 --> 00:21:27.354
我今天喝的所有飲料

00:21:28.121 --> 00:21:31.058
現在 如果你需要
任何一個指定項目的信息

00:21:31.225 --> 00:21:33.894
你就可以點擊它
它就會滑到細節頁面

00:21:34.061 --> 00:21:36.930
那麼這裏我們看到
今天目前爲止我喝了三杯咖啡

00:21:38.332 --> 00:21:39.666
在watchOS 2裏

00:21:39.733 --> 00:21:42.669
如果你需要看
其他項目的更多信息

00:21:42.736 --> 00:21:43.971
你就可以按一下返回鍵

00:21:44.037 --> 00:21:46.139
找到那個項目
然後滑動進入

00:21:47.774 --> 00:21:49.843
現在這個看上去
沒有多少負載

00:21:50.310 --> 00:21:54.248
但是根據要把
互動時間縮短到多少

00:21:54.381 --> 00:21:56.517
附加時間會來回變動

00:21:56.583 --> 00:21:58.719
這樣就能很快提速

00:21:59.286 --> 00:22:02.022
在watchOS 3裏
你會看到很多應用

00:22:02.089 --> 00:22:03.657
使用這種模式

00:22:03.724 --> 00:22:06.493
我們現在爲其引入了新的導航風格

00:22:06.560 --> 00:22:09.663
你可以只用手指
或者數碼錶冠

00:22:09.863 --> 00:22:12.833
來快速滑動翻頁
在不同的項目之間

00:22:13.033 --> 00:22:15.903
不用來回轉換導航了

00:22:16.904 --> 00:22:19.706
如果你看看 比如說
股票和天氣的應用

00:22:19.773 --> 00:22:22.442
他們經過重新設計
開啓這種ok互動

00:22:22.843 --> 00:22:24.444
而且我們也想讓你們
能很簡單地

00:22:24.511 --> 00:22:26.113
把它應用到你的應用裏

00:22:26.680 --> 00:22:29.583
WatchKit的表格界面控制
現在可以選擇

00:22:29.650 --> 00:22:31.552
開啓垂直頁模式

00:22:31.885 --> 00:22:35.222
當你要導航進一個細節視圖時

00:22:35.722 --> 00:22:37.257
選擇這個就會十分簡單

00:22:37.324 --> 00:22:39.193
你只要做幾件事

00:22:39.259 --> 00:22:41.828
首先你當然是要
在表格上啓動這一選項

00:22:42.996 --> 00:22:44.331
然後你還要注意

00:22:44.398 --> 00:22:46.600
在你的storyboard上
使用segues

00:22:46.667 --> 00:22:49.937
來表達
從表格到細節視圖的轉換

00:22:50.470 --> 00:22:53.207
這樣你就給了WatchKit
所有它需要的信息

00:22:53.273 --> 00:22:55.909
讓它能預生產
上層和下層的視圖

00:22:56.143 --> 00:22:58.879
並把他們放進
垂直分頁界面

00:22:59.046 --> 00:23:00.480
這樣就可在它們之間移動了

00:23:01.815 --> 00:23:03.884
你看這也沒有多少改變
而且十分簡單

00:23:03.951 --> 00:23:05.752
你唯一要記住的

00:23:05.819 --> 00:23:09.756
就是要實際去監測它

00:23:09.823 --> 00:23:12.693
你還需要保證
細節視圖的設計

00:23:12.759 --> 00:23:16.029
就是能把所有細節信息
放進一個屏幕裏

00:23:16.730 --> 00:23:19.867
如果細節視圖本身可以滑動

00:23:20.033 --> 00:23:21.735
那麼細節視圖裏的滑動

00:23:21.802 --> 00:23:25.506
就會優先於
外部分頁界面

00:23:25.973 --> 00:23:27.841
所以你一定要將注意力集中在

00:23:27.908 --> 00:23:30.244
簡化細節項目的視圖

00:23:30.444 --> 00:23:32.713
你還會發現
在股票和天氣應用裏

00:23:32.946 --> 00:23:34.815
本來watchOS 2裏的這些視圖

00:23:34.882 --> 00:23:37.651
要垂直滑動
並且包含大量信息

00:23:37.718 --> 00:23:39.286
而現在就只有一頁

00:23:39.353 --> 00:23:41.555
所以就能很簡單地轉換

00:23:44.558 --> 00:23:47.494
就這樣 我們讓用戶
可以很快地進入應用

00:23:48.061 --> 00:23:51.164
我們優化了後臺刷新
讓我們的數據保持更新

00:23:51.698 --> 00:23:54.468
我們也優化了導航
在應用裏面

00:23:55.169 --> 00:23:56.770
最後一部分就是要保證

00:23:56.837 --> 00:23:59.606
個人與Apple Watch
的互動要短

00:23:59.806 --> 00:24:02.543
要讓用戶能儘快退出應用

00:24:03.243 --> 00:24:05.679
在Apple Watch上
這就意味着用戶能放心

00:24:05.746 --> 00:24:07.214
不用端着手腕一直看

00:24:08.182 --> 00:24:10.684
有幾種方法
可以讓你實現這一想法

00:24:10.751 --> 00:24:12.252
我們這裏就只看一個例子

00:24:12.586 --> 00:24:16.089
假設我們有個應用
是用來訂晚餐的

00:24:17.124 --> 00:24:18.492
當我點擊Buy鍵

00:24:18.559 --> 00:24:21.461
我就會開啓
與一個服務器的網絡活動

00:24:21.528 --> 00:24:23.130
它會進行幾個操作

00:24:23.197 --> 00:24:25.699
來決定我是否
可以購買

00:24:25.832 --> 00:24:27.134
這可能需要點時間

00:24:27.501 --> 00:24:29.636
那麼我首先傾向於顯示

00:24:29.703 --> 00:24:31.839
給用戶一個未決定的進度指示器

00:24:31.905 --> 00:24:33.740
讓他們知道
處理進行中

00:24:33.807 --> 00:24:35.709
但是不知道多久能完成

00:24:35.843 --> 00:24:38.378
不幸的是 這樣他們只能
舉着胳膊不動

00:24:38.445 --> 00:24:41.682
等到任務完成出現點什麼

00:24:42.282 --> 00:24:45.452
但是我很有信心
在絕大多數情況裏

00:24:45.519 --> 00:24:46.987
這些任務都是會成功的

00:24:47.387 --> 00:24:50.757
讓他們坐着等這麼久
實際上對我也沒有好處

00:24:51.258 --> 00:24:52.726
那麼 你就可以考慮

00:24:52.793 --> 00:24:55.696
顯示一些確定界面

00:24:55.963 --> 00:24:58.765
讓用戶相信
你在處理這個任務

00:24:58.832 --> 00:25:00.567
不需要等着它完成

00:25:00.868 --> 00:25:03.937
在這種情況下 我就說
“收到！我們正在處理你的訂單！”

00:25:06.340 --> 00:25:07.708
當用戶看到這個
他們就可以放心地

00:25:07.774 --> 00:25:08.942
放下手腕了

00:25:10.110 --> 00:25:14.281
那麼你就可以繼續在後臺操作
最多有30秒的時間

00:25:14.348 --> 00:25:17.351
通過在NSProcessInfo上
使用後臺活動API

00:25:19.419 --> 00:25:20.587
總的來講 一切都不錯

00:25:20.654 --> 00:25:22.823
而且你不用再把用戶的注意力拉回來

00:25:23.023 --> 00:25:25.826
當然
有的時候也會出問題

00:25:26.026 --> 00:25:28.929
可能是無法連接服務器
也可能有其他的問題

00:25:29.196 --> 00:25:30.163
在這種情況下

00:25:30.230 --> 00:25:34.067
watchOS 3提供了
一個全新的用戶通知框架

00:25:34.134 --> 00:25:37.704
它讓你能夠在手錶上
直接計劃本地通知

00:25:38.205 --> 00:25:40.474
這是個很好的方法
能在後臺的時候

00:25:40.541 --> 00:25:42.543
就把用戶的注意力拉回來

00:25:42.709 --> 00:25:44.511
讓他們知道這裏出了點問題

00:25:44.578 --> 00:25:46.747
並讓他們能簡單地修復問題

00:25:47.881 --> 00:25:49.917
在這個例子裏
假設 很不幸

00:25:49.983 --> 00:25:51.852
我要點的雞肉沒有了

00:25:52.152 --> 00:25:54.888
那麼我就彈出一個通知
讓用戶知道發生了什麼

00:25:55.455 --> 00:25:58.091
當然通知裏
也可以包含操作

00:25:58.258 --> 00:26:01.328
我可以設置幾個按鍵在這兒
提供解決問題的選項

00:26:01.395 --> 00:26:03.530
或者我可以讓用戶
快速回到應用裏

00:26:04.298 --> 00:26:06.733
這樣就可以在應用的全屏視圖裏
自己解決

00:26:07.334 --> 00:26:09.369
用戶通知框架
是很好的解決方法

00:26:09.436 --> 00:26:12.940
但是它也只是
把問題告訴用戶

00:26:13.407 --> 00:26:15.209
而本地通知就更強大

00:26:15.275 --> 00:26:16.743
是對很多不同應用的巨大改進

00:26:17.578 --> 00:26:20.814
watchOS 3中
用戶通知框架很棒的特性

00:26:20.881 --> 00:26:23.417
就在於它可以
在手錶完全獨立的情況下運行

00:26:23.483 --> 00:26:26.220
因爲它是在手錶上
直接安排通知

00:26:27.020 --> 00:26:29.156
但是現在你可以選擇如何製作通知

00:26:29.223 --> 00:26:31.592
因爲既可以選擇使用
通知框架

00:26:31.658 --> 00:26:34.094
直接在手錶上
安排通知時間

00:26:34.261 --> 00:26:36.930
也可以繼續
使用watchOS 2同樣的操作

00:26:37.331 --> 00:26:39.733
就是返回信息給你的手機應用
通過Watch Connectivity

00:26:39.800 --> 00:26:41.502
在手機上定製通知

00:26:42.002 --> 00:26:44.404
這兩種其實都是
行之有效的方法

00:26:44.471 --> 00:26:47.040
取決於你想要達到什麼目的

00:26:48.175 --> 00:26:51.178
他們之間最重要的區別
在於通知顯示的地方

00:26:51.411 --> 00:26:54.615
如果你通過Watch Connectivity
發送信息給手機應用

00:26:54.681 --> 00:26:56.383
並且在手機上定製通知

00:26:56.617 --> 00:26:59.453
那麼通知會同時
出現在手機和手錶上

00:26:59.553 --> 00:27:01.622
這樣不管你用哪個設備
都可以收到通知

00:27:01.688 --> 00:27:05.125
如果你在使用手機
它會出現在手機上

00:27:05.359 --> 00:27:06.260
如果你使用手錶

00:27:06.326 --> 00:27:07.427
就顯示手錶裏

00:27:08.195 --> 00:27:11.632
如果你用在手錶上的
用戶通知框架

00:27:12.065 --> 00:27:14.835
那麼通知只會在手錶上出現

00:27:14.902 --> 00:27:16.737
不會返回到手機

00:27:17.704 --> 00:27:20.240
而這可能正好就是
你希望的

00:27:20.307 --> 00:27:23.177
有些情況下
你確實要使通知

00:27:23.243 --> 00:27:25.579
只出現在手錶上

00:27:25.646 --> 00:27:28.982
這個現在很容易實現
只要使用新的用戶通知框架

00:27:30.050 --> 00:27:31.552
但更好的是你——

00:27:33.287 --> 00:27:34.121
謝謝

00:27:36.790 --> 00:27:39.593
但還有更好的情況
就是你根本不需要做選擇

00:27:39.726 --> 00:27:42.429
如果你的目標
是讓通知出現在

00:27:42.496 --> 00:27:43.964
正確的地方 不管怎樣

00:27:44.198 --> 00:27:46.166
即便用戶把手機落在了別處

00:27:46.300 --> 00:27:48.435
那麼你可以選擇
同時在兩個設備上設置通知

00:27:48.502 --> 00:27:50.237
使用Watch Connectivity
發送信息

00:27:50.304 --> 00:27:52.372
給手機應用
然後在手機上設置

00:27:52.439 --> 00:27:54.908
或者只是用
雲服務中的數據

00:27:54.975 --> 00:27:56.877
只要按照默認
在雲服務中設置

00:27:57.211 --> 00:27:58.245
但這個設置也是要

00:27:58.312 --> 00:28:00.881
在手錶上
使用新的用戶通知框架

00:28:01.348 --> 00:28:05.252
如果你這麼做
只要你用的是同一個通知識別符

00:28:05.319 --> 00:28:06.787
在兩次設置通知的時候

00:28:07.221 --> 00:28:09.289
watchOS可以消除
這些通知的重複

00:28:09.356 --> 00:28:12.492
因此它們只會
在手錶上出現一次 而不是兩次

00:28:13.961 --> 00:28:16.496
下面看一些用戶通知框架裏
很棒的新內容

00:28:19.867 --> 00:28:22.836
由於個人互動
在手錶上的時間很短

00:28:23.337 --> 00:28:25.239
對於某些應用
你可能想

00:28:25.305 --> 00:28:27.307
在長期內多次使用

00:28:28.075 --> 00:28:30.077
比如 我這裏有
雞肉菜餅的菜譜

00:28:30.143 --> 00:28:32.779
那我要去商店買些
我所需要的食材

00:28:33.881 --> 00:28:36.483
現在在watchOS 3裏
每當我擡起手腕

00:28:36.550 --> 00:28:39.152
手錶就會顯示
我最後一次使用的應用

00:28:39.520 --> 00:28:43.257
這樣我就能很快的看到
我還有哪些東西要買

00:28:43.323 --> 00:28:45.459
並勾掉已經買了的東西

00:28:47.594 --> 00:28:49.196
我被帶回到上一次使用的應用

00:28:49.263 --> 00:28:51.565
使用時間距離現在
不能超過8分鐘

00:28:52.432 --> 00:28:54.568
這很好用
因爲它能讓你設計的應用

00:28:54.635 --> 00:28:56.270
具備這種互動模式類型

00:28:56.570 --> 00:28:59.039
它用於短時互動

00:28:59.106 --> 00:29:00.707
但是可以長時間運行

00:29:01.341 --> 00:29:04.611
對所有watchOS 3的用戶來說
它是新用戶默認設定

00:29:04.678 --> 00:29:08.515
所以它設置起來很簡單
並能讓你根據它來創建和設計應用

00:29:11.251 --> 00:29:12.986
這裏只是幾種方法

00:29:13.053 --> 00:29:16.790
是我們一直想用來改進
watchOS 3系統下的應用互動

00:29:17.591 --> 00:29:19.660
但是還有很多其他的方法

00:29:19.726 --> 00:29:20.794
我會推薦大家去聽聽

00:29:20.861 --> 00:29:23.397
“快速互動技巧”
watchOS演講之一

00:29:23.463 --> 00:29:26.333
在那裏你能更詳細地瞭解
這些多種多樣的想法

00:29:26.400 --> 00:29:27.868
獲得更多啓發

00:29:30.571 --> 00:29:31.572
以上就是導航

00:29:32.673 --> 00:29:33.807
下面我們來詳細講講

00:29:33.874 --> 00:29:37.144
改進後的API可用性
在watchOS 3系統下

00:29:41.481 --> 00:29:42.516
就像我之前說的

00:29:42.583 --> 00:29:45.819
我們帶來了很多很棒的框架
來自我們其他的平臺

00:29:45.886 --> 00:29:47.354
我們有了一些特別好的新框架

00:29:47.421 --> 00:29:49.523
比如
用戶通知框架

00:29:49.857 --> 00:29:53.126
我們還新添了很多API
給許多不同的框架

00:29:53.193 --> 00:29:55.062
都是Apple Watch已經安裝的

00:29:56.396 --> 00:29:58.765
那麼我們就從已講過的一個開始吧

00:29:59.233 --> 00:30:00.334
後臺應用刷新

00:30:00.868 --> 00:30:04.872
我又把它拿來講是爲了強調
它在我看來有多重要

00:30:06.006 --> 00:30:07.908
它能帶給你的
三個最重要的影響

00:30:08.008 --> 00:30:09.910
就是設置更新的能力

00:30:10.777 --> 00:30:12.746
運行多功能推送更新

00:30:12.813 --> 00:30:15.582
並保證每天50個

00:30:16.350 --> 00:30:18.719
還有保證快照和文檔的更新

00:30:18.785 --> 00:30:22.489
並且同步你的通知
和complications

00:30:23.824 --> 00:30:24.958
再說一次 強烈推薦

00:30:25.025 --> 00:30:27.294
“讓手錶應用保持更新”演講

00:30:27.361 --> 00:30:29.162
裏面有超多相關的信息

00:30:31.465 --> 00:30:34.801
健美應用是
特別需要保持更新的

00:30:35.169 --> 00:30:37.304
因爲在鍛鍊中
最重要的就是

00:30:37.371 --> 00:30:39.406
要顯示當前的信息

00:30:39.606 --> 00:30:41.542
而且在整個鍛鍊過程中都要不斷更新

00:30:42.109 --> 00:30:44.578
那麼今年對鍛鍊應用的一大改進

00:30:44.645 --> 00:30:47.381
就是watchOS 3系統下
它們將繼續在後臺運行

00:30:47.447 --> 00:30:50.284
並持續整個運動時間

00:30:52.019 --> 00:30:54.821
這讓你能夠
監測鍛鍊的進度

00:30:55.122 --> 00:30:58.058
觀察——使用所有的傳感器API

00:30:58.125 --> 00:30:59.626
來跟上進度

00:30:59.693 --> 00:31:03.297
並且提醒用戶
通過通知 觸動或者聲音

00:31:04.731 --> 00:31:06.266
當然
我們也改進了

00:31:06.333 --> 00:31:08.468
對心率和加速計的訪問

00:31:08.535 --> 00:31:12.573
現在他們可以在整個鍛鍊過程中
提供連續值

00:31:12.639 --> 00:31:15.309
而不用把這些值
在增量中進行批處理

00:31:15.375 --> 00:31:16.743
然後大段大段的傳送

00:31:17.144 --> 00:31:19.012
這樣一來就能方便追蹤

00:31:19.079 --> 00:31:22.850
當前鍛鍊的情況
並在整個過程中保持更新

00:31:23.717 --> 00:31:26.119
由於他們在運行中
你可以同時更新你的UI

00:31:26.353 --> 00:31:28.889
它可以保證
每當用戶擡起手腕

00:31:28.956 --> 00:31:30.123
他們很快就能看到

00:31:30.190 --> 00:31:33.360
當前準確的鍛鍊狀態
而不會有額外的延遲

00:31:34.761 --> 00:31:37.464
今年是很重要的一年
真的 對運動應用來說

00:31:37.531 --> 00:31:39.499
我們有關於這個主題的一整場演講

00:31:39.566 --> 00:31:41.802
並且講解了很多對這類應用的其他改進

00:31:41.935 --> 00:31:44.137
所以一定要關注
“構建完美的鍛鍊應用”

00:31:44.204 --> 00:31:46.740
去了解如何製作你的運動應用

00:31:46.807 --> 00:31:48.375
讓其在watchOS 3下大放異彩

00:31:50.177 --> 00:31:52.679
但是這裏有一點
我要先重點講一下

00:31:52.746 --> 00:31:54.414
就是後臺運行時間

00:31:55.649 --> 00:31:57.751
因爲這裏需要做一點平衡

00:31:58.018 --> 00:32:01.455
你肯定是想要應用
在運動中時刻更新

00:32:01.922 --> 00:32:04.892
但是同時你又想保證
最佳的用戶體驗

00:32:04.958 --> 00:32:06.994
在其他的時間裏

00:32:07.060 --> 00:32:09.263
這就要注意
節省用電量

00:32:10.831 --> 00:32:12.266
其中很重要的一點

00:32:12.332 --> 00:32:14.868
就是一定
要關注CPU

00:32:14.935 --> 00:32:16.637
在運動時間中佔用了多少

00:32:17.437 --> 00:32:20.507
Xcode現在有個很棒的界面
可以讓你監測這個

00:32:20.841 --> 00:32:22.676
不僅是在某刻的佔用量

00:32:23.110 --> 00:32:26.647
還有在某段時間內
佔用的總量

00:32:28.315 --> 00:32:30.817
在第一部分
這裏有個清晰的視圖

00:32:30.884 --> 00:32:32.119
就在頂部

00:32:32.186 --> 00:32:35.055
這裏告訴你
你現在的CPU佔用量

00:32:35.556 --> 00:32:36.490
下面靠中間

00:32:36.557 --> 00:32:39.660
是一個漂亮的圖表
顯示過去時間內

00:32:39.927 --> 00:32:41.762
CPU的歷史使用量

00:32:43.564 --> 00:32:47.167
現在 你可以清楚地看到這裏的峯值
就是我們工作量很大的地方

00:32:47.334 --> 00:32:49.102
但是在黃色部分
在中間

00:32:49.169 --> 00:32:51.905
你能看到我們提供了
一個滾動的CPU平均使用量

00:32:51.972 --> 00:32:54.208
這是後臺應用所使用的量

00:32:54.274 --> 00:32:55.375
在某一段時間內

00:32:55.843 --> 00:32:57.411
這一部分
是我要重點關注的

00:32:57.477 --> 00:32:58.745
也是最重要的

00:32:58.946 --> 00:33:01.481
因爲當你的運動應用
在後臺運行的時候

00:33:01.548 --> 00:33:02.983
它會限制

00:33:03.050 --> 00:33:06.053
某段時間內

00:33:06.119 --> 00:33:08.088
普通CPU使用總量

00:33:08.388 --> 00:33:10.757
你要始終低於這個限制
以保證

00:33:10.991 --> 00:33:12.693
你的應用可以持續
在後臺運行

00:33:12.759 --> 00:33:15.929
併爲用戶節省電量
以便在其他時間使用

00:33:17.531 --> 00:33:20.067
這個限制
在Xcode裏明確標明

00:33:20.133 --> 00:33:21.401
用紅色的虛線

00:33:21.702 --> 00:33:24.204
這樣你能觀察到
平均用量什麼時候接近它

00:33:24.271 --> 00:33:25.806
並且一定要控制在這個值之內

00:33:26.840 --> 00:33:28.775
同樣 還有很多信息

00:33:28.842 --> 00:33:32.112
關於後臺運動鍛鍊的體驗和改進

00:33:32.179 --> 00:33:33.580
請一定要去查閱更多資料

00:33:33.647 --> 00:33:35.749
但是有一件事
你要記得

00:33:35.816 --> 00:33:38.652
就是CPU用量
在你開發這些應用的時候

00:33:40.721 --> 00:33:43.323
除了傳感器的改進
針對這些類型的應用

00:33:43.390 --> 00:33:46.493
通過讓心率和加速計
持續可用

00:33:46.793 --> 00:33:49.997
我們還有很多新的
硬件訪問API

00:33:50.564 --> 00:33:54.501
錶冠中的時間讓你可以
用數碼錶冠原始訪問轉換事件

00:33:55.536 --> 00:33:57.971
在watchOS 2
你的應用可以使用錶冠

00:33:58.038 --> 00:34:00.174
在界面中滑動

00:34:00.541 --> 00:34:03.277
或者選擇列表中的項目
使用選擇控件

00:34:03.844 --> 00:34:08.081
當然 我們也看到許多
選擇控件的創新用法

00:34:08.148 --> 00:34:10.384
在其他有趣的事上

00:34:10.583 --> 00:34:11.885
我們發現所有人

00:34:11.952 --> 00:34:14.321
都想對數碼錶冠的事件
進行原始訪問

00:34:14.487 --> 00:34:15.989
現在這個已經可以用在

00:34:16.056 --> 00:34:18.559
所有應用的其他類型的互動中

00:34:19.893 --> 00:34:20.726
現在——

00:34:25.732 --> 00:34:30.771
手勢識別方便了
在應用上添加接觸互動

00:34:31.071 --> 00:34:34.608
這裏有特別多的
單指互動手勢

00:34:34.675 --> 00:34:39.847
比如按 滑 搖和長按
這些都能很簡單地添加到

00:34:39.913 --> 00:34:42.315
你所有不同的
WatchKit界面元素

00:34:42.382 --> 00:34:44.952
這樣你的應用
在屏幕的不同地方

00:34:45.018 --> 00:34:46.353
就會有不同的反應方式

00:34:47.254 --> 00:34:48.755
我們還做了一個陀螺儀

00:34:48.822 --> 00:34:51.058
現在可以輔助加速計

00:34:51.291 --> 00:34:54.561
那麼你已經知道了這麼多
設備的手勢信息

00:34:54.695 --> 00:34:56.530
可用於各種有趣的實際操作

00:34:57.631 --> 00:34:58.732
然後 快速——唔

00:34:58.966 --> 00:34:59.800
來吧

00:35:02.469 --> 00:35:04.204
再說一下
“快速互動技巧”演講

00:35:04.271 --> 00:35:07.040
提供了很多信息
關於互動和其他實用示例

00:35:07.441 --> 00:35:09.109
我想給你們
看幾個例子

00:35:09.176 --> 00:35:11.411
就是它能實現的是很酷的東西

00:35:11.945 --> 00:35:15.449
首先 你看到這裏
Acorns藉助了crown

00:35:15.916 --> 00:35:18.752
讓你能快速滑動
瀏覽一個圖表的信息

00:35:18.819 --> 00:35:23.156
它展示的是
你的賬戶的歷史信息

00:35:23.824 --> 00:35:25.259
所以在一個單一簡單的界面

00:35:25.325 --> 00:35:27.561
你可以快速移動
瀏覽很多信息

00:35:27.628 --> 00:35:28.962
屏幕都能顯示

00:35:31.331 --> 00:35:33.100
這個是
Sweat with Kayla

00:35:33.166 --> 00:35:37.471
它利用了滑動手勢

00:35:37.538 --> 00:35:39.940
在不同的鍛鍊中快速瀏覽

00:35:40.007 --> 00:35:41.708
然後選擇自己想要的一個

00:35:42.676 --> 00:35:45.279
當然 你還可以使用
數碼錶冠來移動

00:35:45.345 --> 00:35:48.215
只要輕輕一點
就可以啓動你感興趣的內容

00:35:48.849 --> 00:35:51.118
你會發現
這裏有些有趣的視覺效果

00:35:51.185 --> 00:35:53.954
給這個界面增添了
些許生機

00:35:54.588 --> 00:35:56.690
爲了讓這個可以用在
你的所有應用上

00:35:56.790 --> 00:35:57.925
我們提供很多漂亮圖表/b&gt;

00:35:57.991 --> 00:36:00.494
和媒體框架
Apple Watch而設計的

00:36:00.794 --> 00:36:03.397
SpriteKit和SceneKit
然你可以輕鬆添加

00:36:03.463 --> 00:36:06.300
2D和3D的圖表
還有動畫

00:36:06.500 --> 00:36:08.302
來提升應用的各個部分

00:36:08.802 --> 00:36:09.903
當然你也可以把它們

00:36:09.970 --> 00:36:13.440
用於顯示
長通知界面

00:36:13.674 --> 00:36:16.677
來讓你的通知
更加有趣生動

00:36:18.345 --> 00:36:21.348
關於簡化導航
我們講了很多

00:36:21.415 --> 00:36:24.117
我們也想能夠
播放視頻

00:36:24.184 --> 00:36:25.986
就在應用的界面上

00:36:26.787 --> 00:36:29.957
我們爲 watchOS 2應用
添加了視頻播放器

00:36:30.390 --> 00:36:31.525
但是要在這裏使用

00:36:31.592 --> 00:36:34.127
就會進入一個
單獨的全屏界面

00:36:34.194 --> 00:36:36.964
你在這裏觀看視頻
看完了要退出

00:36:37.064 --> 00:36:38.298
有了在線視頻回放

00:36:38.365 --> 00:36:41.235
你就再也不用
離開應用的主界面

00:36:41.301 --> 00:36:42.936
你可以直接在那裏播放

00:36:43.270 --> 00:36:45.372
更好的是
它支持自動播放

00:36:45.572 --> 00:36:47.941
一旦視頻在屏幕上出現

00:36:48.008 --> 00:36:50.377
它就會自動播放
消失的時候就會暫停

00:36:50.777 --> 00:36:53.514
如果你有很多個短視頻
在一個滑動列表上

00:36:53.580 --> 00:36:55.048
任何時候出現在當前屏幕上的視頻

00:36:55.115 --> 00:36:57.484
都會自動播放
而其他的就會暫停

00:36:57.751 --> 00:36:59.052
它提供了很好的方法

00:36:59.119 --> 00:37:01.488
讓你在應用裏
添加短視頻

00:37:02.222 --> 00:37:05.092
由於停靠欄裏的應用是活動的

00:37:05.526 --> 00:37:07.661
自動播放功能
甚至可以在停靠欄使用

00:37:07.961 --> 00:37:09.196
所以如果你有一個短視頻

00:37:09.263 --> 00:37:12.032
需要在滑動停靠欄的時候顯示出來

00:37:12.099 --> 00:37:15.536
當用戶進入你的應用
這個視頻就可以直接開始播放

00:37:15.602 --> 00:37:17.271
甚至都不用讓應用全屏

00:37:17.804 --> 00:37:20.440
這真的是watchOS 3中
很棒的的視頻改進

00:37:23.310 --> 00:37:25.579
SpriteKit和SceneKit
可以用在任何地方

00:37:25.646 --> 00:37:27.814
這裏你看到的是
七分鐘鍛鍊

00:37:27.881 --> 00:37:31.618
它很好的利用了SceneKit
來實現很多視覺效果

00:37:31.685 --> 00:37:34.488
這個可以用在iPhone應用裏
也能用在Apple Watch上

00:37:35.055 --> 00:37:37.391
你能看到的運動
正是你想要去做的

00:37:37.457 --> 00:37:39.459
並且很清楚顯示了
你要怎麼做

00:37:41.195 --> 00:37:44.865
那麼除了在應用裏添加很多
有趣的視覺效果

00:37:45.232 --> 00:37:48.502
SpriteKit和SceneKit也是
短時互動遊戲的好平臺

00:37:50.537 --> 00:37:53.240
我們也把GameKit帶入了
Apple Watch和watchOS 3系統

00:37:53.640 --> 00:37:55.008
它能讓你很方便地

00:37:55.075 --> 00:37:58.111
添加回合制遊戲
在你的手錶應用裏

00:37:59.313 --> 00:38:03.350
由於GameKit的回合制遊戲API
建立在NSURLSession之上

00:38:03.417 --> 00:38:05.285
他們在沒手機的情況下
甚至也能運行

00:38:05.352 --> 00:38:07.354
只要你的手錶能連上
已知的無線網絡

00:38:09.590 --> 00:38:12.192
GameKit成就API
也可以用於

00:38:12.259 --> 00:38:15.229
獲得Apple Watch的成就
它們以後可以

00:38:15.295 --> 00:38:19.533
在安裝了這個遊戲的iPhone
iPad或者其他平臺上看到

00:38:20.801 --> 00:38:22.169
當然 有AV foundation

00:38:22.236 --> 00:38:25.272
就能很簡單的
用手錶揚聲器播放聲音

00:38:27.508 --> 00:38:30.377
Apple Watch上的遊戲
只是剛剛起步

00:38:30.444 --> 00:38:32.646
但是現在有了這麼多新框架
我真的很期待

00:38:32.713 --> 00:38:34.781
想看看你們可以創造出什麼樣的

00:38:34.848 --> 00:38:37.017
手錶短時互動遊戲

00:38:37.484 --> 00:38:38.652
下面給你們一個理念

00:38:38.719 --> 00:38:41.989
關於如何
成功製造一個有趣的遊戲

00:38:42.322 --> 00:38:44.892
我這裏來展示一個簡短的視頻

00:38:44.958 --> 00:38:47.160
這是WoGa正在開發的
一個新遊戲

00:38:47.227 --> 00:38:48.228
叫做垂釣時光

00:38:49.229 --> 00:38:51.665
就是讓我們在手錶上
在短時間內釣魚

00:38:52.132 --> 00:38:55.135
劃一下
就投出魚線

00:38:55.569 --> 00:38:57.871
然後用數碼錶冠
放下魚餌

00:38:57.938 --> 00:38:59.540
到我想要的深度

00:38:59.940 --> 00:39:02.309
現在 我可以放一會兒
等一等

00:39:02.409 --> 00:39:04.077
或者點一下
立刻開始釣魚

00:39:04.678 --> 00:39:05.712
魚貌似上鉤了

00:39:06.079 --> 00:39:08.215
現在再次用這個錶冠收線

00:39:08.615 --> 00:39:10.884
但是我實際上
沒釣到

00:39:11.285 --> 00:39:13.320
這條魚
估計很開心

00:39:13.387 --> 00:39:15.789
雖然我們的漁夫
可不怎麼高興

00:39:17.524 --> 00:39:21.562
所以這真的很酷
因爲你能添加這麼有趣的圖表

00:39:21.628 --> 00:39:24.998
看到這麼漂亮的動畫
通過使用Apple Watch的SpriteKit

00:39:25.199 --> 00:39:26.533
我真的很期待

00:39:26.600 --> 00:39:28.769
能看到你們創造的東西

00:39:30.504 --> 00:39:32.539
下一部分我要講到CloudKit

00:39:33.841 --> 00:39:35.843
我們已經把CloudKit
帶入了watchOS SDK

00:39:36.043 --> 00:39:39.346
引進了新的CK Share API
極大地方便了

00:39:40.247 --> 00:39:42.549
在不同的用戶之間分享數據

00:39:42.783 --> 00:39:44.985
它也建在
NSURLSession之上

00:39:45.219 --> 00:39:48.255
所以運行起來很簡單
即使手機不在身邊

00:39:48.789 --> 00:39:51.859
這有一整場關於CloudKit的演講
“CloudKit的新特性”

00:39:51.925 --> 00:39:53.660
我強烈推薦你們去看

00:39:56.496 --> 00:39:58.031
最後講講Apple Pay

00:39:58.799 --> 00:40:01.935
Apple Watch爲買東西
提供了很好的支付方式

00:40:02.002 --> 00:40:03.937
當然 當Apple Watch
開了Apple Pay功能

00:40:04.004 --> 00:40:07.140
你就可以在應用裏
購買實物商品

00:40:07.407 --> 00:40:09.209
只要按兩下邊鍵

00:40:10.511 --> 00:40:13.347
你有很多種可以使用的方法

00:40:13.614 --> 00:40:15.849
比如
你可以選擇

00:40:16.283 --> 00:40:18.719
提供最常見的商品

00:40:18.785 --> 00:40:20.454
就像我每天的午餐

00:40:20.521 --> 00:40:23.690
這樣我每天吃午飯的時候
就可以很簡單的訂購

00:40:23.757 --> 00:40:24.691
直接從手錶上下單

00:40:25.158 --> 00:40:27.394
你可以用很多種方法
售賣實物商品

00:40:27.461 --> 00:40:29.096
通過在手錶裏使用Apple Pay

00:40:31.064 --> 00:40:35.602
這就只是一些API
它們是watchOS 3 SDK的一部分

00:40:35.669 --> 00:40:38.672
這裏有很多新東西
一定要去看看

00:40:39.673 --> 00:40:43.043
演講的最後
我們講一下發現性和配置

00:40:43.377 --> 00:40:46.213
因爲 還是那樣
創建一個好的手錶應用只是第一步

00:40:46.280 --> 00:40:48.916
你還要保證
用戶能輕鬆地

00:40:48.982 --> 00:40:50.751
發現它並安裝它

00:40:52.386 --> 00:40:56.990
那麼第一個改進
就是iOS 10 Apple Watch應用

00:40:57.658 --> 00:40:59.526
這是一個全新的錶盤畫廊

00:40:59.593 --> 00:41:02.930
顯示了用戶可以添加到手錶裏的
所有可用的錶盤樣式

00:41:03.530 --> 00:41:05.599
更好的是
就在屏幕的正上方

00:41:05.666 --> 00:41:09.403
有一整個部分
是專門爲你的應用設計的

00:41:09.837 --> 00:41:13.140
打開十分簡單
只要幾步就可以

00:41:14.007 --> 00:41:17.711
那麼首先你要使用一些
新的ClockKit API

00:41:18.779 --> 00:41:20.814
你已在watchOS 2裏
有了一個API

00:41:20.881 --> 00:41:23.016
來定義
complication模板視圖

00:41:24.318 --> 00:41:26.553
這個API
在watchOS 3裏被改進了

00:41:26.854 --> 00:41:30.858
它不僅返回一個字符串
給你的complication數據

00:41:31.158 --> 00:41:33.193
而且返回本地化的key

00:41:33.360 --> 00:41:35.729
讓你能獲得適用於所有語言的
本地化的字符串

00:41:36.363 --> 00:41:38.065
這很重要
因爲第二步

00:41:38.131 --> 00:41:40.300
就是創建一個
complication bundle

00:41:40.701 --> 00:41:43.136
你要用——
你要使用模擬器

00:41:43.670 --> 00:41:46.106
運行應用
創建一個complication bundle

00:41:46.173 --> 00:41:49.610
這就會生成一個靜態表達式
給complication模板

00:41:49.776 --> 00:41:51.745
之後可以
放到iPhone應用裏

00:41:52.880 --> 00:41:54.815
這很簡單
而且通過它

00:41:54.882 --> 00:41:58.852
你你就可以進入畫廊並顯示出來

00:41:59.887 --> 00:42:02.556
靜態表達是必須的
因爲只有這樣我們才能讓

00:42:02.623 --> 00:42:04.958
complication的顯示
能適應這個表面

00:42:05.025 --> 00:42:07.494
即使你的應用
還沒有安裝到手錶上

00:42:08.362 --> 00:42:11.298
就這幾步
卻能達到不可思議的成果

00:42:11.365 --> 00:42:13.433
你的應用就直接顯示在畫廊裏了

00:42:13.934 --> 00:42:15.068
gallery是第一個

00:42:15.135 --> 00:42:17.404
新手錶用戶在匹配好手錶後看到的東西

00:42:17.804 --> 00:42:20.274
所以你必須要
出現在這裏

00:42:21.642 --> 00:42:24.178
除了gallery
我們還簡化了

00:42:24.244 --> 00:42:26.880
自定義表面
和把應用裝到上面的流程

00:42:27.247 --> 00:42:30.617
你隨時都可以
在Apple Watch配置表面

00:42:30.684 --> 00:42:33.587
在iOS 10裏iPhone上的
Apple Watch應用

00:42:33.654 --> 00:42:36.390
現在也引入了
整個表面配置UI

00:42:36.690 --> 00:42:37.791
顯然 它們是同步的

00:42:37.858 --> 00:42:41.228
所以你在一個設備上的更改
也會出現在另一個設備上

00:42:41.628 --> 00:42:44.865
現在你在手機上能很輕鬆地
選擇所有你想要的complications

00:42:44.932 --> 00:42:48.101
顯示在Apple Watch表面上

00:42:48.569 --> 00:42:50.204
有了快速表面轉換

00:42:50.437 --> 00:42:53.807
就有了更多理由
去做complication

00:42:54.141 --> 00:42:56.476
因爲越來越多的用戶
會使用不同的表面

00:42:56.743 --> 00:42:58.412
而你的應用就可以在其中顯現

00:43:00.414 --> 00:43:02.816
配置的最後一部分
就是停靠欄

00:43:03.183 --> 00:43:05.419
很明顯
你可以配置停靠欄

00:43:05.485 --> 00:43:07.120
在iPhone中的
Apple Watch應用裏

00:43:07.321 --> 00:43:09.957
在停靠欄添加或刪除應用
很簡單

00:43:10.023 --> 00:43:11.358
也可以重新排列

00:43:11.792 --> 00:43:14.561
更重要的是
這都可以在手錶上完成

00:43:15.128 --> 00:43:18.465
而且這裏有一個特色
讓你能輕鬆發現

00:43:18.532 --> 00:43:20.200
你可以在停靠欄添加應用

00:43:20.934 --> 00:43:23.937
你最後運行的應用
會始終顯示在停靠欄裏

00:43:24.004 --> 00:43:25.839
即便你沒有特意把它放在裏面

00:43:26.206 --> 00:43:29.309
如果用戶安裝了你的應用
但卻不知道

00:43:29.376 --> 00:43:30.978
他們可以直接在停靠欄里加東西

00:43:31.078 --> 00:43:33.680
他們回到主屏幕
就會發現這個圖標並打開它

00:43:33.747 --> 00:43:36.283
下一次他們再回到停靠欄
就會看到你應用出現在那

00:43:36.350 --> 00:43:38.552
下面有一個大大的按鍵
寫着“存入停靠欄”

00:43:38.886 --> 00:43:39.853
只要輕輕一點

00:43:39.920 --> 00:43:42.155
它就會被永久加入
停靠欄裏了

00:43:42.689 --> 00:43:45.225
因此發現添加
真的很容易

00:43:45.292 --> 00:43:47.628
而且可以
直接從手錶裏添加

00:43:50.697 --> 00:43:52.399
再說一次 你會聽到很多關於

00:43:52.466 --> 00:43:55.602
創建一目瞭然的
可操作性強的和反應靈敏的應用的信息

00:43:56.270 --> 00:43:58.472
而且我特別建議你
一直把這點記在腦子裏

00:43:58.639 --> 00:44:01.008
這裏還有一場設計演講
主講人是Michael

00:44:01.074 --> 00:44:05.879
你可以去聽一聽
設計奇妙Apple Watch體驗

00:44:05.946 --> 00:44:07.948
他會講解更多
跟這些主題有關的東西

00:44:08.015 --> 00:44:09.449
所以 一定去聽聽

00:44:11.018 --> 00:44:13.320
反應性也是很重要的一部分

00:44:13.420 --> 00:44:15.989
這裏也有兩場演講
是圍繞這個主題

00:44:16.089 --> 00:44:18.392
一場是
“架構watchOS 3的性能”

00:44:18.725 --> 00:44:20.427
另一場“保持手錶應用更新”

00:44:20.694 --> 00:44:22.496
這兩場是你
一定想去聽的演講

00:44:22.563 --> 00:44:24.831
它能讓你瞭解
後臺應用刷新的所有好處

00:44:24.998 --> 00:44:26.200
並且保證你的應用

00:44:26.266 --> 00:44:28.468
時時更新
對watchOS 3系統反應靈敏

00:44:28.802 --> 00:44:31.772
這一週還有很多其他演講

00:44:31.839 --> 00:44:34.808
裏面有大量關於
Apple Watch的信息

00:44:35.008 --> 00:44:37.711
還有很多演講
是專門針對Apple Watch的

00:44:37.978 --> 00:44:39.379
謝謝大家的到來

00:44:39.446 --> 00:44:41.815
我已迫不及待想看你們在
Apple Watch上的精彩設計了

00:44:42.115 --> 00:44:43.317
祝你們本週其餘會議中過得愉快