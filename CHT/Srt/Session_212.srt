00:00:19.620 --> 00:00:23.891 
使用TVMLKit開發應用

00:00:28.362 --> 00:00:30.230 
下午好 歡迎大家

00:00:30.764 --> 00:00:33.667 
我是Nurinder Manj
目前是一名TVMLKit團隊

00:00:33.734 --> 00:00:34.701 
軟件開發經理

00:00:35.469 --> 00:00:40.774 
在此我和Parry Panesar一起
談論如何使用TVMLKit構建大型應用

00:00:42.109 --> 00:00:46.313 
你們中的大多數都開發過一個
或者多個原生應用

00:00:46.813 --> 00:00:50.350 
在此過程中你們要
痛苦的調試性能

00:00:50.417 --> 00:00:52.052 
並且不斷優化用戶界面

00:00:54.121 --> 00:00:57.891 
通常這些過程犧牲了新特性開發
或者會導致延遲交付

00:00:58.959 --> 00:01:00.694 
你們中有人可能開發過web應用

00:01:01.662 --> 00:01:03.197 
web應用通常有很強可塑性

00:01:03.263 --> 00:01:07.034 
而且要不斷的更新
但是用戶體驗卻不是很好

00:01:08.535 --> 00:01:13.173 
TVMLKit作爲一個新的框架
已經引入到tvOS中

00:01:13.574 --> 00:01:16.410 
作爲橋樑連接web和原生應用

00:01:17.778 --> 00:01:22.249 
當你使用TVMLKit構建應用時
應用將看起來

00:01:22.716 --> 00:01:25.819 
感覺起來和使用起來
就和Apple應用一模一樣

00:01:26.954 --> 00:01:27.855 
我們開始吧

00:01:29.623 --> 00:01:34.194 
今天 首先我準備講一下
這個框架可以爲大家提供哪些東西

00:01:35.896 --> 00:01:40.133 
然後 我們爲大家準備了一些應用

00:01:40.200 --> 00:01:43.904 
這些應用將爲大家展示
一個TVMLKit應用的全部特性

00:01:44.805 --> 00:01:49.109 
但是在此之前 我要先大致介紹下
這個框架的信息

00:01:51.044 --> 00:01:54.915 
在這段視頻的後半段
我會講一下

00:01:54.982 --> 00:01:59.319 
新的令人興奮的新特性
該特性將在tvOS 10中引入進來

00:02:01.522 --> 00:02:04.324 
我帶大家
看一下一些用戶交互界面

00:02:06.593 --> 00:02:08.794 
這app store應用
且是專門 爲Apple TV定製

00:02:11.565 --> 00:02:13.333 
一款常規的iTunes 電影應用

00:02:16.036 --> 00:02:17.905 
借鑑了Search應用的特性

00:02:20.307 --> 00:02:22.075 
另一款應用是Apple Music

00:02:25.045 --> 00:02:31.385 
所有這些移植到Apple TV
的應用都是基於TVMLKit開發的

00:02:33.554 --> 00:02:38.258 
並且如果你回過頭來思考
這些應用都有什麼特點的時候

00:02:39.126 --> 00:02:40.527 
會發現他們都有同一個目的

00:02:41.862 --> 00:02:45.098 
他們可以讓人們瀏覽 交互

00:02:45.165 --> 00:02:47.301 
並且都包含內容分類信息

00:02:48.635 --> 00:02:52.105 
這些內容都將以一種簡單而獨特的方式
被呈現出來

00:02:54.474 --> 00:02:56.076 
那這個框架究竟帶來了什麼？

00:02:58.045 --> 00:03:02.349 
這個框架爲開發者提供
基於模板的原生交互界面

00:03:03.350 --> 00:03:06.286 
而且性能方面都已經過了優化和改善

00:03:07.087 --> 00:03:10.157 
爲開發者節省了大量的
時間和精力

00:03:12.960 --> 00:03:16.063 
這些複雜而豐富的交互界面正
如大家剛纔所見

00:03:17.030 --> 00:03:20.033 
是通過
是用一個標記性的API來定義實現的

00:03:21.368 --> 00:03:23.704 
並且使用JavaScript
驅動這些應用

00:03:26.773 --> 00:03:28.342 
這些模板的可定製性很強

00:03:29.142 --> 00:03:33.213 
你可以改變它的外觀、
它的行爲和樣式

00:03:37.184 --> 00:03:41.421 
而且 這個框架沒有侷限於
我們提供的既有模板

00:03:42.623 --> 00:03:45.158 
你可根據現有的
Apple模板進行改造

00:03:45.225 --> 00:03:47.961 
只要添加自己的視圖
和這些視圖的控制器就可以了

00:03:49.129 --> 00:03:51.365 
甚至 你可以從頭創建自己的模板

00:03:53.166 --> 00:03:55.669 
你也可以擴展
JavaScript的功能性

00:03:55.736 --> 00:03:57.304 
當然是根據你的應用場景來定製

00:04:00.107 --> 00:04:02.776 
我可以向你保證
這不是一個web瀏覽器

00:04:03.944 --> 00:04:08.749 
它是一個優化了的
爲tvOS定製的原生交互體驗

00:04:11.585 --> 00:04:12.986 
我們開始構建應用吧

00:04:14.555 --> 00:04:17.958 
這些是主要的控件
待會兒我會詳細介紹

00:04:18.392 --> 00:04:20.994 
我們需要
構建我們自己的應用

00:04:22.529 --> 00:04:27.000 
首先在Xcode裏創建
並配置客戶端項目

00:04:29.236 --> 00:04:31.872 
接下來我會講關於標記

00:04:32.539 --> 00:04:35.642 
和樣式來配置項目

00:04:37.578 --> 00:04:40.547 
最後 我會講下
JavaScript API

00:04:40.848 --> 00:04:42.549 
是如何驅動這個應用的

00:04:44.418 --> 00:04:46.253 
現在在我們研究細節之前

00:04:46.486 --> 00:04:49.656 
我來給大家展示下
從架構的角度來分析這個項目

00:04:51.158 --> 00:04:55.162 
典型的TVMLKit應用是基於
client server架構模型

00:04:56.864 --> 00:04:59.867 
客戶端應用是基於UIKit的應用

00:04:59.933 --> 00:05:01.702 
它可以運行在tvOS設備上

00:05:01.768 --> 00:05:06.206 
而server端保存有媒體文件
和JavaScript文件

00:05:08.375 --> 00:05:11.445 
這框架提供了application
controller API

00:05:12.212 --> 00:05:15.215 
它可以下載
關鍵的JavaScript文件

00:05:15.282 --> 00:05:17.284 
還會搭建一個JavaScript環境

00:05:17.351 --> 00:05:20.120 
且負責控制JavaScript行爲

00:05:21.722 --> 00:05:23.490 
一旦行爲可控

00:05:24.124 --> 00:05:30.797 
JavaScript就負責下載
任何需要的文件

00:05:31.665 --> 00:05:33.600 
來展示用戶看的模板

00:05:35.769 --> 00:05:39.473 
並且JavaScript還負責
處理用戶所有的事件

00:05:39.540 --> 00:05:41.275 
並且正確的響應事件

00:05:46.480 --> 00:05:49.349 
第一步
打開Xcode

00:05:50.751 --> 00:05:53.654 
Xcode提供了TVML
類型的應用模板

00:05:53.720 --> 00:05:56.089 
這是你
開發的應用的起點

00:05:59.026 --> 00:06:01.929 
這是部分代碼
由模板生成

00:06:04.364 --> 00:06:08.135 
這裏的第一步驟是
修改JavaScript URL

00:06:08.202 --> 00:06:10.137 
指向主要的JavaScript文件

00:06:12.773 --> 00:06:16.310 
下一步是創建application
controller上下文

00:06:16.810 --> 00:06:18.712 
關聯javaScript URL

00:06:19.713 --> 00:06:23.083 
你也可以指定啓動選項

00:06:23.150 --> 00:06:26.019 
這些選項會在啓動時
傳遞給JavaScript

00:06:28.255 --> 00:06:30.958 
最後一個步驟是創建一個
application controller實例

00:06:31.024 --> 00:06:32.726 
基於之前的上下文和窗口

00:06:33.760 --> 00:06:37.464 
下載你的關鍵JavaScript
文件並執行該文件

00:06:37.865 --> 00:06:40.133 
然後控制權交給JavaScript

00:06:41.768 --> 00:06:44.638 
你也可以指定一個代表...

00:06:46.206 --> 00:06:48.175 
來監控你的controller狀態

00:06:49.977 --> 00:06:53.146 
比如
啓動項目的時候提示是成功還是失敗了

00:06:57.084 --> 00:06:58.886 
接下來我們討論下模板

00:07:04.525 --> 00:07:06.894 
TVML是一個Markup規範

00:07:07.427 --> 00:07:09.897 
用於定義符合Apple-TV
規範的模板

00:07:12.266 --> 00:07:16.036 
當Markup展示在導航欄的時候

00:07:16.103 --> 00:07:19.039 
從JavaScript編譯成UI

00:07:20.374 --> 00:07:24.178 
一旦展示完成
你可以繼續更改XML

00:07:25.379 --> 00:07:29.383 
這些更改也會動態渲染到用戶界面

00:07:31.885 --> 00:07:34.755 
外面的模板看上去還是正常的

00:07:35.656 --> 00:07:38.025 
你不必做額外的樣式化工作

00:07:38.792 --> 00:07:41.295 
只需要填充內容就行
然後就可以繼續往下操作

00:07:43.363 --> 00:07:46.433 
但是你可以更改外觀

00:07:46.500 --> 00:07:50.871 
和行爲 通過使用樣式化工具
來適配 [inaudible]

00:07:53.674 --> 00:07:55.075 
關於標記Markup

00:07:55.809 --> 00:07:59.213 
文檔是一個實體
用來包裝模板

00:08:00.747 --> 00:08:03.317 
這是XML結構樹
展示了文檔結構

00:08:04.151 --> 00:08:05.752 
它有兩個子元素

00:08:06.386 --> 00:08:09.723 
第一個是head元素
具有自己的樣式

00:08:09.790 --> 00:08:13.160 
封裝了
所有你定義的樣式

00:08:15.028 --> 00:08:17.664 
第二個元素是
templateName

00:08:18.866 --> 00:08:20.167 
以及它的內容

00:08:22.669 --> 00:08:26.440 
每個模板的名字唯一
並且具有功能性

00:08:28.709 --> 00:08:30.744 
我們來看一下其中的一個
模板

00:08:33.447 --> 00:08:36.683 
這是iTunes Movies應用
的Top Movies頁面

00:08:39.785 --> 00:08:42.688 
這個模板允許你滾動
所有的內容棧

00:08:44.191 --> 00:08:46.793 
在Markup面板
稱之爲stackTemplate

00:08:48.629 --> 00:08:50.030 
在這個例子裏

00:08:51.431 --> 00:08:54.301 
它的模板
使用XML展示

00:08:55.602 --> 00:08:58.438 
在模板的根節點是一個
collectionList元素

00:08:58.505 --> 00:09:02.009 
封裝了各種
集合類型 比如carousel

00:09:02.075 --> 00:09:04.811 
shelves grids
以及其他支持的類型

00:09:09.750 --> 00:09:12.286 
現在這裏的top的控制器是
carousel control

00:09:13.153 --> 00:09:15.556 
這支持水平的內容瀏覽

00:09:16.490 --> 00:09:18.258 
基於中間內容的瀏覽

00:09:22.496 --> 00:09:26.567 
這種控制器類型在空白狀態下
會自動滾動內容

00:09:28.836 --> 00:09:33.841 
而創建這個控制器Markup很簡單

00:09:35.576 --> 00:09:40.547 
你只要定義一個section並且
列出list可預見lockup情況

00:09:41.248 --> 00:09:43.584 
不需要進行額外的配置

00:09:46.620 --> 00:09:49.456 
在這個carousel下面是
一個shelf

00:09:50.424 --> 00:09:53.193 
它也可控制
水平滾動內容

00:09:55.395 --> 00:09:58.832 
而展示這個的Markup
和carousel很相似

00:10:00.534 --> 00:10:03.337 
但是shelf允許你指定一個標頭

00:10:04.037 --> 00:10:06.073 
且可以包含一個或多個section

00:10:06.874 --> 00:10:09.309 
每個section也可以自帶
一個標頭

00:10:09.676 --> 00:10:11.645 
而且必須包含一個或多個lockup

00:10:13.814 --> 00:10:14.882 
那麼lockup又是什麼呢？

00:10:16.083 --> 00:10:17.918 
lockup是一個UI控制器

00:10:19.486 --> 00:10:22.523 
封裝了圖片
和文字元素

00:10:26.193 --> 00:10:27.728 
這是一個[inaudible]

00:10:30.597 --> 00:10:32.299 
回到我們的例子應用

00:10:32.999 --> 00:10:36.236 
若你留意
只有當前聚焦的lockup

00:10:36.303 --> 00:10:38.038 
的文檔元素是可見的

00:10:39.273 --> 00:10:41.375 
這不是默認的
框架行爲

00:10:43.076 --> 00:10:47.314 
這是一個例子告訴你
如何定製樣式

00:10:48.215 --> 00:10:49.683 
我來演示下具體怎麼做

00:10:51.785 --> 00:10:53.587 
我在這定義了一個類

00:10:54.188 --> 00:10:56.190 
我把它的高亮屬性設置爲

00:10:56.823 --> 00:11:00.394 
爲選取框的值
並且在高亮的時候才顯示

00:11:01.328 --> 00:11:02.563 
然後設置這個類

00:11:02.629 --> 00:11:04.765 
的文字元素
和lockup不匹配

00:11:05.599 --> 00:11:07.167 
然後你就可以看到這個行爲了

00:11:09.169 --> 00:11:12.840 
但是 這只是一個簡單
的定製化例子

00:11:13.140 --> 00:11:14.975 
我再給大家
演示一些其他例子

00:11:16.910 --> 00:11:18.312 
這又是一個
stackTemplate

00:11:20.047 --> 00:11:23.750 
我們現在有一個banner
並且指定了它的背景圖片

00:11:23.817 --> 00:11:25.919 
banner就在collectionList的相鄰位置

00:11:27.221 --> 00:11:29.957 
這是背景顏色
爲模板而設定

00:11:30.023 --> 00:11:32.559 
這個模板無縫隙的
協調了背景顏色

00:11:32.626 --> 00:11:34.895 
和banner的背景圖片顏色
我們可以看到是這個效果

00:11:36.330 --> 00:11:39.032 
banner標題的結構

00:11:39.099 --> 00:11:42.035 
以及按鈕的結構
都是可以定製和配置的

00:11:45.305 --> 00:11:48.542 
另一個熟悉的例子
是一個movie bundle例子

00:11:49.009 --> 00:11:50.544 
這也是一個
stackTemplate

00:11:54.715 --> 00:11:56.850 
這個模板的背景圖片是

00:11:57.117 --> 00:12:01.154 
有框架生成的
你只要指定一個圖片

00:12:01.221 --> 00:12:02.523 
設置爲英雄形象圖片元素

00:12:04.458 --> 00:12:08.962 
再一次的
標題 shelf

00:12:09.029 --> 00:12:11.532 
以及按鈕的佈局也定製化了

00:12:14.601 --> 00:12:18.405 
而且還有豐富的模板
可供大家選擇

00:12:19.840 --> 00:12:21.241 
使用樣式工具

00:12:22.009 --> 00:12:24.578 
可以創建獨特的用戶體驗

00:12:24.645 --> 00:12:26.046 
符合大家品牌的特色

00:12:28.715 --> 00:12:34.087 
TVML Catalogue是一個
資源庫可以瀏覽模板和與模板交互

00:12:35.222 --> 00:12:36.190 
請檢查一下

00:12:39.660 --> 00:12:41.528 
就像我之前所說

00:12:42.429 --> 00:12:46.033 
TVMLKit搭建了
原生和web應用的關聯

00:12:47.434 --> 00:12:50.971 
你會發現可以很簡單的創建

00:12:51.038 --> 00:12:54.942 
豐富和複雜的用戶界面
只要使用簡單的Markup就可以了

00:12:56.310 --> 00:12:59.580 
我給大家演示下JavaScript
驅動應用的原理

00:13:02.883 --> 00:13:07.888 
它所提供的JavaScript引擎

00:13:08.188 --> 00:13:10.691 
由框架的
JavaScriptCore驅動

00:13:12.292 --> 00:13:14.728 
而內置的Web Inspector

00:13:14.795 --> 00:13:17.831 
也提供給了打擊調試和優化

00:13:21.001 --> 00:13:22.803 
並且從tvOS 10開始

00:13:22.870 --> 00:13:25.672 
JavaScriptCore
對ES6有很好的兼容了

00:13:32.212 --> 00:13:35.182 
TVMLKit添加了
基於平臺的API

00:13:35.249 --> 00:13:37.084 
輔助驅動應用

00:13:39.052 --> 00:13:42.623 
現在標準的web API
像XMLHttpRequest

00:13:42.689 --> 00:13:44.892 
是傳輸
客戶端和服務器端的數據

00:13:45.959 --> 00:13:49.396 
DOM是分析
轉換和操作[inaudible]

00:13:49.463 --> 00:13:52.466 
監聽用戶時間 本地存儲

00:13:52.533 --> 00:13:55.269 
會話存儲
都是由框架提供的

00:13:57.237 --> 00:14:01.942 
另外TVMLKit
也是提供了平臺相關的API

00:14:02.409 --> 00:14:04.578 
比如管理
導航棧

00:14:05.812 --> 00:14:07.147 
獲取系統信息

00:14:09.449 --> 00:14:13.353 
播放[inaudible]
圖片輪播還有其他功能

00:14:15.255 --> 00:14:16.423 
除此之外

00:14:17.491 --> 00:14:21.228 
框架也爲大家提供了簡單的API

00:14:21.295 --> 00:14:22.629 
處理媒體文件的播放功能

00:14:25.766 --> 00:14:28.602 
現在有個重要的事情
我要指出來

00:14:28.669 --> 00:14:31.772 
有一個單獨的
JavaScript上下文

00:14:31.839 --> 00:14:33.340 
針對每個controller
都有一個

00:14:33.774 --> 00:14:36.310 
你可以你管理所有的document

00:14:36.376 --> 00:14:37.845 
這個單獨的上下文中

00:14:40.948 --> 00:14:44.418 
我來講解下
一些關鍵類

00:14:47.621 --> 00:14:49.456 
第一個是應用對象

00:14:50.057 --> 00:14:53.060 
應用對象提供了回調方法
而且是必須註冊的方法

00:14:53.560 --> 00:14:55.829 
最重要的調用是onLaunch方法

00:14:56.997 --> 00:14:59.766 
指示你所有
JavaScript應用的起點

00:15:02.703 --> 00:15:06.273 
另一個 API 我要提到的是
關於處理錯誤的方法

00:15:08.242 --> 00:15:09.276 
叫做onError

00:15:09.343 --> 00:15:11.378 
你必須提供良好的回調函數

00:15:11.445 --> 00:15:13.680 
處理那些異常
和失敗的情況

00:15:15.449 --> 00:15:18.585 
一旦控制
交給JavaScript

00:15:19.686 --> 00:15:22.689 
你第一個要做的事情是
展示一個文檔

00:15:24.191 --> 00:15:25.192 
爲了實現這個

00:15:25.559 --> 00:15:28.829 
NavigationDocument類
就需要大家好好處理了

00:15:29.897 --> 00:15:33.934 
這個類等同於和UINavigationController
在TVMLKit這個框架裏

00:15:35.502 --> 00:15:38.005 
裏面有一個全局的
預置的實例

00:15:38.071 --> 00:15:40.007 
你現在可以創建更多的實例了

00:15:41.341 --> 00:15:44.344 
現在你只要負責
添加document

00:15:44.945 --> 00:15:46.647 
把他們彈出

00:15:46.713 --> 00:15:49.283 
是由Menu手勢操作負責
也是屬於框架處理的情形

00:15:52.419 --> 00:15:56.156 
還有三個主要的API
你們會經常用到

00:15:57.257 --> 00:16:01.328 
頭兩個是pushDocument
和replaceDocument

00:16:02.930 --> 00:16:04.131 
他們是一起出現的

00:16:05.065 --> 00:16:08.035 
我來演示下推薦的
操作方法

00:16:11.104 --> 00:16:13.607 
只是一個代碼段
創建一個模板

00:16:16.310 --> 00:16:19.646 
通常當你處理
處理用戶請求或者啓動應用的時候

00:16:20.314 --> 00:16:22.249 
你會展現一個Spinner

00:16:23.217 --> 00:16:25.752 
以便於用戶知道
當前是什麼情況

00:16:27.621 --> 00:16:30.490 
一旦你創建了
這個loading文檔

00:16:30.557 --> 00:16:33.327 
你應該使用pushDocument
把它放到棧頂

00:16:35.128 --> 00:16:37.798 
當你等待
獲取到遠程數據的時候

00:16:38.899 --> 00:16:39.967 
並且已經準備好

00:16:40.434 --> 00:16:44.037 
之後你會替換
掉當前的loading文檔

00:16:44.104 --> 00:16:45.439 
成期望的新內容

00:16:46.807 --> 00:16:49.643 
爲做到這個 要用
replaceDocument方法

00:16:51.144 --> 00:16:52.846 
這是一個常見的模式

00:16:53.780 --> 00:16:56.817 
我們鼓勵
你用正確的方式展示Spinner

00:16:56.884 --> 00:16:59.086 
當你準備從
遠端獲取數據的時候

00:17:04.858 --> 00:17:06.827 
最後一個API
是presentModal

00:17:07.461 --> 00:17:10.329 
是用來展示警告和錯誤信息的

00:17:10.396 --> 00:17:12.699 
或者以不覆蓋的形式
展示其他的模板

00:17:15.469 --> 00:17:19.006 
現在影響TV觀看體驗的關鍵
是視頻播放器功能

00:17:19.740 --> 00:17:21.642 
我們對此進行了簡化

00:17:22.576 --> 00:17:24.011 
讓我來演示給大家

00:17:25.579 --> 00:17:27.481 
只需要10行不到的代碼

00:17:27.948 --> 00:17:32.252 
你就可以配置完成具有全部特性的
視頻播放器模塊

00:17:33.620 --> 00:17:35.255 
我帶大家看下
這段代碼

00:17:36.390 --> 00:17:39.826 
首先 創建一個MediaItem
它的類型是video

00:17:39.893 --> 00:17:41.662 
並且設置視頻流的URL

00:17:43.664 --> 00:17:47.968 
你也可以指定標題
藝術家URL描述

00:17:48.035 --> 00:17:49.770 
使得其信息完整些

00:17:49.837 --> 00:17:52.239 
我們可在信息面板裏
看到視頻播放器模塊體驗信息

00:17:54.875 --> 00:17:58.946 
接下來 創界一個播放列表
添加一個或多個視頻

00:18:00.314 --> 00:18:02.950 
最後一步是創建
一個player實例

00:18:03.350 --> 00:18:06.053 
用於操作播放列表
和展示播放器

00:18:07.621 --> 00:18:11.325 
完成之後 我們就實現了一個完整的
視頻播放器提供豐富的用戶體驗

00:18:15.028 --> 00:18:16.396 
另外

00:18:19.333 --> 00:18:24.404 
所有特性像 處理
空隙 內容保護

00:18:25.105 --> 00:18:27.608 
章節分組 時間
[inaudible]

00:18:28.375 --> 00:18:30.611 
以及其他很多API
都已經提供了

00:18:30.677 --> 00:18:32.379 
在該JavaScript環境裏

00:18:33.881 --> 00:18:35.282 
和之前視頻播放器模塊一樣

00:18:36.283 --> 00:18:39.086 
我們擴展了音頻播放功能

00:18:40.654 --> 00:18:43.123 
並且使用起來一樣很方便

00:18:44.658 --> 00:18:47.728 
唯一變化的是需要綁定的是音頻

00:18:47.794 --> 00:18:49.296 
以及音頻文件的URL

00:18:51.965 --> 00:18:53.200 
這個可以提供

00:18:53.767 --> 00:18:56.970 
漂亮而功能完整的Audio
Now Playing體驗

00:18:57.638 --> 00:18:59.406 
就和Apple Music一樣

00:19:01.074 --> 00:19:03.577 
如果你正在構建一個音樂應用程序

00:19:05.345 --> 00:19:07.347 
你還需要做一件事情

00:19:07.848 --> 00:19:09.716 
就是配置你的應用

00:19:10.184 --> 00:19:12.986 
這樣你的音頻文件就可以支持倒帶

00:19:13.053 --> 00:19:14.888 
現在是處於休眠狀態

00:19:16.156 --> 00:19:19.259 
這樣很類似
就和在iOS上操作一樣

00:19:20.661 --> 00:19:25.499 
設置一個支持倒帶的category
在AV會話面板上

00:19:26.433 --> 00:19:29.269 
並且添加背景
模式到info.plist

00:19:29.970 --> 00:19:31.772 
剩下的事情就由框架去完成

00:19:33.607 --> 00:19:37.010 
這樣之後 我想邀請
Jeff上臺

00:19:37.077 --> 00:19:39.413 
來演示構建
TVMLKit應用

00:19:40.013 --> 00:19:40.848 
謝謝大家

00:19:46.820 --> 00:19:47.888 
謝謝你Nurinder

00:19:47.955 --> 00:19:48.789 
大家好

00:19:48.856 --> 00:19:49.857 
我是Jeff

00:19:49.923 --> 00:19:52.659 
我在這爲大家演示TVML應用

00:19:52.726 --> 00:19:55.495 
我要先強調下
我們目前已經討論的內容

00:19:56.763 --> 00:20:01.235 
你就會發現
構建一個原生應用是多麼簡單

00:20:01.301 --> 00:20:03.804 
只要使用TVMLKit構建
支持Apple TV的應用

00:20:05.305 --> 00:20:09.576 
爲了這次演示 我們會演示
WWDC 的一個簡單版本

00:20:10.811 --> 00:20:12.346 
關於用戶界面

00:20:12.412 --> 00:20:14.414 
我們有多個shelf內

00:20:15.182 --> 00:20:17.184 
每個shelf
會包含會話視頻

00:20:17.251 --> 00:20:18.886 
跟蹤會議

00:20:20.320 --> 00:20:23.490 
所以想象下你可爲每一個
開發者工具提供一個shelf

00:20:23.557 --> 00:20:26.360 
還可以提供給應用框架 設計等等

00:20:26.727 --> 00:20:27.761 
我們開始吧

00:20:35.636 --> 00:20:38.238 
這是一個Xcode項目
我們之前就已經準備好了

00:20:39.072 --> 00:20:42.242 
我們先從AppDelegate開始
這也是我們應用的入口

00:20:45.646 --> 00:20:48.081 
在應用裏
didFinishLaunchingWithOptions

00:20:49.249 --> 00:20:51.852 
正如你看到的
這幾行代碼

00:20:52.953 --> 00:20:56.089 
我們已經啓動了
運行這個TVML應用

00:20:59.026 --> 00:21:01.962 
我們有在這指定了
JavaScriptApplicationURL

00:21:02.029 --> 00:21:04.998 
指向一個server
已經運行在這個Mac上

00:21:06.967 --> 00:21:08.869 
所以如果你看下
這裏的目錄

00:21:09.636 --> 00:21:12.506 
這就是我配置
提供文件服務的服務器位置

00:21:14.408 --> 00:21:17.110 
你也看到 這裏有個文件
名爲application.js

00:21:17.644 --> 00:21:20.881 
這個JavaScript文件
驅動TVML應用

00:21:23.217 --> 00:21:26.753 
這裏有一個JSON文件
包含了所有數據

00:21:26.820 --> 00:21:28.121 
這次演示需要的數據

00:21:29.489 --> 00:21:31.692 
我們來看看這個
application.js文件

00:21:34.695 --> 00:21:38.365 
在這個文件的頂部
我們聲明瞭一些變量

00:21:38.432 --> 00:21:39.800 
來保存我們的數據

00:21:42.603 --> 00:21:46.640 
在App.onLaunch
這個方法裏我們調用一個方法

00:21:46.707 --> 00:21:48.909 
當TVML啓動的時候

00:21:50.677 --> 00:21:54.314 
所以我們在這主要做的事情是
獲取我們的JSON文件

00:21:54.381 --> 00:21:56.950 
然後創建一個用戶界面
並使用我們之前提到的數據

00:21:58.252 --> 00:21:59.920 
在我們繼續往下之前

00:21:59.987 --> 00:22:02.823 
我們應該展示一個
loading提示在屏幕上

00:22:03.323 --> 00:22:05.893 
在通過網絡平臺獲取想要的信息時
這種方法通常會被推薦

00:22:05.959 --> 00:22:08.128 
可以爲用戶帶來更好的用戶體驗

00:22:09.196 --> 00:22:10.797 
所以我在這添加了一些代碼

00:22:14.101 --> 00:22:19.039 
在TVMLKit做這些操作時是爲了
展示一個loading模板文檔

00:22:19.573 --> 00:22:22.843 
這些都是在這個方法裏完成的
叫做createLoadingDocument

00:22:24.244 --> 00:22:25.979 
我們調到這個方法

00:22:29.316 --> 00:22:33.253 
你會看到我們基本上給loading
模板創建了Markup

00:22:34.288 --> 00:22:38.492 
然後創建一個DOM文檔對象
使用的是DOMParser

00:22:40.894 --> 00:22:42.596 
現在回到launch方法

00:22:44.231 --> 00:22:46.066 
在創建loading文檔後

00:22:46.133 --> 00:22:48.502 
我們現在使用
navigationDocument對象

00:22:48.569 --> 00:22:50.037 
把文檔推送到屏幕上

00:22:50.804 --> 00:22:53.907 
這就好像在UIKit裏使用
UINavigationController一樣

00:22:56.410 --> 00:22:59.213 
現在我們有了loading
Spinner顯示在屏幕上

00:22:59.746 --> 00:23:02.449 
我們現在回調用一個方法
我創建的叫做...

00:23:04.985 --> 00:23:05.986 
request JSON

00:23:06.386 --> 00:23:09.857 
它會使用內置的
XMLHttpRequest對象

00:23:09.923 --> 00:23:14.361 
爲了獲取JSON文件 然後
在回調函數裏響應

00:23:17.965 --> 00:23:18.832 
接下來

00:23:19.833 --> 00:23:22.236 
我們要轉換JSON文本
就是我們剛剛獲得的

00:23:22.302 --> 00:23:24.338 
到我們的JavaScript
數據結構裏

00:23:26.673 --> 00:23:29.209 
現在我們的UI調用
一個shelves棧

00:23:29.276 --> 00:23:31.945 
我們會創建
一個stackTemplate文檔

00:23:33.780 --> 00:23:35.349 
現在讓我在這裏貼一段代碼

00:23:39.520 --> 00:23:42.489 
然後跳到
我們的createStackDocument方法

00:23:45.158 --> 00:23:46.226 
現在你可以看到

00:23:46.827 --> 00:23:50.163 
和我們創建Markup類似
爲了早些創建loading模板

00:23:50.664 --> 00:23:53.333 
我們在創建Markup
爲這裏的stackTemplate

00:23:54.868 --> 00:23:57.237 
在這個stackTemplate
的Markup裏

00:23:57.571 --> 00:23:59.540 
我們已在此
添加了頂部banner圖片

00:24:01.275 --> 00:24:03.110 
在collectionList裏

00:24:03.577 --> 00:24:06.980 
我們實際上在瀏覽
會議裏的每一個觸控項目

00:24:07.047 --> 00:24:09.449 
並且創建一個shelf元素
每一個都創建一個

00:24:09.983 --> 00:24:12.586 
這些都通過使用
createShelfElement方法

00:24:12.653 --> 00:24:13.620 
我們現在看到了

00:24:16.456 --> 00:24:18.025 
現在我進入這個方法裏面

00:24:19.593 --> 00:24:23.363 
我們再一次爲單獨一個shelf
創建Markup

00:24:25.065 --> 00:24:30.070 
在這個方法體裏面 爲每個會話視頻
創建一個lockup元素

00:24:33.006 --> 00:24:35.742 
我們跳到
createLockupElement方法

00:24:38.278 --> 00:24:40.447 
你會發現
我們正在創建的Markup

00:24:40.514 --> 00:24:43.083 
給這個單獨的lockup元素
描述了會話的信息

00:24:43.851 --> 00:24:48.188 
在這個處理情形裏 我們捕獲
sessionId作爲定製的屬性

00:24:49.256 --> 00:24:53.427 
我們也在添加圖片 設置
寬體 高度 和 標題

00:24:55.128 --> 00:24:58.732 
我們回顧下 我們創建了
一個stackTemplate文檔

00:24:58.799 --> 00:25:02.469 
包含了多個shelf元素
在美國shelf元素裏

00:25:02.536 --> 00:25:04.304 
我們有多個lockup元素

00:25:04.905 --> 00:25:06.974 
我們再回到剛纔那個launch方法

00:25:12.246 --> 00:25:14.214 
在我們創建
stackDocument後

00:25:14.281 --> 00:25:16.817 
我們會使用
navigationDocument對象

00:25:16.884 --> 00:25:19.853 
來替換loading文檔
目前這個文檔是可見的

00:25:19.920 --> 00:25:21.922 
使用我們的
stackDocument

00:25:27.661 --> 00:25:29.663 
這樣之後我們已經準備好運行

00:25:30.264 --> 00:25:31.698 
我們再切換到Apple TV

00:25:42.776 --> 00:25:43.844 
然後繼續

00:25:43.911 --> 00:25:46.914 
我們現在擁有一個漂亮的UI
供shelve棧使用

00:25:52.619 --> 00:25:55.489 
美國shelf包含圖片
lockup或會話視頻

00:25:57.090 --> 00:25:59.526 
如你所見 只要少量代碼

00:25:59.593 --> 00:26:02.062 
我們就可以創建一個應用
一個非常棒的應用

00:26:02.129 --> 00:26:04.031 
在家裏的Apple TV上看棒極了

00:26:05.799 --> 00:26:08.335 
下一件需要做的事情

00:26:08.402 --> 00:26:10.871 
是在我們點擊lockup時
能夠播放視頻

00:26:11.405 --> 00:26:12.940 
現在什麼都沒做

00:26:13.874 --> 00:26:16.443 
所以我們回到Xcode
然後添加這個功能

00:26:22.916 --> 00:26:24.418 
回到我們的launch方法

00:26:26.653 --> 00:26:28.422 
我會添加這兩行代碼

00:26:35.996 --> 00:26:38.799 
這會註冊選擇和播放事件

00:26:39.266 --> 00:26:41.502 
選擇事件在
你按住觸控板的時候觸發

00:26:41.568 --> 00:26:44.104 
Siri Remote觸控板
播放事件觸發的是

00:26:44.171 --> 00:26:45.639 
在你按住
Play按鈕的時候

00:26:46.106 --> 00:26:47.241 
在這兩種情形下

00:26:48.075 --> 00:26:50.444 
我的playSelectedLockup
方法會被調用

00:26:51.845 --> 00:26:53.380 
我們進入這個方法

00:26:54.581 --> 00:26:55.516 
然後實現它

00:26:57.451 --> 00:26:59.520 
所以我們第一個要做的是...

00:27:02.856 --> 00:27:04.958 
獲取lockup元素
在這個時間裏獲取

00:27:07.027 --> 00:27:10.998 
我們可以獲取會話信息通過
定製屬性裏的sessionId

00:27:14.001 --> 00:27:16.904 
下一步 我們會創建一個
新的mediaItem對象

00:27:22.910 --> 00:27:27.281 
給嵌入的視頻創建並且初始化它
使用視頻的URL

00:27:28.182 --> 00:27:29.149 
就像這裏一樣

00:27:31.318 --> 00:27:34.454 
我們也會提取其他的
關於會話的信息

00:27:34.521 --> 00:27:38.125 
比如標題 描述
軌道和藝術品

00:27:41.061 --> 00:27:44.164 
接着我們會創建一個播放列表對象

00:27:45.999 --> 00:27:48.001 
並且把mediaItem
對象推送進去

00:27:49.903 --> 00:27:52.973 
最後 我們
會創建一個新的player對象

00:27:54.842 --> 00:27:56.009 
設置播放列表

00:27:56.810 --> 00:28:00.480 
只要簡單的調用play方法
就可以全屏播放了

00:28:02.082 --> 00:28:04.484 
回顧下 我們現在
創建了一個player對象

00:28:05.185 --> 00:28:07.888 
這個對象有一個播放列表
包含有一個視頻對象

00:28:09.389 --> 00:28:11.124 
有了這些 我們來試試這個

00:28:14.761 --> 00:28:15.963 
回到UI

00:28:16.029 --> 00:28:18.866 
我們會使用 Siri Remote
並且點擊這個鎖

00:28:18.932 --> 00:28:21.335 
然後播放器就開始播放了
而且是在全屏模式下

00:28:31.812 --> 00:28:32.646 
謝謝

00:28:32.713 --> 00:28:35.349 
你可以點擊Menu按鈕
然後退出視頻

00:28:37.184 --> 00:28:39.520 
所以這就是
TVMLKit產生的播放器

00:28:40.220 --> 00:28:41.989 
謝謝大家的寶貴時間
接下來交給你了Nurinder

00:28:50.097 --> 00:28:51.865 
謝謝Jeff精彩的演示

00:28:54.034 --> 00:28:56.270 
只要少量的代碼

00:28:57.504 --> 00:29:01.742 
你就能創建一個功能完整的應用
並且有良好性能和外觀

00:29:05.879 --> 00:29:08.615 
這個空白在lockup行

00:29:09.683 --> 00:29:12.152 
陰影處理 文字處理

00:29:12.719 --> 00:29:14.154 
看起來合適

00:29:15.789 --> 00:29:19.193 
在我們繼續之前
概括一下你們剛纔所看到的

00:29:20.093 --> 00:29:24.064 
用Xcode裏面的TVML應用模版

00:29:24.364 --> 00:29:26.366 
創建並配置你的客戶端項目

00:29:28.902 --> 00:29:31.538 
你們學習瞭如何以JSON
創建一個簡單的加載文件

00:29:31.605 --> 00:29:35.275 
和一個複雜堆文件

00:29:36.243 --> 00:29:39.213 
且你們也學習瞭如何使用
NavigationDocument

00:29:39.279 --> 00:29:41.582 
來推送或者替換堆棧裏的文件

00:29:43.784 --> 00:29:46.820 
JavaScript
用來處理用戶事件

00:29:48.188 --> 00:29:53.160 
在這個例子中
我們處理選擇和播放事件

00:29:54.361 --> 00:29:58.899 
並且根據對應的
lockup來配置視頻播放

00:30:03.804 --> 00:30:06.139 
當我們介紹完了TVMLKit

00:30:06.206 --> 00:30:07.941 
你已經可以創建強大的應用

00:30:10.611 --> 00:30:12.012 
你們中很多人已經這麼做了

00:30:12.079 --> 00:30:13.080 
謝謝

00:30:17.918 --> 00:30:21.555 
你們已提供了一些很好的反饋
而且我們想做的更好

00:30:23.624 --> 00:30:25.292 
我們已經在這方面做了很多的努力

00:30:26.026 --> 00:30:28.829 
並且正在加入一些令人激動的新功能

00:30:29.530 --> 00:30:31.565 
它們是非常容易使用的

00:30:31.632 --> 00:30:34.034 
能使你的應用提高到更高的水準

00:30:35.435 --> 00:30:38.505 
爲了更好地闡述這些
現在我想邀請Parry上臺

00:30:39.373 --> 00:30:40.207 
謝謝

00:30:46.079 --> 00:30:46.947 
下午好

00:30:47.748 --> 00:30:50.817 
我叫Parry
我將帶你們一起來體驗一些新功能

00:30:50.884 --> 00:30:54.521 
這些功能是在tvOS 10
的TVMLKit中引進的

00:30:55.923 --> 00:31:00.794 
TVMLKit提供了非常適宜的
應用級別的功能

00:31:01.495 --> 00:31:04.198 
通過簡單而靈活的界面

00:31:05.999 --> 00:31:10.270 
我們在tvOS 10中的
新功能也是一樣的

00:31:11.071 --> 00:31:12.072 
比如

00:31:12.739 --> 00:31:14.842 
只要增加一個屬性

00:31:14.908 --> 00:31:17.144 
在搜索文件的搜索結果中

00:31:17.611 --> 00:31:20.380 
你就能讓結果有淡入淡出的動畫效果

00:31:20.447 --> 00:31:21.715 
在用戶輸入的時候

00:31:28.889 --> 00:31:32.426 
這給用戶提供了着迷的體驗

00:31:33.327 --> 00:31:35.462 
當他們試着去縮小結果範圍

00:31:39.166 --> 00:31:40.701 
或者如果你有一個音樂應用

00:31:42.202 --> 00:31:46.173 
只要在菜單欄頂層增加一個菜單項

00:31:46.940 --> 00:31:51.478 
你就能在那裏展示
Now Playing的音頻體驗

00:31:52.980 --> 00:31:54.915 
這些都是由TVMLKit來管理的

00:31:54.982 --> 00:31:58.418 
所以它就會隨着播放
開始和停止而進來和出去

00:32:01.054 --> 00:32:04.191 
這給你們的用戶提供了一種方便的辦法

00:32:04.992 --> 00:32:08.595 
來返回到播放列表和繼續聽音樂

00:32:11.465 --> 00:32:15.068 
所有這些功能是非常強大的

00:32:16.403 --> 00:32:18.972 
但同時它們又是非常容易實現的

00:32:20.908 --> 00:32:22.075 
爲了向你們展示這個

00:32:24.011 --> 00:32:25.746 
我想選擇其中的三個

00:32:27.814 --> 00:32:28.949 
來聊聊它們

00:32:30.417 --> 00:32:33.754 
在最後
實現你們在演示中所看到的功能

00:32:38.592 --> 00:32:39.793 
讓我們開始吧

00:32:41.395 --> 00:32:43.297 
我想講的第一個功能

00:32:43.864 --> 00:32:46.200 
亮色和暗色外觀

00:32:48.235 --> 00:32:53.907 
在tvOS 10中有一個
新的系統級別的暗色外觀

00:32:54.541 --> 00:32:56.210 
所有的應用都要採用它

00:32:58.879 --> 00:33:02.382 
你的TVMLKit應用也要應用它

00:33:02.916 --> 00:33:05.853 
通過設置應用的
info.plist文件

00:33:06.520 --> 00:33:07.888 
這是一件同樣你需要做的事

00:33:07.955 --> 00:33:10.123 
在你用UIKit寫應用的時候

00:33:12.125 --> 00:33:15.529 
所以你可以指定你的應用的外觀

00:33:16.964 --> 00:33:18.665 
你可以選擇亮色

00:33:19.833 --> 00:33:22.169 
暗色或者自動

00:33:22.569 --> 00:33:24.771 
這種情況下它會選擇系統的設置

00:33:28.575 --> 00:33:30.744 
但是無論你選了哪種

00:33:31.178 --> 00:33:35.382 
你的標準TVMLKit應用
會運行地非常好

00:33:35.716 --> 00:33:37.484 
而不需要更多的改動

00:33:40.454 --> 00:33:43.357 
我們所有的模版都配置了樣式

00:33:43.423 --> 00:33:45.425 
對亮色和暗色兩種外觀

00:33:46.793 --> 00:33:49.997 
需要時TVMLKit
會在兩者之間切換

00:33:50.397 --> 00:33:51.665 
所以你能方便地得到這個效果

00:33:56.637 --> 00:33:57.504 
但是

00:33:59.006 --> 00:34:02.809 
如果你在你的文件中有明確的樣式

00:34:04.745 --> 00:34:08.982 
那麼你需要選擇兩種外觀的樣式

00:34:09.882 --> 00:34:10.984 
舉個例子

00:34:12.418 --> 00:34:15.755 
這是一個含有標題的模版

00:34:16.690 --> 00:34:18.659 
它的顏色被設置成黑色

00:34:19.560 --> 00:34:22.094 
使用一個明確樣式

00:34:24.630 --> 00:34:26.867 
這個可能在暗色主題下不起作用

00:34:28.034 --> 00:34:29.136 
爲了能讓它工作

00:34:29.203 --> 00:34:32.206 
你需要定義類

00:34:32.739 --> 00:34:35.342 
對於這樣的外觀

00:34:38.178 --> 00:34:41.447 
爲了在tvOS 10中實現這個

00:34:41.949 --> 00:34:45.886 
我們新增了一個名爲
tv-template的多媒體功能

00:34:47.554 --> 00:34:49.556 
它有個功能稱爲tv-theme

00:34:51.891 --> 00:34:54.761 
你可以用它來創建一個多媒體查詢

00:34:55.228 --> 00:34:57.631 
對應於一種外觀

00:34:59.733 --> 00:35:03.370 
只要將你所有的樣式合在一起

00:35:04.171 --> 00:35:06.707 
按照它們的多媒體查詢分組

00:35:07.875 --> 00:35:09.209 
將它們放在文件中

00:35:09.977 --> 00:35:13.614 
TVMLKit將會爲你
挑選正確的樣式

00:35:16.817 --> 00:35:20.153 
所以只需要一丁點的樣式配置

00:35:21.054 --> 00:35:22.589 
和零行代碼

00:35:23.657 --> 00:35:27.828 
你的應用就實現了暗色主題

00:35:32.833 --> 00:35:37.938 
現在讓我繼續談
另外一些能提高用戶體驗的東西

00:35:38.539 --> 00:35:39.706 
但是要通過一種不同的方

00:35:40.707 --> 00:35:43.443 
讓我們聊聊內嵌式視頻

00:35:48.549 --> 00:35:49.883 
公平地講

00:35:50.450 --> 00:35:55.556 
視頻是電視觀看體驗中很重要的一部分

00:35:56.990 --> 00:36:00.027 
如果你有豐富的視頻資源

00:36:01.128 --> 00:36:04.765 
你就會想讓你的用戶感受到它

00:36:05.098 --> 00:36:06.466 
當他們一打開你的應用時

00:36:09.002 --> 00:36:11.004 
你的應用當中的內嵌式視頻

00:36:12.005 --> 00:36:13.407 
發揮了重要的作用

00:36:14.308 --> 00:36:18.111 
爲了給大家展示
這會給你們的應用帶來什麼不同

00:36:19.713 --> 00:36:23.050 
我們創建了
你們剛剛看到的那個預覽演示

00:36:23.917 --> 00:36:25.485 
但是有內嵌式視頻在裏面

00:36:27.087 --> 00:36:27.988 
讓我們來看一下

00:36:43.237 --> 00:36:44.404 
這是流暢的

00:36:44.838 --> 00:36:48.242 
不但瀏覽體驗毫不突兀

00:36:48.609 --> 00:36:49.776 
而且迎合的非常好

00:36:50.444 --> 00:36:51.845 
這使人身臨其境

00:36:55.015 --> 00:36:59.520 
正如你所料
TVMLKit幫你做了大部分的工作

00:37:00.287 --> 00:37:04.258 
你只需要與這個上層接口打交道

00:37:05.225 --> 00:37:06.493 
讓我們來看一下

00:37:11.698 --> 00:37:15.202 
在TVMLKit中

00:37:15.569 --> 00:37:18.071 
你要嵌入一個播放器

00:37:18.672 --> 00:37:21.208 
和一個播放區域在你的文件中

00:37:21.875 --> 00:37:24.811 
很可能 它會在一個lockup裏面

00:37:30.184 --> 00:37:32.719 
TVMLKit會幫你處理播放

00:37:33.387 --> 00:37:34.922 
你所需要做的所有事情就是

00:37:35.656 --> 00:37:38.492 
指定你希望的開始時間

00:37:39.860 --> 00:37:43.497 
所以你可以說它應該開始 或者

00:37:44.031 --> 00:37:46.400 
當包含的lockup得到關注的時候

00:37:47.901 --> 00:37:49.970 
抑或是一旦它出現在屏幕上的時候

00:37:53.040 --> 00:37:57.477 
你可以控制讓內嵌式視頻變成全屏播放

00:38:00.180 --> 00:38:03.350 
如果你有高級用戶案例

00:38:04.218 --> 00:38:06.353 
比如要用FairPlay進行加密

00:38:07.955 --> 00:38:11.291 
那麼你可以用
JavaScript控制嵌入播放器

00:38:12.326 --> 00:38:13.961 
通過它的API

00:38:14.862 --> 00:38:16.430 
你可以實現這個

00:38:20.701 --> 00:38:26.974 
現在你可用TVMLKit內嵌式視頻
只需要簡單的三個步驟

00:38:28.408 --> 00:38:30.844 
第一 配置模版

00:38:33.847 --> 00:38:37.618 
第二 設置

00:38:40.821 --> 00:38:45.692 
第三 你想要處理觸發切換全屏模式

00:38:46.593 --> 00:38:49.363 
讓我們再深入地看一下這些

00:38:53.467 --> 00:38:56.637 
我們已經將模版配置的非常直觀

00:38:57.471 --> 00:39:02.209 
我們在TVML中增加了一個新的元素
稱爲mediaContent

00:39:03.443 --> 00:39:08.248 
你可以用它在lockup中包裹圖片

00:39:08.315 --> 00:39:10.150 
如果你想嵌入視頻的話

00:39:13.120 --> 00:39:16.390 
這會使lockup
擁有一致的功能和外觀

00:39:17.291 --> 00:39:18.825 
在視頻播放開始之前

00:39:23.130 --> 00:39:26.867 
lockup裏面的圖片提供了邊界

00:39:26.934 --> 00:39:28.468 
視頻在其中播放

00:39:31.805 --> 00:39:36.443 
也可通過mediaContent的
屬性來指定播放模式

00:39:36.510 --> 00:39:40.180 
一旦lockup得到了焦點
或者當它出現在屏幕上時

00:39:40.581 --> 00:39:41.882 
或者是當它出現在屏幕

00:39:43.383 --> 00:39:44.484 
舉個例子

00:39:46.086 --> 00:39:47.321 
這是lockup

00:39:49.122 --> 00:39:50.791 
這是mediaContent

00:39:52.826 --> 00:39:54.862 
包含了lockup的圖片

00:39:58.332 --> 00:40:01.068 
圖片的寬度和高度

00:40:04.137 --> 00:40:06.707 
設置了視頻播放的邊界

00:40:11.044 --> 00:40:14.081 
第二步 配置播放器

00:40:15.215 --> 00:40:18.585 
現在mediaContent中的
每一個元素

00:40:19.286 --> 00:40:21.221 
有着它自己的播放器

00:40:23.423 --> 00:40:26.360 
而且你可以用JavaScript
控制播放器

00:40:29.596 --> 00:40:32.299 
只要查詢播放器功能

00:40:32.399 --> 00:40:34.701 
從mediaContent
的DOMElement

00:40:36.370 --> 00:40:39.840 
在播放列表中
配置你想嵌入的多媒體項目

00:40:42.142 --> 00:40:43.477 
這是一小段對應的代碼

00:40:47.414 --> 00:40:48.849 
請仔細注意

00:40:50.083 --> 00:40:51.652 
播放器的配置

00:40:51.718 --> 00:40:54.021 
和你們剛纔在演示中
看到的沒什麼太大的區別

00:40:54.955 --> 00:40:56.089 
你創建了一個播放列表

00:40:56.323 --> 00:40:58.325 
添加了多媒體條目
並在播放器中設置它

00:41:00.460 --> 00:41:01.929 
但是有兩點不同之處

00:41:02.963 --> 00:41:03.864 
第一

00:41:05.098 --> 00:41:07.100 
你不需要創建一個新的播放器

00:41:08.335 --> 00:41:09.970 
你只要使用內嵌播放器

00:41:12.206 --> 00:41:13.040 
第二

00:41:14.107 --> 00:41:17.511 
你需要提前就將它設置好而非等到
用戶選擇lockup時纔去處理它

00:41:19.112 --> 00:41:20.848 
你在提前做了

00:41:22.216 --> 00:41:26.119 
實際上 在推送文件之前你就做了

00:41:28.889 --> 00:41:30.757 
這讓我想起了一個重點

00:41:32.893 --> 00:41:34.695 
爲了更好的用戶體驗

00:41:35.062 --> 00:41:39.600 
在推送文件之前 你必須設置好播放器

00:41:41.435 --> 00:41:43.170 
一旦文件被加載

00:41:43.237 --> 00:41:45.906 
你可以在任意時間改變播放列表

00:41:51.812 --> 00:41:53.380 
最後一步

00:41:54.548 --> 00:41:56.149 
轉換到全屏

00:41:59.353 --> 00:42:00.988 
值得注意的是

00:42:01.054 --> 00:42:04.992 
TVMLKit不會爲你觸發轉換

00:42:06.360 --> 00:42:09.663 
這是期望你們實現的靈活性之一

00:42:12.199 --> 00:42:16.270 
所以你需增加
一個事件監聽器來選擇和播放

00:42:17.204 --> 00:42:18.472 
爲lockup

00:42:20.407 --> 00:42:22.509 
並且使用嵌入式播放器

00:42:22.576 --> 00:42:25.312 
來觸發轉換到全屏

00:42:27.447 --> 00:42:28.715 
舉個簡單的例子

00:42:30.017 --> 00:42:33.987 
這兒 我在選擇事件中
已經增加了一個事件監聽器...

00:42:35.756 --> 00:42:36.757 
在文件中

00:42:40.661 --> 00:42:45.632 
我將從事件目標子樹獲取
mediaContentElement

00:42:45.699 --> 00:42:46.900 
這將成爲lockup

00:42:46.967 --> 00:42:49.303 
因爲所有事件在lockup裏被分配

00:42:51.638 --> 00:42:53.874 
最後調用現有的

00:42:54.741 --> 00:42:57.444 
嵌入式播放器來觸發轉換

00:43:00.514 --> 00:43:03.617 
現在當你想做這件事情時
你已經能完全勝任

00:43:05.385 --> 00:43:10.691 
但是通過菜單動作
可以自動轉換回嵌入模式

00:43:15.462 --> 00:43:16.363 
就是那樣

00:43:17.064 --> 00:43:19.299 
通過這三個簡單的步驟

00:43:20.300 --> 00:43:23.370 
可以使你的應用的用戶界面

00:43:23.437 --> 00:43:26.340 
更逼真

00:43:29.343 --> 00:43:30.410 
但下一步會發生什麼？

00:43:34.047 --> 00:43:37.885 
當用戶已經在全屏模式會發生什麼呢？

00:43:38.285 --> 00:43:39.720 
他們在看你的內容

00:43:42.222 --> 00:43:45.526 
怎樣能使這個過程更有趣呢？

00:43:48.262 --> 00:43:51.398 
這引出了今天我想談論的第三個功能

00:43:51.465 --> 00:43:53.367 
讓你能完全地實現它

00:43:55.002 --> 00:43:57.771 
交互式視頻疊加層

00:44:00.541 --> 00:44:04.378 
在某種意義上 這和內嵌式視頻很相似

00:44:04.978 --> 00:44:08.549 
它讓你豐富你的內容

00:44:08.615 --> 00:44:10.384 
通過在頂層使用一個用戶界面

00:44:12.519 --> 00:44:14.354 
你可以用它來做很多事情

00:44:15.389 --> 00:44:16.290 
比如

00:44:17.724 --> 00:44:20.761 
你可以推薦更多的選項給用戶

00:44:21.028 --> 00:44:24.231 
使得他們能選擇選項 並且繼續觀看

00:44:25.666 --> 00:44:29.069 
你能讓他們瀏覽之前的廣告和片尾

00:44:29.870 --> 00:44:32.673 
給他們帶來完美的一口氣看完的體驗

00:44:37.644 --> 00:44:41.982 
或者你可以在
內容的頂部實現應用內購買

00:44:43.417 --> 00:44:46.620 
當用戶沉浸在這個體驗中時

00:44:50.390 --> 00:44:51.658 
甚至當你實現

00:44:52.960 --> 00:44:54.895 
一些東西簡單的像

00:44:55.295 --> 00:44:58.232 
互動元數據 比如投影

00:45:00.434 --> 00:45:05.572 
讓你的內容變得
更加引人入勝和具有互動性

00:45:10.811 --> 00:45:14.381 
與你已經看到的其它功能一樣
實現起來是非常簡單的

00:45:18.051 --> 00:45:22.689 
你只需要使用任意一個模版來創建文件

00:45:23.957 --> 00:45:25.092 
將它設定在播放器中

00:45:27.027 --> 00:45:30.364 
TVMLKit會展示這個文件

00:45:32.266 --> 00:45:34.034 
當視頻全屏播放時

00:45:36.436 --> 00:45:37.571 
這是對應的代碼

00:45:38.272 --> 00:45:41.508 
在tvOS 10中
我們給播放器添加了一個新的屬性

00:45:42.042 --> 00:45:43.810 
稱爲modalOverlayDocument

00:45:45.279 --> 00:45:48.215 
所以當你設置了文件的這個屬性

00:45:49.683 --> 00:45:53.654 
我們會在全屏視頻的頂部展現它

00:45:57.691 --> 00:45:59.993 
如果播放器已經在全屏模式下播放了

00:46:00.060 --> 00:46:02.296 
你的文件立即就會被展示了

00:46:04.932 --> 00:46:06.700 
但是如果播放器沒有在播放

00:46:07.467 --> 00:46:09.203 
或者說它是在嵌入模式下播放的

00:46:11.104 --> 00:46:14.842 
當視頻被全屏的時候它們就會被展示

00:46:15.242 --> 00:46:19.012 
所以這對你來說是非常方便的
只要在任意你想要的時間設置它

00:46:24.051 --> 00:46:26.920 
好了 讓我們看一下演示

00:46:27.754 --> 00:46:33.193 
讓我們來實現你們剛纔
在演示中看到的這些功能

00:46:33.794 --> 00:46:34.795 
爲了做它

00:46:35.162 --> 00:46:37.097 
讓我們歡迎Jeff上臺

00:46:37.598 --> 00:46:38.465 
Jeff

00:46:43.604 --> 00:46:45.172 
謝謝 Parry
大家好 又見面了

00:46:45.239 --> 00:46:46.640 
我來給大家展示一下新東西

00:46:48.909 --> 00:46:50.110 
所以回到Apple TV

00:46:52.079 --> 00:46:53.914 
這就是我們剛纔給你們看的演示

00:46:55.716 --> 00:46:56.750 
現在讓我們回到主頁

00:46:58.485 --> 00:46:59.820 
進入到設置應用

00:47:02.422 --> 00:47:05.225 
進入外觀設置

00:47:06.260 --> 00:47:08.195 
將外觀設爲暗色

00:47:10.230 --> 00:47:11.298 
回到主頁

00:47:12.332 --> 00:47:15.636 
因爲我們是用Xcode 8創建的
這個演示應用

00:47:16.036 --> 00:47:18.372 
我們在info.plist文件中
可以設置

00:47:18.438 --> 00:47:21.008 
來支持自動的用戶界面工具欄

00:47:21.575 --> 00:47:23.343 
這意味着我們的演示應用

00:47:23.410 --> 00:47:25.746 
就會自動地支持工具欄的外觀

00:47:26.780 --> 00:47:27.881 
讓我們來看看這會長什麼樣子

00:47:31.218 --> 00:47:32.286 
看吧

00:47:36.957 --> 00:47:39.660 
我們的UI看起來是多麼漂亮

00:47:40.627 --> 00:47:42.896 
而且 不需要一行代碼就能實現

00:47:44.898 --> 00:47:46.934 
現在讓我們聊聊嵌入視頻

00:47:49.002 --> 00:47:50.537 
對於我們的演示
我們想讓視頻

00:47:50.604 --> 00:47:53.440 
在lockup中自動地開始播放

00:47:54.474 --> 00:47:55.442 
正如Parry剛剛提過的那樣

00:47:55.509 --> 00:47:57.277 
需要三個步驟來實現這個

00:47:57.444 --> 00:48:00.380 
第一步是使用mediaContentElement
這個標誌

00:48:01.148 --> 00:48:03.917 
第二步是配置內嵌式播放器

00:48:04.518 --> 00:48:06.753 
第三步是處理全屏播放

00:48:07.321 --> 00:48:08.589 
讓我們回到Xcode

00:48:15.028 --> 00:48:17.264 
進入到createLockup函數

00:48:24.071 --> 00:48:27.040 
不同於創建標準的圖片lockup

00:48:28.575 --> 00:48:32.045 
我現在要添加一個新的
mediaContent元素標誌

00:48:36.850 --> 00:48:38.318 
用它來包裹我們的圖片

00:48:39.019 --> 00:48:40.521 
就是這樣
這就是第一步

00:48:40.854 --> 00:48:41.688 
非常簡單

00:48:42.823 --> 00:48:43.957 
然後來到第二步

00:48:45.559 --> 00:48:47.327 
Parry剛纔也提到了

00:48:47.394 --> 00:48:50.264 
每一個mediaContent
元素會內置

00:48:50.330 --> 00:48:51.431 
一個內嵌式播放器

00:48:51.965 --> 00:48:55.903 
所以我們要做的就是
配置這些內嵌式播放器

00:48:55.969 --> 00:48:59.139 
配置對應的播放列表
在我們展示文件之前

00:49:00.274 --> 00:49:02.242 
回到啓動功能

00:49:05.512 --> 00:49:07.147 
在我們展示這個文件之前

00:49:07.214 --> 00:49:09.616 
我需要調用一個我創建的函數 稱爲

00:49:11.218 --> 00:49:12.920 
configureMediaLockupElements

00:49:15.556 --> 00:49:16.790 
在這個函數內部

00:49:19.927 --> 00:49:22.429 
我們首先取出所有的
mediaContent元素

00:49:22.496 --> 00:49:23.497 
從這個文件中

00:49:25.999 --> 00:49:27.668 
對於每一個mediaContentElement

00:49:28.435 --> 00:49:30.037 
和前面的演示類似

00:49:30.103 --> 00:49:32.573 
我們要創建一個新的
mediaItem對象

00:49:34.308 --> 00:49:37.978 
一個新的播放列表對象包含
我們的mediaItem對象

00:49:39.479 --> 00:49:41.982 
但是我們在這裏不創建一個新的播放器

00:49:42.416 --> 00:49:44.484 
我們使用getFeature函數

00:49:45.586 --> 00:49:47.020 
來獲取內嵌式播放器

00:49:47.654 --> 00:49:49.389 
然後在播放列表中設置好它

00:49:51.358 --> 00:49:52.359 
這就是第二步了

00:49:53.460 --> 00:49:55.929 
最後一步是處理全屏播放

00:49:57.097 --> 00:49:59.466 
我們來看一下playSelectedLockup
這個函數

00:50:01.635 --> 00:50:04.671 
你應該記得它是從選擇和
播放事件中觸發的

00:50:09.343 --> 00:50:13.480 
這些代碼我們都不需要把它們替換掉

00:50:17.384 --> 00:50:19.987 
首先從事件中提取lockup元素

00:50:21.855 --> 00:50:24.925 
再從lockup元素中
提取mediaContent元素

00:50:26.159 --> 00:50:29.997 
使用getFeature函數
來訪問內嵌式播放器

00:50:31.498 --> 00:50:34.968 
我們只要調用播放讓它變成全屏

00:50:37.738 --> 00:50:39.039 
看一下它的樣子

00:50:54.688 --> 00:50:57.324 
正如你看到的一樣 視頻現在會開始

00:50:57.391 --> 00:50:59.593 
在lockup裏面自動地播放

00:51:01.728 --> 00:51:04.331 
當我點擊lockup 你會切換

00:51:04.398 --> 00:51:06.233 
視頻到全屏模式

00:51:06.300 --> 00:51:09.369 
歡迎來到2015年
Apple設計大獎

00:51:10.003 --> 00:51:11.905 
歡迎今晚大家的到來

00:51:11.972 --> 00:51:12.840 
非常酷的東西

00:51:12.906 --> 00:51:16.143 
你也可以按菜單鍵來退出全屏模式

00:51:20.414 --> 00:51:21.682 
這就是內嵌式視頻

00:51:22.382 --> 00:51:25.853 
我們想展示的下一個
新功能是互動的視頻疊加

00:51:26.420 --> 00:51:30.157 
這個新功能能讓你把一個UI

00:51:30.224 --> 00:51:31.859 
置於視頻上 當視頻在播放時

00:51:32.659 --> 00:51:36.330 
在我們的演示中
我們會展示一個列表包含

00:51:36.396 --> 00:51:39.099 
相關的視頻在播放視頻的頂部

00:51:40.267 --> 00:51:41.768 
回到Xcode

00:51:42.636 --> 00:51:44.505 
在playSelectedLockup函數中

00:51:46.106 --> 00:51:48.275 
調用我剛纔創建的一個函數

00:51:48.342 --> 00:51:52.679 
來創建一個疊加 函數名爲
createInteractiveVideoOverlay

00:51:54.615 --> 00:51:55.782 
在這個函數內部

00:52:00.287 --> 00:52:03.991 
我們創建了另一個
stackTemplate

00:52:06.894 --> 00:52:07.995 
只有一個shelf

00:52:09.730 --> 00:52:12.733 
在shelt裏面
有多個lockup元素

00:52:15.135 --> 00:52:17.604 
我們改變一下
stackTemplate的樣式

00:52:18.872 --> 00:52:20.674 
我們添加一個模糊的背景

00:52:22.643 --> 00:52:24.845 
頂部增加一些空白

00:52:24.912 --> 00:52:27.681 
這樣shelf會在播放器的底部

00:52:30.417 --> 00:52:32.920 
回到playSelectedLockup函數

00:52:34.555 --> 00:52:36.623 
創建了疊加文件之後

00:52:37.057 --> 00:52:41.428 
我們將它設置在播放器的
新模態疊加文件屬性

00:52:41.495 --> 00:52:43.230 
這樣播放器就能對它進行展示

00:52:43.764 --> 00:52:47.768 
實際上 播放器會展示任意一個
使用了這個屬性的TVMLKit文件

00:52:49.536 --> 00:52:51.138 
現在我們也能展示這個疊加了

00:52:51.205 --> 00:52:53.841 
當視頻處於全屏模式時

00:52:54.474 --> 00:52:55.943 
比如 我們可能會想展示

00:52:56.009 --> 00:52:58.912 
這個疊加 在視頻結束前30秒的時候

00:52:59.746 --> 00:53:02.850 
但是爲了這個演示 我們展示這個疊加

00:53:02.916 --> 00:53:06.153 
一旦視頻進入全屏模式
所以我們在這裏調用它

00:53:07.254 --> 00:53:08.322 
讓我們運行一下

00:53:10.791 --> 00:53:13.727 
同樣 視頻會在lockup裏
自動開始播放

00:53:16.630 --> 00:53:20.634 
當我把視頻切換到全屏模式
你能在屏幕上看到疊加層

00:53:23.136 --> 00:53:24.071 
掌聲

00:53:29.877 --> 00:53:32.713 
而且這個疊加層還是能互動的
所以你可以隨便移動它

00:53:32.779 --> 00:53:34.381 
在這個lockup裏面

00:53:36.950 --> 00:53:38.852 
這就是交互式的視頻疊加層

00:53:39.720 --> 00:53:41.688 
希望這個演示對大家有所幫助

00:53:41.889 --> 00:53:43.156 
謝謝大家

00:53:43.390 --> 00:53:44.391 
還給你 Parry

00:53:44.791 --> 00:53:46.693 
謝謝Jeff 多麼精彩的一個演示

00:53:47.094 --> 00:53:50.030 
讓我們快速回顧一下
我們在演示中看到的內容

00:53:50.797 --> 00:53:54.134 
你們看到了亮色和暗色的外觀

00:53:54.601 --> 00:53:57.838 
能直接應用於TVMLKit應用

00:53:59.606 --> 00:54:04.845 
你們看到了利用三個簡單的步驟
就能非常方便地嵌入視頻

00:54:07.414 --> 00:54:11.518 
最後 你們看到了
一個長時間觀看體驗的例子

00:54:12.186 --> 00:54:16.390 
通過交互式視頻疊加層實現

00:54:18.458 --> 00:54:19.359 
到這裏

00:54:20.894 --> 00:54:23.797 
我想要總結一下我們今天學到的內容

00:54:27.668 --> 00:54:29.002 
有一件事情

00:54:29.703 --> 00:54:32.673 
我請大家離開一下這個演示文稿

00:54:34.541 --> 00:54:35.409 
就是這個

00:54:37.444 --> 00:54:42.916 
TVMLKit是一種非常簡單的
創建TV上應用的方法

00:54:44.351 --> 00:54:46.320 
它給了你們本地化的體驗

00:54:48.121 --> 00:54:52.226 
看上去和用起來都像Apple應用

00:54:56.363 --> 00:55:01.134 
類似於Markup和
JavaScript這樣的網頁技術

00:55:02.603 --> 00:55:04.905 
能讓你們快速開發應用

00:55:06.540 --> 00:55:08.208 
減少投放到市場的時間

00:55:12.846 --> 00:55:14.414 
利用這些新功能

00:55:15.516 --> 00:55:17.985 
和你們看到的TVMLKit

00:55:18.986 --> 00:55:20.521 
的例子

00:55:21.188 --> 00:55:22.723 
來編輯用戶界面

00:55:25.125 --> 00:55:29.663 
你可以把你的時間 金錢

00:55:30.430 --> 00:55:31.999 
和聰明的精力

00:55:33.934 --> 00:55:36.136 
放在功能和內容上

00:55:37.371 --> 00:55:41.275 
讓你的應用獨一無二和功能強大

00:55:45.379 --> 00:55:49.149 
我強烈建議大家去看一下開發者網站

00:55:49.216 --> 00:55:52.586 
瀏覽一下文檔和下載一些例子的代碼

00:55:52.653 --> 00:55:55.656 
那裏有大量的信息

00:55:58.058 --> 00:56:00.827 
我也推薦一些相關的會議

00:56:01.128 --> 00:56:03.130 
包括tvOS的新特性

00:56:04.031 --> 00:56:06.767 
特別是明天將要開的

00:56:06.834 --> 00:56:08.769 
是TVMLKit第二部分

00:56:09.970 --> 00:56:13.574 
我們會介紹如何混合你們自己的視圖

00:56:13.640 --> 00:56:17.644 
視圖控制器和TVMLKit中的
JavaScript API

00:56:19.313 --> 00:56:20.414 
最後

00:56:21.348 --> 00:56:22.950 
我想要感謝大家

00:56:23.917 --> 00:56:25.118 
前來

00:56:26.153 --> 00:56:31.859 
希望大家在接下來的
WWDC16 上有着很好的體驗

00:56:32.226 --> 00:56:33.060 
謝謝大家