00:00:20.787 --> 00:00:27.728
Swift 3中使用GCD併發編程

00:00:32.866 --> 00:00:33.700
下午好

00:00:35.035 --> 00:00:39.706
今天下午 我將要和大家聊一下
如何結構化你的程序

00:00:39.773 --> 00:00:42.910
使用併發編程
以及我們在這一年中做了哪些東西

00:00:42.976 --> 00:00:44.811
在Swift 3的GCD的新特性

00:00:45.546 --> 00:00:48.615
我叫Matt
稍後Pierre會和我一起

00:00:49.416 --> 00:00:51.885
我們都在Apple達爾文運行時團隊

00:00:54.121 --> 00:00:55.822
當你創建一個新的工程

00:00:56.523 --> 00:00:59.026
你會得到一些類似於這個的東西

00:00:59.593 --> 00:01:03.363
你們都有應用 那個應用有它的主線程

00:01:04.631 --> 00:01:07.000
這個主線程用來

00:01:07.067 --> 00:01:09.803
運行所有生成用戶界面的代碼

00:01:11.738 --> 00:01:15.609
當你開始往應用中添加代碼的時候

00:01:16.043 --> 00:01:20.147
你會發現應用的性能
會大幅度地變化

00:01:20.848 --> 00:01:24.218
比如 你開始引入很多工作

00:01:24.284 --> 00:01:29.790
像數據轉換或圖片處理
在你的主線程上

00:01:30.357 --> 00:01:33.961
你會發現你的用戶界面變糟糕很多

00:01:34.695 --> 00:01:38.899
在macOS上
這可能會是出現不停轉動的圓圈

00:01:39.066 --> 00:01:41.335
在iOS上
這可能是一些更微妙的東西

00:01:41.401 --> 00:01:44.438
你的用戶界面會慢下來
或者甚至是完全停了

00:01:46.707 --> 00:01:48.242
我會帶大家看一些基本的內容

00:01:48.308 --> 00:01:51.411
關於如何結構還你的應用
以此避免這類問題

00:01:51.612 --> 00:01:56.450
稍後 Pierre會上臺
給大家談一些更高級的話題

00:01:59.019 --> 00:02:01.221
那麼我們應該如何處理這類問題呢？

00:02:05.459 --> 00:02:08.996
我們要從介紹程序的多線程概念開始

00:02:09.128 --> 00:02:12.232
多線程允許應用中的多個部分

00:02:12.299 --> 00:02:13.634
在同一時刻運行

00:02:14.134 --> 00:02:17.104
在我們的系統中
你通過創建線程來實現多線程

00:02:17.838 --> 00:02:20.941
一箇中央處理器核心
可以在任意時刻處理一個線程

00:02:21.408 --> 00:02:23.944
但是引入多線程的好處

00:02:24.011 --> 00:02:26.813
引入多線程的壞處

00:02:26.880 --> 00:02:29.917
是它會使得很難維護線程的安全性

00:02:30.417 --> 00:02:32.052
你新引入的其它線程

00:02:32.119 --> 00:02:35.222
可以觀察破壞代碼不變量的效果

00:02:35.289 --> 00:02:37.524
當你在其它線程執行操作的時候

00:02:38.692 --> 00:02:40.060
這變成有點問題了

00:02:41.395 --> 00:02:42.329
那我們如何處理呢？

00:02:42.462 --> 00:02:45.933
GCD是我們平臺上的多線程庫

00:02:46.533 --> 00:02:49.536
它幫你寫多線程代碼

00:02:49.603 --> 00:02:51.872
工作於所有平臺
從Apple Watch

00:02:52.239 --> 00:02:56.643
到所有的iOS設備
Apple TV以及Mac

00:02:57.911 --> 00:03:00.547
所以爲了幫助你 使用多線程

00:03:00.614 --> 00:03:04.051
我們在線程上引進了一些抽象

00:03:05.052 --> 00:03:08.222
那是調度隊列和運行循環

00:03:08.755 --> 00:03:12.259
調度隊列是是一個結構 允許你提交

00:03:12.526 --> 00:03:15.896
工作項目給隊列
在Swift中 這是閉包

00:03:17.598 --> 00:03:21.635
調度會帶來一個線程和一個服務

00:03:22.436 --> 00:03:25.405
當調度結束在那個線程上
所有工作的運行

00:03:25.472 --> 00:03:28.041
它會拆毀工作線程

00:03:29.009 --> 00:03:32.212
正如我前面說過的
你也可以創建你自己的線程

00:03:33.180 --> 00:03:35.215
在那些線程上 你可以運行運行循環

00:03:35.816 --> 00:03:40.153
最後 在第一張幻燈片
你們有了主線程

00:03:40.220 --> 00:03:41.388
它是特殊的

00:03:41.455 --> 00:03:44.625
它同時有主運行循環和主隊列

00:03:46.460 --> 00:03:50.731
所以調度隊列有兩個主要方法
你可以給它們提交工作

00:03:51.064 --> 00:03:53.634
第一個是異步執行

00:03:54.368 --> 00:03:57.504
你可以給多個工作項目進行排隊

00:03:57.571 --> 00:04:00.641
給你的調度隊列 然後調度

00:04:00.941 --> 00:04:03.477
會引入一個線程來執行那個工作

00:04:04.878 --> 00:04:08.048
調度會一個個從隊列中
拿到項目並執行它們

00:04:12.352 --> 00:04:14.454
當它完成了隊列中的所有項目

00:04:14.521 --> 00:04:16.822
系統會回收那個線程

00:04:17.958 --> 00:04:21.295
第二個執行模式是異步執行

00:04:22.462 --> 00:04:26.500
這是 比如
如果我們的設置和前面的一下

00:04:26.567 --> 00:04:28.802
調度隊列有一些異步的工作

00:04:29.102 --> 00:04:30.704
但是你有你自己的線程

00:04:30.771 --> 00:04:34.741
那個線程想要在隊列上運行代碼
等待它的發生

00:04:34.942 --> 00:04:38.779
你可以向調度隊列提交那個工作

00:04:39.379 --> 00:04:40.981
然後它會在那裏被卡住

00:04:41.348 --> 00:04:44.985
它會一直等待
直到你要執行的那個項目完成之後

00:04:45.552 --> 00:04:48.088
我們可能給那個隊列增加更多異步工作

00:04:48.155 --> 00:04:50.190
然後調度會帶來一個線程

00:04:50.257 --> 00:04:52.226
爲了服務那個隊列中的項目

00:04:52.826 --> 00:04:55.295
同樣 異步項目會被執行

00:04:55.629 --> 00:04:59.132
當運行你要運行的同步項目

00:04:59.399 --> 00:05:03.403
調度隊列會對取消那個等待線程的控制

00:05:03.904 --> 00:05:05.138
執行那個項目

00:05:05.806 --> 00:05:09.510
調度隊列的控制會返回給一個工作線程

00:05:09.576 --> 00:05:10.677
通過調度來控制

00:05:11.478 --> 00:05:14.248
它會繼續排出那個隊列中的其它項目

00:05:15.082 --> 00:05:17.918
然後回收使用過的線程

00:05:18.685 --> 00:05:21.722
那麼現在我已告訴你
如何向調度提交工作

00:05:21.922 --> 00:05:25.158
那麼我們如何使用它
幫助我們解決我們前面遇到的問題呢？

00:05:26.159 --> 00:05:29.596
我們要做的是把工作從你的主線程拿開

00:05:29.663 --> 00:05:32.266
那會阻礙用戶界面

00:05:32.766 --> 00:05:37.037
我們通過拿開主線程的轉化來實現它

00:05:37.337 --> 00:05:38.939
把它放在不同的隊列中運行

00:05:41.175 --> 00:05:44.011
所有你可以拿掉轉化
把它放回到一個調度隊列

00:05:44.611 --> 00:05:46.780
當你想要轉化數據

00:05:47.047 --> 00:05:52.753
你可以把那個數據的數值轉移到
你在另外隊列的轉化代碼中

00:05:53.687 --> 00:05:56.957
轉化它 然後返回給你的主線程

00:05:57.925 --> 00:05:59.726
這就允許你執行那個工作

00:05:59.793 --> 00:06:02.529
當主線程空閒和服務事件

00:06:03.797 --> 00:06:05.532
那麼在真實代碼中
這是什麼樣呢？

00:06:06.633 --> 00:06:07.868
好吧 這是非常簡單的

00:06:08.435 --> 00:06:10.871
首先 你可以創建調度隊列

00:06:11.071 --> 00:06:13.941
通過創建一個
DispatchQueue對象來提交你的工作

00:06:14.007 --> 00:06:15.242
它有一個標籤

00:06:15.676 --> 00:06:18.946
那個標籤在調試器中是可見的
當你寫應用的時候

00:06:20.447 --> 00:06:23.617
調度隊列執行你提交的工作

00:06:23.684 --> 00:06:25.252
安裝先進先出的順序

00:06:25.385 --> 00:06:28.155
也就是 你提交給隊列的順序

00:06:28.222 --> 00:06:30.123
就是調度運行它們的順序

00:06:31.558 --> 00:06:34.361
然後你可以在調度隊列中使用異步方法

00:06:34.561 --> 00:06:36.396
來給隊列提交工作

00:06:37.998 --> 00:06:41.368
所以既然我們已經提交了
我們的調整大小操作

00:06:41.435 --> 00:06:44.438
給一個不同的隊列
那我們如何把它返回給主線程呢

00:06:45.372 --> 00:06:46.840
那也是非常簡單的

00:06:47.107 --> 00:06:48.675
調度主隊列

00:06:49.076 --> 00:06:52.880
服務於所有執行在主線程上的項目

00:06:54.982 --> 00:06:58.018
這意味着你可以只調用
DispatchQueue main方法

00:06:58.151 --> 00:07:00.654
然後在那個主隊列中調用
async方法

00:07:00.888 --> 00:07:04.258
那樣代碼會執行
你可以更新你的用戶界面

00:07:05.425 --> 00:07:07.861
正如你所看到的那樣
鏈接工作是非常簡單的

00:07:07.928 --> 00:07:10.664
從一個隊列到另一個隊列
和返回到你的主隊列

00:07:11.098 --> 00:07:14.735
那麼我已經看到了如何控制你的代碼

00:07:14.801 --> 00:07:16.270
和將它放在不同的線程

00:07:17.371 --> 00:07:18.972
這是要有一些代價的

00:07:20.107 --> 00:07:23.644
你必須控制你的應用中的一個併發

00:07:24.344 --> 00:07:26.346
調度使用的線程池

00:07:27.414 --> 00:07:29.683
會限制你能得到的併發數

00:07:30.017 --> 00:07:33.220
爲了使用設備上所有的調用

00:07:34.721 --> 00:07:37.224
然而 當你阻礙那些線程的時候

00:07:37.291 --> 00:07:40.794
如果你等待你的程序中的另外部分
或者你等待系統調用

00:07:42.062 --> 00:07:45.399
那些被阻礙的工作線程
會導致更多的工作線程

00:07:45.465 --> 00:07:48.268
調度是嘗試給你你應得的併發數

00:07:48.502 --> 00:07:51.705
通過給你一個新的線程來繼續執政代碼

00:07:52.606 --> 00:07:56.243
這意味着選擇正確的調度隊列數量
是非常重要的

00:07:56.310 --> 00:07:57.344
來執行代碼

00:07:58.245 --> 00:08:01.548
否則的話 你可能會阻礙一個線程
另外一個線程會產生

00:08:01.615 --> 00:08:03.851
然後你阻礙了另一個 以此類推

00:08:03.917 --> 00:08:06.620
這個模式就是我們稱爲線程爆炸的東西

00:08:07.154 --> 00:08:10.891
我們在去年的演講中
講了線程爆炸和它的問題

00:08:10.958 --> 00:08:13.293
使用GCD建立響應式和高效應用

00:08:13.727 --> 00:08:16.930
所以我建議大家回去看看
去年的那個演講

00:08:20.367 --> 00:08:22.436
現在我們已看到了
如何做這個簡單的事情

00:08:22.503 --> 00:08:25.572
就是把工作從主線程搬到其它隊列中

00:08:25.772 --> 00:08:28.175
但是我們如何真的把
這個應用於你的應用呢？

00:08:29.710 --> 00:08:32.312
如果我們回到前面的系統

00:08:32.513 --> 00:08:35.582
你想要做的就是確定你的應用的面積

00:08:35.682 --> 00:08:37.049
使用獨立的數據流

00:08:37.384 --> 00:08:39.586
正如我們看到過的那樣
這可能是圖像轉化

00:08:39.919 --> 00:08:41.221
或者你可能有一個數據庫

00:08:42.688 --> 00:08:46.760
你想要計算那些面積
把它們分割成獨立的子系統

00:08:47.561 --> 00:08:51.431
然後你想要把那些每一個子系統
返回給一個調度隊列

00:08:52.366 --> 00:08:55.769
這會給每一個子系統一個隊列
來獨立地執行工作

00:08:55.836 --> 00:08:59.806
這樣就不會有太多隊列和進程的問題

00:09:00.741 --> 00:09:02.109
我們在前幾張幻燈片看到了

00:09:02.442 --> 00:09:04.144
把工作串聯在一起是很簡單的

00:09:04.945 --> 00:09:08.348
你可以異步處理一個一個的模塊

00:09:08.415 --> 00:09:11.285
然後到另一個隊列 然後回到主隊列

00:09:12.119 --> 00:09:15.956
但是我還想給大家展示第二種模式
也是同樣的有用

00:09:16.023 --> 00:09:19.092
那就是組合工作和等待工作結束

00:09:20.360 --> 00:09:24.831
如果你有單獨的一件事
想要產生多個不同的工作項目

00:09:24.898 --> 00:09:27.367
而你想往前進 如果那些工作項目

00:09:27.434 --> 00:09:30.404
當那些工作項目完成後 你可以做那個

00:09:31.772 --> 00:09:34.408
爲了實現它 調度可以幫助你

00:09:35.375 --> 00:09:38.145
所以如果我們回到剛纔的示意圖

00:09:38.278 --> 00:09:42.349
如果用戶界面產生三個不同的工作條目

00:09:43.350 --> 00:09:45.485
你可以創建一個調度組

00:09:46.486 --> 00:09:49.122
調度組是幫助你追蹤工作的

00:09:50.357 --> 00:09:53.026
它們在Swift中是非常容易創建的

00:09:53.160 --> 00:09:55.429
你只要創建一個
DispatchGroup對象

00:09:56.830 --> 00:10:00.133
現在當你向調度提交工作

00:10:00.467 --> 00:10:03.871
你可以向你的異步調用增加這個組
作爲一個可選的參數

00:10:04.872 --> 00:10:08.542
你可以向那個組添加更多的工作
你可以向不同的隊列添加

00:10:08.775 --> 00:10:10.410
但是用同一個組聯繫起來

00:10:11.845 --> 00:10:14.348
每次你向組提交工作

00:10:14.414 --> 00:10:17.684
它都會增加需要完成的項目的數量

00:10:20.087 --> 00:10:22.356
最後 當你提交了所有的工作

00:10:22.623 --> 00:10:26.159
你可以讓組在所有工作被完成時通知你

00:10:26.226 --> 00:10:29.296
你可讓它在一個你選擇的隊列中這麼做

00:10:30.898 --> 00:10:34.101
現在一個接着一個
這些項目會開始執行

00:10:35.702 --> 00:10:38.338
當它們執行的時候 組中的數量

00:10:38.405 --> 00:10:41.041
會在每一個工作項目完成的時候減少

00:10:41.642 --> 00:10:44.645
最終 當最後一個工作項目完成的時候

00:10:45.145 --> 00:10:48.115
組就會繼續 然後提交你的通知阻礙

00:10:48.315 --> 00:10:50.083
給你請求的隊列

00:10:51.718 --> 00:10:56.356
這樣 我們返回組 阻礙給主進程

00:10:56.423 --> 00:10:57.891
它會在主線程上運行

00:10:59.860 --> 00:11:03.764
現在還有第三個模式
我覺得我們需要展示的

00:11:04.932 --> 00:11:07.167
前面說的兩個是異步執行

00:11:07.234 --> 00:11:09.770
第三個是關於處理同步執行

00:11:11.305 --> 00:11:12.940
你可以使用同步執行

00:11:13.207 --> 00:11:16.510
來幫助你序列化子系統間的狀態

00:11:17.911 --> 00:11:20.614
串行隊列、調度隊列
是本質的序列

00:11:21.515 --> 00:11:24.618
你可以使用它 爲了它的相互排斥屬性

00:11:24.885 --> 00:11:28.188
那就是
當你向那個隊列同步地提交工作

00:11:28.355 --> 00:11:30.824
你知道運行在那個隊列中的
子系統的工作

00:11:30.891 --> 00:11:32.426
不是同時運行的

00:11:33.694 --> 00:11:36.463
你可以利用它來建立非常簡單的路徑

00:11:36.530 --> 00:11:40.567
從其它地方的子系統中讀取屬性

00:11:41.101 --> 00:11:43.537
比如 這裏你可以調用隊列同步

00:11:43.937 --> 00:11:45.973
你可以返回一個值到隊列同步的外面

00:11:46.406 --> 00:11:48.475
我們會在隊列中捕捉到那個值

00:11:48.542 --> 00:11:51.912
然後在工作項目結束時返回給你

00:11:54.581 --> 00:11:57.885
但是 當你引入這個模式的時候
你必須十分小心

00:11:57.951 --> 00:12:01.755
因爲你開始在你的子系統之間
引入一個鎖順序圖

00:12:03.090 --> 00:12:03.991
那是什麼意思呢？

00:12:04.057 --> 00:12:06.960
如果你有我們曾經有過的子系統

00:12:07.027 --> 00:12:10.097
而且你從一個地方同步到另一個地方
然後又同步到另一個地方

00:12:10.564 --> 00:12:13.500
最後 你同步回第一個

00:12:13.834 --> 00:12:15.202
好了 現我們有了一個死鎖

00:12:16.403 --> 00:12:19.873
這個演講的後面部分
Pierre會上來談一下死鎖

00:12:26.847 --> 00:12:29.983
所以現在我們看到了
如何結構化調度使用

00:12:30.284 --> 00:12:31.752
在你的應用中

00:12:31.852 --> 00:12:35.722
我們如何將其應用於
你的子系統中的使用

00:12:36.490 --> 00:12:40.060
你可以使用調度
來對你提交的工作進行分類

00:12:40.494 --> 00:12:43.697
爲了實現它 我們需要引入很多服務類

00:12:44.998 --> 00:12:47.968
這些類用來提供一個明確的分類

00:12:48.035 --> 00:12:50.204
你提交給調度的工作

00:12:51.438 --> 00:12:52.906
所以它允許你作爲一個開發者

00:12:52.973 --> 00:12:56.143
來表示你提交給調度的代碼的意圖

00:12:56.476 --> 00:13:00.247
調度可使用它來影響它執行代碼的方式

00:13:00.314 --> 00:13:01.648
你給我們的

00:13:02.049 --> 00:13:05.219
代碼可以不同中央處理器優先級
進行執行

00:13:05.319 --> 00:13:07.721
不同的輸入輸出安排優先級

00:13:08.522 --> 00:13:12.159
我們在去年同一個演講中
詳細地講了QoS

00:13:12.226 --> 00:13:14.494
使用GCD創建響應式和高效的應用

00:13:15.229 --> 00:13:17.564
那麼我們如何使用QoS類呢？

00:13:18.799 --> 00:13:20.801
這和以前一樣簡單

00:13:21.201 --> 00:13:25.138
你可以將QoS類
作爲一個可選參數傳給異步

00:13:25.205 --> 00:13:28.008
我們給隊列提交後臺工作

00:13:30.177 --> 00:13:34.114
如果你等會兒出現和
在一個更高的QoS上提交隊列

00:13:34.181 --> 00:13:37.384
調度會幫你解決創建的優先級顛倒

00:13:37.618 --> 00:13:41.121
它會在你的工作之前提升項目

00:13:41.188 --> 00:13:43.624
在調度隊列 給更高的QoS

00:13:44.992 --> 00:13:47.928
那樣它們更快地執行 讓你的項目

00:13:47.995 --> 00:13:50.197
以你期待的速度執行

00:13:51.131 --> 00:13:53.066
然而 對這一點需要重點指出的是

00:13:53.500 --> 00:13:55.536
它不會幫助你的工作跳行

00:13:55.702 --> 00:13:58.405
它所做的一切就是
在你之前提升所有的工作

00:13:58.472 --> 00:14:01.408
所以你一提交工作 它就會執行

00:14:04.111 --> 00:14:06.113
你也可以創建調度隊列

00:14:06.280 --> 00:14:09.850
它有特定的QoS類
這是非常有幫助的 比如

00:14:10.050 --> 00:14:13.654
如果你想要始終在後臺執行的後臺工作

00:14:13.720 --> 00:14:16.657
你可以創建一個隊列 在後臺執行所有

00:14:16.723 --> 00:14:20.594
當你向那個隊列提交工作的時候
那就是我們得到的QoS

00:14:22.963 --> 00:14:28.769
所以在更微觀的級別上
當你於一個調度隊列進行同步

00:14:28.836 --> 00:14:31.939
它獲取執行內容 在你同步的那一刻

00:14:32.906 --> 00:14:35.142
執行環境意味着類似於QoS的東西

00:14:35.576 --> 00:14:38.078
它也意味着你現在擁有的登入環境

00:14:39.279 --> 00:14:41.348
但是如果你想要更多的控制

00:14:41.448 --> 00:14:45.352
你可以使用
DispatchWorkItem來創建項目

00:14:45.485 --> 00:14:47.821
你對它們如何執行有更多的控制

00:14:49.923 --> 00:14:50.791
比如

00:14:50.858 --> 00:14:54.728
我們使用assignCurrentContext
創建一個工作項目

00:14:55.262 --> 00:14:58.699
它使用執行內容的QoS

00:14:58.765 --> 00:15:00.734
在你創建工作項目的時候

00:15:00.801 --> 00:15:03.604
而不是你向調度隊列提交它的時候

00:15:04.905 --> 00:15:07.508
這意味着你可以創建那個項目 保存它

00:15:07.574 --> 00:15:09.276
當你最後真的執行它

00:15:09.343 --> 00:15:12.613
我們會想調度提交它
並帶着你創建時的屬性

00:15:13.280 --> 00:15:15.048
當我們談論工作項目的時候

00:15:15.115 --> 00:15:18.085
DispatchWorkItem
有另外非常有用的部分

00:15:18.185 --> 00:15:20.420
那就是等待它們的完成

00:15:21.088 --> 00:15:23.991
你可以使用
DispatchWorkItem wait方法

00:15:24.057 --> 00:15:26.994
來向調度表示你需要那個工作項目完成

00:15:27.060 --> 00:15:28.428
在你繼續之前

00:15:30.864 --> 00:15:34.501
調度會響應
通過提升它前面工作的優先級

00:15:34.568 --> 00:15:38.038
到那個QoS 就像
通過優先級翻轉所做的

00:15:39.940 --> 00:15:43.377
它可以這麼做是因爲
DispatchWorkItem

00:15:43.443 --> 00:15:46.313
知道它在那裏被提交
你想要在那個線程運行它

00:15:46.513 --> 00:15:49.716
因爲 調度知道它要提升那個隊列

00:15:49.783 --> 00:15:51.685
使得完成你的工作條目

00:15:53.687 --> 00:15:55.355
需要重點指出的是

00:15:55.422 --> 00:15:57.791
因爲等待旗語和小組

00:15:57.858 --> 00:15:59.760
不會存儲這個所有者信息

00:16:00.093 --> 00:16:01.995
這意味着如果你等待一個旗語

00:16:02.062 --> 00:16:05.499
它不會在你的旗語信號前產生東西

00:16:05.566 --> 00:16:06.800
來更快地執行

00:16:07.434 --> 00:16:09.703
現在我要邀請Pierre來到臺上

00:16:09.770 --> 00:16:12.439
他會給大家講一下同步

00:16:20.013 --> 00:16:20.848
謝謝Matt

00:16:22.516 --> 00:16:27.387
和Matt一起
我們看到了如何從應用的角度使用調度

00:16:28.222 --> 00:16:30.924
我會和大家講一下它的具體意義

00:16:30.991 --> 00:16:32.960
從你們的對象的角度

00:16:34.328 --> 00:16:36.063
首先 關於Swift的一點

00:16:39.199 --> 00:16:42.703
同步不是Swift 3語言的一部分

00:16:44.137 --> 00:16:47.641
你今天只有這個語言的一個重點

00:16:47.708 --> 00:16:51.578
那就是你的全局變量是被
原子化地初始化的

00:16:52.746 --> 00:16:57.384
但你沒有的是你的類屬性不是原子化的

00:16:58.151 --> 00:17:01.421
你的類中的惰性屬性也不是原子化的

00:17:01.722 --> 00:17:04.825
那意味着如果你調用這些屬性

00:17:04.892 --> 00:17:07.661
而它們同時在兩個環境中被初始化

00:17:07.728 --> 00:17:10.531
你的惰性初始化器
可能實際上運行了兩次

00:17:11.632 --> 00:17:13.099
所有你必須同步

00:17:14.268 --> 00:17:17.905
這個語言現在不會給我們很多的工具

00:17:18.137 --> 00:17:21.241
但是那不意味着競爭不是一個問題

00:17:23.310 --> 00:17:26.880
不存在良性競爭這種事情

00:17:29.983 --> 00:17:34.321
對你來說 那意味着
如果你忘記了同步這一點

00:17:34.521 --> 00:17:36.356
你會得到奔潰

00:17:36.657 --> 00:17:39.560
或者破壞應用中用戶數據

00:17:41.728 --> 00:17:45.799
我建議大家看一下本週稍早時候的演講

00:17:45.866 --> 00:17:50.304
關於T San的 那是個消毒劑

00:17:50.637 --> 00:17:53.307
是一個工具 幫助你找出

00:17:53.373 --> 00:17:56.610
在程序中你缺少了哪些正確的異步處理

00:17:59.847 --> 00:18:02.015
那我們拿什麼來做同步處理呢？

00:18:02.783 --> 00:18:05.352
傳統上你會使用一個鎖

00:18:06.153 --> 00:18:11.225
在Swift裏
因爲你有一整個達爾文模塊在部署中

00:18:11.291 --> 00:18:15.529
你實際上會看到這個結構
是基於傳統的C語言鎖

00:18:15.929 --> 00:18:20.701
然而 Swift假設所有被訓練東西
都是可以被移動的

00:18:20.767 --> 00:18:24.271
那不會和一個互斥體
或者一個鎖一起工作

00:18:24.571 --> 00:18:28.675
所有我們非常不建議
你在Swift中使用這一類的鎖

00:18:34.014 --> 00:18:37.317
你若你想要一個傳統的鎖
你可以使用的是

00:18:37.384 --> 00:18:41.989
Foundation.Lock
因爲不同於傳統的基於C語言鎖的結構

00:18:42.055 --> 00:18:47.060
它是一個類
它不容易產生我前面提到過的問題

00:18:48.729 --> 00:18:51.565
然而 那意味着
你確定了你的下一個對象

00:18:51.632 --> 00:18:53.467
對你來說 它可能會不是所想要的

00:18:54.101 --> 00:18:55.969
如果你想要一些小一點的東西

00:18:56.036 --> 00:18:58.939
那看起來就像是你在C語言中的鎖

00:18:59.006 --> 00:19:04.044
然後你必須引Objective-C
引入Objective-C中的基本類

00:19:04.111 --> 00:19:06.146
把你的鎖作爲一個不變量

00:19:07.848 --> 00:19:10.484
然後你會暴露一個鎖和解鎖方法

00:19:10.551 --> 00:19:12.753
一個嘗試鎖 如果你也需要它

00:19:13.353 --> 00:19:18.859
你可以從Swift中調用
當你將該類分成子類

00:19:20.794 --> 00:19:24.565
你會在那張幻燈片中
發現我們使用不公平的鎖

00:19:24.698 --> 00:19:27.301
這是一個新的API
我們在這些更新中引入的

00:19:27.734 --> 00:19:29.670
它不易於盜版入侵

00:19:29.903 --> 00:19:33.674
它不會旋轉 不像我們複製的旋轉鎖

00:19:34.441 --> 00:19:36.343
這是真實生活中最重要的

00:19:38.579 --> 00:19:43.550
這是一個GCD的演講
所有我們鼓勵大家

00:19:43.750 --> 00:19:46.820
使用調度隊列 爲了同步處理

00:19:47.888 --> 00:19:52.192
要這麼做的的第一個原因
是這些非常容易被誤用

00:19:52.559 --> 00:19:54.461
相比於傳統的鎖

00:19:54.928 --> 00:19:57.598
你的代碼會在可觀測的方式下運行

00:19:57.664 --> 00:19:59.833
這意味着你不能忘記解鎖

00:20:01.068 --> 00:20:04.371
另外一件事是隊列事實上更好地集成到

00:20:04.438 --> 00:20:07.107
Xcode中調試工具中的運行時

00:20:08.742 --> 00:20:12.246
所以我們如何使用隊列來同步呢

00:20:13.313 --> 00:20:18.085
我會和大家一起講一下
實現原子化屬性的問題

00:20:19.119 --> 00:20:24.091
這裏我們有這個對象
它有一個內部的狀態

00:20:24.324 --> 00:20:29.830
我們想要以一種安全方式來訪問它
我們會使用一個隊列來同步

00:20:30.964 --> 00:20:33.600
我們如何寫我們的getter
和setter呢？

00:20:34.601 --> 00:20:39.106
getter是關於返回它的內部狀態

00:20:39.973 --> 00:20:43.343
它給我們相互的排斥
Matt前面已經講過了

00:20:43.877 --> 00:20:48.015
setter也是那麼簡單
你只要設置你的新狀態

00:20:48.081 --> 00:20:50.684
和同步的其他保護和你的隊列

00:20:51.718 --> 00:20:55.022
這個模式是非常簡單的
你實際上可以拓展它

00:20:55.088 --> 00:20:57.991
對於各種更加複雜的產品

00:21:00.127 --> 00:21:04.731
我告訴過你隊列更好地
與你的調試工具整合在一起

00:21:04.798 --> 00:21:06.600
它們也有更多的功能

00:21:07.067 --> 00:21:10.237
在這個更新中的新東西
我們讓你表達預設條件

00:21:11.405 --> 00:21:14.308
它讓你表達你在代碼中有不變量

00:21:14.508 --> 00:21:17.945
非常需要在指定的隊列中運行

00:21:18.378 --> 00:21:20.581
你以這種方式擁有

00:21:22.049 --> 00:21:24.551
調度預設條件 你在那個隊列上

00:21:25.552 --> 00:21:27.554
有時對面是非常有用的

00:21:27.621 --> 00:21:32.359
你想保證代碼中特定片段
永遠不會在那個隊列中運行

00:21:32.759 --> 00:21:35.162
因爲你知道你可能與那個隊列同步

00:21:35.395 --> 00:21:37.297
你表以這種方式示這個

00:21:37.664 --> 00:21:40.601
一個預設條件你不在那個隊列中

00:21:41.602 --> 00:21:45.839
所以那就是關於同步處理
同步你的狀態

00:21:47.107 --> 00:21:52.045
正如Matt前面所說的 這會更加好
如果你僅組織你的應用

00:21:52.112 --> 00:21:56.383
以你的傳輸值不需要同步被掛起的方式

00:21:56.984 --> 00:21:58.418
然而 在真實的代碼中

00:21:58.485 --> 00:22:02.089
你需要一些對象來訪問
從簡單明顯的子系統

00:22:03.390 --> 00:22:05.893
那意味着所有這些子系統

00:22:05.959 --> 00:22:07.961
有一個引用在這些對象中

00:22:08.028 --> 00:22:10.898
擺脫它們會是一個挑戰

00:22:14.101 --> 00:22:18.539
我現在會帶你們看一下
一個四步狀態任務

00:22:19.006 --> 00:22:21.041
那會幫你得到這個高度

00:22:21.108 --> 00:22:25.646
不會產生奇怪的難以重現的奔潰

00:22:27.314 --> 00:22:31.652
你的狀態機開始於第一件事 設置

00:22:31.919 --> 00:22:34.021
設置是關於創建你的對象

00:22:34.087 --> 00:22:38.325
給它你需要的屬性 爲了它的目的

00:22:41.595 --> 00:22:45.065
第二 你會想要激活這個對象

00:22:45.432 --> 00:22:49.837
那意味着你實際上讓這個對象
對於其它子系統是可知的

00:22:49.970 --> 00:22:55.142
你開始使用它以一種更加同步的世界
在性能任務方面

00:22:56.176 --> 00:22:59.179
然後開始了難的部分
你想要擺脫那個對象

00:22:59.446 --> 00:23:02.349
所有第三步是作廢

00:23:05.219 --> 00:23:09.456
作廢是關於確保所有部分

00:23:09.523 --> 00:23:12.492
所有你的子系統知道這個對象會消失

00:23:12.893 --> 00:23:15.629
所以 第四 它被取消分配

00:23:16.196 --> 00:23:17.497
那麼讓我們讓它保持那樣

00:23:17.731 --> 00:23:21.735
設置 激活 作廢 取消分配

00:23:25.672 --> 00:23:28.942
這是非常抽象的 所以我們會講一下

00:23:29.009 --> 00:23:32.012
一個更加具體的例子
我希望你會關聯上

00:23:32.513 --> 00:23:36.149
讓我們回到Matt前面介紹的應用

00:23:36.517 --> 00:23:39.520
關注於兩個子系統

00:23:40.454 --> 00:23:42.923
第一 我們有我們的用戶界面

00:23:43.156 --> 00:23:46.994
它會處理事物類似於應用中的標題欄

00:23:48.295 --> 00:23:53.066
我會假設你可以觀察一些狀態改變

00:23:53.133 --> 00:23:54.535
在你的子系統中

00:23:55.068 --> 00:23:58.305
所以那樣 舉個例子
對於我們的數據轉換子系統

00:23:58.605 --> 00:24:00.574
當它開始執行一些工作

00:24:00.641 --> 00:24:03.977
我們給用戶展示了一個視覺上的跡象

00:24:04.545 --> 00:24:08.782
當數據轉化子系統停止做任何工作時

00:24:08.849 --> 00:24:10.617
視覺跡象消失了

00:24:11.718 --> 00:24:14.621
所以我們如何實現
BusyController呢？

00:24:16.990 --> 00:24:19.426
所以我們記得第一步是設置

00:24:19.526 --> 00:24:24.064
設置是關於爲你的代碼挑選屬性

00:24:24.131 --> 00:24:27.801
和動畫之類的 這都取決於你

00:24:28.869 --> 00:24:31.538
然後我們想要開始使用那個對象

00:24:32.139 --> 00:24:35.042
那是激活 我們激活它

00:24:35.409 --> 00:24:37.211
那對我們的控制器意味着什麼呢

00:24:37.611 --> 00:24:41.548
那意味着我們想要開始接受
這些狀態通知

00:24:41.615 --> 00:24:45.586
狀態變化的通知
所以我們會向子系統註冊

00:24:45.652 --> 00:24:49.890
並要求在主隊列上接受通知

00:24:49.957 --> 00:24:52.793
我們想在用戶界面進行邏輯的處理

00:24:54.962 --> 00:24:56.230
鑑於它非常靈活

00:24:57.531 --> 00:24:59.867
那就是你的代碼 那就是你想做的

00:24:59.933 --> 00:25:04.872
你的應用有動畫以及非常好的用戶界面

00:25:06.273 --> 00:25:10.310
但你的應用有些部分不需要可視指示

00:25:10.377 --> 00:25:13.480
或可能不使用數據轉換子系統

00:25:13.547 --> 00:25:17.284
而且你想回收控制器的資源

00:25:17.351 --> 00:25:18.819
當你不想要它了

00:25:20.153 --> 00:25:23.557
我很想說 主線程

00:25:23.624 --> 00:25:27.461
是唯一真正擁有
BusyController的子系統

00:25:27.528 --> 00:25:30.297
我將會像這樣去掉它

00:25:30.364 --> 00:25:33.934
在初始化過程中從子系統中註冊控制器

00:25:34.001 --> 00:25:35.135
從好的方面想

00:25:36.170 --> 00:25:37.070
這種方法不起作用

00:25:37.137 --> 00:25:40.174
我將會用兩個例子告訴你爲什麼

00:25:42.609 --> 00:25:44.077
讓我們回退一步

00:25:44.278 --> 00:25:47.114
我們的BusyController
是參考UI

00:25:47.181 --> 00:25:49.516
主隊列和用戶界面

00:25:50.384 --> 00:25:54.555
然而 當我們用數據轉換子系統註冊時

00:25:54.621 --> 00:26:00.561
很可能引用從數據結構轉到這個對象

00:26:00.961 --> 00:26:03.797
這意味着當我們去除這些引用

00:26:03.864 --> 00:26:05.499
主線程有的參考

00:26:06.600 --> 00:26:10.704
仍然會遺留一個
這意味着deinit 無法運行

00:26:10.771 --> 00:26:13.707
這意味着它會被註冊 被收集

00:26:13.774 --> 00:26:16.910
接着因爲被遺棄的內存你放棄了

00:26:19.146 --> 00:26:22.950
然而 你們是技術熟練的開發人員
知道怎麼來修復那個

00:26:23.016 --> 00:26:26.286
弱引用 我會說 你們是對的

00:26:26.887 --> 00:26:28.755
但是 這並不是故事的結局

00:26:29.122 --> 00:26:33.126
因爲這看起來並不像個真正的應用

00:26:33.460 --> 00:26:36.196
圖形對象複雜得多

00:26:36.797 --> 00:26:39.466
使用有引用的對象是不常見的

00:26:39.533 --> 00:26:45.739
還有一大堆其他對象
比如說octopus對象

00:26:48.609 --> 00:26:52.546
我將繼續從主線程中去除引用

00:26:52.946 --> 00:26:55.015
不像之前 這不是廢棄的內存

00:26:55.082 --> 00:26:58.151
因爲octopus對象知道它有引用

00:26:59.419 --> 00:27:02.589
但若我們從上下文中
去除octopus對象時

00:27:02.656 --> 00:27:06.760
數據轉換系統 將會發生什麼

00:27:06.827 --> 00:27:10.797
它將去除
BusyController的引用

00:27:11.565 --> 00:27:14.301
記住 這將在 運行的

00:27:14.368 --> 00:27:16.236
因爲那是deinit所做的

00:27:17.404 --> 00:27:21.141
然後你有了一個問題
因爲非常可能做到的

00:27:21.208 --> 00:27:23.644
你需要同步一個調度隊列

00:27:23.710 --> 00:27:25.379
它擁有那個數據結構

00:27:25.913 --> 00:27:29.216
你猜到了 我們最後會得到一個死鎖

00:27:33.754 --> 00:27:36.723
實際上 那個漏洞是非常普遍的

00:27:37.191 --> 00:27:40.827
以致於我們爲它寫了一個斷言
在這個新版本中

00:27:42.062 --> 00:27:46.500
如果你在上一個發佈版本中
運行那個代碼

00:27:47.267 --> 00:27:52.072
它會斷言 在OS X或者模擬器上

00:27:52.306 --> 00:27:57.511
你得到的奔潰報告有一個特定應用信息

00:27:57.678 --> 00:28:00.647
指向你有的實際問題

00:28:00.747 --> 00:28:02.115
所以你可以很簡單地修好它

00:28:03.050 --> 00:28:06.653
好了 現在我們知道
我們真的不想從deinit註銷

00:28:06.720 --> 00:28:07.955
我們如何修理它呢

00:28:09.957 --> 00:28:12.960
我們通過我們的第三步來修理

00:28:13.026 --> 00:28:15.829
作廢 一個顯示函數調用

00:28:16.263 --> 00:28:20.634
在這個作廢下 我們通過註冊實現它

00:28:23.770 --> 00:28:27.975
同樣 因爲我們有預設條件
讓我們使用它們

00:28:28.041 --> 00:28:29.943
因爲這個對象
BusyController

00:28:30.010 --> 00:28:32.079
確實應該在主進程中被管理

00:28:32.145 --> 00:28:35.616
你想確保API的用戶正確地使用它

00:28:35.916 --> 00:28:37.818
所以你會想要一個預設條件

00:28:37.885 --> 00:28:40.254
那隻發生在主進程上

00:28:41.021 --> 00:28:42.256
或者主隊列上

00:28:44.558 --> 00:28:46.093
但是那不是那樣子的

00:28:47.394 --> 00:28:49.096
我們還有最後一個問題

00:28:49.429 --> 00:28:52.766
記住 這都是發生在主進程上的

00:28:53.433 --> 00:28:56.637
你有這個子系統 數據轉化子系統

00:28:56.803 --> 00:29:00.007
它會告訴你狀態變化

00:29:00.674 --> 00:29:04.244
你可能有一些當你作廢的時候發生

00:29:04.478 --> 00:29:05.646
我們如何解決那個呢

00:29:06.180 --> 00:29:10.484
我們想要追蹤作廢作爲一個真的狀態

00:29:11.084 --> 00:29:14.188
那是什麼意思呢 就是這個意思

00:29:14.821 --> 00:29:17.824
你想要追蹤作廢 比如

00:29:17.891 --> 00:29:21.261
作爲你的對象中的一個布爾值
你記住當你做這個的時候

00:29:23.030 --> 00:29:26.733
同時 讓我們說一下更多的預設條件

00:29:27.067 --> 00:29:30.771
確保加強 在你的對象被取消分配之前

00:29:30.838 --> 00:29:33.974
它已經被正確地作廢
它會幫助你找到漏洞

00:29:35.642 --> 00:29:38.145
爲什麼這很有趣呢？因爲現在

00:29:39.413 --> 00:29:43.283
在你處理狀態轉化通知的代碼中

00:29:43.350 --> 00:29:46.453
我們可以觀察對象被作廢

00:29:46.520 --> 00:29:48.722
實際把通知扔在地上

00:29:48.789 --> 00:29:51.658
不是以令人尷尬的方式更新用戶界面

00:29:54.161 --> 00:29:56.864
好了 這大致就是這個複雜的例子

00:29:57.464 --> 00:30:02.069
我希望你會回去看一下
你的應用和你的代碼

00:30:02.135 --> 00:30:05.172
嘗試去發現這個模式能幫助你的地方

00:30:05.239 --> 00:30:08.308
減少代碼的複雜性和可能清除漏洞

00:30:10.143 --> 00:30:15.082
這也應該不會讓你感到驚訝
我們給你這個建議

00:30:16.350 --> 00:30:21.388
GCD對象
它的真實目的是被同步地使用

00:30:21.455 --> 00:30:23.624
遵循完全相同的模式

00:30:25.392 --> 00:30:30.030
讓我們以那種方式看待GCD對象

00:30:34.835 --> 00:30:37.437
所以我們要記住第一步是設置

00:30:37.804 --> 00:30:40.440
給調度對象設置是你可以做的所有事情

00:30:40.507 --> 00:30:43.310
當你創建對象 所有你可以傳遞的屬性

00:30:43.477 --> 00:30:46.647
Matt前面已展示過標籤和隊列屬性

00:30:48.081 --> 00:30:50.717
在這裏 我們也有一個調度資源

00:30:50.951 --> 00:30:53.954
我們觀察文件描述器 它獲得一些屬性

00:30:54.922 --> 00:30:56.890
資源也有句柄

00:30:57.424 --> 00:30:59.560
特別是代碼中的事件句柄

00:30:59.626 --> 00:31:03.463
當你在你的觀察中發起的資源時
它會運行

00:31:03.530 --> 00:31:04.865
那是事件等待

00:31:05.699 --> 00:31:10.537
對於我們這裏擁有的資源
那是當有可用的數據的時候

00:31:12.573 --> 00:31:14.641
一旦你設置好了你的對象
它已經準備好了

00:31:14.708 --> 00:31:17.244
你想要試用它和激活它

00:31:20.781 --> 00:31:23.183
在這個新版本中 我們做了改進

00:31:23.250 --> 00:31:27.087
對於API調用 調用激活

00:31:27.721 --> 00:31:29.923
它曾經是用於調度資源

00:31:29.990 --> 00:31:32.993
初始摘要就是那個意思

00:31:33.227 --> 00:31:38.832
我們實際上暫停和激活
作爲兩個不同的概念

00:31:39.499 --> 00:31:43.170
在重啓激活中可以被多次調用

00:31:43.237 --> 00:31:44.905
它只會執行一次

00:31:46.573 --> 00:31:48.876
協議是當你已經調用了激活

00:31:48.942 --> 00:31:51.879
你再也不會改變你的對象的屬性

00:31:54.114 --> 00:32:00.020
我們也發現以你使用資源的方式
創建隊列

00:32:00.087 --> 00:32:02.589
創建時讓它們在初始化
處於非激活狀態是很有用的

00:32:02.923 --> 00:32:06.627
我們一家增加了一個新的屬性
讓你這麼做

00:32:06.693 --> 00:32:09.463
這被命名爲initiallyInactive

00:32:10.230 --> 00:32:13.166
一旦這個隊列被創建了
你可以傳遞它 結束

00:32:13.267 --> 00:32:16.136
以你喜歡的方式配置它 最後激活它

00:32:19.006 --> 00:32:23.544
調度對象中的很多都不需要顯式的作廢

00:32:23.610 --> 00:32:25.078
比如組或者隊列

00:32:25.312 --> 00:32:29.216
因爲你停止使用它們的時候
它們就會變成非激活狀態

00:32:30.217 --> 00:32:35.722
這是非常不同於資源的
資源有顯示的作廢

00:32:35.789 --> 00:32:36.823
它叫做Cancel

00:32:38.258 --> 00:32:41.662
資源的取消就是做了你期望的事情

00:32:41.728 --> 00:32:44.998
那就是你停止從你檢測的東西中
獲取事件

00:32:45.866 --> 00:32:48.101
但這不是它所做的唯一的事情

00:32:48.368 --> 00:32:49.837
它所做的第二件事是

00:32:49.903 --> 00:32:53.073
如果你在你的資源中
設立了一個取消句柄

00:32:53.807 --> 00:32:55.008
比如這裏

00:32:55.776 --> 00:32:58.745
它會在取消時運行在一個隊列目標上

00:33:00.480 --> 00:33:04.384
這實際上就是你想要擺脫的資源

00:33:04.451 --> 00:33:07.254
你在監測它 比如關閉文件腳步

00:33:07.321 --> 00:33:08.155
幀內存

00:33:10.490 --> 00:33:12.259
最後但不是最不重要的一個

00:33:12.826 --> 00:33:16.697
對資源的取消時當你的句柄被銷燬

00:33:17.464 --> 00:33:19.199
句柄就是關閉

00:33:19.466 --> 00:33:22.369
它們獲取對象甚至是資源自己

00:33:22.936 --> 00:33:24.771
它們可以是讀取過程的一部分

00:33:27.040 --> 00:33:31.111
調用取消是你們破壞那讀取循環的方式

00:33:31.578 --> 00:33:36.383
這是爲什麼始終取消你的資源
是那麼的重要

00:33:42.189 --> 00:33:46.360
所以你記住前面所說的一點
我們增加了很多預設條件

00:33:46.426 --> 00:33:49.062
在我們的代碼中 因爲我們想要確保

00:33:49.530 --> 00:33:54.601
同步使用的對象永遠是
以你可以期待的方式被使用

00:33:56.003 --> 00:33:57.538
調度也是一樣的

00:33:57.704 --> 00:34:00.440
期待當你的對象被取消分配了

00:34:00.507 --> 00:34:01.942
它是在一個不同的狀態

00:34:02.743 --> 00:34:05.579
調度期望你做兩個事情

00:34:05.846 --> 00:34:11.217
第一 你的對象是激活的
第二 它們不是被暫停的

00:34:13.954 --> 00:34:16.924
爲什麼它是暫停或者是非激活的原因是

00:34:16.989 --> 00:34:19.193
意味着你作爲一個開發者

00:34:19.259 --> 00:34:22.329
不要認爲運行與其相關的代碼是安全的

00:34:22.396 --> 00:34:24.998
但是我們需要運行代碼來擺脫這個對象

00:34:30.871 --> 00:34:31.772
好了

00:34:32.472 --> 00:34:39.279
今天我們看到了你可以如何
以數據流的方式思考你的應用

00:34:39.513 --> 00:34:44.217
和你應該如何使用它
來將其劃分爲相當獨立的子系統

00:34:44.284 --> 00:34:49.056
使用值類型達到交流的目的

00:34:51.324 --> 00:34:53.226
如果你需要同步狀態

00:34:53.493 --> 00:34:57.331
我們也向你展示了你可以怎麼使用
調度隊列來做這個

00:34:58.131 --> 00:35:03.437
最後 當你有對象 它們是被使用過的
在一個同步性非常強的世界

00:35:03.737 --> 00:35:07.708
如何使用激活和作廢
來使得這個模式正確

00:35:09.743 --> 00:35:15.282
這是一個鏈接
它向你們展示更多與這個演講相關資源

00:35:16.016 --> 00:35:21.088
一些相關演講 若你對調度感興趣

00:35:21.154 --> 00:35:24.825
你們應該看看 因爲它們非常的有趣

00:35:25.726 --> 00:35:29.696
就是這樣
這就是使用GCD進行同步編程