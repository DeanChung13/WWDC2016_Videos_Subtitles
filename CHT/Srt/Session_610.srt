00:00:19.419 --> 00:00:23.257
SpriteKit的新特性

00:00:35.736 --> 00:00:36.603
各位大家好

00:00:36.870 --> 00:00:38.772
歡迎來到
“SpriteKit的新特性”

00:00:38.972 --> 00:00:42.609
我叫Ross
我是Apple遊戲技術組的工程師

00:00:42.676 --> 00:00:44.244
我非常激動能向你們展示

00:00:44.311 --> 00:00:45.979
去年我們工作的進展

00:00:51.285 --> 00:00:52.686
在開始講

00:00:52.753 --> 00:00:54.688
引進的新功能之前

00:00:54.755 --> 00:00:56.890
我想先快速回顧一下
SpriteKit是什麼

00:00:56.957 --> 00:00:58.659
對於不太熟悉它的人

00:01:01.261 --> 00:01:04.230
那麼 SpriteKit是給
2D遊戲的圖像框架

00:01:04.730 --> 00:01:07.234
它設計爲高度靈活和易用

00:01:07.301 --> 00:01:10.137
同時提供優良性能

00:01:10.204 --> 00:01:11.905
所以 有極少的技術屏障

00:01:11.972 --> 00:01:14.474
置於你和你想製作的偉大遊戲之間

00:01:15.909 --> 00:01:20.647
它爲我們所有平臺支持
包括iOS、macOS、tvOS

00:01:20.981 --> 00:01:24.184
而且今年我們可以自豪的說
它也能在watchOS上運行了

00:01:25.819 --> 00:01:27.921
任何應用 我知道 是不是很棒？

00:01:31.325 --> 00:01:33.594
任何用SpriteKit的應用
相當於自動用了

00:01:33.660 --> 00:01:35.295
現有的最新框架

00:01:35.362 --> 00:01:37.397
不需要任何重構和重新部署

00:01:37.464 --> 00:01:38.799
你們就可一直與時俱進了

00:01:39.132 --> 00:01:41.835
它和Swift自然集合
所以你能使用

00:01:41.902 --> 00:01:44.171
所有這個新語言的好功能

00:01:46.740 --> 00:01:48.775
但框架僅是
整個SpriteKit的一半

00:01:49.309 --> 00:01:52.079
另一半是Xcode集成即時編輯器

00:01:52.145 --> 00:01:54.982
可以讓你直接在編輯器裏預覽場景

00:01:55.048 --> 00:01:56.917
視覺上展示出來

00:01:57.718 --> 00:01:59.720
它提供基於時間線的動畫

00:01:59.786 --> 00:02:01.522
讓你給遊戲注入生命

00:02:01.588 --> 00:02:03.457
通過我們強健的粒子編輯器

00:02:04.591 --> 00:02:06.193
它完全集成於資源目錄

00:02:06.260 --> 00:02:09.128
所以你可以利用功能如應用瘦身和

00:02:09.196 --> 00:02:11.765
按需加載資源 不用飽受折磨

00:02:12.432 --> 00:02:14.101
今年我們要引進圖塊地圖編輯

00:02:14.168 --> 00:02:15.602
和GameplayKit集成

00:02:15.669 --> 00:02:17.304
這兩功能我們過會兒都會講一些

00:02:18.639 --> 00:02:21.008
最後 SpriteKit完全
由Metal框架支持

00:02:21.074 --> 00:02:22.676
在所有支持其的設備上

00:02:23.510 --> 00:02:25.712
所以你們能夠自動得到它高性能福利

00:02:25.779 --> 00:02:27.648
不需要額外做什麼

00:02:29.850 --> 00:02:31.919
今年我們繼續引進新功能

00:02:31.985 --> 00:02:35.489
讓在Apple平臺上開發好遊戲
比何時都簡單

00:02:36.056 --> 00:02:38.225
所以不用多說什麼
讓我們直接開始講新進展

00:02:39.893 --> 00:02:41.795
一般像這種演講呢

00:02:41.862 --> 00:02:43.530
我們會把工具之類的東西放在最後

00:02:43.597 --> 00:02:45.499
但是今天我們會把這些提前一些

00:02:46.099 --> 00:02:48.368
因爲編輯器至關重要

00:02:48.435 --> 00:02:50.571
對應用SpriteKit來說

00:02:50.871 --> 00:02:52.806
而且今年有些非常令人激動的新內容

00:02:52.873 --> 00:02:55.809
從場景大綱視圖開始

00:02:57.144 --> 00:02:59.913
知道場景裏有什麼
對象之間的關係

00:02:59.980 --> 00:03:02.449
對有效場景管理極爲重要

00:03:03.350 --> 00:03:05.819
Xcode 7中
完全通過Jump Bar完成

00:03:06.486 --> 00:03:09.022
Jump Bar設計了用來定位文件

00:03:09.089 --> 00:03:11.758
從工作空間更簡單
但是當你在SpriteKit

00:03:11.825 --> 00:03:14.494
層級裏包含所有節點

00:03:15.195 --> 00:03:17.197
幫助定位所有這些節點

00:03:17.264 --> 00:03:19.600
如果這樣就好了 能看到整個層級

00:03:19.666 --> 00:03:20.767
同時看到

00:03:22.369 --> 00:03:26.106
所以現在在Xcode 8你可以
用新的場景大綱視圖

00:03:26.807 --> 00:03:29.309
這是一個新面板
允許你看到場景中所有節點

00:03:29.376 --> 00:03:32.246
和節點間親子關係
同時看到

00:03:33.213 --> 00:03:34.715
還能選擇節點

00:03:34.781 --> 00:03:38.252
重命名、刪除場景中的節點

00:03:39.586 --> 00:03:42.489
你還能改變節點間親子關係

00:03:42.556 --> 00:03:43.857
通過拖拽它們

00:03:43.924 --> 00:03:47.594
很像重新整理keynote幻燈片

00:03:49.463 --> 00:03:52.466
把一個子節點放在
另一個節點下成爲子節點

00:03:52.733 --> 00:03:55.035
把節點放在另一個節點下
成爲那個節點的子節點

00:03:55.335 --> 00:03:58.639
或者把一個子節點
拖出父節點脫離親子關係

00:04:00.307 --> 00:04:03.110
還能鎖定 隱藏節點

00:04:03.777 --> 00:04:07.080
鎖定節點就不能在
場景視圖中更改、選擇

00:04:07.147 --> 00:04:09.616
這讓你在場景中定位簡單

00:04:09.683 --> 00:04:12.986
當你有很多筆記
場景可能變得雜亂糾結

00:04:13.787 --> 00:04:14.888
隱藏也一樣

00:04:14.955 --> 00:04:17.690
有很多大的對象時很方便

00:04:17.757 --> 00:04:20.527
有時你會想能控制一些
大的對象後面的節點

00:04:21.528 --> 00:04:24.097
所以所有功能讓場景大綱視圖很有用

00:04:24.164 --> 00:04:27.434
管理場景很方便

00:04:29.536 --> 00:04:31.238
所以接下來我想講講我們怎樣整合

00:04:31.305 --> 00:04:33.974
GameplayKit進
SpriteKit編輯器

00:04:35.175 --> 00:04:37.110
去年我們引入GameplayKit

00:04:37.177 --> 00:04:39.713
一個全新的框架
提供即用解決方案

00:04:39.780 --> 00:04:42.416
給創造遊戲時常見問題

00:04:43.217 --> 00:04:45.118
去年包含的新功能之一

00:04:45.853 --> 00:04:48.589
是實體和組件
這是一個設計模式 重點在

00:04:48.655 --> 00:04:50.490
模塊化和可重用性

00:04:51.391 --> 00:04:53.694
組件封裝行爲

00:04:54.394 --> 00:05:01.034
指定組件到對象
或者指定實體到對象來改變對象行爲

00:05:02.669 --> 00:05:04.838
你可以這樣做不寫任何代碼

00:05:04.905 --> 00:05:06.306
給每個場景中的對象

00:05:07.241 --> 00:05:09.109
我們不打算講太多細節

00:05:09.176 --> 00:05:12.913
這些如何工作
但這麼想很有用 把組件

00:05:12.980 --> 00:05:16.416
看成代碼積木
你可以用不同方式組裝

00:05:16.483 --> 00:05:18.719
來創造有不同行爲的對象

00:05:20.354 --> 00:05:23.090
常見有一個組件代表體力值

00:05:23.156 --> 00:05:24.825
給可以被傷害的對象

00:05:25.425 --> 00:05:27.761
或者一個有物理數據的組件

00:05:27.828 --> 00:05:29.730
給可以互相撞擊的對象

00:05:29.930 --> 00:05:35.602
一個組件允許對象由玩家輸入操控

00:05:37.538 --> 00:05:38.739
組件非常強大

00:05:38.805 --> 00:05:41.842
允許你操控對象行爲

00:05:44.111 --> 00:05:45.979
現在把實體和組件帶進

00:05:46.046 --> 00:05:47.347
SpriteKit編輯器中

00:05:48.248 --> 00:05:51.385
你可以指定創建的組件直接到節點

00:05:51.451 --> 00:05:52.886
在場景中的節點

00:05:52.953 --> 00:05:55.722
從調試器中新出的實體與組件面板

00:05:56.523 --> 00:05:58.225
另外 可以選擇顯示屬性

00:05:58.292 --> 00:05:59.893
在自定義組件中

00:06:00.327 --> 00:06:03.830
於是屬性會出現在編輯器上
你便可以微調每個節點

00:06:04.998 --> 00:06:08.001
最好的部分是
若你已在用GameplayKit

00:06:08.068 --> 00:06:10.604
實體與組件了
我們會爲您完成所有那些繁重工作

00:06:10.671 --> 00:06:13.307
你只要從編輯器直接構成對象

00:06:16.109 --> 00:06:19.279
另一個GameplayKit引進的
強大的功能是路徑尋找

00:06:19.680 --> 00:06:24.184
路徑尋找是從A點到B點尋找最佳路徑

00:06:24.251 --> 00:06:27.521
通過操控所謂的導航圖像

00:06:28.622 --> 00:06:33.660
導航圖像是通過鏈接
結合起來的節點組合

00:06:34.428 --> 00:06:38.131
它們描述了對象如何在場景中移動

00:06:38.198 --> 00:06:39.933
不會撞到任何障礙物

00:06:42.169 --> 00:06:45.105
現在加入導航圖像
進SpriteKit編輯器

00:06:45.172 --> 00:06:48.008
那麼你可在場景中創建並直接編輯它們

00:06:48.542 --> 00:06:50.410
你可以加入 刪除導航圖像中的節點

00:06:50.477 --> 00:06:53.480
或在編輯器中點擊來建立連接

00:06:54.515 --> 00:06:56.884
利用圖像創造相應代碼

00:06:57.718 --> 00:06:59.753
這種創建圖像的方式能更快速 簡單

00:06:59.820 --> 00:07:01.922
地定義實體在場景中移動

00:07:01.989 --> 00:07:03.590
讓路徑尋找輕而易舉

00:07:05.659 --> 00:07:07.394
那麼現在講講一個特性 幫助你

00:07:07.461 --> 00:07:09.329
我知道 是不是特別棒

00:07:13.200 --> 00:07:14.468
那麼現在講講一個特性

00:07:14.535 --> 00:07:16.570
幫助你最大化提高遊戲性能

00:07:16.637 --> 00:07:18.205
每秒顯示幀數性能表

00:07:19.840 --> 00:07:22.176
也許你用過Xcode 7的
每秒顯示幀數報告

00:07:22.743 --> 00:07:23.744
當你運行應用

00:07:23.810 --> 00:07:26.313
會提供一個實時性能數據

00:07:26.380 --> 00:07:31.185
包括幀速率
圖形處理器利用率

00:07:33.053 --> 00:07:34.521
和CPU/GPU幀時

00:07:35.422 --> 00:07:37.424
這對分析性能很有用

00:07:37.491 --> 00:07:39.359
但有更高粒度會更好

00:07:43.897 --> 00:07:47.167
現在在Xcode 8
你還能看到時間線歷史

00:07:47.234 --> 00:07:51.772
有SpriteKit應用時間
CPU和GPU幀時

00:07:52.539 --> 00:07:55.209
另外它和CPU時間脫離 所以你能

00:07:55.275 --> 00:07:57.477
看到花了多久 渲染

00:07:57.544 --> 00:08:01.982
運行刷新循環
評估物理時間和閒置時間

00:08:02.816 --> 00:08:05.385
這個信息極有用 用來決定

00:08:05.452 --> 00:08:07.921
你需要關注提高哪方面

00:08:08.822 --> 00:08:12.159
每秒顯示幀數性能表是設計來提高

00:08:12.226 --> 00:08:14.094
遊戲在移動平臺上的表現

00:08:14.161 --> 00:08:17.698
它在iOS和
watchOS應用上都有

00:08:20.968 --> 00:08:23.370
那麼我們講了一些編輯器的新增功能

00:08:23.437 --> 00:08:25.472
現在換擋 來講講

00:08:25.539 --> 00:08:27.407
一項新功能 出現在編輯器和

00:08:27.474 --> 00:08:29.476
框架中 圖塊地圖

00:08:31.512 --> 00:08:34.014
對不熟悉圖塊地圖講一下

00:08:34.313 --> 00:08:36.817
這是網格平均分佈的圖像

00:08:37.751 --> 00:08:39.285
用來拼構場景

00:08:39.352 --> 00:08:42.655
從一個叫做圖塊的 小而重複的圖像
的集合

00:08:44.124 --> 00:08:47.227
把圖塊看做是
圖塊地圖看作是拼圖

00:08:47.294 --> 00:08:49.396
圖塊看做每片拼圖

00:08:49.930 --> 00:08:52.533
每片看上去沒什麼
但放在一塊兒

00:08:52.599 --> 00:08:55.602
可以創造豐富細節的大場景

00:08:57.204 --> 00:08:58.872
那麼在細細討論功能之前

00:08:58.939 --> 00:09:01.742
先講如何使用

00:09:02.776 --> 00:09:04.578
從小的重複圖片建造場景

00:09:04.645 --> 00:09:06.146
在創造遊戲時很常見

00:09:07.648 --> 00:09:09.583
沒有圖塊地圖
如果你想辦到

00:09:09.650 --> 00:09:13.921
就要手動放每一個圖像

00:09:16.190 --> 00:09:17.491
也完全可以

00:09:18.225 --> 00:09:21.929
用小圖像集合能保持記憶負擔低

00:09:22.896 --> 00:09:24.531
也能重新整理來修改

00:09:24.598 --> 00:09:25.866
場景外形

00:09:26.366 --> 00:09:27.835
可是 複製粘貼

00:09:27.901 --> 00:09:30.437
和手動排列每一個圖像

00:09:30.504 --> 00:09:32.506
非常費時乏味

00:09:33.373 --> 00:09:36.076
常常導致場景被凌亂地放滿節點

00:09:36.143 --> 00:09:38.645
馬上變得很難管理

00:09:40.347 --> 00:09:42.482
所以相反你能用大

00:09:42.549 --> 00:09:45.986
有很多細節的圖像

00:09:46.053 --> 00:09:49.022
去年發佈的示例遊戲DemoBots
用了這個方法

00:09:49.857 --> 00:09:52.492
所以場景中用大圖像很快捷

00:09:52.559 --> 00:09:56.363
也能讓場景不再雜亂

00:09:56.930 --> 00:09:58.332
如果你想改變外形

00:09:58.398 --> 00:10:00.934
就需要修改資源目錄

00:10:01.902 --> 00:10:04.304
另外 大圖像耗費更多容量

00:10:04.671 --> 00:10:06.640
如果你想在遊戲中有更多變化

00:10:06.707 --> 00:10:08.842
需要更多大容量資源

00:10:08.909 --> 00:10:11.578
就會更加劇容量過載

00:10:13.280 --> 00:10:16.183
所以圖塊地圖同時給你
兩個問題的解決方案

00:10:16.650 --> 00:10:17.718
它們易管理

00:10:17.784 --> 00:10:20.087
而且因爲每個圖塊地圖只是場景中
一個節點

00:10:20.521 --> 00:10:21.922
可以快速修改

00:10:22.189 --> 00:10:27.060
比如想改這裏的沙圖塊爲水

00:10:27.261 --> 00:10:30.664
我只要告訴圖塊地圖改類型就好了

00:10:31.965 --> 00:10:35.836
用小圖塊集合
圖塊地圖可以構造大的、

00:10:35.903 --> 00:10:38.672
有細節的場景
最低限度的容量負擔

00:10:40.507 --> 00:10:43.243
圖塊地圖對很多不同遊戲和
藝術風格也很有利

00:10:43.544 --> 00:10:46.346
你可以用來做自頂向下的RPG

00:10:46.747 --> 00:10:50.417
橫向卷軸遊戲
等距城市建造遊戲

00:10:51.552 --> 00:10:53.020
六角形桌上游戲

00:10:53.086 --> 00:10:55.289
圖塊地圖非常靈活

00:10:56.857 --> 00:10:59.326
所以你會發現圖塊地圖非常可視化

00:10:59.393 --> 00:11:01.428
不用告訴你它們怎麼工作

00:11:01.495 --> 00:11:03.564
我們直接進入演示部分給你看

00:11:03.630 --> 00:11:05.632
現在我們在SpriteKit編輯器

00:11:05.699 --> 00:11:08.235
場景中已經有了圖塊地圖

00:11:09.403 --> 00:11:11.104
先選擇它

00:11:11.605 --> 00:11:13.874
最快編輯圖塊地圖的方式

00:11:13.941 --> 00:11:15.576
只是雙擊它

00:11:16.343 --> 00:11:19.079
顯示新的圖塊編輯欄

00:11:19.146 --> 00:11:20.414
在這兒屏幕上方

00:11:21.215 --> 00:11:25.219
默認選擇筆刷工具

00:11:25.485 --> 00:11:27.754
可以在圖塊地圖上塗色

00:11:28.121 --> 00:11:31.091
塗色 只要點擊

00:11:31.625 --> 00:11:34.595
就開始放置圖塊在地圖上了

00:11:36.830 --> 00:11:39.266
如果你想改放置了的圖塊的類型

00:11:39.666 --> 00:11:43.770
只要點擊這裏的 選擇圖塊 按鈕

00:11:44.037 --> 00:11:47.207
就會顯示所有可以放置的圖塊類型

00:11:48.141 --> 00:11:53.680
在這兒放邊圖塊和角圖塊

00:11:55.182 --> 00:11:56.984
在放一些邊圖塊

00:11:57.050 --> 00:11:58.952
你會發現很簡單 放圖塊

00:11:59.019 --> 00:12:01.121
這樣拼湊場景

00:12:01.755 --> 00:12:03.891
但是一個個放圖像

00:12:03.957 --> 00:12:05.559
還是有點重複乏味

00:12:05.859 --> 00:12:08.061
那麼展示一個更好的辦法

00:12:09.530 --> 00:12:14.368
先放一片新圖塊地圖在場景中

00:12:20.607 --> 00:12:23.243
默認下圖塊地圖有個功能

00:12:24.678 --> 00:12:27.915
在調試器可用叫 允許自動繪製地圖

00:12:30.851 --> 00:12:33.453
這個功能做的是開始編輯地圖時

00:12:33.520 --> 00:12:34.888
選擇圖塊

00:12:34.955 --> 00:12:37.391
可以看到不是放置單個圖塊

00:12:37.457 --> 00:12:39.793
而是一組組圖塊

00:12:39.860 --> 00:12:43.430
整理成不同地貌類型 草 土 石 水

00:12:43.830 --> 00:12:45.232
選擇一個

00:12:45.766 --> 00:12:47.734
現在放一塊圖塊地圖時

00:12:47.801 --> 00:12:50.304
點擊放置中心圖塊

00:12:50.370 --> 00:12:52.773
同時自動放下所有邊圖塊

00:12:53.807 --> 00:12:57.010
對快速簡單創建場景很棒

00:12:57.077 --> 00:13:00.681
不用放每個邊圖塊角圖塊

00:13:00.747 --> 00:13:03.050
只要畫 它會自動生成

00:13:03.717 --> 00:13:05.686
每個我們需要的圖塊 不用我們

00:13:05.752 --> 00:13:08.755
費多餘的時間

00:13:08.822 --> 00:13:11.358
這讓畫圖塊特別快

00:13:17.831 --> 00:13:20.834
現在看看圖塊集合怎麼被放在一塊

00:13:21.835 --> 00:13:24.538
圖塊集合到達各自的SKS文件

00:13:24.972 --> 00:13:28.175
你可以在這兒看到
遊戲帶有的不同類型

00:13:28.242 --> 00:13:30.043
比如草 泥土 石頭 水

00:13:30.410 --> 00:13:32.412
你可以看到它們排列好了

00:13:33.680 --> 00:13:35.582
能讓你看到圖塊應該怎樣放在一塊兒

00:13:35.649 --> 00:13:39.253
這裏放個新的圖塊組

00:13:42.556 --> 00:13:47.027
我們只要構建對自動繪製地圖有用的
新圖塊組

00:13:47.094 --> 00:13:50.264
通過拖拽想用的符合相應位置的圖塊

00:13:50.330 --> 00:13:52.199
這裏有顯示輪廓表示

00:13:52.266 --> 00:13:54.134
大概圖塊長什麼樣

00:13:54.735 --> 00:13:59.973
只要把圖塊從現用的瀏覽器拖到這兒

00:14:01.074 --> 00:14:02.876
只要拖放進去

00:14:03.510 --> 00:14:08.148
就能快速簡單設立新圖塊組

00:14:17.357 --> 00:14:19.560
讓我們命名它

00:14:21.461 --> 00:14:23.130
叫它花園

00:14:25.032 --> 00:14:25.866
就好了

00:14:26.667 --> 00:14:28.035
現在進入場景

00:14:29.036 --> 00:14:30.470
創建一個圖塊地圖

00:14:32.239 --> 00:14:33.440
開始編輯它

00:14:34.875 --> 00:14:38.011
看到花園圖塊組已經在這兒了

00:14:38.278 --> 00:14:40.614
只要抓住它放進去

00:14:40.814 --> 00:14:43.483
所以你會發現設立新圖塊組多麼簡單

00:14:43.550 --> 00:14:45.385
而且已經可以自動繪製地圖.

00:14:45.452 --> 00:14:46.920
不用做任何其他的

00:14:48.055 --> 00:14:51.091
但是還有一些可以對圖塊組做的

00:14:51.859 --> 00:14:54.528
那麼回到圖塊
到另一個圖塊集合

00:14:54.595 --> 00:14:55.929
這個我之前做好的

00:14:56.330 --> 00:14:58.131
乍一眼看上去一樣

00:14:58.832 --> 00:15:02.302
但當我點擊其中一塊單一圖塊

00:15:02.369 --> 00:15:05.772
會看到這裏有每個圖塊的很多可用變種

00:15:06.206 --> 00:15:11.278
每個不同位置的圖塊都一樣

00:15:13.380 --> 00:15:15.849
所以當我們畫圖塊來組成圖塊地圖時

00:15:16.216 --> 00:15:19.219
它會隨機選擇圖塊其中一個變種

00:15:19.386 --> 00:15:21.655
所以圖塊地圖可以有很多變化

00:15:21.722 --> 00:15:26.527
另外可以指定樣式中不同重量
一些變量

00:15:26.994 --> 00:15:31.665
這裏 紅花放置重量爲3

00:15:33.534 --> 00:15:36.270
白花放置重量爲2

00:15:39.239 --> 00:15:41.308
藍花放置重量爲1

00:15:42.476 --> 00:15:43.911
所以紅花非常常見

00:15:43.977 --> 00:15:47.247
相比白花 更比藍花常見

00:15:47.648 --> 00:15:49.183
現在回到場景.

00:15:50.617 --> 00:15:52.085
創建另一個圖塊地圖

00:15:54.988 --> 00:15:57.057
指定剛剛設好的先進圖塊組到這裏

00:16:00.460 --> 00:16:03.096
現在刷這些圖塊

00:16:03.163 --> 00:16:05.299
可以看到變種出現

00:16:07.901 --> 00:16:09.703
所以你們可以看到圖塊組非常靈活

00:16:09.770 --> 00:16:11.505
可以畫出不同的樣子

00:16:11.572 --> 00:16:14.741
不用費很多力 很有用

00:16:16.310 --> 00:16:19.580
還可以做的關於圖塊地圖的是圖層

00:16:20.047 --> 00:16:22.349
在左邊的圖塊地圖裏

00:16:22.416 --> 00:16:25.319
看上去只有一個圖塊地圖

00:16:27.721 --> 00:16:29.189
但當我抓起它的時候

00:16:29.489 --> 00:16:32.392
你會看到實際上有2層在各自上面

00:16:36.997 --> 00:16:39.466
我們可以把一個圖層放在另一個上

00:16:39.533 --> 00:16:40.968
來讓它看上去好像

00:16:41.034 --> 00:16:45.072
有很多多樣的圖塊圖塊資源

00:16:45.138 --> 00:16:48.242
看上去這些資源設計用來

00:16:48.308 --> 00:16:51.845
過渡成草圖塊

00:16:52.145 --> 00:16:54.314
所以有草在邊緣

00:16:54.381 --> 00:16:56.149
把這個圖層移過來

00:16:57.017 --> 00:17:01.154
它們自然過渡到草

00:17:02.089 --> 00:17:05.157
移到土上也是一樣效果

00:17:05.224 --> 00:17:09.162
像是過渡到土

00:17:10.196 --> 00:17:12.965
這讓你從圖像庫中獲得很多額外用處

00:17:13.032 --> 00:17:16.670
如果讓它們在邊緣過渡成透明

00:17:16.737 --> 00:17:18.405
可以堆疊在一起 然後

00:17:18.704 --> 00:17:20.374
不管怎麼樣你可以僞裝 讓你

00:17:20.440 --> 00:17:24.178
從已有資源多出很多用處

00:17:25.512 --> 00:17:30.050
另外圖塊集合能做的是可以做動畫

00:17:30.784 --> 00:17:34.588
這是一個有些草和水的不錯的圖塊集合

00:17:34.655 --> 00:17:35.923
點擊 動畫按鈕

00:17:36.490 --> 00:17:40.294
如果仔細看會看到岸線

00:17:40.360 --> 00:17:43.230
在水圖塊上在起伏波動

00:17:45.032 --> 00:17:49.102
看看這組地圖的圖塊集合

00:17:50.838 --> 00:17:51.872
設置水圖塊

00:17:51.939 --> 00:17:55.242
直接從圖塊集合編輯器中預覽動畫

00:17:57.945 --> 00:18:00.814
選擇其中一個變體
會看到

00:18:00.881 --> 00:18:03.984
一列所有動畫中的幀

00:18:04.051 --> 00:18:06.453
給動畫設個每幀時間

00:18:06.520 --> 00:18:08.822
基本跟如何添加動畫效果給

00:18:08.889 --> 00:18:10.424
材質應用一樣

00:18:10.791 --> 00:18:12.693
設置動畫效果就這麼簡單

00:18:12.993 --> 00:18:15.495
給場景注入生機的好辦法

00:18:16.830 --> 00:18:21.635
除了在圖塊上逐幀展示動畫效果外

00:18:22.870 --> 00:18:25.172
還能給圖塊地圖本身添加

00:18:25.906 --> 00:18:27.875
圖塊地圖就是SK節點

00:18:27.941 --> 00:18:31.144
所以SK節點能做的它都能

00:18:31.512 --> 00:18:33.347
當然可以拖來拖去

00:18:34.982 --> 00:18:36.350
縮放它們

00:18:37.751 --> 00:18:39.086
旋轉它們

00:18:39.987 --> 00:18:42.055
注意可以編輯圖塊地圖

00:18:42.122 --> 00:18:43.957
當它們看上去這樣時
儘管有點奇怪

00:18:44.024 --> 00:18:46.727
當它們呈這樣奇怪角度的時候
還是可以

00:18:49.696 --> 00:18:52.933
因爲SK節點
圖塊地圖也只是節點

00:18:52.999 --> 00:18:54.701
可以在上面加事件

00:18:55.269 --> 00:18:58.405
這裏我已經在圖塊地圖加了很多事件

00:18:58.472 --> 00:19:00.240
通過縮放和旋轉

00:19:00.574 --> 00:19:01.975
把它動起來

00:19:02.042 --> 00:19:05.245
可以看到能 移動 縮放 旋轉

00:19:06.013 --> 00:19:07.214
然後把它放回去

00:19:09.183 --> 00:19:12.019
所以有很多方式給圖塊地圖加動畫

00:19:12.085 --> 00:19:13.353
非常有用

00:19:13.687 --> 00:19:18.258
事實上 可以利用圖層化和動畫

00:19:18.325 --> 00:19:19.960
來創造些有趣的效果

00:19:21.828 --> 00:19:22.896
在這個場景

00:19:23.263 --> 00:19:26.533
這裏圖塊地圖中有三個不同的圖層

00:19:27.334 --> 00:19:28.769
還不想做這個

00:19:29.203 --> 00:19:33.507
如果把照相機放這兒
點擊動畫

00:19:34.241 --> 00:19:38.011
僅僅在以不同速率移動圖塊地圖的圖層

00:19:38.078 --> 00:19:41.481
呈現深度的效果

00:19:41.548 --> 00:19:43.817
這個效果叫做視差滾動

00:19:43.884 --> 00:19:48.121
我在做的只是移動前景圖層

00:19:48.188 --> 00:19:51.758
以一種速度
中景一半速度

00:19:51.825 --> 00:19:54.127
背景又一半速度

00:19:54.628 --> 00:19:57.898
這完成了我們想要的效果
非常驚人

00:19:59.366 --> 00:20:04.571
圖塊地圖不僅支持簡單的正方形圖塊

00:20:04.905 --> 00:20:07.207
還支持六角形圖塊

00:20:07.574 --> 00:20:09.076
等距立體圖塊

00:20:09.142 --> 00:20:11.879
所以外貌有很大彈性

00:20:11.945 --> 00:20:13.947
來幫助你做成你的遊戲

00:20:17.951 --> 00:20:20.921
說到這兒 馬上看看遊戲示例

00:20:26.426 --> 00:20:28.829
這是一個我做的小平臺

00:20:30.898 --> 00:20:32.199
一個跑來跑去的小人

00:20:32.266 --> 00:20:34.668
你會發現有視差滾動

00:20:34.735 --> 00:20:36.103
在背景

00:20:36.403 --> 00:20:40.040
你會注意到這裏我在撞擊圖塊

00:20:40.874 --> 00:20:43.343
我做到這個效果

00:20:44.411 --> 00:20:46.747
通過利用自定義用戶數據

00:20:46.813 --> 00:20:49.216
放在每個圖塊

00:20:50.918 --> 00:20:53.020
向你們展示 在圖塊集合中

00:20:57.758 --> 00:20:59.226
選擇一個變體

00:20:59.293 --> 00:21:01.161
這裏有一些用戶數據

00:21:02.396 --> 00:21:06.099
一個值叫邊圖塊
是個布爾值 我設爲1

00:21:06.733 --> 00:21:09.336
在代碼中 我檢查圖塊地圖

00:21:09.403 --> 00:21:13.240
在這個平臺示例中
找尋所有這些邊圖塊

00:21:13.307 --> 00:21:15.843
找到一個 建一些物理數據

00:21:15.909 --> 00:21:18.846
讓玩家能和它撞擊

00:21:25.118 --> 00:21:27.654
因爲只是在圖塊地圖中

00:21:28.355 --> 00:21:32.392
比如想跳過這面大牆

00:21:34.127 --> 00:21:36.630
一旦運行遊戲 會發現

00:21:37.698 --> 00:21:40.601
我這個小人跳的不夠高來翻過它

00:21:41.101 --> 00:21:43.504
他非常想做到因爲那兒的紅按鈕
看上去非常誘人

00:21:43.570 --> 00:21:45.038
我很想按那個按鈕

00:21:45.906 --> 00:21:50.677
因爲我們只能從圖塊中生成物理數據

00:21:50.744 --> 00:21:53.280
和用戶數據
可以做的是到這裏

00:21:54.214 --> 00:21:55.749
擦除這些圖塊...

00:22:00.487 --> 00:22:01.989
再打包運行遊戲

00:22:03.290 --> 00:22:06.593
圖塊不見了 可以移動過去了

00:22:06.660 --> 00:22:08.495
不用改變代碼之類的

00:22:08.562 --> 00:22:10.931
只要用數據 來源於

00:22:10.998 --> 00:22:13.133
圖塊地圖來設置圖塊就行

00:22:13.200 --> 00:22:14.334
是的 非常簡單

00:22:17.738 --> 00:22:19.773
作爲獎勵 我可以跳到按鈕上

00:22:20.440 --> 00:22:21.375
耶

00:22:29.016 --> 00:22:32.719
那麼這就是圖塊地圖
如何在編輯器中工作了

00:22:36.757 --> 00:22:39.526
展示瞭如何在編輯器中工作

00:22:39.593 --> 00:22:42.296
看看框架這邊

00:22:43.030 --> 00:22:45.799
在編輯器中創建圖塊地圖時

00:22:45.866 --> 00:22:48.569
你不必被這些東西困擾

00:22:48.635 --> 00:22:50.504
但大概瞭解它怎樣工作挺好的

00:22:51.638 --> 00:22:54.608
那麼圖塊地圖由
SKTileMapNode類實現

00:22:54.675 --> 00:22:57.477
像在演示裏提到的是SK節點

00:22:57.978 --> 00:23:00.814
它包含所有放置了的圖塊的信息

00:23:01.582 --> 00:23:04.351
但要能放置圖塊 首先需要圖塊集合

00:23:05.919 --> 00:23:08.422
圖塊集合由SKTileSet類定義

00:23:08.755 --> 00:23:10.724
包含所有可用圖塊集合

00:23:11.091 --> 00:23:13.927
另外定義可以包含的那類圖塊信息

00:23:13.994 --> 00:23:16.496
可以是一般方形網格圖塊

00:23:16.563 --> 00:23:19.233
等邊立體圖塊或者六角形圖塊

00:23:21.869 --> 00:23:24.304
圖塊組由
SKTileGroup類定義

00:23:25.172 --> 00:23:27.774
像我們在演示裏看到的
圖塊組是一組相關圖塊

00:23:27.841 --> 00:23:30.611
常見的是地形類別如草或水

00:23:31.478 --> 00:23:34.781
圖塊組還規定組內單個圖塊

00:23:34.848 --> 00:23:36.583
在地圖如何放置

00:23:38.085 --> 00:23:40.921
規定由SKTileGroupRule類定義

00:23:41.455 --> 00:23:44.057
它還包含圖塊變體怎樣工作

00:23:44.124 --> 00:23:45.893
通過描述的圖案

00:23:47.761 --> 00:23:51.465
最後每個圖塊由SKTileDefinition描述

00:23:51.532 --> 00:23:53.467
定義了圖塊外形

00:23:53.934 --> 00:23:57.171
每個至少有一個圖像
如你在演示中所見

00:23:57.237 --> 00:24:00.741
圖塊可以由多幅圖像做成動畫
爲圖塊地圖帶來活力

00:24:01.475 --> 00:24:04.278
另外 圖塊可被翻轉和/或旋轉

00:24:04.344 --> 00:24:07.381
讓你從已有資源中獲得更多

00:24:09.550 --> 00:24:10.984
快速看一下代碼

00:24:11.051 --> 00:24:14.588
可以看到怎樣通過API創建、修改
圖塊地圖

00:24:15.389 --> 00:24:18.091
第一步先要得到想用的圖塊集合

00:24:18.158 --> 00:24:20.360
你可以用編程的方式創建

00:24:20.427 --> 00:24:22.963
但過程非常複雜
所以我們高度推薦

00:24:23.030 --> 00:24:25.465
用圖塊集合編輯器創建

00:24:27.034 --> 00:24:28.669
要拿一個你已經做好的很簡單

00:24:29.203 --> 00:24:31.171
只要調用這個方便的初始化方式

00:24:31.238 --> 00:24:33.373
用你想命名的圖塊集合名字

00:24:35.442 --> 00:24:37.244
然後 創建新的圖塊地圖

00:24:37.311 --> 00:24:40.080
只要提供要用的圖塊集合

00:24:40.314 --> 00:24:42.316
地圖中排和列的數量

00:24:42.983 --> 00:24:44.551
和每個圖塊的大小

00:24:46.386 --> 00:24:48.088
如果要開始放圖塊在地圖中

00:24:48.155 --> 00:24:49.590
需要一個圖塊組

00:24:49.823 --> 00:24:53.060
就拿第一個在圖塊集合中定義的圖塊

00:24:55.395 --> 00:24:58.498
有了要放的圖塊地圖圖塊組

00:24:58.899 --> 00:25:01.034
可以開始放單個圖塊了

00:25:02.069 --> 00:25:05.506
這裏把圖塊組放到第4列
第7排的圖塊上

00:25:07.574 --> 00:25:10.244
也可以一下操控整個地圖

00:25:10.310 --> 00:25:12.980
這裏用圖塊組填充地圖上每個圖塊

00:25:15.482 --> 00:25:18.819
若你用SpriteKit編輯器
創造修改圖塊地圖

00:25:18.886 --> 00:25:21.488
你也許不會用到任何剛剛講的API

00:25:22.089 --> 00:25:25.325
但除非你的圖塊地圖是全靜止的背景

00:25:25.392 --> 00:25:27.361
否則你也許想詢問它們

00:25:27.828 --> 00:25:29.796
有很多你可以做

00:25:30.464 --> 00:25:34.268
比如說 當玩家移動過某個特定圖塊
時 你想檢測到

00:25:34.334 --> 00:25:37.704
並且引入一些自定義用戶數據到
圖塊定義上

00:25:39.506 --> 00:25:43.143
你可以做到這些
首先轉換玩家位置

00:25:43.343 --> 00:25:45.345
成參考於圖塊地圖畫面的位置

00:25:47.481 --> 00:25:49.983
然後 可以用我這裏劃出的方法

00:25:50.050 --> 00:25:53.053
來得到有該位置圖塊的排數和列數

00:25:55.088 --> 00:25:59.193
接下來 問那個排數列數存在的
圖塊的定義

00:26:01.228 --> 00:26:03.830
最後 既然已經得到了圖塊的定義

00:26:04.198 --> 00:26:06.400
你可以把用戶數據加入那個自定義值

00:26:06.466 --> 00:26:07.801
你感興趣的

00:26:07.868 --> 00:26:10.370
然後在那則數據信息上加入
你想要的行爲

00:26:10.804 --> 00:26:12.372
剛剛做的演示中

00:26:12.439 --> 00:26:15.008
我們做的非常相似 那就是
檢測當玩家

00:26:15.843 --> 00:26:17.110
跳到大紅按鈕上

00:26:18.011 --> 00:26:21.181
當他們跳過一個帶有
按鈕自定義用戶數據屬性 的圖塊時

00:26:21.248 --> 00:26:22.616
我們點燃了煙花

00:26:24.985 --> 00:26:26.420
這些有很多需要理解

00:26:26.486 --> 00:26:29.590
所以快速回顧一下圖塊地圖提供的
新功能

00:26:31.191 --> 00:26:34.661
通過從一個小 重複的圖像集合
創建場景

00:26:34.728 --> 00:26:37.364
圖塊地圖讓你從藝術資源中獲得更多

00:26:38.165 --> 00:26:40.367
總的來說 你會需要更少的資源

00:26:40.434 --> 00:26:43.303
還會有好處能減少容量負擔

00:26:44.071 --> 00:26:47.241
它們支持動畫
以動態圖塊圖像的形式

00:26:47.307 --> 00:26:49.009
和節點上事件的形式

00:26:51.078 --> 00:26:53.347
圖塊地圖設計用來堆疊在彼此上

00:26:53.413 --> 00:26:56.083
更增加了圖像資源的多功能性

00:26:56.149 --> 00:26:58.418
使效果如視差滾動成爲可能

00:26:59.453 --> 00:27:01.588
它們還非常靈活
很好針對不同

00:27:01.655 --> 00:27:04.057
美術風格和遊戲類型

00:27:06.660 --> 00:27:09.062
大的圖塊地圖自動分爲

00:27:09.129 --> 00:27:13.300
小塊 而且只有當前可見的部分
會畫出來

00:27:13.901 --> 00:27:16.170
這提供了巨大性能提升

00:27:16.236 --> 00:27:19.873
另外 如果所有圖塊地圖用的圖像

00:27:19.940 --> 00:27:22.209
在同一個資源目錄
Sprite Atlas

00:27:22.543 --> 00:27:25.379
每塊會收集所有的圖塊在一起

00:27:25.445 --> 00:27:27.181
用一個畫畫命令渲染出來

00:27:28.215 --> 00:27:30.150
圖塊地圖還有不同口味

00:27:30.417 --> 00:27:34.254
標準正方形網格 等邊立體圖塊
和六角形圖塊

00:27:36.623 --> 00:27:39.826
工具這邊 編輯圖塊地圖方便簡單

00:27:40.394 --> 00:27:42.696
只要點擊來放置圖塊在地圖上

00:27:43.130 --> 00:27:45.399
自動繪製地圖爲您完成
所有那些繁重工作

00:27:45.699 --> 00:27:49.136
你不需要單個放置每個邊和角圖塊

00:27:50.137 --> 00:27:53.106
當然你可以關掉這個功能來
手動做這些細節部分

00:27:53.740 --> 00:27:57.177
最後 創建新圖塊集合非常快

00:27:57.711 --> 00:27:59.947
只要拖放想用的圖像

00:28:00.013 --> 00:28:02.616
進相應的圖塊集合編輯器裏的位置

00:28:02.783 --> 00:28:03.951
就可以了

00:28:05.419 --> 00:28:06.920
所以這些是圖塊集合的部分

00:28:07.554 --> 00:28:09.556
我要邀請同事
Clement來跟你們講

00:28:09.623 --> 00:28:11.959
今年其他特別棒的新特性

00:28:20.968 --> 00:28:21.935
謝謝 Ross

00:28:23.637 --> 00:28:25.239
好的 這是些好東西是不是

00:28:27.007 --> 00:28:28.909
你們好 我是Clement

00:28:29.176 --> 00:28:32.212
我是Apple遊戲技術組的
軟件工程師

00:28:32.779 --> 00:28:34.581
你猜怎麼着？

00:28:34.648 --> 00:28:35.782
我們其實還有很多可說

00:28:35.849 --> 00:28:37.551
看看SpriteKit還有何新特性

00:28:38.352 --> 00:28:40.687
第一個是彎曲變形

00:28:43.123 --> 00:28:47.094
現在在Sprite有很多變形方式

00:28:47.327 --> 00:28:50.597
可以縮放來讓東西變大變小

00:28:51.532 --> 00:28:56.069
旋轉來沿着軸轉動

00:28:57.738 --> 00:29:01.375
如果像親歷親爲
還可以寫個自定義着色器

00:29:03.510 --> 00:29:06.113
比如這裏看到的這個低分辨率着色器

00:29:10.150 --> 00:29:13.220
今年很高興宣佈一種新的變形

00:29:13.287 --> 00:29:14.588
叫做彎曲變形

00:29:15.122 --> 00:29:16.890
彎曲變形讓你定義

00:29:16.957 --> 00:29:19.326
自定製的扭曲度 用點的度數

00:29:20.127 --> 00:29:24.031
比如拿一個2x2的網格

00:29:24.097 --> 00:29:27.134
有8個點
你看到的綠色的

00:29:27.201 --> 00:29:29.970
是源位置
也叫參考位置

00:29:30.737 --> 00:29:34.074
然後得到這裏第二個網格
但它意味着一次變形

00:29:34.374 --> 00:29:36.610
所以 這是我定義的位置

00:29:36.677 --> 00:29:39.680
我移動了點來創建一次變形

00:29:40.581 --> 00:29:43.483
如果我把這個方法用到之前展示的
宇宙飛船上

00:29:43.550 --> 00:29:44.585
就得到這個

00:29:48.255 --> 00:29:51.491
得到一個不錯 平滑的宇宙飛船變形

00:29:51.992 --> 00:29:54.328
這個變形根據位移

00:29:54.394 --> 00:29:56.230
於源位置和終點位置

00:29:57.598 --> 00:29:59.900
讓我展示一些例子

00:29:59.967 --> 00:30:01.168
用彎曲變形

00:30:01.535 --> 00:30:05.672
第一個例子是擠壓效果

00:30:05.739 --> 00:30:08.976
現在我做的是把點向中間移動

00:30:09.042 --> 00:30:10.711
來創建一個不錯的擠壓效果

00:30:12.312 --> 00:30:14.047
接下來 拉伸效果

00:30:14.114 --> 00:30:17.718
拉飛船的突出的尖端
讓它從右到左擺動

00:30:18.185 --> 00:30:19.653
它看上去有點好笑

00:30:20.888 --> 00:30:23.790
接下來重要的東西是關鍵幀動畫

00:30:25.058 --> 00:30:27.461
在2D遊戲中 往往如果藝術家

00:30:27.528 --> 00:30:30.063
爲動畫要做靜止幀

00:30:30.631 --> 00:30:31.732
會花很長過程

00:30:31.798 --> 00:30:34.868
尤其如果你要好幾次反覆做新設計

00:30:35.402 --> 00:30:36.803
彎曲變形

00:30:36.870 --> 00:30:39.806
讓做動畫跟到處移動點那麼簡單

00:30:40.174 --> 00:30:43.810
如果有複雜的情況
像關鍵幀動畫

00:30:43.877 --> 00:30:45.245
你可以提供幾個度數

00:30:45.512 --> 00:30:47.481
所有一下子就做好了

00:30:47.548 --> 00:30:49.149
不再需要靜止幀了

00:30:51.018 --> 00:30:53.187
現在讓我給你們解釋基本概念

00:30:53.253 --> 00:30:54.955
彎曲變形的背後

00:30:56.056 --> 00:30:58.325
又來了 假設這裏有個2x2網格

00:30:58.392 --> 00:31:03.697
在網格分佈中
一組有標號的點從0到8

00:31:05.165 --> 00:31:07.034
這個點 這個點 抱歉 這個網格

00:31:07.100 --> 00:31:10.571
和其中的單元格是有很多三角形的
四方格

00:31:11.371 --> 00:31:13.574
從電腦圖像角度來說

00:31:13.640 --> 00:31:16.610
這裏有一列頂點要變

00:31:17.110 --> 00:31:20.314
材質座標也一樣

00:31:21.014 --> 00:31:23.984
然後只要設置GPU插值

00:31:25.686 --> 00:31:27.788
這就好了
我們可以先停在這兒

00:31:27.955 --> 00:31:31.291
但一開始如果我用3D emoji
貓emoji會怎樣

00:31:31.358 --> 00:31:34.461
我限制它爲1個四方格
也就是1x1網格

00:31:35.162 --> 00:31:36.964
那麼來吧 給我看看變形

00:31:37.831 --> 00:31:39.032
好 做吧

00:31:40.901 --> 00:31:42.936
恩 這看上去不太對

00:31:43.470 --> 00:31:46.707
原因是我們只是在移動一個點

00:31:46.773 --> 00:31:48.742
所以只有一個三角形在扭曲

00:31:49.109 --> 00:31:50.878
那麼 我們能怎麼辦呢

00:31:51.245 --> 00:31:54.581
我們把網格更密實
上載更多四方格

00:31:54.982 --> 00:31:56.383
但是這就有點乏味了

00:31:56.450 --> 00:31:58.252
因爲有更多點要操控

00:31:58.585 --> 00:32:00.554
尤其因爲Sprite很大

00:32:00.821 --> 00:32:03.690
幾乎就像是必須 你知道的
到處移動像素是不是

00:32:04.791 --> 00:32:08.095
所以不是的 正如你猜到的
我們有個小技巧

00:32:08.428 --> 00:32:10.030
SpriteKit中要這麼做

00:32:10.697 --> 00:32:12.199
再一次 2x2網格

00:32:13.133 --> 00:32:15.469
你只要操作8點

00:32:15.769 --> 00:32:18.138
當你在移動點來變形時

00:32:18.205 --> 00:32:19.306
發生了這些

00:32:24.645 --> 00:32:25.512
那麼好了

00:32:26.246 --> 00:32:28.749
所以我們幫你做了自動四方格細分

00:32:29.449 --> 00:32:31.852
這很棒因爲給了你權衡

00:32:31.919 --> 00:32:33.987
在高強度細節

00:32:34.054 --> 00:32:36.757
和儘量少的四方格之間
使用變形

00:32:37.558 --> 00:32:39.626
再說一次 你只要操控8個點

00:32:39.693 --> 00:32:42.296
這裏 當我移動左上角的點時

00:32:42.496 --> 00:32:46.200
會看到我拖得有點遠
所以變形程度有點高

00:32:46.466 --> 00:32:47.935
那麼做細分

00:32:48.268 --> 00:32:50.504
在右下角
有點微變形

00:32:50.571 --> 00:32:52.506
所以我們只細分了兩次

00:32:53.941 --> 00:32:56.610
因爲想給你更多控制

00:32:56.677 --> 00:32:59.813
事實上我們允許你指定最大數目的細分

00:33:00.247 --> 00:33:02.416
如果我拿之前的宇宙飛船

00:33:02.482 --> 00:33:04.651
像那樣扭曲一點兒

00:33:05.052 --> 00:33:06.653
你會看到一些變形 抱歉

00:33:06.720 --> 00:33:09.489
一些走樣出現
比如這個在底部的隆起

00:33:09.957 --> 00:33:13.093
所以 如果我只細分一次
你會看到走樣

00:33:13.460 --> 00:33:15.162
如果我設爲4 比如說

00:33:15.495 --> 00:33:17.231
就明顯看不到那些走樣了

00:33:17.297 --> 00:33:20.133
宇宙飛船底部呈現平滑的線

00:33:20.934 --> 00:33:22.603
所以這對你來說很棒

00:33:22.669 --> 00:33:26.206
如果你想細調視覺效果和/或表現

00:33:26.273 --> 00:33:28.008
因爲當然 四方格越少

00:33:28.075 --> 00:33:30.143
表現越好

00:33:31.245 --> 00:33:33.447
好了 這個不錯
但怎樣在Swift裏做到

00:33:33.814 --> 00:33:35.115
好 第一件事

00:33:35.282 --> 00:33:36.850
記住我們這是網格分佈

00:33:36.917 --> 00:33:39.353
所以 8個點從0標到8

00:33:39.753 --> 00:33:42.189
我要提供一列源位置

00:33:42.256 --> 00:33:44.791
一列目標位置
都是2位浮點數

00:33:45.459 --> 00:33:47.828
我可以創建我的彎曲幾何網格

00:33:47.895 --> 00:33:50.898
通過提供排數、列數、目標位置

00:33:50.964 --> 00:33:53.967
源位置
然後保存進Sprite

00:33:54.768 --> 00:33:56.069
然後就扭曲變形了

00:33:56.136 --> 00:33:58.972
可選的你可以設置細分度

00:33:59.039 --> 00:34:01.475
設爲任何你要的
默認爲2

00:34:03.277 --> 00:34:07.314
因爲這是SpriteKit
我有一堆新SKAction可用

00:34:07.648 --> 00:34:09.516
所以 變形簡單到

00:34:09.583 --> 00:34:13.487
只要說SKActionWarp到
然後提供網格和時間

00:34:14.221 --> 00:34:18.091
或者 如果你想要複雜點
比如關鍵幀動畫

00:34:18.158 --> 00:34:20.726
可以提供一列網格和一列時間

00:34:21.527 --> 00:34:22.462
好的

00:34:22.529 --> 00:34:26.800
那麼好 讓我給你快速演示
彎曲變形如何運作

00:34:36.043 --> 00:34:36.976
好的

00:34:37.244 --> 00:34:39.646
我要用跟Ross一樣的演示項目了

00:34:40.246 --> 00:34:41.281
但這次

00:34:42.616 --> 00:34:46.786
我要用左邊因爲那兒纔是好東西

00:34:47.788 --> 00:34:50.791
好的 小人在這兒
去稍微探索一點

00:34:51.123 --> 00:34:52.693
哇 看那兒

00:34:53.427 --> 00:34:56.129
好的 這裏有2組動畫

00:34:56.429 --> 00:34:59.433
一個讓樹從左到右擺動

00:34:59.800 --> 00:35:02.269
另一個讓蘑菇擠壓 你懂的

00:35:02.336 --> 00:35:03.837
從大到小

00:35:04.204 --> 00:35:07.541
我們還加入一些隨機性讓東西
在不同時間旋轉

00:35:08.075 --> 00:35:10.911
這就讓你的場景非常生動有趣

00:35:11.545 --> 00:35:13.247
好讓我們繼續探索

00:35:13.680 --> 00:35:16.116
好看看這個
這兒有個人

00:35:16.617 --> 00:35:18.752
好 在橫版遊戲中
說“你好”的最佳的方式是？

00:35:18.819 --> 00:35:20.254
我覺得跳到它們上 是嗎？

00:35:21.522 --> 00:35:22.389
就這麼走吧

00:35:23.190 --> 00:35:25.259
我做的是 當跳到這個人上時

00:35:25.325 --> 00:35:27.327
碰撞身體和物理身體

00:35:27.628 --> 00:35:30.364
我就運行SKAction讓它擠壓
你知道的

00:35:30.964 --> 00:35:32.366
好的 非常棒

00:35:33.600 --> 00:35:34.935
讓我們回到幻燈片

00:35:39.006 --> 00:35:40.974
所以彎曲變形非常強大

00:35:41.041 --> 00:35:43.810
給遊戲中帶來廣闊的可能性

00:35:43.877 --> 00:35:46.280
所以我非常希望你能用它們
並且喜歡用它們

00:35:47.214 --> 00:35:50.817
接下來講講自定義着色的
每個節點的特性

00:35:53.086 --> 00:35:55.455
着色器很棒
我非常喜歡

00:35:56.056 --> 00:36:00.294
有個最佳辦法給你的遊戲
做精確數碼外形

00:36:00.994 --> 00:36:03.830
在SpriteKit
我們開始就支持自定義着色器

00:36:03.897 --> 00:36:07.167
用SKShader類
它基本上是個片段着色器

00:36:07.234 --> 00:36:08.869
用在節點上

00:36:10.370 --> 00:36:13.740
它自帶一些內置符號 比如時間

00:36:13.807 --> 00:36:16.210
材質 材質座標 還有很多

00:36:16.844 --> 00:36:21.481
如果有什麼特別需求 你也可以在
SKUniform上特定

00:36:21.548 --> 00:36:24.251
給你特殊的變量

00:36:25.285 --> 00:36:27.855
好 要不我們用着色器打包遊戲怎麼樣

00:36:27.921 --> 00:36:29.523
好 我真的很喜歡橫版遊戲

00:36:29.590 --> 00:36:32.359
要不來一些橫版遊戲
好就這樣 挺好的

00:36:32.793 --> 00:36:37.297
好 我想要一些可愛的
要不然來一隻...兔子

00:36:37.364 --> 00:36:40.300
好的 太棒了
我很喜歡這傢伙 它很可愛是不是

00:36:40.767 --> 00:36:43.737
你猜怎麼着 我準備給這遊戲
取名暗黑兔子

00:36:43.937 --> 00:36:48.108
讓我們放些壞蛋和長釘和危險
像這樣

00:36:48.175 --> 00:36:49.376
好 這樣好些

00:36:50.210 --> 00:36:52.646
不幸的是我們的兔子要被撞到好幾次

00:36:53.313 --> 00:36:55.549
因爲我不想讓我的遊戲變太難

00:36:55.616 --> 00:36:58.652
我要有一個幫助系統和健康條
像這樣

00:36:59.119 --> 00:37:01.688
猜怎麼着
健康條會是着色器

00:37:03.090 --> 00:37:04.958
你猜到它會出現了對吧？好的

00:37:05.592 --> 00:37:09.796
所以 在SpriteKit怎樣
做一個血條呢？

00:37:10.097 --> 00:37:12.466
爲血條加一個Sprite

00:37:12.733 --> 00:37:16.570
用着色器控制視覺效果
比如閃爍的樣式 顏色

00:37:16.937 --> 00:37:18.038
和填充度

00:37:18.105 --> 00:37:21.909
這裏兔子只有一半生命了
所以只填充一半

00:37:22.509 --> 00:37:25.646
控制這些視效
我有個一致值叫health

00:37:25.913 --> 00:37:27.781
它會是個浮動值

00:37:27.848 --> 00:37:31.385
從1滿血到0幾乎喪命

00:37:33.453 --> 00:37:35.289
好 但因爲遊戲往往更有趣

00:37:35.355 --> 00:37:37.925
當你有多個玩家時
放些傢伙在這兒

00:37:37.991 --> 00:37:39.493
可以有最多三個玩家

00:37:39.726 --> 00:37:41.094
這意味着任何時候

00:37:41.161 --> 00:37:44.131
可以有一些滿血的 一些半條命的

00:37:44.198 --> 00:37:46.433
和一些幾乎沒命的

00:37:47.301 --> 00:37:49.603
好 SpriteKit比較簡單

00:37:49.670 --> 00:37:52.372
我有Sprite 着色器 一致值

00:37:52.873 --> 00:37:54.875
但現在怎樣把它

00:37:54.942 --> 00:37:56.310
變成多玩家呢？

00:37:56.710 --> 00:37:58.145
好我必須做這個

00:37:59.012 --> 00:38:02.382
我必須賦值着色器
但這完全沒道理是不是？

00:38:02.449 --> 00:38:04.484
爲什麼必須做這個？
這太糟了

00:38:04.885 --> 00:38:07.354
這很糟因爲
這是同一個着色器啊是不是？

00:38:07.421 --> 00:38:09.156
這會打破批處理機制的

00:38:09.223 --> 00:38:10.457
意味着調用多次

00:38:11.058 --> 00:38:12.259
這太複雜了是不是？

00:38:12.326 --> 00:38:14.027
好 如果你要用別的辦法做到這個

00:38:14.728 --> 00:38:19.399
我只要一個着色器
爲Sprite間共用

00:38:20.167 --> 00:38:22.970
而且 從今年開始
你只要...

00:38:25.205 --> 00:38:26.306
使用特性

00:38:27.007 --> 00:38:29.676
用自定義特性
你只要創建一個特性

00:38:29.743 --> 00:38:32.846
把它依附於着色器
然後直接設置值

00:38:32.913 --> 00:38:34.081
在節點本身上

00:38:34.314 --> 00:38:36.717
這裏我有個自定義特性名健康值

00:38:37.317 --> 00:38:39.686
我在Sprite上設置健康值

00:38:39.887 --> 00:38:40.787
非常簡單

00:38:42.523 --> 00:38:44.124
Swift裏看上去是這樣的

00:38:44.191 --> 00:38:46.727
用SKAttribute類創建特性

00:38:46.894 --> 00:38:49.763
給它名字 這裏是健康值
類型 浮點數

00:38:50.430 --> 00:38:51.765
依附於着色器

00:38:52.032 --> 00:38:54.234
因爲我的着色器只有一個特性

00:38:54.301 --> 00:38:55.903
我給它一列的單一特性

00:38:56.403 --> 00:38:59.139
最後直接設置Sprite的值

00:38:59.439 --> 00:39:03.544
這裏玩家一隻剩下0.2％生命

00:39:03.610 --> 00:39:07.714
所以我在給健康值特性設置值

00:39:08.749 --> 00:39:10.350
所以這非常簡單方便

00:39:10.417 --> 00:39:13.353
若你在處理每個節點的自定義和着色器

00:39:14.888 --> 00:39:15.756
好了

00:39:16.523 --> 00:39:19.526
現在講講特定於平臺的內容

00:39:19.593 --> 00:39:22.362
第一個Apple TV上的焦點交互

00:39:23.964 --> 00:39:26.934
對於已經給Apple TV
做過應用的人來說

00:39:27.000 --> 00:39:29.102
你們已經明白焦點交互是什麼了

00:39:29.169 --> 00:39:32.105
但對於沒有做過的
讓我回顧去年發生了什麼

00:39:32.940 --> 00:39:36.176
去年我們介紹新Apple TV

00:39:36.710 --> 00:39:38.779
tvOS和些新的用戶界面

00:39:38.846 --> 00:39:41.181
還有Siri Remote和
其觸摸板

00:39:42.149 --> 00:39:44.685
最主要不同之一在iPhone和

00:39:44.751 --> 00:39:46.887
Apple TV之間是交互方式

00:39:47.621 --> 00:39:49.890
在iPhone上 用戶可以直接交互

00:39:49.957 --> 00:39:51.592
通過在手機上用觸摸屏幕

00:39:52.159 --> 00:39:53.627
而在Apple TV上

00:39:54.094 --> 00:39:58.432
用戶永遠有遙控器在手介於
他和界面之間

00:39:58.866 --> 00:40:01.869
我們稱這種交互爲焦點交互模型

00:40:02.369 --> 00:40:05.239
讓我展示當我移動光標時會發生什麼

00:40:05.305 --> 00:40:08.742
在Apple TV主菜單上集中

00:40:16.083 --> 00:40:18.919
像你看到的 一次只能集中一個元素

00:40:18.986 --> 00:40:21.655
而且滾動調試成自適應

00:40:21.922 --> 00:40:23.924
對指尖反應很好

00:40:24.925 --> 00:40:27.094
事實上這非常重要

00:40:27.160 --> 00:40:29.129
很重要的是在構建系統

00:40:29.196 --> 00:40:31.865
和框架時在腦內用焦點交互

00:40:32.232 --> 00:40:35.002
意味着如果正好要用UIKit做應用

00:40:35.302 --> 00:40:38.071
不用重建焦點交互模型了

00:40:38.505 --> 00:40:40.841
你只要攤開視圖

00:40:41.074 --> 00:40:43.277
說哪些是可聚焦的 就好了

00:40:44.545 --> 00:40:45.679
很易用

00:40:45.746 --> 00:40:48.382
提供了一致的用戶體驗 不管你在

00:40:48.448 --> 00:40:51.151
Apple TV主菜單還是在應用內

00:40:52.052 --> 00:40:54.988
加分的是
我們還支持Siri Remote

00:40:55.055 --> 00:40:58.225
遊戲控制器和很多Bluetooth
控制器和很多很多其他的

00:40:59.026 --> 00:41:01.428
若你想了解更多Apple TV上
的焦點交互

00:41:01.495 --> 00:41:02.763
這周有個演講

00:41:02.829 --> 00:41:04.665
你會在網上發現很多資源

00:41:05.999 --> 00:41:07.401
好 那麼大新聞是

00:41:07.467 --> 00:41:10.137
SpriteKit支持焦點交互

00:41:10.704 --> 00:41:12.372
是 這很棒
是的 謝謝

00:41:16.343 --> 00:41:17.377
這很棒

00:41:17.444 --> 00:41:20.447
對於遊戲中任何用戶界面
比如遊戲菜單

00:41:20.814 --> 00:41:23.183
或者子建造工具在遊戲中 用聚焦

00:41:23.283 --> 00:41:26.753
比如象棋遊戲
或者很多其他的

00:41:28.322 --> 00:41:31.792
好事是它還簡單了很多

00:41:32.359 --> 00:41:33.794
這裏看到的DemoBot

00:41:33.861 --> 00:41:35.596
去年一段示例代碼

00:41:35.963 --> 00:41:38.732
以前給iOS和macOS用

00:41:38.799 --> 00:41:42.636
我們做了個給tvOS
感覺好多了

00:41:42.703 --> 00:41:45.906
移除那些用作交互和定位的代碼後

00:41:45.973 --> 00:41:47.674
感覺乾淨多了 簡單多了

00:41:48.642 --> 00:41:50.744
說到DemoBot 看看怎樣

00:41:50.811 --> 00:41:53.180
創建這個菜單 用SpriteKit

00:41:53.247 --> 00:41:54.448
和焦點交互

00:41:56.216 --> 00:41:57.417
第一件事你要知道的是

00:41:57.484 --> 00:42:00.787
UIKit引入新協議
叫做UIFocusItem

00:42:00.854 --> 00:42:02.990
遵照UIFocusEnvironment

00:42:03.190 --> 00:42:06.360
它延伸焦點系統到沒有視圖的條目

00:42:06.927 --> 00:42:07.995
像你猜到的

00:42:08.061 --> 00:42:10.964
現在SKNode也遵照了

00:42:12.065 --> 00:42:15.435
第一件事要做的是做一個子類

00:42:15.502 --> 00:42:18.205
這裏對於菜單元素 要用一些長方形

00:42:18.272 --> 00:42:19.806
我要用SKSpriteNode

00:42:19.873 --> 00:42:21.475
第一 做個子類

00:42:21.875 --> 00:42:25.379
第二 重寫canBecomeFocused方法

00:42:25.445 --> 00:42:27.314
返回真 這樣節點就變成可聚焦了

00:42:29.516 --> 00:42:32.753
接下來 獲取節點到聚焦系統

00:42:32.819 --> 00:42:36.390
要做這個 只需設置
isUserInteractionEnabled爲真

00:42:37.558 --> 00:42:38.759
最後一件事

00:42:39.026 --> 00:42:41.728
重寫didUpdateFocus（in context:函數

00:42:41.795 --> 00:42:44.231
這會給你在焦點更新時給你更新

00:42:44.298 --> 00:42:45.866
所以 只需要重寫這些在視圖

00:42:45.933 --> 00:42:48.869
場景和任何在應用中說得通該改的節點

00:42:49.469 --> 00:42:52.606
所以這裏上下文對象給我
下一個焦點條目

00:42:52.673 --> 00:42:55.342
前一個焦點條目
這個情況下我要找

00:42:55.409 --> 00:42:58.478
一個菜單元素
如果按這個

00:42:58.545 --> 00:43:00.047
就要運行些SKAction

00:43:01.181 --> 00:43:02.716
這就是事件看上去怎樣的

00:43:02.783 --> 00:43:05.419
如果我玩完遊戲
會出現這個菜單

00:43:05.485 --> 00:43:07.187
我只要用Siri Remote

00:43:07.521 --> 00:43:10.224
滾動下來
或者用遊戲遙控器也一樣可以用

00:43:10.290 --> 00:43:13.861
我和在Apple TV主菜單時
有相同使用感受

00:43:14.261 --> 00:43:16.330
再說一次 非常簡單 非常強大

00:43:16.396 --> 00:43:18.298
非常推薦你用這個

00:43:20.367 --> 00:43:22.369
好的 一件大事

00:43:22.970 --> 00:43:24.438
Apple Watch上的
SpriteKit

00:43:24.505 --> 00:43:26.940
如你所見 給watchOS 3.0

00:43:27.007 --> 00:43:29.309
我們爲Apple Watch
帶來一些框架

00:43:30.010 --> 00:43:31.812
是的 SpriteKit可用

00:43:32.279 --> 00:43:35.249
這意味着現在你能做些很多交互的應用

00:43:35.315 --> 00:43:38.185
用這個高性能2D圖像平臺

00:43:38.485 --> 00:43:40.420
當然我們帶了所有你愛的東西

00:43:40.487 --> 00:43:43.357
比如粒子 動畫 物理 事件

00:43:43.757 --> 00:43:46.660
所有編輯器都兼容
所以你能使用場景編輯器.

00:43:46.727 --> 00:43:48.195
你能使用粒子編輯器

00:43:48.762 --> 00:43:51.231
有所有的編輯工具 比如新的性能表

00:43:51.298 --> 00:43:52.533
Ross剛剛講的

00:43:53.033 --> 00:43:54.368
所有這些都能工作

00:43:55.402 --> 00:43:58.172
所以一個典型的SpriteKit
遊戲看上去這樣

00:43:58.505 --> 00:44:02.643
有一個SKView
包含SKScene

00:44:03.243 --> 00:44:05.179
SKScene自己包含多個節點

00:44:06.246 --> 00:44:09.082
比如SKSprite節點
SKShapeNode各種

00:44:10.184 --> 00:44:13.420
然而Apple Watch上
沒有視圖指示

00:44:13.487 --> 00:44:16.690
你通過WatchKit界面展示內容

00:44:16.757 --> 00:44:18.992
這就是主要區別

00:44:19.326 --> 00:44:20.994
替代使用SKView

00:44:21.061 --> 00:44:24.498
我將使用WKInterfaceSKScene

00:44:24.898 --> 00:44:26.233
大概就這些

00:44:27.034 --> 00:44:30.504
好看看我們怎樣從iOS上現存遊戲

00:44:30.737 --> 00:44:33.373
到讓它支持watchOS

00:44:34.141 --> 00:44:37.077
這裏有些代碼
一些iOS上游戲的示例代碼

00:44:37.344 --> 00:44:38.879
好 非常典型 有視圖

00:44:38.946 --> 00:44:41.148
我要設置場景和各種

00:44:41.381 --> 00:44:42.216
好的

00:44:42.282 --> 00:44:46.486
我現在要做的是點擊文件 新的 目標

00:44:47.621 --> 00:44:48.822
選擇要的模板

00:44:48.889 --> 00:44:53.827
這裏我用了遊戲應用模板給我的目標

00:44:54.261 --> 00:44:55.262
點擊 下一個

00:44:55.429 --> 00:44:58.165
給它最棒的名字 我要命名它
爲Apple Watch Game

00:44:59.399 --> 00:45:00.634
再點擊 下一個

00:45:00.968 --> 00:45:02.936
就完了
不 真的 就完了

00:45:03.504 --> 00:45:05.205
Xcode會創建所有你需文件

00:45:05.272 --> 00:45:09.176
比如Storyboard
和界面控制器

00:45:09.643 --> 00:45:11.178
若你看storyboard

00:45:11.245 --> 00:45:13.280
我們已經接通了一切

00:45:13.680 --> 00:45:18.752
所以 這個已經連接到了接口
正如你在頂端看到的

00:45:19.486 --> 00:45:20.621
你準備好了

00:45:20.687 --> 00:45:22.890
有WKInterfaceScene

00:45:23.390 --> 00:45:25.792
還有和之前一樣的東西

00:45:25.859 --> 00:45:27.060
所以 非常簡單

00:45:29.463 --> 00:45:33.667
好了 解決些
Apple Watch上的兼容問題

00:45:34.067 --> 00:45:36.103
Apple Watch上
沒有SKAudioNode

00:45:36.170 --> 00:45:40.174
但當然你還可用SKAction中
playSoundFileNamed事件播放聲音

00:45:40.908 --> 00:45:42.843
沒有SKVideoNode

00:45:43.076 --> 00:45:45.345
但可以用
WKInterfaceMovie

00:45:46.079 --> 00:45:49.616
最後如果要用CI濾鏡做特效

00:45:50.017 --> 00:45:52.386
還是可以做 但需用SKShader

00:45:53.954 --> 00:45:58.225
我們對你能用SpriteKit在
Apple Watch上大伸拳腳很激動

00:45:58.292 --> 00:46:00.727
這將讓它變得更交互

00:46:00.794 --> 00:46:02.429
在該平臺上更多好玩的應用

00:46:05.566 --> 00:46:06.433
好的

00:46:07.501 --> 00:46:08.335
謝謝

00:46:12.539 --> 00:46:14.308
因爲我們有了更多平臺

00:46:14.374 --> 00:46:17.544
讓我講些SpriteKit上的
最佳實踐

00:46:18.545 --> 00:46:20.180
第一個是資源目錄

00:46:20.514 --> 00:46:22.916
用資源目錄
它很棒

00:46:22.983 --> 00:46:24.484
它和SpriteKit合作無間

00:46:24.551 --> 00:46:26.687
給你的遊戲提供了很多酷功能

00:46:26.753 --> 00:46:28.722
來讓一切變得簡單快捷

00:46:29.156 --> 00:46:31.124
第一個是Sprite Atlas

00:46:31.725 --> 00:46:33.994
在資源目錄 你可以做一個材質圖譜

00:46:34.061 --> 00:46:37.264
作爲給圖塊地圖優化的基礎

00:46:37.331 --> 00:46:40.367
在這裏有多件材質合成一個大的

00:46:40.701 --> 00:46:43.837
減少繪製調用到最低

00:46:45.072 --> 00:46:47.441
接下來我們支持多種尺寸像

00:46:47.508 --> 00:46:50.677
1x 2x 3x
對多平臺很有用

00:46:50.744 --> 00:46:52.846
像是iPad、iPhone、
watchOS

00:46:53.747 --> 00:46:56.183
你不需要做什麼限定 比如

00:46:56.250 --> 00:46:57.518
是那個平臺還是這個

00:46:57.584 --> 00:47:00.153
不 你只要調用這個材質就完了

00:47:00.220 --> 00:47:01.288
我們完成其他的

00:47:02.556 --> 00:47:05.692
我們支持按需加載資源
這是tvOS的基礎

00:47:07.094 --> 00:47:10.297
最後我們做應用程序切片
意味着如果你有資源

00:47:10.364 --> 00:47:13.133
特定於某個平臺
我們只會用這個

00:47:13.200 --> 00:47:14.902
給這個捆綁 然後編譯它們

00:47:14.968 --> 00:47:17.404
爲儘量小的運行時間二進制

00:47:17.771 --> 00:47:22.042
這給你很小的資料夾
和在App Store上很小下載

00:47:23.010 --> 00:47:25.112
所以是的 資源目錄很棒 用它吧

00:47:26.880 --> 00:47:29.249
接下來 關於性能和電池生命

00:47:29.850 --> 00:47:34.154
所以 今年SpriteKit
巨大改變是我們不總渲染

00:47:34.521 --> 00:47:37.057
現在 我們只有在場景髒時渲染

00:47:37.224 --> 00:47:39.726
也就是如果發生變化
會發布繪製調用

00:47:39.793 --> 00:47:42.362
但如果沒改變
就不會做任何事

00:47:42.763 --> 00:47:46.700
如果你在用任何登記工具
比如性能表

00:47:47.067 --> 00:47:48.702
你會看到指針紋絲不動

00:47:48.769 --> 00:47:49.736
這實際上是件好事

00:47:49.803 --> 00:47:52.339
因爲這意味着沒有在渲染什麼新的

00:47:53.507 --> 00:47:55.175
如果你需要控制畫面權重

00:47:55.242 --> 00:47:57.511
有幾個辦法做到

00:47:58.045 --> 00:48:00.848
第一個是SKView偏好幀速率屬性

00:48:01.915 --> 00:48:04.852
任何時候你只要設置畫面速率到
你要的就可

00:48:04.918 --> 00:48:06.787
非常方便

00:48:06.854 --> 00:48:10.123
如果是菜單 只需要非常低的幀速率

00:48:10.457 --> 00:48:12.826
當回到遊戲 可以調回到60

00:48:12.893 --> 00:48:15.829
或者30幀率根據性能需求

00:48:17.030 --> 00:48:18.665
第二點有點進階

00:48:18.866 --> 00:48:20.601
是SKViewDelegate協議

00:48:20.667 --> 00:48:23.203
提供你thisShouldRenderAtTime方法

00:48:23.270 --> 00:48:25.405
用遊戲的絕對時間

00:48:25.739 --> 00:48:27.708
所以這個方法任何時候可被調用

00:48:27.774 --> 00:48:30.043
你可以根據時間決定是否

00:48:30.110 --> 00:48:31.445
要渲染這個畫面

00:48:31.778 --> 00:48:33.514
所以這給你非常細緻的控制

00:48:33.580 --> 00:48:34.948
對你的遊戲的渲染

00:48:36.550 --> 00:48:38.051
好的 就這些了

00:48:38.485 --> 00:48:41.221
SpriteKit有哪些新特性？
今年有很多

00:48:41.622 --> 00:48:43.891
第一個是場景大綱視圖

00:48:43.957 --> 00:48:46.593
讓你從Xcode操控場景圖像

00:48:47.794 --> 00:48:49.196
GameplayKit集成

00:48:49.263 --> 00:48:53.600
若你已用GameplayKit組件
現在只要用Xcode直接設置節點

00:48:54.701 --> 00:48:57.704
每秒幀數高性能表給你實時分解

00:48:57.771 --> 00:49:00.274
場景的性能
非常 非常有用

00:49:01.575 --> 00:49:04.845
複雜但高性能的圖塊地圖

00:49:06.580 --> 00:49:08.415
彎曲變形給你的遊戲帶來更多樂趣

00:49:08.482 --> 00:49:11.251
只要用網格柵格點創建複雜動畫

00:49:13.287 --> 00:49:15.122
每個節點特性來自定義着色器

00:49:15.189 --> 00:49:19.459
如果你要自定義節點 構建着色器
很方便

00:49:20.460 --> 00:49:24.798
當然還有Apple TV上焦點交互
和Apple Watch上SpriteKit

00:49:24.898 --> 00:49:26.533
是今年的重頭戲

00:49:27.968 --> 00:49:29.069
如果想了解更多

00:49:29.136 --> 00:49:31.638
可以到developer.apple.com 網站

00:49:32.506 --> 00:49:34.641
今年有很多關於遊戲的演講

00:49:34.708 --> 00:49:35.976
但大部分已經講完了

00:49:36.043 --> 00:49:39.179
你還是可以在我早些時候放的網站
上看到它們

00:49:39.980 --> 00:49:42.282
明天可以去“Game Center
新特性”的演講

00:49:42.349 --> 00:49:44.484
還有Apple Watch上
的遊戲技術

00:49:44.551 --> 00:49:47.454
如果你想學到更多關於這些平臺和框架

00:49:48.522 --> 00:49:49.389
好了