00:00:19.019 --> 00:00:21.622 
關於國際化的實踐

00:00:21.922 --> 00:00:22.756 
好的

00:00:25.325 --> 00:00:26.159 
大家好

00:00:29.830 --> 00:00:30.664 
大家好

00:00:40.941 --> 00:00:44.144 
你們好 歡迎大家來到 WWDC

00:00:44.211 --> 00:00:46.446 
這應該是你們今早的第一個會話

00:00:47.181 --> 00:00:50.284 
如果你聽不懂我剛開始所說的

00:00:50.350 --> 00:00:51.618 
那你就來對了

00:00:52.052 --> 00:00:52.886 
那麼

00:00:54.321 --> 00:00:56.490 
我們會討論一些關於國際化的問題

00:00:57.925 --> 00:00:58.959 
你應該知道

00:00:59.459 --> 00:01:01.728 
Apple面向全世界發售其產品

00:01:03.597 --> 00:01:07.701 
三分之二Apple用戶是不在美國的

00:01:08.602 --> 00:01:10.537 
這也是爲什麼它這麼重要的原因

00:01:10.604 --> 00:01:13.707 
爲了確保你應用中的語言體驗沒有問題

00:01:14.141 --> 00:01:18.879 
我們的用戶涵蓋了從舊金山到米蘭
再到迪拜

00:01:18.946 --> 00:01:20.447 
還有像是從新德里到香港

00:01:21.315 --> 00:01:22.149 
當然了

00:01:22.916 --> 00:01:27.654 
這些用戶很可能是
使用你的或者Apple的應用

00:01:27.988 --> 00:01:29.323 
通過他們的母語

00:01:31.892 --> 00:01:34.294 
他們也可能會使用這些應用

00:01:34.361 --> 00:01:37.331 
用你想象不到的
跟那個地區根本無關的語種

00:01:37.397 --> 00:01:38.899 
例如英語

00:01:38.966 --> 00:01:41.435 
你可能會感到奇怪
這可是個相當全球化的語言

00:01:43.036 --> 00:01:48.242 
今天我會跟你們談談有什麼新的東西

00:01:48.342 --> 00:01:52.412 
我們近年關於國際化的探索

00:01:54.047 --> 00:01:57.084 
一些關於本地化的基礎知識

00:01:57.918 --> 00:02:00.454 
還有國際化你的應用

00:02:01.688 --> 00:02:05.993 
有些技巧令你將代碼稍作修改
就能變成一個不錯的應用

00:02:06.059 --> 00:02:07.494 
對於全球的用戶

00:02:08.695 --> 00:02:12.099 
最後是一些設計層面的東西

00:02:12.599 --> 00:02:13.433 
還有就是

00:02:14.668 --> 00:02:17.204 
從心理層面分析你該怎麼做你的應用

00:02:18.038 --> 00:02:19.740 
我們從新的特性開始講起吧

00:02:21.341 --> 00:02:23.677 
我很興奮的向你們介紹

00:02:24.211 --> 00:02:27.714 
iOS 10中新加入的多語言鍵盤

00:02:28.782 --> 00:02:31.418 
如果你們左右環顧一下

00:02:31.752 --> 00:02:33.554 
你可能正好挨着

00:02:33.620 --> 00:02:36.490 
會講多種語言的人

00:02:37.124 --> 00:02:39.893 
美國是個十分多語種的地方

00:02:39.960 --> 00:02:41.828 
加州尤其如此

00:02:42.696 --> 00:02:47.100 
在iOS10中我們提供了多語言鍵盤
來處理這種環境

00:02:47.401 --> 00:02:51.972 
你們從這若干種語言中任選出兩種

00:02:52.706 --> 00:02:55.275 
或是屏幕這邊的任意兩種

00:02:55.342 --> 00:02:58.912 
你可以在同樣的佈局中打字了
而不需要用地球鍵來切換

00:02:59.046 --> 00:03:00.781 
你還有自動改錯功能

00:03:01.181 --> 00:03:02.916 
以及兩種語言的預測拼寫功能

00:03:07.087 --> 00:03:11.124 
我們所做的另一個改進是
加入了拉美西班牙語

00:03:11.725 --> 00:03:15.162 
其被加入了iOS
watchOS還有tvOS

00:03:15.662 --> 00:03:16.930 
這可能是頭一次

00:03:17.164 --> 00:03:21.401 
你的應用會碰到語言變體

00:03:21.635 --> 00:03:25.539 
其不是給特定國家設計的

00:03:25.606 --> 00:03:29.243 
我待會兒會從代碼層面
來解釋下這有多重要

00:03:31.178 --> 00:03:34.314 
另一個很棒的改進是新的計量格式器

00:03:34.515 --> 00:03:36.316  
其被加入到foundation中

00:03:36.817 --> 00:03:40.187  
它會處理一種語言中的單位轉換

00:03:40.254 --> 00:03:43.357  
以及在後臺處理該區域
要注意的風俗習慣問題

00:03:43.790 --> 00:03:46.126  
它已經支持了超過20種不同的單位

00:03:46.527 --> 00:03:51.064  
像是溫度 能量 壓力等等

00:03:51.431 --> 00:03:52.266  
在此

00:03:52.533 --> 00:03:55.836  
我不會深入展開來講

00:03:55.903 --> 00:03:59.273  
週五有個專門講這個專題會話

00:03:59.339 --> 00:04:00.707  
請去參加那個會話吧

00:04:03.210 --> 00:04:06.880 
我們近年也本地化了數字鍵盤

00:04:07.281 --> 00:04:10.984 
因此當你請求數字鍵盤的時候

00:04:11.084 --> 00:04:12.653 
你會自動得到

00:04:12.719 --> 00:04:15.222 
支持不同編號體系的鍵盤

00:04:15.322 --> 00:04:17.057 
例如支持阿拉伯數字和印度語數字

00:04:18.858 --> 00:04:20.427 
當你處於當前狀態時

00:04:20.494 --> 00:04:23.697 
你會看到鍵盤的左下角有一個123鍵

00:04:23.764 --> 00:04:26.500 
來讓你在不同的計數系統間進行切換

00:04:28.468 --> 00:04:29.703  
在這些情況下

00:04:30.070 --> 00:04:34.041  
你可能想要能帶ASCII數字的鍵盤

00:04:34.107 --> 00:04:37.411  
當你確定你要進行的輸入

00:04:37.477 --> 00:04:39.613  
必須限定爲ASCII數字時

00:04:39.947 --> 00:04:44.051  
比如要輸入信用卡號和IP地址時

00:04:44.117 --> 00:04:46.720  
這些是特殊的例子
但是你應該考慮到這些情況

00:04:50.290 --> 00:04:54.194 
在macOS Sierra中的
一個重要新特性

00:04:54.261 --> 00:04:59.733 
就是支持像是阿拉伯語和希伯來語
本地化從右向左輸入

00:05:00.033 --> 00:05:03.237 
macOS重新設計了
從右向左讀寫的語言

00:05:05.205 --> 00:05:08.141 
當然macOS加入了我們已有的家庭

00:05:08.208 --> 00:05:11.945 
其中像是iOS和watchOS
這類產品已經支持了

00:05:12.279 --> 00:05:13.914 
本地化的從右向左讀寫的語言

00:05:15.115 --> 00:05:18.151  
這個是挺大的主題 我不會就此展開

00:05:18.552 --> 00:05:20.287  
有個專門講這個主題的演講

00:05:20.354 --> 00:05:24.258  
會在中午上午九點舉行
叫做國際用戶界面的新特性

00:05:24.324 --> 00:05:26.026  
你們應該去聽一下

00:05:27.494 --> 00:05:30.631 
我們從一些基本概念開始講起吧

00:05:31.565 --> 00:05:34.001 
都是關於國際化所需要知道的概念

00:05:34.935 --> 00:05:38.839 
讓我們看一個iOS預裝的應用
時鐘應用

00:05:38.906 --> 00:05:41.708 
它的界面重新設計了
不過你們應該看着還會眼熟

00:05:42.843 --> 00:05:44.444 
那麼有哪些方面

00:05:44.511 --> 00:05:46.680 
你需要進行國際化

00:05:46.747 --> 00:05:49.349 
來讓這個應用適應不同的語言和國家呢

00:05:51.118 --> 00:05:53.820 
首先 你需要本地化所有的字符串

00:05:53.887 --> 00:05:59.726 
也就是任何有字符串的按鈕
標籤或是視圖

00:05:59.793 --> 00:06:01.461 
你得保證它被翻譯成

00:06:01.528 --> 00:06:03.997 
所有你要支持的語言

00:06:05.832 --> 00:06:09.770 
接下來還有另一類的字符串
需要被本地化

00:06:09.837 --> 00:06:13.540 
但它是格式化的內容
因此你應該使用格式器

00:06:14.241 --> 00:06:15.809 
來實現

00:06:16.109 --> 00:06:17.778 
這會節省你大量的工作

00:06:20.547 --> 00:06:22.916 
最後 你需要國際化整個佈局

00:06:23.183 --> 00:06:25.686 
以便它可以在從右向左的語言環境下
運轉良好

00:06:26.720 --> 00:06:29.389 
而對於會產生更長或
更短翻譯結果的語言

00:06:29.456 --> 00:06:31.024 
這是與源語言相比較而言

00:06:32.326 --> 00:06:36.029 
如果我們所有都弄對了
那麼我們就把這個英文應用

00:06:36.530 --> 00:06:39.633 
翻譯成中文應用吧 它看起來不錯

00:06:40.334 --> 00:06:44.071 
注意在中文環境下
上午/下午標示是在

00:06:44.137 --> 00:06:46.540 
數字之前而英文環境下正好相反

00:06:48.008 --> 00:06:51.411 
它在諸如阿拉伯語這類從右向左讀寫的
語言環境下效果也不錯

00:06:51.612 --> 00:06:54.815 
注意看現在整個應用的佈局
是如何呈現從右向左的

00:06:55.749 --> 00:07:01.088 
在這個例子中 看看在阿拉伯語環境下
是如何使用阿拉伯-印度語數字的

00:07:01.154 --> 00:07:03.056 
這和英語環境下的運行是不同的

00:07:03.123 --> 00:07:05.526 
如果你用的是格式器
這些就不用你操心了

00:07:07.361 --> 00:07:11.231 
這些就是開發方面的一些基礎知識

00:07:11.298 --> 00:07:14.134 
讓我們也來看看用戶角度的基礎知識

00:07:14.201 --> 00:07:19.206 
當用戶獲得一個新的Apple設備
像是iPhone 他會做什麼呢

00:07:20.541 --> 00:07:22.843 
當你打開每個Apple設備

00:07:22.910 --> 00:07:25.145 
首次都會讓你選擇一種語言

00:07:26.313 --> 00:07:28.982 
深入探究的話其實就是

00:07:29.049 --> 00:07:32.953 
每種語言都有與其對應的編碼

00:07:33.120 --> 00:07:36.089 
當然了 每個區域也有相應的編碼

00:07:36.723 --> 00:07:40.561 
我們假定一個用戶選擇的是
西班牙語 美國

00:07:42.596 --> 00:07:46.800 
其實最後生成的語言編碼是es-US

00:07:49.203 --> 00:07:50.137  
你可能不知道的是

00:07:50.204 --> 00:07:53.307  
語言編碼也是有體系結構的

00:07:53.674 --> 00:07:55.976  
例如 西班牙語 美國

00:07:56.043 --> 00:07:58.245  
實際上是繼承於拉美西班牙語

00:07:58.312 --> 00:08:00.247  
而其又繼承於原生西班牙語

00:08:00.848 --> 00:08:02.015  
這非常的重要

00:08:02.082 --> 00:08:07.621  
因爲不是每個應用都會被本地化爲
西班牙語 美國

00:08:07.688 --> 00:08:08.956  
所以我們想要知道

00:08:09.022 --> 00:08:11.725  
用戶傾向的次選語言是什麼

00:08:11.792 --> 00:08:13.927  
如果我們不支持他們最喜歡的語言

00:08:13.994 --> 00:08:15.229  
顯示在系統上

00:08:17.965 --> 00:08:20.501  
而且這個體系結果不僅是針對西班牙語

00:08:20.567 --> 00:08:23.203  
甚至是像英語都
是有這樣的體系結構的

00:08:23.270 --> 00:08:25.005  
例如 印度英語

00:08:25.939 --> 00:08:31.945  
其拼寫體系是要更接近於
英式英語 相比美式英語來說

00:08:32.011 --> 00:08:36.250  
因此它就是繼承於英式英語的
體系結構的一部分

00:08:36.884 --> 00:08:41.288 
英語和西班牙語只不過是其中兩種語言
對於這種體系結構來說

00:08:42.054 --> 00:08:45.692 
我們還有其他語言像是漢語
法語 葡萄牙語

00:08:45.759 --> 00:08:47.194 
也有類似的體系結構

00:08:47.261 --> 00:08:51.365 
所以我希望你們把這些要點都記下來

00:08:51.431 --> 00:08:52.366 
當然不用了

00:08:52.766 --> 00:08:54.468 
我提到這些點的原因就是

00:08:54.535 --> 00:08:56.570 
因爲我們會幫助你們解決這類問題

00:08:56.637 --> 00:08:58.472 
而你根本就不用操心這個

00:08:58.672 --> 00:09:02.876 
我會在下面告訴你們要怎麼實現

00:09:04.278 --> 00:09:06.513 
我們首先要做什麼呢

00:09:06.580 --> 00:09:08.115 
我們需要本地化所有的字符串

00:09:08.348 --> 00:09:09.917  
還要進行一些設置

00:09:09.983 --> 00:09:13.187  
這些設置挺簡單的 不過確實要做

00:09:13.253 --> 00:09:15.856  
我不打算在這細說

00:09:15.923 --> 00:09:18.859  
因爲有很多的文檔可供參考

00:09:18.926 --> 00:09:22.563  
而且還有另外一個講座
專門是講如何設置你的應用的

00:09:22.896 --> 00:09:25.832  
假設你已經完成了你的本地化設置

00:09:25.899 --> 00:09:28.302  
那麼此時你的應用裏
就有了一些本地化的字符串

00:09:30.604 --> 00:09:32.272 
若你使用storyboard

00:09:32.573 --> 00:09:35.008 
並使用其中的國際化基板 你就完成了

00:09:35.576 --> 00:09:37.411 
你不用再做什麼 啓動你的應用吧

00:09:37.477 --> 00:09:38.745 
字符串成功加載

00:09:38.912 --> 00:09:39.780 
你都完成啦

00:09:42.149 --> 00:09:45.385 
如果你要在代碼中創建或載入字符串

00:09:45.452 --> 00:09:47.754 
你需要調用
NSLocalizedString

00:09:47.855 --> 00:09:51.058 
NSLocalizedString
會運用非常好的邏輯

00:09:51.124 --> 00:09:52.926 
來處理我剛纔提過的體系結構

00:09:53.026 --> 00:09:55.395 
它會爲你加載最恰當的字符串

00:09:55.562 --> 00:09:58.999 
注意給你的翻譯器加上個註釋

00:09:59.066 --> 00:10:03.637 
因爲根據不同的語境
同樣的單詞經常會有不同的意思

00:10:03.704 --> 00:10:05.739 
而註釋會幫助理清它

00:10:08.475 --> 00:10:10.744 
讓我們看個更復雜些的場景

00:10:10.811 --> 00:10:13.247 
假如說你是從遠程服務獲取字符串的

00:10:13.313 --> 00:10:16.149 
像是從服務器或是另一個進程

00:10:16.450 --> 00:10:19.152 
在這種情況下 你可能想讓服務器

00:10:19.219 --> 00:10:20.420 
或是其他進程知道

00:10:20.487 --> 00:10:22.890 
這就是我的應用的啓動語言

00:10:22.956 --> 00:10:24.791 
請給我相匹配的字符串

00:10:25.192 --> 00:10:26.560 
爲了實現這個功能

00:10:26.627 --> 00:10:30.631 
你可以在你啓動的Bundle上
調用喜歡的本地化

00:10:30.931 --> 00:10:34.635 
以此獲得第一種語言
並將其發給你的遠程服務

00:10:38.272 --> 00:10:41.675 
如果你還有更多參與的設置

00:10:41.742 --> 00:10:44.678 
出於某種原因你有一個列表的可選語言

00:10:44.745 --> 00:10:47.214 
而在服務器上沒有正好匹配

00:10:47.281 --> 00:10:48.849 
你在客戶端上列表裏的語言

00:10:48.916 --> 00:10:51.151 
假如說你在服務器端有一個更大的集

00:10:51.351 --> 00:10:56.123 
那麼你可以調用
preferredLocalizations方法

00:10:56.423 --> 00:10:58.025 
並傳給它你所擁有的備選集

00:10:58.091 --> 00:11:00.294 
它會給你匹配最合適的語言

00:11:01.728 --> 00:11:05.766  
我提到Bundle語言匹配邏輯

00:11:05.832 --> 00:11:08.235  
在上面幾張幻燈片好多次了

00:11:08.535 --> 00:11:09.570  
那它到底是什麼呢

00:11:09.636 --> 00:11:11.738  
Bundle在底層爲你做了什麼呢

00:11:12.573 --> 00:11:16.376  
Bundle爲你做的就是
它在思考一些事情 比如

00:11:16.443 --> 00:11:20.280  
恩 用戶喜歡英語 美國

00:11:20.514 --> 00:11:23.283  
但是我們沒有英語 美國的本地化配置

00:11:23.350 --> 00:11:26.920  
不過我們有英語的配置
在此它就會給你英語的配置

00:11:27.120 --> 00:11:29.623  
它會弄明白 你想要印度式英語

00:11:29.690 --> 00:11:33.560  
我們有英式的而不是印度式的
那我們就給你英式的

00:11:33.927 --> 00:11:37.197  
在拉美西班牙語的例子中

00:11:37.497 --> 00:11:40.100  
如果你說我喜歡墨西哥式英語

00:11:40.167 --> 00:11:43.270  
它會試着給你最好的匹配結果

00:11:43.337 --> 00:11:45.839  
從列表中看就是拉美西班牙語

00:11:46.340 --> 00:11:49.142  
類似的 有關於漢語還有很多其他語言

00:11:49.209 --> 00:11:52.212  
這種本地化的語言體系邏輯非常複雜

00:11:52.513 --> 00:11:55.082 
你應該不想在你的應用中執行

00:11:55.148 --> 00:11:57.684 
如果你的代碼是可以實現

00:11:57.751 --> 00:11:59.286 
使用語言識別器

00:11:59.353 --> 00:12:01.889 
通過連字符分割它
或者諸如此類的代碼

00:12:01.955 --> 00:12:04.992 
請把代碼刪除 因爲你不應該這麼做

00:12:06.960 --> 00:12:10.464 
現在你已經本地化了你的所有字符串
也使用了正確API

00:12:11.064 --> 00:12:13.233  
你應該再檢查一下你所做的

00:12:13.300 --> 00:12:14.601  
是否真的把應用本地化了

00:12:14.668 --> 00:12:18.272  
爲了實現這個目的
你可使用Xcode 8新靜態分析器

00:12:18.539 --> 00:12:22.543  
它會幫你找到本地化中出現的任何問題

00:12:22.609 --> 00:12:25.712  
你把非本地化的字符串放到UI的位置

00:12:28.015 --> 00:12:29.883 
這就是所有關於本地化字符串的內容了

00:12:30.751 --> 00:12:32.286 
接下來我們談一下格式器

00:12:34.588 --> 00:12:37.257 
現如今你能看到很多這類應用

00:12:37.324 --> 00:12:39.393 
關於送達服務的

00:12:39.793 --> 00:12:43.964 
但是你這裏看到的這個可不怎麼樣

00:12:44.331 --> 00:12:46.233 
它上面寫着AM9:41

00:12:46.300 --> 00:12:49.736 
英語用戶會覺得這寫的根本不對

00:12:50.637 --> 00:12:53.273 
但相信我
我在實際的應用中看到過這種格式

00:12:54.675 --> 00:12:58.045 
你可能會發現在中文裏是正好相反的

00:12:58.111 --> 00:13:01.114 
中文裏把a.m./p.m.
記號放在數字後面的話

00:13:01.181 --> 00:13:02.983 
是完全錯誤的

00:13:03.750 --> 00:13:06.987 
那我們應該如何避免這樣的錯誤呢

00:13:09.122 --> 00:13:13.493 
其實問題是在於我們使用了一個方法

00:13:13.560 --> 00:13:17.497 
方法叫做formatter.dateFormat
還通過它設置了一個固定的格式

00:13:17.564 --> 00:13:19.266 
似乎看上去這麼做是對的

00:13:19.366 --> 00:13:23.237 
其在代碼中很整潔
但實際上是錯的方法

00:13:24.404 --> 00:13:27.941 
儘管在英語環境下
它顯示的是正確的結果

00:13:28.008 --> 00:13:29.743 
它會顯示9:41 a.m.

00:13:29.810 --> 00:13:32.946 
但如果你是在中文環境下
結果就是錯誤的

00:13:33.013 --> 00:13:34.948 
爲什麼呢
因爲它設定的是固定的格式

00:13:35.015 --> 00:13:38.018 
而不管你運行的是哪種語言

00:13:40.087 --> 00:13:41.688 
正確的方法應該是

00:13:41.755 --> 00:13:45.526 
在日期格式器上使用預定義的短風格

00:13:45.592 --> 00:13:48.095 
它會爲你顯示正確的結果
無論是在英語環境

00:13:48.962 --> 00:13:52.299 
漢語環境
還是你應用可能本地化的其他語言

00:13:54.201 --> 00:13:55.736 
當然還有其他更多風格供選擇

00:13:55.802 --> 00:13:58.405 
有我剛剛演示給你的短風格

00:13:58.739 --> 00:14:01.842 
也有稍微長一點的風格 它帶有秒數

00:14:01.942 --> 00:14:04.178 
還有帶時區的風格

00:14:04.645 --> 00:14:05.812  
或帶完整時區名顯示的

00:14:05.946 --> 00:14:08.282  
對於不同的需要有着對應的不同風格

00:14:09.917 --> 00:14:11.485 
當然了 不僅僅是有關於時間的

00:14:11.718 --> 00:14:13.020 
也有關於日期的

00:14:13.153 --> 00:14:16.223 
從短期到長期的風格一應俱全

00:14:17.758 --> 00:14:19.092 
你可能會找到我說

00:14:19.159 --> 00:14:21.895 
這些是挺好的
但是沒有一種風格是我的設計師想要的

00:14:21.962 --> 00:14:25.933 
他們只想要整年的
或者光要這個 光要那個

00:14:26.400 --> 00:14:27.234 
沒問題

00:14:27.334 --> 00:14:30.103 
你可以用一個格式

00:14:30.671 --> 00:14:32.739 
重要的是要使用它的話

00:14:32.873 --> 00:14:36.877 
要用到setLocalizedDateFormat
FromTemplate方法

00:14:37.144 --> 00:14:40.647 
這會保證它接受你的格式

00:14:40.714 --> 00:14:43.350 
解釋當前引號中的語言

00:14:43.584 --> 00:14:47.187 
然後給你該語言對應的正確本地化格式

00:14:51.024 --> 00:14:53.961 
還有兩個你可能沒有用過的類

00:14:54.161 --> 00:14:56.263 
儘管不是今年剛出的不過還是很新

00:14:56.363 --> 00:15:00.200 
日期控件 它可以讓你生成格式

00:15:00.267 --> 00:15:02.503 
一個區間段 像是4小時25分鐘

00:15:03.537 --> 00:15:08.976  
或是日期間隔 像是這個講座的時間
上午9點到9點40

00:15:09.743 --> 00:15:14.014 
使用這些類的優勢在於

00:15:14.481 --> 00:15:17.050 
它會爲你負責所有的本地化工作

00:15:20.921 --> 00:15:24.391 
接下來我們談談另一種
你可以格式化的數據類型

00:15:24.691 --> 00:15:25.592 
名稱

00:15:27.628 --> 00:15:28.462 
現在...

00:15:29.096 --> 00:15:32.165 
如果你是這麼顯示你的用戶名字的

00:15:32.232 --> 00:15:35.602 
或者是他們朋友的名字
當他們打開你的應用時

00:15:36.170 --> 00:15:38.705 
這會讓他們對你的應用
留下一個非常壞的印象

00:15:39.072 --> 00:15:40.841 
我們不該這麼做

00:15:42.242 --> 00:15:46.346 
你應該正確顯示這些名字

00:15:47.247 --> 00:15:49.249 
爲給定的語言和腳本

00:15:50.384 --> 00:15:51.318 
我們應該怎麼做呢

00:15:53.420 --> 00:15:54.888 
其實挺簡單的

00:15:55.989 --> 00:15:58.992 
你需要創建一個
PersonNameComponents對象

00:15:59.059 --> 00:16:03.096 
將其填入一些名字的組件
然後就像其他的格式器

00:16:03.163 --> 00:16:06.433 
你就從組件中請求字符串即可

00:16:06.500 --> 00:16:08.335 
你想要什麼風格都可以

00:16:08.402 --> 00:16:12.206 
我們有很多的風格可供選擇
從長的 像是全名

00:16:12.272 --> 00:16:15.475 
到縮略的 你可以用首字母縮寫

00:16:17.411 --> 00:16:20.147 
當然了 它也支持多語種

00:16:22.149 --> 00:16:26.153 
近年所出的新特性是名稱語法分析支持

00:16:26.353 --> 00:16:30.290 
你既能分析一個全名
也能分析一系列的部件

00:16:31.124 --> 00:16:33.227 
而且實現它就像
創建一個格式器那樣容易

00:16:33.694 --> 00:16:36.830 
發給它一個字符串 然後看下組件

00:16:37.264 --> 00:16:39.967 
如果返回nil 那麼就沒有成功分析

00:16:41.001 --> 00:16:43.036 
組件構造

00:16:43.670 --> 00:16:45.072 
有個挺酷的事是

00:16:45.138 --> 00:16:50.377 
這不是個檢查某個靜態規則集合的
靜態API

00:16:50.444 --> 00:16:53.380 
它其實是個統計數據模型

00:16:53.614 --> 00:16:56.817 
所以即使你是以相反的順序傳入名字的

00:16:56.884 --> 00:16:59.720 
它也知道
在John Appleseed中

00:16:59.786 --> 00:17:02.923 
John更可能是名

00:17:02.990 --> 00:17:04.625 
而Appleseed是姓

00:17:04.691 --> 00:17:06.627 
而它仍將正確分析語法

00:17:08.628 --> 00:17:11.798 
它也支持多個語種

00:17:14.468 --> 00:17:16.603 
有很多個格式器

00:17:17.671 --> 00:17:18.505 
我着重說了

00:17:19.039 --> 00:17:24.411 
Date和
PersonNameComponents格式器

00:17:25.112 --> 00:17:29.616 
簡單說明瞭關於日期的
components和interval格式器

00:17:30.050 --> 00:17:32.586 
有些格式器我沒有提到

00:17:32.653 --> 00:17:36.023 
它們都是系統中現有的格式器

00:17:37.124 --> 00:17:40.260  
這個是全新的
measurement格式器

00:17:40.894 --> 00:17:43.397  
這也是新發布的一個格式器

00:17:43.630 --> 00:17:46.333  
請用下這些格式器

00:17:46.466 --> 00:17:49.503 
無論在你代碼的哪個地方
因爲使用它們是正確的

00:17:49.570 --> 00:17:51.772 
你也會減少使用本地化字符串

00:17:53.307 --> 00:17:55.342 
這是你在這些例子中應該避免使用的

00:17:56.210 --> 00:17:57.044 
那麼

00:17:57.811 --> 00:17:59.913 
就是這麼多了

00:18:00.480 --> 00:18:03.116 
在字符串方面
你整個的UI就是本地化的

00:18:03.317 --> 00:18:06.253 
那麼讓我們來看下
在佈局方面應該做些什麼

00:18:06.720 --> 00:18:10.257 
以確保UI是和那些字符串正常工作的

00:18:12.092 --> 00:18:16.263 
這裏的關鍵字是Auto Layout

00:18:16.630 --> 00:18:20.801 
它要做的正如其名

00:18:20.868 --> 00:18:22.769 
就是要實現自動佈局

00:18:23.237 --> 00:18:25.439 
不管你是在左還是右優先的應用

00:18:26.740 --> 00:18:29.009 
若你使用“自動佈局”
你都會得到

00:18:29.209 --> 00:18:33.013 
自動生成一個基於從右向左語言
的用戶界面

00:18:34.181 --> 00:18:37.284  
自動佈局是一個重要的話題

00:18:37.417 --> 00:18:41.321  
我不會展開講
你應該如何使用自動佈局

00:18:41.388 --> 00:18:44.191  
因爲有很多的會話 不僅是今年

00:18:44.258 --> 00:18:48.328  
還有往年的 介紹了其相當多的細節

00:18:49.763 --> 00:18:53.100  
你應該使用UIStackView

00:18:53.166 --> 00:18:59.473 
和NSStackView 儘量多用
因其是非常容易使用的API

00:18:59.540 --> 00:19:03.744 
是用自動佈局的API
這會讓你的視圖

00:19:03.810 --> 00:19:06.513 
跳轉爲從右向左語言顯示

00:19:06.580 --> 00:19:09.950 
並且當它們得到長和短的字符串時
會進行恰當的調整

00:19:11.785 --> 00:19:13.754 
我們會給你們一些示例代碼

00:19:13.820 --> 00:19:19.259 
向你展示如何使用Stack Views
來實現一個時鐘應用

00:19:23.030 --> 00:19:26.200 
對於佈局你要牢記一點

00:19:26.266 --> 00:19:29.102 
就是有時候你得有點創造性

00:19:29.703 --> 00:19:31.438 
當前的屏幕內容是以英文顯示的

00:19:31.672 --> 00:19:33.540 
你確定你不想用Apple ID麼

00:19:34.241 --> 00:19:37.744 
你在這有兩個選項
用或者不用Apple ID

00:19:37.845 --> 00:19:39.947 
你可以想象在某些語言環境中

00:19:40.013 --> 00:19:43.617 
翻譯可能會長一點
就放不到這兩個緊挨着的按鈕中

00:19:44.618 --> 00:19:45.752 
那你該怎麼做呢

00:19:46.153 --> 00:19:50.424 
在這種情況下
你會發現整個視圖進行了切換

00:19:50.490 --> 00:19:53.594 
從左右適應變成了上下適應

00:19:54.194 --> 00:19:59.199 
諸如此類的創造性UI元素
是你應該記住的

00:19:59.266 --> 00:20:02.603 
在你的應用中

00:20:03.070 --> 00:20:07.140 
你向翻譯器請求縮短一個字符串

00:20:07.207 --> 00:20:10.410 
甚至在該語言環境下都不能明確表意時

00:20:14.481 --> 00:20:16.216 
接下來要介紹的是豎直靈活性

00:20:16.283 --> 00:20:21.922 
你們的應用可能以前都沒有考慮過這點

00:20:22.923 --> 00:20:23.757 
恩

00:20:24.391 --> 00:20:27.227 
我們在OS中有很多的腳本

00:20:27.294 --> 00:20:30.464 
爲了支持像是越南語 泰語
阿拉伯語和印地語

00:20:30.531 --> 00:20:34.434 
或高或低或兼有

00:20:34.501 --> 00:20:37.938 
與書寫英文所用的基礎拉丁字母相比

00:20:39.339 --> 00:20:44.378 
我們經常會碰到一個錯誤

00:20:44.444 --> 00:20:48.248  
就是有人可能把標籤的
clipsToBounds設爲true

00:20:48.749 --> 00:20:52.119  
它會將兩邊的文本剪切

00:20:52.786 --> 00:20:57.624  
這會讓佈局變得很醜

00:20:58.091 --> 00:21:00.527  
在那種語言環境下看起來很糟糕

00:21:01.128 --> 00:21:04.231  
你會丟失重要的語義信息

00:21:04.298 --> 00:21:05.766  
像是變音符

00:21:06.366 --> 00:21:11.572  
在這個例子中
右邊所有詞的發音都變了

00:21:11.872 --> 00:21:13.373  
當你像這樣剪切它們的時候

00:21:14.575 --> 00:21:16.643  
想要修復它很容易

00:21:16.710 --> 00:21:20.113  
如果有標籤的話不要將
clipsToBounds設爲true

00:21:20.714 --> 00:21:23.317  
這樣就能解決這個問題

00:21:26.086 --> 00:21:29.690 
更有趣的是 如果你有個多行的標籤

00:21:30.524 --> 00:21:32.860 
你也需要考慮行內間距

00:21:33.694 --> 00:21:35.329 
我們來看下這裏

00:21:35.395 --> 00:21:38.732 
左側有印地語 而右側有英語

00:21:40.133 --> 00:21:43.370 
抱歉這裏弄反了
是英文在左邊 印地語在右邊

00:21:43.904 --> 00:21:44.738 
不過

00:21:45.539 --> 00:21:47.841 
看看如果我們擠佔的話會怎麼樣

00:21:48.108 --> 00:21:51.812 
將印地語擠佔到
跟英語有着相同的豎直空間

00:21:52.513 --> 00:21:54.147 
這看起來很難認

00:21:55.115 --> 00:21:58.552 
任何一個印地語讀者都會告訴你

00:21:58.619 --> 00:22:02.523 
這簡直太難讀了 看起來一點都不好

00:22:04.024 --> 00:22:05.526 
因此你要做的就是

00:22:05.592 --> 00:22:08.795 
給予每個腳本充足的空間

00:22:08.862 --> 00:22:11.832 
使其在屏幕看起來既美觀又易讀

00:22:12.366 --> 00:22:14.668 
好消息是這很容易實現

00:22:15.936 --> 00:22:17.671 
當你用多行標籤的時候

00:22:18.138 --> 00:22:21.108 
其實大部分情況都是默認的
不過你還是確認

00:22:21.175 --> 00:22:23.544 
你正確設置了定製的字體

00:22:23.844 --> 00:22:27.247 
也就是你通過UI字體API
獲得了想要的字體

00:22:28.549 --> 00:22:31.051  
你也許會說

00:22:31.118 --> 00:22:34.621  
我有一個定製字體但是我用不了

00:22:34.922 --> 00:22:39.059  
這其實是可以解決的 你應該

00:22:39.760 --> 00:22:43.063  
你應該看下週三關於字體和排版的講座

00:22:43.130 --> 00:22:45.699  
它深入的講瞭如何保證

00:22:45.766 --> 00:22:50.470  
定製字體如何貼合動態類型

00:22:54.074 --> 00:22:58.912 
接下來對於table views
我們所做的很巧妙

00:22:58.979 --> 00:23:01.715 
如果你所選的語言是
帶有較高的書寫字母

00:23:02.015 --> 00:23:06.453 
我們會把表格的行高給調大

00:23:06.520 --> 00:23:09.122 
比起其在其他語言中的效果 像是英語

00:23:09.790 --> 00:23:12.526 
這是給了書寫字母足夠的空間

00:23:12.593 --> 00:23:15.929 
這會讓那些語言整體看上去更加自然

00:23:17.731 --> 00:23:21.134 
要發揮這個優勢的話
你要在代碼中使用

00:23:21.201 --> 00:23:23.570 
標準UITableViewCell
風格

00:23:24.071 --> 00:23:26.874 
你可能會說 我用的是定製的cell

00:23:26.940 --> 00:23:28.642 
這樣就不能正常工作了

00:23:28.709 --> 00:23:30.711 
這可不是有個標籤就能實現的

00:23:30.777 --> 00:23:32.012 
它不像你想的那麼簡單

00:23:32.079 --> 00:23:33.113 
好吧

00:23:33.680 --> 00:23:35.249 
我同意 不過

00:23:35.782 --> 00:23:39.953 
至少我發現若你使用
UITableViewCell

00:23:40.020 --> 00:23:42.556 
它是可高度定製化的

00:23:42.856 --> 00:23:45.058 
它有很多的過載方法可供你使用

00:23:45.192 --> 00:23:47.427 
總能得到你想要的外觀效果

00:23:47.694 --> 00:23:51.398 
所以先試試它吧
在你實現一個完全定製的

00:23:51.899 --> 00:23:53.767 
UITableViewCell之前

00:23:57.204 --> 00:24:01.175 
我想介紹的小的代碼改進就是這麼多

00:24:01.241 --> 00:24:04.511 
它們會讓你的應用
面向國際用戶時表現更加出色

00:24:04.912 --> 00:24:09.183 
讓我們談一些別的吧
更抽象 更以設計爲基礎的東西

00:24:10.184 --> 00:24:12.920 
還有些從心理層面你要記住的東西

00:24:13.320 --> 00:24:14.855 
繼而做出很棒的應用

00:24:16.924 --> 00:24:18.859 
首先就是圖標學

00:24:19.726 --> 00:24:23.931 
當你進入App Store
想要找一款應用時

00:24:23.997 --> 00:24:26.600 
頭一個你會注意到的東西就是圖標

00:24:26.934 --> 00:24:28.869 
很多時候 至少對於我來說

00:24:28.936 --> 00:24:32.773 
如果圖標不好看我就不會買
因爲它會顯示在我的主屏幕上

00:24:33.340 --> 00:24:35.809 
我可不想在那顯示一個不好看的應用

00:24:36.376 --> 00:24:38.245 
所以圖標是很重要的

00:24:38.312 --> 00:24:41.548 
還有一點也很重要
就是你所選擇的圖標

00:24:41.949 --> 00:24:44.251 
要對於不同的語言都適用

00:24:44.318 --> 00:24:48.422 
還有對於不同佈局方向的語言

00:24:48.488 --> 00:24:50.190 
不管是從左向右的還是從右向左的

00:24:50.490 --> 00:24:53.193 
Photos有一個不錯的圖標

00:24:53.260 --> 00:24:55.963 
這就是一個不錯的圖標案例

00:24:56.530 --> 00:25:02.069 
它不包含文字或者數字
使其拘泥於某種特定的語言

00:25:02.569 --> 00:25:05.973 
它也沒有從左往右
或是從右往左的方向性

00:25:06.206 --> 00:25:10.677 
所以它在日語 英語
阿拉伯語下都表現出色

00:25:12.846 --> 00:25:15.883  
如果你要做一個從右向左的本地化

00:25:16.316 --> 00:25:19.486  
而且你想保證你的UI看起來不錯

00:25:19.553 --> 00:25:20.921  
對於從右向左的語言來說

00:25:21.688 --> 00:25:23.857  
你就得檢查一下你所用的插圖

00:25:24.191 --> 00:25:27.160  
如果你所使用的插圖是帶有方向性的

00:25:27.327 --> 00:25:29.830  
你需要把它變爲適配從右向左語言的

00:25:30.030 --> 00:25:33.834  
你可能需要創造專門的插圖

00:25:33.901 --> 00:25:35.102  
爲從右向左的語言來使用

00:25:35.469 --> 00:25:39.907  
這裏有個例子是
你不能直接水平翻轉這個插圖

00:25:39.973 --> 00:25:43.644  
如果你要用從右向左語言的話
你需要創作專門的插圖

00:25:44.978 --> 00:25:47.781 
不過如果你有隻需要翻轉的插圖的話

00:25:47.848 --> 00:25:49.082 
有一個API可以實現

00:25:49.149 --> 00:25:51.218 
而你就不需要再單獨做一張插圖了

00:25:51.818 --> 00:25:53.520 
對此更多的信息

00:25:53.587 --> 00:25:56.523 
在“國際用戶界面的新特性”
的會話中有

00:25:56.590 --> 00:26:00.060 
這個會話將在週五舉行
但是關鍵是資源目錄

00:26:03.864 --> 00:26:07.201 
另一個你可能想到 可能想不到的

00:26:07.267 --> 00:26:08.468 
是你應用的名字

00:26:09.770 --> 00:26:12.906 
當你看全世界
不同的App Store時

00:26:13.173 --> 00:26:16.777 
我們最習以爲常的就是

00:26:16.944 --> 00:26:19.513 
用戶更喜歡買的應用

00:26:19.847 --> 00:26:21.648 
就是用母語寫的應用

00:26:21.949 --> 00:26:24.351 
這點對於應用的名字來說同樣適用

00:26:24.918 --> 00:26:27.921 
因爲如果他們能夠一目瞭然的

00:26:27.988 --> 00:26:31.525 
通過一行應用的名字和描述
就知道這個應用是幹什麼用的

00:26:31.825 --> 00:26:33.760 
那他們就更有可能

00:26:34.061 --> 00:26:37.231 
點進應用界面去看一下

00:26:40.434 --> 00:26:42.970 
當然了 這個世界

00:26:43.504 --> 00:26:47.040 
全世界用戶越來越會多種語言

00:26:47.241 --> 00:26:48.876 
或者他們至少會雙語

00:26:49.409 --> 00:26:52.913 
因此你的應用不應該假設

00:26:53.013 --> 00:26:58.585 
UI所用的語言以及其與內容的關聯

00:26:58.785 --> 00:26:59.887 
用戶所輸入的

00:27:00.254 --> 00:27:02.489 
例如 一個常見的例子是

00:27:02.556 --> 00:27:07.961 
像亞洲的國家 比如印度
和東南亞地區

00:27:08.028 --> 00:27:10.898 
人們會把手機語言設爲英文

00:27:11.331 --> 00:27:14.501 
但是他們也會用當地語言寫成的內容

00:27:14.568 --> 00:27:15.802 
就像是本例子中的印地語

00:27:16.803 --> 00:27:20.107 
因此當你的應用運行在英文環境時

00:27:20.174 --> 00:27:22.709 
不要想當然的認爲用戶會輸入英文

00:27:22.776 --> 00:27:26.813 
特別是要用中文和日文鍵盤
來測試你的應用

00:27:26.880 --> 00:27:29.049 
確保其是正常工作的

00:27:33.720 --> 00:27:37.257 
在此我想給你們展示一個應用

00:27:37.724 --> 00:27:42.362 
我們覺得完全證明我剛纔所說的

00:27:43.530 --> 00:27:44.731 
那就是Evernote

00:27:45.299 --> 00:27:47.835 
首先你看下程序圖標

00:27:48.535 --> 00:27:50.404 
它沒有任何的字母 符號或是其他什麼

00:27:50.470 --> 00:27:53.440 
可能與單一語種有關聯的東西

00:27:54.608 --> 00:27:55.843 
這很不錯

00:27:58.045 --> 00:28:03.483 
他們還將應用的名字本地化成了中文

00:28:03.550 --> 00:28:05.485 
如果你講中文的話

00:28:05.552 --> 00:28:09.990 
你就會發現他們做了一個很棒的雙關語

00:28:10.090 --> 00:28:13.360 
因爲他們所選擇的中文詞彙

00:28:13.427 --> 00:28:16.997 
同時也包含了他們的圖標中象這個字

00:28:17.064 --> 00:28:18.765 
這挺酷的

00:28:20.834 --> 00:28:23.470 
你會發現他們也本地化了程序截圖

00:28:24.238 --> 00:28:29.276 
這些截圖做的非常的細緻

00:28:29.376 --> 00:28:32.012 
例如你會發現 在這張本地化的截圖中

00:28:32.279 --> 00:28:34.748 
他們要創建一個note

00:28:35.516 --> 00:28:37.518 
屏幕上顯示的是中文鍵盤

00:28:37.584 --> 00:28:39.119 
所以用戶所看到的

00:28:39.520 --> 00:28:43.857 
從截圖中所看到就是他們能得到的
當他們下載這個應用的時候

00:28:43.924 --> 00:28:45.792 
而這正是用戶所希望看到的

00:28:46.159 --> 00:28:48.262 
所以充分利用這些優勢吧
你可以上傳

00:28:48.595 --> 00:28:51.999 
本地化的名字 描述 截圖
到App Store

00:28:55.035 --> 00:28:59.173 
最後 我想要談下驚喜和亮點

00:28:59.306 --> 00:29:03.010 
你想做出偉大產品的加分項

00:29:03.277 --> 00:29:07.314 
爲使用特定語言的人

00:29:07.381 --> 00:29:08.549 
或是特定國家的人

00:29:09.850 --> 00:29:10.951 
我會舉幾個例子

00:29:11.385 --> 00:29:15.689 
一個就是如果你有任何預定義的內容

00:29:15.789 --> 00:29:18.959 
像是模板和頁面

00:29:20.194 --> 00:29:21.228 
你就可以創建

00:29:22.396 --> 00:29:25.632 
不同的定製化內容來給不同的語言

00:29:26.066 --> 00:29:27.868 
例如 在Pages中

00:29:27.935 --> 00:29:32.039 
你有針對幾種語言定製的卡片模板

00:29:33.974 --> 00:29:37.444 
我要舉的另外一個例子是

00:29:37.511 --> 00:29:40.747 
對於更高級的特性 假如說你要支持

00:29:41.148 --> 00:29:44.251 
你要做個日曆應用 你想把它做好

00:29:44.351 --> 00:29:48.455 
專門給中東和大量的亞洲國家使用

00:29:48.722 --> 00:29:51.792 
像是使用農曆的中國

00:29:51.992 --> 00:29:54.094 
你就可以支持農曆顯示

00:29:54.194 --> 00:29:58.232 
在你的日曆應用中
就如iOS和OS X所做的那樣

00:29:58.932 --> 00:30:04.004 
因爲這樣做會給那些用戶
帶來更加豐富的用戶體驗

00:30:05.105 --> 00:30:09.343 
你能改進的地方取決於
你的應用是做什麼的

00:30:09.610 --> 00:30:11.812 
你需要審視一下你自己的應用

00:30:11.879 --> 00:30:16.617 
來看看你能在哪裏給用戶帶來驚喜

00:30:18.252 --> 00:30:21.054 
這就是我今天想說的全部內容

00:30:21.154 --> 00:30:22.723 
總結一下就是

00:30:24.491 --> 00:30:25.425 
本地化你的應用

00:30:27.828 --> 00:30:31.465 
使用標準系統API
如Formatter和Bundle

00:30:33.967 --> 00:30:36.703 
確保應用的佈局是具有靈活性的

00:30:36.770 --> 00:30:39.573 
讓不同的語言完美的工作
不管是有更短翻譯

00:30:39.640 --> 00:30:41.508 
更長翻譯

00:30:42.242 --> 00:30:45.078 
標準尺寸 不標準尺寸
英文的書寫字母

00:30:45.145 --> 00:30:47.447 
還是更高的書寫字母

00:30:50.517 --> 00:30:53.921 
當爲你的應用設計圖標時

00:30:54.321 --> 00:30:56.757 
要確保它是基於世界的設計

00:30:56.823 --> 00:31:00.961 
不要太爲某個特定語言服務

00:31:04.131 --> 00:31:05.098 
最後

00:31:06.033 --> 00:31:09.203 
恰當的本地化你的應用名稱

00:31:09.469 --> 00:31:10.637 
還有截圖

00:31:12.906 --> 00:31:16.443 
更多的內容 你可以點擊這條鏈接

00:31:16.510 --> 00:31:18.679 
來獲得其它有用的鏈接

00:31:18.745 --> 00:31:21.381 
關於國際化和本地化的

00:31:23.050 --> 00:31:25.786  
還有其他一些很酷的講座

00:31:25.853 --> 00:31:30.891  
就是我在演講中提到過的

00:31:30.958 --> 00:31:33.961  
例如“國際用戶界面的新特性”

00:31:35.062 --> 00:31:37.231  
還有“自動佈局的新特性”

00:31:38.799 --> 00:31:43.904  
還有一個我想特別提一下的是
內嵌式應用設計

00:31:43.971 --> 00:31:47.975  
它講的都是我最後提到的那些內容

00:31:48.041 --> 00:31:53.413  
如何考慮包容性設計因素

00:31:53.480 --> 00:31:55.148  
既是爲了國際化

00:31:55.215 --> 00:31:59.353  
也是爲了需要特殊支持的用戶

00:32:00.254 --> 00:32:01.088 
要說的就是這些了

00:32:01.421 --> 00:32:02.422 
非常感謝