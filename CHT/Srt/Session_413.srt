00:00:19.820 --> 00:00:25.826
Xcode介紹

00:00:32.366 --> 00:00:34.334
歡迎大家來到“Xcode介紹”

00:00:34.568 --> 00:00:37.538
我是Najla
是Xcode團隊的成員

00:00:38.038 --> 00:00:39.940
與同事Rick Ballard一起

00:00:40.007 --> 00:00:43.377
我們將會給大家介紹
Xcode的必要組件

00:00:44.311 --> 00:00:47.581
Xcode是創建應用的開發平臺

00:00:47.648 --> 00:00:53.387
可爲iOS、watchOS
tvOS和OS X、macOS創建應用

00:00:54.288 --> 00:00:56.957
它爲創建完整的應用提供了必要的工具

00:00:57.257 --> 00:01:00.460
從設計你應用的用戶界面到實現代碼

00:01:00.661 --> 00:01:03.030
以及測試和調試你的應用

00:01:03.463 --> 00:01:06.466
同時爲你的應用發佈到
App Store做些準備工作

00:01:09.002 --> 00:01:12.973
今天我們將帶你瞭解
Xcode的一些必須組件

00:01:13.040 --> 00:01:14.141
通過創建應用

00:01:15.075 --> 00:01:17.377
你將會學習如何創建一個新的應用

00:01:17.444 --> 00:01:18.879
如何把應用運行在模擬器中

00:01:19.479 --> 00:01:21.949
如何去測試和調試你的應用

00:01:23.150 --> 00:01:26.186
如何去查看你的更改
然後提交到代碼管理系統

00:01:27.421 --> 00:01:29.990
如何配置你的工程來進行應用的發佈

00:01:31.191 --> 00:01:35.562
我們的這次演講
大多關於學習如何使用Xcode

00:01:35.729 --> 00:01:37.798
也有一小部分關於應用開發的內容

00:01:37.865 --> 00:01:41.301
今天我們將要使用到的應用也挺簡單

00:01:41.702 --> 00:01:44.171
但是千萬不要被這個簡單的應用誤導

00:01:44.238 --> 00:01:46.373
這次演講的內容是面向所有開發者

00:01:46.607 --> 00:01:50.077
不論是新的開發者還是有經驗的開發者

00:01:52.145 --> 00:01:54.615
學習Xcode最有效的方法是使用它

00:01:54.681 --> 00:01:57.050
現在我們打開計算機

00:01:57.784 --> 00:02:00.420
我們現看到的是Xcode的歡迎窗口

00:02:00.754 --> 00:02:03.490
在窗口的右邊
你能看到已經存在的一些項目

00:02:03.991 --> 00:02:05.993
在左邊 你可以新建一些項目

00:02:06.793 --> 00:02:08.262
讓我們新建項目

00:02:09.729 --> 00:02:11.932
當你在Xcode裏面新建項目的時候

00:02:11.999 --> 00:02:14.067
你有一些模板可以進行選擇

00:02:14.134 --> 00:02:17.204
你可以把模板作爲開發你應用的雛形

00:02:18.005 --> 00:02:21.408
這些模板對於這四個平臺都是可用的

00:02:21.475 --> 00:02:26.480
iOS、watchOS、
tvOS和macOS

00:02:27.114 --> 00:02:29.816
這裏我選擇最簡單的可用模板

00:02:30.350 --> 00:02:33.954
iOS平臺上單頁面應用的模板

00:02:34.388 --> 00:02:39.259
這個模板爲顯示iOS的單視圖應用
提供了必要的代碼

00:02:42.262 --> 00:02:44.531
我們工程命名爲Hello

00:02:45.399 --> 00:02:49.002
如果你有開發者賬戶
你可在這添加賬戶並且選擇你的項目組

00:02:50.204 --> 00:02:53.073
組織的名字就是你就職的公司

00:02:54.308 --> 00:02:55.642
標識符是

00:02:55.709 --> 00:03:00.047
你的組織的名字和你的產品的名字

00:03:00.314 --> 00:03:03.584
這個標識符是你應用的唯一標識

00:03:05.085 --> 00:03:07.754
當你在Xcode中創建了新應用

00:03:08.255 --> 00:03:12.426
你可以選擇使用Swift和
Objective-C作爲開發語言

00:03:12.793 --> 00:03:16.730
我們將選擇Swift
我們的應用是普適的

00:03:16.797 --> 00:03:20.834
那就意味着我們的應用
可以運行在iPhone和iPad上

00:03:23.904 --> 00:03:26.173
當你創建了一個模板

00:03:26.740 --> 00:03:29.309
你需要在你的工程中
配置許多不同的選項

00:03:29.376 --> 00:03:31.745
我們將會選擇單元測試和UI選項

00:03:35.282 --> 00:03:37.818
讓我們把工程保存在文檔文件夾下

00:03:38.185 --> 00:03:41.355
我將點擊“創建Git倉庫”

00:03:41.421 --> 00:03:45.359
我們的項目一開始就
通過版本控制器進行管理

00:03:51.498 --> 00:03:53.600
不錯 這就是我們的工程

00:03:53.901 --> 00:03:56.803
雙擊頂部兩下 會重新調整窗口大小

00:03:58.372 --> 00:04:01.208
這就是Xcode的主窗口

00:04:02.376 --> 00:04:07.414
在左邊的導航區域
有你的許多文件和資源

00:04:08.115 --> 00:04:11.618
中間是你打開文件的編輯區域

00:04:11.685 --> 00:04:14.087
你在導航欄點擊文件的時候

00:04:15.055 --> 00:04:17.457
右邊是實用工具區域

00:04:17.690 --> 00:04:20.027
這個區域所顯示的信息是

00:04:20.093 --> 00:04:23.163
基於你在導航區或者編輯區選擇的內容

00:04:24.531 --> 00:04:27.301
如果Xcode對你來說比較陌生
你可能覺得奇怪

00:04:27.401 --> 00:04:29.770
如何把應用運行在移動設備上？

00:04:31.305 --> 00:04:34.541
你可以點擊運行按鈕運行你的應用

00:04:34.775 --> 00:04:36.176
在主窗口的頂端

00:04:36.610 --> 00:04:37.611
但我們在運行應用前

00:04:37.678 --> 00:04:41.014
讓我解釋一下
當你點擊運行的時候發生了什麼

00:04:43.016 --> 00:04:46.153
當你點擊了運行 你指定了運行的應用

00:04:47.855 --> 00:04:49.656
你要在哪兒運行應用

00:04:53.293 --> 00:04:56.129
在你的工程中 你可以有許多應用

00:04:56.196 --> 00:04:59.333
甚至相同的應用有不同的配置

00:05:00.367 --> 00:05:02.936
規則是如何指定你想運行什麼

00:05:03.003 --> 00:05:05.806
它裏面同樣包含你如何運行應用的信息

00:05:06.373 --> 00:05:10.177
舉例
我有iOS應用和Watch應用

00:05:10.611 --> 00:05:13.614
在這種情況下
我有一個運行iOS應用的規則

00:05:14.047 --> 00:05:15.816
和運行我的手錶應用的規則

00:05:17.551 --> 00:05:19.786
現在呢 在我們的工程中只有一個規則

00:05:19.853 --> 00:05:22.022
這個規則就是Hello
我們已經選定它

00:05:25.225 --> 00:05:28.362
現在 你運行應用到目標平臺

00:05:28.428 --> 00:05:32.666
你在Xcode中選擇的目標平臺
你有兩個選項

00:05:32.999 --> 00:05:35.135
你可以在模擬器中運行你的應用

00:05:35.402 --> 00:05:36.870
或你可在設備上運行你的應用

00:05:37.471 --> 00:05:40.841
模擬器是用來模擬你應用運行的設備

00:05:41.141 --> 00:05:44.144
模擬器對快速和迭代開發是有用的

00:05:44.378 --> 00:05:47.748
當你想獲得你應用的外觀
及如何運作的反饋時

00:05:49.383 --> 00:05:52.953
我們現已選擇
iPhone SE模擬器

00:05:53.754 --> 00:05:55.422
讓我們點擊運行按鈕

00:05:56.256 --> 00:06:01.028
我們的應用就
運行在iPhone SE的模擬器上

00:06:05.599 --> 00:06:07.134
我們的應用已經開始運行了

00:06:08.969 --> 00:06:09.903
它在這兒

00:06:10.037 --> 00:06:13.173
我說過我們選擇的是最簡單的可用模板

00:06:13.240 --> 00:06:14.975
這兒沒有任何東西

00:06:15.042 --> 00:06:18.378
讓我們添加一些功能來使它變得有趣

00:06:19.613 --> 00:06:22.749
我會去點擊停止按鈕停止這個模擬器

00:06:22.816 --> 00:06:23.884
同運行按鈕緊挨着的那個按鈕

00:06:24.885 --> 00:06:28.488
在Xcode中
可以給你的應用添加用戶界面

00:06:28.555 --> 00:06:30.123
可在storyboard中進行添加

00:06:31.825 --> 00:06:34.428
現由於我們是通過模板創建我們的工程

00:06:35.195 --> 00:06:37.197
我們這有兩個
storyboard可用

00:06:37.564 --> 00:06:40.100
分別是啓動屏幕
和主屏幕storyboard

00:06:40.567 --> 00:06:44.838
啓動屏幕storyboard
包含啓動屏幕的用戶界面

00:06:44.905 --> 00:06:46.573
它是第一時間出現的屏幕

00:06:46.640 --> 00:06:48.876
當你首次啓動應用時

00:06:49.009 --> 00:06:51.512
main.storyboard
包含用戶界面

00:06:51.578 --> 00:06:53.113
以及你應用的其他界面

00:06:53.480 --> 00:06:55.582
讓我們打開
main.storyboard

00:06:58.118 --> 00:06:59.386
storyboard中

00:06:59.453 --> 00:07:02.456
有白色背景的畫布

00:07:03.390 --> 00:07:05.492
畫布裏面有場景

00:07:05.559 --> 00:07:09.796
有相應的視圖
它代表了你應用中的一個界面

00:07:10.898 --> 00:07:13.734
爲了便於講解
我儘可能將應用做得簡單

00:07:13.800 --> 00:07:16.837
我想用代碼與界面進行一些交互

00:07:17.337 --> 00:07:21.441
我將添加一個按鈕 當你點擊它時
會在文本框中顯示Hello

00:07:23.677 --> 00:07:27.915
在實用工具的底端是Xcode庫

00:07:27.981 --> 00:07:30.617
比如文件庫和代碼片段庫

00:07:31.218 --> 00:07:34.421
點擊從左數第三個按鈕會進入到對象庫

00:07:34.788 --> 00:07:38.325
包含你能添加到場景中的所有UI元素

00:07:39.660 --> 00:07:43.330
你可以把它們看視爲列表
你無法準確知道它的長度

00:07:43.397 --> 00:07:45.899
你需更多信息才能知道你看到的是什麼

00:07:46.466 --> 00:07:48.435
又或者你可以把它們看作是網格

00:07:50.470 --> 00:07:55.509
我已知道我想在場景中
放置按鈕和標題欄

00:07:56.243 --> 00:07:58.278
我可以使用濾棒

00:07:58.345 --> 00:08:01.882
在實用區域的下方進行按鈕的搜索

00:08:06.587 --> 00:08:10.257
將它拖到場景中
輔助線會幫我們將它居中對齊

00:08:13.560 --> 00:08:15.696
這是我早先提到的實用面板

00:08:16.396 --> 00:08:20.167
讓我們仔細看看在它頂部的檢視面板

00:08:23.403 --> 00:08:27.241
開始的兩個是文件和快速幫助檢視器

00:08:27.441 --> 00:08:32.613
在我們工程中它們始終是可用的
不管你在導航區和編輯區選擇了什麼

00:08:33.212 --> 00:08:35.782
在我的場景中我選擇了按鈕

00:08:36.283 --> 00:08:39.686
其餘的檢視器包含這個按鈕的信息

00:08:40.287 --> 00:08:44.925
例如 我可以點擊屬性檢視器

00:08:46.960 --> 00:08:52.566
獲得按鈕的文本屬性信息
比如大小 字體和顏色

00:08:53.467 --> 00:08:56.003
我點擊屬性檢視器旁邊的大小檢視器

00:08:56.503 --> 00:09:01.775
來查看按鈕的大小和位置信息

00:09:03.110 --> 00:09:06.914
我把按鈕的標題
改爲Say Hello

00:09:07.381 --> 00:09:09.650
我可以在屬性檢視器裏做這些

00:09:10.184 --> 00:09:13.787
但是更簡單點的方法是雙擊按鈕

00:09:14.154 --> 00:09:16.123
輸入我們想顯示的標題

00:09:19.860 --> 00:09:22.129
挺好的 這樣我們在場景中添加了按鈕

00:09:22.930 --> 00:09:25.866
回到過濾條界面搜索文本框

00:09:31.572 --> 00:09:35.108
我拖拽以便其處於按鈕的頂端並且居中

00:09:37.477 --> 00:09:40.047
切換到到屬性檢視器

00:09:40.113 --> 00:09:42.549
或者大小檢視器來配置它的屬性

00:09:42.649 --> 00:09:45.552
但是我喜歡這種方式 先不管它了

00:09:48.422 --> 00:09:52.793
我們需要注意我們的用戶界面沒有指定

00:09:52.860 --> 00:09:56.330
視圖如何根據設備大小進行縮放

00:09:57.631 --> 00:10:00.534
現在 我們看這個場景

00:10:00.601 --> 00:10:04.171
使用的是iPhone 6s模擬器
或者設備的尺寸

00:10:04.738 --> 00:10:05.772
但若我點擊這個按鈕

00:10:06.106 --> 00:10:10.210
我們將可以使用其他設備
比如iPhone SE設備

00:10:11.211 --> 00:10:13.113
我們可以看到文本框和按鈕

00:10:13.180 --> 00:10:15.482
實際上它們並沒有按照我們設想的居中

00:10:17.618 --> 00:10:19.920
讓我們切換到iPhone 6s

00:10:20.420 --> 00:10:23.390
讓我們使用自動佈局添加一些限制

00:10:23.790 --> 00:10:26.627
來爲用戶界面如何進行縮放設置規則

00:10:29.429 --> 00:10:33.267
我們可以使用位於畫布底部
的自動佈局按鈕設置規則

00:10:34.468 --> 00:10:35.502
對於按鈕來說

00:10:35.836 --> 00:10:38.972
我想讓它在水平和
垂直方向上進行居中顯示

00:10:39.840 --> 00:10:42.342
點擊對齊按鈕

00:10:44.244 --> 00:10:47.381
對按鈕進行設置以便它在容器的
水平和垂直方向上是居中的

00:10:49.917 --> 00:10:51.952
在場景中我們可以看到添加的限定條件

00:10:53.320 --> 00:10:58.325
對於文本框來說
我也想讓它相對於視圖是水平對齊的

00:10:59.293 --> 00:11:03.664
切回到對齊按鈕
在容器中檢查水平對齊選項

00:11:05.432 --> 00:11:07.534
當我們做完上述操作
添加的限制變成紅色

00:11:07.601 --> 00:11:09.403
意味着有錯誤發生

00:11:10.137 --> 00:11:12.773
在文檔大綱的頂端

00:11:12.873 --> 00:11:17.010
有一個箭頭將給我們指示錯誤
告訴我們錯的地方

00:11:17.244 --> 00:11:21.648
可以看到我們沒爲文本框設置y的位置

00:11:23.884 --> 00:11:28.288
我實際上並不關心
這個文本框在y方向上位置

00:11:28.455 --> 00:11:30.657
我只想讓它位於按鈕的頂部

00:11:31.859 --> 00:11:35.462
我能做的是點擊這個圖釘按鈕

00:11:38.398 --> 00:11:40.701
哎呀 我們沒有在場景中選中文本框

00:11:41.068 --> 00:11:44.605
一旦你選中了文本框
你可以點擊圖釘按鈕

00:11:45.305 --> 00:11:48.642
把文本框的底部固定在按鈕的頂部

00:11:50.277 --> 00:11:52.880
這就是我們添加的限制 它是藍色的

00:11:54.114 --> 00:11:55.749
我將切回到模擬器

00:11:55.816 --> 00:11:57.851
來看下是否像我們預想的那樣顯示了

00:12:04.725 --> 00:12:07.394
這就是我們的用戶界面
看起來相當不錯

00:12:07.861 --> 00:12:10.697
如果我旋轉設備將會發生什麼呢？

00:12:11.431 --> 00:12:15.402
使用模擬器 通過點擊
硬件菜單模擬旋轉

00:12:16.803 --> 00:12:18.772
旋轉到左邊或者旋轉到右邊

00:12:19.106 --> 00:12:22.342
那就旋轉到左邊吧 仍然是居中顯示的

00:12:23.277 --> 00:12:27.514
模擬器的特別之處在於
它可以模擬一系列不同的的操作

00:12:27.648 --> 00:12:31.852
旋轉 搖晃 甚至指定位置

00:12:32.619 --> 00:12:36.023
我建議你自己運行下模擬器做些操作

00:12:36.089 --> 00:12:38.625
因爲當你想做快速測試時
用模擬器還是比較方便的

00:12:38.692 --> 00:12:40.594
你又不想使用真機進行測試

00:12:42.429 --> 00:12:45.999
我們已擺放好用戶界面了
我們需要添加一些代碼

00:12:46.200 --> 00:12:50.103
以便點擊按鈕時
文本框會變成say Hello

00:12:51.505 --> 00:12:52.940
停止模擬器

00:12:54.208 --> 00:12:57.010
談論一些關於場景和視圖控制器的內容

00:12:57.744 --> 00:13:02.416
每個在storyboard中的場景
都和一些視圖控制器類關聯

00:13:03.083 --> 00:13:05.719
這些類包含一些控制視圖的代碼

00:13:07.221 --> 00:13:09.122
在應用中僅有一個場景

00:13:09.890 --> 00:13:13.660
在我們導航欄裏
僅有一個視圖控制類文件

00:13:14.294 --> 00:13:20.367
我可以推斷這個場景關聯
這個Swift視圖控制類

00:13:21.401 --> 00:13:26.607
但是有多個場景在應用中會怎麼樣呢
會有多個視圖控制器文件？

00:13:26.740 --> 00:13:30.110
我如何知道哪個場景對應
哪個視圖控制器文件呢？

00:13:31.445 --> 00:13:34.348
當你在storyboard中
選擇一個場景的時候

00:13:34.882 --> 00:13:37.417
你可以點擊身份鑑別檢視器

00:13:37.584 --> 00:13:39.486
身份鑑別檢視器和屬性檢視器是緊挨着

00:13:39.853 --> 00:13:42.523
它實際上是列出了場景引用的類

00:13:43.023 --> 00:13:46.159
現在我們可以確定
我們需要把代碼放在哪兒

00:13:49.696 --> 00:13:54.434
我需要顯示storyboard文件
和我們的視圖控制器文件並排顯示

00:13:55.335 --> 00:13:56.570
我可以這樣做

00:13:56.837 --> 00:14:01.208
我可以在主窗口的頂端點擊編輯助手

00:14:04.845 --> 00:14:08.215
它看起來有點窄 我將留出一點空間來

00:14:08.849 --> 00:14:13.687
通過點擊這兒的按鈕隱藏文檔大綱

00:14:15.189 --> 00:14:17.558
並且隱藏實用區域

00:14:19.326 --> 00:14:20.894
通過點擊這個面板

00:14:23.163 --> 00:14:26.567
需要注意的是
那個條塊在我們編輯區的頂部

00:14:26.633 --> 00:14:30.304
可以叫它跳轉條塊
它包含了許多有用的信息

00:14:30.370 --> 00:14:36.043
關於文件中的函數甚至文件本身

00:14:37.044 --> 00:14:39.146
編輯助手的特別之處是

00:14:39.279 --> 00:14:43.417
它知道哪個文件

00:14:43.483 --> 00:14:46.153
同我在主編輯區打開的文件有關聯

00:14:46.587 --> 00:14:49.022
會在編輯助手中爲我打開相應的文件

00:14:49.289 --> 00:14:50.257
例如

00:14:50.324 --> 00:14:53.994
如果我們在主編輯區
打開用Swift編寫的視圖控制器

00:14:54.061 --> 00:14:57.264
編輯助手會爲視圖控制器類
打開關聯的界面文件

00:14:58.498 --> 00:15:00.801
另一個編輯助手很酷的功能是

00:15:01.101 --> 00:15:05.639
你可以更改實際的文件關聯

00:15:06.206 --> 00:15:09.343
通過選擇位於頂部的跳轉條

00:15:09.676 --> 00:15:11.478
可以更改爲你想關聯到的任何文件

00:15:11.612 --> 00:15:18.619
例如 你可以更改爲它的相鄰文件
編輯助手會打開繼承自基類的所有文件

00:15:22.856 --> 00:15:25.526
讓我們切回到
main.storyboard

00:15:26.527 --> 00:15:28.495
通過使用跳轉條塊的返回箭頭

00:15:32.032 --> 00:15:35.002
這樣我們就看到了
視圖控制器類和storyboard

00:15:35.068 --> 00:15:39.540
我們需要在我們的類中
創建按鈕和文本框的引用

00:15:42.442 --> 00:15:44.011
我可以這樣做

00:15:44.678 --> 00:15:49.283
選中我想選中的UI元素
這樣我們就選中它了

00:15:49.349 --> 00:15:53.520
按住Control鍵從場景中
拖動控件到我們的類中

00:15:55.122 --> 00:15:57.157
我希望控件有一個動作

00:15:57.224 --> 00:16:02.529
意味着當我點擊這個按鈕時
會有所響應

00:16:02.963 --> 00:16:05.499
給它命名爲Say Hello

00:16:09.102 --> 00:16:10.838
讓我們對文本框做相同的事情

00:16:13.173 --> 00:16:14.875
實際上我想讓它成爲插槽變量

00:16:15.075 --> 00:16:17.578
意味着它是我可以操作的引用

00:16:18.312 --> 00:16:21.415
讓我們給它命名爲
Hello Label

00:16:26.753 --> 00:16:29.056
現在我們就有了元素的引用

00:16:29.756 --> 00:16:33.861
我們需要添加一些操作文本框的
代碼到動作

00:16:35.062 --> 00:16:39.867
我認爲文本框有一個屬性我們可以使用
但是我又不是十分的確定

00:16:40.300 --> 00:16:44.638
Xcode中使用Option+點擊
還有Command+點擊很便捷

00:16:45.739 --> 00:16:48.342
當我們爲文本框創建引用的時候

00:16:48.509 --> 00:16:51.478
它被聲明和實例化
爲UI label類

00:16:52.446 --> 00:16:57.551
我可以按住Option
在文本框的類名上點擊來獲得幫助信息

00:16:58.051 --> 00:17:01.088
關於這個類是做什麼的以及怎樣訪問它

00:17:03.090 --> 00:17:08.462
按住Command 在UI文本框上
點擊界面會跳轉到它聲明的地方

00:17:09.896 --> 00:17:12.833
假如我僅僅是想查詢文檔

00:17:13.534 --> 00:17:14.902
我可以跳轉到幫助

00:17:16.470 --> 00:17:18.571
文檔和API參考

00:17:20.307 --> 00:17:23.777
並且查找類 搜索UI文本框

00:17:24.411 --> 00:17:29.750
會有簡短描述 概覽
還會列舉類的所有屬性

00:17:30.450 --> 00:17:34.054
這裏表明文本框有文本屬性

00:17:35.088 --> 00:17:38.525
我們可以使用這個屬性顯示Hello

00:17:40.694 --> 00:17:44.464
關閉文檔切換到視圖控制器文件

00:17:44.898 --> 00:17:47.401
點擊跳轉條塊上的返回箭頭

00:17:49.703 --> 00:17:50.704
添加一些代碼

00:17:51.572 --> 00:17:55.209
我想操作Hello Label
我會在這兒鍵入代碼

00:17:56.076 --> 00:18:00.514
鍵入代碼
Xcode會提供代碼自動補全的建議

00:18:00.948 --> 00:18:02.816
這是Xcode的代碼補全

00:18:04.184 --> 00:18:05.986
我可以按Tab鍵進行自動補全

00:18:07.521 --> 00:18:12.059
我可以訪問文本屬性
我可以自動補全它

00:18:13.126 --> 00:18:15.662
設置文本的屬性爲Hello

00:18:17.564 --> 00:18:18.632
這裏有一些代碼

00:18:19.132 --> 00:18:20.067
有一些引用

00:18:20.133 --> 00:18:25.072
切回到模擬器中
看這些代碼能否正常工作

00:18:30.711 --> 00:18:32.045
應用正在啓動

00:18:33.280 --> 00:18:36.250
點擊按鈕 顯示發生了變化

00:18:36.517 --> 00:18:37.885
非常酷 對不對？

00:18:42.789 --> 00:18:43.624
對的

00:18:46.193 --> 00:18:49.463
現在你知道如何在Xcode中
創建新的工程

00:18:49.530 --> 00:18:52.999
如何添加簡單的功能
如何將應用運行在模擬器中

00:18:53.500 --> 00:18:58.071
你將通過已經存在的工程
學習如何使用Xcode

00:18:58.138 --> 00:19:00.807
那些工程裏的東西
比我們演示的按鈕和文本框更復雜

00:19:01.842 --> 00:19:06.213
加快一點速度
我和Rick知道基本原理

00:19:06.280 --> 00:19:08.448
我們已經實現了一些功能

00:19:09.049 --> 00:19:11.885
我將把Rick請上臺來

00:19:11.952 --> 00:19:14.955
來給大家演示
Xcode開發流程中的剩餘部分

00:19:23.597 --> 00:19:24.464
謝謝你Najla

00:19:25.232 --> 00:19:27.701
在過去的一週
我們構建了一個小型應用

00:19:27.768 --> 00:19:29.903
是一個追蹤地震的應用

00:19:29.970 --> 00:19:32.606
我們可以看到最近發生地震的地方

00:19:33.207 --> 00:19:35.776
我們基本編寫完成了
當然 我們編寫了單元測試

00:19:35.843 --> 00:19:37.778
以便我們可以確定代碼能正常工作

00:19:37.845 --> 00:19:40.113
但我認爲
我們還有一些問題需要進行修復

00:19:40.647 --> 00:19:45.152
讓我們看一下並且深入到
Xcode的調試器和單元測試中

00:19:47.087 --> 00:19:50.257
開始前
我需要從代碼控制系統中分檢出代碼

00:19:50.858 --> 00:19:54.661
Xcode支持Git和
Subversion源代碼管理工具

00:19:55.295 --> 00:19:59.666
爲了檢出工程
我需點擊Xcode的源代碼管理菜單

00:19:59.766 --> 00:20:01.935
選擇檢出命令

00:20:03.170 --> 00:20:07.708
這是Xcode給出的檢出界面
我可以輸入倉庫的路徑

00:20:07.774 --> 00:20:13.347
我們倉庫的路徑是
example.com/repos

00:20:13.413 --> 00:20:16.016
我們的工程叫作Quakenator

00:20:17.351 --> 00:20:18.418
我將點擊下一步

00:20:18.752 --> 00:20:19.953
Xcode讓我輸入

00:20:20.020 --> 00:20:22.523
倉庫的授權憑證

00:20:23.490 --> 00:20:24.358
額

00:20:28.061 --> 00:20:30.998
Xcode會詢問我將工程檢出到哪兒

00:20:31.064 --> 00:20:32.900
放在文檔文件夾下就好了

00:20:33.100 --> 00:20:34.168
點擊下載

00:20:34.234 --> 00:20:36.370
Xcode
會從代碼管理系統中檢出代碼

00:20:36.436 --> 00:20:37.804
我們會用檢出的代碼做演示

00:20:38.272 --> 00:20:39.806
工程完全檢出來了

00:20:39.873 --> 00:20:42.609
你會注意到代碼管理菜單有許多選項

00:20:42.676 --> 00:20:44.311
後面我們會使用它們

00:20:45.212 --> 00:20:47.948
開始前 我們看一下單元測試

00:20:48.315 --> 00:20:50.884
我們可以在左邊瀏覽工程的結構

00:20:50.951 --> 00:20:54.621
嘗試着手動查找測試文件
但是會有更好的途徑

00:20:55.422 --> 00:20:59.426
在導航區域的頂部
有許多不同的導航按鈕

00:20:59.493 --> 00:21:03.063
這些按鈕會用不同的視圖
顯示你工程中的內容

00:21:04.031 --> 00:21:06.466
查找面板就是衆多視圖中的一個

00:21:06.533 --> 00:21:10.771
使用它我可以查找工程中文本類的內容

00:21:10.838 --> 00:21:15.008
例如 我們知道所有的測試方法
都以測試開頭

00:21:15.242 --> 00:21:20.514
我可以查找以測試開頭的內容

00:21:20.914 --> 00:21:22.182
點擊返回

00:21:22.249 --> 00:21:26.787
在這兒Xcode會在工程中
找到所有以測試開頭的內容

00:21:26.854 --> 00:21:29.823
包括測試方法還有些註釋和其他的合輯

00:21:30.757 --> 00:21:33.560
挺棒的 做一些更智能的事情

00:21:33.794 --> 00:21:37.798
如果我想查找我的測試方法
我能找到一些定義

00:21:37.865 --> 00:21:40.701
像我的測試方法在哪兒定義

00:21:41.168 --> 00:21:46.940
再查找以測試開頭的內容
這兒只找到測試的方法

00:21:47.708 --> 00:21:49.276
查找面板是個不錯的方法

00:21:49.343 --> 00:21:51.144
查找工程裏面的內容

00:21:51.445 --> 00:21:54.248
我們按特性查找單元測試的內容

00:21:54.314 --> 00:21:58.352
Xcode給我們提供了更好的方法
那就是測試導航面板

00:21:59.653 --> 00:22:04.024
測試導航面板中 Xcode自動列出
每一個單元測試和UI測試

00:22:04.091 --> 00:22:07.027
性能測試這些內容是
Xcode在你的工程中找到的

00:22:07.828 --> 00:22:10.631
其中有一些是灰色的比如UI測試

00:22:10.931 --> 00:22:14.935
那是因爲在當前的規則下
這些測試是不會運行的

00:22:15.269 --> 00:22:18.272
當我運行UI測試的時候
我會使用另外一個規則

00:22:19.206 --> 00:22:21.141
剩下的測試內容以黑色顯示

00:22:21.241 --> 00:22:24.845
那就意味着當我進行測試的時候
這些測試都是可以運行的

00:22:25.078 --> 00:22:26.747
讓我們儘快試一下

00:22:27.681 --> 00:22:29.983
在產品菜單下有測試的選項

00:22:30.050 --> 00:22:32.119
同下面其它四個選項是一樣的

00:22:32.753 --> 00:22:35.189
點擊運行 應用會在調試器中運行

00:22:35.656 --> 00:22:37.357
點擊測試 將會運行測試

00:22:38.325 --> 00:22:41.895
點擊配置 將會在容器中運行應用
這樣可以測試應用的性能

00:22:42.629 --> 00:22:44.898
點擊分析
運行Xcode靜態代碼分析

00:22:44.965 --> 00:22:47.634
會捕捉到我有可能遺漏的問題

00:22:48.101 --> 00:22:52.506
最後存檔會以發佈的方式
構建應用並把應用存檔

00:22:52.573 --> 00:22:55.809
然後我可以把它發佈給
測試者或放到App Store裏

00:22:55.876 --> 00:22:59.446
爲未來崩潰日誌解析或者符號化做保存

00:22:59.880 --> 00:23:01.915
這個菜單選項將會變得可以點擊

00:23:01.982 --> 00:23:04.384
一旦我選擇了可以運行的設備

00:23:05.819 --> 00:23:08.622
我將選擇一個進行測試
當我開始測試的時候

00:23:08.689 --> 00:23:11.825
我希望大家注意窗口活動區域的頂部

00:23:11.892 --> 00:23:13.994
因爲它會告訴你Xcode在做什麼

00:23:14.528 --> 00:23:17.931
我點擊了測試
會看到Xcode正在構建應用

00:23:18.131 --> 00:23:20.868
然後將會構建測試代碼 最後就會運行

00:23:20.934 --> 00:23:23.070
看起來我們好像有一個編譯錯誤

00:23:24.605 --> 00:23:26.173
當編譯錯誤產生

00:23:27.341 --> 00:23:30.244
一個標誌會出現在活動區域的右手邊

00:23:30.310 --> 00:23:31.745
表明那兒有一個問題

00:23:31.979 --> 00:23:35.382
Xcode會自動切換到
左邊的問題導航欄

00:23:36.116 --> 00:23:39.219
這種做法 像自動切換到導航

00:23:39.286 --> 00:23:41.154
當問題發生時顯示問題

00:23:41.722 --> 00:23:43.690
像這種行爲
可在Xcode中進行配置

00:23:43.757 --> 00:23:46.126
你可以學着
讓它按照你想要的方式來工作

00:23:46.193 --> 00:23:49.062
你有可能想對各式各樣的行爲進行配置

00:23:49.530 --> 00:23:52.199
你可以在Xcode的
行爲偏好裏進行配置

00:23:52.766 --> 00:23:56.203
如果你選擇編輯行爲
Xcode會給展示一個偏好表格

00:23:56.270 --> 00:23:58.071
讓你對各式各樣的行爲進行配置

00:23:58.138 --> 00:24:02.509
當我們進行構建的時候出了問題
我們顯示問題面板

00:24:03.043 --> 00:24:05.112
當測試生成出了問題比如測試失敗

00:24:05.179 --> 00:24:07.247
我們顯示測試導航面板 諸如此類

00:24:07.648 --> 00:24:09.449
你想在Xcode中獲得好的體驗

00:24:09.516 --> 00:24:12.920
想讓它按照你的工作流程開始工作

00:24:12.986 --> 00:24:14.888
我建議你對Xcode的偏好進行設置

00:24:16.723 --> 00:24:19.593
讓我們看一下發生了什麼編譯錯誤

00:24:20.027 --> 00:24:23.463
我在問題面板上點擊我們的問題

00:24:23.664 --> 00:24:25.699
它將跳轉到我們的代碼中

00:24:25.766 --> 00:24:27.634
引起編譯錯誤的地方

00:24:28.669 --> 00:24:32.005
Xcode在錯誤代碼的右邊
顯示發生了什麼錯誤

00:24:32.072 --> 00:24:34.575
它看起來像數據源對象

00:24:34.641 --> 00:24:37.945
沒有一個屬性或者方法的
名爲Assorted Quakes

00:24:38.745 --> 00:24:41.048
我知道有Assorted
Quakes屬性

00:24:41.148 --> 00:24:43.717
只是昨天我對那個屬性進行了重命名

00:24:43.851 --> 00:24:46.153
我猜因爲我忘記了
在單元測試中對屬性重命名

00:24:46.220 --> 00:24:49.189
讓我們想想如何找出這個方法的新名字

00:24:50.524 --> 00:24:53.694
開始對代碼進行追蹤
按住Command鍵

00:24:54.161 --> 00:24:56.029
點擊數據源對象

00:24:56.129 --> 00:24:58.599
頁面將會跳轉到變量定義的地方

00:24:58.665 --> 00:25:02.002
我們可以看到我將它初始化爲
QuakeDataSource

00:25:02.870 --> 00:25:05.072
我們再一次按住Command鍵

00:25:05.405 --> 00:25:07.140
在QuakeDataSource上進行點擊

00:25:07.207 --> 00:25:10.377
然後會跳轉到
QuakeDataSource定義的地方

00:25:11.111 --> 00:25:14.248
我將開始滾動文件查找新添加的屬性

00:25:14.515 --> 00:25:15.649
但是有一個更好的方法

00:25:17.117 --> 00:25:20.521
代碼編輯頂部的跳轉條塊
顯示了每一個方法

00:25:20.587 --> 00:25:24.291
Xcode根據文件中
符號出現的先後順序展示

00:25:25.058 --> 00:25:26.894
有好幾種方法可以達到類似的效果

00:25:26.960 --> 00:25:29.363
如果當它彈出時
我按下Command鍵

00:25:29.463 --> 00:25:31.431
Xcode會根據字母順序進行顯示

00:25:31.498 --> 00:25:33.333
而不是出現的順序

00:25:34.468 --> 00:25:39.606
或者我可以進行輸入
Xcode會對列表進行過濾

00:25:39.706 --> 00:25:43.277
曾被命名Sorted Quakes
或許現名依然帶有Quankes

00:25:43.544 --> 00:25:46.413
我將輸入Quakes
然後這裏會顯示屬性和方法

00:25:46.480 --> 00:25:47.981
包含Quakes字符屬性和方法

00:25:48.348 --> 00:25:49.883
裏面有一orderedQuakes

00:25:49.950 --> 00:25:51.952
感覺它應該是我們要找的屬性

00:25:52.686 --> 00:25:57.191
通過這次查找以後
你再查找別的內容時 都會比較容易了

00:25:57.457 --> 00:26:01.428
如果我簡單輸入OQ
Xcode會找到orderedQuakes

00:26:01.495 --> 00:26:05.232
因爲字母O和Q
在屬性的名字上依次出現

00:26:06.967 --> 00:26:08.702
我將向你展示最後的一些內容

00:26:09.069 --> 00:26:10.504
或許你已注意到我有兩個標題

00:26:10.571 --> 00:26:13.440
這兒的TODO註釋
提醒我需要添加更多的性能測試

00:26:13.774 --> 00:26:16.510
有頭部將屬性和方法分開

00:26:17.044 --> 00:26:20.614
你可以進行配置
將指定的註釋加入你的源代碼中

00:26:20.681 --> 00:26:24.451
就像TODO和MARK註釋那樣
有一個標題名字

00:26:24.952 --> 00:26:27.221
使得彈出的跳轉欄

00:26:27.287 --> 00:26:30.224
按照你設定的方式
顯示使得代碼間跳轉更容易

00:26:31.592 --> 00:26:33.060
一切就緒 讓我們查找該屬性

00:26:33.126 --> 00:26:35.729
我將再次鍵入OQ
並且選擇orderedQuakes

00:26:36.129 --> 00:26:37.598
我們找到它了

00:26:37.898 --> 00:26:40.100
讓我們繼續進行然後複製方法的名字

00:26:41.001 --> 00:26:44.471
使用返回箭頭按鈕
以便跳回我們的測試文件

00:26:45.439 --> 00:26:48.609
將新的方法名字粘貼到這裏

00:26:48.809 --> 00:26:50.143
當我做以上操作時 我希望你注意

00:26:50.210 --> 00:26:52.546
位於代碼編輯區左側的錯誤標記

00:26:52.813 --> 00:26:54.515
並且錯誤在問題導航欄也有顯示

00:26:55.682 --> 00:26:58.719
粘貼正確的名字到這裏
然後兩個地方的錯誤標識消失

00:26:59.019 --> 00:27:02.656
因爲問題導航欄會對
你所做的修改進行實時追蹤

00:27:02.789 --> 00:27:05.459
所以我們可以在你修改代碼時
看到代碼的狀態

00:27:05.526 --> 00:27:08.996
不用等到構建時 才能知道代碼的對錯

00:27:10.764 --> 00:27:15.035
好了 我們修復了編譯錯誤
讓我們再一次進行測試

00:27:15.903 --> 00:27:19.006
當我做完上述操作
Xcode會編譯我修改後的代碼

00:27:19.339 --> 00:27:21.975
Xcode正準備
將我們的測試運行在模擬器上

00:27:22.042 --> 00:27:24.111
你可以從頂部的活動去觀察到

00:27:24.912 --> 00:27:26.213
看起來我們的測試在運行

00:27:26.280 --> 00:27:28.749
讓我們切回測試導航欄來看發生了什麼

00:27:29.683 --> 00:27:33.053
從這裏的微小變化
可以看出測試正在運行

00:27:33.120 --> 00:27:34.988
看起來像是性能測試

00:27:35.189 --> 00:27:36.223
那會持續一會兒

00:27:36.290 --> 00:27:39.126
讓我們點擊停止按鈕回頭看下

00:27:40.327 --> 00:27:42.062
性能測試是有必要的

00:27:42.162 --> 00:27:44.731
但是我需要對
我的單元測試進行迭代修改

00:27:44.798 --> 00:27:47.734
我不想每次都等待性能測試完成

00:27:47.935 --> 00:27:50.304
我們需要配置不同的規則

00:27:50.370 --> 00:27:52.339
不會每次修改都進行性能測試

00:27:53.507 --> 00:27:54.441
爲了配置規則

00:27:54.508 --> 00:27:57.778
彈出規則菜單選擇編輯規則

00:27:59.146 --> 00:28:01.548
Xcode會顯示出規則編輯列表

00:28:01.915 --> 00:28:03.684
你可以看到在左邊有一個標籤頁

00:28:03.750 --> 00:28:06.019
對應着五個規則的動作

00:28:06.420 --> 00:28:08.255
還有頂部的構建標籤

00:28:08.388 --> 00:28:11.592
讓我們選擇哪一個目標
將要按照這個規則構建

00:28:11.692 --> 00:28:14.561
以便在目標的產品上執行這些操作

00:28:15.996 --> 00:28:19.666
就像運行操作
我需要選擇哪個執行文件去運行

00:28:19.733 --> 00:28:20.968
該例中 就是我的應用

00:28:21.602 --> 00:28:24.972
我應當傳遞命令行參數和環境變量

00:28:25.639 --> 00:28:29.042
像Xcode功能強大的地址追蹤功能

00:28:29.109 --> 00:28:30.844
會幫你找出難題的成因

00:28:31.111 --> 00:28:35.182
由於這些診斷是在運行時進行的

00:28:35.249 --> 00:28:39.152
對於已經發布存檔的應用來說
沒有任何影響

00:28:39.219 --> 00:28:43.557
所以你不用擔心這些診斷的幹擾
你將應用發佈到App Store

00:28:44.791 --> 00:28:46.994
接下來進行測試操作並且你會看到

00:28:47.060 --> 00:28:49.530
測試將會根據我配置的規則運行

00:28:50.163 --> 00:28:51.632
在我改變規則之前

00:28:51.732 --> 00:28:54.635
我要做一些我編輯規則時經常會做的事

00:28:54.701 --> 00:28:58.739
拷貝一份規則然後這份拷貝上進行編輯

00:28:59.439 --> 00:29:01.308
因爲我仍想保留原先的規則

00:29:01.375 --> 00:29:03.243
原先的規則可以進行性能測試

00:29:03.310 --> 00:29:05.179
因爲我真的想跑一下我的性能測試

00:29:05.445 --> 00:29:08.582
我只想要一個能運行單元測試的規則

00:29:09.816 --> 00:29:12.653
所以做了上面的操作
然後選擇複製規則按鈕

00:29:13.387 --> 00:29:15.556
Xcode會讓我們對新規則重命名

00:29:15.622 --> 00:29:18.525
我們將它命名爲
QuakenatorNoPerf

00:29:19.593 --> 00:29:23.030
現在我們可以進行測試操作了
找到我們的性能測試

00:29:23.163 --> 00:29:25.232
取消複選框來禁止進行性能測試

00:29:26.466 --> 00:29:30.904
在此你其實可以禁止這些測試前提是

00:29:30.971 --> 00:29:33.974
有測試失敗了而且你沒有時間處理

00:29:34.975 --> 00:29:37.411
好了 我們完成了新規則的配置工作

00:29:37.477 --> 00:29:39.313
在我開始進行測試前

00:29:39.379 --> 00:29:41.348
我會給大家展示更實用的東西

00:29:41.415 --> 00:29:43.550
那就是如何管理我們的規則

00:29:44.618 --> 00:29:47.020
管理規則的按鈕在這個表格的底部

00:29:47.287 --> 00:29:49.690
按下後
Xcode會顯示規則的管理界面

00:29:49.923 --> 00:29:53.460
在此Xcode顯示工程中的所有規則

00:29:54.795 --> 00:29:56.630
我要提醒大家需要注意的是

00:29:56.697 --> 00:29:58.832
在右邊的共享複選框列

00:29:59.666 --> 00:30:01.001
如果一個規則是共享的

00:30:01.168 --> 00:30:04.037
假設你也將規則提交到了
源代碼管理系統

00:30:04.304 --> 00:30:08.342
當你的工作夥伴使用這個工程的時候
他們也會得到相同的規則

00:30:08.809 --> 00:30:10.844
你或者你工作夥伴做的任何更改

00:30:11.078 --> 00:30:13.647
假設你將這些更改提交到了
源代碼控制系統

00:30:13.814 --> 00:30:15.549
這些更改會和你的工作夥伴共享

00:30:15.616 --> 00:30:18.285
這樣使得配置特定的規則變得十分容易

00:30:18.352 --> 00:30:21.321
對於你想讓每個人使用規則
和同工作夥伴分享規則來說

00:30:22.656 --> 00:30:25.325
如果我的工作夥伴也想只運行單元測試

00:30:25.392 --> 00:30:27.027
不運行性能測試

00:30:27.094 --> 00:30:29.062
我就可以同他們分享我的新規則

00:30:30.397 --> 00:30:31.765
好了 我們已完成這些操作

00:30:31.832 --> 00:30:34.801
讓我們切回然後再一次運行測試

00:30:38.405 --> 00:30:40.307
這是在模擬器中
運行單元測試的準備工作

00:30:41.008 --> 00:30:43.544
附加到測試 測試正在運行

00:30:43.777 --> 00:30:46.713
在左邊的測試導航面板上你可以看到

00:30:46.813 --> 00:30:50.017
我已經通過了大多數的測試
但是我有一個測試失敗了

00:30:51.285 --> 00:30:53.287
如果我想看看最近的時間點發生了什麼

00:30:53.353 --> 00:30:56.023
我可以在Xcode的報告導航欄
找到這些信息

00:30:57.858 --> 00:31:01.895
報告導航欄顯示了
我進行的每一步操作的日誌

00:31:02.062 --> 00:31:05.132
日誌按原先進行測試的規則進行分組

00:31:05.799 --> 00:31:10.070
這兒顯示在我進行測試時
我執行了自動構建

00:31:10.137 --> 00:31:11.939
然後我請求進行測試操作

00:31:13.073 --> 00:31:16.410
如果我選擇了構建的日誌
然後調整過濾器顯示所有的日誌

00:31:16.677 --> 00:31:18.946
我看到Xcode執行的每一步命令

00:31:19.012 --> 00:31:22.049
構建應用和測試的命令

00:31:23.483 --> 00:31:29.056
若選擇測試的日誌
Xcode會顯示每個測試和其狀態

00:31:29.122 --> 00:31:32.659
還可以展開它去查找測試失敗的消息

00:31:32.926 --> 00:31:34.728
在該實例中
我測試中的一個斷言失敗

00:31:34.795 --> 00:31:37.264
因爲一個地震的等級超過了限定大小

00:31:38.832 --> 00:31:42.302
我把鼠標移到測試中的一個上面
我們會看到一個跳轉箭頭

00:31:42.836 --> 00:31:45.806
如果我點擊箭頭
Xcode在右邊顯示失敗的測試代碼

00:31:47.207 --> 00:31:49.476
你可以看到我在哪裏對測試進行了聲明

00:31:49.576 --> 00:31:51.812
在測試方法代碼的左邊有一個標識

00:31:51.879 --> 00:31:54.047
表明那個就是測試失敗的方法

00:31:55.282 --> 00:31:57.751
如果我繼續向下滾動
可以發現導致測試失敗的代碼

00:31:58.285 --> 00:32:01.588
這兒有一個檢查測試數據範圍的斷言

00:32:01.655 --> 00:32:06.860
或者地震的大小
看起來範圍檢查失敗了

00:32:06.927 --> 00:32:08.161
其實這些操作貌似挺簡單

00:32:08.228 --> 00:32:11.031
應當有一個較大值的時候
程序卻給出了一個較小的值

00:32:11.098 --> 00:32:13.867
因爲我對給出的正數值範圍進行了檢查

00:32:13.934 --> 00:32:15.636
在此我應當對測試用例進行修復

00:32:16.837 --> 00:32:19.940
再次運行測試看看我們是否修復了它

00:32:20.240 --> 00:32:25.812
但是由於我在失敗的測試上反覆修改
有一個更快完成所有的測試的方法

00:32:25.946 --> 00:32:27.681
我可以僅僅運行失敗的測試

00:32:28.482 --> 00:32:32.686
爲了那樣做
我轉到測試導航欄並把鼠標移動測試上

00:32:32.853 --> 00:32:36.023
當我那樣做的時候
你看到這個標誌變成了一個小播放按鈕

00:32:36.523 --> 00:32:40.494
該按鈕可僅僅運行失敗的測試
或我只運行這些測試中的一個

00:32:41.161 --> 00:32:43.530
或者如果我不想切回測試導航欄

00:32:43.664 --> 00:32:45.966
我甚至可以從左邊代碼編輯區運行測試

00:32:46.066 --> 00:32:49.536
只是把鼠標移到
測試方法左邊的失敗標誌上

00:32:49.603 --> 00:32:51.505
然後播放按鈕就會出現

00:32:52.639 --> 00:32:53.774
現在我們點擊這個按鈕

00:32:54.141 --> 00:32:58.045
構建我們的測試然後再次運行測試

00:33:00.380 --> 00:33:03.550
我們又運行了一次測試
然而結果是我們的測試依舊失敗

00:33:03.617 --> 00:33:05.118
所以一定還有其他問題

00:33:05.752 --> 00:33:06.587
我接着向下翻

00:33:07.788 --> 00:33:10.390
我看到每一個地震數據

00:33:10.457 --> 00:33:13.727
有一個明顯的標識
形象化標識着地震的量級

00:33:13.994 --> 00:33:15.395
對我們測試的地震數據來說

00:33:15.462 --> 00:33:18.432
我們只是保證了
每一個地震有一個形象化的標識

00:33:18.498 --> 00:33:21.668
但是他們之中有一個標識是nil
所以就是標識數據丟失了

00:33:22.803 --> 00:33:25.138
這不像是我測試代碼的問題

00:33:25.205 --> 00:33:27.774
可能在新建地震數據對象時出了問題

00:33:27.841 --> 00:33:31.512
我將跳轉到代碼裏面
仔細看那裏發生了什麼

00:33:32.713 --> 00:33:36.049
我將給大家展示一些
在Xcode中瀏覽代碼的方法

00:33:36.116 --> 00:33:40.087
但是我將展示給大家的是
最實用的導航手勢

00:33:41.154 --> 00:33:43.590
在Xcode的文件菜單中
有一個命令

00:33:44.057 --> 00:33:46.293
唔... 快速打開

00:33:46.860 --> 00:33:49.596
這是一個鍵盤的快捷鍵 你一定要記住

00:33:49.663 --> 00:33:52.699
Command+Shift+O
你會想一直使用該快捷鍵的

00:33:53.700 --> 00:33:57.538
如果我選擇快速打開
會在窗口的中央顯示一個文本框

00:33:57.938 --> 00:34:00.908
我可以在這裏進行鍵入查找所有標識

00:34:00.974 --> 00:34:03.844
像方法的名字 在我們的工程中

00:34:03.911 --> 00:34:06.647
同樣也有Apple的API標識

00:34:06.914 --> 00:34:09.216
不管你使用它搜索任何東西
都是十分簡單的

00:34:09.283 --> 00:34:12.418
不論搜索的內容在我們的代碼中
還是在框架的代碼中

00:34:13.453 --> 00:34:15.188
這個工具十分好 支持模糊查詢

00:34:15.255 --> 00:34:18.192
但是我也同樣需要準確知道
我查詢內容的名字

00:34:18.525 --> 00:34:22.596
在這個例子中 地震對象在類似於
fetchesquakes方法中創建

00:34:22.663 --> 00:34:25.065
讓我們鍵入
fetchesquakes

00:34:25.732 --> 00:34:28.902
你可以看到它查找到了
myFetchLatestQuakes方法

00:34:29.203 --> 00:34:32.572
即使我沒有正確的名字
因爲它是模糊匹配

00:34:33.040 --> 00:34:35.976
這個方法的三個實例
在我們的工程中出現過

00:34:36.043 --> 00:34:38.679
選中的第一個方法是
我創建測試數據的地方

00:34:38.745 --> 00:34:39.980
它就是我們需要找的

00:34:40.047 --> 00:34:42.616
我點擊它然後跳轉到它所在的代碼

00:34:44.016 --> 00:34:46.853
好的 在這個方法裏
我創建了地震數據對象

00:34:47.087 --> 00:34:49.322
我沒有看到代碼有任何問題

00:34:49.523 --> 00:34:51.992
這就需要仔細查看究竟出了什麼問題

00:34:52.259 --> 00:34:54.862
爲了找出問題
我要使用Xcode的調試器

00:34:55.862 --> 00:35:00.367
不論你在Xcode中運行應用或
進行測試Xcode的調試器都可用

00:35:00.601 --> 00:35:03.904
你可以使工程停在代碼的一行或者中斷

00:35:04.037 --> 00:35:06.106
通過在代碼行上設置斷點

00:35:07.541 --> 00:35:10.711
我可以通過點擊左邊代碼編輯區的
邊緣設置斷點

00:35:10.777 --> 00:35:13.247
然後你就會看到
一個斷點的標識出現在代碼行上

00:35:14.114 --> 00:35:15.983
我可以再次點擊那個斷點使其灰掉

00:35:16.049 --> 00:35:18.886
暫時禁用斷點如果你想忽略掉斷點

00:35:18.952 --> 00:35:22.756
或者當我們使用完之後
可以將它拖出斷點就這樣刪除了

00:35:23.824 --> 00:35:26.894
在這個例子中 我確實需要斷點
我將再次點擊創建斷點

00:35:27.728 --> 00:35:29.796
再次運行測試

00:35:29.997 --> 00:35:32.766
我將給大家展示最後一個
快速運行相同測試的方法

00:35:32.933 --> 00:35:35.335
在Xcode中有一個叫做
再次測試的命令

00:35:35.569 --> 00:35:39.206
再次測試命令將會運行
我運行過的任何單個測試或測試集

00:35:39.406 --> 00:35:43.076
這個命令便於我們重複進行相同的測試

00:35:44.211 --> 00:35:46.847
可以在Xcode的產品菜單中
使用再次測試命令

00:35:46.914 --> 00:35:48.982
在執行操作
子菜單下

00:35:49.483 --> 00:35:52.486
這兒有許多有用的命令
這個是再次測試命令

00:35:53.453 --> 00:35:57.558
我們選擇它
Xcode只會運行這一個測試

00:35:58.258 --> 00:36:01.562
在模擬器中附加到測試 開始運行測試

00:36:01.828 --> 00:36:05.832
你可以看到Xcode在調試器中
停在了那行代碼

00:36:07.167 --> 00:36:09.369
當調試器停止的時候
就會發生一些事情

00:36:09.803 --> 00:36:12.739
首先 在底部 調試的條塊出現了

00:36:12.806 --> 00:36:15.909
一些按鈕來允許我們進行調試操作

00:36:15.976 --> 00:36:18.378
例如繼續 單步調試 步進調試

00:36:19.713 --> 00:36:22.549
調試按鈕下面是變量區域

00:36:22.616 --> 00:36:25.686
在我們當前可見的代碼區域
顯示每一個變量值

00:36:26.086 --> 00:36:28.121
這兒我聲明瞭三個不同的地震對象

00:36:28.188 --> 00:36:31.091
但是我還沒有給一些變量賦值
所以顯示爲空值

00:36:32.492 --> 00:36:34.761
在右手邊是控制檯區域

00:36:34.828 --> 00:36:38.098
顯示程序打印到標準輸出
或者標準錯誤的內容

00:36:38.165 --> 00:36:40.701
我過會兒會演示這部分內容

00:36:42.169 --> 00:36:45.339
最後 你可能注意到
因爲Xcode在調試器中停止了

00:36:45.405 --> 00:36:47.207
命中了斷點

00:36:47.274 --> 00:36:50.210
Xcode自動切換到調試面板

00:36:50.878 --> 00:36:53.881
這兒Xcode顯示了
在每一個線程中中斷的代碼

00:36:54.181 --> 00:36:58.185
這個代碼現在是
自動運行在後臺線程的 線程6

00:36:58.652 --> 00:37:03.390
所有的堆棧幀中
我們能訪問到代碼的顯示爲黑色

00:37:03.891 --> 00:37:06.593
然而所有堆棧幀包含的系統代碼

00:37:06.660 --> 00:37:11.298
我們都沒有源代碼並且
無法查看的代碼顯示爲灰色

00:37:11.965 --> 00:37:16.003
你有可能注意到這兒有虛線
同這些堆棧幀是對齊的

00:37:16.069 --> 00:37:18.772
這是因爲我真的不需要
瞭解這10幀系統代碼

00:37:18.839 --> 00:37:20.240
我也沒有這些幀的代碼

00:37:20.307 --> 00:37:23.110
當然 假如我想看到底發生了什麼

00:37:23.177 --> 00:37:26.313
我可以調整位於調試面板底部的
控件進行過濾

00:37:27.781 --> 00:37:29.816
一切就緒 讓我們單步調試這些代碼

00:37:29.883 --> 00:37:32.319
調試我們第一次初始化
地震對象之處看看發生了什麼

00:37:32.653 --> 00:37:34.721
我將使用單步調試完成上述操作

00:37:35.522 --> 00:37:38.192
當我點擊單步調試後
Xcode會運行到下一行代碼

00:37:38.425 --> 00:37:40.727
你將看到第一個地震對象

00:37:40.794 --> 00:37:42.763
在變量視圖中已經被初始化

00:37:44.097 --> 00:37:47.801
我可以點擊這裏
查看這個新建地震對象的所有屬性

00:37:48.502 --> 00:37:50.637
這裏是可見的標識

00:37:50.737 --> 00:37:53.941
這是一張圖像我可能想仔細觀察下

00:37:54.007 --> 00:37:57.644
Xcode讓我們
可以像上面那樣快速查看對象

00:37:57.978 --> 00:38:00.013
當我快速查看它時
Xcode會讀取這張圖像

00:38:00.080 --> 00:38:03.250
加載到程序內存並且顯示到這裏

00:38:03.317 --> 00:38:06.053
這樣你就能檢查這張圖像是怎樣的

00:38:07.454 --> 00:38:10.757
這個標識明顯不是這個程序的
因爲它是非空的

00:38:10.958 --> 00:38:12.993
查看下一個地震對象

00:38:13.260 --> 00:38:15.162
爲了查看類信息 我將步進調試到創建

00:38:15.229 --> 00:38:17.264
地震對象函數裏
看看裏面究竟發生了什麼

00:38:18.131 --> 00:38:21.935
我使用步進按鈕
調試進對象的初始化函數

00:38:23.537 --> 00:38:25.105
就是我們對地震對象做初始化的方法

00:38:25.172 --> 00:38:27.674
我可以對代碼做單行調試

00:38:28.675 --> 00:38:32.045
這裏的switch語句裏面
選擇要使用的量級大小標識符

00:38:32.379 --> 00:38:36.350
這裏是標識符初始化的地方
我感覺這裏寫的有些不妥

00:38:36.416 --> 00:38:40.387
我想IIII不是一個有效的羅馬數字

00:38:41.288 --> 00:38:45.259
這有可能是問題所在
我嘗試修改這裏的代碼

00:38:45.325 --> 00:38:47.361
終止程序運行 再次運行測試

00:38:47.461 --> 00:38:51.965
Xcode使這變得可能
每次重新運行程序的時候不用停止程序

00:38:52.232 --> 00:38:54.868
爲了達到上述效果
我會使用調試器表達式

00:38:56.470 --> 00:39:02.176
在控制檯區域 我使用PO命令
就是把對象打印出來的意思

00:39:02.743 --> 00:39:06.180
這條命令支持有效的Swift
或者Objective-C表達式

00:39:06.246 --> 00:39:07.347
我在這裏運行它

00:39:07.681 --> 00:39:12.920
我可以拷貝這個圖像的初始化函數
把它粘貼到控制檯區域

00:39:13.320 --> 00:39:15.455
我要將控制檯區域拉大一點

00:39:15.522 --> 00:39:19.393
使用清空按鈕清空控制檯的已有文本
這樣我就能瞭解到做了什麼

00:39:20.727 --> 00:39:24.698
現在我將點擊回車
在我的程序中運行這行命令

00:39:25.332 --> 00:39:28.602
你可以看到命令返回了空值
沒有那個名字的圖像

00:39:29.603 --> 00:39:32.139
點擊向上的箭頭
讓執行過的表達式再次顯示

00:39:32.439 --> 00:39:36.476
試一下IV
我想這個羅馬數字4應該是對的

00:39:37.077 --> 00:39:38.579
我按下回車執行這條語句

00:39:39.012 --> 00:39:42.216
你可以看到
Xcode返回了一幅圖像的實例

00:39:42.282 --> 00:39:44.284
看起來這個名字的圖像是存在的

00:39:45.552 --> 00:39:47.821
到此爲止 停止調試器

00:39:48.455 --> 00:39:50.457
我將把圖像換成IV

00:39:51.458 --> 00:39:55.062
使用再次測試命令
再次運行測試

00:39:56.563 --> 00:39:59.099
Xcode會對剛纔代碼更改進行構建

00:39:59.533 --> 00:40:01.134
上面我們爲測試做了準備

00:40:01.301 --> 00:40:03.971
切換到測試導航欄看看測試的結果

00:40:04.505 --> 00:40:07.774
而且 哦 那看起來
我還設置了一個斷點

00:40:08.475 --> 00:40:10.911
我想運行我們的測試
並且不會停止調試器

00:40:10.978 --> 00:40:13.347
讓我們看一下如何管理我們的斷點

00:40:14.381 --> 00:40:15.916
Xcode的斷點導航面板

00:40:15.983 --> 00:40:21.355
顯示了我在工程中
設置的全部斷點 展開這裏

00:40:21.722 --> 00:40:26.460
我也可以在這裏單獨禁用他們
或者在我用完後 選中然後刪除它們

00:40:27.461 --> 00:40:30.430
我可以添加一些不同類型的斷點
在斷點導航面板上

00:40:30.497 --> 00:40:35.102
像Swift有錯誤的時候拋出
單元測試失敗

00:40:35.169 --> 00:40:37.704
或者在任何方法名字上標識

00:40:39.106 --> 00:40:44.044
如果我發現某個斷點是我經常使用的
就像測試失敗的斷點

00:40:44.478 --> 00:40:48.048
我可以讓那個斷點在每個工程中
都是可用我需要簡單的

00:40:48.515 --> 00:40:53.053
選擇已經添加的斷點 彈出菜單

00:40:53.687 --> 00:40:55.989
選擇移動斷點到用戶

00:40:56.990 --> 00:41:02.362
移動就是將斷點變爲用戶斷點
使得斷點可在我工作的任何工程上使用

00:41:04.031 --> 00:41:06.066
就這樣 在這個例子中 我還沒準備

00:41:06.133 --> 00:41:08.635
刪除我全部斷點
是爲了防止程序出現問題

00:41:08.702 --> 00:41:12.072
暫時禁用這些斷點以便程序能正常運行

00:41:12.606 --> 00:41:16.743
我可以暫時禁用這些斷點
使用調試條塊上的斷點按鈕

00:41:18.011 --> 00:41:20.781
我將點擊繼續按鈕完成測試

00:41:21.315 --> 00:41:22.983
回到測試導航欄

00:41:23.217 --> 00:41:26.587
你可以看到我通過了所有的測試
看起來我們成功了

00:41:27.421 --> 00:41:28.956
回顧一下我們做了什麼

00:41:29.823 --> 00:41:32.960
回顧我們的更改
切回Xcode的工程導航面板

00:41:33.227 --> 00:41:36.964
使用在底部的過濾功能
叫做過濾代碼控制狀態

00:41:37.998 --> 00:41:39.967
這個功能會將工程導航面板展示給我

00:41:40.200 --> 00:41:44.271
這些文件有特定的代碼控制狀態
比如改動過的

00:41:45.138 --> 00:41:47.207
這兩個功能讓我瞭解到我做了什麼更改

00:41:47.274 --> 00:41:50.210
這是很實用的功能
如果我有許多的工作集

00:41:50.277 --> 00:41:53.247
還有一些編碼過程中用到的文件
我想在這些文件中快速跳轉

00:41:53.347 --> 00:41:54.848
如果我修改了這些文件

00:41:54.948 --> 00:41:58.185
我可以使用過濾功能
限定出我正使用的文件

00:41:59.887 --> 00:42:02.322
如果我想查看我對一個文件所做的更改

00:42:02.489 --> 00:42:05.392
我可以選擇那個文件並且
使用Xcode的第三種編輯模式

00:42:06.193 --> 00:42:09.363
我已經給大家展示了
基本的編輯和編輯助手的用法

00:42:09.696 --> 00:42:14.201
Xcode第三種編輯模式是版式編輯
它有三個子模式

00:42:15.369 --> 00:42:19.373
對比編輯讓我們能夠
比較兩個修訂版間的差異

00:42:19.439 --> 00:42:22.342
或者是你沒有提交的變化
相對於你最新的提交

00:42:22.876 --> 00:42:25.279
職責模式讓你可以看到是誰

00:42:25.345 --> 00:42:27.714
在你文件的哪個版本
對每行代碼做的改動

00:42:28.549 --> 00:42:31.818
日誌模式將展示給你
源代碼管理器的日誌文件

00:42:32.986 --> 00:42:35.122
在這個示例中 我使用比較模式

00:42:36.490 --> 00:42:39.860
當我選擇比較模式
Xcode會展示給我文件的兩個版本

00:42:40.260 --> 00:42:43.931
在左邊欄是我本地的文件
這裏顯示的是我已經更改的

00:42:44.598 --> 00:42:47.768
右邊是我提交到代碼管理器的最新版本

00:42:47.835 --> 00:42:52.072
這裏顯示給我的就是不同的部分
我已經修改的和我最新提交的

00:42:53.407 --> 00:42:56.577
在下面的中間部分顯示的一些箭頭
能實現修改之間跳轉

00:42:57.077 --> 00:42:58.312
當我們查看變化的時候

00:42:58.378 --> 00:43:01.381
Xcode將對每行的更改
進行可視化的顯示

00:43:01.481 --> 00:43:04.518
高亮顯示在哪一行進行了更改

00:43:06.019 --> 00:43:09.256
如果我想通先前的版本進行對比
我可以這樣彈出菜單

00:43:09.323 --> 00:43:12.226
然後選擇哪個版本的文件
是我將要進行對比的

00:43:12.826 --> 00:43:16.330
或者我可以對比兩個版本之間
舊版本同每一個其它版本

00:43:16.396 --> 00:43:18.398
在左邊欄選擇不同的版本文件

00:43:19.933 --> 00:43:21.068
這些改變應該沒有錯誤

00:43:21.368 --> 00:43:24.037
現在我們可以對我們的更改進行提交了

00:43:25.205 --> 00:43:27.641
爲了提交
需要點擊Xcode的代碼控制菜單

00:43:27.708 --> 00:43:29.176
然後選擇提交條目

00:43:29.810 --> 00:43:31.879
然後會向下彈出Xcode的提交列表

00:43:32.913 --> 00:43:35.249
在左邊 我能看到
我對文件做的所有更改

00:43:35.315 --> 00:43:37.818
包括其中的一些設置文件
如果我選擇一個文件

00:43:37.985 --> 00:43:40.420
在提交表單的右側會顯示文件的對比

00:43:40.487 --> 00:43:42.789
給我們最後的機會審覈我們的更改

00:43:43.924 --> 00:43:46.426
在這裏我甚至可以丟棄所做的更改

00:43:46.493 --> 00:43:52.533
點擊選擇改變標記然後選擇不要提交
如果我只想提交我做的部分更改

00:43:53.467 --> 00:43:56.236
在這個例子中
我想提交全部的更改 給出提交的信息

00:43:56.537 --> 00:43:58.005
我將會寫修復了測試

00:43:59.239 --> 00:44:02.176
當我提交的時候
我想立即將我的更改推送給工作夥伴

00:44:02.242 --> 00:44:03.744
點擊推送的複選框

00:44:04.278 --> 00:44:07.881
提交我們的更改
Xcode正在提交中

00:44:08.182 --> 00:44:11.752
將我們的更改推送給我們的工作夥伴
上述操作完成

00:44:12.819 --> 00:44:14.021
大家準備好

00:44:14.087 --> 00:44:17.457
將你的應用分發給你的測試人員
或者App Store

00:44:17.524 --> 00:44:18.859
如果你想知道如何去發佈

00:44:19.126 --> 00:44:22.796
或者假如有些東西我們沒有講到
恰巧這些東西是你想了解的

00:44:23.063 --> 00:44:25.232
我建議你查閱Xcode的幫助手冊

00:44:26.500 --> 00:44:30.204
你可以獲得幫助手冊
從幫助菜單下選擇Xcode幫助

00:44:31.939 --> 00:44:37.344
那裏 你可以查詢任何你想了解的信息
或者瀏覽其它主題

00:44:37.444 --> 00:44:40.547
比如 存檔還有輸出產品以及常見存檔

00:44:40.681 --> 00:44:43.917
這裏Xcode告訴我們
如何爲發佈的應用創建存檔

00:44:45.552 --> 00:44:49.122
不錯 挺好的
我給大家講述了完整的工作流程

00:44:49.690 --> 00:44:53.527
但是還有一些重要的知識
在本次演講結束前我將給大家講解

00:44:53.594 --> 00:44:56.530
那就是
如何定製你的源代碼和你的工程...

00:44:56.597 --> 00:45:00.400
對不起 是如何自定義你的工程
並按照我們需要的配置他們

00:45:01.201 --> 00:45:03.837
我會帶大家瞭解一些核心的配置概念

00:45:03.937 --> 00:45:07.875
我要把Najla請回臺上
讓她來給大家講解

00:45:14.047 --> 00:45:14.948
謝謝你 Rick

00:45:15.616 --> 00:45:18.652
現在你知道了
在Xcode進行開發的基本流程

00:45:18.719 --> 00:45:22.155
當你剛開始使用Xcode的時候
上面的內容或許是你需要的

00:45:22.656 --> 00:45:25.292
隨着你開發的工程越來越複雜

00:45:25.359 --> 00:45:28.462
你需要知道如何配置你的工程和設置

00:45:29.630 --> 00:45:33.600
讓我們快速瀏覽下
Xcode的主要配置概念

00:45:33.667 --> 00:45:35.569
以便你能理解你正在使用的是什麼

00:45:37.638 --> 00:45:40.440
今天有五個概念是我們需要談論的

00:45:41.175 --> 00:45:44.444
Xcode工程和工程包含的目標

00:45:45.779 --> 00:45:50.017
構建設置和功能
這些可以決定Xcode的行爲

00:45:50.717 --> 00:45:53.787
工作空間用來組織你的工程

00:45:57.758 --> 00:46:00.727
先我們先談論下工程

00:46:02.896 --> 00:46:08.936
工程是你在Xcode中
可以組織你代碼和資源的文檔

00:46:09.770 --> 00:46:14.408
你所引用的代碼和
資源文件存儲在磁盤上

00:46:16.410 --> 00:46:20.714
目標將這些文件構建到
像你應用的產品中

00:46:22.449 --> 00:46:26.220
構建設置配置
你的目標如何構建你的產品

00:46:27.454 --> 00:46:30.824
規則配置Xcode的運行操作

00:46:31.024 --> 00:46:33.160
例如運行 使用你的目標

00:46:34.795 --> 00:46:39.233
現在 爲了找到你工程的設置
在導航欄上選擇你的工程

00:46:40.167 --> 00:46:44.505
在編輯區的頂部選中放大的選項
然後選擇你的應用

00:46:45.906 --> 00:46:48.942
現在 你工程的設置
位於兩個標籤頁中間

00:46:49.209 --> 00:46:51.345
信息標籤頁和構建設置標籤頁

00:46:51.845 --> 00:46:54.381
通用設置爲於信息標籤頁中

00:46:54.915 --> 00:46:58.752
有一點我需要指出
你應用的開發目標

00:46:59.786 --> 00:47:04.491
你開發的目標最低系統版本
你的應用能運行和支持的系統版本

00:47:04.825 --> 00:47:07.594
現在你的應用僅僅支持iOS 10

00:47:07.895 --> 00:47:12.432
但若我想讓我們的應用支持iOS 9
我可以在工程設置中進行修改

00:47:14.735 --> 00:47:16.970
讓我們將談論話題轉到目標

00:47:18.705 --> 00:47:21.708
一個目標包含構建所需的指令

00:47:21.975 --> 00:47:24.344
想一個應用或者框架

00:47:25.145 --> 00:47:28.515
你的目標生產出的叫做它的產品

00:47:30.317 --> 00:47:35.022
你目標構建它產品的一系列步驟
就叫做構建的階段

00:47:35.956 --> 00:47:41.261
最後 目標的構建設置
是配置如何成產它的產品的

00:47:43.030 --> 00:47:48.101
現在 需要注意的是
工程和目標都有構建設置

00:47:48.402 --> 00:47:51.638
目標沿用工程中的一些數據

00:47:51.805 --> 00:47:55.142
但是可以被目標指定的值覆蓋

00:47:57.878 --> 00:47:59.446
目標構建階段做的事情

00:47:59.513 --> 00:48:05.319
像構建依賴關係
在目標中編譯資源文件

00:48:05.519 --> 00:48:08.388
鏈接庫和框架到目標

00:48:10.524 --> 00:48:15.662
你也能增加叫做運行腳本的構建階段
對構建中你想修改的其他方面進行配置

00:48:18.999 --> 00:48:20.734
你可以訪問你的目標設置

00:48:21.335 --> 00:48:23.637
通過在你的導航欄中選擇你的工程

00:48:24.171 --> 00:48:26.473
選擇在編輯區頂部彈出的選項

00:48:26.540 --> 00:48:28.475
選擇你的目標

00:48:30.644 --> 00:48:33.714
現在你目標設置的標籤頁
在許多標籤頁之間

00:48:34.314 --> 00:48:37.417
比如構建設置標籤頁 功能標籤頁

00:48:37.484 --> 00:48:39.186
和構建階段標籤頁

00:48:40.787 --> 00:48:44.958
讓我們談論一些構建設置和功能的內容

00:48:47.294 --> 00:48:51.398
構建設置包含名字還有一些選項的值

00:48:51.465 --> 00:48:54.168
控制構建過程的一些選項

00:48:54.501 --> 00:48:58.906
比如 構建設置指定
你想基於哪個架構進行構建

00:48:59.506 --> 00:49:03.243
你的代碼是否被優化
給你的產品進行命名

00:49:03.377 --> 00:49:04.978
你如何處理警告

00:49:07.981 --> 00:49:11.585
構建設置在工程和目標層面上都可訪問

00:49:12.019 --> 00:49:13.620
在構建設置標籤頁中

00:49:13.854 --> 00:49:17.591
裏面的表格包含了
所有的名字和需要設置的值

00:49:20.394 --> 00:49:24.364
現在 構建設置的值可被構建配置改變

00:49:24.998 --> 00:49:29.002
默認情況下
工程有一個調試和發佈配置

00:49:29.803 --> 00:49:34.641
例如 當你爲調試進行構建的時候
你有可能不想優化你的代碼

00:49:34.842 --> 00:49:38.345
但是當你構建發佈版本的時候
你想讓系統優化你的代碼

00:49:41.381 --> 00:49:45.485
除了提供細粒度的構建設置
Xcode也提供了功能

00:49:45.552 --> 00:49:48.922
可以允許你輕鬆的打開特定的功能

00:49:49.890 --> 00:49:51.358
例如 對iOS

00:49:51.425 --> 00:49:55.596
有一些功能是爲啓用In-APP Purchase
和集成Apple Maps提供的

00:49:56.230 --> 00:49:59.333
如果你想了解關於功能的更多內容

00:49:59.499 --> 00:50:02.135
你可以展看功能的面板

00:50:02.903 --> 00:50:05.205
你可以禁用或者啓用一些功能

00:50:05.272 --> 00:50:08.442
通過使用在編輯器右邊的
打開或者關閉選項

00:50:11.245 --> 00:50:13.580
最後 讓我們談論下工作空間

00:50:15.048 --> 00:50:19.386
你有可能發現隨着時間推移
你更傾向於像集合那樣對待一組工程

00:50:19.786 --> 00:50:25.125
例如 有使用相同框架的兩個工程
你想把它們放到一起

00:50:27.294 --> 00:50:28.529
在這種情況下

00:50:28.829 --> 00:50:32.266
你可以創建Xcode的工作空間
來引用你的工程

00:50:34.234 --> 00:50:36.403
當你在Xcode中打開工作空間時

00:50:36.803 --> 00:50:40.607
它會包含我們引用的全部工程

00:50:40.807 --> 00:50:45.245
工作空間使得相關代碼的
跳轉和編輯變得容易

00:50:48.081 --> 00:50:51.618
現你瞭解了Xcode的主要配置概念

00:50:52.119 --> 00:50:55.923
有這些知識和額外的
Xcode基本開發流程

00:50:55.989 --> 00:50:59.059
你就有了製作高質量應用的工具

00:51:01.161 --> 00:51:02.763
今天我展示給你們的內容

00:51:02.829 --> 00:51:06.300
是通過Xcode構建應用的
重要組成部分

00:51:06.867 --> 00:51:10.237
你學習瞭如何創建一個新的應用
然後將它運行在模擬器中

00:51:10.537 --> 00:51:12.039
如何去測試和調試應用

00:51:12.639 --> 00:51:15.342
我們也談論了Xcode的實用工具

00:51:15.409 --> 00:51:19.279
例如Command+Option+
單擊還有快速打開

00:51:20.214 --> 00:51:25.385
我們也展示給你如何在工程中進行查找
使用過濾工具和跳轉工具

00:51:27.487 --> 00:51:30.257
你學習瞭如何審查和提交更改

00:51:30.324 --> 00:51:34.595
還有如何配置你的工程和設置
一旦你準備將應用提交到商店

00:51:36.797 --> 00:51:39.333
我希望本場演講之後
你能有更好了解到

00:51:39.399 --> 00:51:42.336
你利用Xcode能做各式各樣的事情

00:51:42.402 --> 00:51:45.305
我們看到大家所創建的應用十分開心

00:51:54.348 --> 00:51:58.519
好的 如果你想了解本次演講更多消息

00:51:58.585 --> 00:52:04.658
你可以訪問
developer.apple.com/wwdc16/413

00:52:06.527 --> 00:52:09.863
如果你對Xcode的特定部分感興趣

00:52:10.197 --> 00:52:12.833
有一些你可以參加的演講
或者可以在線觀看

00:52:13.200 --> 00:52:16.136
例如 在週二有
“Xcode應用簽名”的演講

00:52:16.203 --> 00:52:19.373
當你要提交你的應用到商店時
進行簽名是很重要的

00:52:19.840 --> 00:52:25.612
有一個關於測試和持續集成
以及調試技巧的演講

00:52:26.880 --> 00:52:30.784
謝謝大家觀看本場演講
希望大家在這次大會中過得開心