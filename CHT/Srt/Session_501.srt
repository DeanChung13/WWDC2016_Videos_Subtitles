00:00:19.553 --> 00:00:23.757 
IOS PHOTOGRAPHY的新特性

00:00:23.824 --> 00:00:24.725 
早上好

00:00:25.592 --> 00:00:27.895 
早上好各位
歡迎來到501會話

00:00:28.462 --> 00:00:29.530 
我是Brad Ford

00:00:29.596 --> 00:00:33.300 
我在Apple的Core Media和
AV Foundation Capture團隊工作

00:00:34.835 --> 00:00:37.271 
本次會議全是關於iOS相機的

00:00:37.337 --> 00:00:38.872 
希望你們現在都已經知道了

00:00:38.939 --> 00:00:41.475 
這是世界上最流行的相機

00:00:41.575 --> 00:00:43.610 
本次會議也是關於攝影的

00:00:44.244 --> 00:00:46.079 
如果你開發一個攝影的應用

00:00:46.280 --> 00:00:49.016 
或是正考慮開發一個攝影應用

00:00:49.216 --> 00:00:51.351 
那麼這對你來說是個不錯的OS

00:00:51.418 --> 00:00:54.655 
我覺得你和iOS 10
很快就能交上朋友

00:00:55.589 --> 00:00:58.158 
今天我們將把注意力集中到
AV Foundation框架

00:00:58.225 --> 00:01:02.529 
它是我們最底層
並且最強大的訪問相機的框架

00:01:02.996 --> 00:01:05.098 
AV Foundation
有着廣度和深度

00:01:05.532 --> 00:01:07.367 
如果你是iOS拍照的新手

00:01:07.434 --> 00:01:12.472 
我邀請你看下列過去
WWDC 的相機主題演講視頻

00:01:13.073 --> 00:01:15.342 
它們會給你聽今天的
演講打下良好的基礎

00:01:15.409 --> 00:01:17.644 
另外 你可以看到我優雅地老去

00:01:19.880 --> 00:01:22.349 
在接下來的58分鐘裏
我們將要進行這些

00:01:22.883 --> 00:01:26.086 
我會展示全新的
AVCaptureOutput

00:01:26.153 --> 00:01:28.155 
用來捕捉拍攝內容

00:01:28.655 --> 00:01:30.924 
然後我們會關注四個特性

00:01:31.558 --> 00:01:34.094 
我們會關注Live Photos

00:01:34.161 --> 00:01:36.263 
你們將學會如何用
你的應用拍攝Live Photos

00:01:36.330 --> 00:01:38.232 
就如Apple的相機應用一樣

00:01:38.832 --> 00:01:41.168 
你們將學會如何拍攝
原生RAW格式圖片

00:01:41.235 --> 00:01:45.239 
並將它們保存爲DNG文件
其在iOS上首次出現

00:01:46.073 --> 00:01:48.742 
你們將學到如何獲得預覽或者縮略圖

00:01:48.809 --> 00:01:52.613 
爲你的常規圖片拍攝
以獲得一個更具響應性的UI

00:01:53.714 --> 00:01:58.218 
最後 你會學到如何用
寬色域拍攝漂亮的栩栩如生的照片

00:01:58.886 --> 00:01:59.786 
讓我們現在開始吧

00:02:00.487 --> 00:02:03.924 
我們先快速回顧一下
AV Foundation的捕獲類是怎麼工作的

00:02:04.191 --> 00:02:07.628  
我們拍照的宇宙中心
是AVCaptureSession

00:02:08.027 --> 00:02:10.864  
你告訴這個對象開始或結束運行

00:02:11.398 --> 00:02:14.368  
它需要一些輸入
來使其可以幹些有用的事

00:02:14.701 --> 00:02:17.137  
像是相機或是麥克風這類輸入

00:02:17.437 --> 00:02:19.606  
它們給會話提供了數據

00:02:19.673 --> 00:02:22.075  
它也需要輸出來接收數據

00:02:22.409 --> 00:02:25.679  
比如一個StillImageOutput
可以捕捉靜態的圖像

00:02:25.979 --> 00:02:29.650  
或是一個QuickTimeMovieFileOutput
可以用來錄製Quicktime影片

00:02:30.083 --> 00:02:31.351  
還有connections

00:02:31.418 --> 00:02:36.490  
它們被作爲AVCaptureConnections
在API中所呈現

00:02:36.790 --> 00:02:38.592  
這是我們的對象概覽圖

00:02:38.659 --> 00:02:41.061  
你們該看出來我們如何
把所有東西整合到一起

00:02:41.995 --> 00:02:44.998  
所有我剛提到的這些特性
都與拍攝靜態圖片有關

00:02:45.065 --> 00:02:49.837  
所以你可能預計今天會花很長時間
在AVCaptureStillImageOutput上

00:02:50.737 --> 00:02:51.572  
但是你錯了

00:02:53.440 --> 00:02:56.510  
今天介紹iOS 10中
全新的CaptureOutput

00:02:56.577 --> 00:02:58.979  
它叫做AVCapturePhotoOutput

00:02:59.279 --> 00:03:03.417 
值得強調的是現如今我們的照片
可不止是靜態的圖片

00:03:04.484 --> 00:03:10.157 
AVCapturePhotoOutput解決了
AVStillImageOutput的設計難題

00:03:10.224 --> 00:03:11.725 
從四個主要方面

00:03:12.392 --> 00:03:14.895 
它以一個函數式的編程模型爲主要特色

00:03:15.095 --> 00:03:18.532 
它對於可變和不可變的
數據間有明確的劃分

00:03:19.399 --> 00:03:23.637 
我們將照片設置信息封裝到
一個特有的對象作用到其自身

00:03:24.571 --> 00:03:29.176 
PhotoOutput可追蹤照片
從請求到完成的全過程

00:03:29.510 --> 00:03:32.212 
通過一個回調的代理式接口

00:03:32.779 --> 00:03:34.348 
最後 它解決了

00:03:34.414 --> 00:03:37.885 
你在早先拍攝階段不確定的圖片設置

00:03:38.151 --> 00:03:40.053 
因此你知道你會得到什麼

00:03:40.320 --> 00:03:42.923  
讓我們再多講一些最後一個特性

00:03:44.224 --> 00:03:46.560  
AVCapturePhotoOutput
看起來是這樣的

00:03:46.627 --> 00:03:49.730  
即便有着諸多的新特性
它仍是個簡潔的接口

00:03:49.830 --> 00:03:52.900  
甚至比AVCaptureStill
ImageOutput還要小

00:03:52.966 --> 00:03:55.235  
它有一個只讀屬性的小集合

00:03:55.502 --> 00:03:58.138  
來告訴你是否支持一個特性

00:03:58.205 --> 00:04:00.974  
像是
isLivePhotoCaptureSupported

00:04:01.341 --> 00:04:04.945  
它有一個更小的可寫屬性的集合
讓你可以參與進來

00:04:05.012 --> 00:04:07.581  
當某個特性被支持時

00:04:08.015 --> 00:04:11.418  
有些拍攝特性會
影響拍攝渲染管道的建立

00:04:11.485 --> 00:04:13.720  
所以你們要提前指明它們

00:04:14.054 --> 00:04:16.456  
其中一個是
isHighResolutionCapture

00:04:16.523 --> 00:04:18.926  
如果你想拍攝高分辨率的照片

00:04:18.992 --> 00:04:23.497  
像是在iPhone 6s上
五百萬像素的自拍

00:04:23.997 --> 00:04:26.733  
你得先採用這個特性

00:04:26.800 --> 00:04:28.969 
在調用AVCapture session的
startRunning之前

00:04:29.469 --> 00:04:34.274  
最後 你可以調用一個簡單的方法
來開始拍攝照片

00:04:34.975 --> 00:04:36.243  
僅僅一個動詞

00:04:36.844 --> 00:04:40.747  
你可能會問
所有那些相片生成狀態怎麼辦

00:04:41.615 --> 00:04:43.183  
我怎麼請求閃光燈拍攝

00:04:43.250 --> 00:04:44.718  
我怎麼獲得BGRA

00:04:44.785 --> 00:04:46.587  
我怎麼獲得靜態圖片防抖

00:04:47.387 --> 00:04:49.223 
這些還有一些其他特性都被移動到

00:04:49.289 --> 00:04:52.459 
一個叫做AVCapturePhoto
Settings的新對象中

00:04:52.960 --> 00:04:54.695 
這個對象包含所有這些設置

00:04:54.761 --> 00:04:57.931 
關於拍攝一張照片的請求

00:04:58.498 --> 00:05:01.535 
把它想成是個列表項可供選擇

00:05:01.602 --> 00:05:04.972 
像是當你在Apple線上
商店買Mac的時候

00:05:05.339 --> 00:05:07.975 
你在網上表格里填上所有你想要的特性

00:05:08.041 --> 00:05:10.110 
然後點擊提交訂單按鈕

00:05:10.644 --> 00:05:13.480 
提交訂單就像是調用
capturePhoto

00:05:13.747 --> 00:05:17.150 
將AVCapturePhotoSettings
作爲你所傳的第一個參數

00:05:17.784 --> 00:05:19.419 
當你在網上下單時

00:05:19.553 --> 00:05:23.323  
商店需要你的電郵地址
來和你溝通訂單的信息

00:05:24.358 --> 00:05:30.163  
在AVCapturePhotoOutput世界
你所提供的電郵地址就是遵從

00:05:30.230 --> 00:05:33.834  
AVCapturePhotoCapture
Delegate協議的對象

00:05:34.001 --> 00:05:38.338  
這個delegate會被回調
作爲和你的拍照發生相關的事件

00:05:38.972 --> 00:05:42.276  
這個對象是傳給
CapturePhoto第二個參數

00:05:43.610 --> 00:05:46.446 
那麼AVCapturePhotoSettings
有什麼好處呢

00:05:46.513 --> 00:05:48.315 
首先 它們是原子性的

00:05:48.849 --> 00:05:51.752 
所有設置都被封裝到一個單一對象

00:05:52.019 --> 00:05:54.988 
所有的設置都不可能會不同步

00:05:55.489 --> 00:05:58.458 
因爲它們不是
AVCapturePhotoOutput的屬性

00:05:58.659 --> 00:06:00.827 
而是每一設置相關的對象

00:06:01.361 --> 00:06:02.196 
它們是獨一無二的

00:06:02.563 --> 00:06:05.966 
每個照片設置實例都有唯一的ID屬性

00:06:06.300 --> 00:06:09.136 
你只允許使用一個照片設置一次

00:06:09.369 --> 00:06:10.337 
並且不能再用

00:06:10.404 --> 00:06:15.008 
因此你每次拍照請求
將收到正好一組結果

00:06:17.010 --> 00:06:21.014 
在附加一組設置請求拍照後
你可以堅持不變動

00:06:21.081 --> 00:06:23.684 
並驗證它們返回給你的結果

00:06:23.750 --> 00:06:27.354 
就有點像做了一個
你在線訂單表格的備份

00:06:28.655 --> 00:06:30.824 
那麼相片委託有什麼好處呢

00:06:31.725 --> 00:06:33.427 
它是一個單一的回調函數集合

00:06:33.493 --> 00:06:35.896 
而且又是隨着每個照片設置而變

00:06:36.697 --> 00:06:38.065 
序列是被記錄下來的

00:06:38.131 --> 00:06:40.067 
你可以明確知道你將獲得哪個回調函數

00:06:40.133 --> 00:06:41.768 
何時 以什麼順序

00:06:42.402 --> 00:06:45.372 
並且它是個用來解決不確定設置的手段

00:06:45.772 --> 00:06:48.242 
我想這點我得再多解釋一點

00:06:48.809 --> 00:06:52.913 
假如說你的應用在時間軸上的
這個位置請求照片

00:06:54.314 --> 00:06:56.950 
你指明照片設置是帶有自動閃光燈

00:06:57.117 --> 00:06:59.453 
和自動靜態圖片防抖

00:06:59.553 --> 00:07:01.922 
我把“靜止圖像穩定”縮寫成SIS

00:07:01.989 --> 00:07:03.490 
以便能在幻燈片上顯示的更好

00:07:04.091 --> 00:07:07.861 
你告訴PhotoOutput
我想使用閃光燈或者SIS

00:07:07.928 --> 00:07:10.898 
但是隻在你需要的時候
還有它們適合於當前場景的時候

00:07:11.865 --> 00:07:14.301 
很快你提出了請求

00:07:14.368 --> 00:07:17.037 
PhotoOutput
會調用你委託的第一個回調函數

00:07:17.104 --> 00:07:20.374 
也就是willBeginCapture
ForResolvedSettings

00:07:20.440 --> 00:07:23.310 
這個回調函數永遠都是第一個被調用

00:07:23.644 --> 00:07:26.180 
它就有點像是
你從Apple收到的禮節性郵件

00:07:26.246 --> 00:07:28.081 
告訴你我們已經收到了你的訂單

00:07:28.515 --> 00:07:29.983 
我們會發送給你什麼

00:07:30.384 --> 00:07:32.286 
這個回調函數傳給你一個實例

00:07:32.352 --> 00:07:36.890 
實例是一個新對象的 叫做
AVCapturePhotoResolvedSettings

00:07:37.491 --> 00:07:39.893 
它就像你填寫的照片設置

00:07:39.960 --> 00:07:41.695 
不同的是所有問題都解決了

00:07:42.563 --> 00:07:44.298 
它們有着相同的唯一ID

00:07:44.598 --> 00:07:47.734 
你未確定和決定的版本
共享一個唯一ID

00:07:47.801 --> 00:07:49.169 
以便你將它們一起比較

00:07:49.469 --> 00:07:52.406 
它也告訴你照片的輸出
爲你挑出了什麼特性

00:07:52.773 --> 00:07:55.809 
注意 在這個例子中
閃光燈被設定爲開

00:07:56.176 --> 00:07:57.911 
SIS被設定爲關

00:07:58.078 --> 00:08:01.281 
我們現在很明顯是處在極度弱光環境
像是這個會議室

00:08:01.448 --> 00:08:04.852 
接下來的回調函數是
willCapturePhotoForResolvedSettings

00:08:04.918 --> 00:08:07.454 
它是正好在拍照片的時候被送到

00:08:07.654 --> 00:08:10.390 
或是當虛擬相機快門正在閉合

00:08:10.724 --> 00:08:12.459 
並且播放了快門聲的時候

00:08:12.759 --> 00:08:15.229 
如果你想播放一個快門動畫效果

00:08:15.295 --> 00:08:16.930 
那麼這正是時候

00:08:17.865 --> 00:08:21.702 
接下來馬上就是
didCapturePhotoForResolvedSettings

00:08:21.768 --> 00:08:24.571 
就在圖像被完全曝光呈現出來

00:08:24.638 --> 00:08:26.340 
而且虛擬快門開啓之後

00:08:27.474 --> 00:08:30.978 
然後你要等一下因爲圖像正在被處理

00:08:31.044 --> 00:08:33.080 
加上所有你要求的特性

00:08:33.413 --> 00:08:35.048 
當照片最後處理完成時

00:08:35.115 --> 00:08:38.150 
你獲得didProcessing
PhotoSampleBuffer這個回調函數

00:08:38.217 --> 00:08:41.188 
還有你一直在等的
ImageSampleBuffer

00:08:41.255 --> 00:08:44.024 
耶 就像是嶄新的
Mac送到了你的門口

00:08:44.725 --> 00:08:49.496 
最後 你獲得的回調函數是
didFinishCaptureForResolvedSettings

00:08:49.563 --> 00:08:51.865 
它肯定是最後被送達的

00:08:52.332 --> 00:08:55.536 
它就像是你收到的
來自Apple的回訪郵件

00:08:55.602 --> 00:08:57.171 
告訴你所有包裹已經送到了

00:08:57.237 --> 00:08:58.906 
與你打交道非常愉快 完畢

00:08:59.740 --> 00:09:02.876 
現在是你清理圖片生成
中間階段存儲的好時機

00:09:04.478 --> 00:09:06.980 
讓我們詳細討論下那些委託

00:09:07.514 --> 00:09:10.551 
回調函數會追蹤一個單一拍照請求

00:09:11.451 --> 00:09:14.888 
照片輸出會保留一個
對你委託的弱引用

00:09:14.955 --> 00:09:17.191 
所以它不會一直給你保留那個對象

00:09:17.691 --> 00:09:20.127 
記着在你的代碼裏給它保留一個強引用

00:09:20.794 --> 00:09:24.031 
所有在這個協議裏的回調函數
都被標爲可選的

00:09:24.331 --> 00:09:26.400 
但其中有些在runtime
會變爲必需

00:09:26.466 --> 00:09:28.101 
這取決於你的照片設置

00:09:28.168 --> 00:09:31.438 
例如 當你正拍一個壓縮的跑步圖片時

00:09:31.505 --> 00:09:34.975 
你的委託需要在你獲得
照片的時候就實現一個回調函數

00:09:35.242 --> 00:09:37.344 
否則 我們就會無處送達它

00:09:37.945 --> 00:09:42.082 
此規則在AVCapturePhotoOutput.h
頭文件中就明確寫出了

00:09:43.183 --> 00:09:46.854 
所有回調函數都會傳一個
ResolvedPhotoSettings對象的實例

00:09:46.920 --> 00:09:49.523 
就是我告訴你們的那個
因此你總會知道你將要得到什麼

00:09:49.590 --> 00:09:50.858 
或是你剛剛得到了什麼

00:09:54.161 --> 00:09:55.062 
說到設置

00:09:55.128 --> 00:09:57.698 
我們來看段代碼 它展示了
如何初始化照片拍攝

00:09:57.764 --> 00:10:00.767 
利用AVCapturePhotoSettings
的諸多特性

00:10:01.134 --> 00:10:03.904 
首先第一個
takeHighResolutionPhoto

00:10:04.204 --> 00:10:07.307 
如我前面所說
iPhone 6s的前置攝像頭

00:10:07.374 --> 00:10:11.245 
支持五百萬像素的高分辨率自拍

00:10:11.311 --> 00:10:13.514 
但是它不能支持
五百萬像素的連續流暢拍照

00:10:13.580 --> 00:10:15.816 
它只支持單個高像素的定格照

00:10:16.416 --> 00:10:19.186 
所以你必須創建
一個PhotoSettings對象

00:10:19.386 --> 00:10:23.257 
並設置啓用
HighResolutionPhotoCaptureEnabled

00:10:23.490 --> 00:10:29.062 
這樣你就生成了帶有參數的結構體
AVCapturePhotoSettings

00:10:29.563 --> 00:10:32.933 
它默認將輸出格式設爲JPEG

00:10:32.999 --> 00:10:35.536 
並啓用了靜態圖像防抖

00:10:36.370 --> 00:10:39.173 
然後我將isHighResolution
PhotoEnabled設爲真

00:10:39.239 --> 00:10:40.874 
並調用CapturePhoto

00:10:41.542 --> 00:10:44.711 
在第二個例子
takeFlashPhoto中

00:10:45.512 --> 00:10:48.882 
注意flashMode
現在是settings對象的一個屬性了

00:10:48.949 --> 00:10:51.084 
如果你過去用過
StillImageOutput

00:10:51.151 --> 00:10:54.521 
你就會知道Flash原來是
AVCaptureDevice的一部分

00:10:54.588 --> 00:10:56.356 
所以這會產生問題
就是你需要訪問

00:10:56.423 --> 00:10:58.859 
兩個不同的對象來設置settings

00:10:58.992 --> 00:11:01.695 
現在它是單獨一個對象的一部分了

00:11:02.062 --> 00:11:02.930 
太棒了

00:11:03.664 --> 00:11:08.135 
最後一個例子用了一個挺複雜的
AVCapturePhotoSettings的結構體

00:11:08.202 --> 00:11:11.905 
這回我們要傳遞我們想要的輸出格式

00:11:11.972 --> 00:11:14.541 
在這裏
我們想要非壓縮的BGRA格式

00:11:14.908 --> 00:11:17.811 
我們要建立
一個CV像素緩存屬性的字典

00:11:18.312 --> 00:11:22.683 
然後將其作爲
AVCapturePhotoSettings的參數傳遞

00:11:23.083 --> 00:11:23.984 
這樣就行了

00:11:24.418 --> 00:11:26.286 
當你調用capturePhoto時

00:11:26.520 --> 00:11:28.689 
AVCapturePhotoOutput
會驗證你的設置

00:11:28.755 --> 00:11:30.924 
來確保你不是在請求一些荒唐的東西

00:11:30.991 --> 00:11:33.293 
它將保證自治性

00:11:33.360 --> 00:11:36.630 
也將確保你所請求的東西真的被支持

00:11:36.697 --> 00:11:38.599 
如果不被支持 它會拋出一個異常

00:11:40.400 --> 00:11:43.937 
Result設置
如你所想是完全不能變動的

00:11:44.304 --> 00:11:45.906 
所有屬性都是隻讀的

00:11:46.006 --> 00:11:47.741 
它們僅供你參考用

00:11:47.808 --> 00:11:50.477 
而且這是函數式編程不可變的部分

00:11:51.011 --> 00:11:52.980 
它有一個唯一ID來讓你和

00:11:53.046 --> 00:11:55.315 
你的未設置的
settings對象作比較

00:11:55.616 --> 00:11:56.617 
這是個不錯的特性

00:11:56.683 --> 00:12:00.120 
它讓你在沒得到你的照片前
就知道照片的尺寸

00:12:00.521 --> 00:12:04.525 
所以你能提前計劃 做一些分配
或是其他你需要做的事

00:12:05.659 --> 00:12:08.462 
它會告訴你flash
被設爲on還是off

00:12:08.762 --> 00:12:10.898 
靜態圖片防抖是被設爲on還是off

00:12:12.432 --> 00:12:14.501 
它也支持包圍曝光拍攝

00:12:14.735 --> 00:12:18.272 
這是一種你請求
多張圖片時的特殊拍攝手法

00:12:18.405 --> 00:12:20.474 
有時候伴隨着不同的曝光值

00:12:20.807 --> 00:12:25.179 
例如 可能是這麼來做的
如果你想將多張曝光圖片合併在一起

00:12:25.245 --> 00:12:28.148 
來生成像是HDR這樣的效果

00:12:28.615 --> 00:12:32.853 
我在2014年的508會議上
講了很多關於這類拍攝的問題

00:12:33.554 --> 00:12:35.522 
去看下那個視頻來回想一下

00:12:36.256 --> 00:12:43.030 
在AVCaptureStillImageOutput中
我們支持自動包圍曝光和定製包圍曝光

00:12:43.797 --> 00:12:46.400 
而請求包圍曝光的新方法是

00:12:46.667 --> 00:12:50.871 
初始化一個
AVCapturePhotoBracketSettings

00:12:51.004 --> 00:12:53.073 
它像是照片設置但它是一個子類

00:12:53.140 --> 00:12:54.741 
它有你額外所需的東西

00:12:54.808 --> 00:12:56.410 
用來完成包圍曝光拍攝

00:12:57.277 --> 00:13:01.215 
當你想創建一個包圍曝光時
你要聲明一個數組

00:13:01.281 --> 00:13:03.417 
數組是AVCaptureBracketed
StillImageSettings的

00:13:03.483 --> 00:13:07.554 
這是個從AVCaptureStillImageOutput
時代就有的對象

00:13:08.222 --> 00:13:10.224 
你給每個曝光表明其中一個值

00:13:10.290 --> 00:13:14.895 
例如 -2EV +2EV 0EV

00:13:15.495 --> 00:13:18.899 
如果你是用iPhone 6s
或者6s Plus

00:13:18.966 --> 00:13:21.702 
你可以選擇啓用鏡頭防抖

00:13:21.768 --> 00:13:24.538 
利用isLensStabilizationEnabled屬性

00:13:25.339 --> 00:13:27.574 
請你回憶下我之前幻燈片
展示給你們的時間軸

00:13:27.641 --> 00:13:32.279 
照片被傳到didFinishProcessing
PhotoSampleBuffer回調函數

00:13:32.412 --> 00:13:35.082 
當你請求三張圖片的包圍曝光時

00:13:35.315 --> 00:13:37.217 
該回調函數會被調用三次

00:13:37.284 --> 00:13:38.385 
每張圖片一次

00:13:38.719 --> 00:13:42.856 
第五個參數告訴你是哪個包圍曝光設置

00:13:42.923 --> 00:13:45.826 
在這個圖片請求中與之協同的

00:13:46.860 --> 00:13:50.430 
我們很喜歡新的
AVCapturePhotoOutput

00:13:50.564 --> 00:13:52.633 
所以我們想讓你馬上就用它

00:13:52.900 --> 00:13:57.004 
因此我們在iOS10中不贊成使用
AVCaptureStillImageOutput

00:13:57.070 --> 00:14:00.440 
和其他所有AVCaptureDevice中
閃光燈相關的屬性

00:14:00.741 --> 00:14:03.243 
這纔是你應該用的

00:14:04.211 --> 00:14:07.748 
如我所說
閃光燈拍攝的一部分被打包到

00:14:07.814 --> 00:14:11.518 
相片設置中
它是一個更好的程序接口

00:14:11.885 --> 00:14:13.153 
儘快的使用它吧

00:14:14.655 --> 00:14:16.089 
最後一項是

00:14:16.957 --> 00:14:19.560 
在我們在說下面之前說下photo的好處

00:14:20.494 --> 00:14:22.196 
它們使書籤功能更容易

00:14:22.863 --> 00:14:24.498 
即時的設置設定

00:14:25.265 --> 00:14:26.800 
有把握的請求追蹤

00:14:27.267 --> 00:14:28.769 
它對Apple來說也有益處

00:14:28.836 --> 00:14:32.439 
因爲它對我們來說
像是個可擴展的回調函數調色板

00:14:32.506 --> 00:14:35.209 
我們可以在將來加入
新的方法並回調給你

00:14:35.642 --> 00:14:38.846 
最後一點對於
接下來我要說的特性很重要

00:14:38.912 --> 00:14:40.981  
我要說的就是Live Photos

00:14:41.815 --> 00:14:46.820  
Apple.com上有關於何謂
Live Photos好的宣傳廣告

00:14:46.887 --> 00:14:50.457 
靜態照片捕捉到的是瞬間凝結的記憶

00:14:50.924 --> 00:14:52.993 
而有了Live Photos
你能將這些瞬間變成

00:14:53.060 --> 00:14:55.529 
令人難忘 鮮活生動的回憶

00:14:56.730 --> 00:14:58.498 
Live Photos的美妙之處在於

00:14:58.565 --> 00:15:02.002 
它們會珍藏你留存於
記憶深處的美好瞬間

00:15:02.736 --> 00:15:06.240 
在這張照片裏
這是張不錯的靜態照片

00:15:07.007 --> 00:15:10.544 
巨大惡心的沙蟹
這是我外甥從沙灘上挖出來的

00:15:10.611 --> 00:15:11.445 
一張不錯的照片

00:15:11.512 --> 00:15:13.080 
如果我3D touch它

00:15:17.084 --> 00:15:19.520 
好了 現在我想起來了
那天太冷了

00:15:19.586 --> 00:15:21.989 
他從來沒到過海邊
他的嘴脣都凍青了

00:15:22.055 --> 00:15:24.091 
他在海水裏時間太長
手都一直在發抖

00:15:24.324 --> 00:15:26.793 
我還在開始時候聽到我哥哥的聲音

00:15:26.994 --> 00:15:29.396 
所有這些都幫我進行了回憶

00:15:29.630 --> 00:15:32.999 
因爲我更多的感官被喚醒了

00:15:33.901 --> 00:15:35.903 
人們發現了各種新的方式

00:15:35.969 --> 00:15:38.272 
把Live Photos
當做藝術創作的媒介使用

00:15:38.672 --> 00:15:40.941 
這張是一個旋轉的自拍

00:15:41.441 --> 00:15:44.311  
我們的相機產品團隊
把它叫做甜甜圈自拍

00:15:46.513 --> 00:15:48.415 
要完成它可是相當有難度的

00:15:48.916 --> 00:15:52.986 
有張用Live Photo拍的
正在旋轉的轉椅也很流行

00:15:53.253 --> 00:15:54.087 
看看那張吧

00:15:54.922 --> 00:15:57.791 
我是個展現驚喜的
live photo的大粉絲

00:15:58.158 --> 00:16:00.093 
不幸的是 我們孩子們也是

00:16:06.366 --> 00:16:08.535 
一個三秒的窗口實在太有誘惑力了

00:16:08.602 --> 00:16:10.704 
對於我這麼一個天生的
嚇人照片愛好者來說

00:16:11.471 --> 00:16:15.342 
Live Photos是從
Apple設計工作室思考體驗中誕生

00:16:15.409 --> 00:16:16.410 
其誕生的前提是

00:16:16.810 --> 00:16:18.712 
即便我們現在有了這麼多好的屏幕

00:16:18.779 --> 00:16:20.614 
來分享和觀看內容

00:16:21.048 --> 00:16:25.118 
照片體驗已經保持靜態有150年了

00:16:25.652 --> 00:16:28.655 
我們劃過屏幕瀏覽的那些JPEG文件
只不過就是數字版本的

00:16:28.722 --> 00:16:32.159 
那些我們留存在鞋盒中相紙的化學藥劑

00:16:32.559 --> 00:16:35.229 
而它仍然是
人們保存他們回憶的主要方式

00:16:35.295 --> 00:16:37.531 
所以難道我們不能做得更好麼

00:16:38.265 --> 00:16:40.434 
經過了很多的試驗和原型體驗

00:16:40.501 --> 00:16:43.136 
我們得出了這個新的媒體體驗

00:16:43.704 --> 00:16:44.805 
一個時刻或是一個記憶

00:16:45.005 --> 00:16:48.075 
首先最重要的是它還是一張靜態照片

00:16:48.442 --> 00:16:50.711 
它仍然和以前照片的質量一樣好

00:16:50.777 --> 00:16:54.281 
它是一張1200萬像素全分辨率的
靜態JPEG圖片

00:16:54.581 --> 00:16:57.751 
它與非LIve Photos
有着相同的質量

00:16:57.818 --> 00:16:59.386 
讓我再強調一遍

00:16:59.920 --> 00:17:04.090 
Live Photos有Apple
非Live Photos的一切優點

00:17:04.223 --> 00:17:07.194 
所以你把它打開沒有犧牲任何東西

00:17:08.962 --> 00:17:11.932 
另一個很棒的點子是平滑拍攝

00:17:12.398 --> 00:17:14.300 
這意味着你不需要學習任何新的東西

00:17:14.434 --> 00:17:16.569 
你就如你原來一樣拍攝照片就可以

00:17:17.104 --> 00:17:20.273 
還是那樣 定景 按快門

00:17:20.607 --> 00:17:22.209 
不用考慮別的

00:17:23.777 --> 00:17:25.679 
一張Live Photo
同樣也是一段記憶

00:17:26.012 --> 00:17:28.615 
它能比靜態圖片調動更多感覺

00:17:28.682 --> 00:17:30.417 
它可以幫你喚起回憶

00:17:31.451 --> 00:17:34.588 
所以它就像是一部短電影 3秒的電影

00:17:34.655 --> 00:17:38.725 
1.5秒是靜態圖之前發生的事
1.5秒是之後的

00:17:39.326 --> 00:17:43.797 
我們能以
屏幕分辨率或者1080p拍攝它

00:17:45.566 --> 00:17:47.134 
而且它包含音頻

00:17:48.468 --> 00:17:50.871 
我們還在持續改進它的設計

00:17:51.271 --> 00:17:55.876 
iOS9.1中我們加入挺棒的特性
自動裁剪Live Photos

00:17:55.943 --> 00:17:59.279 
以防你你衝着你的鞋子
或者口袋做出揮動的動作

00:17:59.513 --> 00:18:01.648 
我們會自動裁掉這些
去除掉

00:18:01.715 --> 00:18:03.317 
你不想在影片中看到的部分

00:18:03.851 --> 00:18:05.853 
在iOS 10中
我們加入新特性讓它變得更好

00:18:05.953 --> 00:18:08.989 
現在所有的Live Photo
影片都是防抖的了

00:18:10.190 --> 00:18:13.493 
另一個iOS10的新特性是
拍攝時可以播放音樂

00:18:13.560 --> 00:18:14.995 
如果你正在放音樂

00:18:17.598 --> 00:18:19.233 
是啊 這個特性不錯

00:18:19.299 --> 00:18:20.200 
我也挺喜歡的

00:18:21.902 --> 00:18:24.571 
爲了讓它成爲一個時刻也是一段記憶

00:18:24.705 --> 00:18:27.040 
如你所料的
Live Photo有兩部分組成

00:18:27.107 --> 00:18:29.142 
JPEG及
QuickTime電影文件

00:18:29.510 --> 00:18:33.380 
這兩部分共享一個通用的
UUID以此來連繫它們

00:18:33.780 --> 00:18:35.516 
JPEG文件的UUID被存儲在

00:18:35.582 --> 00:18:37.684 
Apple Maker Note裏

00:18:38.418 --> 00:18:40.354 
影片資源 也就是我說的

00:18:40.420 --> 00:18:43.223 
通常三秒長 有視頻軌

00:18:43.290 --> 00:18:46.560 
大概是1080p
有着3比1的寬高比

00:18:47.194 --> 00:18:50.597 
它包含一個帶有示例的定時元軌道

00:18:50.664 --> 00:18:53.667 
就相當於是對應靜態圖片的時間

00:18:53.901 --> 00:18:55.269 
在影片的時間軸上

00:18:55.636 --> 00:18:58.071 
它還包含了一些上層影片的元數據

00:18:58.138 --> 00:19:00.507 
可以用來與JPEG的元數據來配對

00:19:00.741 --> 00:19:03.677 
這叫做QuickTime內容識別器

00:19:04.077 --> 00:19:06.313 
它的值是一個UUID風格的流

00:19:08.248 --> 00:19:10.651 
需要怎樣
才能拍攝Live Photos呢

00:19:11.418 --> 00:19:12.853 
在AVCapturePhotoOutput裏

00:19:12.920 --> 00:19:17.224 
有一個屬性叫
isLivePhotoCaptureSupported

00:19:17.291 --> 00:19:18.325 
你得確保它被支持

00:19:18.392 --> 00:19:19.993 
它不是在所有設備上都被支持的

00:19:20.494 --> 00:19:24.598 
目前它只支持
AVCaptureSessionPresetPhoto

00:19:25.666 --> 00:19:30.704 
你要使用AVCapturePhotoOutput
.isLivePhotoCaptureEnabled

00:19:30.771 --> 00:19:31.738 
將其設爲真

00:19:32.239 --> 00:19:35.509 
你需要在你開始運行會話之前啓用它

00:19:35.576 --> 00:19:38.812 
否則會造成會話破壞性的重新配置

00:19:38.879 --> 00:19:39.947 
你絕對想避免這麻煩

00:19:40.881 --> 00:19:44.618 
如果你在你的Live Photo
影片中播放音頻

00:19:44.685 --> 00:19:47.721 
你要爲麥克風添加一個
AVCaptureDeviceInput

00:19:48.121 --> 00:19:49.556 
這很重要 不要忘了

00:19:50.457 --> 00:19:53.560 
而且不支持同時錄製

00:19:53.627 --> 00:19:56.997 
使用AVCaptureMovieOutput
錄製的常規電影

00:19:57.064 --> 00:19:58.866 
和Live Photos

00:19:59.166 --> 00:20:02.903 
因此如果在會話的拓撲圖上
有一個影片文件輸出

00:20:02.970 --> 00:20:04.838 
它會使Live Photo拍攝禁用

00:20:06.139 --> 00:20:08.809 
可按通常方式配置
LivePhotoCapture

00:20:09.209 --> 00:20:11.712 
它有默認的結構體

00:20:12.112 --> 00:20:17.084 
不過你要額外聲明一個
LivePhotoMovieFileURL

00:20:17.384 --> 00:20:20.220 
在這裏我們會寫入影片

00:20:20.287 --> 00:20:23.457 
並且它必須在你的沙盒內
你還得能訪問它

00:20:24.324 --> 00:20:28.295 
你不需要聲明任何的
livePhotoMovieMetadata

00:20:28.362 --> 00:20:29.630 
但是如果你想的話也可以

00:20:30.097 --> 00:20:33.867 
在此我舉個使用
author元數據的例子

00:20:33.934 --> 00:20:35.636 
我把自己設爲author

00:20:35.702 --> 00:20:37.804 
以便全世界都知道這是我的影片

00:20:37.871 --> 00:20:42.309 
你也可以加些有趣的東西
像是往你的影片里加入GPS標籤

00:20:42.876 --> 00:20:45.612 
讓我們談談跟
Live Photo有關的委託方法

00:20:45.879 --> 00:20:48.115 
如我之前所說的
我們有個可擴展的調色板

00:20:48.182 --> 00:20:50.117 
關於委託回調函數的
我們將會用到它

00:20:50.851 --> 00:20:54.021 
當拍攝Live Photo時
你的第一個回調函數讓你知道

00:20:54.087 --> 00:20:55.989 
有一個Live Photo
將會被錄製

00:20:56.056 --> 00:20:58.659 
藉由告訴你影片定好的尺寸

00:20:58.725 --> 00:21:01.261 
看到了嗎 你不僅調整了照片的尺寸

00:21:01.328 --> 00:21:03.931 
你還知道了Live Photo
的尺寸會是多大

00:21:04.331 --> 00:21:05.999 
你收到了預期的回調函數

00:21:06.066 --> 00:21:10.237 
還包含了一張和以前一樣
會保存在內存中的JPEG文件

00:21:10.304 --> 00:21:11.905 
不過我們會給你一些新的東西

00:21:12.840 --> 00:21:15.776 
一個Live Photo影片
實際就是三秒的影片

00:21:15.843 --> 00:21:17.611 
在其正中間夾着一張靜態圖片

00:21:17.978 --> 00:21:22.216 
這意味着在你的拍攝請求
發出的最多1.5秒內

00:21:22.416 --> 00:21:24.151 
你將會收到一個新的回調函數

00:21:24.218 --> 00:21:25.619 
而該回調函數有個古怪名字

00:21:25.886 --> 00:21:31.458 
叫didFinishRecordingLivePhotoMovie
ForEventualFileAtURL.

00:21:31.692 --> 00:21:32.726 
試試分析下語法吧

00:21:33.427 --> 00:21:38.031 
它的意思是文件還沒被寫好
但是已經採好樣了

00:21:38.098 --> 00:21:40.100 
爲這部影片

00:21:40.234 --> 00:21:44.571 
換句話說
若UI中有Live Photo標記

00:21:44.805 --> 00:21:46.907 
現在最好把它去掉了

00:21:46.974 --> 00:21:48.942 
讓人們知道不用再舉着相機不動了

00:21:49.443 --> 00:21:52.346 
現在最好把
Live Photo標記去掉

00:21:53.113 --> 00:21:57.384 
很快地 影片文件就會被寫入完成

00:21:57.551 --> 00:22:01.688 
然後你會得到didFinishProcessing
LivePhotoToMovieFileAtURL.

00:22:01.889 --> 00:22:04.424 
如果你製作Live Photos
那這是必需的回調函數

00:22:04.858 --> 00:22:06.760 
現在你可以欣賞影片了

00:22:07.895 --> 00:22:10.631 
最後你豎個大拇指吧 都完成了

00:22:11.265 --> 00:22:13.967 
我們所有該做的都做完了

00:22:14.501 --> 00:22:16.937 
要注意的是拍攝
Live Photo的JPEG部分

00:22:17.004 --> 00:22:19.940 
和拍攝靜態照片是一樣的

00:22:20.007 --> 00:22:22.709 
它作爲樣例緩存保存在內存中

00:22:23.043 --> 00:22:25.679 
利用didFinishProcessingPhoto
SampleBuffer這個回調函數

00:22:25.746 --> 00:22:26.747 
如我們已見過的方式

00:22:27.381 --> 00:22:30.851 
如果你想把它寫到硬盤上
那可是個瑣碎的活

00:22:31.652 --> 00:22:34.087 
我們在AVCapturePhotoOutput裏
有一個類方法

00:22:34.154 --> 00:22:38.325 
用來把JPEG重寫成Data文件
D是大寫的

00:22:38.759 --> 00:22:41.929 
這個方法很適合將
JPEG文件寫入硬盤中

00:22:42.296 --> 00:22:43.931 
你可以在這裏的action看到

00:22:44.431 --> 00:22:49.002 
我先跳過第二個參數
也就是previewPhotoSampleBuffer

00:22:49.069 --> 00:22:50.604 
我們一會兒再講它

00:22:52.105 --> 00:22:55.676 
在此我有個做
Live Photo的建議

00:22:56.076 --> 00:22:58.645 
拍攝Live Photo是
某一類拍攝的例子

00:22:58.712 --> 00:23:00.380 
也就是傳遞多種資源的拍攝

00:23:00.447 --> 00:23:03.450 
這有點像分單購物

00:23:03.517 --> 00:23:06.486 
比如你使用一個訂單購買電腦
和使用另外一個訂單購買適配器

00:23:07.554 --> 00:23:10.858 
所以我們發現當傳遞多種資源時
我們可以很便捷的

00:23:10.924 --> 00:23:12.793 
我們所寫的測試應用中進行測試

00:23:13.126 --> 00:23:18.198 
來實例化一個新的
AVCapturePhotoDelegate對象

00:23:18.265 --> 00:23:21.301 
爲當前場景的每個照片請求

00:23:21.869 --> 00:23:24.438 
接下來在這個對象裏
你可以彙集

00:23:24.505 --> 00:23:25.506 
所有你得到的東西

00:23:25.572 --> 00:23:28.876 
面向這個請求的樣本緩衝影片等等

00:23:28.942 --> 00:23:31.545 
然後有個方便的地方來處理這個對象

00:23:31.612 --> 00:23:34.081 
即thumbs up回調函數
標誌着我們完成了

00:23:34.381 --> 00:23:35.816 
這是一個有用的小提示

00:23:37.251 --> 00:23:38.886 
在你的資源被寫入硬盤時

00:23:38.952 --> 00:23:41.455 
你還需要做幾個步驟

00:23:41.788 --> 00:23:43.857 
來獲取完全的動態圖片體驗

00:23:43.924 --> 00:23:46.560 
儘管視頻部分是
標準的QuickTime影片

00:23:46.827 --> 00:23:48.695 
但那並不意味着它可被從頭到尾播放

00:23:48.762 --> 00:23:51.131 
像是用一個AVPlayer
播放普通電影那樣

00:23:51.431 --> 00:23:53.534 
這裏有一個可以回放它的小竅門

00:23:53.800 --> 00:23:58.372 
它應該可以在照片的
動態圖像時間緩入緩出

00:23:58.438 --> 00:24:01.175 
當你在這些資源間滑動的時候

00:24:01.241 --> 00:24:03.744 
它們會在photos應用裏
有些許移動

00:24:04.144 --> 00:24:06.446 
爲獲得完全的
Live Photo回放體驗

00:24:06.513 --> 00:24:09.516 
你需要使用photos和
photos UI框架

00:24:09.883 --> 00:24:12.085 
還有與Live Photo相關的類

00:24:12.419 --> 00:24:15.656 
用來將你的RAW資源攝取到照片庫中

00:24:15.889 --> 00:24:18.859 
並恰當的播放它們 例如
通過LivePhotoView

00:24:20.127 --> 00:24:21.461 
且iOS 10中新提供了

00:24:21.528 --> 00:24:26.366 
photos框架可以讓你就像編輯
靜態照片來編輯Live Photo

00:24:26.733 --> 00:24:27.768 
這是個很棒的消息

00:24:28.068 --> 00:24:29.102 
我想做一下演示

00:24:36.343 --> 00:24:40.113 
在此我們有一些示例代碼
令人尊敬的AVCam

00:24:40.180 --> 00:24:41.815 
得有五年沒有被用過了

00:24:42.449 --> 00:24:44.551 
但我們現在又重新裝扮它

00:24:44.618 --> 00:24:47.521 
以便它有特定的照片模式和影片模式

00:24:47.855 --> 00:24:50.591 
這是因爲只能在照片模式
使用Live Photos

00:24:50.991 --> 00:24:52.926 
你要注意的是在頂部有標記告訴你

00:24:52.993 --> 00:24:55.062 
Live Photo模式是開還是關

00:24:56.029 --> 00:24:57.531 
你還可以切換攝像頭

00:24:57.798 --> 00:24:59.933 
我會試着做下那個很難的甜甜圈自拍

00:25:00.000 --> 00:25:01.502 
讓我們來看看我做的成不成功

00:25:01.835 --> 00:25:07.574 
你要做的就是開始
在中間拍一下 然後結束

00:25:07.908 --> 00:25:10.844 
注意看當我在自拍的時候
是有一個live標記出現的

00:25:10.911 --> 00:25:13.881 
而這就是在運用
我之前跟你說的回調函數

00:25:15.282 --> 00:25:18.118 
好了 現在它被寫入了照片庫

00:25:18.685 --> 00:25:20.888 
然後 在中間的某處拍一下

00:25:21.221 --> 00:25:22.122 
不錯吧

00:25:22.389 --> 00:25:24.258 
但這還不是我們所能做的全部

00:25:24.391 --> 00:25:26.760 
在iOS 9中
當你想編輯Live Photo時

00:25:26.827 --> 00:25:28.529 
你會丟失其中的影片部分

00:25:28.762 --> 00:25:32.533 
但是現在你既可以在photos應用
中本地編輯

00:25:32.866 --> 00:25:35.269  
也可以使用應用內你所提供的代碼

00:25:35.536 --> 00:25:38.272  
比如這個叫做
LivePhotoEditor的小例子

00:25:38.872 --> 00:25:42.109  
它在我所包含的照片編輯擴展應用中

00:25:42.910 --> 00:25:45.879 
我可以加上簡單的濾鏡
或是裁剪這部影片

00:25:46.513 --> 00:25:49.616 
通過它來加上有色濾鏡非常的簡單

00:25:49.816 --> 00:25:51.451 
值得注意的是它並沒有丟失影片

00:25:51.518 --> 00:25:52.519 
我還可以播放它

00:25:52.586 --> 00:25:54.721 
然後 在中間的某處拍一下

00:25:54.788 --> 00:25:56.757 
棒極了
你可以編輯Live Photos了

00:26:03.730 --> 00:26:05.966 
好的 現在說回AVCam

00:26:06.033 --> 00:26:09.169 
就如我所說的
它有單獨的視頻和照片錄製模式

00:26:09.236 --> 00:26:10.804 
所以你能獲得最棒的照片體驗

00:26:10.871 --> 00:26:12.873 
你可以獲得最棒的影片製作體驗

00:26:13.273 --> 00:26:15.375 
而且它展示了恰當的live標記技術

00:26:15.442 --> 00:26:16.577 
就如我談到的

00:26:16.643 --> 00:26:19.313 
它也向你展示瞭如何將其寫入到資源庫

00:26:19.613 --> 00:26:21.582 
該示例代碼現在已經可見了

00:26:21.648 --> 00:26:24.284 
你會在我們會話的頁面上找到它

00:26:25.252 --> 00:26:26.553 
它甚至都被Swift化了

00:26:26.920 --> 00:26:29.056 
如果你想了解更多關於
Live Photo編輯的內容

00:26:29.122 --> 00:26:32.092 
請在週四上午11點參加505會話

00:26:32.459 --> 00:26:33.527 
你會聽到其內容

00:26:35.128 --> 00:26:39.132 
我們還支持了一個叫做
LivePhotoCaptureSuspension的特性

00:26:39.333 --> 00:26:42.603 
在這個小例子裏展示了
它什麼時候會有用

00:26:43.036 --> 00:26:45.038 
假如說你有一個拍照的app

00:26:45.105 --> 00:26:47.641 
能發出煩人的霧角的聲音

00:26:48.842 --> 00:26:50.244 
就跟着我想象該例子的場景

00:26:51.178 --> 00:26:52.145 
它會拍照

00:26:52.379 --> 00:26:53.947 
發出煩人的霧角聲

00:26:54.248 --> 00:26:55.682 
現在假如說在時間軸上

00:26:55.749 --> 00:26:57.718 
你的用戶在此拍了張Live Photo

00:26:58.418 --> 00:27:01.922 
然後他們在這裏發出了煩人的霧角聲

00:27:02.756 --> 00:27:06.293 
接下來在聲音放完後又在此
拍了另一張Live Photo

00:27:07.728 --> 00:27:09.329 
這就會產生一個問題

00:27:09.396 --> 00:27:14.168 
因爲兩張照片的影片部分與

00:27:14.334 --> 00:27:16.069 
煩人的霧角聲重疊了

00:27:16.570 --> 00:27:19.106 
你這下同時毀了
兩部Live Photos影片

00:27:19.473 --> 00:27:21.975 
你會在一張照片裏聽到霧角聲的結尾

00:27:22.042 --> 00:27:24.011 
而在另一張聽到霧角聲的開頭

00:27:25.012 --> 00:27:27.281 
這可不太好 因此爲了應對這個問題

00:27:27.681 --> 00:27:31.585  
你可以將
isLivePhotoCaptureSuspended設爲真

00:27:31.652 --> 00:27:33.520  
就在你要放煩人的霧角聲之前

00:27:34.154 --> 00:27:37.090  
這會使得任何在處理過程中的
Live Photos

00:27:37.291 --> 00:27:39.893  
被強行裁減到該點

00:27:40.327 --> 00:27:41.395  
你可以同樣如此處理

00:27:41.461 --> 00:27:44.298  
把isLivePhotoCaptureSuspended
設爲假

00:27:44.364 --> 00:27:48.368  
這會使結尾處有一個清楚的中斷

00:27:48.435 --> 00:27:51.104  
以便沒有任何早於該點的內容

00:27:51.572 --> 00:27:53.740  
會在你取消暫停的時候
出現在你的影片中

00:27:53.841 --> 00:27:54.908 
一個不錯的小特性

00:27:56.577 --> 00:27:57.678 
讓我們談談設備支持

00:27:57.744 --> 00:28:00.013 
我們應該讓什麼設備
支持LivePhoto拍攝呢

00:28:00.414 --> 00:28:03.684 
我們在所有近年的iOS設備上支持它

00:28:03.750 --> 00:28:07.487 
有個簡單的方法來記憶就是
所有具有1200萬像素攝像頭

00:28:07.654 --> 00:28:09.389 
設備都會支持Live Photos

00:28:11.825 --> 00:28:14.494 
接下來進入我們今天的下一個
重要特性介紹

00:28:14.561 --> 00:28:16.029 
那就是RAW相片拍攝

00:28:18.599 --> 00:28:20.934 
爲了解釋什麼是RAW圖像

00:28:21.001 --> 00:28:25.172 
我得先高度概述一下
CMOS傳感器是如何工作的

00:28:26.006 --> 00:28:31.144  
CMOS傳感器會採集光中的光子
通過二維陣列的傳感器

00:28:32.079 --> 00:28:35.349  
數組的上層叫做顏色過濾陣列

00:28:36.049 --> 00:28:38.252  
當光線透過上層時

00:28:38.485 --> 00:28:40.587  
它只允許一種顏色通過

00:28:40.654 --> 00:28:43.690  
紅 綠 藍 其一
依照Bayer模式

00:28:44.358 --> 00:28:46.793  
綠色在這個小棋盤上
是其他兩種顏色的兩倍多

00:28:46.860 --> 00:28:49.863  
因爲我們的眼睛
對於綠色光有着兩倍的敏感度

00:28:49.930 --> 00:28:51.398  
相比於其他兩種顏色來說

00:28:52.165 --> 00:28:54.768  
底層被稱爲傳感器陣列

00:28:56.203 --> 00:29:02.976 
在RAW文件中實際存儲的是強度
此強度即紅 綠 藍光的數量

00:29:03.043 --> 00:29:06.346 
穿過傳感器
每個探測器

00:29:06.947 --> 00:29:09.616 
也需要被存儲在Bayer模式中

00:29:09.683 --> 00:29:13.086 
換句話說 就是紅 綠 藍光的排列

00:29:13.453 --> 00:29:15.556 
以便之後將其去馬賽克化

00:29:16.190 --> 00:29:18.625 
你還要存許多其他元數據

00:29:18.692 --> 00:29:20.994 
像是顏色信息 曝光信息

00:29:22.663 --> 00:29:24.998 
因此RAW轉換器工作很繁重

00:29:25.265 --> 00:29:27.835 
RAW會提取所有這些東西

00:29:27.901 --> 00:29:29.636 
並將其轉換爲RGB圖像

00:29:31.171 --> 00:29:33.207 
去馬賽克化只不過是冰山一角

00:29:33.273 --> 00:29:37.211 
在其被最終呈現在屏幕上之前
有許多工作需要完成

00:29:38.412 --> 00:29:39.880  
如果做個類比的話

00:29:40.180 --> 00:29:45.118  
存儲RAW文件很大程度上就像是
存儲用來烤蛋糕的原料

00:29:45.552 --> 00:29:48.222  
然後你走到哪都得帶着這些原料

00:29:49.056 --> 00:29:50.257  
這樣可太重了

00:29:50.591 --> 00:29:51.525  
也太糟糕了

00:29:52.226 --> 00:29:54.761  
每次你都要花些時間來烘烤它

00:29:55.562 --> 00:29:56.997 
如果你讓兩個不同的烘焙師

00:29:57.130 --> 00:29:58.932 
用相同的原料來烤蛋糕

00:29:58.999 --> 00:30:01.268 
你或許會得到口味有些許不同的蛋糕

00:30:02.336 --> 00:30:04.771 
但是使用RAW也有一些很大的好處

00:30:05.973 --> 00:30:09.343 
首先最重要的是
你可以靈活掌握烘焙的時間

00:30:09.409 --> 00:30:14.248 
你是把原料都在身邊
但你可以來年再做一個更好的蛋糕

00:30:15.716 --> 00:30:21.321 
這裏不會有像是BGRA或者420
那樣的壓縮出現

00:30:21.388 --> 00:30:22.723 
你有更多的比特可供操作

00:30:22.923 --> 00:30:28.629 
有一個10比特的RAW傳感器
包括在每像素14比特而不是8比特

00:30:30.163 --> 00:30:32.199 
另外你有很多的淨空間可供編輯

00:30:33.200 --> 00:30:37.838 
而且還給予你
創作空間來做出不同的決定

00:30:37.905 --> 00:30:40.307 
其實你就是把烘焙時間往後拖

00:30:41.208 --> 00:30:42.709 
那麼JPEG又是什麼呢

00:30:43.310 --> 00:30:45.345 
RAW圖像提供了很多優勢

00:30:45.412 --> 00:30:47.714 
但它們不是最終的存在形式

00:30:48.048 --> 00:30:51.385 
重要的是你要清楚你選擇RAW時
是要有所取捨的

00:30:51.852 --> 00:30:54.555 
JPEG仍然是一個有吸引力的選項

00:30:55.756 --> 00:31:00.861 
JPEG就像是
專爲你烘焙的Apple蛋糕

00:31:01.995 --> 00:31:03.230 
這是個不錯的蛋糕

00:31:03.297 --> 00:31:05.632 
它包含着Apple的所有善意

00:31:07.134 --> 00:31:08.135 
快得多的渲染速度

00:31:08.202 --> 00:31:10.437 
你就不必再帶着這麼多原料了

00:31:11.471 --> 00:31:15.475 
你還會獲得像是防抖那樣的好東西

00:31:15.676 --> 00:31:19.379 
就如我之前提到的
我們使用多張圖片融合來進行防抖

00:31:19.746 --> 00:31:21.415 
你用一單張
RAW照片是得不到的

00:31:21.481 --> 00:31:23.984 
不管它質量多好也不行
因爲我們是要拍

00:31:24.051 --> 00:31:25.986 
我覺得就有點像是多層的蛋糕

00:31:26.620 --> 00:31:29.256 
所以你用單張的圖片是做不到的

00:31:30.123 --> 00:31:32.125 
而且你也獲得了更小的文件尺寸

00:31:33.460 --> 00:31:36.663 
因此所有這些東西使得JPEG
變成非常有吸引力的替代方案

00:31:36.763 --> 00:31:39.199 
你得決定你想要用哪一個

00:31:39.266 --> 00:31:40.367 
纔對你的應用來說更好

00:31:41.168 --> 00:31:44.071 
我們用四個字符的編碼
來識別RAW格式

00:31:44.137 --> 00:31:47.941 
如我們在Core Video框架中
識別普通像素格式那樣

00:31:48.342 --> 00:31:51.545 
在CVPixelBuffer.h中
加入了四個新的常量

00:31:51.612 --> 00:31:53.881 
用來描述四種不同的Bayer樣式

00:31:54.214 --> 00:31:56.149 
你會在相機應用中遇到的

00:31:56.416 --> 00:31:57.284 
它們被列在這

00:31:57.417 --> 00:31:58.685 
它們基本上是描述了

00:31:58.752 --> 00:32:00.487 
紅 綠 藍光在棋盤上的順序

00:32:02.489 --> 00:32:05.425 
你怎麼用AVCapturePhotoOutput
來拍攝RAW呢

00:32:05.492 --> 00:32:06.293 
其實挺簡單的

00:32:07.027 --> 00:32:10.464 
RAW僅在使用相片格式時才被支持

00:32:10.531 --> 00:32:13.100 
也就是預設的照片
跟Live Photo一樣

00:32:14.034 --> 00:32:16.003 
而且它只支持後置攝像頭

00:32:17.204 --> 00:32:21.475 
我們支持RAW的包圍曝光
所以你可以拍攝包圍曝光

00:32:21.542 --> 00:32:23.710 
例如 給三張RAW照片

00:32:24.745 --> 00:32:26.146 
爲了請求一個RAW拍攝

00:32:26.213 --> 00:32:28.549 
你要創建一個
AVCapturePhotoSettings對象

00:32:28.615 --> 00:32:31.151 
但是神奇吧
這裏有個不同的結構體

00:32:31.451 --> 00:32:33.687 
該結構體接收
rawPixelFormat

00:32:34.488 --> 00:32:38.725 
那你怎麼決定應該
讓它生成哪種RAW格式呢

00:32:38.992 --> 00:32:41.628 
你可以問下PhotoOutput

00:32:41.695 --> 00:32:45.499 
它會告訴你我有RAW相片像素格式

00:32:45.566 --> 00:32:48.101 
你可以從中選擇一個

00:32:49.603 --> 00:32:52.606 
你聲明的RAW格式
必須要被硬件所支持

00:32:53.440 --> 00:32:57.044 
還有一個重要的事
是在這些RAW設置當中

00:32:57.678 --> 00:33:03.851 
SIS是沒有意義的
因爲這不是一個多圖片融合的場景

00:33:04.151 --> 00:33:07.020 
因此autoStillImage
StabilizationEnabled

00:33:07.087 --> 00:33:09.156 
需要被設爲no
否則會拋出異常

00:33:09.656 --> 00:33:11.992 
highResolutionPhotoEnabled也是

00:33:12.059 --> 00:33:14.862 
毫無意義的
因爲你只是要獲得RAW的功能

00:33:15.362 --> 00:33:16.964 
所以它也要被設爲false

00:33:18.532 --> 00:33:20.868 
有一個關於RAW照片的
單獨委託回調函數

00:33:20.934 --> 00:33:25.472 
叫做didFinishProcessing
RAWPhotoSampleBuffer

00:33:25.873 --> 00:33:28.575 
你非常才思敏捷的話

00:33:28.675 --> 00:33:31.411 
你就會注意到它有着完全相同的參數

00:33:31.512 --> 00:33:35.649 
就和你之前獲得
常規照片時的回調函數一樣

00:33:35.716 --> 00:33:38.552 
didFinishProcessing
RAWPhotoSampleBuffer這個回調函數

00:33:38.619 --> 00:33:40.287 
現在你可能想問

00:33:40.354 --> 00:33:45.292 
我們爲何還這麼麻煩給RAW樣本緩衝
弄一個新的委託回調函數呢

00:33:45.359 --> 00:33:48.328 
既然它和另一個有着完全相同的參數

00:33:48.862 --> 00:33:49.997 
其實有一個很好的理由

00:33:50.397 --> 00:33:51.965 
這個理由就是

00:33:53.400 --> 00:33:56.069 
爲了支持RAW plus processed圖片

00:33:56.236 --> 00:34:00.641 
我們支持該種照片
就像DSLR相機 無反光板相機那樣

00:34:01.008 --> 00:34:04.878 
這是種能讓你同時得到RAW和JPEG
的工作流

00:34:04.978 --> 00:34:06.713 
即processed圖片的意思

00:34:07.214 --> 00:34:10.918 
能同時拍攝RAW和JPEG
可是相當專業的特性

00:34:12.286 --> 00:34:14.855 
你能獲得RAW plus processed圖片

00:34:14.922 --> 00:34:17.858 
它不是必須得是JPEG
它也能是BGRA 420

00:34:19.025 --> 00:34:21.929 
processed圖像
被生成到另一個回調函數

00:34:21.995 --> 00:34:24.864 
叫做didFinishProcessingPhoto
SampleBuffer

00:34:24.965 --> 00:34:28.068 
RAW被生成到名字當中帶有
RAW的那個回調函數

00:34:30.137 --> 00:34:33.172 
RAW plus processed brackets也被支持

00:34:33.239 --> 00:34:34.608 
看看你是不是能想明白

00:34:34.708 --> 00:34:36.243 
其實就是
我要做一個包圍曝光

00:34:36.310 --> 00:34:38.178 
同時我請求RAW plus JPEG

00:34:38.344 --> 00:34:40.179 
所以我做了三次包圍曝光

00:34:40.246 --> 00:34:42.583 
我會得到三張RAW
和三張JPEG圖片

00:34:44.885 --> 00:34:47.721 
但是其並不支持RAW plus
靜態照片防抖

00:34:49.822 --> 00:34:51.925 
爲了拍攝RAW plus JPEG

00:34:52.292 --> 00:34:56.429 
你還得需要另一個叫
AVCapturePhotoSettings的結構體

00:34:56.830 --> 00:34:59.633 
在這個結構體中
你要聲明RAW像素格式

00:34:59.700 --> 00:35:02.135 
還有你想要的processed格式

00:35:02.769 --> 00:35:07.774 
在此我選擇了JPEG和
RAW作爲輸出格式

00:35:09.643 --> 00:35:13.914 
當你選擇JPEGPlusRAW時
HighResolutionPhotoEnabled

00:35:13.981 --> 00:35:14.882 
是有用的

00:35:14.948 --> 00:35:17.150 
因爲它現在被應用到JPEG上

00:35:19.353 --> 00:35:21.722  
讓我們討論下如何存儲
RAW緩衝

00:35:22.189 --> 00:35:25.492  
如果你在內存層面跟它們打交道的話
那它們就不那麼有用了

00:35:26.293 --> 00:35:29.763  
所以與其介紹
一個Apple專利的RAW文件格式

00:35:29.830 --> 00:35:31.798 
就像許多其他相機供應商做的那樣

00:35:32.165 --> 00:35:36.236 
不如選使用Adobe的
數字式負格式來存儲

00:35:37.070 --> 00:35:40.908 
DNG是一個標準化的方式來
儲存比特和元數據

00:35:41.041 --> 00:35:43.577 
它並不是指一種文件格式

00:35:43.911 --> 00:35:47.114 
回到我們的烤蛋糕類比

00:35:47.447 --> 00:35:51.351 
DNG就像是存原料的盒子

00:35:51.985 --> 00:35:54.288  
還是取決於個體的RAW轉換器

00:35:54.354 --> 00:35:56.557  
來決定怎麼解釋那些原料

00:35:56.857 --> 00:36:00.794  
因此由第三方應用所打開的DNG
可能看起來不太一樣

00:36:00.861 --> 00:36:02.729  
與另一個應用打開的DNG相比

00:36:03.897 --> 00:36:05.732 
所以存儲DNG是相當瑣碎麻煩的

00:36:06.400 --> 00:36:10.337 
你要調用一個叫做
dngPhotoDataRepresentation的類函數

00:36:11.104 --> 00:36:14.074 
把你從委託回調函數中
獲得的RAW緩衝傳出去

00:36:14.641 --> 00:36:19.546 
這會在內存中生成
一個可被寫入文件的Data

00:36:20.480 --> 00:36:24.852 
並且這個API會寫入很多的
壓縮DNG文件

00:36:24.918 --> 00:36:25.986 
來保存空間

00:36:28.689 --> 00:36:30.290 
這裏該有個演示了

00:36:36.897 --> 00:36:38.465 
對於RAW拍攝

00:36:38.532 --> 00:36:42.769 
我們更新了另一部分的令人尊敬的代碼
叫做AVCamManual

00:36:43.303 --> 00:36:45.372 
我們是2014年發佈的

00:36:45.439 --> 00:36:48.575 
在我們展示手動控制API時

00:36:48.942 --> 00:36:53.981 
它讓你選擇對焦 曝光 白平衡

00:36:54.314 --> 00:36:57.551 
你可以手動或自動控制這些功能

00:36:58.051 --> 00:37:02.055 
在左邊的HUD裏有個新東西

00:37:02.256 --> 00:37:04.625 
可以讓你選擇開或者關RAW

00:37:05.292 --> 00:37:08.795 
你可以選擇在該應用裏拍攝RAW照片

00:37:09.429 --> 00:37:10.864 
讓我們看看曝光吧

00:37:10.931 --> 00:37:14.101 
我看看能不能故意過曝一點

00:37:15.369 --> 00:37:16.603 
然後我再拍張照

00:37:18.272 --> 00:37:19.506 
現在我要退出這個應用

00:37:20.440 --> 00:37:24.111 
我要打開一個叫
RAWExpose的應用

00:37:24.178 --> 00:37:26.013 
這個應用不是
AV Foundation團隊寫的

00:37:26.079 --> 00:37:27.648 
而是Core Image團隊寫的

00:37:27.915 --> 00:37:30.651 
他們很有風度的把它借給我來做演示

00:37:31.785 --> 00:37:34.021 
我們來看下剛剛拍的照片

00:37:34.888 --> 00:37:37.524 
這是張RAW照片

00:37:37.591 --> 00:37:39.660 
它會讀取DNG文件

00:37:40.160 --> 00:37:45.365 
我們可以做到用
JPEG永遠都做不到的事

00:37:46.233 --> 00:37:51.638 
像是我們可以恢復EV值

00:37:52.072 --> 00:37:53.707 
還能調整色溫和色調

00:37:53.774 --> 00:37:57.110 
所有這些都是在後期完成的
而且完全可逆

00:37:57.578 --> 00:38:01.782 
我也可以看看有或沒有
減少噪點看着是什麼樣的

00:38:02.482 --> 00:38:06.119 
這就是編輯RAW的
新Core image API的部分特性

00:38:06.687 --> 00:38:07.988 
我們再回到幻燈片中

00:38:13.994 --> 00:38:17.531 
AVCamManual的
示例代碼現在可見了

00:38:17.698 --> 00:38:18.765 
你可以找得到

00:38:18.832 --> 00:38:21.735 
它和這節課的幻燈片是有關聯的

00:38:22.503 --> 00:38:25.706 
如果你想學到
更多關於RAW編輯的內容

00:38:25.772 --> 00:38:29.743 
你可以去我剛纔提過的同個會話
505會話

00:38:30.110 --> 00:38:31.345 
他們會同時談到這兩點

00:38:31.578 --> 00:38:34.181 
第二個部分是通過
Core Image來處理RAW

00:38:34.248 --> 00:38:35.315 
這是個不錯的部分

00:38:37.351 --> 00:38:39.419 
RAW照片拍攝都被什麼設備支持呢

00:38:40.554 --> 00:38:41.722 
巧合的是

00:38:41.788 --> 00:38:46.360 
和我們Live Photos
支持的設備一樣

00:38:46.827 --> 00:38:50.330 
所有具有1200萬像素攝像頭的設備
都支持RAW照片拍攝

00:38:51.498 --> 00:38:52.733 
我們的下一個話題是

00:38:53.467 --> 00:38:57.538 
拍攝預覽圖像 也就是縮略圖

00:38:58.672 --> 00:39:00.641 
攝影app通常會拍照

00:39:00.707 --> 00:39:03.410 
然後想快速顯示預覽結果

00:39:03.777 --> 00:39:05.579 
像是Apple Zone相機應用

00:39:06.246 --> 00:39:08.715 
當照片播放時注意看下左底角

00:39:14.021 --> 00:39:17.090  
你一按下快門鍵

00:39:17.157 --> 00:39:21.495  
幾乎同時就有一張照片預覽
出現在左底角

00:39:22.062 --> 00:39:24.131  
這會令你的用戶感到欣慰

00:39:24.198 --> 00:39:25.966  
知道他們拍的照片沒問題

00:39:27.134 --> 00:39:28.635 
這會給他們即時反饋

00:39:29.636 --> 00:39:31.772 
有許多的圖像處理算法

00:39:31.839 --> 00:39:37.044 
像是Core Images CIRectangleDetector
或是CIQRCodeDetector

00:39:37.110 --> 00:39:40.414 
能很好兼容小圖像
或是未壓縮的小圖像

00:39:40.480 --> 00:39:43.984 
它們不需要整張1200萬像素的
JPEG來找到人的臉

00:39:45.619 --> 00:39:50.190 
不幸的是 這裏有個繼承阻抗的不匹配

00:39:51.058 --> 00:39:52.993 
你請求一張高質量的JPEG圖片

00:39:53.360 --> 00:39:55.729 
因爲你想要將其保存在硬盤上

00:39:55.796 --> 00:39:57.531 
那是你想要留下來的

00:39:58.332 --> 00:40:01.635 
但是你也想要很快在屏幕上
顯示一個預覽圖

00:40:02.169 --> 00:40:05.038 
所以如果你要自己實現的話
你要解壓縮JPEG

00:40:05.105 --> 00:40:06.240 
你要縮減它的大小

00:40:06.373 --> 00:40:07.541 
並最終顯示出來

00:40:08.175 --> 00:40:11.311 
這些都需要費時佔空間
還增加了複雜度

00:40:12.045 --> 00:40:15.749 
最好是能同時得到
供保存的高質量JPEG圖片

00:40:15.816 --> 00:40:18.785 
以及相機能提供一個小版本的照片

00:40:19.119 --> 00:40:22.389 
直接從相機獲取
而不是從JPEG解壓縮而來

00:40:23.590 --> 00:40:24.992 
然後你就能省略那些步驟

00:40:25.058 --> 00:40:27.327 
直接顯示預覽圖了

00:40:28.161 --> 00:40:31.565 
我們在AVCapturePhotoOutput中
就提供了這種工作流

00:40:32.432 --> 00:40:33.267 
這個委託

00:40:37.304 --> 00:40:38.772 
我強烈建議用啊

00:40:39.039 --> 00:40:42.009 
這個委託回調函數能生成一個縮略圖

00:40:42.075 --> 00:40:44.645 
給processed或者RAW照片

00:40:45.245 --> 00:40:47.414 
預覽圖是非壓縮的

00:40:47.481 --> 00:40:50.584 
因此你可選擇它是
420fv還是BGRA格式

00:40:51.385 --> 00:40:52.953 
如果你知道想要的尺寸

00:40:53.187 --> 00:40:56.356 
你可以聲明你想要的具體大小

00:40:56.690 --> 00:41:00.194 
如果你不確定對於當前的平臺
多大的預覽圖合適的話

00:41:00.394 --> 00:41:03.197 
PhotoOutput可以爲你
選擇一個合適的默認尺寸

00:41:04.898 --> 00:41:08.001 
這裏有些如何請求預覽圖的示例代碼

00:41:08.902 --> 00:41:12.606 
當以常規方式創建了
一個相片設置實例後

00:41:12.906 --> 00:41:15.275 
你可以選擇
previewPixelType

00:41:15.609 --> 00:41:21.982 
再說明一下相片設置本身
就會告訴你哪些格式是可用的

00:41:22.049 --> 00:41:25.619 
並且它們都是排好序的
因此最優選擇會排在第一位

00:41:25.786 --> 00:41:28.188 
在此我從數組中獲取第一個元素

00:41:28.755 --> 00:41:30.824 
我所說的最優是指

00:41:30.891 --> 00:41:34.761 
需要從本地相機請求最少轉換的

00:41:36.597 --> 00:41:41.468 
你利用該格式類型key來創建
CVPixelBuffer屬性字典

00:41:41.902 --> 00:41:43.604 
第一部分是必需的

00:41:43.670 --> 00:41:45.973 
如果你想獲得預覽圖

00:41:46.039 --> 00:41:48.942 
那你至少你得聲明你想獲得什麼格式的

00:41:49.510 --> 00:41:53.680 
你還可以選擇性的聲明寬度和高度

00:41:54.815 --> 00:41:56.183 
如果你想要定製尺寸的話

00:41:56.683 --> 00:41:59.753 
你不需要知道明確的寬高比

00:41:59.820 --> 00:42:01.088 
關於你將獲得的圖片

00:42:01.388 --> 00:42:03.790 
我在這設成是160乘160

00:42:03.857 --> 00:42:06.360 
我不是想搞一個盒子出來

00:42:06.426 --> 00:42:09.530 
我只是給寬和高設一個最大值

00:42:09.897 --> 00:42:12.733 
AVCapturePhotoOutput
會進行改變大小的工作

00:42:12.799 --> 00:42:17.037 
爲預覽圖
以便它能以預設的寬高比裝進盒中

00:42:18.972 --> 00:42:21.642 
獲取預覽圖也是非常直觀的

00:42:22.142 --> 00:42:27.881  
我們在此請求一個JPEG照片
還有一個160乘160的預覽圖

00:42:29.183 --> 00:42:32.419  
當我們獲得第一個回調函數
說明已經接到命令時

00:42:33.053 --> 00:42:37.591  
你會獲得一個willBegin
CaptureForResolvedSettings

00:42:38.625 --> 00:42:41.562  
和一個ResolvedPhotoSettings對象
如果你注意到的話

00:42:41.628 --> 00:42:45.232  
預覽圖的大小不是160乘160

00:42:45.499 --> 00:42:46.767  
而是160乘120的

00:42:46.834 --> 00:42:49.636  
因爲它已經因寬高比而改變

00:42:49.703 --> 00:42:52.439  
這個尺寸對於1200萬像素
的照片是最合適的

00:42:54.308 --> 00:42:58.278  
當didFinishProcessingPhoto
SampleBuffer回調函數最後到來時

00:42:58.378 --> 00:43:00.247  
你會得到一個 而不是兩張照片

00:43:01.014 --> 00:43:02.983  
全尺寸的JPEG文件是第一個參數

00:43:03.050 --> 00:43:05.986  
previewPhotoSampleBuffer
是第二個

00:43:06.220 --> 00:43:07.788  
如果你一直跟着我的思路

00:43:08.055 --> 00:43:09.256 
並在你的腦中思考

00:43:09.323 --> 00:43:13.060 
如果你要拍一個
RAW照片 加上包圍曝光

00:43:13.794 --> 00:43:14.928 
加上JPEG

00:43:15.262 --> 00:43:16.463 
加上預覽圖

00:43:16.663 --> 00:43:21.635 
那麼你會得到mRAWs
mJPEGs和mpreview照片

00:43:25.906 --> 00:43:27.641 
另一個預覽圖的好的應用是

00:43:27.708 --> 00:43:29.476 
作爲嵌入的縮略圖

00:43:29.910 --> 00:43:32.646 
在你的高質量JPEG或DNG文件中

00:43:33.380 --> 00:43:36.850 
在這段代碼示例中 我會用
previewPhotoSampleBuffer這個參數

00:43:36.917 --> 00:43:40.888 
此參數在didFinishProcessingRAW
PhotoSampleBuffer回調函數中

00:43:41.021 --> 00:43:44.091 
作爲放到DNG文件的嵌入式縮略圖

00:43:44.558 --> 00:43:48.729 
當我調用PhotoOutput的
dngPhotoDataRepresentation時

00:43:48.795 --> 00:43:50.998 
我會將其作爲第二個參數傳遞

00:43:51.532 --> 00:43:53.500 
你一直要這麼做

00:43:53.967 --> 00:43:56.870 
嵌入一個縮略圖是個不錯的主意

00:43:56.937 --> 00:43:59.106 
因爲你不知道它會從哪被觀看

00:44:00.607 --> 00:44:07.147 
有些應用能觀看DNG bits
RAW bits 有些則不能

00:44:07.481 --> 00:44:10.951 
但是如果你用到嵌入式縮略圖的話
誰都能看到點什麼

00:44:11.552 --> 00:44:13.720 
你絕對想這麼做
若你添加一DNG文件

00:44:13.787 --> 00:44:16.857 
到照片庫
以便獲得更好的快速預覽效果的話

00:44:18.725 --> 00:44:20.761 
預覽圖生成是被支持的

00:44:21.461 --> 00:44:22.462 
到處都是

00:44:25.332 --> 00:44:29.736 
今天的最後一個主題是 寬色域

00:44:29.970 --> 00:44:32.973 
如你所料 這是個很廣泛的主題

00:44:37.644 --> 00:44:40.747 
你們肯定聽說了那漂亮的真彩顯示

00:44:40.814 --> 00:44:43.183 
在我們的9.7寸iPad Pro上

00:44:43.984 --> 00:44:49.890 
它是寬色域顯示的
和4K 5K iMax處於同一水平

00:44:50.257 --> 00:44:54.261 
它可以顯示出令人吃驚
栩栩如生的紅色和黃色

00:44:54.494 --> 00:44:57.397 
以及非常深度飽和的青色和綠色

00:44:58.432 --> 00:45:01.468 
爲了利用到顯示的寬色域

00:45:01.668 --> 00:45:05.339 
我們在iOS9.3中
首次介紹了顏色管理

00:45:05.706 --> 00:45:07.274 
我不知道你是否注意到了

00:45:07.341 --> 00:45:10.777 
我們在9.7寸iPad Pro上
使用了顏色管理

00:45:11.745 --> 00:45:13.614 
既然顯示效果這麼棒了

00:45:14.181 --> 00:45:17.951 
用同樣的寬色域來拍照才說得過去

00:45:18.418 --> 00:45:20.120 
以便增強我們的觀看體驗

00:45:20.187 --> 00:45:22.756 
另外還能保證
從現在起若干年後你再看這些照片

00:45:22.823 --> 00:45:24.491 
你會得到更多的顏色信息

00:45:25.125 --> 00:45:26.460 
從iOS10開始

00:45:27.094 --> 00:45:31.698 
9.7寸iPad Pro上
拍照會自動變成寬色域了

00:45:33.233 --> 00:45:37.070 
讓我簡單介紹下寬色域是什麼意思
有關寬色域的術語

00:45:37.337 --> 00:45:39.806 
從顏色空間的概念開始

00:45:40.440 --> 00:45:42.409 
一個顏色空間描述的是

00:45:43.577 --> 00:45:45.679 
一個顏色的環境

00:45:45.746 --> 00:45:49.683 
顏色被呈現 排列 比較 或計算

00:45:50.284 --> 00:45:54.188 
在計算機顯示中應用最普遍的顏色空間
就是sRGB

00:45:54.454 --> 00:45:56.924 
s代表標準 就是標準RGB

00:45:57.658 --> 00:46:01.628 
它是基於一個國際規範ITU709

00:46:02.296 --> 00:46:04.965 
它有大概2.2的gamma值

00:46:05.766 --> 00:46:09.203 
6500開爾文的白度

00:46:10.103 --> 00:46:14.208 
sRGB對顯示很多常見顏色都很出色

00:46:14.274 --> 00:46:17.744 
像是面部 天空 草地等等

00:46:18.212 --> 00:46:21.849 
但也有很多顏色sRGB不能很好生成

00:46:23.050 --> 00:46:26.954 
例如 超過百分之40的職業足球隊服

00:46:27.020 --> 00:46:28.755 
超出了sRGB的色域

00:46:29.556 --> 00:46:30.390 
誰知道呢

00:46:32.125 --> 00:46:36.864 
9.7寸iPad Pro支持寬色域
並使用了一個新的顏色空間

00:46:36.930 --> 00:46:39.433 
我們將其稱爲Display P3

00:46:40.501 --> 00:46:43.570 
它與SMPTE標準DCI P3類似

00:46:44.438 --> 00:46:47.341 
那是用在數字影院投影儀上的顏色空間

00:46:48.041 --> 00:46:51.645 
其色原與DCI P3是相同的

00:46:51.712 --> 00:46:54.147 
但是其gamma值和白度不同

00:46:55.682 --> 00:46:59.786 
它的gamma值與
白度和sRGB是相同的

00:47:00.854 --> 00:47:02.055 
我們爲什麼會這麼做呢

00:47:02.656 --> 00:47:08.028 
是因爲DCI P3的白度
是向綠色邊傾斜的

00:47:09.029 --> 00:47:14.067 
選擇這麼做是爲了給昏暗的
家庭影院場景提供最大的亮度

00:47:14.401 --> 00:47:16.703 
我們發現把白度設爲6500的話

00:47:16.770 --> 00:47:20.574 
會得到與sRGB標準會兼容的超集

00:47:20.807 --> 00:47:25.779 
在這張幻燈片上你會發現
sRGB的灰色

00:47:25.846 --> 00:47:29.082 
然後你會發現
貼附的Display P3

00:47:29.149 --> 00:47:33.687 
它儘可能寬的覆蓋了sRGB的超集

00:47:33.754 --> 00:47:34.922 
這就是爲何我們選擇它

00:47:36.690 --> 00:47:39.560 
如果使用OS 10上的
顏色同步工具的話

00:47:39.660 --> 00:47:42.896 
你就能看到Display P3的
虛擬呈現

00:47:42.963 --> 00:47:44.965 
我截了一些圖來展示給你們

00:47:46.133 --> 00:47:49.169 
你們可以在三維將其與
sRGB進行比較

00:47:49.503 --> 00:47:51.772 
在此我選擇Display P3

00:47:51.839 --> 00:47:53.841 
點擊“作比較”

00:47:53.907 --> 00:47:54.741 
這是個不錯的技術

00:47:55.108 --> 00:47:56.610 
然後我選擇sRGB

00:47:56.677 --> 00:48:00.047 
接下來我會看到
其中一個貼附在另一個上

00:48:00.113 --> 00:48:04.184 
你會從裏面看到sRGB
從外面看到Display P3

00:48:04.251 --> 00:48:09.256 
以此你能感受到Display P3
相比sRGB來說有多寬

00:48:09.690 --> 00:48:13.861 
並且能呈現的
顏色範圍從視覺上看也更大

00:48:16.763 --> 00:48:18.465  
那麼現在讓我們看看所有的細節

00:48:18.532 --> 00:48:20.367  
用來獲得Display P3內容

00:48:21.034 --> 00:48:23.971  
爲了獲得高保真度
所捕捉內容的顏色空間

00:48:24.037 --> 00:48:26.240  
需要在素材階段就確定下來

00:48:26.607 --> 00:48:29.743  
這可不能向下在sRGB中完成了

00:48:29.810 --> 00:48:32.913  
然後再往上向寬色域轉換
它必須在開始時就被設定好足夠的寬度

00:48:33.614 --> 00:48:37.384  
如你所料 顏色空間其實就是
AVCaptureDevice

00:48:37.451 --> 00:48:40.120  
一個屬性

00:48:40.854 --> 00:48:43.690  
因此我們會花些時間來討論下
AVCaptureDevice

00:48:43.757 --> 00:48:46.260  
我們還會討論下
AVCaptureSession

00:48:46.693 --> 00:48:50.531 
該會話就是
自動寬色域選擇被決定的地方

00:48:50.597 --> 00:48:52.799 
爲整個會話配置

00:48:54.301 --> 00:48:59.806 
AVCaptureDevice就是AV Foundation
如何呈現攝像頭或是麥克風

00:49:00.707 --> 00:49:03.710 
每個AVCaptureDevice
都有一個格式屬性

00:49:04.778 --> 00:49:07.948 
Formats是AVCaptureDevice
格式的一個數組

00:49:08.015 --> 00:49:09.650 
它們本身就是對象

00:49:09.983 --> 00:49:12.953 
同時它們還會代表設備捕捉內容的格式

00:49:13.820 --> 00:49:16.056 
如你所見 它們是成對出現的

00:49:16.557 --> 00:49:18.859 
對於每個分辨率和幀率

00:49:19.026 --> 00:49:22.629 
都有一個402v版本和402f版本

00:49:23.430 --> 00:49:27.668 
v是代表視頻範圍 從16到235

00:49:28.135 --> 00:49:31.271 
f是代表全範圍 從0到255

00:49:32.372 --> 00:49:33.941 
iOS10中新出現的是

00:49:34.508 --> 00:49:38.645 
AVCaptureDevice格式
有了一個新支持的顏色空間屬性

00:49:39.279 --> 00:49:40.581 
它是由數字組成的數組

00:49:40.647 --> 00:49:46.887 
0是代表sRGB
而1是代表P3 D65

00:49:47.955 --> 00:49:49.923 
我們將其代指爲Display P3

00:49:49.990 --> 00:49:54.328 
但是在API中
它指的是P3 D65

00:49:54.394 --> 00:49:59.733 
d代表顯示 65代表開爾文的白度

00:50:01.435 --> 00:50:07.174 
在9.7寸iPad Pro上
420v格式只支持sRGB

00:50:07.908 --> 00:50:12.145 
但是全範圍420f格式支持sRGB

00:50:12.412 --> 00:50:13.847 
或是Display P3

00:50:14.815 --> 00:50:17.618 
該設備有個可設的格式屬性

00:50:17.684 --> 00:50:18.585 
這不是新的東西

00:50:19.152 --> 00:50:22.723 
列表中的其中一個格式
一直是activeFormat

00:50:23.023 --> 00:50:26.026 
如你所見
我將激活的格式套上了一個黃色的格子

00:50:26.360 --> 00:50:29.396 
它正好是1200萬像素
30FPS的版本

00:50:30.931 --> 00:50:34.067 
如果那個activeFormat
也就是f格式

00:50:34.368 --> 00:50:36.436 
正好支持Display P3的話

00:50:37.070 --> 00:50:40.908 
那麼你可以設置一個叫做
activeColorSpace的新屬性

00:50:40.974 --> 00:50:42.843 
如果activeFormat支持它

00:50:42.976 --> 00:50:46.146 
你就能從你的素材中獲得寬色域的流

00:50:46.213 --> 00:50:47.948 
到session的所有輸出中

00:50:49.449 --> 00:50:50.584 
這段說起來有點冗長

00:50:50.651 --> 00:50:52.853 
但我希望你記住的是

00:50:53.120 --> 00:50:54.922 
希望這些東西你一個也用不上

00:50:55.055 --> 00:50:58.358 
大多數客戶從來不需要直接設置
activeColorSpace

00:50:58.592 --> 00:51:02.262 
那是因爲AVCaptureSession
會試着爲你自動完成

00:51:03.297 --> 00:51:07.701 
在iOS 10中
AVCaptureSession有一個長的新屬性

00:51:07.935 --> 00:51:12.372 
叫做automaticallyConfigures
CaptureDeviceForWideColor

00:51:13.006 --> 00:51:15.342 
它什麼時候會爲你選擇寬色域呢

00:51:16.510 --> 00:51:20.047 
在iOS 10中
寬色域僅在攝影中使用

00:51:20.781 --> 00:51:21.648 
讓我再說一遍

00:51:22.349 --> 00:51:26.653 
在iOS 10中 寬色域僅在
攝影中使用而不是攝像

00:51:26.720 --> 00:51:27.988 
我後面馬上會解釋爲什麼

00:51:30.691 --> 00:51:33.493 
會話會自動選擇

00:51:33.560 --> 00:51:37.531 
是否爲整個會話配置寬色域

00:51:37.798 --> 00:51:41.301 
它會代表你將你設備的
activeColorSpace設爲

00:51:41.502 --> 00:51:43.704 
P3 這取決於你的設置

00:51:44.271 --> 00:51:47.841 
你要在你的會話中
加入一個PhotoOutput

00:51:48.208 --> 00:51:51.411 
如果你沒有PhotoOutput
你就不能拍照了

00:51:51.545 --> 00:51:52.713 
那麼你也不需寬色域

00:51:54.114 --> 00:51:56.049 
這裏有些警示

00:51:56.149 --> 00:51:58.785 
如果你開始往你的會話加入其它輸出

00:51:59.019 --> 00:52:01.321 
或許你想要做什麼就不那麼明顯了

00:52:02.189 --> 00:52:05.325 
如果你加上了一個
AVCaptureVideoPreviewLayer

00:52:05.392 --> 00:52:10.764 
會話還是會給你
自動挑選Display P3

00:52:11.098 --> 00:52:13.767 
因爲你就是在拍照同時做了預覽

00:52:14.268 --> 00:52:18.472 
如果你有一個MovieFileOutput
和一個PhotoOutput 那就模糊了

00:52:18.539 --> 00:52:20.340 
你可能更關心影片

00:52:20.574 --> 00:52:24.111 
所以它就不會爲你
自動挑選Display P3了

00:52:24.611 --> 00:52:30.284 
VideoDataOutput是個特殊的例子
我們通過一個回調函數將緩衝送達給你

00:52:30.617 --> 00:52:33.287 
在此session只會挑選
Display P3

00:52:33.353 --> 00:52:35.355 
如果你在用預設照片的話

00:52:35.789 --> 00:52:37.491 
它很確信如果你正在用
VideoDataOutput

00:52:37.558 --> 00:52:40.761 
就意味着你會利用這些顯示緩衝來攝影

00:52:42.196 --> 00:52:45.499 
如果你非常想要的話
你可以強制拍照設備

00:52:45.566 --> 00:52:47.634 
來使用寬色域
下面是怎麼實現的

00:52:48.335 --> 00:52:52.039 
首先你要告訴會話
不要自動幫我實現了

00:52:52.206 --> 00:52:53.040 
不要妨礙我

00:52:54.041 --> 00:52:56.310 
然後你要進入設備

00:52:56.376 --> 00:52:59.847 
自己將activeFormat
設爲支持寬色域的格式

00:53:00.113 --> 00:53:03.283 
然後你要將
activeColorSpace設爲P3

00:53:04.451 --> 00:53:05.552 
你做完了之後

00:53:05.619 --> 00:53:10.424 
寬色域buffer會流到
所有接受視頻數據的輸出

00:53:10.524 --> 00:53:13.560 
包括VideoDataOutput
MovieFileOutput

00:53:13.627 --> 00:53:16.864 
甚至是已經不推薦使用的
AVCaptureStillImageOutput

00:53:18.432 --> 00:53:23.770 
當你強制將設備的
activeColorSpace設爲display P3後

00:53:24.004 --> 00:53:26.406 
我強烈建議你不要這麼做

00:53:26.473 --> 00:53:28.475 
除非你明確知道自己在幹什麼

00:53:29.543 --> 00:53:32.546 
因爲寬色域是給照片服務的

00:53:32.713 --> 00:53:36.483 
我們對於寬色域的照片支持
有着良好的生態系統

00:53:36.850 --> 00:53:38.552 
但是對於視頻就不怎麼樣了

00:53:39.186 --> 00:53:41.288 
對於Display P3
內容的主要擔憂

00:53:41.355 --> 00:53:44.224 
就在於用戶必須是寬色域敏感的

00:53:44.458 --> 00:53:46.693 
否則你的內容將會以sRGB渲染

00:53:46.760 --> 00:53:48.362 
顏色看起來就會不對頭

00:53:48.762 --> 00:53:49.763 
它們被渲染得很糟糕

00:53:50.464 --> 00:53:53.300 
大多數視頻播放服務都不是色敏感的

00:53:53.600 --> 00:53:58.338 
所以如果你保存一個
寬Display P3影片的話

00:53:58.572 --> 00:54:01.441 
然後你試圖用某個服務來播放它

00:54:01.775 --> 00:54:03.977 
它很有可能會把顏色渲染錯誤

00:54:05.112 --> 00:54:06.613 
如果你選擇這麼做

00:54:06.680 --> 00:54:09.650 
確保你的VideoDataOutput
是色敏感的

00:54:10.083 --> 00:54:11.618 
它要傳播顏色標籤

00:54:11.685 --> 00:54:14.288 
它要是色敏感的

00:54:15.389 --> 00:54:20.394 
如果你選擇用MovieFileOutput
來拍攝Display P3影片

00:54:20.727 --> 00:54:24.331 
注意它們可能在其他平臺上
是錯誤渲染的

00:54:25.165 --> 00:54:25.999 
這裏

00:54:26.066 --> 00:54:28.368 
我們確實允許這麼做 因爲我們意識到

00:54:28.435 --> 00:54:32.906 
其對於某些專業工作流是很重要的

00:54:32.973 --> 00:54:35.342 
也要能夠製作寬色域影片

00:54:36.476 --> 00:54:38.512 
所以拋開警告不管

00:54:38.879 --> 00:54:42.182 
我可以告訴你我們對於照片
有個很好的解決方案

00:54:42.316 --> 00:54:43.884 
針對共享寬色域

00:54:44.551 --> 00:54:48.789 
我們應該注意到JPEG寬色域
是使用Display P3屬性的

00:54:49.122 --> 00:54:51.892 
並且這些圖片的用戶也必須是色敏感的

00:54:52.359 --> 00:54:56.430 
好消息是通常照片服務

00:54:56.563 --> 00:54:58.098 
目前是色敏感的

00:54:58.632 --> 00:55:00.501 
iCloud照片庫就是其中之一

00:55:00.634 --> 00:55:04.171 
它能智能的將你的照片
轉換成sRGB格式

00:55:04.271 --> 00:55:06.306 
如果你的設備不支持寬色域的話

00:55:06.940 --> 00:55:10.344 
但仍會在cloud上
存儲寬色域的照片

00:55:11.745 --> 00:55:13.947 
我們的業界目前也在轉變

00:55:14.014 --> 00:55:17.718 
有些照片服務雖然不支持寬色域

00:55:17.784 --> 00:55:22.289 
但它們中絕大多數至少能將其
智能渲染成sRGB格式

00:55:23.724 --> 00:55:25.292 
對於混合共享的場景

00:55:25.359 --> 00:55:28.662 
像是通過信息或郵件來發送照片

00:55:28.962 --> 00:55:30.063 
你不知它被髮送到哪

00:55:30.130 --> 00:55:31.999 
它可能會被髮到多個設備

00:55:32.432 --> 00:55:34.001 
其中有些可能支持寬色域

00:55:34.067 --> 00:55:34.935 
有些則不支持

00:55:35.169 --> 00:55:39.706 
對於這種情況
我們要加上一個新的服務

00:55:39.773 --> 00:55:42.543 
叫做
Apple Wide Color Sharing Profile

00:55:42.976 --> 00:55:47.915 
你的內容將以一種方式被處理

00:55:47.981 --> 00:55:52.920 
我們會生成一個內容爲準則
表格形式的ICC資料

00:55:53.220 --> 00:55:56.557 
對應那張JPEG照片

00:55:57.291 --> 00:56:00.427 
其好處就在於 如果它被某人渲染

00:56:00.494 --> 00:56:01.962 
而這個人不瞭解寬色域

00:56:02.029 --> 00:56:05.532 
那麼在sRGB色域內的部分
肯定能被正確渲染

00:56:05.999 --> 00:56:11.004 
額外的信息會被放到
一個額外的ICC資料中

00:56:11.071 --> 00:56:14.107 
它們可以將寬色域信息恢復

00:56:14.174 --> 00:56:15.976 
到最小的質量損失程度

00:56:17.377 --> 00:56:20.314 
你可以學到更多有關
如何共享寬色域內容

00:56:20.647 --> 00:56:24.251 
在505和702會話中

00:56:24.318 --> 00:56:25.586 
它們都是在週四

00:56:25.919 --> 00:56:28.155 
第一個我已經提到三遍了

00:56:28.822 --> 00:56:31.225 
關於寬色域的那個也是個不錯的會話

00:56:33.193 --> 00:56:34.928 
在9.7寸iPad Pro上

00:56:35.028 --> 00:56:38.232 
AVCapturePhotoOutput
廣泛支持寬色域

00:56:38.632 --> 00:56:44.438 
它在420f BGRA和JPEG中都支持
不僅僅是420v

00:56:44.505 --> 00:56:49.743 
如果你的會話
配置了Display P3

00:56:49.810 --> 00:56:51.979 
但是然後你說你想要420v的照片

00:56:52.246 --> 00:56:54.515 
它會被轉換爲sRGB格式

00:56:56.149 --> 00:56:59.152 
Live Photos支持寬色域

00:56:59.319 --> 00:57:01.054 
靜態和影片部分都支持

00:57:01.221 --> 00:57:03.690 
這是特殊的影片
這是Apple生態系統的一部分

00:57:03.757 --> 00:57:05.492 
因此那些都會是支持寬色域的

00:57:06.894 --> 00:57:09.830 
包圍曝光拍攝也是支持寬色域的

00:57:12.432 --> 00:57:14.101 
有趣的是

00:57:14.501 --> 00:57:17.671 
我一直在說iPad Pro

00:57:18.305 --> 00:57:19.973 
我們支持RAW格式

00:57:20.507 --> 00:57:24.411 
RAW拍攝本身就是寬色域的

00:57:24.745 --> 00:57:27.481 
因爲它有所有那些額外的比特信息

00:57:27.981 --> 00:57:29.917 
我們將其保存在傳感器基元中

00:57:30.417 --> 00:57:36.957 
並且它也有足夠的顏色信息
來被渲染成寬色域或是sRGB

00:57:37.024 --> 00:57:39.993 
再說一下 如果你隨身帶着原料的話

00:57:40.060 --> 00:57:43.764 
你能隨時決定你是想渲染成
寬色域還是sRGB

00:57:44.198 --> 00:57:46.667 
因此拍攝RAW照片並後期渲染

00:57:47.034 --> 00:57:52.206 
可在許多iOS設備上生成寬色域內容
而不僅是在iPad Pro上

00:57:55.075 --> 00:57:59.346 
你可以學會更多有關寬色域的知識

00:57:59.413 --> 00:58:01.915 
不光是共享還有別的

00:58:01.982 --> 00:58:05.919 
最好的學習寬色域的會話是在週四下午

00:58:07.955 --> 00:58:11.592 
使用AVCapturePhotoOutput
來改善可用性

00:58:12.626 --> 00:58:14.795 
我們今天談論了四個主要特性

00:58:14.862 --> 00:58:17.397 
我們討論了在你的應用中
拍攝Live Photos

00:58:17.831 --> 00:58:21.268 
RAW RAW + JPEG DNG

00:58:22.503 --> 00:58:24.972 
用來更快渲染的小預覽圖

00:58:25.672 --> 00:58:27.341 
還有寬色域照片

00:58:28.876 --> 00:58:31.912 
一個小時真的不夠啊

00:58:31.979 --> 00:58:33.514 
想要涵蓋要講的內容太短了

00:58:33.580 --> 00:58:36.183 
因此我們對於這個會話做了一個補充

00:58:36.250 --> 00:58:37.684 
它已經錄製完了

00:58:37.751 --> 00:58:39.152 
現在已經放到網上了

00:58:39.786 --> 00:58:42.923 
它是一個包含語音的幻燈片
我們把它叫做Chalk Talk

00:58:43.991 --> 00:58:47.995 
它爲你講述了
我們沒時間講的深入的主題

00:58:48.262 --> 00:58:51.131 
AVCapturePhotoOutput
中的場景監控

00:58:51.632 --> 00:58:54.101 
資源準備和回收

00:58:54.801 --> 00:58:56.303 
然後是一個不相關的話題

00:58:56.570 --> 00:58:59.907 
iOS 10中相機隱私政策的變動

00:58:59.973 --> 00:59:02.743 
請看下那個視頻
它大概20分鐘長

00:59:04.344 --> 00:59:05.379 
有着更多的信息

00:59:05.445 --> 00:59:07.748 
501結尾你要記住

00:59:07.814 --> 00:59:11.585 
你會發現那個視頻
有七段示例代碼

00:59:11.652 --> 00:59:14.855 
還有
AVCapturePhotoOutput的新文檔

00:59:15.055 --> 00:59:19.092 
文檔編寫人員真的很努力工作
他們寫的文檔真的不錯

00:59:20.394 --> 00:59:22.796 
再次提醒一下這是相關的會話

00:59:23.430 --> 00:59:25.365 
這個是Chalk Talk

00:59:25.432 --> 00:59:28.602 
關於AVCapturePhotoOutput
的延伸知識

00:59:29.036 --> 00:59:30.470 
你什麼時候想看都行

00:59:31.238 --> 00:59:33.707 
好了 好好享受下之後的演說
感謝你們的到來