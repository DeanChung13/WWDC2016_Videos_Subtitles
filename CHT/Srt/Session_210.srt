00:00:19.553 --> 00:00:23.390
掌握tvOS的UIKit

00:00:24.157 --> 00:00:26.960
歡迎來到
“掌握tvOS的UIKit”

00:00:27.661 --> 00:00:29.563
我是Justin
我負責UIKit工作

00:00:29.830 --> 00:00:32.266
我在這裏向你展示
如何超越普通點

00:00:32.332 --> 00:00:35.169
真正讓你的tvOS應用達到新高度

00:00:36.870 --> 00:00:38.939
要做到那些 我們今天需要討論幾件事

00:00:39.473 --> 00:00:40.974
首先是事件處理

00:00:41.275 --> 00:00:43.043
你的應用將會收到什麼樣的事件

00:00:43.110 --> 00:00:45.312
處理這些事件的最好方法
是什麼

00:00:46.780 --> 00:00:48.582
然後我們會討論分層圖片

00:00:48.649 --> 00:00:51.285
這是tvOS獨一無二的用戶界面元素

00:00:51.351 --> 00:00:53.387
我們將展示如何利用它

00:00:55.222 --> 00:00:56.823
第三 我們將討論滾動條

00:00:56.890 --> 00:00:59.826
滾動條在tvOS的工作方式
與在iOS中有些不同

00:00:59.893 --> 00:01:02.262
我們將展示如何控制滾動條

00:01:03.797 --> 00:01:05.599
最後我們將討論文本輸入

00:01:05.699 --> 00:01:07.167
和如何使用系統鍵盤

00:01:07.234 --> 00:01:08.735
接收用戶的文本

00:01:09.469 --> 00:01:11.738
讓我們開始吧 首先進入事件處理

00:01:12.472 --> 00:01:14.007
當講到事件處理

00:01:14.341 --> 00:01:15.943
這裏幾個全面的最佳實踐

00:01:16.009 --> 00:01:17.644
我馬上與你們分享

00:01:18.045 --> 00:01:21.548
第一個是當它允許你的用戶

00:01:21.615 --> 00:01:23.016
去導航你的應用程序

00:01:23.083 --> 00:01:25.219
並轉移焦點從一個項目到另外一個項目

00:01:25.652 --> 00:01:28.155
你不需要寫任何你自己的事件處理程序

00:01:28.222 --> 00:01:30.858
焦點引擎會爲你處理一起

00:01:31.225 --> 00:01:33.627
包括處理不同類型的事件

00:01:33.694 --> 00:01:36.463
基於用戶當前使用的輸入設備類型

00:01:36.597 --> 00:01:38.232
它會爲你處理好一切

00:01:41.201 --> 00:01:43.971
第二 如果你決定需要開始處理事件

00:01:44.037 --> 00:01:46.373
我們建議你開始使用
UIGestureRecognizer

00:01:46.640 --> 00:01:48.509
不僅得到一個極富表現力的API

00:01:48.575 --> 00:01:51.912
而且它會幫助確保你的應用裏
所有的手勢和交互

00:01:51.979 --> 00:01:54.982
將同所有系統應用和其他應用保持一致

00:01:57.484 --> 00:02:00.087
最終 當你正在設計應用交互模型

00:02:00.153 --> 00:02:01.922
記住並非每個輸入設備

00:02:01.989 --> 00:02:03.457
能夠生成每一種類型的事件

00:02:03.657 --> 00:02:06.126
例如 一個用戶可能使用遊戲控制器

00:02:06.193 --> 00:02:07.661
來導航你的應用程序

00:02:07.861 --> 00:02:10.030
遊戲控制器能夠生成觸摸事件

00:02:10.097 --> 00:02:11.765
你可能不想使用觸摸事件

00:02:11.832 --> 00:02:13.834
作爲與你應用交互的唯一方式

00:02:13.901 --> 00:02:16.136
所以當你正在設計應用時記住這些

00:02:18.071 --> 00:02:19.473
談到觸摸

00:02:19.673 --> 00:02:21.141
我們在tvOS上的觸摸技術

00:02:21.208 --> 00:02:23.177
在Siri Remote上
使用觸摸表面

00:02:23.644 --> 00:02:25.479
我們以UITouch交付給你

00:02:25.546 --> 00:02:27.748
它是一個API
你可能從iOS中認出

00:02:28.182 --> 00:02:30.984
一次觸碰代表用戶手指

00:02:31.218 --> 00:02:32.886
和遙控器屏幕的聯繫

00:02:35.189 --> 00:02:36.223
這就像iOS版本

00:02:36.290 --> 00:02:37.925
他包括位置和其他屬性

00:02:37.991 --> 00:02:38.959
你經常使用的

00:02:39.960 --> 00:02:41.028
這點是很重要的差別

00:02:41.094 --> 00:02:43.297
tvOS和iOS的觸摸技術之間

00:02:43.697 --> 00:02:46.667
iOS觸摸直接發生於用戶界面

00:02:46.733 --> 00:02:49.136
用戶肢體觸摸UI

00:02:49.837 --> 00:02:51.271
tvOS卻並非如此

00:02:51.338 --> 00:02:53.006
離用戶界面10英尺遠

00:02:53.140 --> 00:02:54.842
用戶觸摸的是其遙控器

00:02:55.409 --> 00:02:58.245
所以我們把這些分爲兩個不同的類別

00:02:58.312 --> 00:03:00.347
我們稱在iOS上的爲直接觸摸

00:03:00.414 --> 00:03:02.850
在tvOS上的爲間接觸摸

00:03:03.150 --> 00:03:06.053
我們稱該觸摸類型爲
UITouchTypeIndirect

00:03:06.119 --> 00:03:07.921
來幫助你區分兩者不同

00:03:09.656 --> 00:03:12.626
因爲這種間接觸摸
假如你問UITouch

00:03:12.693 --> 00:03:16.463
在一個直接觸摸界面
“你在屏幕上位置是什麼？”

00:03:16.730 --> 00:03:17.865
答案顯而易見

00:03:17.931 --> 00:03:18.932
我們提供一個位置

00:03:18.999 --> 00:03:21.602
它能準確配對用戶手指在屏幕上的位置

00:03:21.902 --> 00:03:23.737
但是在tvOS
用戶不會觸摸屏幕

00:03:23.804 --> 00:03:25.839
那我們會怎麼報告觸摸的位置呢？

00:03:26.740 --> 00:03:28.008
在這情況下 我們會

00:03:28.075 --> 00:03:30.544
無論用戶手指在遙控器上
從何處開始觸摸

00:03:30.611 --> 00:03:32.513
我們總將該觸摸傳遞至你的應用

00:03:32.579 --> 00:03:35.516
好像它是從焦點視圖的中央直接開始的

00:03:36.149 --> 00:03:37.384
這方法很好
因爲它意味着

00:03:37.451 --> 00:03:39.820
任何手勢識別器或事件處理邏輯

00:03:39.887 --> 00:03:41.855
你可能已附加到焦點視圖上

00:03:42.122 --> 00:03:44.625
將總有機會參與到手勢上

00:03:46.593 --> 00:03:47.995
我們不能暴露的是

00:03:48.061 --> 00:03:49.563
用戶手指的絕對位置

00:03:49.630 --> 00:03:50.464
在觸控板上

00:03:50.531 --> 00:03:52.933
我們爲什麼那麼做是有一些原因的
其中最重要的一點是

00:03:52.999 --> 00:03:56.270
在tvOS上
我們想阻止基於指針的UI

00:03:56.336 --> 00:03:58.071
我們不想看到一些如鼠標指針類的東西

00:03:58.138 --> 00:03:59.139
或像它一樣的

00:03:59.206 --> 00:04:01.041
我們真的很希望應用程序能夠堅持

00:04:01.108 --> 00:04:02.910
我們所創建的焦點交互模型

00:04:05.412 --> 00:04:06.747
除了觸摸

00:04:06.813 --> 00:04:08.849
你還能在tvOS上獲得另外一種事件

00:04:08.916 --> 00:04:10.250
它們被稱作按下

00:04:10.651 --> 00:04:13.153
按下方法
通過經典UIPress類提供

00:04:13.487 --> 00:04:16.290
一次按下代表一個真實的硬件按鈕

00:04:16.356 --> 00:04:17.891
用戶正在與它交互

00:04:18.692 --> 00:04:21.695
並不是所有的這些按鈕被簡單按下
或者沒被按下

00:04:21.762 --> 00:04:23.997
比如遊戲控制器這樣的一些按鈕
是壓力感應的

00:04:24.064 --> 00:04:26.967
我們能真實檢測到用戶按下按鈕的強度

00:04:27.034 --> 00:04:28.669
我們可以把那個信息傳遞給你

00:04:30.437 --> 00:04:31.305
你能夠識別按下

00:04:31.371 --> 00:04:32.706
通過UIGestureRecognizer類

00:04:32.773 --> 00:04:34.842
包括如TapGestureRecognizer

00:04:34.908 --> 00:04:36.610
和LongPressGestureRecognizer

00:04:38.078 --> 00:04:39.646
我們有低級別的按下處理事件

00:04:39.713 --> 00:04:42.482
它與低級別的觸摸處理事件
遵循相同的模式

00:04:42.549 --> 00:04:44.518
pressesBegan會觸發

00:04:44.585 --> 00:04:46.186
一旦用戶開始按下按鈕

00:04:46.253 --> 00:04:47.955
pressesChanged方法
會被調用

00:04:48.021 --> 00:04:49.289
若它是一個壓力感應按鈕

00:04:49.356 --> 00:04:50.958
並且壓力值會改變

00:04:51.491 --> 00:04:53.760
還有pressesEnded
和pressesCancelled

00:04:53.827 --> 00:04:56.797
像touchesCancelled
是的 你真的必須執行它

00:04:57.965 --> 00:04:59.833
關於這些方法 有件事需要知道

00:04:59.900 --> 00:05:03.003
那就是按下事件
以爲它們不是真的有一個位置

00:05:03.070 --> 00:05:04.738
它們直接傳遞到焦點視圖

00:05:04.805 --> 00:05:06.707
他們從那裏到達響應者鏈

00:05:06.773 --> 00:05:09.009
它們不會去任何焦點視圖的子視圖

00:05:09.076 --> 00:05:10.911
所以要記住這點 當你決定

00:05:10.978 --> 00:05:12.946
把什麼樣的視圖附加到手勢識別器上

00:05:15.315 --> 00:05:16.750
我們說了好多關於按下的事

00:05:16.817 --> 00:05:18.051
讓我們過一遍按下的類型

00:05:18.118 --> 00:05:20.687
對於你來說是可用的
和什麼類型的按鈕會觸發它們

00:05:20.754 --> 00:05:21.989
在不同類型的輸入設備上

00:05:22.389 --> 00:05:24.191
所以我要向你展示
Siri Remote

00:05:25.092 --> 00:05:27.528
上一代Apple TV
的Apple Remote

00:05:28.428 --> 00:05:29.963
我要向你展示遊戲控制器

00:05:30.030 --> 00:05:31.732
幻燈片上沒有空間 但是記住

00:05:31.798 --> 00:05:35.035
按下也能夠從可編程通用的遙控器裏

00:05:35.102 --> 00:05:36.503
和從Bluetooth鍵盤中產生

00:05:36.570 --> 00:05:38.272
所以有很多方法得到按下

00:05:40.574 --> 00:05:43.377
可能你最常碰到的按下類型是
UIPressTypeSelect

00:05:43.443 --> 00:05:45.646
這種按下類型代表

00:05:45.712 --> 00:05:48.415
用戶想激活一個控制或選擇一個
CollectionView單元

00:05:48.482 --> 00:05:49.449
諸如此類

00:05:50.117 --> 00:05:52.986
在Siri Remote上
那是在遙控器觸摸表面

00:05:53.053 --> 00:05:53.887
之下的按鈕

00:05:54.821 --> 00:05:56.690
在Apple Remote上
那是一個銀色的圓圈

00:05:56.757 --> 00:05:57.691
在遊戲控制器上

00:05:57.758 --> 00:05:59.826
我們使用A按鈕生成此按下類型

00:06:01.795 --> 00:06:04.464
另外一種你會碰到的常用按下類型
是UIPressTypeMenu

00:06:04.531 --> 00:06:07.167
這種按下類型指用戶想返回

00:06:07.234 --> 00:06:09.169
他們想釋放一個presentedviewcontroller

00:06:09.236 --> 00:06:12.372
或甚完全釋放你的應用並返回到主界面

00:06:13.006 --> 00:06:16.543
這三者在屏幕上 就是菜單按鈕

00:06:17.811 --> 00:06:20.280
在遊戲控制器上
我們也使用B按鈕

00:06:22.649 --> 00:06:24.818
最後 就是UIPressTypePlayPause

00:06:24.885 --> 00:06:27.754
這對於暫停和播放內容明顯是有用的

00:06:27.955 --> 00:06:30.557
但是它也被用作除選擇按鈕以外的
快捷圖標

00:06:30.958 --> 00:06:33.360
所以如果用戶選中一個電影海報

00:06:33.594 --> 00:06:36.129
按下選擇按鈕可能會展示這個
電影的詳細信息

00:06:36.196 --> 00:06:38.765
但是按下播放/暫停將直接跳轉到回放

00:06:39.566 --> 00:06:41.468
所以這圖標有——

00:06:41.535 --> 00:06:43.670
或者有播放/暫停圖標的按鈕

00:06:43.770 --> 00:06:44.671
在遊戲控制器上

00:06:44.738 --> 00:06:46.974
我們將使用X按鈕生成按下類型

00:06:48.775 --> 00:06:50.844
爲了更完整些 這還有幾個按下類型

00:06:50.911 --> 00:06:52.613
它們是定向按下

00:06:52.679 --> 00:06:55.282
所以我們有上 下 左 右箭頭按下

00:06:55.349 --> 00:06:56.350
能夠被生成

00:06:56.884 --> 00:06:59.686
在Apple Remote上
我們使用四個定向按鈕

00:07:00.621 --> 00:07:02.389
在遊戲控制器上
有好多方法去實現

00:07:02.456 --> 00:07:03.924
所以我們將使用D pad

00:07:05.192 --> 00:07:07.194
我們也使用定向手柄

00:07:08.161 --> 00:07:10.063
我們甚至生成左和右的按下

00:07:10.130 --> 00:07:11.932
在遊戲控制器上使用肩按鈕

00:07:13.033 --> 00:07:15.802
在Siri Remote上
這些箭頭不是具體的硬件按鈕

00:07:15.869 --> 00:07:17.971
所以你可能想到在那裏生成是不可能的

00:07:18.038 --> 00:07:19.406
但那其實是錯的

00:07:19.640 --> 00:07:21.875
如果你做了一個觸摸點擊
而非一直長按

00:07:21.942 --> 00:07:23.443
選擇按鈕 但只是觸摸

00:07:23.510 --> 00:07:25.779
在表面的這四個基本方位點

00:07:26.013 --> 00:07:27.214
然後UIKit會檢測到它

00:07:27.281 --> 00:07:29.516
將爲你生成箭頭按下

00:07:29.583 --> 00:07:31.485
這是一個真正簡便的導航方法

00:07:31.552 --> 00:07:34.021
一次一項目地通過你的用戶界面

00:07:34.488 --> 00:07:36.557
只因用戶
正使用Siri Remote

00:07:36.623 --> 00:07:38.792
那並不意味着它們不能生成箭頭按下

00:07:40.961 --> 00:07:43.497
我保證你可以用手勢識別器去識別它們

00:07:43.564 --> 00:07:46.700
我不會詳細過一遍
但是我想給你們舉些例子

00:07:46.800 --> 00:07:49.002
你知道 我們可以使用頂端的
TapGestureRecognizer

00:07:49.469 --> 00:07:51.371
我們甚至可能長按 正如你可能這麼做

00:07:51.438 --> 00:07:53.674
在tvOS主界面進入編輯模式

00:07:54.274 --> 00:07:56.577
在底層我甚至可以調整所需點擊的次數

00:07:56.643 --> 00:07:59.179
所以我現在選擇按鈕上監聽一個雙擊

00:08:02.082 --> 00:08:04.451
好的 讓我們特別談談一個按鈕

00:08:04.518 --> 00:08:05.786
它是菜單按鈕

00:08:06.887 --> 00:08:09.656
菜單按鈕在tvOS上有些有趣的行爲

00:08:09.723 --> 00:08:11.091
它似乎有兩個角色

00:08:11.458 --> 00:08:13.861
它不僅需要在你的應用內部有用

00:08:13.927 --> 00:08:16.129
因爲我們要做
諸如釋放視圖控制器之類的事

00:08:16.196 --> 00:08:18.866
或彈出UINavigationController

00:08:18.932 --> 00:08:20.767
而且它還需要有系統層級的行爲

00:08:20.834 --> 00:08:23.170
最終你的應用需要去釋放——

00:08:23.237 --> 00:08:25.639
被釋放 因而用戶可以返回主界面

00:08:25.873 --> 00:08:28.575
若那不可能 你的用戶將感到非常沮喪

00:08:28.642 --> 00:08:29.810
可以想象這非常重要

00:08:29.877 --> 00:08:32.712
這就是應用審查的特別關注點

00:08:32.846 --> 00:08:34.515
如果你的應用程序無法退出

00:08:34.581 --> 00:08:37.083
通過按菜單按鈕
你可能無法通過應用審查

00:08:37.150 --> 00:08:38.150
我們不想發生這事

00:08:39.453 --> 00:08:41.688
所以這怎樣進行？

00:08:41.755 --> 00:08:44.525
我們如何得到它以致菜單按鈕不僅

00:08:44.591 --> 00:08:46.693
被應用程序捕獲而且可以被系統使用？

00:08:47.261 --> 00:08:48.896
所需技術層面的

00:08:48.962 --> 00:08:52.266
爲了你的應用能完美退出並返回主界面

00:08:52.699 --> 00:08:54.501
是當菜單按鈕被釋放的時候

00:08:54.568 --> 00:08:56.837
pressesEnded事件
需要一路沿

00:08:56.904 --> 00:08:59.373
響應者鏈向上
若你被UIApplication接收

00:08:59.773 --> 00:09:01.875
如果那不發生 你的應用不會退出

00:09:02.609 --> 00:09:04.044
有時候那正是你想要的

00:09:04.111 --> 00:09:06.113
如果你已深入到
UINavigationController

00:09:06.180 --> 00:09:07.614
用戶按下菜單按鈕

00:09:07.681 --> 00:09:08.882
他們不想退出你的應用程序

00:09:08.949 --> 00:09:10.484
他們只想返回到前一個視圖控制器

00:09:10.918 --> 00:09:13.320
在那種情況下 有可能是
TapGestureRecognizer

00:09:13.387 --> 00:09:14.922
它是用於監聽菜單按鈕

00:09:15.022 --> 00:09:17.024
如果那個識別器開始識別

00:09:17.090 --> 00:09:19.560
它會發送pressesCancelled到響應者鏈

00:09:19.626 --> 00:09:21.261
在這種情況下 應用不會退出

00:09:21.328 --> 00:09:24.431
然後UINavigationController
可以拋開視圖控制器

00:09:24.498 --> 00:09:27.434
不總髮送pressesEnded
到你的應用是可以的

00:09:27.501 --> 00:09:29.469
你只要確認這是可能的

00:09:29.703 --> 00:09:31.538
當它出現在一個合適的時機

00:09:33.473 --> 00:09:34.608
所以正確的做法是

00:09:34.675 --> 00:09:36.543
我們強烈建議你從手勢識別器開始

00:09:36.610 --> 00:09:39.346
當你不再對處理菜單按鈕感興趣時

00:09:39.680 --> 00:09:42.216
你需確保GestureRecognizer已移除

00:09:42.282 --> 00:09:45.385
一種做法是從視圖中移除
GestureRecognizer

00:09:46.353 --> 00:09:47.487
同時禁用手勢

00:09:47.554 --> 00:09:49.456
手勢識別器有個屬性叫做已啓用

00:09:49.523 --> 00:09:52.159
如果你把值設置爲假
然後手勢將被禁用

00:09:53.493 --> 00:09:54.728
如果你不想那麼做

00:09:54.795 --> 00:09:58.732
這裏有UIGestureRecognizer delegate API
叫做gestureRecognizerShouldBegin

00:09:59.099 --> 00:10:01.668
你可以執行它
然後對於每個菜單按鈕的按下

00:10:01.735 --> 00:10:03.770
你有機會在那刻決定

00:10:03.837 --> 00:10:05.405
是否想處理手勢

00:10:07.174 --> 00:10:09.610
如果你正執行低級別按下處理方法

00:10:09.676 --> 00:10:11.612
在pressesEnded實現中

00:10:11.678 --> 00:10:13.914
決定你是否想處理這個事件

00:10:13.981 --> 00:10:16.650
如果你想去處理這個事件
就不要調用super

00:10:17.084 --> 00:10:18.552
但如果你不打算處理這個事件

00:10:18.619 --> 00:10:20.187
就確保調用super

00:10:20.254 --> 00:10:22.322
這樣它就可以繼續沿響應鏈向上走

00:10:22.389 --> 00:10:24.892
UIApplication
有機會去接收它

00:10:26.660 --> 00:10:27.694
最後 若你正寫遊戲

00:10:27.761 --> 00:10:29.730
你只有一個視圖控制器是非常常見的

00:10:29.796 --> 00:10:31.298
它是用於展示你的遊戲

00:10:31.431 --> 00:10:32.666
所以這種情況下

00:10:32.733 --> 00:10:35.068
你可能考慮使用
GCEventViewController

00:10:35.269 --> 00:10:37.971
它有這個屬性
controllerUserInteractionEnabled

00:10:38.305 --> 00:10:39.706
功能是

00:10:39.773 --> 00:10:42.376
當用戶使用遊戲控制器瀏覽你的應用時

00:10:42.442 --> 00:10:44.511
不但事件將會到遊戲控制器框架中

00:10:44.578 --> 00:10:46.346
這框架可能你早已在遊戲中使用

00:10:46.547 --> 00:10:50.017
而且它可能產生UIKit事件
如按下或其他

00:10:50.217 --> 00:10:52.186
當你正在玩遊戲
你可能沒有興趣

00:10:52.252 --> 00:10:54.154
接收這些事件的UIKit版本

00:10:54.221 --> 00:10:56.490
如果你設置
controllerUserInteractionEnabled

00:10:56.657 --> 00:10:59.726
值爲假 在遊戲進行中

00:10:59.793 --> 00:11:03.063
然後按下菜單按鈕
不會立刻退出你的應用程序

00:11:03.130 --> 00:11:06.033
取而代之 你將能夠捕獲它
並你自己處理它

00:11:06.300 --> 00:11:08.569
但是當用戶返回到遊戲根菜單

00:11:08.635 --> 00:11:10.037
你將把值設置爲是

00:11:10.103 --> 00:11:12.339
所以按下菜單按鈕能夠退出程序

00:11:13.740 --> 00:11:15.542
這就是事件處理

00:11:16.543 --> 00:11:18.345
現在讓我們討論下分層圖像

00:11:20.047 --> 00:11:22.082
分層圖像是一個用戶界面元素

00:11:22.149 --> 00:11:23.617
這是tvOS特有的

00:11:24.117 --> 00:11:27.254
你可能在所有演示中看過這些圖像了

00:11:29.089 --> 00:11:30.824
它們最多可以有五層圖像

00:11:30.891 --> 00:11:32.860
是移動的parallaxing內容

00:11:34.228 --> 00:11:35.996
這些是應用圖標需要的

00:11:36.063 --> 00:11:39.633
在tvOS上 你的應用圖標至少兩層

00:11:39.867 --> 00:11:41.635
你至少需要對該格式有點熟悉

00:11:41.702 --> 00:11:43.170
如果你將在tvOS上開發

00:11:44.738 --> 00:11:45.506
它們是交互的

00:11:45.572 --> 00:11:48.275
當用戶在Siri Remote上
移動手指時

00:11:48.609 --> 00:11:51.678
圖像會隨着他們的手指移動

00:11:51.745 --> 00:11:53.380
這不僅僅是看起來很好看

00:11:53.447 --> 00:11:56.450
這幫用戶意識到他們的輸入被實時接收

00:11:56.517 --> 00:11:59.353
幫他們預見焦點運動發生的軌跡

00:12:01.255 --> 00:12:01.889
它們是動畫

00:12:01.955 --> 00:12:04.525
所以他們有很多很棒的內置動畫

00:12:04.591 --> 00:12:06.226
特別是當它們獲取聚焦時

00:12:06.360 --> 00:12:09.062
我們將展示怎樣才能協調這些動畫

00:12:09.129 --> 00:12:10.898
使你的應用變得生動

00:12:13.400 --> 00:12:15.202
所以讓我們來討論一下交互

00:12:16.637 --> 00:12:19.673
我剛纔播放的視頻
是UIImageView

00:12:19.740 --> 00:12:21.108
若UIImageView獲得聚焦

00:12:21.175 --> 00:12:24.478
它會給你一個很棒的浮動外表

00:12:24.545 --> 00:12:26.713
若你有一分層圖像在
ImageView裏

00:12:27.381 --> 00:12:29.917
但是這是常出現的情況一個
UI圖像不是

00:12:29.983 --> 00:12:31.118
實際獲得聚焦的控件

00:12:31.185 --> 00:12:34.721
圖像通常是較大控件的組件

00:12:34.788 --> 00:12:37.324
在這種情況下 較大控件將獲得聚焦

00:12:37.391 --> 00:12:38.892
所以怎麼獲取浮動外觀

00:12:38.959 --> 00:12:40.928
如果圖像不被聚焦？

00:12:41.128 --> 00:12:42.663
它不一定要獲得聚焦

00:12:42.763 --> 00:12:44.631
我們已擁有添加至
UIImageView的屬性

00:12:44.698 --> 00:12:47.234
叫作
adjustsImageWhenAncestorfocused

00:12:47.668 --> 00:12:49.002
如果你設置它的值爲真

00:12:49.069 --> 00:12:51.638
如果任何父圖片視圖獲得聚焦

00:12:51.905 --> 00:12:53.907
然後圖像會自動獲得浮動外觀

00:12:53.974 --> 00:12:55.709
並開始對用戶的輸入有響應

00:12:57.711 --> 00:12:59.580
而且這些圖像也有
“按入”狀態

00:12:59.646 --> 00:13:02.516
這與一些正常默認值狀態有點不同

00:13:02.583 --> 00:13:04.484
它們就在屏幕上

00:13:04.718 --> 00:13:06.486
它們有種“壓入”外觀

00:13:06.553 --> 00:13:08.655
好像用戶用手壓下一樣

00:13:09.256 --> 00:13:10.924
你可以手動觸發它

00:13:10.991 --> 00:13:13.493
通過在ImageView設置
isHighlighted屬性值

00:13:13.560 --> 00:13:16.663
爲真或假 那會產生打開或關閉的效果

00:13:17.264 --> 00:13:19.900
你可能想在控件子類裏這樣做

00:13:19.967 --> 00:13:22.369
當用戶開始按下選擇按鈕 例如

00:13:23.036 --> 00:13:25.472
但有一些情況 我們已爲你考慮到了

00:13:25.539 --> 00:13:27.508
你完全沒有必要手動去做這些

00:13:27.641 --> 00:13:30.844
這些圖像是在
UICollectionViewCells內部

00:13:30.911 --> 00:13:32.913
還有圖像在自定義
UIButton內部

00:13:32.980 --> 00:13:35.616
這些情況下 你完全無需管理
isHighlighted屬性

00:13:35.682 --> 00:13:37.050
我們會爲你管理它

00:13:39.186 --> 00:13:42.356
我們談過了動畫
讓我們再進一步瞭解它

00:13:43.423 --> 00:13:46.527
當這些圖像形成時發生的事情之一

00:13:46.593 --> 00:13:48.629
在浮動外觀裏它們變得更大

00:13:48.695 --> 00:13:49.663
或者看起來更大

00:13:50.330 --> 00:13:51.732
你可能不得不在毗鄰使用它

00:13:51.798 --> 00:13:52.866
你可能把它移開

00:13:52.933 --> 00:13:55.536
比如在電影畫報下方你有一個標籤

00:13:56.170 --> 00:13:58.572
你可以使用自動佈局去限制這些

00:13:58.639 --> 00:14:00.641
所以 若我在此有ImageView

00:14:00.807 --> 00:14:03.911
若我改變ImageView大小
使其與圖像一樣尺寸

00:14:04.912 --> 00:14:06.914
然後你可以限制圖像的邊框

00:14:06.980 --> 00:14:09.183
但當它放大 邊框不變

00:14:09.249 --> 00:14:11.485
但圖片的可見度會變

00:14:13.020 --> 00:14:15.656
所以弄清圖片獲得聚焦時會有多大

00:14:15.722 --> 00:14:18.258
我們展示focusedFrameGuide佈局指引

00:14:18.358 --> 00:14:21.528
你可以附加其他限制條件到
那個佈局指引上

00:14:21.595 --> 00:14:23.730
這樣 那些視圖將會離圖像足夠遠

00:14:23.797 --> 00:14:26.567
當它們變大時 不會被剪輯

00:14:27.835 --> 00:14:28.735
讓我們過一遍這個

00:14:28.802 --> 00:14:31.205
我在此有個ImageView
並且有個紅色輪廓

00:14:31.271 --> 00:14:33.373
它代表UIImageView的框架

00:14:34.374 --> 00:14:37.444
當它獲得聚焦時會變大

00:14:37.511 --> 00:14:39.479
但是框架依舊在那個紅色輪廓

00:14:41.114 --> 00:14:44.518
這個虛線輪廓顯示的就是
focusedFrameGuide的位置

00:14:44.585 --> 00:14:46.353
那個focusedFrameGuide一直在那裏

00:14:46.420 --> 00:14:47.955
即使現在沒有獲取聚焦

00:14:48.021 --> 00:14:49.590
你可以選擇其中一個

00:14:49.656 --> 00:14:51.158
以附加布局約束

00:14:52.359 --> 00:14:55.629
或者你可以選擇改變哪個活躍約束

00:14:55.696 --> 00:14:57.764
基於該元素現在是否被聚焦

00:14:57.831 --> 00:15:00.701
若你那樣做 你真該使用協調API

00:15:00.767 --> 00:15:02.803
那個我們在焦點更新上展示的

00:15:02.870 --> 00:15:05.873
確保動畫同系統動畫發生時間一致

00:15:06.473 --> 00:15:08.208
系統動畫有很多微妙的東西

00:15:08.275 --> 00:15:10.110
比如具體時間

00:15:10.177 --> 00:15:12.346
它取決於用戶滑動得多快

00:15:12.412 --> 00:15:14.381
或者視圖離屏幕多遠被聚焦

00:15:14.448 --> 00:15:15.716
此時它獲得聚焦

00:15:16.016 --> 00:15:18.318
所以將目標值放入你的應用
是不太可能的

00:15:18.385 --> 00:15:20.454
你需要使用協調API

00:15:20.521 --> 00:15:23.123
確保你的動畫同系統動畫匹配

00:15:23.290 --> 00:15:24.391
向你展示這是如何做到的

00:15:24.458 --> 00:15:26.660
我想邀請Randy上臺
給你們做個演示

00:15:26.727 --> 00:15:27.594
Randy

00:15:31.865 --> 00:15:32.833
謝謝你 Justin

00:15:33.300 --> 00:15:36.770
今天我將要過一遍這兩個
我們經常碰到的情況

00:15:36.937 --> 00:15:39.273
關於添加交互至分層圖像

00:15:39.773 --> 00:15:42.643
首先我們將看一個UIButton

00:15:42.809 --> 00:15:45.913
其次我們將看一下
自定義集合視圖表單元

00:15:46.413 --> 00:15:49.416
現在開始
我有一個在Xcode中已打開的項目

00:15:49.483 --> 00:15:51.752
有一個資產目錄 裏麪包含分層圖像

00:15:51.818 --> 00:15:53.120
我只有一個...

00:15:54.721 --> 00:15:56.490
ViewController子類

00:15:56.857 --> 00:15:58.992
我們將要拖拽出一個按鈕——

00:16:03.063 --> 00:16:03.964
到畫布

00:16:05.199 --> 00:16:06.266
查看它

00:16:07.534 --> 00:16:09.303
給它一個圖像

00:16:17.444 --> 00:16:18.679
我們將刪除它的標題

00:16:21.815 --> 00:16:23.684
接下來我們將加幾個約束條件

00:16:24.985 --> 00:16:26.887
讓它垂直和水平居中

00:16:28.956 --> 00:16:33.427
接下來我們將更新按鈕框架來匹配
這些約束條件

00:16:33.594 --> 00:16:35.495
你可以通過下拉菜單來做

00:16:35.796 --> 00:16:39.099
但是我通常用鍵盤快捷鍵
Command Option Equals

00:16:40.467 --> 00:16:42.402
如果你仔細看

00:16:42.603 --> 00:16:45.472
按鈕的周圍有一點額外空間

00:16:46.139 --> 00:16:48.175
這些是邊緣內容插圖

00:16:48.442 --> 00:16:50.544
我們不需要這些 所以可以刪除

00:16:53.113 --> 00:16:54.515
這看來差不多是我們想要的

00:16:54.615 --> 00:16:57.551
我們將構建和運行並且看看它怎樣運作的

00:16:58.418 --> 00:17:02.122
我正用tvOS模擬器 但已將Mac
與Siri Remote配對了

00:17:03.257 --> 00:17:07.060
對於交互是怎樣工作的
你會得到一個較好的認識

00:17:08.127 --> 00:17:11.464
我的手指正按下選擇按鈕

00:17:12.132 --> 00:17:15.602
但這只是變暗的效果和稍微壓入的效果

00:17:15.969 --> 00:17:17.738
當手指移動到數字轉換器上

00:17:17.804 --> 00:17:19.205
它對我的觸摸沒有迴應

00:17:19.640 --> 00:17:20.374
讓我們做得更好

00:17:22.576 --> 00:17:23.443
爲此

00:17:23.510 --> 00:17:28.882
我將打開Assistant Editor
爲ViewController的子類

00:17:29.883 --> 00:17:32.152
爲按鈕拖拽出一個輪廓

00:17:36.790 --> 00:17:38.192
在viewDidLoad裏

00:17:38.258 --> 00:17:41.495
我將從那個按鈕裏
抓取ImageView

00:17:47.401 --> 00:17:50.337
我要去打開
Justin告訴我們的那個屬性

00:17:51.471 --> 00:17:53.607
adjustsImageWhenAncestorFocused

00:17:56.410 --> 00:17:57.978
現在如果我構建並且運行

00:17:59.746 --> 00:18:02.282
你應該看到按鈕

00:18:02.349 --> 00:18:04.017
對在遙控器上的手指作出迴應

00:18:05.319 --> 00:18:07.354
當我點擊它的時候 它推進去

00:18:07.788 --> 00:18:08.989
但是我們仍然還有一個問題

00:18:09.056 --> 00:18:10.757
因爲這個按鈕的邊緣被裁剪了

00:18:11.225 --> 00:18:13.060
由於默認

00:18:13.594 --> 00:18:17.030
按鈕的ImageView
把clipsToBounds打開

00:18:17.764 --> 00:18:18.832
我們把它關閉就好

00:18:19.967 --> 00:18:20.868
再一次構建和運行

00:18:22.002 --> 00:18:23.770
我們應該能夠得到我們想要的結果

00:18:24.204 --> 00:18:26.807
交互的分層圖像是非常棒的

00:18:26.874 --> 00:18:28.842
它們圍繞着我的手指移動

00:18:29.009 --> 00:18:30.844
當我按下它 它就壓入

00:18:31.745 --> 00:18:32.579
很好

00:18:33.146 --> 00:18:34.348
讓我們來一些更復雜的

00:18:37.317 --> 00:18:38.585
我在此還有一個項目

00:18:39.586 --> 00:18:42.890
這個項目有CollectionViewController的子類

00:18:44.057 --> 00:18:46.260
我繼續

00:18:46.326 --> 00:18:49.730
並且配置了CollectionView的尺寸參數

00:18:50.197 --> 00:18:52.699
根據tvOS的Human Interface Guidelines

00:18:52.766 --> 00:18:53.967
一個六欄位佈局

00:18:54.735 --> 00:18:57.871
這些指引告訴我們
我想要一個寬度爲250點的單元

00:18:58.438 --> 00:19:02.176
我知道 基於我的設計
我需要垂直450點

00:19:02.376 --> 00:19:03.677
作爲單元的內容

00:19:04.344 --> 00:19:06.213
指引告訴我們
對於一個六欄位佈局

00:19:06.280 --> 00:19:08.982
我們需要水平單元間48點

00:19:09.349 --> 00:19:11.585
及垂直單元間至少100點

00:19:12.085 --> 00:19:15.722
最後 爲在廣泛TV的安全區域內

00:19:15.789 --> 00:19:17.958
我們想在頂部和底部各保留60點離

00:19:18.025 --> 00:19:19.726
及左邊和右邊各保留90點

00:19:19.826 --> 00:19:21.695
這些數字在指引裏都有

00:19:22.696 --> 00:19:24.398
讓我們看下單元本身

00:19:25.866 --> 00:19:29.436
我已經給它一個自定義類和複用標識

00:19:30.170 --> 00:19:31.839
我們將要放大一點

00:19:32.506 --> 00:19:34.041
增加一些...

00:19:35.175 --> 00:19:36.210
自定義子視圖

00:19:38.178 --> 00:19:40.280
首先我們將拖拽出
一個ImageView

00:19:45.786 --> 00:19:47.154
然後拖拽出一個標籤

00:19:52.793 --> 00:19:55.796
現在我將增加一些限制條件來佈局視圖

00:19:55.863 --> 00:19:59.399
我想讓ImageView緊靠
左右頂部邊緣

00:19:59.900 --> 00:20:03.770
我們恰巧知道我們所有的圖像
有相同的寬高比

00:20:03.837 --> 00:20:06.106
所以我將添加寬高比限制條件

00:20:07.875 --> 00:20:09.676
我將編輯寬高比約束條件

00:20:09.743 --> 00:20:12.179
以匹配我們的圖像
所以它們的比例是2:3

00:20:14.114 --> 00:20:16.216
我將爲我的標籤添加一些限制條件

00:20:16.416 --> 00:20:18.819
我從標籤按Control拖拽
至ImageView

00:20:18.886 --> 00:20:22.322
添加一個水平居中的約束條件

00:20:23.924 --> 00:20:27.261
我也想要我的ImageView

00:20:27.594 --> 00:20:31.265
我的標籤頂部離
ImageView底部有15點

00:20:31.431 --> 00:20:33.901
我會在它們兩項之間添加一個約束

00:20:36.236 --> 00:20:38.205
現在我們已經添加了這些約束

00:20:38.272 --> 00:20:39.806
我們可以執行
Command Option Equals

00:20:40.140 --> 00:20:42.109
把一切迴歸原位

00:20:43.243 --> 00:20:45.712
最後 這個字體有點小

00:20:45.779 --> 00:20:48.982
我把它更改成Body風格

00:20:49.316 --> 00:20:50.150
不錯的選擇

00:20:51.218 --> 00:20:55.689
我們已從海報上的
ImageView獲得一些輪廓

00:20:55.923 --> 00:20:57.858
我們只要鉤住上面的和標籤

00:20:59.359 --> 00:21:02.362
現在讓我們快速瀏覽下
CollectionViewController

00:21:02.829 --> 00:21:05.098
你可以看到我們剛在這部分執行的項數

00:21:05.165 --> 00:21:06.900
以及cellForItemAtindexPath

00:21:07.568 --> 00:21:09.069
如果我構建和運行

00:21:10.571 --> 00:21:13.540
我應該能得到我們尋找的基本佈局

00:21:14.141 --> 00:21:15.976
但是我們將看看行爲是怎樣的

00:21:20.514 --> 00:21:22.216
這幾乎是我想要的佈局

00:21:22.282 --> 00:21:23.584
全是我想要的

00:21:23.650 --> 00:21:26.420
但一下子你說不出哪個項目被聚焦

00:21:26.486 --> 00:21:29.823
當我點擊 你看不到我選擇的單元

00:21:30.891 --> 00:21:33.627
讓我們來處理這些事情

00:21:34.862 --> 00:21:40.234
現在 首先 爲了看到焦點所在
我們將進入Interface Builder

00:21:40.300 --> 00:21:41.835
選擇我們的ImageView

00:21:41.902 --> 00:21:44.805
檢查adjustImagewhenfocused檢查標記

00:21:45.873 --> 00:21:49.910
這足以讓我們的單元

00:21:49.977 --> 00:21:51.645
開始迴應焦點

00:21:52.513 --> 00:21:55.315
如你看到
它很大 它對我的觸摸作出反應

00:21:55.382 --> 00:21:56.917
當我點擊它 它推進

00:21:57.584 --> 00:21:59.653
但是標籤重疊在底部

00:21:59.820 --> 00:22:03.123
他們對焦點尺寸變化沒有反應

00:22:04.024 --> 00:22:05.526
爲此

00:22:05.592 --> 00:22:09.263
我們將打開自定義單元類

00:22:09.329 --> 00:22:10.430
在Assistant Editor裏

00:22:11.865 --> 00:22:12.699
還有...

00:22:13.534 --> 00:22:18.005
首先 我們將拖拽出一個輪廓

00:22:18.071 --> 00:22:20.707
爲標籤頂部和ImageView底部
之間的垂直約束

00:22:21.508 --> 00:22:22.643
我們將爲它添加一個輪廓

00:22:22.709 --> 00:22:28.315
我們稱它爲
unfocusedConstraint

00:22:33.687 --> 00:22:35.222
然後我將添加另外一個屬性

00:22:39.126 --> 00:22:41.094
爲
focusedConstraint

00:22:42.029 --> 00:22:44.831
我們將在awakeFromNib裏
設置focusedConstraint

00:22:48.202 --> 00:22:50.604
成爲label.topAnchor

00:23:00.314 --> 00:23:06.687
與imageView的
focusedFrameGuide.bottomAnchor相關

00:23:07.788 --> 00:23:09.022
還有那15點

00:23:12.726 --> 00:23:13.560
然後在...

00:23:15.362 --> 00:23:17.231
updateConstraints

00:23:18.332 --> 00:23:20.200
我們將設置
focusedFrame

00:23:20.334 --> 00:23:22.402
我們將使focusedConstraint爲活躍狀態

00:23:22.870 --> 00:23:24.905
當單元獲得聚焦

00:23:25.706 --> 00:23:29.209
我們將使
unfocusedConstraint爲活躍狀態

00:23:31.178 --> 00:23:32.579
在相反的情況下

00:23:34.515 --> 00:23:38.118
最後 在didUpdateFocus裏
我們將使約束無效

00:23:38.185 --> 00:23:41.421
通過調用
setNeedsUpdateConstraints

00:23:42.956 --> 00:23:44.858
我們將添加一個協調動畫

00:23:45.492 --> 00:23:48.328
通過調用
addCoordinatedAnimations

00:23:50.230 --> 00:23:51.532
在那裏面

00:23:52.666 --> 00:23:54.635
我們將調用
layoutIfNeeded

00:24:02.342 --> 00:24:04.945
這應該夠了
現在當我們構建和運行

00:24:08.081 --> 00:24:11.218
我們應該看到標籤移動到下方

00:24:11.285 --> 00:24:13.954
離開焦點海報

00:24:14.621 --> 00:24:18.392
當我從一個移動到另一個

00:24:18.992 --> 00:24:22.396
它們全部動畫離開
回到它們應該在的地方

00:24:23.363 --> 00:24:24.198
很好！

00:24:30.370 --> 00:24:33.473
記住 使用focusedFrameGuide
和coordinatedAnimations

00:24:33.540 --> 00:24:36.944
不要忘記打開
adjustsImageWhenAncestorFocused

00:24:37.010 --> 00:24:37.978
去獲取這些效果

00:24:38.111 --> 00:24:39.746
關於那些 現在交還給Justin

00:24:45.485 --> 00:24:46.920
謝謝那很棒的演示 Randy

00:24:46.987 --> 00:24:48.455
你可以看到它是多麼的容易

00:24:48.522 --> 00:24:50.991
去真正利用獨特的用戶接口元素

00:24:51.058 --> 00:24:52.793
真正讓你的tvOS應用變得生動

00:24:54.261 --> 00:24:55.329
讓我們說些別的

00:24:55.395 --> 00:24:56.763
討論一下滾動條

00:24:57.197 --> 00:25:00.767
tvOS上滾動條與iOS上有些不同

00:25:00.868 --> 00:25:02.870
它必須間接觸摸

00:25:03.203 --> 00:25:05.906
當用戶在iOS上
ScrollView裏滾動

00:25:05.973 --> 00:25:07.441
它們用肢體觸摸ScrollView

00:25:07.508 --> 00:25:08.675
當他們移動手指

00:25:08.742 --> 00:25:10.210
ScrollView偏移將會調整

00:25:10.277 --> 00:25:11.879
去匹配他們手指的運動

00:25:12.379 --> 00:25:14.882
但在tvOS上並非如此

00:25:14.948 --> 00:25:16.850
在tvOS上
你並不是在觸摸屏幕

00:25:17.184 --> 00:25:19.920
也不是直接操控滾動視圖

00:25:19.987 --> 00:25:22.456
你真正做的是改變焦點項目

00:25:22.656 --> 00:25:25.826
當焦點項目改變
焦點引擎會檢測到它

00:25:25.893 --> 00:25:28.762
它會自動滾動到
它需要的任何滾動視圖

00:25:28.829 --> 00:25:31.298
確保焦點視圖總是在屏幕上

00:25:34.034 --> 00:25:36.670
焦點引擎會選擇它能夠調整的最佳偏移

00:25:36.737 --> 00:25:38.805
基於視圖的尺寸和滾動視圖的尺寸

00:25:38.972 --> 00:25:40.807
但也有時候你想控制

00:25:40.874 --> 00:25:42.609
它將發送給你什麼樣的偏移

00:25:42.843 --> 00:25:45.579
例如 一個人們常用的自定義

00:25:45.646 --> 00:25:47.915
是他們想要焦點視圖始終居中

00:25:47.981 --> 00:25:49.383
在ScrollView的邊界內

00:25:49.449 --> 00:25:50.317
你可以那樣做

00:25:50.484 --> 00:25:53.086
你可以那樣做的方法是
使用UIScrollViewDelegate方法

00:25:53.287 --> 00:25:54.521
你有可能從iOS中識別

00:25:54.588 --> 00:25:59.026
那是scrollViewWillEndDragging:
withVelocity:targetContentOffset

00:25:59.493 --> 00:26:01.862
那裏最終的參數
targetContentOffset

00:26:01.929 --> 00:26:03.797
是一個指針指向CGPoint

00:26:04.531 --> 00:26:06.934
那個指針代表偏移

00:26:07.000 --> 00:26:10.304
焦點引擎將滾動到的地方
如果你什麼也不做

00:26:10.370 --> 00:26:12.639
那個是偏移
它會自動爲你展示

00:26:12.940 --> 00:26:14.908
但是如果你願意自己計算

00:26:14.975 --> 00:26:17.177
滾動偏移是多少

00:26:17.277 --> 00:26:18.178
你也可以那樣做

00:26:18.245 --> 00:26:20.314
計算你想要的偏移

00:26:20.380 --> 00:26:22.616
把它的值存在指針中

00:26:22.916 --> 00:26:24.218
讓指針指向你

00:26:24.284 --> 00:26:26.119
焦點引擎將滾到那裏

00:26:26.320 --> 00:26:28.288
伴隨着它
你會得到很多很棒的系統動畫

00:26:28.355 --> 00:26:29.623
對於你所選擇的偏移

00:26:31.725 --> 00:26:33.727
但是並不是說直接操控總是不好的

00:26:33.794 --> 00:26:35.729
或者在tvOS上從來不是個好主意

00:26:36.029 --> 00:26:38.031
有些情況下 你想這樣做

00:26:38.098 --> 00:26:40.601
所以 一些情況下需要

00:26:40.667 --> 00:26:42.769
比如你有許多全屏內容

00:26:42.836 --> 00:26:44.438
可能是一個全屏相片集

00:26:44.605 --> 00:26:46.740
那裏照片可以完全覆蓋到屏幕邊緣

00:26:47.074 --> 00:26:49.543
一個UIKit的例子
是UIPageViewController

00:26:49.810 --> 00:26:52.446
當你有一個UIPageViewController
它並不做焦點滾動

00:26:52.513 --> 00:26:54.114
取而代之 你直接操控

00:26:54.181 --> 00:26:56.450
PageViewController
的ScrollView內容

00:26:56.950 --> 00:26:58.919
還有其他情況下 你有很多滾動文本

00:26:58.986 --> 00:27:01.321
這是你想直接操控的另外一處

00:27:01.455 --> 00:27:04.758
基本上 不清楚焦點項目是什麼時

00:27:05.025 --> 00:27:08.328
你不能夠看到下一個焦點項目是什麼

00:27:08.662 --> 00:27:10.531
這些都是非常適合直接操控的情況

00:27:11.265 --> 00:27:12.132
如果你想要那樣做

00:27:12.199 --> 00:27:14.201
你沒必要去寫你自己的
手勢處理代碼

00:27:14.268 --> 00:27:17.104
你可以複用早已存在
於ScrollView的拖動手勢

00:27:17.604 --> 00:27:20.040
這個技巧是
滾動視圖是被配置成

00:27:20.107 --> 00:27:22.809
直接觸摸的唯一監聽

00:27:23.277 --> 00:27:25.946
Siri Remote
正生成間接觸摸

00:27:26.280 --> 00:27:27.881
你只需獲得這個拖動手勢識別器

00:27:27.948 --> 00:27:30.017
確認它監聽間接觸摸

00:27:31.318 --> 00:27:33.754
我們也有定向按下手勢識別器

00:27:33.820 --> 00:27:35.422
只有tvOS的
ScrollView上纔有

00:27:35.489 --> 00:27:37.791
它是監聽這些箭頭按鈕按下事件

00:27:37.858 --> 00:27:40.227
用戶不使用設備的情況下

00:27:40.294 --> 00:27:42.896
可以觸摸輸入
也可以滾動ScrollView

00:27:43.063 --> 00:27:44.798
這個手勢默認是禁用的

00:27:44.865 --> 00:27:47.334
因爲我們更傾向於
讓這些箭頭按下操控焦點

00:27:47.401 --> 00:27:48.769
而非操控ScrollView偏移

00:27:48.836 --> 00:27:50.037
你需要啓用它

00:27:50.504 --> 00:27:53.207
你可以使用這段代碼去做這兩個事情

00:27:53.273 --> 00:27:56.176
我們從ScrollView中得到
panGestureRecognizer

00:27:56.243 --> 00:27:59.046
我們告訴它我們想監聽間接觸摸事件

00:27:59.580 --> 00:28:01.481
我們得到
directionalPressGestureRecognizer

00:28:01.548 --> 00:28:02.850
告訴它應該是打開的

00:28:03.283 --> 00:28:06.887
如果你這樣做 所有進入
ScrollView的這些事件

00:28:06.954 --> 00:28:09.523
會直接操控ScrollView偏移

00:28:10.724 --> 00:28:13.861
其實 合併直接操控技術

00:28:13.927 --> 00:28:15.562
和焦點交互技術是可能的

00:28:15.629 --> 00:28:16.663
爲了展示如何去做

00:28:16.730 --> 00:28:18.866
我想邀請Kevin上臺演示

00:28:18.932 --> 00:28:19.766
Kevin

00:28:22.169 --> 00:28:23.036
謝謝 Justin

00:28:24.771 --> 00:28:27.841
嗨 我是Kevin Hiscott
我是tvOS工程師

00:28:28.308 --> 00:28:30.544
我們將看一個關於視圖控制器的例子

00:28:30.878 --> 00:28:33.914
在文本視圖中展現條款和條件文本

00:28:34.815 --> 00:28:36.984
TextView是
ScrollView的子類

00:28:37.050 --> 00:28:40.754
我們可以看到怎麼樣向它添加直接操控

00:28:44.458 --> 00:28:47.194
我們去看下我的ZIB
看看我目前爲止設置了什麼

00:28:47.728 --> 00:28:51.398
我有個文本視圖帶有冗長的
Lorem Ipsum粘貼在裏面

00:28:52.599 --> 00:28:55.102
如果我們進入應用程序

00:28:55.169 --> 00:28:57.538
我們可在應用的上下文中看到它的樣子

00:28:59.206 --> 00:29:00.707
展現ViewController時

00:29:00.774 --> 00:29:03.944
我們可以沿着底部的邊緣文本
看到其實文本已被裁剪

00:29:04.344 --> 00:29:07.848
若我努力擦碰Siri Remote
文本不會滾動

00:29:08.415 --> 00:29:09.850
讓我們來改進它

00:29:11.718 --> 00:29:13.253
讓我們進入
ViewController

00:29:13.320 --> 00:29:17.424
在viewDidLoad裏抓取
我爲UITextView創建的輪廓

00:29:17.958 --> 00:29:19.893
我稱它爲
messageTextView

00:29:20.827 --> 00:29:24.498
在messageTextView和任何ScrollView上
有一個panGestureRecognizer

00:29:24.698 --> 00:29:26.633
我們將改變它允許的觸摸類型

00:29:26.700 --> 00:29:28.569
包括間接觸摸的類型

00:29:29.203 --> 00:29:30.270
如Justin所說

00:29:30.337 --> 00:29:32.506
這些觸摸
由Siri Remote創建

00:29:34.074 --> 00:29:37.010
我們還將把isSelectable
的值設置爲真

00:29:37.511 --> 00:29:40.948
這將允許文本視圖獲得聚焦

00:29:41.014 --> 00:29:42.249
和接收這些事件

00:29:42.482 --> 00:29:44.351
讓我們構建和運行看看它們怎樣運作

00:29:52.259 --> 00:29:53.961
呈現ViewController時

00:29:54.528 --> 00:29:56.597
其實我能夠直接擦碰

00:29:56.663 --> 00:29:58.966
通過Siri Remote
使文本上下滾動

00:29:59.399 --> 00:30:01.001
很好 直接操控

00:30:01.935 --> 00:30:05.105
另一個ViewController
所需的好條款和條件

00:30:05.472 --> 00:30:09.376
是讓用戶接受或拒絕你條件的方法

00:30:10.043 --> 00:30:12.079
爲此 讓我們看看我的ZIB

00:30:13.380 --> 00:30:14.748
拖入幾個按鈕

00:30:16.617 --> 00:30:18.485
我將一個標識爲不同意

00:30:20.821 --> 00:30:21.955
另一個標識爲同意

00:30:23.924 --> 00:30:25.726
讓我們構建和運行看看將發生什麼

00:30:25.859 --> 00:30:28.529
我期待發生的是我們的焦點

00:30:28.595 --> 00:30:31.431
伴隨着水平擦碰而作水平移動

00:30:31.498 --> 00:30:34.101
對於垂直擦碰卻始終滾動文本視圖

00:30:34.935 --> 00:30:37.004
但當我呈現
ViewController

00:30:37.204 --> 00:30:41.475
我可以看到那些垂直擦碰確有移動文本

00:30:41.542 --> 00:30:43.243
但是 如果我擦碰得太低

00:30:43.310 --> 00:30:45.312
焦點實際移動到按鈕上

00:30:45.579 --> 00:30:47.181
我就不能滾動文本了

00:30:47.247 --> 00:30:49.316
直到焦點回到文本視圖

00:30:50.083 --> 00:30:52.553
這並非我想要的行爲

00:30:53.987 --> 00:30:55.889
讓我們回到
我的ViewController

00:30:55.956 --> 00:30:57.858
我們將禁用isSelectable

00:30:58.225 --> 00:31:02.696
我們實際上不是想讓TextView
成爲一個可獲聚焦的屏幕元素

00:31:03.463 --> 00:31:05.265
取而代之 我將展示一個小技巧

00:31:06.066 --> 00:31:08.135
我們將抓取panGestureRecognizer

00:31:08.202 --> 00:31:11.972
實際上把它添加到我們的
ViewController視圖

00:31:12.573 --> 00:31:14.575
這將允許消息TextView

00:31:14.641 --> 00:31:17.244
本身不獲聚焦的情況下 接收事件

00:31:18.412 --> 00:31:20.314
讓我們構建和運行看看它的表現

00:31:25.752 --> 00:31:27.521
呈現ViewController時

00:31:28.789 --> 00:31:31.992
我們可以看到不同意按鈕立刻獲得聚焦

00:31:32.259 --> 00:31:34.828
這是因爲文本視圖已經不可獲聚焦了

00:31:35.295 --> 00:31:38.198
我可左右擦碰Siri Remote
去移動焦點

00:31:38.265 --> 00:31:41.602
但任何時候
我可以上下擦碰去移動文本

00:31:42.269 --> 00:31:44.004
很好 這樣看起來不錯

00:31:44.638 --> 00:31:47.274
在tvOS上 我們最後一個要考慮的

00:31:47.541 --> 00:31:51.078
是由其他輸入方法產生的
定向按下類型事件

00:31:51.144 --> 00:31:54.448
像遊戲控制器
鍵盤 或者IR遙控器

00:31:55.148 --> 00:31:57.718
我們讓tvOS很容易支持這些

00:31:57.918 --> 00:31:59.620
讓我們回頭看看我的視圖控制器

00:32:00.087 --> 00:32:03.090
我們將抓取directionalPressGestureRecognizer

00:32:03.156 --> 00:32:05.692
從我們的messageTextView中
並且啓用它

00:32:05.759 --> 00:32:09.062
伴隨着這些類型而允許滾動發生

00:32:09.129 --> 00:32:10.664
由其他設備生成

00:32:11.899 --> 00:32:13.567
我們將要做的最後一件事是

00:32:13.634 --> 00:32:15.969
把GestureRecognizer移動到
我們自己的視圖中

00:32:16.036 --> 00:32:17.137
如我們之前做的

00:32:19.673 --> 00:32:22.109
讓我們構建和運行看看
整體運行情況

00:32:25.612 --> 00:32:27.514
現在當我呈現
條款和條件的時候

00:32:27.714 --> 00:32:30.617
我能夠左右擦碰去移動焦點

00:32:30.717 --> 00:32:34.221
我也能夠左右拍擊去移動焦點

00:32:34.555 --> 00:32:37.925
通過定向按下類型事件
由Siri Remote

00:32:37.991 --> 00:32:39.193
和其他設備生成

00:32:39.760 --> 00:32:43.664
我可以上下擦碰去改變內容偏移

00:32:43.730 --> 00:32:46.633
但是我也可以上下拍擊去增量滾動

00:32:47.367 --> 00:32:50.904
很好！這是一個全功能條款和條件的
ViewController

00:32:50.971 --> 00:32:51.805
在tvOS中

00:32:52.406 --> 00:32:53.440
謝謝你們

00:32:53.507 --> 00:32:56.476
我已迫不及待接受你們應用裏的
所有條款和條件

00:32:56.743 --> 00:32:57.711
交還給Justin

00:32:59.947 --> 00:33:02.349
讓我們來繼續最後一個話題 文本輸入

00:33:03.383 --> 00:33:05.752
我們在tvOS上有很棒的系統鍵盤

00:33:06.186 --> 00:33:08.655
有很多特性只可用在

00:33:08.722 --> 00:33:10.324
系統鍵盤上

00:33:10.390 --> 00:33:12.125
我想和你們介紹一下幾個特性

00:33:12.526 --> 00:33:14.094
其中一個功能是聽寫

00:33:14.228 --> 00:33:16.563
用戶可對Siri Remote說話

00:33:16.630 --> 00:33:18.465
文字會顯示在屏幕上

00:33:19.233 --> 00:33:20.467
我們還支持Bluetooth鍵盤

00:33:20.534 --> 00:33:23.070
若將其和Bluetooth鍵盤配對
你就可以直接在那裏打字

00:33:24.071 --> 00:33:25.472
我們有新的Apple
TV Remote應用

00:33:25.539 --> 00:33:27.774
因此用戶可以把電話與TV配對

00:33:27.841 --> 00:33:29.610
他們可以在電話鍵盤上打字

00:33:29.743 --> 00:33:30.944
發送文字到TV

00:33:32.012 --> 00:33:33.747
這裏還有很多本地化的細節

00:33:33.814 --> 00:33:35.682
系統鍵盤會爲你處理好

00:33:36.750 --> 00:33:38.552
它能夠自動改變自己的佈局

00:33:38.619 --> 00:33:40.521
根據用戶正使用的輸入設備

00:33:40.888 --> 00:33:43.557
這裏有一個你可能最熟悉的線性佈局

00:33:43.624 --> 00:33:45.292
但還有我們將會用到的網格佈局

00:33:45.359 --> 00:33:47.327
如果沒和TV配對的
Siri Remote

00:33:48.262 --> 00:33:49.196
有很多很棒的功能

00:33:49.263 --> 00:33:51.098
它們只有在系統鍵盤裏是可用的

00:33:51.164 --> 00:33:53.033
如果你使用的不是系統鍵盤

00:33:53.100 --> 00:33:55.802
用戶將不能夠使用這些功能

00:33:56.103 --> 00:33:59.072
我們不鼓勵你推出自己的鍵盤

00:33:59.139 --> 00:34:00.374
堅持用系統鍵盤

00:34:00.440 --> 00:34:02.342
用戶可以使用所有這些功能

00:34:02.409 --> 00:34:03.944
它們全部只對系統可用

00:34:05.212 --> 00:34:06.547
這裏有些方法你可以自定義

00:34:06.613 --> 00:34:07.981
內置的系統鍵盤

00:34:08.248 --> 00:34:10.817
其中一個方法是添加
一個你自己的視圖

00:34:10.884 --> 00:34:13.053
到鍵盤上
會呈現在它旁邊

00:34:13.187 --> 00:34:15.589
你可使用UIResponder上的
一些API

00:34:15.656 --> 00:34:17.257
那些你有可能從iOS中識別

00:34:17.456 --> 00:34:18.992
這裏有inputAccessoryView

00:34:19.126 --> 00:34:21.027
和inputAccessoryViewController

00:34:21.161 --> 00:34:23.230
如果你在文本框上指派這些屬性

00:34:23.330 --> 00:34:24.998
你想去編輯文本的文本框

00:34:25.264 --> 00:34:26.699
當鍵盤出現

00:34:26.766 --> 00:34:29.101
在鍵盤的旁邊展現你自己的視圖

00:34:29.168 --> 00:34:31.471
一秒後 我將展現剛纔那一幕的截屏

00:34:32.706 --> 00:34:34.574
最後 我想指出行爲的一個變化

00:34:34.641 --> 00:34:37.010
出現在tvOS 9
和tvOS 10間

00:34:37.444 --> 00:34:40.313
UITextField有一個屬性叫
keyboardAppearance

00:34:40.414 --> 00:34:42.449
你可以設置它爲不指定亮和暗

00:34:42.850 --> 00:34:45.619
在tvOS 9上 如果你設置它
比如 暗

00:34:45.918 --> 00:34:48.856
然後鍵盤呈現時 不僅自身變暗

00:34:48.922 --> 00:34:52.092
屏幕上的文本框同樣會變暗

00:34:52.559 --> 00:34:55.161
現在tvOS 10裏
我們有新外觀API

00:34:55.228 --> 00:34:57.664
所以整個系統能夠對應的變亮或變暗

00:34:57.865 --> 00:35:00.000
現在我們在tvOS 10上做的

00:35:00.067 --> 00:35:03.337
是這個鍵盤外觀屬性隻影響鍵盤

00:35:03.403 --> 00:35:05.005
和文本框外觀

00:35:05.072 --> 00:35:08.175
它將被更大的
UPI Tray Collection所制定

00:35:09.576 --> 00:35:11.078
這是我答應展示給你們的屏幕截圖

00:35:11.144 --> 00:35:13.914
這種情況下
我已經創建了一個常規文本框

00:35:13.981 --> 00:35:15.516
我給它一個inputAccessoryView

00:35:15.582 --> 00:35:17.885
我放了一個紅色邊控在上面 所以
你可以看到它在哪裏

00:35:18.151 --> 00:35:19.853
這些UI標籤全部都是定製的

00:35:19.920 --> 00:35:23.257
我只是把它們放在那裏
所以你可以添加任何種類的附件視圖

00:35:23.323 --> 00:35:24.992
那些你想讓它們出現在鍵盤上方的

00:35:27.327 --> 00:35:29.096
另一個你可在鍵盤上獲得UI方法

00:35:29.162 --> 00:35:31.598
同時當鍵盤正使用
SearchController

00:35:31.865 --> 00:35:33.934
你使用一些從iOS中能識別的API

00:35:34.001 --> 00:35:35.769
這就是UISearchController

00:35:37.471 --> 00:35:40.207
我們有鍵盤並且搜索結果呈現在其下方

00:35:41.208 --> 00:35:42.809
這也是自動適配的

00:35:42.876 --> 00:35:44.778
這裏有基於網格和基於線性的佈局

00:35:44.845 --> 00:35:46.847
取決於用戶正在使用的輸入設備

00:35:47.314 --> 00:35:49.383
你可以把它嵌入到其他視圖類型的內部

00:35:49.516 --> 00:35:51.418
SearchController
通常要模態展現

00:35:51.485 --> 00:35:52.553
並接管整個屏幕

00:35:52.920 --> 00:35:56.190
但你可把它嵌入到另一個視圖控制器中

00:35:56.256 --> 00:35:57.858
通過使用UISearchContainerViewController

00:35:57.925 --> 00:36:00.227
我將在幾頁幻燈片裏展現一段樣本代碼

00:36:01.995 --> 00:36:04.131
你提供了爲搜索結果定製的視圖控制器

00:36:04.198 --> 00:36:06.466
搜索結果的視覺外觀

00:36:06.533 --> 00:36:07.968
和交互完全取決於你

00:36:08.035 --> 00:36:09.069
你可以做任何你想做的

00:36:09.136 --> 00:36:11.405
你可能使用一個視圖集合
或可能使用一個分開視圖

00:36:11.471 --> 00:36:13.073
它有一個表視圖和集合視圖

00:36:13.207 --> 00:36:14.041
其他你想要的

00:36:14.107 --> 00:36:15.642
取決於你來定製視圖控制器

00:36:17.945 --> 00:36:21.048
很快地展示一下如何在其他東西內部
嵌入一個搜索控制器

00:36:21.114 --> 00:36:22.950
比如 一個標籤欄控制器

00:36:23.016 --> 00:36:25.552
我獲取到我的定製類
ViewController

00:36:25.986 --> 00:36:29.056
在viewDidAppear裏
我將創建一個searchController

00:36:29.156 --> 00:36:30.257
我想確保不做第二回

00:36:30.324 --> 00:36:32.025
所以我檢查確保
我之前沒有做過

00:36:33.694 --> 00:36:35.195
然後我創建了UISearchController

00:36:35.262 --> 00:36:37.664
告訴它我的結果使用何種視圖控制器

00:36:37.731 --> 00:36:39.800
當搜索查詢變更時 與誰聯繫

00:36:41.034 --> 00:36:42.269
然後我要去包裹那些

00:36:42.336 --> 00:36:44.104
UISearchContainerViewController內部的東西

00:36:44.171 --> 00:36:46.240
現允許我拿這個container

00:36:46.306 --> 00:36:48.742
我可以在其上面做常規的
ViewController containment

00:36:49.076 --> 00:36:51.011
我將它作爲一個ChildViewController添加

00:36:51.445 --> 00:36:52.412
如果你想這樣做

00:36:52.479 --> 00:36:55.649
你將會很容易在標籤欄內部
使用搜索控制器

00:36:55.716 --> 00:36:57.518
如在tvOS上的一些系統應用程序

00:36:59.820 --> 00:37:01.188
這就是文本輸入

00:37:01.688 --> 00:37:02.523
總的來說

00:37:02.589 --> 00:37:04.591
我們希望你們能從本次演講中
得到的東西之一

00:37:04.791 --> 00:37:08.195
首先是當你正處理菜單按鈕 小心

00:37:08.295 --> 00:37:11.465
記住你不想去幹擾系統手勢

00:37:12.933 --> 00:37:13.934
當你正使用分層圖像時

00:37:14.001 --> 00:37:16.603
利用我們提供給你的佈局指引

00:37:16.670 --> 00:37:18.238
和協調動畫API

00:37:18.305 --> 00:37:20.307
確保你的視圖能夠移動

00:37:20.374 --> 00:37:22.142
與系統動畫協同運作

00:37:23.877 --> 00:37:25.679
若你想在ScrollViews上
直接操控

00:37:25.746 --> 00:37:27.581
你無需自己做任何處理代碼的事情

00:37:27.648 --> 00:37:30.150
只要複用已經內置的拖動手勢

00:37:31.585 --> 00:37:33.320
最後 使用系統鍵盤去確保

00:37:33.387 --> 00:37:34.621
你的用戶能獲得使用

00:37:34.688 --> 00:37:37.024
所有的功能 當他們輸入文本的時候

00:37:37.758 --> 00:37:39.993
想獲取本次演講更多的信息
你可以訪問這個URL

00:37:40.060 --> 00:37:41.762
這裏你會找到文檔的鏈接

00:37:42.029 --> 00:37:44.665
本週接下來還會有其他演講

00:37:44.731 --> 00:37:46.099
我想特別推薦兩個

00:37:46.166 --> 00:37:48.235
都是關於tvOS上的UIKit

00:37:48.569 --> 00:37:50.204
希望大家在餘下的會議中過得愉快 謝謝