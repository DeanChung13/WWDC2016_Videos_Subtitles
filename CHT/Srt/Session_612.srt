00:00:19.820 --> 00:00:23.957
Apple Watch的遊戲技術

00:00:28.061 --> 00:00:31.732
下午好 歡迎來到
Apple Watch的遊戲技術

00:00:32.198 --> 00:00:34.434
我希望你們有一次美妙的 WWDC

00:00:34.501 --> 00:00:37.871
而且和我一樣對新技術感到興奮

00:00:39.506 --> 00:00:43.177
iOS上的遊戲抓住了用戶的想象力

00:00:43.777 --> 00:00:45.546
作爲一個長時間的遊戲者

00:00:45.612 --> 00:00:49.650
我玩過很多遊戲
是由像你們這樣的開發者創造的

00:00:51.118 --> 00:00:55.689
聽說Apple Watch遊戲
的潛力激起了你們的興趣

00:00:56.256 --> 00:01:00.928
所以今天我們很高興能夠
展示watchOS 3的遊戲

00:01:03.430 --> 00:01:07.100
本場演講涉及你開發一個優秀
遊戲所需要的所有方面

00:01:07.167 --> 00:01:08.836
在這個最個人化的設備上

00:01:09.736 --> 00:01:13.207
我們首先會向你展示怎麼使用
Apple Watch的多種輸入

00:01:13.273 --> 00:01:15.108
並向用戶提供反饋

00:01:16.476 --> 00:01:18.478
我們將向你介紹我們的框架

00:01:18.545 --> 00:01:21.315
允許你創造醒目的2D和3D視覺效果

00:01:22.182 --> 00:01:24.451
我們還會展示怎麼集成社交遊戲

00:01:24.518 --> 00:01:26.453
和多玩家進入你的應用

00:01:26.854 --> 00:01:27.788
最後

00:01:28.121 --> 00:01:31.024
我們會展示所有開發過程中可以
用到的工具

00:01:31.091 --> 00:01:33.060
和一些最佳做法

00:01:34.928 --> 00:01:38.232
watchOS提供一套豐富的工具來
幫助你開始

00:01:39.032 --> 00:01:41.235
這包括你可能熟悉的一些東西

00:01:41.301 --> 00:01:43.670
比如WatchKit和豐富通知

00:01:44.872 --> 00:01:47.674
今天我們會聚焦在新特性上

00:01:49.543 --> 00:01:52.079
在WatchKit中我們提供新界面

00:01:52.346 --> 00:01:55.482
這允許你在Xcode中
用Interface Builder創建遊戲

00:01:56.083 --> 00:01:58.852
現可在Digital Crown中
使用手勢識別

00:01:58.919 --> 00:02:00.821
來對遊戲進行精確操作

00:02:01.822 --> 00:02:03.657
還有觸真體驗反饋

00:02:03.724 --> 00:02:05.626
是一個很好的方式使你的體驗

00:02:05.692 --> 00:02:07.461
更個人化和擬真

00:02:09.729 --> 00:02:10.997
SpriteKit和
SceneKit

00:02:11.064 --> 00:02:14.501
是兩個框架用來讓你創造更豐富
的視覺效果來取悅你的用戶

00:02:14.601 --> 00:02:16.637
它們提供地方來添加音頻

00:02:16.703 --> 00:02:19.506
並形成一個簡單的基礎
你可以在之上創建你的遊戲

00:02:21.175 --> 00:02:24.878
Game Center提供API
來添加社交功能

00:02:24.945 --> 00:02:29.383
給你的遊戲 包括成就 排行榜和
多人遊戲

00:02:30.984 --> 00:02:34.154
但是現在讓我用一個例子來展示
什麼是可能的

00:02:35.522 --> 00:02:39.092
這是用我們的3D框架
SceneKit創建的一個遊戲

00:02:39.960 --> 00:02:42.629
最開始你有一個組合含有不同
形狀的塊

00:02:44.164 --> 00:02:47.501
你的目標是旋轉他們直到它們
形成一個熟悉的輪廓

00:02:48.569 --> 00:02:50.137
讓我們看一會

00:02:54.942 --> 00:02:58.078
現在玩家嬴了
我們會再玩一輪

00:02:58.145 --> 00:03:00.581
我會稍微說說這裏發生了什麼

00:03:03.450 --> 00:03:07.454
我們用平移手勢來控制左右旋轉

00:03:07.988 --> 00:03:11.425
當它在同一平面時我們會
使用Digital Crown

00:03:11.692 --> 00:03:13.327
來旋轉它到合適的位置來獲勝

00:03:17.764 --> 00:03:20.033
現我們介紹了
Apple Watch的遊戲

00:03:20.100 --> 00:03:23.170
並且展示了一個樣本
讓我們深入看看如何使你的遊戲

00:03:23.237 --> 00:03:25.639
用更自然的方式和用戶互動

00:03:27.374 --> 00:03:30.644
Apple Watch
是我們最私人的設備

00:03:31.111 --> 00:03:35.449
我們通常近距離使用它
通常用一根手指觸摸屏幕

00:03:35.516 --> 00:03:36.783
或者旋轉錶冠

00:03:37.384 --> 00:03:39.453
你可以從加速儀中讀到移動

00:03:39.820 --> 00:03:42.189
或者你可以用觸真體驗引擎讓它震動

00:03:43.090 --> 00:03:46.059
當一起使用時
這創造一種感覺

00:03:46.126 --> 00:03:48.195
你在使用一個實體設備

00:03:48.262 --> 00:03:51.665
這種操作和迴應是有形的

00:03:54.034 --> 00:03:55.269
讓我們從觸摸開始

00:03:55.669 --> 00:03:59.106
在watchOS 3中
我們提供四種手勢

00:03:59.173 --> 00:04:01.675
對遊戲的不同互動工作良好

00:04:01.742 --> 00:04:03.610
我會一個個介紹它們

00:04:05.279 --> 00:04:06.713
點擊是最簡單的

00:04:07.281 --> 00:04:09.950
你觸摸屏幕 你可以選擇一個目標

00:04:10.017 --> 00:04:11.652
或者移動到一個位置

00:04:13.220 --> 00:04:18.257
平移適用於滾動和在給定方向上的
移動

00:04:21.060 --> 00:04:23.897
想要瀏覽到另一個屏幕可以使用
滑動

00:04:24.231 --> 00:04:28.368
比如你的裝備菜單
你可以往回滑動來退出

00:04:31.104 --> 00:04:36.276
長按是訪問遊戲主菜單的推薦方法

00:04:36.443 --> 00:04:38.846
在這你可以提供選項比如退出

00:04:38.912 --> 00:04:41.081
繼續或者顯示
Game Center統計

00:04:44.184 --> 00:04:46.920
現在我們展示了四種手勢的例子

00:04:46.987 --> 00:04:50.190
讓我們談談我們提供給你來使用
它們的類

00:04:50.524 --> 00:04:54.261
對於點擊 我們提供
WKTapGestureRecognizer

00:04:55.095 --> 00:04:58.098
對於平移WKPanGestureRecognizer

00:04:59.032 --> 00:05:03.670
對滑動和長按是類似的

00:05:07.508 --> 00:05:10.210
這些手勢在Interface
Builder中可用

00:05:10.577 --> 00:05:12.613
當你進入對象庫

00:05:12.679 --> 00:05:15.182
並且搜索手勢
你會找到它們

00:05:16.216 --> 00:05:18.585
如果你選擇一個
你可以把它加入你的事件

00:05:18.652 --> 00:05:22.322
在我們的例子中
我們加入了點擊 滑動和平移

00:05:24.625 --> 00:05:27.361
這些手勢有多種選項可以配置

00:05:27.427 --> 00:05:31.265
比如使它成爲向右滑動
或向左 向上 向下

00:05:32.232 --> 00:05:34.935
這些其他選項配置多種行爲

00:05:35.602 --> 00:05:40.607
如果你使用多種手勢
你應該看一下最後這個選項

00:05:40.674 --> 00:05:42.976
因爲指定優先級很重要

00:05:43.243 --> 00:05:45.145
因爲手勢可能衝突

00:05:46.480 --> 00:05:47.981
我說的衝突是什麼意思？

00:05:48.048 --> 00:05:50.150
一個右滑動

00:05:51.185 --> 00:05:54.488
也可以被認爲是一個點擊再加
一個平移

00:05:55.722 --> 00:06:00.093
所以開發者需要決定誰有
優先級

00:06:00.761 --> 00:06:04.164
在遊戲中一個點擊和平移

00:06:04.231 --> 00:06:07.100
表示直接和你的遊戲世界進行的互動

00:06:08.235 --> 00:06:11.238
我們應該讓它們比滑動有更高的優先級

00:06:11.305 --> 00:06:13.040
這會使你進入裝備

00:06:14.174 --> 00:06:18.545
回到Interface Builder
你配置這個必須首先失敗域

00:06:18.946 --> 00:06:20.347
在滑動手勢中

00:06:20.747 --> 00:06:24.218
你設置點擊和平移
這反映優先級

00:06:27.487 --> 00:06:30.557
現在我們給storyboard
進入了手勢

00:06:30.858 --> 00:06:32.960
你需要實現一個行動方法

00:06:33.560 --> 00:06:36.263
這個行動方法獲得相應的類

00:06:38.065 --> 00:06:40.133
有很多可以讀取的屬性

00:06:40.300 --> 00:06:42.803
比如在對象中的位置和對象邊界

00:06:43.203 --> 00:06:44.571
還有最後這個 狀態

00:06:45.405 --> 00:06:48.842
我認爲最好用一個代碼來展示它

00:06:49.543 --> 00:06:54.448
所以在那個我演示了的解迷應用中
我們有一個handlePan行動

00:06:54.848 --> 00:06:58.719
我們做的第一件事是我們獲得
位置和邊界

00:06:59.219 --> 00:07:02.656
然後我們查看狀態
如果我們已經開始了平移

00:07:03.156 --> 00:07:04.691
我們要設置旋轉

00:07:05.726 --> 00:07:10.163
如果我們在一次平移中間
無論它改變 結束 取消

00:07:10.230 --> 00:07:11.098
我們都要更新它

00:07:13.934 --> 00:07:17.104
我想用一些需要考慮的事做爲
手勢這部分的結尾

00:07:17.971 --> 00:07:20.541
因爲用戶戴着Apple Watch

00:07:20.607 --> 00:07:24.978
每個手勢都要用到兩隻手
所以最好使它們很短

00:07:26.180 --> 00:07:30.184
還有一個需要注意的重點是
和其他設備相比

00:07:30.651 --> 00:07:33.320
你的手指和屏幕相比相對較大

00:07:33.987 --> 00:07:35.689
請考慮到這點

00:07:35.756 --> 00:07:39.092
並確保當你互動時內容還是可見的

00:07:40.294 --> 00:07:44.731
最後你知道的
我們的用戶界面指南

00:07:45.499 --> 00:07:48.735
它推薦我們使手勢容易發現

00:07:48.936 --> 00:07:50.370
你應該遵守這些

00:07:53.607 --> 00:07:56.543
現在你們中的很多人可能對手勢
熟悉

00:07:56.610 --> 00:07:59.780
但是我們談談一些
Apple Watch特有的東西

00:07:59.847 --> 00:08:01.448
即Digital Crown

00:08:03.250 --> 00:08:06.787
界面指南說它便於選擇和滾動

00:08:07.654 --> 00:08:11.291
但是做爲玩家 這使我們回到街機

00:08:11.358 --> 00:08:16.029
有一個轉盤可以轉動來旋轉宇宙
飛船或移動一個踏板

00:08:16.897 --> 00:08:21.735
或者在這個例子中
我們可以來回移動一個球

00:08:22.870 --> 00:08:24.771
直到我們決定我們想把它放在哪

00:08:25.305 --> 00:08:28.342
當我們準備好時
我們可以點擊來讓它落到指定位置

00:08:30.644 --> 00:08:32.712
利用這個錶冠相當容易

00:08:33.013 --> 00:08:37.017
你訪問crownSequencer
它在你的主界面類中可用

00:08:37.618 --> 00:08:39.318
有一些屬性你可以讀取

00:08:44.591 --> 00:08:47.294
比如每秒旋轉數或者我們是否空閒

00:08:47.528 --> 00:08:50.330
或者你可以定義一個委託

00:08:51.031 --> 00:08:53.133
這個委託提供兩個方法

00:08:53.800 --> 00:08:56.570
CrownDidRotate
獲得rotationalDelta

00:08:58.205 --> 00:09:01.341
rotationalDelta
表示錶冠的改變

00:09:01.408 --> 00:09:03.110
從這個方法最後一次被調用起的改變

00:09:03.177 --> 00:09:08.048
如果它正遠離你 該值爲正
如果它正接近你 該值爲負

00:09:08.115 --> 00:09:12.019
不論Apple Watch是在
左手還是右手都是這樣

00:09:13.554 --> 00:09:18.258
當錶冠停止旋轉時
調用crownDidBecomeIdle

00:09:19.993 --> 00:09:23.530
扼要複述一下 我們認爲
Digital Crown有利於遊戲

00:09:23.764 --> 00:09:25.265
而且很容易採用

00:09:25.532 --> 00:09:28.502
我等不及看到你們能創造什麼新
遊戲

00:09:28.569 --> 00:09:30.304
用這種新的控制

00:09:32.940 --> 00:09:37.678
現在加速儀可以用來增加其他互動

00:09:37.744 --> 00:09:39.980
比如給彈球遊戲添加傾斜

00:09:40.881 --> 00:09:43.350
或者給檯球遊戲添加旋轉

00:09:45.452 --> 00:09:48.622
你通過CMMotionManager
訪問加速儀

00:09:49.823 --> 00:09:51.825
這裏有一些要考慮的

00:09:52.125 --> 00:09:54.328
你可能知道

00:09:55.229 --> 00:09:58.565
當你擡起watch屏幕是可見的

00:09:58.632 --> 00:10:01.802
但是當你放下手臂時屏幕變成空白

00:10:02.603 --> 00:10:05.639
當這發生時會把應用放入後臺

00:10:06.340 --> 00:10:09.943
所以你移動手腕的話屏幕可能變
空白

00:10:10.310 --> 00:10:12.679
所以在遊戲中你要考慮到這點

00:10:12.746 --> 00:10:16.350
一個建議是使用後臺處理

00:10:17.217 --> 00:10:22.322
你可以調用NSProcessInfo中的
performExpiringActivityWithReason

00:10:23.724 --> 00:10:26.360
來給你的遊戲循環一些時間來繼續

00:10:26.426 --> 00:10:29.129
並給你的用戶一個平滑的體驗

00:10:31.632 --> 00:10:34.101
讓我們用一個例子看看怎麼在代碼
中使用它

00:10:36.937 --> 00:10:40.741
我們首先要訪問
CMMotionManager單例

00:10:41.175 --> 00:10:43.443
我們在這把它設爲一個屬性
來稍後使用它

00:10:44.278 --> 00:10:48.949
在主界面的willActivate
我們詢問是否加速儀可見

00:10:51.051 --> 00:10:54.454
如果可見我們配置一些事
比如更新間隔

00:10:54.955 --> 00:10:58.525
我們要求motionManager
開始發送更新事件

00:10:58.892 --> 00:11:01.628
我們提供一塊代碼來接收這些
事件

00:11:02.162 --> 00:11:05.365
我們可以把它發送回我們的遊戲
給用戶提供反饋

00:11:06.800 --> 00:11:11.205
當我們結束時我們應該告訴
motionManager停止發送更新

00:11:11.271 --> 00:11:12.840
這樣可以保存電池壽命

00:11:16.243 --> 00:11:17.344
讓我們回顧一下

00:11:17.411 --> 00:11:20.814
我們覺得加速儀可以很好地
增加其他互動

00:11:21.315 --> 00:11:25.252
請注意屏幕有可能變空白
所以考慮使用後臺處理

00:11:26.353 --> 00:11:29.323
並確保在需要時使用它

00:11:29.423 --> 00:11:31.491
並在完成後停止監聽

00:11:33.627 --> 00:11:35.362
讓我們來看看觸真體驗技術

00:11:36.463 --> 00:11:40.367
在iOS上你只能讓你的設備震動

00:11:41.635 --> 00:11:45.005
在Apple Watch上你可以
創造更私人的體驗

00:11:45.072 --> 00:11:47.341
通過使用不同的觸真體驗模式

00:11:48.509 --> 00:11:52.846
每種觸真體驗包含一個震動
和短音頻

00:11:53.580 --> 00:11:55.682
通過使用觸覺和聽覺

00:11:56.183 --> 00:11:58.185
加上屏幕上的視覺線索

00:11:59.386 --> 00:12:04.157
你可以創造更擬真更有趣的遊戲
體驗

00:12:05.526 --> 00:12:07.995
我們提供九種觸真體驗反饋

00:12:08.161 --> 00:12:11.398
我想通過一些例子來講解在你的
遊戲中可以怎麼使用它

00:12:13.967 --> 00:12:15.636
這是通知觸真體驗

00:12:16.603 --> 00:12:20.707
這個品紅色的三角形表示觸真體驗
震動的時間

00:12:21.542 --> 00:12:25.646
這個波形表示和它一起播放的
音頻聲音

00:12:25.913 --> 00:12:27.147
讓我們聽聽它

00:12:30.317 --> 00:12:31.618
如這個例子所示

00:12:31.685 --> 00:12:34.288
通知觸真體驗對警告人們很好

00:12:34.354 --> 00:12:36.089
當重要的事發生時

00:12:36.156 --> 00:12:37.658
需要他們的注意

00:12:37.858 --> 00:12:41.261
如果你採用豐富通知那麼你可以免費
得到它

00:12:41.328 --> 00:12:43.897
但是如果你在遊戲中探索世界

00:12:44.331 --> 00:12:48.569
你可以用它告訴你的玩家
你的村莊被攻擊了

00:12:51.138 --> 00:12:53.941
方向觸真體驗 上和下

00:12:54.308 --> 00:12:57.077
被用來警告用戶
當一個重要值增加

00:12:57.144 --> 00:12:58.579
或減少且數量顯著時

00:12:59.313 --> 00:13:00.414
在這個例子中

00:13:02.449 --> 00:13:03.350
你的健康值很低

00:13:04.284 --> 00:13:05.953
或者當你喝健康藥劑

00:13:08.021 --> 00:13:08.856
你感到好一些

00:13:11.825 --> 00:13:14.161
還有一個聲音是開始一個行動

00:13:14.494 --> 00:13:15.963
比如開始一次競速

00:13:19.199 --> 00:13:21.101
或者當你想暫停時

00:13:26.540 --> 00:13:29.109
成功觸真體驗提供確認音調

00:13:29.643 --> 00:13:31.311
這可以用在

00:13:32.579 --> 00:13:33.480
你贏了

00:13:36.049 --> 00:13:38.752
或者你失敗了
請再試一次

00:13:40.687 --> 00:13:44.091
最後一個例子
有一個很微妙的點擊觸真體驗

00:13:44.691 --> 00:13:46.193
這種觸真體驗有一點特殊

00:13:46.793 --> 00:13:50.364
如你所見 它比其他的更小聲更短

00:13:50.831 --> 00:13:54.568
實際上 我不確定你是否能聽到
音頻但是讓我們試試

00:13:59.473 --> 00:14:01.074
這種觸真體驗提供感覺

00:14:01.141 --> 00:14:04.011
在一個指定的增量或
間隔點擊撥號的感覺

00:14:05.245 --> 00:14:09.049
在遊戲中可以用在開一個箱子的
鎖

00:14:09.183 --> 00:14:12.219
或者給用戶提供反饋
他們撞上了障礙

00:14:15.689 --> 00:14:17.324
現在我已經給出了一些例子

00:14:17.524 --> 00:14:20.761
我想要指出要採用這些觸真體驗事件
很容易

00:14:20.827 --> 00:14:24.331
你調用play函數然後傳遞定量

00:14:24.398 --> 00:14:27.634
指定你想要的種類
以及你想要喚起的感覺

00:14:30.938 --> 00:14:33.574
讓我用一些要注意的事
以結束觸真體驗的演講

00:14:34.508 --> 00:14:37.044
Taptic Engine
和傳統的音頻不同

00:14:37.644 --> 00:14:39.980
傳統音頻中你你一次只能播放
一個觸真體驗

00:14:42.816 --> 00:14:47.821
還要注意這些效果是用來爲重要
事件引起注意

00:14:48.522 --> 00:14:50.157
他們的有效性會減少

00:14:51.391 --> 00:14:53.894
如果你不斷震動watch

00:14:54.528 --> 00:14:56.230
所以請有節制的使用它

00:14:56.530 --> 00:14:59.066
我認爲你們會有很棒的體驗

00:15:01.168 --> 00:15:03.837
讓我們回顧一下
我們討論了手勢識別

00:15:03.904 --> 00:15:05.706
和把它們用在遊戲中的一些想法

00:15:06.273 --> 00:15:08.175
我們展示瞭如果使用錶冠

00:15:08.242 --> 00:15:09.977
來創造引人注目的遊戲

00:15:10.811 --> 00:15:13.780
我們討論瞭如果把加速儀包含到
你的應用中

00:15:14.214 --> 00:15:16.617
最後我們討論了觸真體驗反饋

00:15:16.783 --> 00:15:18.318
使你的遊戲更擬真

00:15:19.419 --> 00:15:21.588
現在我想交給Fatima

00:15:21.688 --> 00:15:23.991
來談談我們的圖形框架
謝謝

00:15:31.698 --> 00:15:32.633
謝謝Christy

00:15:34.501 --> 00:15:36.170
嘿大家好我叫Fatima

00:15:36.236 --> 00:15:39.239
在這部分我們要談談我們的
圖形框架

00:15:39.306 --> 00:15:40.541
SpriteKit
和SceneKit

00:15:40.807 --> 00:15:45.913
你用來在Apple Watch開發
很酷的遊戲

00:15:46.547 --> 00:15:48.549
什麼是SpriteKit
和SceneKit？

00:15:48.815 --> 00:15:52.186
SpriteKit和SceneKit
是Apple的2D和3D框架

00:15:52.252 --> 00:15:53.487
針對遊戲和圖形

00:15:54.087 --> 00:15:55.889
你可以在遊戲中用任一個框架

00:15:55.956 --> 00:15:57.791
或者把它們組合到一起

00:15:58.725 --> 00:15:59.927
它們使用起來很簡單

00:15:59.993 --> 00:16:03.530
在Xcode中有很好的集成工具和
編輯器

00:16:04.298 --> 00:16:08.402
它們在macOS iOS
和tvOS上可用

00:16:08.468 --> 00:16:11.138
今年它們也在watchOS上可用了

00:16:14.007 --> 00:16:15.275
在Apple Watch上

00:16:15.642 --> 00:16:18.712
SpriteKit和
SceneKit第一次來到你身邊

00:16:18.779 --> 00:16:21.081
GPU加速 實時渲染

00:16:21.815 --> 00:16:25.652
這允許你創造非常動態的內容

00:16:25.752 --> 00:16:28.088
還使你的遊戲很有互動性

00:16:31.825 --> 00:16:34.027
讓我們來看看一些很酷的特性

00:16:34.094 --> 00:16:35.662
你可在Apple Watch上使用

00:16:37.631 --> 00:16:39.800
讓我們從動畫開始

00:16:41.301 --> 00:16:44.905
你可以在SpriteKit中
用SKAction創造2D動畫

00:16:45.372 --> 00:16:49.176
你可以在SceneKit中
用SDNAction創造3D動畫

00:16:49.243 --> 00:16:50.844
來使你的遊戲互動性好

00:16:52.412 --> 00:16:56.316
你可以用動作來移動 旋轉和縮放
你的物體

00:16:56.383 --> 00:17:01.088
通過添加一個或一系列動作

00:17:01.154 --> 00:17:03.156
來創造更復雜的動畫

00:17:07.895 --> 00:17:09.530
接下來我們有顆粒

00:17:10.196 --> 00:17:14.167
你在SpriteKit和
SceneKit中都可創造顆粒模擬

00:17:14.233 --> 00:17:16.069
來爲遊戲增加有趣的效果

00:17:18.372 --> 00:17:23.676
使用顆粒模擬你可以模擬火
雪 雨

00:17:23.743 --> 00:17:26.046
和很多很多其他有趣的效果

00:17:30.450 --> 00:17:31.752
接下來我們有物理定律

00:17:32.586 --> 00:17:35.956
SpriteKit和
SceneKit都集成了物理定律

00:17:36.023 --> 00:17:37.891
來使你的遊戲更有趣

00:17:39.526 --> 00:17:41.562
你可以在對象上啓用物理定律

00:17:41.628 --> 00:17:45.933
然後定義屬性比如質量 速度和
摩擦力

00:17:47.601 --> 00:17:50.871
這些屬性會定義你的物體如何移動

00:17:51.238 --> 00:17:55.609
他們對碰撞有什麼反應
對力有什麼反應 在你的模擬中

00:18:00.647 --> 00:18:01.915
接下來我們有光照

00:18:01.982 --> 00:18:04.184
你可以在遊戲中加入光源

00:18:05.252 --> 00:18:07.788
光只是你場景中的另一個節點

00:18:08.322 --> 00:18:11.525
所以你可以給它添加動作來到處
移動它

00:18:12.793 --> 00:18:15.462
有一個很酷的光照的特性

00:18:15.796 --> 00:18:20.701
是你可以自動用
SKTextures生成普通映射

00:18:27.140 --> 00:18:28.475
接下來我們有攝像機

00:18:28.876 --> 00:18:32.713
SpriteKit和
SceneKit都有攝像機供你使用

00:18:32.946 --> 00:18:34.815
如果你決定使用攝像機

00:18:35.015 --> 00:18:38.619
那麼你將從攝像機的位置渲染
你的場景

00:18:40.053 --> 00:18:43.423
所以攝像機是你視口的中心

00:18:45.859 --> 00:18:48.962
而攝像機就像你場景中的其他
節點一樣

00:18:49.329 --> 00:18:52.566
你可以到處移動它
通過給它添加動作

00:18:56.003 --> 00:18:58.005
接下來我們有形狀和文本

00:18:58.872 --> 00:19:01.842
文本可以做爲一個節點加入遊戲

00:19:02.342 --> 00:19:05.145
所以現在顯示文本

00:19:05.379 --> 00:19:07.915
以及在它之上應用動作和物理定律很容易

00:19:10.851 --> 00:19:12.419
我們還有形狀節點

00:19:12.486 --> 00:19:16.823
你現在還可以在遊戲中創建動態的
幾何形狀

00:19:19.493 --> 00:19:23.797
SpriteKit和
SceneKit中還有可編程着色器

00:19:23.864 --> 00:19:25.866
你可在SpriteKit中
創造着色器

00:19:26.200 --> 00:19:28.902
你可在SceneKit中
創建着色器修改器

00:19:29.570 --> 00:19:32.472
來讓你的遊戲元素
獲得更加定製化的外觀

00:19:36.009 --> 00:19:39.947
現在我們看了一些你可以使用的
很酷的特性

00:19:40.280 --> 00:19:44.518
讓我們看看SpriteKit和SceneKit
在Apple Watch上有什麼不同

00:19:47.855 --> 00:19:49.723
我會從SpriteKit開始

00:19:50.257 --> 00:19:52.926
在SpriteKit中
我們有SKView

00:19:53.827 --> 00:19:55.696
我們用來顯示我們的場景

00:19:57.164 --> 00:19:59.399
我們的場景可以包括很多節點

00:20:01.735 --> 00:20:04.872
比如我們有SKSpriteNode
來添加精靈

00:20:05.472 --> 00:20:07.674
我們有SKLightNode
來添加光照

00:20:07.941 --> 00:20:11.044
我們有SKEmitterNode
來創建顆粒系統

00:20:12.513 --> 00:20:15.048
在watchOS上有些事不同

00:20:16.583 --> 00:20:20.020
首先我們沒有SKView

00:20:20.187 --> 00:20:24.458
我們不得不用WKInterfaceSKScene
來顯示我們的場景

00:20:28.529 --> 00:20:32.566
我們也沒有CIFilters
但是我們能達到相同的效果

00:20:32.666 --> 00:20:34.268
使用SKShader

00:20:37.070 --> 00:20:39.973
我們沒有可定位音頻
但是我們可以播放聲音

00:20:40.040 --> 00:20:44.511
就像其他平臺用
SKAction playSound

00:20:47.114 --> 00:20:50.450
最後我們沒有SKVideoNode

00:20:50.517 --> 00:20:55.122
但可用WKInterfaceMovie
來播放視頻

00:21:00.027 --> 00:21:03.130
這張表總結了
SpriteKit的不同

00:21:03.764 --> 00:21:06.366
對SceneKit
我們幾乎有一樣的區別

00:21:06.633 --> 00:21:11.038
我們有WKInterfaceSCNScene
代替SCNView

00:21:12.806 --> 00:21:16.310
我們沒有可定位的音頻但是我們有
標準音頻

00:21:17.177 --> 00:21:19.446
我們無法訪問CIFilters

00:21:19.646 --> 00:21:23.483
但是我們可以用着色器修改器來
實現相同功能

00:21:25.886 --> 00:21:30.490
所以讓我們用一些例子來看看
爲Apple Watch開發遊戲

00:21:30.757 --> 00:21:33.026
爲一個已有的iOS遊戲

00:21:37.464 --> 00:21:41.235
在這我用iOS上的
SpriteKit模板

00:21:43.170 --> 00:21:45.806
在左邊我可以看到項目的文件

00:21:46.139 --> 00:21:48.208
我們可以看看遊戲場景

00:21:49.076 --> 00:21:52.212
我們在這可以看到我們用了一個
很簡單的場景

00:21:55.782 --> 00:21:58.552
還可以看看
GameViewController

00:22:01.622 --> 00:22:06.159
在這我們可以看到我們用SKView
來顯示我們的場景

00:22:08.362 --> 00:22:10.697
現創建一個針對
Apple Watch的遊戲

00:22:10.764 --> 00:22:13.767
我們要做的就是點擊文件
新目標

00:22:16.737 --> 00:22:19.706
選擇watchOS下的遊戲應用模板

00:22:23.243 --> 00:22:25.312
給它一個名字然後點擊完成

00:22:28.048 --> 00:22:30.717
這個模板爲我們創建了兩個文件夾

00:22:32.386 --> 00:22:35.222
應用文件夾包括
我們的storyboard

00:22:36.323 --> 00:22:40.127
和擴展文件夾含有
我們的InterfaceController

00:22:40.194 --> 00:22:41.328
和我們的遊戲場景

00:22:44.464 --> 00:22:47.000
讓我們看看storyboard

00:22:48.168 --> 00:22:50.470
這是storyboard
我們可以看到

00:22:50.604 --> 00:22:52.940
在中間我們有我們的界面對象

00:22:53.707 --> 00:22:57.144
我們的界面對象在我們的對象庫
中被選擇

00:22:57.978 --> 00:23:00.113
在這我們可以看到我們有選項

00:23:00.380 --> 00:23:04.218
在選擇SceneKit場景
顯示SceneKit內容

00:23:04.384 --> 00:23:07.588
和SpriteKit場景顯示
SpriteKit內容間

00:23:10.791 --> 00:23:16.163
我們的界面對象還有一個在界面
控制器中定義的出口

00:23:16.230 --> 00:23:18.298
我們可以用它來顯示我們的場景

00:23:19.132 --> 00:23:20.701
讓我們來看看它

00:23:23.637 --> 00:23:25.539
這就是那個界面控制器

00:23:27.274 --> 00:23:29.576
讓我們來仔細看看它的代碼

00:23:31.111 --> 00:23:34.615
在這我們看到我們的界面對象

00:23:35.782 --> 00:23:39.453
在喚醒 有語境中我們可以看到
我們在載入場景

00:23:39.520 --> 00:23:41.622
和iOS中做的一樣

00:23:44.024 --> 00:23:46.660
最後我們使用界面對象

00:23:46.927 --> 00:23:51.164
顯示我們的場景
就像在iOS用SKView做的一樣

00:23:54.601 --> 00:23:58.572
這就是你要創建一個Apple
Watch遊戲所需要的全部步驟

00:23:58.639 --> 00:24:00.641
爲一個已經存在的iOS遊戲
在Apple Watch上創建一個遊戲對象

00:24:04.778 --> 00:24:08.148
現在我將有請Christy上臺
介紹社交遊戲

00:24:19.793 --> 00:24:20.827
謝謝Fatima

00:24:21.662 --> 00:24:23.397
讓我們談談Game Center

00:24:24.831 --> 00:24:28.735
如今的遊戲鼓勵參與

00:24:29.036 --> 00:24:30.737
和與朋友競爭

00:24:31.939 --> 00:24:35.442
Game Center
使分享成就和分數

00:24:35.576 --> 00:24:37.211
甚至是一起玩遊戲變得容易

00:24:38.645 --> 00:24:43.483
關於Apple Watch多人遊戲
我們會集中在回合制遊戲

00:24:44.585 --> 00:24:48.722
回合制遊戲和Apple Watch
非常搭配

00:24:49.389 --> 00:24:51.558
它支持短的互動

00:24:52.392 --> 00:24:55.996
我可以接受 不需要兩個玩家
都在場

00:24:56.563 --> 00:25:00.701
我可以進行一輪
當我完成時我可以把它交給你

00:25:01.201 --> 00:25:02.769
你會得到一個豐富通知

00:25:03.403 --> 00:25:05.606
你可以有空時進行一輪

00:25:07.341 --> 00:25:10.143
有很多如何實現一個回合制遊戲
的細節

00:25:10.210 --> 00:25:12.145
我們去年已經談過了

00:25:13.213 --> 00:25:16.884
但是今天我們會強調什麼
是Apple Watch特有的

00:25:17.751 --> 00:25:20.754
關於其他細節請看我們的資料

00:25:21.455 --> 00:25:22.956
或者觀看以前的演講

00:25:23.557 --> 00:25:26.093
我還想說一些新特性

00:25:26.159 --> 00:25:29.062
關於今早覆蓋的iOS 10中的
Game Center

00:25:29.296 --> 00:25:32.733
如果你還沒有看過它
我鼓勵你看一下它的視頻

00:25:34.902 --> 00:25:37.271
來開始創造一個回合制遊戲

00:25:37.905 --> 00:25:39.373
讓我們談談授權

00:25:40.674 --> 00:25:42.509
這比iOS簡單

00:25:44.111 --> 00:25:47.881
你不需要在Apple Watch上
輸入密碼

00:25:48.549 --> 00:25:50.217
當你在手機上登錄

00:25:50.517 --> 00:25:52.753
自動在Apple Watch上登錄

00:25:54.221 --> 00:25:58.058
如果你熟悉iOS上的
Game Center

00:25:58.325 --> 00:26:01.261
你可能知道你會獲得視圖控制器

00:26:01.395 --> 00:26:03.630
並且在一些情況下你要顯示

00:26:03.697 --> 00:26:06.667
我是說在iOS上
在Watch OS上這不是必須的

00:26:08.936 --> 00:26:10.704
讓我們看看代碼

00:26:12.439 --> 00:26:14.708
對你們中
不熟悉Game Center的

00:26:15.142 --> 00:26:19.279
有GKLocalPlayer單例
是我們的API的焦點

00:26:19.413 --> 00:26:22.182
在這個例子中我們發送一個授權
處理器

00:26:23.050 --> 00:26:24.284
它被調用

00:26:24.985 --> 00:26:28.722
當授權完成
無論成功失敗

00:26:28.789 --> 00:26:32.860
如果你成功你可以給用戶反饋他們
他們是否成功登錄

00:26:33.160 --> 00:26:34.661
並且可以開始遊戲

00:26:36.396 --> 00:26:40.334
現在我們授權你可以新建一個
回合制的匹配

00:26:40.968 --> 00:26:44.438
這裏一個重要的決定是如何
和其他玩家匹配

00:26:45.239 --> 00:26:49.877
最簡單的方法是讓Game
Center爲你選擇其他玩家

00:26:49.943 --> 00:26:51.378
這被稱爲自動匹配

00:26:52.246 --> 00:26:55.649
或者你可以載入一個最近玩家列表

00:26:55.716 --> 00:26:57.384
通過程序邀請一個

00:26:58.519 --> 00:27:00.120
讓我們從自動匹配開始

00:27:00.654 --> 00:27:03.190
你創建一個
GKMatchRequest

00:27:03.891 --> 00:27:05.826
你把它傳遞給尋找方法

00:27:06.293 --> 00:27:09.263
GKTurnBasedMatch
類的方法尋找

00:27:09.997 --> 00:27:14.701
當它返回時會給你一個新的回合制
匹配的實例

00:27:14.768 --> 00:27:17.437
你可以用來儲存你的數據和玩遊戲

00:27:18.105 --> 00:27:21.208
請注意這可能會是新匹配

00:27:21.441 --> 00:27:25.612
或者 若Norman創建了一個遊戲
並且完成了他的回合

00:27:26.280 --> 00:27:28.749
我可能會參加他的遊戲的一個空位置

00:27:28.849 --> 00:27:32.853
你的遊戲需要考慮這兩種情況

00:27:34.121 --> 00:27:35.322
讓我們看看代碼

00:27:36.957 --> 00:27:38.825
你創建你的匹配請求

00:27:39.026 --> 00:27:42.663
你設置參數像是最大玩家數量

00:27:43.096 --> 00:27:44.298
你調用查找

00:27:45.499 --> 00:27:47.501
當它成功時你可以開始遊戲

00:27:48.168 --> 00:27:49.403
就是這麼簡單

00:27:51.338 --> 00:27:54.041
通過程序邀請幾乎是一樣的

00:27:54.908 --> 00:27:58.512
你只需要設置另一個參數接收者

00:27:58.579 --> 00:28:01.281
這來自你選擇的玩家列表

00:28:02.950 --> 00:28:07.321
然而要這麼做你需要訪問你一起
玩過遊戲的玩家的一份列表

00:28:08.755 --> 00:28:10.691
我會展示一些示例代碼

00:28:11.725 --> 00:28:14.428
這向你展示如何訪問最近玩家列表

00:28:14.561 --> 00:28:17.297
一個好的地方來
假設你有一個類

00:28:17.798 --> 00:28:20.767
有一個玩家選擇器讓你在列表中挑選

00:28:21.835 --> 00:28:23.370
在喚醒函數中

00:28:24.571 --> 00:28:28.509
調用localPlayer單例上的
loadRecentPlayers

00:28:29.042 --> 00:28:32.613
這假設你以前授權過你的主界面

00:28:33.447 --> 00:28:37.150
我們調用loadRecentPlayers
你得到一個玩家列表

00:28:37.217 --> 00:28:40.888
你最近和他們一起玩過

00:28:40.954 --> 00:28:45.392
在手機 平板或watch上
通過自動匹配

00:28:47.961 --> 00:28:51.565
有一件重要的需要提到的事是
一旦你轉入並保存了它

00:28:51.765 --> 00:28:55.102
你需要選擇你的對手

00:28:57.004 --> 00:28:59.106
爲了幫助你顯示玩家清單

00:28:59.173 --> 00:29:01.942
並給你開發一個回合制遊戲的開始

00:29:02.676 --> 00:29:04.211
我們創建了一個應用例子

00:29:04.278 --> 00:29:07.414
HelloGameKit實現了
回合制遊戲的基本功能

00:29:07.881 --> 00:29:10.317
它基於新的SpriteKit模板

00:29:10.384 --> 00:29:13.754
作爲一個紅利它會展示怎麼使用
手勢識別

00:29:14.321 --> 00:29:18.325
我想簡短的介紹這個例子

00:29:19.059 --> 00:29:22.596
當你啓動應用時
它顯示這樣一個屏幕

00:29:22.663 --> 00:29:24.231
並且說授權

00:29:25.032 --> 00:29:29.203
當授權完成時
它在頂部顯示你的名字

00:29:29.469 --> 00:29:32.039
在底部給你選擇對手的地方

00:29:32.773 --> 00:29:36.877
中間的計數器對你進行的各種
點擊計數

00:29:36.944 --> 00:29:38.912
記錄並保存到遊戲模型中

00:29:38.979 --> 00:29:43.050
這是個簡單的事
在回合制遊戲中保存錯誤

00:29:43.884 --> 00:29:46.386
現在你已經點擊了
在底部選擇一個對手

00:29:46.787 --> 00:29:49.790
這會帶來一個玩家選擇器並
載入最近玩家列表

00:29:49.857 --> 00:29:50.891
讓你選擇其中一個

00:29:51.992 --> 00:29:55.963
它還給你選項來自動匹配
但是我想和Alan玩

00:29:57.231 --> 00:29:58.799
現在他在和我玩

00:29:59.600 --> 00:30:02.202
如果我想要訪問匹配列表

00:30:02.369 --> 00:30:05.439
我可以向左滑動
我會得到匹配瀏覽器

00:30:05.973 --> 00:30:10.143
在這我可以創建一個新的和Alan的
匹配或者選擇一個已有的遊戲

00:30:10.210 --> 00:30:11.912
我將返回遊戲

00:30:12.846 --> 00:30:16.617
最後我可以用長按結束我的回合

00:30:16.917 --> 00:30:19.853
會把遊戲傳給Alan
他可以進行他的回合

00:30:21.321 --> 00:30:23.090
這就是HelloGameKit

00:30:23.457 --> 00:30:26.593
你可以在這個網址下載它

00:30:26.894 --> 00:30:29.329
點擊資源標籤來找到這個例子

00:30:31.865 --> 00:30:36.904
讓我們回顧一下 watchOS中的
Game Center給你授權流水線

00:30:37.905 --> 00:30:42.576
這是一個可編程API
但是我們給你了應用例子

00:30:42.643 --> 00:30:46.013
有UI包括所有你需要做的事

00:30:46.113 --> 00:30:48.182
我們希望這會給你一個好的開始

00:30:49.550 --> 00:30:50.450
有了這些

00:30:52.019 --> 00:30:55.556
我想要把講臺交給Tyler來談談
工具和最佳做法

00:31:00.794 --> 00:31:01.795
謝謝Christy

00:31:01.862 --> 00:31:05.098
我們已介紹了Apple Watch
可用的一些框架

00:31:05.165 --> 00:31:06.233
讓我們談談工具

00:31:07.301 --> 00:31:09.670
你可能熟悉我們豐富的遊戲工具

00:31:09.736 --> 00:31:11.471
已經存在在Xcode中

00:31:11.538 --> 00:31:14.641
我很高興告訴你們這些工具都
對你們可用

00:31:14.708 --> 00:31:16.577
對你的Apple Watch開發

00:31:17.544 --> 00:31:20.547
這包括我們的場景編輯器
它處理在代碼中設置

00:31:20.614 --> 00:31:22.749
和佈局你的場景

00:31:22.816 --> 00:31:25.485
並把它移動到Xcode中
的視覺編輯器

00:31:26.186 --> 00:31:29.957
而不是不斷編輯和迭代你場景
的一個位置

00:31:30.123 --> 00:31:33.427
你可以看到並控制你的節點的位置

00:31:33.994 --> 00:31:37.364
你還可以容易地控制你的場景的
層次

00:31:37.431 --> 00:31:39.366
用場景概覽視圖

00:31:39.600 --> 00:31:42.269
並且創建和修改節點的物理主體

00:31:42.336 --> 00:31:44.271
不需要涉及任何代碼

00:31:45.672 --> 00:31:49.009
現在我們的場景編輯器還包括
一個內置的動作編輯器

00:31:49.142 --> 00:31:51.211
讓你可以容易地創建 修改

00:31:51.278 --> 00:31:55.282
和預覽複雜的可重用動畫
就在你的關卡中

00:31:55.682 --> 00:31:59.119
所以如果你在創建一個複雜的
劇情剪輯來介紹你的關卡

00:31:59.186 --> 00:32:02.523
或者你會在你的代碼中
重用的一個角色動畫

00:32:02.689 --> 00:32:04.925
有了動作編輯器這都容易做到

00:32:06.493 --> 00:32:07.861
當你開發你的遊戲時

00:32:07.928 --> 00:32:11.331
你會發現SpriteKit和
SceneKit強大的顆粒引擎

00:32:11.398 --> 00:32:13.934
在給你的遊戲帶來生命時扮演
重要的角色

00:32:14.067 --> 00:32:16.770
爲你的遊戲創造完美的顆粒很困難

00:32:16.837 --> 00:32:18.405
如果你無法看到它

00:32:18.472 --> 00:32:20.941
幸運的是我們提供一個靈活的工具

00:32:21.008 --> 00:32:23.076
來創建和可視化你的顆粒

00:32:23.577 --> 00:32:27.247
你被允許訪問顆粒的大量屬性

00:32:27.314 --> 00:32:30.450
你修改它們後就能馬上看到效果

00:32:31.451 --> 00:32:34.721
我們還有工具幫你在Apple
Watch中保持優秀的性能

00:32:34.788 --> 00:32:36.456
這包括我們的紋理地圖集

00:32:36.990 --> 00:32:39.359
當你把圖片放入Sprite地圖集

00:32:39.426 --> 00:32:41.962
我們會自動旋轉並重新定位它們

00:32:42.029 --> 00:32:43.197
來形成單一的圖像

00:32:43.430 --> 00:32:46.033
這減少你的遊戲需要使用的繪製
調用次數

00:32:46.099 --> 00:32:49.069
還有很好的一點是不需要對你的
代碼進行任何改變

00:32:49.136 --> 00:32:52.706
你還是可以在這些紋理上操作
因爲它們是單獨的文件

00:32:54.007 --> 00:32:55.108
當你的遊戲運行時

00:32:55.175 --> 00:32:57.377
我們現在提供幀數每秒性能表

00:32:57.544 --> 00:33:00.948
在報告的頂部你獲得很多實時統計

00:33:01.381 --> 00:33:03.217
包括當前的幀率

00:33:04.017 --> 00:33:07.955
以及GPU使用情況 來看看
你GPU的哪部分被使用的最多

00:33:08.856 --> 00:33:11.625
CPU和GPU的幀時間

00:33:11.859 --> 00:33:14.962
這會幫你找出性能瓶頸
是CPU或GPU

00:33:16.330 --> 00:33:20.067
除了實時統計
我們還提供時間軸歷史

00:33:20.367 --> 00:33:22.669
你的CPU和GPU幀時間歷史

00:33:23.170 --> 00:33:27.541
它會分解CPU幀時間到獨立的
部分

00:33:27.741 --> 00:33:30.477
所以你會看到多少時間用來渲染

00:33:30.544 --> 00:33:33.614
或者運行更新循環
或者評估物理動作

00:33:33.680 --> 00:33:35.315
以及多少時間是空閒的

00:33:36.750 --> 00:33:40.120
當你的應用暫停時
你可以在歷史中滾動

00:33:40.187 --> 00:33:42.823
在應用性能歷史中滾動
這樣你能看到它是如何

00:33:42.890 --> 00:33:44.424
隨着你在遊戲中的進展而發展的

00:33:45.192 --> 00:33:48.295
如果有特別感興趣的
你可以深入

00:33:48.362 --> 00:33:51.532
並檢查它的詳情
並得到精確時間

00:33:54.001 --> 00:33:55.869
有一些最佳用法你可以使用

00:33:55.936 --> 00:33:58.872
來確保在Apple Watch上
獲得優秀的性能

00:33:59.273 --> 00:34:02.209
一個好的減少電池使用的方法

00:34:02.276 --> 00:34:04.711
是隻有需要時才更新你的場景

00:34:05.646 --> 00:34:08.549
SpriteKit和
SceneKit會自動跳過渲染

00:34:08.614 --> 00:34:10.918
如果我們偵測到你的場景中沒有變化

00:34:12.085 --> 00:34:15.556
如果你有大的資源
在你場景開始時載入它們

00:34:15.621 --> 00:34:18.458
這樣你就不會因爲載入這些資源
經歷中斷

00:34:18.525 --> 00:34:20.893
你希望你的整個遊戲過程流暢

00:34:21.962 --> 00:34:23.397
你需要有一個幀率的目標

00:34:23.463 --> 00:34:26.166
會提供給用戶一個一致的體驗

00:34:26.233 --> 00:34:30.637
通過明確設定你的界面想要的每
秒幀數來這麼做

00:34:31.772 --> 00:34:34.574
如果你發現你確實面臨性能問題

00:34:34.641 --> 00:34:37.043
有一些方法你可以使用來解決性能
問題

00:34:37.110 --> 00:34:41.681
首先減少任何時間你的場景顯示
的顆粒數

00:34:42.549 --> 00:34:44.751
你可以試着減少資源的細節

00:34:44.818 --> 00:34:47.654
如果它們離得很遠或者被大幅度
縮放了

00:34:47.721 --> 00:34:50.591
這樣做的好處是你通常不會看到
任何

00:34:50.657 --> 00:34:53.460
在你的遊戲視覺保真度上
因爲進行這些減少而造成的改變

00:34:53.793 --> 00:34:57.030
如果你還是面臨問題
減少你場景的複雜度

00:34:57.097 --> 00:35:00.434
直到你找到性能和內容的好的
平衡點

00:35:02.269 --> 00:35:04.338
你在Apple Watch上
開發遊戲時

00:35:04.404 --> 00:35:06.773
你應該時刻記得一些設計考量

00:35:06.840 --> 00:35:08.108
在整個開發過程中

00:35:08.509 --> 00:35:12.880
你不應該簡單地照搬iOS遊戲體驗

00:35:12.946 --> 00:35:15.115
我們希望你能重新思考體驗

00:35:15.415 --> 00:35:18.619
Apple Watch提供的
是輕量的互動

00:35:18.685 --> 00:35:21.588
用戶喜歡一眼就看到遊戲的進展

00:35:21.655 --> 00:35:24.825
你應該圍繞那些忙碌的人設計互動

00:35:26.026 --> 00:35:29.396
你還想要一個簡明簡單的界面

00:35:29.463 --> 00:35:33.500
避免顯示太多信息
或者同時在屏幕上太忙

00:35:33.667 --> 00:35:36.603
你可能把互動分散到多個屏幕中

00:35:36.670 --> 00:35:38.772
這樣可以最大化屏幕空間

00:35:39.673 --> 00:35:41.808
如果你有按鈕或者可觸摸目標

00:35:41.875 --> 00:35:45.412
讓它們足夠大這樣你的用戶可以
舒服地和它們互動

00:35:46.947 --> 00:35:50.050
你還要保持應用視覺的連續性

00:35:50.117 --> 00:35:52.819
它的意思是從一個應用進入你的

00:35:52.886 --> 00:35:54.988
應該有一致的體驗

00:35:55.322 --> 00:35:58.458
它的一部分是選擇一個支持
你的遊戲商標的色調

00:35:58.525 --> 00:36:00.027
在整個遊戲中使用

00:36:01.261 --> 00:36:05.365
我們還建議當可能時在遊戲中
有一個黑色背景

00:36:05.432 --> 00:36:07.935
因爲黑色會

00:36:08.001 --> 00:36:09.503
與Apple Watch面板
無縫混合

00:36:09.570 --> 00:36:12.539
創造出一個無邊界的屏幕
這一美好的錯覺

00:36:14.842 --> 00:36:18.512
你知道了一些Apple Watch
可用的優秀輸入

00:36:18.579 --> 00:36:21.615
優秀的框架你可以用來開發遊戲

00:36:21.949 --> 00:36:25.352
豐富的工具可以用在開發流程上

00:36:25.552 --> 00:36:27.921
我們等不及看到令人興奮
和有趣的遊戲

00:36:27.988 --> 00:36:30.224
你們今年將在
Apple Watch上開發

00:36:31.291 --> 00:36:33.927
想了解更多信息
請訪問開發者網站

00:36:33.994 --> 00:36:36.663
你可以在演講編號612下找到我們

00:36:37.130 --> 00:36:40.934
這周之前的演講提供了很多有用的
信息

00:36:41.134 --> 00:36:43.203
包括“SpriteKit的新特性”

00:36:43.370 --> 00:36:46.673
Game Center中的新特性
SceneKit渲染進展

00:36:46.740 --> 00:36:48.909
watchOS快速互動技術

00:36:48.976 --> 00:36:52.446
如果你想要深入任何一個
我們今天涉及到的領域

00:36:52.513 --> 00:36:54.548
我們強烈推薦你看一看

00:36:55.182 --> 00:36:57.885
謝謝
祝各位在接下來的演講中過得愉快