00:00:19.353 --> 00:00:24.992 
Xcode源代碼編輯器的使用和擴展

00:00:28.262 --> 00:00:29.096 
大家好

00:00:29.530 --> 00:00:32.432 
歡迎來到“Xcode
源代碼編輯器的使用與擴展”

00:00:32.933 --> 00:00:35.102 
我是Mike 是Xcode工程師

00:00:35.269 --> 00:00:37.471 
我是你們和beer bash
之間的必經之路

00:00:39.873 --> 00:00:41.575 
那我們今天要講的是什麼呢？

00:00:42.809 --> 00:00:44.011 
嗯我們馬上開始

00:00:44.077 --> 00:00:46.947 
我將給大家展示XCode 8中
一些新增的很棒的功能

00:00:47.147 --> 00:00:48.315 
但這還不是全部

00:00:48.382 --> 00:00:50.551 
我還會給大家展示
一些非常有幫助的功能

00:00:50.617 --> 00:00:53.420 
這些都已經集成在
今天正運行的Xcode中

00:00:53.487 --> 00:00:55.422 
你可能對這些並不瞭解

00:00:55.489 --> 00:00:56.723 
但是我覺得它們非常酷

00:00:57.291 --> 00:01:01.228 
我每天都用它們來快速編輯
和操控Xcode的源代碼庫

00:01:01.895 --> 00:01:05.331 
需要說明的是我這裏給大家
展示的所有東西

00:01:05.666 --> 00:01:07.534 
在Xcode中的都是標準集成的

00:01:08.135 --> 00:01:11.271 
然後我的同事Chris會到臺上來

00:01:11.405 --> 00:01:14.141 
教大家如何拓展我們所提供的東西

00:01:14.474 --> 00:01:17.110 
並教大家如何進一步
擴展Xcode源代碼編輯器

00:01:18.145 --> 00:01:20.147 
你可以編寫擴展程序

00:01:20.214 --> 00:01:23.183 
讓編輯器做一些你經常要它做的事情

00:01:23.283 --> 00:01:25.185 
然後你甚至還可以分享這些擴展程序

00:01:25.252 --> 00:01:28.222 
給你的朋友同事甚至全世界

00:01:28.288 --> 00:01:30.591 
在源代碼編輯器中
你將會注意到的第一個東西

00:01:30.657 --> 00:01:34.194 
或者你只要在今天會場上
擡頭環視一下就會看到

00:01:34.261 --> 00:01:37.698 
我們新的源代碼字體SF mono

00:01:38.799 --> 00:01:42.069 
這是mono space對系統字體
San Francisco的致敬

00:01:42.669 --> 00:01:47.841 
我們的字體專家特意設計了適合顯示屏
retina的SF mono字體

00:01:48.208 --> 00:01:49.543 
還精心設計了

00:01:49.610 --> 00:01:51.945 
程序代碼符的各種符號字體

00:01:52.012 --> 00:01:54.882 
即便在很小的尺寸上都清晰可辨

00:01:55.782 --> 00:01:57.117 
大家將注意到的下一個是

00:01:57.184 --> 00:01:59.353 
看我正在編輯器中來回移動的地方

00:01:59.987 --> 00:02:03.156 
就是我們對當前編輯行會進行高亮顯示

00:02:03.223 --> 00:02:05.492 
這樣一目瞭然很快就可以
定位當前編輯的地方

00:02:06.326 --> 00:02:10.531 
每個內置的Xcode主題都有精細的

00:02:11.131 --> 00:02:14.401 
人工配置的高亮顏色但也可自定義

00:02:14.635 --> 00:02:16.937 
所以你可以按自己喜好
將它改得儘量醒目

00:02:17.004 --> 00:02:20.040 
或者如果你不喜歡這樣的
也可將它設置爲完全透明

00:02:21.542 --> 00:02:25.479 
你可能已經熟悉我們的註釋
和取消註釋的命令

00:02:25.546 --> 00:02:26.780 
也就是“/”命令對吧？

00:02:27.814 --> 00:02:29.850 
對了我們增加了一個新的命令

00:02:30.083 --> 00:02:34.354 
你可以點擊選項鍵並
使用“/”命令把它調出來

00:02:34.788 --> 00:02:35.622 
這樣就插入

00:02:36.123 --> 00:02:37.391 
一個資料註釋

00:02:43.797 --> 00:02:44.631 
因此

00:02:44.865 --> 00:02:49.603 
這可以直接用於任何
類函數 類 結構體或它們之上

00:02:49.903 --> 00:02:53.073 
你也知道這些東西
是一種結構性的碼位元素

00:02:53.574 --> 00:02:54.441 
此外

00:02:55.909 --> 00:02:58.078 
大家還會注意到此處這些小佔位符

00:02:58.145 --> 00:03:00.781 
衆所周知這些用來描述你的類函數

00:03:00.914 --> 00:03:02.482 
或討論參數

00:03:04.017 --> 00:03:06.687 
throws描述或者大家都知道的

00:03:06.753 --> 00:03:08.989 
描述一些有關返回值的重要內容

00:03:09.323 --> 00:03:13.193 
真正有價值的是這些片段性的資料

00:03:13.293 --> 00:03:16.196 
你在代碼中添加的會在快速幫助中出現

00:03:16.296 --> 00:03:19.499 
還會在代碼完成窗口的底部出現

00:03:20.567 --> 00:03:23.070 
還有請注意我們提供了

00:03:23.136 --> 00:03:24.605 
新的SF mono字體

00:03:24.905 --> 00:03:27.574 
提供了更多選擇
而不僅侷限於常規和加粗

00:03:28.108 --> 00:03:31.311 
資料註釋使用SF mono細體

00:03:31.411 --> 00:03:33.814 
而關鍵字使用SF mono中等

00:03:33.881 --> 00:03:36.283 
只是更亮更粗一點

00:03:36.350 --> 00:03:39.152 
相對於文件中其它內容都使用
的SF mono常規字體

00:03:40.153 --> 00:03:41.788 
不同於大多數
其它mono space字體

00:03:42.022 --> 00:03:44.658 
我們給SF mono
配置了完整的磅數表

00:03:44.925 --> 00:03:47.227 
從細體到半粗體再到黑體

00:03:47.561 --> 00:03:49.429 
我們還引入了斜體差異配置項

00:03:50.097 --> 00:03:52.165 
這可以保持每個字符之間的間距

00:03:52.232 --> 00:03:55.669 
即便是對需要強調的內容
進行精準自定義也可勝任

00:03:57.771 --> 00:04:00.741 
下面講下一功能我將展示
如何跳轉到另一個文件

00:04:00.807 --> 00:04:04.711 
我通過按下Command
及Shift O實現快速打開

00:04:04.845 --> 00:04:08.549 
並輸入幾個字符轉到
我的TimerViewController

00:04:10.984 --> 00:04:12.653 
大家可能之前見過這個

00:04:13.120 --> 00:04:15.055 
這是文檔條目菜單

00:04:15.822 --> 00:04:18.659 
通過按Control 6
就可以打開這個菜單

00:04:20.060 --> 00:04:22.696 
它擁有所有的類、結構體、枚舉、屬性

00:04:22.896 --> 00:04:24.631 
該文件中所有的東西

00:04:25.566 --> 00:04:27.568 
但這並不是最有趣的部分

00:04:27.901 --> 00:04:30.838 
你知道嗎當這個菜單
彈出只要你一開始輸入

00:04:30.904 --> 00:04:33.440 
它就會對項目進行過濾？

00:04:34.408 --> 00:04:38.011 
然後你就會注意到此處

00:04:38.378 --> 00:04:40.447 
這個小小的“待修正”註釋

00:04:40.547 --> 00:04:43.784 
實際上就有個小的創可貼圖標在上面

00:04:44.218 --> 00:04:45.919 
我覺得這很可愛

00:04:47.754 --> 00:04:48.589 
接下來...

00:04:51.024 --> 00:04:53.193 
轉到這兒進入
my load view 類函數

00:04:53.961 --> 00:04:56.496 
在這兒你可以看到
每個圖片都有一種顏色

00:04:56.563 --> 00:04:59.099 
我們一直在等設計師爲我們提供

00:04:59.733 --> 00:05:02.870 
其實我昨晚才弄了這些P&amp;G's

00:05:02.936 --> 00:05:05.239 
我把它們放進jogger資源目錄

00:05:05.772 --> 00:05:07.174 
這樣我們就能真正

00:05:07.274 --> 00:05:08.442 
在下面的庫裏看到它們

00:05:09.576 --> 00:05:10.978 
這個用於Timer Button

00:05:12.012 --> 00:05:15.616 
接下來我要從這兒選擇當前行的末尾

00:05:15.716 --> 00:05:19.186 
通過按下Control E
並同時按住Shift鍵

00:05:20.153 --> 00:05:23.423 
我將按下Command
Space調用代碼完成

00:05:24.725 --> 00:05:26.226 
現在仔細看

00:05:26.360 --> 00:05:29.363 
我要使用代碼完成
窗口直接分配這張圖片

00:05:30.297 --> 00:05:33.066 
我只需要輸入t b就可以獲取
我的Timer Button

00:05:34.535 --> 00:05:37.738 
你還會注意到和Xcode 7.3
一樣的代碼完成窗口

00:05:37.804 --> 00:05:39.940 
現在用了相同的模糊匹配算法

00:05:40.174 --> 00:05:42.976 
與快速打開、文檔條目菜單

00:05:43.177 --> 00:05:45.512 
甚至在資料窗口的新搜索所用算法一樣

00:05:46.613 --> 00:05:49.550 
在左邊你還可以看到圖片的預覽

00:05:49.616 --> 00:05:52.019 
這樣你就能知道所選擇的是否正確

00:05:52.753 --> 00:05:53.587 
接下來...

00:05:54.288 --> 00:05:56.423 
在源代碼中就在這兒Boom

00:05:56.924 --> 00:05:58.025 
這是圖文並茂的

00:06:04.898 --> 00:06:06.733 
因此庫裏的的每一張圖片

00:06:06.800 --> 00:06:09.203 
不管是來自資源目錄

00:06:09.269 --> 00:06:11.071 
還是僅僅作爲項目的參考

00:06:11.138 --> 00:06:13.207 
現在都可以從代碼完成窗口中看到

00:06:13.273 --> 00:06:14.308 
在源代碼編輯器中

00:06:15.576 --> 00:06:18.846 
接下來讓這生效的方式
就是插入一個Swift特定實體

00:06:19.146 --> 00:06:21.548 
在源代碼中這對
Swift編譯器是已知的

00:06:21.915 --> 00:06:24.852 
而且它解除了對指定
UIImage圖像的調用

00:06:25.319 --> 00:06:28.722 
這樣你就可以看到所有圖片都
放置有序而不僅僅是名稱字符串

00:06:29.489 --> 00:06:31.024 
且對顏色也進行了同樣處理

00:06:31.692 --> 00:06:33.994 
接下來我要從這兒選擇當前行的末尾

00:06:34.728 --> 00:06:37.764 
並調用代碼完成和類型顏色

00:06:39.266 --> 00:06:43.237 
當我在此處敲擊Return
會發生什麼呢

00:06:43.537 --> 00:06:46.573 
大家會注意到我把
非常整潔的顏色選取器調出來了

00:06:48.475 --> 00:06:50.410 
從這兒我只需用向下的方向鍵

00:06:50.677 --> 00:06:54.181 
選擇一種顏色就像這樣
就可以選擇優雅的綠色

00:06:55.782 --> 00:06:58.819 
需要知道很重要的一點是
所有這些圖像和彩色文字

00:06:58.886 --> 00:07:01.054 
都是全鍵盤導航的

00:07:01.588 --> 00:07:05.826 
若我在某個文本上按住Shift
和回退箭頭並點擊Return

00:07:05.893 --> 00:07:07.861 
就會把顏色選取器再次調出來

00:07:08.562 --> 00:07:10.964 
而且你知道我還是可以用方向鍵選擇

00:07:11.532 --> 00:07:15.702 
但是如果這些彈出來的顏色
不是你正要找的

00:07:15.769 --> 00:07:17.938 
大家看如果這剛好不是我正要找的

00:07:18.705 --> 00:07:20.040 
你可以使用最近的顏色

00:07:20.107 --> 00:07:22.409 
這也是和Interface
Builder共享的

00:07:22.709 --> 00:07:25.078 
或者你可以點擊這兒下面的其他按鈕

00:07:25.145 --> 00:07:27.447 
它會調出標準的系統顏色面板

00:07:28.482 --> 00:07:34.121 
在這種情況中我其實只是想取樣
這種非常優雅的海軍藍就從這個按鈕

00:07:34.188 --> 00:07:37.357 
因爲在我構建它時
這就和該按鈕是綁定的

00:07:38.492 --> 00:07:41.061 
但我們此處還是有點小錯誤

00:07:41.662 --> 00:07:44.765 
此處的顏色文本是UIColor

00:07:44.831 --> 00:07:49.903 
但我們將其指定的層是cgLayer
所以應該需要cgColor

00:07:50.404 --> 00:07:53.106 
所以我可以很快解決這個問題就像這樣

00:07:59.313 --> 00:08:02.216 
希望這樣已經講清楚了圖像和顏色文本

00:08:02.282 --> 00:08:06.620 
實際上都是完整分類和檢查的
在Swift中是實的對象

00:08:08.522 --> 00:08:10.490 
我下面想要給大家演示的

00:08:11.391 --> 00:08:15.262 
其實並不是一個新功能
它甚至不是Xcode的功能

00:08:16.029 --> 00:08:18.866 
它實際上屬於標準的Cocoa
Text系統的一部分

00:08:18.932 --> 00:08:21.201 
從macOS 10.0之前就這樣

00:08:22.603 --> 00:08:24.171 
這就是查找粘貼板

00:08:24.671 --> 00:08:26.373 
大家可能之前沒有注意過

00:08:26.440 --> 00:08:29.543 
如果你進行了查找
可能通過選擇一些文本

00:08:30.110 --> 00:08:35.749 
比如說此處Pause 然後使用
Command C將其複製到粘貼板

00:08:35.816 --> 00:08:38.418 
再使用Command F調出查找框

00:08:38.485 --> 00:08:40.687 
然後通過Command V
將它粘貼其中

00:08:41.321 --> 00:08:47.528 
相同的搜索過程
也會出現在其他應用程序中

00:08:48.562 --> 00:08:50.063 
這很奇怪不是嗎？

00:08:51.031 --> 00:08:51.865 
嗯

00:08:53.433 --> 00:08:56.436 
這是因爲查找粘貼板是...

00:08:56.904 --> 00:09:01.508 
它其實是跨應用程序工作的
就像衆所周知的剪貼板

00:09:02.576 --> 00:09:05.979 
它與剪貼板是並存的
而且兩者可以同時存在

00:09:06.280 --> 00:09:09.917 
所以實際上就有一個非常酷的技巧
如果你有一些東西

00:09:09.983 --> 00:09:12.853 
想要保留在剪貼板中而不被清除

00:09:13.754 --> 00:09:15.455 
但是如果你仍然想要搜索

00:09:16.757 --> 00:09:19.092 
比如從這兒開始搜索

00:09:19.593 --> 00:09:21.795 
你只需要按下Command E

00:09:22.196 --> 00:09:24.898 
就會把它直接推送到查找粘貼板中

00:09:25.666 --> 00:09:29.336 
然後這樣就可以
讓你點擊Command G

00:09:29.403 --> 00:09:33.774 
並循環遍歷該文件中所有匹配的內容

00:09:35.242 --> 00:09:39.279 
現在如果你只是
想在同一文件中快速查找和替換

00:09:39.546 --> 00:09:41.448 
我們也提供一條專門的命令

00:09:42.249 --> 00:09:46.019 
如果你按住
Command Control E

00:09:46.620 --> 00:09:48.856 
實際就會對整個範圍內的
全部內容執行編輯

00:09:49.223 --> 00:09:51.859 
這樣就修改了本文件中
所有該符號的實例

00:09:52.292 --> 00:09:54.895 
所以這裏我可以給這個類函數加上ED

00:09:54.962 --> 00:09:56.964 
因爲started聽起來更好一點

00:09:57.898 --> 00:09:58.732 
而且...

00:10:00.868 --> 00:10:03.971 
這種方法可以大大節約時間
我自己就經常使用它

00:10:05.105 --> 00:10:08.041 
現在如果你想要做的是移動大約幾行

00:10:08.275 --> 00:10:10.511 
你也不需要剪貼板來完成

00:10:10.577 --> 00:10:13.180 
實際上我們提供了
一條專門的命令來完成這個

00:10:13.914 --> 00:10:20.153 
若此處選擇幾行並按住Command
Option Bracket

00:10:20.687 --> 00:10:24.291 
你會注意到我其實可以移動整個區塊

00:10:24.358 --> 00:10:27.561 
在if函數和其它類函數
的裏面或外面移動

00:10:28.962 --> 00:10:32.566 
它們只是在你的代碼裏整體挪動

00:10:35.169 --> 00:10:36.837 
這確實很棒

00:10:36.904 --> 00:10:39.506 
如果你每次只在同一文件中操作

00:10:39.706 --> 00:10:42.543 
但若你想在其它文件中進行交叉查找

00:10:44.745 --> 00:10:48.115 
例如若我想找出所有的timer實例

00:10:49.483 --> 00:10:53.987 
你可以通過按住
Command F和Shift完成

00:10:54.054 --> 00:10:55.389 
實現在整個項目內查找

00:10:56.290 --> 00:10:58.091 
這裏我就...

00:10:58.926 --> 00:11:02.996 
把timer加入到我的查找粘貼板中
進行搜索的

00:11:05.299 --> 00:11:08.802 
這實際上是我最近才被告知的一個特性

00:11:09.403 --> 00:11:13.574 
我不需要點擊進入
查找導航框其實就可以開始

00:11:13.640 --> 00:11:15.309 
通過上下鍵選擇這些結果

00:11:15.742 --> 00:11:17.678 
此處Command G也可以實現

00:11:17.945 --> 00:11:20.614 
唯一不同的是
我僅按住了Control鍵

00:11:20.681 --> 00:11:22.282 
同時按下了Command G

00:11:22.783 --> 00:11:25.552 
這樣就可以遍歷所有的結果

00:11:25.786 --> 00:11:27.321 
在所有不同的文件內遍歷

00:11:28.455 --> 00:11:30.691 
包括Interface
Builder文檔

00:11:30.824 --> 00:11:33.227 
以及其中所有的實例和匹配記錄

00:11:34.995 --> 00:11:37.164 
通過按住Shift可逆向實施

00:11:37.264 --> 00:11:38.699 
與Command G效果一樣

00:11:39.766 --> 00:11:42.870 
所以我不知道我知道有些人其實

00:11:43.003 --> 00:11:44.371 
把這些記下來

00:11:45.572 --> 00:11:49.877 
但是你真的不需要記
因爲在Xcode中其實就有個地方

00:11:49.943 --> 00:11:52.312 
提供了所有這些命令的完整列表

00:11:52.579 --> 00:11:53.814 
及其相應的按鍵

00:11:54.281 --> 00:11:56.850 
這就在Xcode參數設置窗口中

00:11:58.585 --> 00:12:00.821 
在這兒在按鍵綁定設置窗格中

00:12:01.388 --> 00:12:03.257 
你其實可以進行搜索

00:12:03.323 --> 00:12:06.527 
搜索任何涉及到的東西

00:12:06.894 --> 00:12:08.629 
你可以查看所有的結果

00:12:09.463 --> 00:12:12.666 
還有如果你含糊地重新調用

00:12:12.733 --> 00:12:15.035 
可能會有某種顯示命令

00:12:15.102 --> 00:12:20.140 
你可以按下Command J

00:12:20.974 --> 00:12:23.810 
這實際上也就是搜索鍵盤快捷鍵

00:12:23.944 --> 00:12:25.145 
這確實很強大

00:12:25.779 --> 00:12:29.616 
如果你不喜歡我們爲Xcode
所有內置命令而設置的鍵盤快捷鍵

00:12:29.850 --> 00:12:31.485 
你可以從此處自行設置

00:12:33.153 --> 00:12:34.521 
此外……

00:12:35.289 --> 00:12:37.057 
如果我們的內置命令不夠

00:12:37.124 --> 00:12:38.892 
且/或者剛好無法完成

00:12:38.959 --> 00:12:42.362 
你經常希望代碼編輯器做的事情

00:12:42.629 --> 00:12:44.031 
我想邀請Chris上臺

00:12:44.531 --> 00:12:47.467 
教大家如何添加自定義的命令
Chris

00:12:53.273 --> 00:12:54.107 
謝謝你Mike

00:12:57.244 --> 00:12:59.880 
如Mike所說我是Chris
今天我要向大家展示

00:12:59.947 --> 00:13:03.283 
如何通過源代碼編輯器擴展Xcode

00:13:04.518 --> 00:13:07.955 
現在向大家展示
如何向源代碼編輯器添加個人命令

00:13:08.155 --> 00:13:11.024 
使之成爲編輯器菜單的一部分

00:13:12.025 --> 00:13:14.695 
你的命令可以修改用戶的文本

00:13:15.195 --> 00:13:17.998 
以及該文本內的選項

00:13:18.098 --> 00:13:19.366 
說到運行導航

00:13:20.100 --> 00:13:22.669 
與一些其他類型的應用程序擴展不同

00:13:23.103 --> 00:13:29.009 
你可以將任何數量的命令作爲
Xcode源代碼編輯器的擴展來實現

00:13:31.111 --> 00:13:35.582 
我們將Xcode擴展建立在
應用程序擴展的基礎上

00:13:35.682 --> 00:13:39.253 
這是我們所有操作系統擴展性的基礎

00:13:40.554 --> 00:13:43.457 
既然Xcode拓展
即是應用程序拓展

00:13:43.891 --> 00:13:48.962 
各個run函數即在各自進程中
並能執行所有在該進程內接受的命令

00:13:49.029 --> 00:13:54.535 
且不會對Xcode或
其他擴展造成幹擾

00:13:55.836 --> 00:14:00.941 
當然作爲應用程序擴展
Xcode擴展也是沙箱型的

00:14:01.008 --> 00:14:05.179 
並通過各種權限來
完成脫離該沙箱所需做的事

00:14:06.713 --> 00:14:11.852 
Xcode只能訪問Xcode擴展

00:14:11.919 --> 00:14:16.456 
以及在運行時所需的文本與元數據

00:14:17.224 --> 00:14:18.926 
以此來執行相關操作

00:14:19.826 --> 00:14:22.196 
它們無法訪問項目結構

00:14:22.362 --> 00:14:25.832 
以及磁盤上的用戶文件

00:14:27.568 --> 00:14:28.969 
爲什麼我們要這樣設計呢？

00:14:29.670 --> 00:14:30.571 
當然...

00:14:31.004 --> 00:14:31.872 
爲了穩定性

00:14:32.573 --> 00:14:35.642 
我們希望確保Xcode能儘量穩定

00:14:35.709 --> 00:14:37.044 
對我們所有的用戶

00:14:38.378 --> 00:14:40.280 
以及安全性考慮

00:14:40.881 --> 00:14:43.951 
應用程序擴展是我們提供給大家來

00:14:44.017 --> 00:14:48.255 
增強操作系統及我們現有工具的方式

00:14:48.322 --> 00:14:51.491 
並同時能保持整個系統的完整性

00:14:52.559 --> 00:14:55.896 
當然還有運行速度方面的考慮

00:14:56.296 --> 00:15:00.534 
應用程序擴展是建立在
Mach信息與XPC之上的

00:15:00.934 --> 00:15:02.236 
並且是完全異步的

00:15:02.302 --> 00:15:06.740 
因此它們能快速運行且
不會降低用戶的速度

00:15:07.641 --> 00:15:09.643 
還有另一個原因

00:15:09.710 --> 00:15:12.513 
我們決定將應用程序擴展

00:15:12.579 --> 00:15:14.448 
作爲Xcode擴展的基礎

00:15:15.983 --> 00:15:19.286 
這是爲了將它們放到
Mac APP Store內

00:15:27.060 --> 00:15:29.830 
就像所有其他應用程序擴展一樣

00:15:30.063 --> 00:15:34.168 
Xcode擴展被嵌入到了
一個主應用程序中

00:15:35.135 --> 00:15:37.538 
該主應用程序是一個理想的載體

00:15:37.804 --> 00:15:41.041 
來搭載你的擴展偏好或配置信息

00:15:41.308 --> 00:15:43.410 
例如爲了控制

00:15:43.477 --> 00:15:46.580 
用戶實際希望從你的拓展中
能夠使用的命令

00:15:47.281 --> 00:15:50.551 
並且這也是一個搭載其他任何

00:15:50.617 --> 00:15:52.486 
你希望該拓展所提供的UI理想載體

00:15:52.786 --> 00:15:56.256 
因爲Xcode所能做的是提供有關

00:15:56.557 --> 00:15:58.091 
你的各命令的菜單項

00:15:59.560 --> 00:16:04.831 
成爲了應用程序便能進而實現
應用程序擴展

00:16:05.065 --> 00:16:09.369 
便能在Mac App Store上
找到Xcode擴展

00:16:09.803 --> 00:16:14.041 
當然你還可以登錄
你的應用程序和你的Xcode擴展

00:16:14.107 --> 00:16:18.745 
通過你的developer ID
並對其按照你的意願進行分配

00:16:26.320 --> 00:16:28.055 
現在我們來談談關於

00:16:28.155 --> 00:16:30.824 
Xcode是如何激活你的擴展的

00:16:32.025 --> 00:16:34.595 
爲保證最佳性能

00:16:34.862 --> 00:16:38.799 
Xcode會查找你的擴展
並自動將其啓動

00:16:38.866 --> 00:16:41.668 
在Xcode啓動過程的早期

00:16:41.735 --> 00:16:43.036 
XCODE擴展生命週期

00:16:43.103 --> 00:16:45.272 
在你的用戶使用擴展之前

00:16:45.939 --> 00:16:50.744 
源代碼編輯器擴展並不像
一些其他類的應用程序擴展

00:16:51.011 --> 00:16:53.647 
只能使用一次之後便不能使用了

00:16:54.348 --> 00:16:57.184 
實際上Xcode會盡可能將你的擴展

00:16:57.251 --> 00:16:59.186 
維持爲可用狀態

00:16:59.253 --> 00:17:02.556 
因此它可以發送任何用戶
想要調用的命令

00:17:04.657 --> 00:17:06.894 
現在當你的擴展啓動時

00:17:07.327 --> 00:17:10.329 
如果它需要即刻進行任何工作

00:17:10.464 --> 00:17:14.034 
Xcode將向它發送
extensionDidFinishLaunching

00:17:14.701 --> 00:17:18.539 
對於啓動來說只要夠快
那就是一個好的地方

00:17:20.641 --> 00:17:24.511 
沒錯 你需要儘可能地讓啓動過程夠快

00:17:24.877 --> 00:17:28.949 
這樣一來你的用戶就能

00:17:29.516 --> 00:17:31.051 
隨時使用該擴展

00:17:32.886 --> 00:17:34.154 
爲了幫你實現這一目標

00:17:34.421 --> 00:17:37.191 
Xcode將保證你的擴展與

00:17:37.257 --> 00:17:40.027 
其他擴展的啓動是異步進行的

00:17:40.093 --> 00:17:41.795 
且與Xcode的啓動也是異步的

00:17:43.931 --> 00:17:45.832 
現在當你的擴展啓動時

00:17:46.333 --> 00:17:48.635 
Xcode會詢問它的指令

00:17:48.702 --> 00:17:51.505 
指令可以來自兩個地方中的一個

00:17:52.906 --> 00:17:55.209 
通過默認函數可以得到一個項

00:17:55.275 --> 00:18:00.781 
info.plist文件中
的NSExtensionAttributes字典類中

00:18:01.448 --> 00:18:04.618 
該文件指定了你的擴展中的所有指令

00:18:05.586 --> 00:18:07.921 
不過你還可以提供

00:18:08.455 --> 00:18:12.526 
關於你的擴展類中的
commandDefinitions的屬性重寫

00:18:12.826 --> 00:18:16.663 
重寫info.plist文件返回值

00:18:16.997 --> 00:18:20.100 
因此 若你的擴展擁有指令動態列表

00:18:20.200 --> 00:18:22.402 
其中有描述
因爲下載了新的JavaScript

00:18:22.469 --> 00:18:24.705 
這些JavaScript實際是用來
運行那些指令的

00:18:24.771 --> 00:18:27.741 
它能提供一個新的集合

00:18:31.245 --> 00:18:33.580 
現在一旦Xcode收到你的指令

00:18:34.615 --> 00:18:36.517 
它會給每個擴展分配

00:18:36.817 --> 00:18:41.755 
擴展所對應的編輯器菜單的子菜單
在用戶編輯源代碼時

00:18:43.457 --> 00:18:46.026 
並按字母順序列出擴展名

00:18:46.093 --> 00:18:47.895 
就像在finder中一樣

00:18:47.961 --> 00:18:50.531 
所以對用戶而言
它們都在穩定的地方中

00:18:50.597 --> 00:18:51.865 
從自身運行到Xcode運行

00:18:52.733 --> 00:18:56.069 
然而因爲指令的順序通常很重要

00:18:56.136 --> 00:18:58.839 
而且通常傳遞大量語義

00:18:59.840 --> 00:19:04.411 
Xcode將保留你所發出指令的順序

00:19:05.112 --> 00:19:08.248 
並將該順序在菜單中排列出來

00:19:09.716 --> 00:19:10.984 
現在來談談指令調用

00:19:11.485 --> 00:19:15.189 
當然 用戶可以從你的菜單項中
選擇指令

00:19:16.190 --> 00:19:19.760 
也可以通過個人設置的快捷鍵來實現

00:19:21.328 --> 00:19:27.234 
你的指令對象將被實例化
併發送調用指令和回調指令

00:19:28.535 --> 00:19:32.206 
調用指令打包所有

00:19:32.773 --> 00:19:34.975 
這些命令執行所需的數據和元數據

00:19:36.643 --> 00:19:40.747 
當工作完成 指令將使用回調程序

00:19:41.114 --> 00:19:43.150 
來告訴Xcode 工作完成

00:19:43.517 --> 00:19:46.186 
讓我們看看實際的API

00:19:47.754 --> 00:19:49.723 
我們有個簡單的協議

00:19:49.790 --> 00:19:52.292 
你所有的命令類都需要符合它

00:19:53.427 --> 00:19:58.799 
如我所說它已進行了一次調用和
completionHandler回調

00:20:01.101 --> 00:20:04.571 
並且該調用僅攜帶一些簡單的數據

00:20:05.372 --> 00:20:07.174 
且具有一個
commandIdentifier

00:20:07.674 --> 00:20:11.512 
該commandIdentifier在
info.plist文件內或命令定義數組內進行設置的

00:20:13.046 --> 00:20:15.549 
而且這能使你區分多個

00:20:15.816 --> 00:20:18.051 
受控於同一命令類的命令

00:20:18.785 --> 00:20:22.322 
畢竟其中涉及很多命令
特別是對於編輯源代碼而言

00:20:22.389 --> 00:20:24.625 
而它們之間的區別卻很小

00:20:24.892 --> 00:20:29.530 
大家可能希望通過
同一個命令類來執行多個任務

00:20:29.763 --> 00:20:32.766 
並僅處理各任務中的若干不同特定實例

00:20:33.100 --> 00:20:37.070 
該標識可讓大家找出

00:20:37.237 --> 00:20:38.438 
用戶調用的命令

00:20:40.374 --> 00:20:41.775 
我們還提供了一個屬性

00:20:41.842 --> 00:20:46.446 
你可將cancellationHandler
設置爲“開啓”

00:20:47.014 --> 00:20:52.252 
若用戶取消了你的命令 那麼
cancellationHandler即被調用

00:20:53.420 --> 00:20:56.590 
並且如果你的指令
花費時間過長它也會被調用

00:20:56.790 --> 00:21:00.360 
我們將會在演示部分對其進行
略微深入的講解

00:21:01.828 --> 00:21:05.532 
最後當然調用過程也包含

00:21:05.632 --> 00:21:07.601 
有關用戶使用的文本緩存

00:21:09.236 --> 00:21:11.471 
該Source Text由

00:21:11.572 --> 00:21:14.842 
另一個目標實例一
XCSourceTextBuffer來表示

00:21:15.843 --> 00:21:19.379 
除文本之外　還有許多元數據

00:21:20.247 --> 00:21:22.449 
我們給大家一個統一的類型標識

00:21:22.916 --> 00:21:26.253 
讓Xcode認爲
文本包含的文件是對應的

00:21:26.653 --> 00:21:30.123 
如此大家就可以使用Swift源代碼

00:21:31.225 --> 00:21:36.830 
XML數據ObjC++ 頭文件等
各種文本格式進行編寫

00:21:37.998 --> 00:21:42.936 
我們還爲該文件提供了
Xcode的縮進設置

00:21:43.370 --> 00:21:46.440 
所以當你在文件內對文本進行變更時

00:21:46.773 --> 00:21:50.010 
你依然遵循用戶期望Xcode做的事

00:21:50.077 --> 00:21:51.578 
當它縮進該文件時

00:21:52.513 --> 00:21:55.082 
因爲tabWidth
indentationWidth

00:21:55.148 --> 00:21:58.752 
及是否使用TabsForIndentation間
存在微妙的相互作用關係

00:21:59.453 --> 00:22:02.856 
爲此我們還提供了大量
有關它們如何協同工作的詳細信息

00:22:03.223 --> 00:22:04.691 
大家可在頭文件查閱該信息

00:22:06.059 --> 00:22:08.662 
因此我鼓勵大家找出該頭文件

00:22:08.729 --> 00:22:10.898 
並確切瞭解它們是如何相互協同的

00:22:14.368 --> 00:22:19.806 
現在我們提供用戶通過兩種不同方式
正在使用的文本

00:22:20.607 --> 00:22:24.111 
如果你需要將該文本處理爲單數據流

00:22:24.611 --> 00:22:26.813 
即通過管道將其輸送到一個命令行工具

00:22:27.481 --> 00:22:28.749 
你大概會希望使用

00:22:28.882 --> 00:22:30.250 
completeBuffer

00:22:30.517 --> 00:22:32.819 
該緩存代表用戶正在使用的文本

00:22:32.986 --> 00:22:35.122 
代表作爲單一字符串的整個文件

00:22:37.090 --> 00:22:42.062 
然而如果你僅需要對文本進行微小變更

00:22:42.429 --> 00:22:46.266 
那該方法的效率會很低
因爲你的擴展需將

00:22:46.333 --> 00:22:48.635 
所有的緩存發回Xcode

00:22:49.970 --> 00:22:54.141 
因爲我們爲之提供了可變數組屬性

00:22:55.375 --> 00:22:58.045 
其中包含文件中的文本行

00:22:58.178 --> 00:23:01.615 
我們發現當採用源代碼編寫工具時

00:23:01.982 --> 00:23:06.954 
實際上採用行與列抽象化要遠優於

00:23:07.020 --> 00:23:11.091 
僅使用單一而龐大的文本緩衝區

00:23:12.092 --> 00:23:14.394 
並且通過成爲可變數組

00:23:14.862 --> 00:23:19.633 
還可以讓Xcode
實際追蹤你進行的變更

00:23:19.833 --> 00:23:24.071 
所以我們只需要發回
個別你所進行的更改

00:23:24.171 --> 00:23:26.473 
不需要發回整個緩存

00:23:27.074 --> 00:23:31.578 
這確實能提高編輯擴展的性能

00:23:34.281 --> 00:23:38.051 
除了提供文件中的文本行

00:23:38.151 --> 00:23:43.056 
我們還爲文件中的選項提供了可變數組

00:23:43.423 --> 00:23:45.559 
總會有至少一個選項

00:23:45.626 --> 00:23:48.395 
要麼是用戶的插入點要麼是選項

00:23:48.862 --> 00:23:52.666 
因爲Xcode編輯器是構建在
Cocoa Text系統之上的

00:23:53.133 --> 00:23:55.335 
所以我們同樣支持多重選項

00:23:55.802 --> 00:23:57.804 
如果你想要改變選項

00:23:58.071 --> 00:24:00.707 
你要做的就是改變該可變數組

00:24:03.010 --> 00:24:07.214 
且該數組中存在的都是
SourceTextRange對象

00:24:07.681 --> 00:24:11.451 
調用SourceTextRange
替換NSRange

00:24:11.518 --> 00:24:13.887 
因爲我們真的相信

00:24:14.021 --> 00:24:17.558 
我們提供的行與列抽象

00:24:18.158 --> 00:24:21.061 
對於大多數文本編輯來說是最好的方法

00:24:22.129 --> 00:24:26.600 
這就是爲什麼源區域能替代
一個位置和一段長度

00:24:27.000 --> 00:24:29.903 
成爲實際起點與終點的原因

00:24:30.504 --> 00:24:34.942 
那些位置都在行抽象
與列抽象中得到表示

00:24:38.078 --> 00:24:41.081 
我將向大家演示如何創建

00:24:41.315 --> 00:24:43.917 
個人Xcode擴展

00:24:45.285 --> 00:24:46.653 
我先到演示機這邊

00:24:47.855 --> 00:24:48.755 
然後...

00:24:49.523 --> 00:24:51.692 
我把筆記本放在這兒

00:24:52.559 --> 00:24:57.965 
給我留下深刻印象的
是剛纔Mike關於

00:24:58.031 --> 00:25:01.268 
Swift文本 Swift色彩
和圖像文字的描述

00:25:02.002 --> 00:25:04.705 
我真的很想在我自己的代碼中使用它們

00:25:05.105 --> 00:25:06.640 
因此我覺得我該

00:25:06.707 --> 00:25:09.376 
創建一個新的源編輯器擴展

00:25:09.710 --> 00:25:15.115 
它可以自動將任何UIImage
或UIColor的使用方法轉變爲

00:25:15.315 --> 00:25:17.150 
相應的Swift文字

00:25:18.352 --> 00:25:20.487 
我只需創建一個新的Xcode項目

00:25:21.588 --> 00:25:24.157 
以及一個新的OS X應用程序

00:25:24.658 --> 00:25:26.593 
畢竟我的應用擴展

00:25:26.660 --> 00:25:30.163 
和Xcode擴展都得在
應用程序內部執行

00:25:30.898 --> 00:25:35.569 
然後創建這個
並把它命名爲Chris文字

00:25:38.805 --> 00:25:44.411 
然後賦予一個叫做
com.example的組織標識符

00:25:45.812 --> 00:25:48.916 
點擊“下一步”然後我把它放在桌面上

00:25:50.050 --> 00:25:51.818 
現在我已經創建了我的項目

00:25:52.619 --> 00:25:55.088 
我要向其添加一個新的目標

00:25:56.523 --> 00:26:00.327 
且添加一個OS X應用程序擴展目標

00:26:00.561 --> 00:26:02.196 
你可以看到

00:26:02.262 --> 00:26:06.500 
新的Xcode源代碼編輯器擴展模板
就在該列表的末尾

00:26:09.970 --> 00:26:11.939 
然後我把它命名爲...

00:26:13.907 --> 00:26:16.009 
Chris Convert to Literals...

00:26:17.110 --> 00:26:17.978 
搞定

00:26:18.912 --> 00:26:20.314 
當我點擊Finish時

00:26:21.114 --> 00:26:24.518 
Xcode就會提出供激活目標的建議

00:26:24.585 --> 00:26:26.486 
就像其他應用擴展一樣

00:26:26.687 --> 00:26:27.955 
然後點擊接受

00:26:29.256 --> 00:26:32.593 
現在讓我們來看看Xcode
爲我生成的代碼

00:26:35.229 --> 00:26:36.897 
在這個轉換爲文字的組別裏

00:26:37.431 --> 00:26:41.702 
Xcode添加了一個類
這個類表示我的擴展本身

00:26:42.069 --> 00:26:45.973 
這隻符合XCSourceEditor擴展協議

00:26:46.707 --> 00:26:51.678 
並且它還爲類函數和屬性添加了模板

00:26:52.112 --> 00:26:55.215 
如果我想重寫的話我可以對其取消註釋

00:26:55.415 --> 00:26:57.117 
並提供自己的實現

00:26:57.584 --> 00:26:58.752 
但現在我還不想這麼做

00:26:58.819 --> 00:27:01.121 
我認爲沒必要讓它來執行
這個特定的項目

00:27:02.489 --> 00:27:04.358 
我們來看下一個文件

00:27:05.659 --> 00:27:07.928 
在下一個文件SourceEditorCommand中

00:27:08.195 --> 00:27:10.864 
有我的第一個命令類

00:27:12.432 --> 00:27:15.769 
正如我向你們展示的那樣
它符合XCSourceEditor命令

00:27:16.370 --> 00:27:20.274 
並且僅在vocation類函數
控制下單獨執行

00:27:22.676 --> 00:27:26.313 
現在讓我們看一看Xcode創建的
info.plist文件

00:27:27.981 --> 00:27:31.018 
你可以看到在我的擴展屬性中

00:27:31.752 --> 00:27:36.190 
Xcode添加一組
XCSourceEditorCommandDefinitions

00:27:36.390 --> 00:27:38.258 
這是一個字典數組

00:27:40.027 --> 00:27:43.330 
該字典爲命令指定了需要實例化的類

00:27:44.431 --> 00:27:46.667 
要使用的標識符

00:27:48.202 --> 00:27:51.505 
以及命令應具備的菜單項名稱

00:27:53.073 --> 00:27:57.911 
我把它的名稱改爲
ConverttoSwiftLiterals

00:27:58.946 --> 00:27:59.947 
然後接受

00:28:01.415 --> 00:28:05.919 
將鏡頭縮小 返回到命令界面

00:28:09.656 --> 00:28:13.694 
現在我要作個小弊因爲代碼已經寫好了

00:28:15.095 --> 00:28:18.432 
我使用代碼片段把
已經寫好的代碼嵌進去了

00:28:21.034 --> 00:28:26.507 
我把這稱爲Chris Demon
大家可以看到實際上代碼並不是很多

00:28:28.809 --> 00:28:32.980 
所以我只需循環文件中所有的行

00:28:34.815 --> 00:28:40.587 
如果該行中存在一個
UIColor或UIImage調用

00:28:41.288 --> 00:28:45.659 
我僅使用對應的
Swift字面語法去替代它

00:28:47.127 --> 00:28:50.464 
然後如果行已經改變了

00:28:51.298 --> 00:28:54.635 
那我就得替換行數組中的行了

00:28:54.968 --> 00:28:57.437 
我並不是替換數組中的每一個行

00:28:58.005 --> 00:29:00.374 
我當然不是修改整個緩存區

00:29:00.641 --> 00:29:04.478 
我只修改實際需要修改的行

00:29:05.412 --> 00:29:08.382 
而且我還對修改的行保持追蹤

00:29:09.216 --> 00:29:13.120 
因此之後我還可以構造

00:29:13.187 --> 00:29:16.223 
一組選擇來表示那些行

00:29:18.392 --> 00:29:19.626 
我設置了那些選項

00:29:20.394 --> 00:29:22.696 
之後僅需調用我的完成處理程序

00:29:22.763 --> 00:29:25.165 
讓Xcode知道我的命令已完成

00:29:25.766 --> 00:29:29.102 
我在建議的程序列表中
見到了Xcode

00:29:31.805 --> 00:29:34.575 
如果我點擊運行大家認爲會發生什麼

00:29:35.142 --> 00:29:37.511 
當然除了建立我的擴展程序之外

00:29:39.746 --> 00:29:40.581 
你可以看到

00:29:40.647 --> 00:29:46.220 
我們爲大家開發了另一個
Xcode實例來測試大家的擴展程序

00:29:48.422 --> 00:29:52.693 
我們實際還提供一點視覺差別

00:29:52.759 --> 00:29:54.628 
我們在dock裏將圖標變得更黑

00:29:55.195 --> 00:29:58.532 
並且對“歡迎來到Xcode”
窗口內的圖標也加黑

00:29:59.066 --> 00:30:00.868 
清晰明瞭

00:30:01.468 --> 00:30:05.939 
你會清楚地知道這個Xcode
正在對一個擴展進行測試

00:30:08.709 --> 00:30:10.978 
我現打開Mike的Jogger項目

00:30:11.078 --> 00:30:14.615 
因爲我注意到有些
UIImage和UIColor

00:30:14.681 --> 00:30:15.949 
還沒有轉換

00:30:17.684 --> 00:30:20.387 
大家可以另外看到一種情況

00:30:20.988 --> 00:30:23.323 
我們在活動視圖的頂部對UI進行修改

00:30:23.390 --> 00:30:24.925 
以此來特別說明

00:30:25.192 --> 00:30:28.996 
Xcode正在測試一個擴展

00:30:31.398 --> 00:30:35.669 
Mike給我留下了一些真正想要的
UIImage和UIColor實例

00:30:35.736 --> 00:30:38.005 
我認爲作爲字符會更好看

00:30:38.805 --> 00:30:41.275 
所以我查看一下編輯菜單

00:30:41.975 --> 00:30:44.244 
看到了Chris Convert
to Literals擴展

00:30:44.878 --> 00:30:47.381 
還看到了Convert to
Swift Literals命令

00:30:48.882 --> 00:30:50.751 
現在如果我返回我最初的Xcode

00:30:51.652 --> 00:30:54.521 
然後設置一個斷點在這下面

00:30:57.090 --> 00:30:59.226 
如果我現在實際運行我的命令...

00:31:02.696 --> 00:31:04.164 
你會發現什麼也沒有

00:31:04.398 --> 00:31:06.967 
因爲在斷點處就停止了命令

00:31:07.034 --> 00:31:08.602 
在第一個Xcode調試程序中

00:31:09.336 --> 00:31:12.539 
所以你其實可以把Xcode調試器

00:31:12.773 --> 00:31:16.343 
和需承載的LLDB的所有資源
都用於調試你的擴展程序

00:31:18.212 --> 00:31:20.180 
我繼續演示

00:31:22.916 --> 00:31:27.254 
我們把這裏的斷點刪除

00:31:28.889 --> 00:31:31.124 
如果返回就可以看到

00:31:31.358 --> 00:31:35.329 
Xcode對所有我改變的行
都進行了強調正如我告訴它的一樣

00:31:35.863 --> 00:31:38.966 
以上便是所有關於使用新
Swift字符格式進行轉換的內容

00:31:47.608 --> 00:31:51.178 
現在來談談我實際希望
在非常常規的環境下進行的操作

00:31:52.279 --> 00:31:55.816 
這很容易　我可以很快完成

00:31:56.216 --> 00:31:59.786 
只需對我的新命令添加一個密鑰綁定

00:32:00.621 --> 00:32:03.090 
在Key Bindings界面下的
Xcode偏好選擇中進行操作

00:32:03.423 --> 00:32:07.194 
搜索我的命令名稱
我記得是以Chris開頭

00:32:07.995 --> 00:32:10.998 
這就是Xcode的
Key Binding

00:32:11.131 --> 00:32:15.302 
我把它命名爲command
option control/

00:32:15.369 --> 00:32:16.770 
便於記住是吧？

00:32:21.642 --> 00:32:23.010 
現在我們來看幻燈片

00:32:24.978 --> 00:32:26.380 
來說說...

00:32:26.780 --> 00:32:28.715 
一些我很關心的事

00:32:28.782 --> 00:32:32.653 
當使用Xcode擴展時
你會感受其速度之快

00:32:34.054 --> 00:32:37.291 
那是因爲文本編輯是用戶同步進行的

00:32:37.925 --> 00:32:41.061 
用戶們只想把他們的手放在鍵盤上

00:32:41.161 --> 00:32:43.263 
不停地操作

00:32:43.363 --> 00:32:46.066 
即使調用你的擴展

00:32:47.668 --> 00:32:50.671 
你的擴展也不應該阻止

00:32:50.771 --> 00:32:53.941 
用戶操作的連續性

00:32:56.510 --> 00:32:58.979 
現在爲了防止

00:32:59.046 --> 00:33:03.650 
在你的擴展和用戶之間
發生競態條件 Xcode會鎖定那些

00:33:03.851 --> 00:33:05.853 
用戶工作時產生的文件變化

00:33:05.986 --> 00:33:07.387 
在用戶調用擴展時

00:33:10.958 --> 00:33:13.560 
幸運的是大家不必擔心

00:33:13.627 --> 00:33:17.431 
如何協調大家所造成的
改變以及來自用戶的改變

00:33:20.067 --> 00:33:21.935 
從另一方面講這意味着...

00:33:22.803 --> 00:33:27.574 
如果你的擴展時間過長
我們認爲幾秒鐘就算過長

00:33:27.841 --> 00:33:30.110 
從用戶鎖定到開始編輯文件這段時間

00:33:30.611 --> 00:33:31.478 
那麼...

00:33:32.479 --> 00:33:33.313 
我們該怎麼辦？

00:33:34.481 --> 00:33:37.651 
我們允許用戶取消該命令

00:33:38.719 --> 00:33:42.489 
我們會提供一個取消指令的按鍵標示

00:33:43.657 --> 00:33:45.759 
我想系統正在嘗試告訴我

00:33:45.826 --> 00:33:47.761 
這張幻燈片在這的時間太長了

00:33:49.296 --> 00:33:51.732 
我們來關掉它然後繼續

00:33:54.101 --> 00:33:57.137 
Xcode能爲
我們的用戶保證快速操作

00:33:57.638 --> 00:34:00.807 
通過早早地啓動擴展並儘可能長時間地

00:34:01.108 --> 00:34:02.843 
使其保持激活狀態

00:34:03.010 --> 00:34:05.479 
所以一旦調用它們就能發送命令

00:34:07.514 --> 00:34:11.485 
正如我們前面討論過的
通過使用行數組

00:34:11.685 --> 00:34:16.889 
來確保各位的擴展數據傳輸
在性能方面得到優化

00:34:18.425 --> 00:34:21.195 
當用戶需要取消一個命令

00:34:21.661 --> 00:34:24.931 
可以點擊Xcode界面的取消符號

00:34:25.165 --> 00:34:27.067 
當用戶點擊取消

00:34:27.234 --> 00:34:28.435 
他們可以繼續操作

00:34:29.503 --> 00:34:32.940 
現在...你的擴展任會接收

00:34:33.206 --> 00:34:35.708 
取消命令並仍然需要對它做出反應

00:34:36.409 --> 00:34:37.945 
但是用戶不關心這點

00:34:39.813 --> 00:34:41.114 
當然有幾個方法

00:34:41.181 --> 00:34:43.917 
你的擴展也可以對
Xcode的運行有所幫助

00:34:45.819 --> 00:34:48.922 
你的擴展可以儘可能快地啓動

00:34:48.989 --> 00:34:51.692 
你的擴展得爲用戶

00:34:52.926 --> 00:34:54.594 
執行你的命令做好準備

00:34:54.661 --> 00:34:58.632 
你可以在我們所有的
異步編程模式下使用GCD

00:34:58.699 --> 00:35:03.170 
以確保你最大可能利用用戶的系統

00:35:03.237 --> 00:35:05.973 
並儘可能快地返回Xcode

00:35:07.641 --> 00:35:08.942 
當然...

00:35:09.776 --> 00:35:13.647 
如果沒必要
你可以避免更換所有的文本緩存

00:35:15.516 --> 00:35:19.486 
最後就像我說的
你需要快速處理取消指令

00:35:20.787 --> 00:35:24.725 
因爲在你的指令完成取消之前

00:35:24.791 --> 00:35:27.327 
它對用戶而言都是不可用的

00:35:29.997 --> 00:35:33.934 
今天Mike向大家展示了許多關於

00:35:34.001 --> 00:35:35.469 
Xcode源代碼編輯器的
出色的新特性

00:35:35.536 --> 00:35:38.338 
比如我們能夠添加文檔註釋

00:35:38.605 --> 00:35:42.876 
以及在Code Completion中
支持Swift color和Swift image字符

00:35:43.277 --> 00:35:46.313 
還展示了一些添加的最新功能

00:35:46.380 --> 00:35:50.517 
這些功能已經添加進了
Xcode7.3 比如模糊代碼完成

00:35:51.151 --> 00:35:54.855 
我向大家展示了Xcode源代碼
編輯器擴展是如何工作的

00:35:55.289 --> 00:35:57.257 
以及如何創建它們

00:35:57.824 --> 00:36:00.794 
我已迫不及待地想看到
各位通過我們的新API作出的成就

00:36:01.995 --> 00:36:04.164 
大家可以獲得更多可用的信息

00:36:04.231 --> 00:36:08.035 
在我們 WWDC 16 網站頁面上

00:36:09.603 --> 00:36:13.440 
還可以收看一些相關課程的視頻

00:36:13.941 --> 00:36:19.112 
特別說明Optimizing App
Startup Time不適用於應用

00:36:19.179 --> 00:36:21.081 
它僅適用於應用擴展

00:36:21.148 --> 00:36:23.650 
因爲它搭載了大量相同的技術

00:36:24.518 --> 00:36:26.553 
我們對Xcode的介紹也非常棒

00:36:26.620 --> 00:36:28.956 
適合於想要了解
Xcode開發環境動態的人

00:36:29.022 --> 00:36:32.626 
當你實現擴展時
用戶們會爲此充滿期待

00:36:33.160 --> 00:36:36.430 
最後我們有些前些年推出的節目

00:36:36.496 --> 00:36:39.366 
討論應用擴展意味着什麼

00:36:39.466 --> 00:36:41.802 
以及實現它們的最佳方法

00:36:43.136 --> 00:36:46.807 
我們今晚也會參加這個盛會因此...

00:36:47.741 --> 00:36:49.543 
感謝光臨 WWDC 大會

00:36:49.610 --> 00:36:52.746 
若有任何疑問 可以屆時向我們提問