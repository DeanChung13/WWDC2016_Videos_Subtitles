00:00:19.686 --> 00:00:25.158
Core Location最佳實踐

00:00:26.860 --> 00:00:27.828
下午好

00:00:27.895 --> 00:00:31.665
我是Brad 今天同大家談論
Core Location最佳實踐

00:00:33.166 --> 00:00:36.103
爲了大家完全明白今天的主題
我將從介紹

00:00:36.170 --> 00:00:38.505
Core Location
的主要特性開始

00:00:39.239 --> 00:00:42.342
由於是它是被廣泛使用的API
這裏我們將做些回顧

00:00:42.709 --> 00:00:44.678
對新手來說

00:00:45.579 --> 00:00:48.115
這樣做挺不錯
不過你在會後最好查詢一下相關文檔

00:00:49.650 --> 00:00:52.486
做完回顧之後 我們將會談論最佳實踐

00:00:52.553 --> 00:00:54.087
使用Core Location

00:00:54.388 --> 00:00:58.225
我們所有的API
只能運行在iOS平臺上

00:00:58.725 --> 00:01:00.460
iOS將是我們談論的焦點

00:01:00.961 --> 00:01:04.765
但是呢 如果你對macOS
tvOS或者watchOS感興趣

00:01:04.831 --> 00:01:06.033
你可能想在這待一會兒

00:01:06.099 --> 00:01:09.102
iOS上Core Location
許多特性在那些平臺上也適用

00:01:09.169 --> 00:01:11.305
我們將在演講快結束的時候特別說明

00:01:13.507 --> 00:01:16.977
接下來 我們談論
Core Location主要特性

00:01:17.878 --> 00:01:20.480
首先是API的授權機制

00:01:21.415 --> 00:01:24.484
API授權是必要的

00:01:24.551 --> 00:01:27.087
以便應用可以訪問用戶的位置

00:01:28.121 --> 00:01:30.123
你以前有可能使用過類似功能

00:01:30.190 --> 00:01:32.226
如果你看到過像上面那樣的提示

00:01:32.526 --> 00:01:33.393
Core Location
正在詢問用戶

00:01:33.460 --> 00:01:38.065
是否授權相機應用獲得用戶的當前位置

00:01:40.234 --> 00:01:42.736
我們提供兩種授權方式

00:01:42.803 --> 00:01:44.004
你的應用可以去請求

00:01:44.771 --> 00:01:47.174
第一個是使用期間授權

00:01:48.108 --> 00:01:49.376
就像它的名字那樣

00:01:49.510 --> 00:01:51.845
當你的應用收到使用期間授權的時候

00:01:51.912 --> 00:01:54.147
應用便可以獲得用戶的位置

00:01:54.214 --> 00:01:55.949
當用戶使用應用時

00:01:56.383 --> 00:01:58.886
我們待會解釋使用期間授權的含義

00:02:00.020 --> 00:02:02.289
當你想請求授權的時候

00:02:02.356 --> 00:02:05.893
你只需要調用
requestWhenInUseAuthorization方法

00:02:07.361 --> 00:02:09.630
我們還有另一種方式是永久授權

00:02:10.364 --> 00:02:12.332
當你的應用獲得永久授權

00:02:12.399 --> 00:02:14.501
應用能夠取得用戶的位置信息

00:02:14.568 --> 00:02:16.136
當你運行應用的時候

00:02:17.437 --> 00:02:21.008
想要使用它 你需要調用
requestAlwaysAuthorization方法

00:02:22.543 --> 00:02:25.045
無論你請求何種方式的授權

00:02:25.112 --> 00:02:29.416
你必須在你應用的屬性信息列表裏
提供用途描述

00:02:30.484 --> 00:02:33.253
Core Location會從
你的信息列表裏獲取用途描述的字符串

00:02:33.320 --> 00:02:36.323
然後把提取到的字符串
作爲授權提示的一部分展示給用戶

00:02:40.127 --> 00:02:42.696
你的應用要在何時進行授權請求?

00:02:46.233 --> 00:02:49.670
假如你的應用在前臺運行
我們就會請求授權

00:02:49.736 --> 00:02:51.705
這是Potluck
我們的示例應用

00:02:54.341 --> 00:02:57.244
如果你的應用在後臺運行
會有一個藍色的條塊

00:02:57.311 --> 00:02:59.413
這個時候應用也可以獲得授權

00:03:00.380 --> 00:03:01.682
若你在思考該藍色條塊

00:03:01.748 --> 00:03:03.817
我們待會會談論藍色條塊的內容

00:03:05.652 --> 00:03:09.189
最後 若你的應用正處理來自
WatchConnectivity的消息

00:03:09.590 --> 00:03:11.525
前臺watchOS應用發出的消息

00:03:11.592 --> 00:03:13.727
應用同樣也可以獲得
授權使用用戶位置信息

00:03:17.898 --> 00:03:21.001
一旦你的應用獲得了來自用戶的授權

00:03:21.068 --> 00:03:23.804
你的應用就可以使用我們的定位API

00:03:24.204 --> 00:03:27.708
首先我們要談論的是
Core Location必要組件

00:03:27.774 --> 00:03:29.476
標準的定位服務

00:03:30.410 --> 00:03:32.012
定位服務有兩個版本

00:03:33.380 --> 00:03:35.716
一個是簡化版本的定位API

00:03:37.017 --> 00:03:38.719
當你請求定位的時候

00:03:38.785 --> 00:03:42.356
Core Location
會盡全力計算出用戶的準確位置

00:03:42.422 --> 00:03:44.291
然後將位置傳遞給你應用的代理

00:03:46.193 --> 00:03:49.062
還有一個是持續提供定位服務的API

00:03:49.963 --> 00:03:52.065
當你調用StartUpdatingLocation

00:03:52.132 --> 00:03:55.002
Core Location
會產生一系列定位更新數據

00:03:55.068 --> 00:03:56.870
並將一系列數據傳遞給你應用的代理

00:03:58.939 --> 00:04:01.475
當你使用完定位服務的時候
記得停止定位更新

00:04:01.542 --> 00:04:04.745
若不停止 Core
Location會持續計算位置信息

00:04:06.747 --> 00:04:08.549
你可以調整相應的參數

00:04:08.615 --> 00:04:10.951
來控制定位服務如何進行工作

00:04:12.219 --> 00:04:13.820
例如 延遲更新

00:04:14.354 --> 00:04:16.757
當你允許定位延遲更新的時候

00:04:16.822 --> 00:04:19.159
你可告訴Core Location
那是可接受的

00:04:19.226 --> 00:04:22.429
在更新位置信息的時候
傳大批量的數據給應用

00:04:23.163 --> 00:04:25.499
有時我們這樣做是出於功耗的原因

00:04:28.769 --> 00:04:31.238
我們也會提供自動暫停更新的功能

00:04:31.672 --> 00:04:33.073
默認情況下該功能是開啓的

00:04:34.141 --> 00:04:35.876
它需要做的是監測

00:04:35.943 --> 00:04:40.447
當定位會話失效或者
在一定程度上來說是無用的時候

00:04:40.714 --> 00:04:42.082
讓我們來看一下這個應用

00:04:42.349 --> 00:04:45.285
假設用戶正在使用一款跑步追蹤應用

00:04:45.719 --> 00:04:48.922
用戶開始跑步
但是當他們回到家 用戶已經很累了

00:04:48.989 --> 00:04:50.224
他們想要衝個澡

00:04:50.290 --> 00:04:52.926
但是用戶忘記停止當前定位會話

00:04:54.228 --> 00:04:56.196
除非應用嘗試指定操作

00:04:56.263 --> 00:04:58.065
來監測一系列的情況

00:04:58.599 --> 00:05:02.135
否則用戶的手機
會持續計算用戶的位置信息

00:05:02.202 --> 00:05:03.937
直到電量耗盡

00:05:05.005 --> 00:05:06.173
使用自動暫停定位的話

00:05:06.240 --> 00:05:09.076
Core Location
會對類似上述情況進行監測

00:05:09.142 --> 00:05:11.812
監測到後 會自動停止位置更新

00:05:14.581 --> 00:05:16.950
Core Location會支持

00:05:17.017 --> 00:05:19.987
應用在後臺運行時使用標準的定位服務

00:05:21.421 --> 00:05:23.991
當你進入到這些特殊的會話時

00:05:24.057 --> 00:05:25.859
Core Location
將使你的應用持續運行

00:05:25.926 --> 00:05:28.161
持續傳遞更新的定位數據給你的應用

00:05:29.563 --> 00:05:31.598
如果你的應用已經獲得使用期間授權

00:05:31.932 --> 00:05:34.968
我們會自動在屏幕的頂端
顯示一個藍色的條塊

00:05:35.335 --> 00:05:37.171
以此標記的你的應用
正使用定位服務

00:05:37.237 --> 00:05:39.840
允許你的應用
持續接收到位置的更新信息

00:05:41.608 --> 00:05:44.111
獲得永久授權的應用可以在後臺運行

00:05:44.178 --> 00:05:46.547
但是不會在頂部顯示藍色條塊

00:05:46.780 --> 00:05:49.783
當你完成你的應用後
你需要停止你的定位會話

00:05:49.850 --> 00:05:52.586
否則會有潛在的問題

00:05:55.355 --> 00:05:57.491
爲了啓動一些列的後臺會話

00:05:57.558 --> 00:06:00.027
你需要在你的應用中做三件事情

00:06:00.694 --> 00:06:03.864
首先你需要允許進行後臺定位

00:06:03.931 --> 00:06:05.666
在你應用的屬性信息列表中

00:06:06.066 --> 00:06:08.302
完成上面操作最便捷的方法是

00:06:08.368 --> 00:06:10.404
轉到Xcode的功能標籤頁

00:06:11.205 --> 00:06:13.373
向下滾動到後臺模式部分

00:06:13.774 --> 00:06:15.976
勾選位置更新複選框

00:06:17.444 --> 00:06:19.546
第二 你必須設置

00:06:19.613 --> 00:06:22.549
將後臺位置更新的屬性爲真

00:06:23.183 --> 00:06:25.953
這表明定位管理器

00:06:26.019 --> 00:06:28.956
可以啓動後臺定位會話

00:06:31.458 --> 00:06:34.661
最後你需要開啓定位更新

00:06:34.728 --> 00:06:36.263
當應用處於前臺的時候

00:06:36.597 --> 00:06:38.565
如果你沒有在前臺開啓定位更新

00:06:38.632 --> 00:06:40.300
你不會獲得用戶的位置數據

00:06:42.169 --> 00:06:45.439
如果你在後臺開啓定位更新
將會發生什麼？

00:06:46.006 --> 00:06:50.410
嗯 你的應用很有可能
需要獲得永久授權

00:06:50.677 --> 00:06:53.380
因爲你的應用在後臺
那段時間是不可用的

00:06:54.515 --> 00:06:57.117
此外 Core Location
不執行任何操作

00:06:57.184 --> 00:07:00.053
來保證你的應用可以在後臺運行

00:07:01.688 --> 00:07:03.991
如果你的應用需要在後臺運行

00:07:04.057 --> 00:07:06.026
你需要去開啓定位會話

00:07:06.093 --> 00:07:07.361
你可能獲得位置更新信息

00:07:07.427 --> 00:07:10.264
但是在你收到位置更新消息之前
你的應用有可能會被掛起

00:07:10.330 --> 00:07:12.466
你希望獲得的信息

00:07:15.269 --> 00:07:19.973
在啓動定位服務之後
我們可以使用後臺監視API

00:07:20.607 --> 00:07:23.310
我們首先要談論的是區域監控

00:07:24.077 --> 00:07:25.712
區域監聽允許你的應用

00:07:25.779 --> 00:07:28.782
指定一個它感興趣的位置

00:07:28.849 --> 00:07:30.617
Core Location將判斷

00:07:30.684 --> 00:07:33.820
給出用戶是否已經到達
或者用戶已經從當前位置出發

00:07:34.988 --> 00:07:37.257
這些操作持續運行儘管你的應用被掛起

00:07:37.324 --> 00:07:40.093
或應用在後臺運行
Core Location啓動應用

00:07:40.160 --> 00:07:43.564
並設置爲後臺運行
若有需要會把啓動事件傳遞給你的應用

00:07:45.832 --> 00:07:48.936
我們有兩個版本的區域監控API

00:07:49.636 --> 00:07:52.639
首先 我們圓形區域的監控

00:07:53.273 --> 00:07:55.242
當你開啓圓形區域的監控

00:07:55.309 --> 00:07:57.678
你需要提供圓形的地理區域

00:07:57.744 --> 00:08:00.981
那是應用需使用的區域
Core Location嘗試探測

00:08:01.048 --> 00:08:03.183
用戶從那個圓形區域的進入和退出

00:08:04.818 --> 00:08:06.987
我們有Beacon區域監控

00:08:07.821 --> 00:08:10.457
Beacon區域監控會發現最近

00:08:10.524 --> 00:08:12.993
的iBeacon設備並匹配

00:08:13.060 --> 00:08:14.928
匹配你應用提供的iBeacon設備

00:08:17.798 --> 00:08:22.336
在另外的情況下
區域監控會消耗有限的系統資源

00:08:22.402 --> 00:08:27.407
Core Location只允許你
設置有限數量的區域

00:08:28.108 --> 00:08:29.276
請注意

00:08:29.343 --> 00:08:32.111
如果你寫的應用
使用到了Beacon區域監控

00:08:32.179 --> 00:08:35.849
單一的Beacon區域
可以監控多個iBeacon設備

00:08:38.784 --> 00:08:40.953
當你開始區域監控的時候

00:08:41.020 --> 00:08:42.823
你需要構建一個CL區域

00:08:42.890 --> 00:08:45.959
或者CL Beacon區域
又或者一個CL圓形區域

00:08:46.026 --> 00:08:48.495
然後將這些區域傳給
startMonitoring(for:)方法

00:08:48.562 --> 00:08:49.963
在CL區域管理器上

00:08:51.965 --> 00:08:56.336
當你處理完上一步傳遞相同的區域到
stopMonitoring(for:)方法

00:08:59.640 --> 00:09:03.510
如果你想使用區域監測
去觸發一個消息通知

00:09:03.577 --> 00:09:06.647
你有可能會對用戶通知框架感興趣

00:09:06.713 --> 00:09:08.248
用戶通知框架有對區域監控的相應支持

00:09:08.315 --> 00:09:11.852
通過UNLocationNotificationTrigger類

00:09:13.620 --> 00:09:17.324
用戶通知框架是
在iOS 10中引入的

00:09:18.125 --> 00:09:20.627
但是用戶通知的這個功能之前是可以

00:09:20.694 --> 00:09:22.529
通過UI本地通知實現的

00:09:22.863 --> 00:09:26.400
如果你想學習用戶通知框架的更多內容

00:09:26.466 --> 00:09:29.870
你或許想在線觀看消息通知介紹的演講

00:09:31.572 --> 00:09:34.474
同樣的HomeKit框架提供了支持

00:09:34.808 --> 00:09:38.979
爲區域監控事件觸發
HomeKit場景模式

00:09:40.180 --> 00:09:42.816
HM LocationEvent
允許你觸發上述操作

00:09:42.916 --> 00:09:45.519
若你想學習使用
HM LocationEvent

00:09:45.586 --> 00:09:48.622
我建議你去看一下
去年的HomeKit演講

00:09:48.689 --> 00:09:50.023
你可以在線觀看它

00:09:51.124 --> 00:09:54.661
在另一種情境下
你只需要獲得使用期間授權

00:09:54.728 --> 00:09:56.563
來使用用戶消息通知框架

00:09:56.630 --> 00:09:59.600
或者是HomeKit框架
爲區域監控提供支持

00:10:00.334 --> 00:10:02.669
通過Core Location
達到區域監控

00:10:02.736 --> 00:10:04.438
需要獲取永久權限

00:10:07.708 --> 00:10:11.278
同Beacon區域監控類似
我們有Beacon Ranging

00:10:12.312 --> 00:10:16.116
每一個iBeacon設備
廣播的消息有三個部分

00:10:16.383 --> 00:10:20.187
UUID 主ID 監控ID

00:10:22.089 --> 00:10:24.057
當一個Beacon區域事件觸發了

00:10:24.124 --> 00:10:27.427
這個消息的三部分你不會全部收到

00:10:28.161 --> 00:10:31.131
使用Beacon Ranging
你可以填充丟失的信息

00:10:32.099 --> 00:10:35.802
Ranging對於
評估有效的距離是有用的

00:10:35.869 --> 00:10:38.772
從用戶的設備到iBeacon設備

00:10:40.374 --> 00:10:44.545
當你的應用在前臺運行的時候
距離估算會更準確

00:10:44.611 --> 00:10:46.914
但可在後臺
用Beacon Ranging

00:10:48.148 --> 00:10:50.784
若你想那樣做
要記得Core Location

00:10:50.851 --> 00:10:52.886
不會阻止你的應用被掛起

00:10:53.187 --> 00:10:54.555
這樣 你的應用可能被掛起

00:10:54.621 --> 00:10:57.691
在你收到你期望的信息之前

00:11:00.861 --> 00:11:04.264
另外 如果你有興趣
使用iBeacon設備

00:11:04.331 --> 00:11:07.935
我建議訪問
developer.apple.com/ibeacon

00:11:08.769 --> 00:11:12.039
同意iBeacon license後
你可以去下載

00:11:12.105 --> 00:11:14.107
iBeacon的官方規範

00:11:14.174 --> 00:11:16.944
如何對每個iBeacon設備
進行設置使它運行良好

00:11:20.113 --> 00:11:22.850
下一個我們要談論的後臺監測API

00:11:23.050 --> 00:11:25.886
是位置大幅變化監控API

00:11:27.054 --> 00:11:30.991
從它的名字可以推斷
用於用戶位置發生大幅變化的監控

00:11:31.058 --> 00:11:32.759
變化達到了公里的級別

00:11:35.162 --> 00:11:36.563
就像我們介紹的那樣

00:11:36.630 --> 00:11:39.099
在Core Location
上發生了不少變化 在這點上

00:11:39.166 --> 00:11:41.902
我們相信這個API是相當獨特的

00:11:42.936 --> 00:11:45.906
許多的應用使用位置大幅變化監控

00:11:45.973 --> 00:11:48.475
通過訪問監測提供更好的服務

00:11:50.911 --> 00:11:52.513
在訪問監控主題中

00:11:53.013 --> 00:11:55.716
訪問監控利用複雜算法

00:11:55.782 --> 00:12:00.220
來監視一天中用戶逗留過
並且對用戶來說有意義的地方

00:12:00.888 --> 00:12:04.124
那就是爲什麼我們會認爲
訪問監控能使得應用更好的服務用戶

00:12:04.191 --> 00:12:08.228
畢竟 你會對用戶逗留和
花費的時間地點會感興趣的

00:12:08.695 --> 00:12:10.564
相對用戶偶爾逗留的地方來說

00:12:10.631 --> 00:12:13.400
當Core Location探測到
位置發生較大的變化

00:12:16.436 --> 00:12:17.871
我們做了許多工作來保證

00:12:17.938 --> 00:12:20.307
訪問監控有較低的功耗

00:12:20.374 --> 00:12:23.343
你會在全天的情景中使用訪問監控

00:12:26.513 --> 00:12:28.782
就像我們接下來要講的後臺監控API

00:12:28.849 --> 00:12:31.618
儘管在應用掛起的時候
訪問監控還是會持續工作

00:12:31.685 --> 00:12:35.088
並且會在後臺啓動你的應用
傳遞事件信息給應用

00:12:37.324 --> 00:12:39.259
如果你想開啓訪問監控

00:12:39.326 --> 00:12:42.529
你只需簡單調用
startMonitoringVisits方法

00:12:42.596 --> 00:12:45.899
當你完成以上步驟
調用stopMonitoringVisits

00:12:48.135 --> 00:12:51.839
最後我將介紹地理編碼的API

00:12:52.639 --> 00:12:54.842
Core Location
支持雙向地理編碼

00:12:54.908 --> 00:12:57.311
將地址轉換到地理座標系

00:12:57.945 --> 00:13:00.781
反向地理編碼將地理座標系轉換

00:13:00.848 --> 00:13:02.115
到地址

00:13:03.717 --> 00:13:06.320
不像我們將要談論的剩下的API

00:13:06.386 --> 00:13:10.557
地理編碼不需要用戶授權 然而

00:13:10.858 --> 00:13:13.994
如果你的應用被授權
訪問用戶的位置信息

00:13:14.494 --> 00:13:18.765
當需要執行前向編碼時
會自動使用用戶的位置信息

00:13:18.832 --> 00:13:21.335
這就是將用戶地址轉換爲
地理座標的過程

00:13:23.737 --> 00:13:26.073
地理編碼API調用的頻率是有限制的

00:13:26.139 --> 00:13:28.709
你不能發送太多的地理編碼請求

00:13:29.309 --> 00:13:33.580
避免達到發送頻率上限的
最好方法是緩存查詢結果

00:13:33.647 --> 00:13:35.048
地理編碼提供的查詢結果

00:13:35.449 --> 00:13:39.119
使用這種方法
你不需要查詢同一個地理編碼信息多次

00:13:40.921 --> 00:13:43.790
我同樣建議僅對

00:13:43.857 --> 00:13:45.726
用戶的操作進行地理編解碼

00:13:45.893 --> 00:13:48.662
例如 若用戶在地圖上放置一個大頭針

00:13:48.729 --> 00:13:51.265
那時可以對用戶位置進行地理編解碼

00:13:54.668 --> 00:13:57.471
好了 現在你已經熟悉了
我們所有的API

00:13:58.205 --> 00:14:00.207
讓我們在看一下授權

00:14:01.108 --> 00:14:05.078
如果你的應用
使用期間授權或者永久授權

00:14:05.312 --> 00:14:07.381
它可以使用標準的定位服務

00:14:08.282 --> 00:14:10.817
這些特殊的後臺定位會話

00:14:10.884 --> 00:14:12.419
它們在前臺啓動

00:14:12.486 --> 00:14:15.956
隨後進入後臺
和Beacon Ranging

00:14:17.925 --> 00:14:19.626
如果你的應用有永久授權

00:14:19.693 --> 00:14:22.796
應用還可以使用後臺監控API

00:14:23.463 --> 00:14:25.599
那是區域監控和訪問監控

00:14:25.666 --> 00:14:27.835
和位置大幅改變的監控

00:14:28.535 --> 00:14:30.871
不要忘記用戶通知框架

00:14:30.938 --> 00:14:34.541
HomeKit框架允許你
進行特定區域的監控

00:14:34.608 --> 00:14:36.276
使用使用期間授權

00:14:39.680 --> 00:14:41.548
只需要關注可用性

00:14:42.115 --> 00:14:44.685
我們的API均可以在iOS上運行

00:14:45.652 --> 00:14:48.689
在macOS上
你可以使用標準的定位服務

00:14:49.489 --> 00:14:50.858
圓形區域的監控

00:14:51.458 --> 00:14:54.461
位置大幅變化的監控和地理編碼

00:14:55.696 --> 00:14:59.066
在watchOS上
我們支持標準的定位服務

00:14:59.600 --> 00:15:02.970
和地理編解碼 最後 在tvOS上

00:15:03.036 --> 00:15:07.140
你可以使用單一定位API
和地理編解碼API

00:15:11.345 --> 00:15:13.347
好了 讓我們開始

00:15:13.413 --> 00:15:15.582
使用Core Location
最佳實踐

00:15:19.019 --> 00:15:22.222
用戶的隱私是十分重要的部分

00:15:22.289 --> 00:15:24.057
關於使用Core Location

00:15:24.591 --> 00:15:27.160
定位信息是高度敏感的信息

00:15:27.528 --> 00:15:30.163
它描述了我們生活和工作的地方

00:15:30.230 --> 00:15:31.865
我們大多數時間和誰在一起

00:15:32.666 --> 00:15:36.737
當使用Core Location時
你必須尊重用戶的隱私

00:15:37.237 --> 00:15:38.505
那是值得反覆強調的

00:15:38.572 --> 00:15:42.009
在使用Core Location時
你必須尊重用戶的隱私

00:15:43.410 --> 00:15:47.047
Core Location使用授權
系統幫助用戶保護他們的隱私

00:15:47.481 --> 00:15:50.150
除了獲得用戶的許可
你可以獲得你們的位置信息

00:15:50.217 --> 00:15:51.351
抱歉 用戶的位置信息

00:15:51.985 --> 00:15:54.721
這是尊重用戶隱私需要做的第一步

00:15:57.057 --> 00:16:01.261
你需要確認你的應用
沒有請求過多的信息

00:16:01.328 --> 00:16:05.399
比滿足用戶實際請求需要的信息

00:16:07.134 --> 00:16:11.672
同樣 你必須清楚告訴
用戶你在請求什麼

00:16:11.738 --> 00:16:13.740
你使用這些信息的目的是什麼

00:16:17.311 --> 00:16:19.680
你的應用需要做兩件事情

00:16:19.746 --> 00:16:21.949
若你的應用要
使用Core Location

00:16:22.516 --> 00:16:26.019
首先如果你要同服務器進行對話

00:16:26.086 --> 00:16:28.455
儘可能使用隱蔽查詢

00:16:29.056 --> 00:16:30.324
讓我們看一個例子

00:16:30.791 --> 00:16:33.360
如果你正在寫一個簽到應用

00:16:33.994 --> 00:16:36.763
如果用戶已經點擊了簽到按鈕

00:16:36.830 --> 00:16:39.433
然後你需要發送用戶的確認

00:16:39.499 --> 00:16:42.903
信息和定位信息到你的服務器
在一次請求中

00:16:42.970 --> 00:16:45.472
在用戶清楚知道
將會發送這兩個信息的情況下

00:16:46.640 --> 00:16:50.344
如果你正在編寫一個天氣應用

00:16:50.410 --> 00:16:53.514
用戶有可能對你的服務器不太瞭解

00:16:53.580 --> 00:16:57.217
你能夠訪問到用戶確認消息和定位信息

00:16:57.518 --> 00:17:01.555
用戶可以獲得良好的用戶體驗
有賴於隱匿的查詢

00:17:04.491 --> 00:17:08.462
此外 假如你想把
用戶的定位信息保存到磁盤上

00:17:08.529 --> 00:17:10.964
你需要使用有文件保護功能的API

00:17:11.999 --> 00:17:13.800
保存文件是相對簡單的

00:17:13.867 --> 00:17:17.838
從iOS 8開始
文件保護是默認開啓的

00:17:18.070 --> 00:17:21.108
然而 仍然是可以創建
不被保護的文件

00:17:21.708 --> 00:17:23.109
所以你需要確認

00:17:23.176 --> 00:17:25.244
假如你想使用戶定位信息持久化

00:17:25.311 --> 00:17:28.315
你最好不要把
信息存儲在未受保護的文件中

00:17:33.353 --> 00:17:36.190
除了隱私 功耗是第二件重要的事情

00:17:36.256 --> 00:17:38.458
需在使用Core
Location時考慮的

00:17:40.027 --> 00:17:43.764
使用Core Location時
的功耗差別是相當大的

00:17:44.031 --> 00:17:46.967
在一種極端情況下
我們使用Beacon區域監控

00:17:47.034 --> 00:17:49.503
的全部內容

00:17:50.137 --> 00:17:53.607
在另一種極端情況下
我們持續使用定位會話

00:17:53.674 --> 00:17:56.610
在幾個小時之內
會將我們電池的電量耗盡

00:18:00.047 --> 00:18:01.982
不管你的應用有多酷

00:18:02.049 --> 00:18:05.385
如果你的應用耗電比預期的快

00:18:05.452 --> 00:18:07.354
用戶也不會喜歡使用你的應用的

00:18:09.656 --> 00:18:12.960
所以 你在設計應用時 需要考慮功耗

00:18:13.427 --> 00:18:16.897
有時候那意味你不得不犧牲
定位的精確性和即時性

00:18:16.964 --> 00:18:20.534
以便能達到用戶預期的功耗標準

00:18:22.803 --> 00:18:26.240
爲了達到這個要求
你必須使用正確的API

00:18:28.442 --> 00:18:30.410
由於Core Location
有許多API

00:18:30.477 --> 00:18:32.646
你如何知道哪一個是正確的

00:18:33.514 --> 00:18:35.148
我把它們放到了一個決策樹裏

00:18:35.215 --> 00:18:38.318
會引導你使用正確的API

00:18:38.385 --> 00:18:40.387
那不意味着它可以處理所有的情況

00:18:40.454 --> 00:18:42.389
但它可以滿足你的入門要求

00:18:44.024 --> 00:18:46.960
你需要考慮的第一件事情是
你是否需要知道用戶的位置

00:18:47.027 --> 00:18:49.129
現在 或者是將來的某段時間

00:18:50.364 --> 00:18:51.965
假如你想在未來的某段時間使用

00:18:52.799 --> 00:18:55.702
那樣你可以使用我們的後臺監控API

00:18:55.769 --> 00:18:57.237
或者是區域監控

00:18:57.304 --> 00:18:59.406
如果你對特定的位置感興趣

00:18:59.940 --> 00:19:04.111
或者訪問監控
假如你對用戶逗留的位置感興趣

00:19:08.415 --> 00:19:10.217
如果你想知道用戶現在的位置

00:19:10.284 --> 00:19:12.619
那麼你需要使用標準的定位服務

00:19:13.487 --> 00:19:15.589
現在 你有許多不同的方法來使用它

00:19:15.656 --> 00:19:17.457
讓我們深入的瞭解其中的一些

00:19:18.859 --> 00:19:20.527
如果你正在寫一個健身應用

00:19:21.094 --> 00:19:23.530
我們建議你使用延遲位置更新

00:19:23.597 --> 00:19:25.265
在一個持續的位置會話中

00:19:27.234 --> 00:19:29.336
如果你正在寫導航應用

00:19:29.570 --> 00:19:33.006
你有可能想使用持續定位的會話

00:19:36.443 --> 00:19:38.712
如果你的應用要持續的更新UI

00:19:38.779 --> 00:19:42.649
那麼你也可能需要使用持續的定位會話

00:19:44.484 --> 00:19:47.054
最後需要考慮的事情是你的應用

00:19:47.120 --> 00:19:49.590
是否需要記錄用戶的運動軌跡

00:19:50.490 --> 00:19:54.061
如果需要的話
我們建議你使用延遲位置更新

00:19:54.895 --> 00:19:56.363
在其他的情況下

00:19:56.430 --> 00:19:58.999
我們建議你使用單一定位API

00:20:00.067 --> 00:20:02.870
你或許已經注意到了底部的電池圖標

00:20:02.936 --> 00:20:04.538
那不是意味着依次執行

00:20:04.605 --> 00:20:09.309
只是爲了告訴你每次使用服務的耗電量

00:20:14.047 --> 00:20:15.616
好了 對於授權

00:20:16.149 --> 00:20:19.920
我強烈建議你使用使用期間授權

00:20:21.421 --> 00:20:23.924
用戶更傾向於知道
你不能對他們進行追蹤

00:20:23.991 --> 00:20:25.225
除了有他們的授權

00:20:27.528 --> 00:20:29.963
此外 你需要同用戶進行交互

00:20:30.030 --> 00:20:32.332
確認用戶懂得你爲什麼

00:20:32.399 --> 00:20:36.203
需要獲得授權
還有你會如何使用獲得的授權

00:20:38.839 --> 00:20:40.807
記住 Core Location
顯示一個提示

00:20:40.874 --> 00:20:44.178
提示中包含你應用提供的用途描述

00:20:44.511 --> 00:20:47.514
這是一個同用戶進行交互的好機會

00:20:47.581 --> 00:20:50.484
但是幸運的是 這不是你同用戶
進行交互的最後一次機會

00:20:53.987 --> 00:20:57.057
你的應用需要引導用戶到設置頁面

00:20:57.124 --> 00:20:58.725
Core Location只會顯示

00:20:58.792 --> 00:21:01.628
來自你應用的有限數量的授權提示

00:21:01.695 --> 00:21:03.197
從一些方面來說

00:21:03.263 --> 00:21:05.365
如果你想改變你的授權等級

00:21:05.432 --> 00:21:07.935
用戶不得不進入到
設置界面自己進行更改

00:21:09.336 --> 00:21:11.138
若你引導UI應用
打開設置的UI

00:21:11.205 --> 00:21:15.375
調用
UIApplicationOpenSettingsURLString常量

00:21:16.677 --> 00:21:19.780
然後iOS將會打開你應用的設置面板

00:21:20.747 --> 00:21:23.383
對於Potluck 我們的示例應用
它看來像這樣

00:21:24.117 --> 00:21:26.820
你可以看到 用戶僅需要點擊幾下

00:21:26.887 --> 00:21:29.089
便可以改變Potluck的授權

00:21:34.461 --> 00:21:37.297
我們見過許多開發者
被Core Location困擾

00:21:37.364 --> 00:21:39.032
還有它對線程的要求

00:21:39.933 --> 00:21:43.871
你需要記住
Core Locatioon要求你

00:21:43.937 --> 00:21:48.375
在一個有RunLoop的線程上創建
CLLocationManager

00:21:49.643 --> 00:21:52.713
當位置管理器初始化完成後

00:21:52.779 --> 00:21:55.482
它會將當前的線程附加到
RunLoop上

00:21:56.650 --> 00:22:00.020
它將傳遞全部代理的回調到
RunLoop上

00:22:02.422 --> 00:22:04.091
現在 對許多應用來說

00:22:04.558 --> 00:22:07.294
主線程就是唯一擁有
RunLoop的線程

00:22:08.462 --> 00:22:12.799
所以呢 在主線程上創建位置管理器是安全的

00:22:12.866 --> 00:22:14.902
但如果你那樣做 也需要特別注意的

00:22:15.469 --> 00:22:19.606
你必須保持你的主線程是激活的
以便可以處理UI事件

00:22:20.374 --> 00:22:23.544
如果你花費了很多時間處理定位信息

00:22:23.610 --> 00:22:25.579
那麼你的應用將會卡頓

00:22:29.516 --> 00:22:32.452
我們建議你要不間斷同
位置管理器進行交互

00:22:32.519 --> 00:22:35.956
就是調用它的方法在創建它的線程裏面

00:22:37.090 --> 00:22:40.460
這樣就簡化了同
位置管理器進行的交互

00:22:43.897 --> 00:22:45.199
讓我們看一下代碼

00:22:45.599 --> 00:22:47.634
這兒我正在請求授權

00:22:48.068 --> 00:22:52.573
這裏假定我已經在應用中
加入了必要的應用描述

00:22:52.639 --> 00:22:54.374
到我的信息屬性列表裏

00:22:55.375 --> 00:22:56.810
我創建了一個位置管理器

00:22:56.877 --> 00:22:59.313
我會使用使用授權授權

00:22:59.913 --> 00:23:02.015
不幸的是 不起作用

00:23:02.583 --> 00:23:05.786
原來
requestWhenInUseAuthorization方法是異步的

00:23:06.253 --> 00:23:09.823
並且CLLocationManager會自動釋放

00:23:09.890 --> 00:23:12.626
銷燬顯著的授權提示

00:23:13.360 --> 00:23:16.864
這樣用戶根本看不到授權提示

00:23:16.930 --> 00:23:19.867
由於管理器會在函數結束的時候釋放

00:23:22.936 --> 00:23:24.471
讓我們嘗試下與衆不同的操作

00:23:25.272 --> 00:23:28.008
如果把管理器作爲一個靜態類的屬性

00:23:28.075 --> 00:23:29.943
那樣的話它將存在足夠長的時間

00:23:30.577 --> 00:23:33.881
然而 那樣的話會引入新的漏洞

00:23:34.515 --> 00:23:38.785
Swift的類將會在第一時間
初始化管理器這個屬性

00:23:40.020 --> 00:23:43.156
除非我們十分小心並且
確定我們可以訪問那個屬性

00:23:43.223 --> 00:23:44.858
在有RunLoop的線程上訪問

00:23:44.992 --> 00:23:49.162
這將在沒有RunLoop的線程上
創建位置管理器

00:23:49.763 --> 00:23:52.933
我們認爲這樣做會容易導致錯誤
我們也不鼓勵這樣使用它

00:23:55.602 --> 00:23:56.703
再一次嘗試

00:23:57.137 --> 00:23:59.373
我們創建位置管理器

00:23:59.439 --> 00:24:03.210
作爲視圖控制器的一個實例化的屬性

00:24:05.145 --> 00:24:08.649
視圖控制器通常是在主線程上創建的

00:24:08.715 --> 00:24:10.417
在這個實例中 位置管理器

00:24:10.484 --> 00:24:12.686
將會隨着視圖控制器的創建而創建

00:24:13.587 --> 00:24:16.123
這樣我們就可以確保

00:24:16.190 --> 00:24:18.725
位置管理器會在主線程上創建

00:24:20.194 --> 00:24:23.363
我們比較傾向用這種方式創建
位置管理器

00:24:23.697 --> 00:24:26.900
你有可能會考慮將它
依附到你應用的代理上

00:24:32.472 --> 00:24:34.541
由於標準的定位服務

00:24:34.608 --> 00:24:37.911
在所有Core Location
的API中耗電驚人

00:24:37.978 --> 00:24:39.713
正確使用API就顯得重要了

00:24:41.215 --> 00:24:45.018
首先我們建議使用請求定位API

00:24:45.085 --> 00:24:46.220
在任何可能的時候

00:24:48.322 --> 00:24:51.725
其次 你需要確保獲得合適的精度

00:24:51.792 --> 00:24:54.761
可以在你的應用中
設置你能允許的最大偏差

00:24:55.996 --> 00:25:00.467
一般來說越精確的定位意味着耗電越多

00:25:02.135 --> 00:25:06.106
舉個例子 你請求的是100米的精度

00:25:06.173 --> 00:25:09.009
Core Location
通常不需要打開GPS

00:25:09.076 --> 00:25:11.645
來滿足我們的定位請求

00:25:13.313 --> 00:25:16.817
Core Location
將會給你或者盡力給你

00:25:16.884 --> 00:25:19.753
一個比你請求的更精確的定位信息

00:25:21.455 --> 00:25:25.459
如果說你請求一個3公里精確度的定位

00:25:25.626 --> 00:25:27.961
這會要求Core Location

00:25:28.028 --> 00:25:30.597
給你的定位信息是它獲得的最接近的

00:25:35.235 --> 00:25:38.038
我們建議你開啓自動停止功能

00:25:38.505 --> 00:25:40.507
我們已經對自動停止的算法進行了優化

00:25:40.574 --> 00:25:41.909
使它能行之有效

00:25:42.409 --> 00:25:46.046
我們會感到驚訝
如果它停止了你的定位會話

00:25:46.113 --> 00:25:48.916
當用戶正在使用定位會話的時間段中

00:25:49.383 --> 00:25:51.451
只要你對自動停止的配置是正確的

00:25:51.518 --> 00:25:53.954
你可以讓定位會話持續運行着

00:25:55.055 --> 00:25:59.927
對自動停止進行配置
設置活動選項的屬性

00:25:59.993 --> 00:26:02.529
在位置管理器上設置合適值

00:26:03.297 --> 00:26:05.866
如果你想了解更多的內容
你可以查閱我們的文檔

00:26:08.535 --> 00:26:13.974
同樣 我建議不用去管
或者打開延遲定位更新

00:26:14.575 --> 00:26:17.244
延遲位置更新允許
Core Location

00:26:17.311 --> 00:26:18.745
讓設備處在耗電量低的狀態

00:26:18.812 --> 00:26:23.450
被動蒐集位置信息
然後大批量的處理這些數據

00:26:27.521 --> 00:26:30.224
這樣做可以在很大程度上節省電量

00:26:30.290 --> 00:26:33.160
相比於正常狀態下持續定位會話來說

00:26:38.498 --> 00:26:41.335
還有一點困惑就是你不能瞭解

00:26:41.401 --> 00:26:43.437
每一步的設置是如何工作的

00:26:43.504 --> 00:26:47.007
你可能想在Xcode中使用耗電日誌

00:26:47.441 --> 00:26:49.510
它將給你一個關於耗電的粗略統計

00:26:49.576 --> 00:26:51.578
你持續定位會話正在運行

00:26:54.815 --> 00:26:59.453
最後我建議你設置
allowsBackgroundLocationUpdates屬性

00:26:59.520 --> 00:27:02.389
爲真 只有當你

00:27:02.456 --> 00:27:04.358
開啓後臺定位會話的時候

00:27:05.092 --> 00:27:07.761
我們看到許多應用將那個屬性設置爲真

00:27:07.828 --> 00:27:11.198
當他們進入到後臺之後
會停止他們的位置會話

00:27:11.265 --> 00:27:13.100
這樣做會有一個消極的影響

00:27:13.867 --> 00:27:18.172
這兒 我已修改了Potluck
我們的示例應用來模擬那種情況

00:27:19.039 --> 00:27:22.042
你將看到當我啓動會話
然後返回到主界面

00:27:22.543 --> 00:27:25.379
藍色的條塊在屏幕頂部
僅僅持續了幾秒鐘

00:27:25.812 --> 00:27:27.548
在這兒我開啓了會話

00:27:27.915 --> 00:27:31.084
然後我點擊了home鍵
有一個藍色的條塊在屏幕頂端

00:27:32.319 --> 00:27:34.555
這樣的失誤可以通過簡單管理進行避免

00:27:34.621 --> 00:27:37.624
對你的allowsBackgroundLocationUpdates
屬性進行正確的設置

00:27:44.398 --> 00:27:47.935
現在 我們的監控API
會監控你的進程

00:27:48.468 --> 00:27:51.572
像這樣 我建議你頻繁的交互

00:27:51.638 --> 00:27:55.375
從你進程分享的唯一
一個位置管理器

00:27:56.343 --> 00:27:58.445
你有可能想附加到你應用的代理上

00:28:01.281 --> 00:28:06.019
除此之外 我們的監控API
將持續運行直到你告訴它停止

00:28:07.588 --> 00:28:12.726
確實如此 儘管你更新應用且移除對
Core Location全部引用

00:28:12.793 --> 00:28:14.494
並且斷開同框架的連接

00:28:16.163 --> 00:28:19.633
所以我們建議不管你何時啓動你的應用

00:28:19.700 --> 00:28:23.337
你需要花一點時間思考
Core Location

00:28:23.403 --> 00:28:26.106
是否需要在後臺監控你的應用

00:28:27.241 --> 00:28:29.510
除非你確定在那個時間段

00:28:29.576 --> 00:28:30.944
後臺監控是在運行的

00:28:31.211 --> 00:28:33.947
你需告訴Core Location
停止監控

00:28:36.250 --> 00:28:37.518
這一小片段代碼

00:28:37.584 --> 00:28:41.421
可以停止所有的三種後臺監控API

00:28:48.495 --> 00:28:50.964
如果你你正在編寫室內應用

00:28:52.099 --> 00:28:55.369
記住Core Location
將會自動

00:28:55.435 --> 00:28:58.972
允許室內定位不管何時你的應用

00:28:59.039 --> 00:29:02.209
不好意思 是不管何時用戶在室內

00:29:03.677 --> 00:29:06.180
這隻發生在如果你的路線已經被記錄

00:29:06.713 --> 00:29:08.849
如果你想你的路線被記錄

00:29:08.916 --> 00:29:11.952
訪問mapsconnect.apple.com
學習更多

00:29:15.489 --> 00:29:18.425
Beacon區域監控
是廣泛使用的技術

00:29:18.492 --> 00:29:22.029
可以應用到各個領域

00:29:22.095 --> 00:29:25.799
我認爲最好配合室內場景使用

00:29:26.166 --> 00:29:28.502
它能很好的完成室內定位

00:29:29.803 --> 00:29:33.240
Beacon區域監控
允許你的應用探測接近

00:29:33.307 --> 00:29:36.009
你已經在室內放置的地標

00:29:37.778 --> 00:29:41.815
室內定位允許你在地圖上顯示用戶位置

00:29:41.882 --> 00:29:44.551
可以幫助你從一個地方導航到另一地方

00:29:49.823 --> 00:29:52.693
在watchOS上 你需要記住

00:29:52.759 --> 00:29:57.664
Core Location將
自動利用附近的iPhone

00:29:58.432 --> 00:30:02.436
讓我們處理同iPhone的
連接並且計算位置

00:30:04.605 --> 00:30:07.207
除此之外 我們看到過許多應用的請求

00:30:07.274 --> 00:30:09.376
在watchOS上獲得永久授權

00:30:09.443 --> 00:30:11.812
儘管可以使用完成任務

00:30:11.879 --> 00:30:13.514
利用使用期間授權

00:30:16.283 --> 00:30:20.187
如果你想使用永久授權
在watchOS上

00:30:20.254 --> 00:30:21.955
讓我們再一次看一下

00:30:22.022 --> 00:30:23.557
在使用期間授權

00:30:26.927 --> 00:30:28.095
對於watchOS 3

00:30:28.161 --> 00:30:31.498
我們在watchOS上開放了
startUpdatingLocation接口

00:30:32.633 --> 00:30:36.703
然而 使用requestLocation
可以更好的服務大多數的應用

00:30:37.971 --> 00:30:39.339
這是一個例外

00:30:40.274 --> 00:30:44.945
在watchOS 3上
可以讓健身應用運行在後臺是可行的

00:30:45.612 --> 00:30:48.182
如果你長在編寫鍛鍊類的應用

00:30:48.248 --> 00:30:52.219
我認爲startUpdatingLocation方法
對你來說是比較合適的API

00:30:56.924 --> 00:30:57.858
對於macOS來說

00:30:59.993 --> 00:31:02.129
我們只支持永久授權

00:31:04.698 --> 00:31:08.235
此外 Core Location
將會自動顯示一個提示

00:31:08.302 --> 00:31:10.537
當你嘗試獲取位置信息的時候

00:31:11.138 --> 00:31:14.374
你不需要在macOS上調用
requestAlwaysAuthorization

00:31:17.845 --> 00:31:20.380
因爲Mac不會經常被移動

00:31:21.548 --> 00:31:27.154
我認爲requestLocation
是你想在macOS上使用的API

00:31:30.691 --> 00:31:34.161
對tvOS來說
你可以使用三種功能強大的API

00:31:34.661 --> 00:31:38.165
單一定位 地理編解碼和MapKit

00:31:38.866 --> 00:31:41.201
使用這些API
你能獲得你想要的任何東西

00:31:41.268 --> 00:31:44.371
在Apple TV上
創建良好的定位體驗

00:31:46.106 --> 00:31:48.275
但是需要額外注意的是任何信息

00:31:48.342 --> 00:31:50.978
通過Core Location獲取
顯示到你的應用中

00:31:51.879 --> 00:31:54.982
tvOS設備通常放置在用戶的家裏

00:31:55.549 --> 00:31:58.952
用戶的家庭信息是十分敏感的隱私信息

00:31:59.019 --> 00:32:01.121
你可從Core Location上
獲取的

00:32:01.488 --> 00:32:04.358
你應當恰當使用你獲得信息

00:32:08.729 --> 00:32:11.765
不知不覺到了今天演講結束的時候

00:32:11.832 --> 00:32:14.801
當你離開的時候請記住四件事情

00:32:16.370 --> 00:32:19.640
首先 你必須尊重用戶的隱私

00:32:21.575 --> 00:32:23.610
其中一部分就是通用戶進行交互

00:32:23.677 --> 00:32:26.513
確定用戶理解你正在詢問的

00:32:26.580 --> 00:32:28.348
知道你如何使用這些信息

00:32:30.450 --> 00:32:34.288
其次省電是必須的部分

00:32:34.354 --> 00:32:35.989
在使用Core Location時

00:32:36.723 --> 00:32:40.027
有時你不得不犧牲精確度並且延遲

00:32:40.093 --> 00:32:44.364
以便獲得用戶期望的用戶體驗

00:32:44.798 --> 00:32:48.101
同時能達到用戶期望的耗電標準

00:32:50.237 --> 00:32:54.741
爲達到上述效果 需保證使用了正確的
Core Location API

00:32:54.808 --> 00:32:56.109
對你面臨的難題來說

00:32:57.511 --> 00:33:00.881
同樣確保你使用的是使用期間授權

00:33:00.948 --> 00:33:02.182
不論何時你都可以使用

00:33:04.718 --> 00:33:07.654
若使用Core Location
使你感到困難

00:33:08.355 --> 00:33:11.058
我建議你看一下Potluck
我們的示例應用

00:33:11.491 --> 00:33:15.162
我們將在今年更新Swift 3
它會比以往更好些

00:33:17.097 --> 00:33:21.001
如果你想學習更多
你可以訪問我們的在線資料庫

00:33:24.371 --> 00:33:26.607
或者是查看相關的演講

00:33:29.676 --> 00:33:32.546
就這些 謝謝你們
祝大家在餘下的WWDC過得愉快