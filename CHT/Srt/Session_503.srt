00:00:21.088 --> 00:00:21.922 
早上好

00:00:21.989 --> 00:00:23.790 
AVFoundation回放的新進展

00:00:23.857 --> 00:00:25.959 
等待 循環 轉換 擴展 優化

00:00:27.160 --> 00:00:30.597 
歡迎來到我們關於
AVFoundation回放新進展的會話

00:00:32.366 --> 00:00:33.534 
我是Sam Bushell

00:00:34.501 --> 00:00:38.305 
今天我們要講一些新添加的增強功能

00:00:38.372 --> 00:00:40.340 
這可以使得開發者在處理

00:00:40.407 --> 00:00:43.043 
難題時變得更加得心應手

00:00:43.744 --> 00:00:46.180 
所以AVFoundation
提供樣式廣泛的API

00:00:46.246 --> 00:00:47.614 
用於多媒體活動

00:00:47.915 --> 00:00:51.118 
包括回放 拍攝 導出
以及多種類型的編輯

00:00:51.185 --> 00:00:53.287 
我的重點主要在回放上

00:00:54.421 --> 00:00:57.624 
AVFoundation回放
支持樣式非常廣泛的

00:00:57.691 --> 00:01:01.028 
存儲於本地的媒體格式

00:01:01.428 --> 00:01:03.597 
在大多數情況下
你可以將相同的文件

00:01:03.697 --> 00:01:05.199 
放到一個網絡服務器上

00:01:05.532 --> 00:01:08.869 
然後AVFoundation
可以通過網絡播放那個文件

00:01:09.203 --> 00:01:12.539 
該情況下文件格式是相同的
不過IO是通過網絡的

00:01:13.273 --> 00:01:15.876 
我們稱之爲漸進式下載回放

00:01:16.910 --> 00:01:18.712 
一旦我們開始下載該文件

00:01:18.912 --> 00:01:21.215 
即使網絡特性發生變化

00:01:21.281 --> 00:01:23.050 
我們繼續下載的還是相同文件

00:01:24.251 --> 00:01:27.154 
HTTP直播流更爲動態

00:01:27.855 --> 00:01:31.024  
一般來說 基URL
引用的是主播放列表

00:01:31.592 --> 00:01:34.361  
這會帶來相同內容的
多個播放列表

00:01:34.428 --> 00:01:37.664  
但在比特率 格式
或是語言上會有差異

00:01:39.132 --> 00:01:41.802  
而且每一個播放列表都引用

00:01:41.869 --> 00:01:44.371  
含有實際壓縮媒體文件的分段

00:01:46.106 --> 00:01:48.075 
我們來談談今天的話題

00:01:49.142 --> 00:01:50.244 
我們要討論

00:01:50.611 --> 00:01:54.081 
和預回放緩衝時間
有關的回放變更

00:01:54.715 --> 00:01:56.550 
我們將推出一個新的API

00:01:56.984 --> 00:01:59.253 
來簡化單個文件的循環播放

00:01:59.853 --> 00:02:02.623 
我們會討論一些
在底層作出的回放改進

00:02:05.492 --> 00:02:08.829 
我們會討論讓你的應用程序
爲廣色域視頻做好準備

00:02:09.763 --> 00:02:12.499 
然後我們會用餘下的時間
討論一個熱門的話題

00:02:12.566 --> 00:02:15.469 
回放應用中的靜態時間優化

00:02:16.503 --> 00:02:19.173 
我們先從等待網絡開始

00:02:19.239 --> 00:02:21.041 
緩衝中
請稍等...

00:02:21.141 --> 00:02:23.177 
因爲當我們在網上
進行媒體回放時

00:02:23.243 --> 00:02:24.678 
我們任憑網絡的擺佈

00:02:24.745 --> 00:02:27.481 
我們不想太早開始
否則回放會卡頓

00:02:27.548 --> 00:02:29.983 
我們不想太晚開始
否則用戶會放棄觀看

00:02:30.417 --> 00:02:33.020 
我們想在那個
完美時刻的開始播放

00:02:33.086 --> 00:02:35.656 
且在我們有足夠數據時
開始回放 這樣我們就能夠

00:02:35.722 --> 00:02:37.491 
持續播放 沒有卡頓

00:02:38.392 --> 00:02:40.294 
這是現有的API

00:02:40.827 --> 00:02:43.797 
AVPlayerItem
提供三個Boolean屬性

00:02:44.631 --> 00:02:47.401 
playbackLikelyToKeepUp
playbackBufferFull

00:02:47.467 --> 00:02:48.936 
以及playbackBufferEmpty

00:02:49.636 --> 00:02:53.106 
playbackBuffer——抱歉——
playbackLikelyToKeepUp爲true的

00:02:53.173 --> 00:02:56.977 
條件是AVFoundation算法
認爲如果你現在停止播放

00:02:57.211 --> 00:02:59.079 
你就可以持續播放 沒有卡頓

00:02:59.146 --> 00:03:00.013 
直到播放結束

00:03:00.948 --> 00:03:04.117 
playbackBufferFull
爲true的條件是緩衝

00:03:04.184 --> 00:03:06.186 
已經達到最大量了

00:03:06.253 --> 00:03:07.821 
如果你還沒有開始回放

00:03:07.888 --> 00:03:08.755 
那就開始回放吧

00:03:09.489 --> 00:03:12.092 
playbackBufferEmpty
意味着你卡住了

00:03:12.159 --> 00:03:13.327 
或者即將卡住

00:03:16.330 --> 00:03:19.566 
對於iOS 9和更早版本中的
漸進式下載回放

00:03:19.900 --> 00:03:23.570 
AVFoundation客戶端
必須自己監控這些屬性

00:03:23.937 --> 00:03:26.607 
等待直到
playbackLikelyToKeepUp爲true

00:03:26.673 --> 00:03:28.842 
或playbackBufferFull爲true

00:03:29.009 --> 00:03:31.812 
之後再將AVPlayer
的速率屬性設置爲1

00:03:32.913 --> 00:03:35.215 
對於HTTP直播流
規則更加簡單

00:03:35.782 --> 00:03:38.218 
你可立刻將AVPlayer
速率屬性設置爲1

00:03:38.385 --> 00:03:40.187 
當用戶選擇播放的時候

00:03:40.487 --> 00:03:42.222 
這就會自動等待

00:03:42.856 --> 00:03:45.359 
緩衝足夠的媒體文件
之後再開始回放

00:03:47.160 --> 00:03:49.363 
我們精簡了默認的API契約

00:03:49.429 --> 00:03:51.899 
在2016年的iOS版本中

00:03:51.965 --> 00:03:54.234 
iOS  Mac OS  tvOS

00:03:55.002 --> 00:03:59.306 
對使用iOS 10 Mac OS
Sierra tvOS 10及之後版本應用

00:04:00.340 --> 00:04:02.543 
HLS的規則也同樣適用於

00:04:02.609 --> 00:04:04.044 
漸進式下載回放

00:04:04.778 --> 00:04:06.046 
當用戶點擊播放時

00:04:06.113 --> 00:04:09.449 
你可以立刻將AVPlayer
的速率屬性設置爲1

00:04:09.650 --> 00:04:11.652 
或調用播放方法
都是一樣的

00:04:12.452 --> 00:04:14.321 
AVFoundation自動等待

00:04:14.388 --> 00:04:16.190 
足夠多的緩衝
從而避免卡住

00:04:17.257 --> 00:04:20.127 
如果回放期間網絡中斷
然後播放卡住

00:04:20.661 --> 00:04:23.497 
速率屬性仍將設置爲1

00:04:24.231 --> 00:04:26.934 
所以它會再次緩衝並自動恢復

00:04:27.000 --> 00:04:27.968 
當有足夠緩衝的時候

00:04:31.271 --> 00:04:34.374 
如果你使用AVKit
或者MediaPlayer框架

00:04:34.775 --> 00:04:36.710 
來呈現你的回放UI

00:04:37.544 --> 00:04:40.814 
它已經支持了自動緩衝等待

00:04:40.881 --> 00:04:41.849 
並且會繼續支持

00:04:42.616 --> 00:04:45.118 
若你的應用
直接使用AVFoundation

00:04:45.385 --> 00:04:46.887 
然後你構建自己的回放UI

00:04:47.054 --> 00:04:48.589 
你可能需要做一些調整

00:04:50.157 --> 00:04:51.758 
所以這個新API應該叫什麼？

00:04:52.125 --> 00:04:56.430 
Autoplay這個詞
已經用在了QTKit中

00:04:56.530 --> 00:04:59.533 
和HTML 5中
但我們得出的結論是

00:04:59.600 --> 00:05:02.803 
從這個AVPlayer API
的角度看

00:05:03.136 --> 00:05:05.439 
自動的部分並不是回放

00:05:05.839 --> 00:05:06.673 
而是等待

00:05:07.674 --> 00:05:10.077 
所以這個API的正式名稱是

00:05:10.210 --> 00:05:12.513 
automaticallyWaits
ToMinimizeStalling

00:05:12.579 --> 00:05:14.381 
但若你喜歡
稱它爲Autoplay也行

00:05:16.250 --> 00:05:17.551 
這個網絡回放現在看起來

00:05:17.618 --> 00:05:19.419 
像是有三個狀態的狀態機

00:05:20.220 --> 00:05:22.189 
暫停 等待 播放

00:05:23.023 --> 00:05:25.592 
我們從暫停狀態開始
直到用戶選擇播放

00:05:25.993 --> 00:05:28.862 
然後應用調用播放
我們就移至等待狀態

00:05:30.264 --> 00:05:33.133 
當playbackLikelyToKeepUp
屬性爲true時

00:05:33.200 --> 00:05:35.202 
播放器會前進到播放狀態

00:05:35.936 --> 00:05:37.738 
如果緩衝是空的

00:05:38.438 --> 00:05:40.107 
播放器會切換回等待狀態

00:05:40.174 --> 00:05:41.375 
直到再次
可能跟上播放

00:05:42.209 --> 00:05:45.312 
如果用戶暫停
我們會回到暫停狀態

00:05:45.879 --> 00:05:47.714 
這裏還有一個
可以實現的過渡

00:05:48.282 --> 00:05:51.585 
回想在此次更改之前的
iOS 9或者之前版本

00:05:51.952 --> 00:05:55.055 
你可以在回放可能
跟上之前調用播放

00:05:55.289 --> 00:05:56.957 
回放會立刻開始

00:05:57.391 --> 00:05:58.458 
即使可能會卡住

00:05:58.825 --> 00:06:01.962 
所以我們通過提供
另一種方法保留了該語義

00:06:02.162 --> 00:06:03.797 
playImmediately(atRate:)

00:06:03.864 --> 00:06:05.832 
這可以讓你直接
跳轉到播放狀態

00:06:06.166 --> 00:06:08.168 
從暫停狀態或
等待狀態過來

00:06:09.102 --> 00:06:11.405 
要注意的是
這可能會導致卡頓

00:06:11.605 --> 00:06:14.608 
而耐心的等待狀態
會避免這種情況

00:06:17.177 --> 00:06:18.011 
所以要注意

00:06:18.145 --> 00:06:20.147 
AVPlayer的速率屬性
可能不是

00:06:20.214 --> 00:06:21.114 
你所理解的意義

00:06:21.448 --> 00:06:23.016 
我們重述一遍
這樣大家都清楚

00:06:24.084 --> 00:06:25.385 
AVPlayer的速率屬性

00:06:26.486 --> 00:06:28.822 
是應用請求的回放速率

00:06:29.423 --> 00:06:31.525 
不要和AVPlayeritem的

00:06:31.758 --> 00:06:32.593 
時基速率相混淆

00:06:32.926 --> 00:06:35.062 
那是回放實際發生的速率

00:06:36.630 --> 00:06:38.198 
我們添加了兩個新的屬性在

00:06:39.867 --> 00:06:42.336 
此版本中

00:06:43.403 --> 00:06:44.571 
來給大家展示更多細節

00:06:44.638 --> 00:06:46.573 
一個是
timeControlStatus

00:06:46.640 --> 00:06:48.442 
這可以表達出
你在哪一個狀態中

00:06:48.575 --> 00:06:50.043 
暫停 等待或是播放

00:06:50.377 --> 00:06:51.879 
如果你在等待狀態中

00:06:52.813 --> 00:06:55.883 
等待播放的原因
屬性會告訴你原因

00:06:56.717 --> 00:06:59.152 
例如 你可能在等待狀態中

00:06:59.219 --> 00:07:03.156 
那AVPlayer的
速率屬性可能是1

00:07:04.491 --> 00:07:06.927 
因爲你在等待
所以timebase.rate會是0

00:07:06.994 --> 00:07:08.595 
timeControlStatus
會再次表達

00:07:08.662 --> 00:07:10.364 
我在等待以特定速率進行播放

00:07:10.797 --> 00:07:14.134 
然後等待播放的原因
可能是爲減少卡頓而等待

00:07:15.469 --> 00:07:16.603 
所以憑藉這些背景知識

00:07:16.670 --> 00:07:18.872 
我想介紹我的朋友
Moritz Wittenhagen

00:07:18.939 --> 00:07:20.140 
他比我更加大膽

00:07:20.274 --> 00:07:21.441 
因爲他要嘗試

00:07:21.608 --> 00:07:24.778 
在臺上進行
現場網絡回放演示

00:07:24.845 --> 00:07:26.446 
所以各位祝他好運
給他一些掌聲

00:07:31.051 --> 00:07:32.452 
各位早上好

00:07:34.254 --> 00:07:35.923 
我想先開始展示一下

00:07:36.290 --> 00:07:37.824 
我們在臺上有的設備

00:07:38.125 --> 00:07:39.293 
這是我的iPad

00:07:39.560 --> 00:07:41.328 
你能看到
這在屏幕上同步顯示着

00:07:41.895 --> 00:07:44.031 
那個iPad正在加入一個

00:07:44.097 --> 00:07:45.265 
由Mac搭建的網絡

00:07:46.099 --> 00:07:49.336 
這可以讓我使用
網絡連接調節器

00:07:49.403 --> 00:07:51.605 
來限制網絡連接

00:07:51.672 --> 00:07:53.106 
用於這個iPad的

00:07:53.774 --> 00:07:55.475 
這可以使用
網絡連接調節器的

00:07:55.542 --> 00:07:56.376 
偏好面板做到

00:07:56.677 --> 00:07:58.579 
Sam一會兒
會告訴你去哪裏去找

00:07:59.112 --> 00:08:01.415 
我設置了
Slow Server配置文件

00:08:01.748 --> 00:08:04.785 
這會將其限制成一般的網絡連接

00:08:04.885 --> 00:08:06.253 
這稍微慢於

00:08:06.787 --> 00:08:08.589 
我們想要播放的
媒體比特率

00:08:09.389 --> 00:08:10.290 
目前這是關閉的

00:08:11.391 --> 00:08:14.161 
我們先不開啓它
然後來看看iPad在

00:08:14.728 --> 00:08:16.263 
優質網絡條件下的性能

00:08:17.431 --> 00:08:19.967 
所以我這裏有的只是一個選集

00:08:20.033 --> 00:08:21.768 
我可以選擇一個視頻

00:08:21.935 --> 00:08:22.803 
我開始選擇

00:08:23.036 --> 00:08:26.306 
你看到的是
視頻馬上就加載上了

00:08:26.573 --> 00:08:32.011 
我們看到
目前沒在播放

00:08:32.346 --> 00:08:34.581 
你看看這下面
極好的工程UI

00:08:34.648 --> 00:08:37.351 
告訴我們所有的屬性

00:08:37.417 --> 00:08:39.520 
以及功能
這都和自動等待有關

00:08:39.953 --> 00:08:43.289 
這真的是從AVPlayer
和AVPlayeritem中獲取的

00:08:43.357 --> 00:08:47.327 
所以有這些屬性可供你使用
如果你需要知道

00:08:47.427 --> 00:08:48.729 
自動等待在做什麼的話

00:08:49.329 --> 00:08:51.765 
因爲現在我們暫停了
所以這些速率都是0

00:08:51.832 --> 00:08:52.766 
當前時間是0

00:08:52.833 --> 00:08:56.370 
但有意思的是
因爲我們在快速的網絡中

00:08:56.436 --> 00:08:58.472 
我們加載了39秒的視頻

00:08:58.539 --> 00:08:59.773 
這實際上就是整個視頻

00:08:59.840 --> 00:09:02.309 
然後我們目前
可能跟上回放

00:09:03.043 --> 00:09:06.046 
這意味着
當我現在點擊播放

00:09:06.513 --> 00:09:09.750 
視頻就會開始播放
沒有任何問題

00:09:10.884 --> 00:09:14.755 
現在我們想看看
在差的網絡條件下會怎麼樣

00:09:14.821 --> 00:09:17.457 
所以我們啓用Mac
上的網絡連接調節器

00:09:18.592 --> 00:09:19.426 
好了

00:09:19.660 --> 00:09:21.995 
對這個視頻沒什麼差別

00:09:22.062 --> 00:09:26.333 
因爲如我所說整個視頻已經緩衝完畢了

00:09:26.967 --> 00:09:29.803 
所以當我回去再次加載它

00:09:29.870 --> 00:09:32.239 
我想讓大家重新注意
loadedTimeRanges

00:09:32.306 --> 00:09:34.374 
和isPlaybackLikely
ToKeepUp

00:09:34.741 --> 00:09:35.576 
所以開始吧

00:09:36.543 --> 00:09:37.444 
重新加載視頻

00:09:38.111 --> 00:09:39.680 
現在我們看到的是

00:09:39.746 --> 00:09:42.516 
loadedTimeRange
只是緩慢地增加

00:09:42.583 --> 00:09:45.152 
isPlaybackLikely
ToKeepUp 爲false

00:09:46.086 --> 00:09:47.654 
但終究會變成true

00:09:47.988 --> 00:09:50.791 
在那一時刻我們
處在了和之前相同的狀態

00:09:50.858 --> 00:09:54.361 
現在準備播放
然後回放就會開始

00:09:55.262 --> 00:09:57.564 
現在我們再試一次

00:09:57.631 --> 00:10:00.534 
這一次我會在視頻加載好
之後馬上點擊播放

00:10:00.934 --> 00:10:04.071 
所以這一次
我們沒有足夠的數據

00:10:04.137 --> 00:10:05.472 
然後就進入了這個等待狀態

00:10:05.539 --> 00:10:08.809 
你看到這個轉動圖標
告訴用戶在等待回放

00:10:08.876 --> 00:10:11.979 
最終這會成爲準備播放
然後回放就會開始

00:10:12.880 --> 00:10:16.049 
還有一件事我們可以做
那就是立刻回放

00:10:16.183 --> 00:10:17.284 
我們也試一下

00:10:19.286 --> 00:10:22.623 
我進入這個視頻
馬上點擊立刻播放

00:10:22.890 --> 00:10:26.360 
我們看到回放開始了
不過之後很快就卡住了

00:10:26.426 --> 00:10:29.129 
因爲我們沒有足夠的緩衝
來將視頻播完

00:10:29.296 --> 00:10:31.899 
這種情況下
我們會進入等待狀態

00:10:31.965 --> 00:10:36.303 
直到重新緩衝出
足夠的數據播到最後

00:10:37.037 --> 00:10:39.840 
以上就是自動等待的簡短演示

00:10:40.641 --> 00:10:41.842 
回到Sam和幻燈片上

00:10:48.448 --> 00:10:49.383 
謝謝 Moritz

00:10:49.750 --> 00:10:51.485 
我們回顧一下
中間發生了什麼

00:10:52.152 --> 00:10:54.655 
當我們設置了
更緩慢的網絡速度

00:10:54.755 --> 00:10:56.023 
接近那部電影的數據速率

00:10:57.090 --> 00:10:58.625 
電影一開始是暫停的

00:10:59.293 --> 00:11:00.394 
當他點擊播放

00:11:02.029 --> 00:11:03.263 
這就進入等待狀態

00:11:04.631 --> 00:11:07.467 
因爲目前回放不可能跟上

00:11:08.402 --> 00:11:11.271 
注意到這個時候
播放器的速率是1

00:11:11.338 --> 00:11:12.773 
但時基速率是0

00:11:13.807 --> 00:11:16.677 
幾秒鐘之後
AVFoundation斷定

00:11:17.477 --> 00:11:18.745 
回放有可能跟上

00:11:19.680 --> 00:11:21.982 
所以它將時間控制--

00:11:22.449 --> 00:11:26.119 
它將狀態設置成播放
然後現在你看到

00:11:26.186 --> 00:11:28.422 
播放器速率和時基速率都是1

00:11:31.258 --> 00:11:32.092 
你可能會想到

00:11:32.159 --> 00:11:34.027 
有更多一點的細節存在於

00:11:34.094 --> 00:11:36.897 
timeControlStatus
而非播放器速率屬性中

00:11:37.197 --> 00:11:39.499 
記住播放器速率告訴你的是應用

00:11:39.566 --> 00:11:40.701 
所求的回放速率

00:11:40.767 --> 00:11:42.336 
timeControlStatus

00:11:42.402 --> 00:11:43.670 
還考慮到實際發生的事情

00:11:44.071 --> 00:11:45.772 
所以這些東西
你可能要考慮周全

00:11:45.839 --> 00:11:46.807 
當你構建回放UI時

00:11:48.475 --> 00:11:49.776 
假如你想在家中嘗試

00:11:50.210 --> 00:11:52.646 
你可能要知道如何找到
網絡連接調節器

00:11:52.713 --> 00:11:55.516 
這不是我們發明的東西
至少不是我們團隊

00:11:55.949 --> 00:11:59.820 
這是硬件IO工具下載的一部分

00:12:00.320 --> 00:12:03.390 
最簡單的獲取方法是
順着Xcode菜單

00:12:03.457 --> 00:12:04.858 
找到更多開發者工具

00:12:05.459 --> 00:12:07.761 
登陸後
你就會在這裏找到

00:12:09.062 --> 00:12:10.731 
好了 所以

00:12:11.532 --> 00:12:15.669 
如果你使用
2016 SDK或之後的版本

00:12:16.203 --> 00:12:19.006 
你的應用就會
表現出這樣的屬性設置

00:12:19.106 --> 00:12:21.775 
自動將WaitsToMinimizeStalling
設置爲true

00:12:21.842 --> 00:12:23.544 
你可以將那個屬性設成false

00:12:24.311 --> 00:12:25.812 
如果你想回到之前的行爲

00:12:25.913 --> 00:12:27.581 
你這麼做可能會有這幾個原因

00:12:27.881 --> 00:12:33.287 
具體說 如果你想使用
setRate(time atHostTime)的調用

00:12:33.554 --> 00:12:36.290 
來用外部時間軸
同步回放

00:12:36.823 --> 00:12:39.359 
那你必須選擇性退出
做法是自動將

00:12:39.426 --> 00:12:41.662 
WaitsToMinimizeStalling
屬性設置爲false

00:12:41.728 --> 00:12:43.564 
否則 你會遇到友好異常

00:12:44.364 --> 00:12:45.199 
很有幫助的提醒

00:12:46.767 --> 00:12:49.770 
最後 提醒一下
絕對不要使用播放器速率

00:12:49.837 --> 00:12:51.905 
來推斷將來的當前超時

00:12:52.439 --> 00:12:54.908 
如果你想那麼做
那使用項目的時基速率

00:12:54.975 --> 00:12:55.809 
來代替它

00:12:56.043 --> 00:12:57.678 
或使用時基對象中的其他API

00:12:57.744 --> 00:12:58.645 
那是它們的專長

00:12:59.279 --> 00:13:00.781 
好了 這就是緩衝的內容

00:13:01.048 --> 00:13:02.583 
我們前進到循環的話題

00:13:02.983 --> 00:13:03.984 
我問大家一個問題

00:13:04.852 --> 00:13:07.421 
什麼是循環單一項目的最佳方法

00:13:07.955 --> 00:13:09.590 
一個想法是設置監聽器來

00:13:09.656 --> 00:13:11.058 
監聽發出的通知

00:13:11.258 --> 00:13:12.626 
當回放抵達結尾的時候

00:13:12.926 --> 00:13:13.861 
當被調用的時候

00:13:14.261 --> 00:13:16.163 
找回到開頭 然後重新開始

00:13:16.830 --> 00:13:18.899 
這個想法挺不錯的

00:13:19.166 --> 00:13:21.134 
但不幸的是這會導致空白

00:13:21.201 --> 00:13:22.870 
在兩次回放之間
原因有兩個

00:13:23.403 --> 00:13:25.138 
第一個原因是這會有延遲

00:13:25.372 --> 00:13:27.174 
這是由於通知發出

00:13:27.241 --> 00:13:30.444 
並送達到程序的時間
以及第二次播放器請求

00:13:30.511 --> 00:13:31.912 
返回到回放系統的時間

00:13:32.713 --> 00:13:35.749 
第二個更爲顯著的原因是預滾

00:13:35.916 --> 00:13:36.850 
所需的時間

00:13:37.551 --> 00:13:38.452 
你是不可能

00:13:38.519 --> 00:13:40.921 
立刻進行媒體回放的

00:13:40.988 --> 00:13:41.955 
如果沒有一些準備

00:13:42.389 --> 00:13:45.926 
有必要先加載媒體數據並解碼一些數據

00:13:46.126 --> 00:13:47.694 
之後你才能開始播放出來

00:13:48.262 --> 00:13:50.764 
這個先補充回放管道

00:13:50.998 --> 00:13:53.267 
再開始回放的過程叫做預滾

00:13:54.668 --> 00:13:57.171 
所以我們想在這裏做的是

00:13:57.571 --> 00:14:00.140 
將AVFoundation
參與到該計劃中

00:14:00.807 --> 00:14:03.610 
如果AVFoundation
對回放項目B

00:14:03.877 --> 00:14:07.281 
足夠提前獲悉
那這就可以開始預滾

00:14:07.447 --> 00:14:10.450 
然後解碼
在項目A播完前進行

00:14:10.717 --> 00:14:13.187 
所以這就能優化A到B的過渡了

00:14:14.121 --> 00:14:17.991 
如果項目B十分短
那AVFoundation甚至可以開始

00:14:18.058 --> 00:14:19.459 
進行到項目C的過渡

00:14:20.994 --> 00:14:24.598 
實現該目的AVFoundation
工具就是AVQueuePlayer

00:14:25.332 --> 00:14:28.802 
AVQueuePlayer是
AVPlayer的子類 擁有一排的

00:14:28.869 --> 00:14:30.838 
AVPlayer項目 叫做播放隊列

00:14:31.538 --> 00:14:34.575 
當前項目排在列陣的第一位

00:14:36.043 --> 00:14:38.245 
用AVQueuePlayer

00:14:38.312 --> 00:14:39.446 
優化不同項目間的過渡

00:14:39.847 --> 00:14:43.050 
但在循環的情況下
你可以創建多個AVPlayer項目

00:14:43.116 --> 00:14:44.651 
從同樣的AVAsset上面

00:14:45.018 --> 00:14:46.486 
這是另一種優化

00:14:46.820 --> 00:14:48.689 
AVFoundation無需加載

00:14:48.755 --> 00:14:51.124 
並多次暫停媒體文件

00:14:53.627 --> 00:14:56.530 
提醒一下 播放列隊不是播放列表

00:14:57.130 --> 00:14:59.733 
請別加載接下來的10,000個項目

00:14:59.800 --> 00:15:02.369 
你認爲你可能會在播放列隊中播放

00:15:02.436 --> 00:15:03.504 
這並不高效

00:15:03.904 --> 00:15:06.373 
播放列隊的目的是提供關於

00:15:06.440 --> 00:15:08.308 
將要播放項目的信息

00:15:08.375 --> 00:15:11.411 
這樣AVFoundation
可以優化過渡

00:15:13.747 --> 00:15:15.315 
這種設計模式是當你想無限循環

00:15:15.449 --> 00:15:17.150 
單個媒體文件的話

00:15:17.518 --> 00:15:19.953 
要製作少量的
AVPlayer項目

00:15:20.120 --> 00:15:22.189 
然後將它們放在
AVQueuePlayer列隊中

00:15:22.256 --> 00:15:25.058 
並將行動項和屬性設置成提前

00:15:26.560 --> 00:15:28.495 
當回放達到一個項目的結尾時

00:15:29.096 --> 00:15:32.599 
隨着回放前進到下一個
它會從播放列隊中移除

00:15:33.433 --> 00:15:35.402 
當你得到完成過渡的通知時

00:15:35.702 --> 00:15:36.970 
你可將那個播放完的項目

00:15:37.304 --> 00:15:38.872 
將其當前時間設置回開頭

00:15:39.139 --> 00:15:41.608 
然後將其放在播放列隊的最後重新播放

00:15:42.643 --> 00:15:44.278 
我們將這種
模式叫做跑步機

00:15:45.913 --> 00:15:48.081 
而且你可以自己
實施這個跑步機模式

00:15:48.148 --> 00:15:49.149 
使用AVQueuePlayer

00:15:49.216 --> 00:15:50.517 
我們有示例代碼來幫助大家

00:15:51.051 --> 00:15:54.221 
稍微難的一點是
你必須設置鍵值觀察

00:15:54.988 --> 00:15:56.523 
來查看項目何時被移除的

00:15:56.857 --> 00:15:58.225 
然後將其找回到開頭

00:16:00.460 --> 00:16:01.862 
然後又出現在播放列隊最後

00:16:02.963 --> 00:16:04.932 
如你所見 在這個代碼中

00:16:05.065 --> 00:16:07.301 
我們停用了KVO觀察者

00:16:07.701 --> 00:16:08.869 
當我們改變播放列隊時

00:16:09.203 --> 00:16:10.637 
來避免任何遞歸的可能

00:16:11.338 --> 00:16:12.639 
所以很明顯這是可能的

00:16:12.706 --> 00:16:13.974 
只是有一點複製

00:16:14.942 --> 00:16:16.143 
而且我們收到的反饋是

00:16:16.210 --> 00:16:18.712 
如果我們能將其變得更簡單
那就再好不過了

00:16:20.881 --> 00:16:22.983 
我們推出
AVPlayerLooper

00:16:23.116 --> 00:16:24.818 
這會替你實現跑步機模式

00:16:25.219 --> 00:16:27.054 
你給它一個
AVQueuePlayer

00:16:30.624 --> 00:16:33.794 
你給它一個AVQueuePlayer
和一個模板AVPlayerItem

00:16:33.861 --> 00:16:36.463 
然後它構建少量
AVPlayerItem的副本

00:16:36.697 --> 00:16:38.232 
這之後會在播放列隊中循環

00:16:38.298 --> 00:16:39.366 
直到你告訴它停止

00:16:41.668 --> 00:16:43.470 
將AVPlayerLooper採用於

00:16:43.537 --> 00:16:45.873 
符號案例中的代碼就變得更加容易了

00:16:47.307 --> 00:16:48.609 
所以我想給大家演示一下

00:16:49.276 --> 00:16:50.544 
在這裏的iPad上面

00:16:51.011 --> 00:16:52.579 
所以這是一段示例代碼

00:16:52.980 --> 00:16:54.581 
啓動Video Looper

00:16:54.948 --> 00:16:57.217 
我在這裏添加了我自己的一個媒體文件

00:16:57.451 --> 00:16:59.486 
然後我們將用
AVPlayerLooper來播放

00:17:07.928 --> 00:17:08.929 
感覺是不是很柔和？

00:17:11.431 --> 00:17:12.566 
好了 這很明顯在循環

00:17:12.633 --> 00:17:15.234 
代碼如我指出的那樣

00:17:15.301 --> 00:17:16.236 
非常簡單

00:17:16.737 --> 00:17:19.406 
這種工具適合用於 例如

00:17:19.740 --> 00:17:21.074 
如果你有一個tvOS應用

00:17:21.441 --> 00:17:24.310 
而且你想在標題菜單
後面放上循環的背景視頻

00:17:27.114 --> 00:17:28.949 
好了 我們回到幻燈片

00:17:30.150 --> 00:17:33.053 
演示AVPLAYERLOOPER

00:17:34.588 --> 00:17:37.024 
我們講了講如何循環

00:17:37.691 --> 00:17:39.593 
我想花點時間講講循環什麼

00:17:42.930 --> 00:17:45.632 
理想來說 如果你有音頻軌和視頻軌

00:17:45.966 --> 00:17:47.568 
它們的長度應該精確相同

00:17:48.035 --> 00:17:52.306 
爲什麼？如果音頻軌更長 那這意味着

00:17:52.372 --> 00:17:54.174 
在接近結尾的時候 那一段

00:17:54.241 --> 00:17:56.510 
音頻應該播放的時間 視頻卻沒在播放

00:17:57.411 --> 00:17:59.112 
我們有一段空白的視頻

00:17:59.179 --> 00:18:00.480 
所以視頻應該怎麼辦？

00:18:00.547 --> 00:18:01.648 
應該關閉嗎？

00:18:01.748 --> 00:18:03.250 
應該停在一幀上嗎？

00:18:04.151 --> 00:18:06.186 
相反如果視頻軌更長

00:18:06.353 --> 00:18:09.323 
那就會有一段沒有音頻的時間

00:18:09.857 --> 00:18:12.659 
所以當你創建用於循環的媒體資源時

00:18:12.926 --> 00:18:15.529 
要花時間確認軌道時長互相匹配

00:18:15.596 --> 00:18:16.864 
在QuickTime電影文件中

00:18:16.930 --> 00:18:19.099 
軌道時長是由編輯列表所定義的

00:18:20.734 --> 00:18:23.537 
如果用於循環的媒體資源
並非完全處在你的控制之下

00:18:23.604 --> 00:18:24.705 
另一種可能是

00:18:24.771 --> 00:18:28.008 
你可以將AVPlayerItem的
正向回放結束時間設置成

00:18:28.075 --> 00:18:30.177 
最短軌道的長度

00:18:30.644 --> 00:18:33.247 
從而調短另一個軌道
來實現匹配

00:18:36.049 --> 00:18:38.952 
好了 接下來看看我們在

00:18:39.019 --> 00:18:40.287 
回放管道中做的優化

00:18:40.354 --> 00:18:42.589 
這可能會影響到你的應用程序

00:18:43.624 --> 00:18:45.592 
假設我們當前正在播放中

00:18:45.993 --> 00:18:48.462 
然後播放中的軌道列表發生改變

00:18:49.897 --> 00:18:52.799 
例如 我們能更改字幕語言

00:18:53.066 --> 00:18:54.168 
或者音頻語言

00:18:54.601 --> 00:18:56.069 
將音頻從英語換成法語

00:18:56.370 --> 00:18:59.139 
我會將字幕語言從英語換成西班牙語

00:19:00.374 --> 00:19:03.710 
或者我們可以移除正在顯示
視頻的AVPlayerLayer

00:19:05.646 --> 00:19:08.916 
或添加AVPlayerLayer
開始顯示視頻

00:19:11.852 --> 00:19:13.720 
在iOS 9中的所有這些情況裏

00:19:13.954 --> 00:19:16.223 
AVFoundation會暫停回放

00:19:16.423 --> 00:19:19.626 
調整回放管道來匹配啓用的軌道列表

00:19:19.793 --> 00:19:20.961 
然後恢復回放

00:19:21.361 --> 00:19:23.463 
在一些情況中 這甚至會導致視頻

00:19:23.530 --> 00:19:24.831 
回跳到一個關鍵幀上

00:19:25.299 --> 00:19:28.669 
我要說我們收到了有建設性的反饋

00:19:28.735 --> 00:19:30.404 
都來自用戶和開發者

00:19:31.638 --> 00:19:33.407 
所以我很高興地宣佈

00:19:34.608 --> 00:19:38.745 
在iOS 10和
其他2016年的姊妹系統中

00:19:38.946 --> 00:19:41.949 
這些改變不會再導致回放暫停

00:19:42.249 --> 00:19:46.253 
在播放中的AVPlayer上添加或
移除唯一AVPlayerLayer

00:19:46.587 --> 00:19:47.855 
改變字幕語言

00:19:47.921 --> 00:19:50.123 
或改變播放中
AVPlayer的音頻語言

00:19:50.290 --> 00:19:52.392 
或者手動停用或啓用軌道

00:19:54.928 --> 00:19:57.731 
我們認爲這對用戶和
開發者來說是一種提升

00:19:57.798 --> 00:20:00.801 
然而 這顯著地改變了API的行爲

00:20:00.901 --> 00:20:05.405 
所以我請各位在
seed版本中查看一下

00:20:06.006 --> 00:20:08.642 
看看這是否會在
應用中導致任何複雜問題

00:20:08.976 --> 00:20:12.012 
如果你發現了一個問題
像是我們這邊出的錯誤

00:20:12.246 --> 00:20:13.347 
那就請給我們反饋

00:20:13.413 --> 00:20:15.549 
使用Apple錯誤報告系統上報錯誤

00:20:15.849 --> 00:20:17.518 
像往常一樣 當上報錯誤時

00:20:17.784 --> 00:20:19.653 
請給我們所需要的一切信息

00:20:19.720 --> 00:20:21.388 
來讓我們自己再現出那個問題

00:20:25.292 --> 00:20:30.130 
我們的行業正在過渡到更廣的色域上

00:20:30.430 --> 00:20:32.366 
用於數碼攝影和數碼視頻

00:20:34.134 --> 00:20:36.770 
很多iOS開發者從來不需要應對

00:20:36.837 --> 00:20:40.174 
不使用Rec.709
色彩空間標準的視頻

00:20:40.474 --> 00:20:42.609 
因爲那是高清視頻的標準

00:20:42.676 --> 00:20:45.012 
且那也是我們自iPhone 4
開始使用的拍攝標準

00:20:45.646 --> 00:20:47.848 
但是更廣色域的
色彩空間即將來臨

00:20:48.782 --> 00:20:51.485 
你可能已看到了
在最新的iPad Pro上

00:20:51.685 --> 00:20:53.120 
當運行iOS 10時

00:20:54.521 --> 00:20:57.057 
你可以拍攝並顯示照片

00:20:57.291 --> 00:20:58.992 
在P3色彩空間中

00:20:59.726 --> 00:21:03.230 
一些第三方產品也在P3中拍攝視頻

00:21:03.830 --> 00:21:06.967 
所以我想給大家指點一下
你可以應用的API

00:21:07.034 --> 00:21:09.036 
用於你的應用中來做好準備

00:21:09.102 --> 00:21:11.905 
讓你的應用支持廣色域視頻

00:21:13.140 --> 00:21:14.675 
當我首先要給你一些背景知識

00:21:16.243 --> 00:21:18.912 
在媒體文件中色彩空間信息是

00:21:18.979 --> 00:21:20.814 
視頻軌的元數據的一部分

00:21:21.181 --> 00:21:23.984 
在QuickTime電影文件中
它保存於樣本描述中

00:21:24.218 --> 00:21:27.254 
在一些Codec中
它還保存於Codec特定的位置

00:21:27.688 --> 00:21:29.723 
這個信息有三個主體

00:21:30.457 --> 00:21:33.827 
基色 用於明確100%紅色

00:21:33.894 --> 00:21:36.430 
100%綠色和100%藍色是什麼

00:21:36.830 --> 00:21:37.831 
還有白點

00:21:39.032 --> 00:21:40.234 
傳遞特性

00:21:40.734 --> 00:21:42.369 
你可能聽過叫做伽瑪曲線

00:21:42.703 --> 00:21:43.604 
或是傳遞函數

00:21:44.571 --> 00:21:48.509 
這些從像素值到光級來定義映射

00:21:49.276 --> 00:21:52.913 
然後回答那是直線還是曲線的問題

00:21:52.980 --> 00:21:55.048 
這會在黑暗的區域給你更多細節

00:21:55.115 --> 00:21:56.283 
那裏我們的眼睛更敏感

00:21:57.317 --> 00:22:00.454 
然後是YCbCr矩陣 是指座標變換

00:22:00.687 --> 00:22:03.190 
從它們的RGB空間進入到用於

00:22:03.257 --> 00:22:04.825 
高效壓縮的空間

00:22:06.660 --> 00:22:08.295 
所以在這裏我有一些例子

00:22:08.729 --> 00:22:11.098 
若你沒有聽說過Rec.709相當於

00:22:11.164 --> 00:22:13.033 
視頻上面的SIGB

00:22:13.300 --> 00:22:15.302 
其實SIGB是基於Rec.709的

00:22:16.103 --> 00:22:17.437 
廣色域可以通過

00:22:17.804 --> 00:22:20.007 
使用不同組的基色來實現

00:22:20.607 --> 00:22:26.146 
P3基色所指定的100%紅色

00:22:26.213 --> 00:22:28.482 
100%綠色和100%藍色的值

00:22:28.649 --> 00:22:31.318 
要比Rec.709更加鮮豔

00:22:34.454 --> 00:22:35.522 
我還有一點要說

00:22:36.290 --> 00:22:39.359 
在我們的API中 我們一般是通過

00:22:39.860 --> 00:22:41.428 
使用枚舉字符串來表現這些選擇

00:22:41.528 --> 00:22:43.597 
因爲它們更易於打印 顯示以及調試

00:22:44.097 --> 00:22:47.267 
但在媒體文件中
它們是通過數字表達的

00:22:47.734 --> 00:22:51.004 
這些標準標籤數字
是在MPEG規格中定義出的

00:22:51.271 --> 00:22:52.573 
叫做編碼獨立代碼點

00:22:52.940 --> 00:22:54.341 
這聽起來是否有點矛盾？

00:22:54.842 --> 00:22:56.410 
怎麼會是編碼獨立代碼點呢？

00:22:56.476 --> 00:22:58.979 
它會不是那麼的矛盾

00:22:59.613 --> 00:23:01.882 
如果你讀成Codec編碼獨立代碼點

00:23:02.382 --> 00:23:04.785 
這個規則的目的是確保這些標籤數字的

00:23:04.852 --> 00:23:06.153 
任務是以一種協調的方式

00:23:06.220 --> 00:23:08.989 
在所有Codec和文件格式中完成

00:23:09.223 --> 00:23:11.058 
所以對數字的解釋會是相同的

00:23:11.225 --> 00:23:14.494 
在QuickTime Movie
MPEG-4和H264中等

00:23:15.128 --> 00:23:17.531 
好 有了這些背景知識
我們看看一些新的API

00:23:18.398 --> 00:23:21.535 
我們推出了一個新的媒體特性
這會告訴你

00:23:21.602 --> 00:23:24.004 
視頻軌標籤有更廣的基色

00:23:24.071 --> 00:23:25.939 
比Rec.709基色還要廣

00:23:26.473 --> 00:23:28.809 
若你的應用發現這裏有廣色域視頻

00:23:29.243 --> 00:23:30.878 
適合做的是讓你的應用採取措施

00:23:30.944 --> 00:23:33.981 
將其保留下來 所以
這不會壓回到709的色彩空間

00:23:34.882 --> 00:23:36.617 
如果沒有 最好的做法是

00:23:36.717 --> 00:23:38.318 
停留在Rec.709中處理

00:23:39.887 --> 00:23:43.223 
所以你可指定工作色彩空間

00:23:43.290 --> 00:23:46.693 
當你設置AVPlayerItemVideoOutput
或AVAssetReaderOutput時

00:23:47.194 --> 00:23:49.162 
然後你收到的緩衝就被轉化到了

00:23:49.229 --> 00:23:50.330 
那個色彩空間中

00:23:50.864 --> 00:23:53.700 
你還可以指定目標色彩空間

00:23:53.767 --> 00:23:55.435 
當你設置AVAssetWriterInput時

00:23:55.502 --> 00:23:57.638 
這種情況下 你提供的源圖像緩衝

00:23:57.771 --> 00:23:59.406 
就會被轉化到那個色彩空間中

00:23:59.473 --> 00:24:00.307 
在壓縮之前

00:24:02.709 --> 00:24:06.146 
使用AVPlayerItemVideoOutput
或AVAssetReaderOutput

00:24:06.213 --> 00:24:08.282 
如果你不想讓圖像緩衝被轉化到

00:24:08.348 --> 00:24:09.616 
普通色彩空間中

00:24:09.816 --> 00:24:13.420 
那你應該設置
AVVideoAllowWideColorKey爲true

00:24:13.820 --> 00:24:16.023 
然後你會收到在原始色彩空間中的緩衝

00:24:16.323 --> 00:24:19.560 
這是有效保證了無論什麼樣的軟件收到

00:24:19.626 --> 00:24:22.329 
並處理緩衝 無論是我們的還是你的

00:24:22.563 --> 00:24:24.698 
就會檢查並履行那些色彩空間標籤

00:24:26.466 --> 00:24:29.636 
這裏有類似特性用於配置視頻合成

00:24:29.937 --> 00:24:32.306 
首先 你可以指定一個工作色彩空間

00:24:32.372 --> 00:24:33.907 
用於整個視頻合成

00:24:34.775 --> 00:24:36.877 
或者 如果你有自定義的視頻合成器

00:24:37.077 --> 00:24:38.745 
你可以選擇讓其支持廣色域

00:24:39.279 --> 00:24:42.783 
你可以聲明你的自定義
視頻合成器支持廣色域

00:24:42.850 --> 00:24:45.319 
並且會檢查並履行色彩空間的標籤

00:24:45.385 --> 00:24:47.020 
在每個源幀緩衝上

00:24:47.287 --> 00:24:50.090 
通過應用可選的
supportsWideColorSourceFrames

00:24:50.157 --> 00:24:51.458 
屬性和返回真值

00:24:53.927 --> 00:24:54.995 
我給大家提醒一下

00:24:56.396 --> 00:24:58.498 
比如 如果你手動創建圖片緩衝

00:24:58.565 --> 00:24:59.933 
在Metal 使用像素緩衝池

00:25:00.367 --> 00:25:02.402 
然後你應該明確地設置色彩空間標籤

00:25:02.469 --> 00:25:04.638 
在每個緩衝上面
通過調用核心視頻API

00:25:05.138 --> 00:25:06.707 
大多數開發者不需要這樣做

00:25:06.907 --> 00:25:09.843 
在大多數情況下
當你使用支持色彩空間的API時

00:25:09.910 --> 00:25:12.346 
用於源緩衝 這會替你將它們標記上

00:25:12.613 --> 00:25:15.349 
應衆人要求 我將用剩下的時間討論

00:25:15.482 --> 00:25:18.752 
優化回放啓動時間的最佳做法

00:25:18.986 --> 00:25:21.889 
我會首先談談本地文件回放

00:25:21.989 --> 00:25:23.690 
之後我們去講HTTP直播流

00:25:24.591 --> 00:25:26.860 
現在的一些優化方法可能

00:25:26.927 --> 00:25:28.195 
第一眼看上去違背常理

00:25:28.428 --> 00:25:29.897 
它們需要你從

00:25:29.963 --> 00:25:32.332 
AVFoundation角度考慮

00:25:32.799 --> 00:25:35.536 
然後考慮它何時會得到其需要的信息

00:25:35.669 --> 00:25:37.271 
來做你的應用所要求的事情

00:25:38.105 --> 00:25:40.440 
例如 這裏有一段很直接的代碼

00:25:40.574 --> 00:25:42.442 
用於設置本地文件回放

00:25:43.076 --> 00:25:44.478 
我們從文件的URL開始

00:25:44.545 --> 00:25:46.280 
我們創建一AVURLAsset

00:25:46.446 --> 00:25:48.749 
代表存儲那個文件的產品

00:25:49.449 --> 00:25:52.853 
之後創建AVPlayerItem
保持回放的可變狀態

00:25:52.953 --> 00:25:54.888 
用一個AVPlayeritem
保持回放

00:25:55.155 --> 00:25:56.990 
然後我們創建一個
AVPlayerLayer

00:25:57.057 --> 00:25:59.193 
來將視頻回放連接到我們的顯示層次中

00:25:59.760 --> 00:26:02.396 
這個代碼沒問題 但有一點小瑕疵

00:26:02.462 --> 00:26:04.331 
你最初可能沒看出來

00:26:05.065 --> 00:26:07.601 
一旦播放項目設置成播放器的當前項目

00:26:08.068 --> 00:26:10.003 
播放器就會開始設置回放管道

00:26:10.070 --> 00:26:11.338 
它不知道將來的事

00:26:11.405 --> 00:26:12.906 
它不知道你過會將設置

00:26:13.040 --> 00:26:14.675 
AVPlayerLayout

00:26:15.676 --> 00:26:18.278 
所以它設置了僅有音頻的回放

00:26:18.579 --> 00:26:22.282 
當AVPlayerLayer添加時
現在AVFoundation知道

00:26:22.349 --> 00:26:23.851 
這個視頻也需要解碼

00:26:23.917 --> 00:26:25.752 
現在它可以重新配置

00:26:25.953 --> 00:26:27.254 
音頻和視頻的回放

00:26:28.622 --> 00:26:31.491 
如我之前所說

00:26:31.558 --> 00:26:34.461 
我們在今年的iOS版本中做了增強

00:26:35.295 --> 00:26:38.398 
意味着微小的

00:26:38.498 --> 00:26:41.001 
回放列表變更 啓用軌道列表的變更

00:26:41.268 --> 00:26:43.170 
不一定會導致中斷

00:26:43.637 --> 00:26:46.840 
但理想的做法是在一開始就讓

00:26:46.907 --> 00:26:49.877 
AVFoundation
獲取所需信息使第一次就一切正常

00:26:49.943 --> 00:26:51.445 
所以我將稍微改變這個代碼

00:26:51.512 --> 00:26:53.780 
看好了AVPlayerItem
到哪裏連接

00:26:54.147 --> 00:26:55.082 
AVPlayer

00:26:57.351 --> 00:27:00.120 
所以現在播放器
創建好了 沒有當前項目

00:27:00.187 --> 00:27:02.689 
這意味着現在
沒有理由構建回放管道

00:27:03.257 --> 00:27:05.526 
在你添加AVPlayerLayer
時不會變

00:27:06.293 --> 00:27:07.694 
不會構建回放管道

00:27:07.794 --> 00:27:09.596 
直到播放項目成爲了當前項目

00:27:09.796 --> 00:27:12.165 
而到那時候 播放器會知道其需要什麼

00:27:12.232 --> 00:27:14.034 
來讓第一次就不出問題

00:27:14.868 --> 00:27:16.003 
我們可以概括一下

00:27:16.069 --> 00:27:17.905 
先創建AVPlayerLayer

00:27:17.971 --> 00:27:20.908 
抱歉 首先創建AVPlayer
和AVPlayerItem對象

00:27:20.974 --> 00:27:22.976 
然後設置你在上面需要的屬性

00:27:23.043 --> 00:27:26.446 
包括將AVPlayer連接到
AVPlayerLayer上

00:27:26.513 --> 00:27:29.349 
或將AVPlayerItem連接到
AVPlayerItemVideoOutput上

00:27:30.784 --> 00:27:31.785 
這可能似乎有點瘋狂

00:27:31.852 --> 00:27:34.021 
但如果你只想要馬上開始回放

00:27:34.087 --> 00:27:37.057 
你可以先告訴播放器進行播放
之後你再將播放項目提供給它

00:27:37.157 --> 00:27:38.192 
爲什麼要這樣做？

00:27:38.592 --> 00:27:40.928 
如果你反過來做 播放器一開始會認爲

00:27:40.994 --> 00:27:43.764 
你想要顯示視頻開頭的靜止幀

00:27:43.931 --> 00:27:45.199 
它可能在這上面浪費時間

00:27:45.265 --> 00:27:48.368 
之後再得到你是真的只想要回放的消息

00:27:48.468 --> 00:27:51.872 
從實際目標開始可能節省幾毫秒

00:27:52.973 --> 00:27:54.474 
我們來談談HLS

00:27:54.875 --> 00:27:57.744 
我們嘗試用HLS來優化
的時間段會更加的長

00:27:57.811 --> 00:28:01.548 
因爲它們受網絡IO的控制
這比本地文件存儲要慢得多

00:28:01.815 --> 00:28:05.219 
所以優化的潛在好處會更加顯而易見

00:28:05.652 --> 00:28:07.621 
網絡IO能分解成四個部分

00:28:07.688 --> 00:28:11.158 
檢索主播放列表 那是你交給
AVURLAsset的URL

00:28:11.225 --> 00:28:13.493 
若內容受到 FairPlay
Streaming的保護

00:28:13.560 --> 00:28:17.431 
檢索內容密鑰
檢索選中的變體播放列表

00:28:17.497 --> 00:28:20.634 
用於視頻和音頻的合適比特率和格式

00:28:21.001 --> 00:28:22.569 
然後檢索一些媒體分段

00:28:22.769 --> 00:28:23.971 
在播放列表中引用過的

00:28:24.238 --> 00:28:27.074 
現媒體分段的實際數據傳輸量是最多的

00:28:27.207 --> 00:28:29.710 
但在網絡IO中
我們要考慮往返延遲

00:28:30.511 --> 00:28:32.079 
其中一些階段是序列化的

00:28:32.613 --> 00:28:35.215 
你無法從播放列表下載內容

00:28:35.582 --> 00:28:37.251 
直到你得到了播放列表

00:28:38.819 --> 00:28:41.054 
所以要思索的是

00:28:41.421 --> 00:28:44.324 
我們能不能在用戶
選擇播放之前做這些事？

00:28:46.527 --> 00:28:47.861 
例如 可能在你的應用中

00:28:48.095 --> 00:28:50.664 
當內容先被選擇時 顯示標題卡片

00:28:51.265 --> 00:28:53.867 
然後這會讓用戶表明
這個是不是我想播放的內容？

00:28:53.934 --> 00:28:55.435 
或我是否想閱讀一些關於它的信息

00:28:55.969 --> 00:28:59.373 
所以問題是我們能不能猜測性地

00:28:59.439 --> 00:29:00.941 
做少量的網絡IO

00:29:01.842 --> 00:29:04.678 
當用戶識別出他們可能想要播放的內容

00:29:04.745 --> 00:29:05.579 
在確認之前？

00:29:06.713 --> 00:29:09.917 
AVURLAsset是一種懶API

00:29:10.184 --> 00:29:11.885 
它不會開始加載或暫停任何數據

00:29:11.952 --> 00:29:12.953 
直到有人向它要求

00:29:13.520 --> 00:29:15.989 
爲了觸發從主播放列表進行數據加載

00:29:16.056 --> 00:29:18.559 
我們需要請求它
加載一個會從其中衍生出的值

00:29:18.625 --> 00:29:22.196 
像是時長或是可用的媒體特性

00:29:22.262 --> 00:29:23.363 
外加媒體選擇選項

00:29:23.764 --> 00:29:24.932 
時長易於輸入

00:29:25.699 --> 00:29:27.601 
你不需要提供完成處理程序 除非

00:29:27.734 --> 00:29:29.303 
你真的要用那個值來做某些事情

00:29:31.138 --> 00:29:33.440 
談到播放列表 它們易於壓縮

00:29:33.507 --> 00:29:36.210 
我們多年支持使用gzip來壓縮它們

00:29:36.610 --> 00:29:37.611 
所以一定要這樣做

00:29:38.045 --> 00:29:39.880 
這可能只是配置你服務器的事

00:29:41.448 --> 00:29:43.717 
如果你的內容受到
FairPlay Streaming的保護

00:29:43.784 --> 00:29:44.785 
那這裏還涉及一個

00:29:44.852 --> 00:29:47.120 
與你的服務器協商內容密鑰的往返過程

00:29:47.454 --> 00:29:48.755 
且你可以將其更早地觸發

00:29:48.956 --> 00:29:51.725 
通過設置
asset.resourceLoader的

00:29:51.959 --> 00:29:54.127 
preloadsEligibleContentKeys
屬性爲true

00:29:54.194 --> 00:29:56.196 
爲了起作用 主播放列表必須包含

00:29:56.263 --> 00:29:57.497 
會話密鑰聲明

00:29:59.032 --> 00:30:00.100 
所以現在情況如何？

00:30:00.300 --> 00:30:01.969 
有了這些方法 我們可以開始——

00:30:02.302 --> 00:30:05.172 
它們能將主播放列表
和內容密鑰下載下來

00:30:05.472 --> 00:30:06.673 
即使我們還在標題卡上

00:30:06.740 --> 00:30:07.574 
這非常炫酷

00:30:08.041 --> 00:30:10.444 
變體播放列表和數據分段

00:30:10.644 --> 00:30:12.145 
還是會在我們點擊播放後加載

00:30:12.613 --> 00:30:13.847 
所以你可能問自己

00:30:14.047 --> 00:30:15.849 
我們能讓這種方法更進一步嗎？

00:30:17.150 --> 00:30:19.319 
在2016年的新API中有一個叫做

00:30:19.386 --> 00:30:21.355 
preferredForwardBufferDuration

00:30:22.189 --> 00:30:23.991 
設置成低的時長 比如5秒

00:30:24.124 --> 00:30:27.027 
會讓AVFoundation緩衝出
其認爲你需要的最少內容量

00:30:27.094 --> 00:30:27.961 
來開始播放

00:30:28.629 --> 00:30:31.532 
不過一旦回放開始將覆蓋設置回0

00:30:31.698 --> 00:30:34.535 
來讓正常緩衝算法重新發揮作用

00:30:37.204 --> 00:30:38.672 
這是一個視頻方差的列表

00:30:39.006 --> 00:30:40.340 
可能會出現在主播放列表中

00:30:40.807 --> 00:30:42.643 
在尺寸和比特率上各有不同

00:30:43.143 --> 00:30:46.079 
對於配有快速連接和
大電視的Apple TV來說

00:30:46.146 --> 00:30:47.848 
1080p的變體
可能會是理想

00:30:48.515 --> 00:30:49.850 
對於iPhone SE

00:30:50.884 --> 00:30:52.653 
即使擁有超快的Wi-Fi連接

00:30:52.853 --> 00:30:54.755 
720p變體會是最佳選擇

00:30:54.955 --> 00:30:57.591 
這已經比iPhone SE的
屏幕分辨率更大了

00:30:57.824 --> 00:30:59.760 
所以選擇更高的不會提升任何品質

00:31:00.627 --> 00:31:03.197 
在巨大的iPad Pro上面
有很多的像素

00:31:03.430 --> 00:31:05.933 
所以我們可以選擇
大的變體來全屏顯示

00:31:06.266 --> 00:31:07.768 
但如果我們在畫中畫中播放

00:31:07.835 --> 00:31:09.603 
我們不再需要那麼高的分辨率

00:31:10.070 --> 00:31:13.674 
而且更低的比特率變體
可以降低緩存的大小

00:31:13.874 --> 00:31:16.176 
然後幫助我們留出更多
儲存空間用於其他應用

00:31:17.277 --> 00:31:19.513 
如果網絡連接在所有設備上都很慢

00:31:19.746 --> 00:31:20.914 
那這就會成爲限制因素

00:31:21.381 --> 00:31:23.483 
這意味着這AVFoundation

00:31:23.550 --> 00:31:25.519 
需要考慮到顯示尺寸

00:31:25.752 --> 00:31:27.821 
以及網絡比特率 當選擇變體的時候

00:31:28.822 --> 00:31:31.792 
AVFoundation使用屏幕上
AVPlayerLayer的大小

00:31:31.859 --> 00:31:32.893 
來評估尺寸

00:31:33.360 --> 00:31:36.129 
所以將AVPlayerLayer
設置成正確的大小

00:31:36.196 --> 00:31:38.398 
然後儘早連接到AVPlayer上

00:31:38.966 --> 00:31:40.467 
這可以隱藏在其他UI後面

00:31:40.534 --> 00:31:41.869 
如果你還沒準備好顯示視頻

00:31:42.769 --> 00:31:45.272 
在Retina屏幕的iOS設備上
目前有必要將

00:31:45.339 --> 00:31:47.207 
contentsScale
設置成手動

00:31:48.909 --> 00:31:51.812 
對於比特率
AVFoundation在

00:31:51.879 --> 00:31:53.547 
回放第一個開頭時會陷於

00:31:53.981 --> 00:31:55.415 
難分先後的情況中

00:31:56.049 --> 00:31:57.351 
它必須選擇一些變體

00:31:57.885 --> 00:31:59.987 
但不知道會得到什麼樣的比特率

00:32:00.921 --> 00:32:02.623 
一旦開始下載分段

00:32:02.723 --> 00:32:04.791 
它可以使用來自那些下載的統計數據

00:32:04.858 --> 00:32:06.059 
來調整變體的選擇

00:32:06.593 --> 00:32:07.828 
但對於第一個變體

00:32:08.061 --> 00:32:09.530 
它沒有收到任何統計數據

00:32:10.397 --> 00:32:12.599 
所以AVFoundation
的基礎算法就是

00:32:12.666 --> 00:32:15.669 
在主播放列表中
選取第一個可適用的變體

00:32:16.036 --> 00:32:17.371 
如果那是低比特率的選項

00:32:17.604 --> 00:32:19.339 
用戶開始會看到模糊的內容

00:32:19.706 --> 00:32:22.643 
但AVFoundation會
馬上判斷出實際的網絡比特率是什麼

00:32:22.709 --> 00:32:24.111 
然後切換成合適的變體

00:32:25.245 --> 00:32:27.648 
但問題是如果你想嘗試

00:32:27.714 --> 00:32:29.416 
提升那個最初選擇呢？

00:32:29.950 --> 00:32:33.353 
記住 你要做出權衡

00:32:33.420 --> 00:32:35.589 
在最初品質和啓動時間兩者之間

00:32:36.223 --> 00:32:39.259 
更高比特率的第一分段需更長時間下載

00:32:39.626 --> 00:32:41.195 
這就意味着開始的時間會更長

00:32:41.695 --> 00:32:45.465 
你可能會決定最好是
從更低比特率的變體開始

00:32:46.099 --> 00:32:47.234 
爲了更快開始播放

00:32:48.035 --> 00:32:50.037 
做出權衡的一種方法是弄清楚

00:32:50.103 --> 00:32:52.472 
你想看到的最低可接受的品質等級

00:32:52.739 --> 00:32:55.242 
在特定大小的屏幕上 然後從那裏開始

00:32:55.876 --> 00:32:58.345 
之後AVFoundation
切換到更高品質上

00:32:58.645 --> 00:33:01.181 
在回放開始之後 只要網絡條件允許

00:33:02.249 --> 00:33:04.918 
可能你知道AVFoundation
不知道的一件事

00:33:05.419 --> 00:33:07.955 
可能你的應用剛播放了不同部分的內容

00:33:08.555 --> 00:33:10.924 
然後也許你可以使用那個回放訪問日誌

00:33:11.258 --> 00:33:13.060 
來更好地猜測下一個

00:33:13.126 --> 00:33:14.761 
回放站會得到的比特率

00:33:16.630 --> 00:33:18.298 
所以我們假設你得出了一個結論

00:33:18.632 --> 00:33:21.335 
基於啓動品質和最近比特率統計數據

00:33:21.768 --> 00:33:23.737 
然後你要決定選擇

00:33:23.804 --> 00:33:25.472 
你想以哪一個變體開始

00:33:25.706 --> 00:33:28.308 
如何將那個選擇
導入AVFoundation中？

00:33:29.176 --> 00:33:30.711 
這裏使用了兩種方法

00:33:31.178 --> 00:33:32.045 
這是第一種方法

00:33:32.646 --> 00:33:35.115 
在服務器上
給變體排序

00:33:35.282 --> 00:33:36.483 
從最高到最低

00:33:38.919 --> 00:33:39.753 
就像這樣

00:33:40.053 --> 00:33:41.321 
然後在你的應用裏

00:33:41.722 --> 00:33:45.425 
你需要設置
playerItem.preferredPeakBitRate

00:33:46.059 --> 00:33:47.194 
爲你猜測的比特率

00:33:48.195 --> 00:33:50.464 
這樣會使更高的比特率變體

00:33:50.697 --> 00:33:51.832 
從初始選擇中淘汰掉

00:33:52.499 --> 00:33:53.800 
回放開始之後不久

00:33:54.034 --> 00:33:56.370 
你應該將那個控制重置爲0

00:33:56.703 --> 00:33:59.706 
這能讓AVFoundation
提升到更高的比特率變體上

00:33:59.773 --> 00:34:00.641 
只要網絡有提升

00:34:02.676 --> 00:34:03.710 
第二個方法

00:34:03.977 --> 00:34:06.547 
是在你的應用裏動態改寫主播放列表

00:34:06.947 --> 00:34:09.016 
然後把你的優先選擇移動到列表頂部

00:34:10.150 --> 00:34:14.588 
爲了做到這一點
在AVURLAsset中使用自定義URL方案

00:34:15.722 --> 00:34:19.793 
然後應用AVasset
資源加載器委託協議

00:34:20.226 --> 00:34:23.130 
這樣你可以提供改寫的播放列表

00:34:23.197 --> 00:34:26.065 
來回應自定義URL方案的加載請求

00:34:27.701 --> 00:34:29.870 
我還想要提醒一下你要分析你的代碼

00:34:30.070 --> 00:34:33.005 
在你調用AVFoundation前
看看是否出現任何延遲

00:34:33.072 --> 00:34:36.643 
特別的是 你不需等待
LikelyToKeepUp

00:34:36.710 --> 00:34:39.179 
在設置播放器速率之前
成爲true

00:34:39.545 --> 00:34:43.083 
你現在不需要
實際上 對於HLS從來不需要

00:34:44.184 --> 00:34:46.652 
確保你將AVPlayer
和AVPlayerItem

00:34:46.719 --> 00:34:48.021 
從之前的回放會話中釋放出來

00:34:48.288 --> 00:34:50.858 
這樣它們不會在後臺浪費寬帶

00:34:50.924 --> 00:34:53.793 
你可以使用Instruments中的
Allocations Instrument

00:34:53.860 --> 00:34:57.264 
來查看AVPlayer和
AVPlayerItem對象的壽命

00:34:58.065 --> 00:35:00.501 
如果你有應用在做其他網絡活動

00:35:00.567 --> 00:35:03.504 
考慮一下在網絡回放時是否該將其暫停

00:35:03.570 --> 00:35:07.808 
這樣用戶可充分利用可用寬帶進行回放

00:35:09.576 --> 00:35:11.879 
好了 總之

00:35:13.213 --> 00:35:15.382 
自動等待會將卡頓減到最少

00:35:15.816 --> 00:35:17.384 
自動播放 自動等待

00:35:18.318 --> 00:35:19.553 
這默認設置爲true

00:35:19.620 --> 00:35:22.789 
如果你的應用使用今年或之後的SDK

00:35:23.357 --> 00:35:25.392 
它提供了統一的緩衝規則

00:35:25.559 --> 00:35:28.362 
用於漸進式下載和HLS回放

00:35:29.963 --> 00:35:32.766 
我們推出一個新的API
叫做AVPlayerLooper

00:35:33.233 --> 00:35:36.970 
使用跑步機模式簡化單一項目循環回放

00:35:38.739 --> 00:35:41.742 
在回放期間更改啓用的軌道組

00:35:41.808 --> 00:35:44.077 
不會總是引起短暫停頓

00:35:45.312 --> 00:35:47.247 
我們看了看
AVFoundation API

00:35:47.314 --> 00:35:50.184 
你可以用它來讓你的應用
爲廣色域視頻做好準備

00:35:51.652 --> 00:35:54.421 
最後 我們談論了優化回放啓動

00:35:54.488 --> 00:35:56.590 
用於本地文件和HLS

00:35:57.124 --> 00:36:00.360 
總之 避免不必要的工作

00:36:01.028 --> 00:36:03.197 
對於你需要做的工作 試着早些去做

00:36:04.598 --> 00:36:07.601 
在這個URL上我們有與
這個會議相關的更多信息

00:36:07.668 --> 00:36:09.636 
包括我們展示的示例代碼

00:36:10.637 --> 00:36:13.507 
我們有一些相關會話你可能會想補看

00:36:13.574 --> 00:36:16.076 
可以現場看或者在網上觀看

00:36:16.310 --> 00:36:19.479 
最下面的那個是在應用裏
只能點播觀看的

00:36:20.080 --> 00:36:22.082 
謝謝關注 倍感榮幸

00:36:22.216 --> 00:36:23.450 
希望大家度過愉快的一週