00:00:19.319 --> 00:00:24.124 
安全的新特性

00:00:24.324 --> 00:00:25.259 
下午好！

00:00:27.628 --> 00:00:28.862 
歡迎大家

00:00:28.929 --> 00:00:32.098 
感謝各位前來聽
安全的新特性

00:00:32.399 --> 00:00:36.637 
我叫Lucia Ballard
我管理Apple的安全傳輸團隊

00:00:36.970 --> 00:00:38.739 
與我的同事Simon一起

00:00:38.805 --> 00:00:42.943 
我們將向大家講講我們
一直從事於的大量新內容

00:00:43.043 --> 00:00:45.812 
來幫助你爲客戶提升安全

00:00:46.246 --> 00:00:49.416 
所以 我希望在座的很多人
之前已經聽過Evone的演講

00:00:49.616 --> 00:00:52.719 
那個演講非常好地概述了
我們這麼做的原因和內容

00:00:53.020 --> 00:00:56.190 
而且是我們系統安全
的根本性支柱

00:00:56.623 --> 00:00:58.859 
這裏我們會深入到
更多的詳細信息

00:01:00.360 --> 00:01:01.828 
所以內容會有這些

00:01:04.998 --> 00:01:09.269 
首先 我們會談談iOS中
關於網絡安全的一些變更

00:01:10.938 --> 00:01:14.508 
之後我們會討論幾個
對我們加密API的更新

00:01:16.009 --> 00:01:19.580 
然後Simon會談談
macOS上的平臺安全

00:01:21.915 --> 00:01:24.017 
所以 直接進入網絡安全

00:01:24.418 --> 00:01:26.553 
如果你用手機像我一樣頻繁

00:01:26.787 --> 00:01:29.590 
你就會知道手機
積累了數量驚人的信息

00:01:29.656 --> 00:01:31.158 
關於你的私人生活

00:01:31.225 --> 00:01:33.093 
而且很多是通過網絡傳遞的

00:01:33.160 --> 00:01:37.030 
無論是你在閱讀的文章
或是給朋友發送的消息

00:01:37.898 --> 00:01:41.835 
所有這些點點滴滴的信息
即使從單個看起來無關緊要

00:01:41.902 --> 00:01:45.405 
但累積起來 可以
非常驚人地描述出這個人

00:01:45.672 --> 00:01:47.341 
所以在Apple
我們有理由認爲

00:01:47.741 --> 00:01:51.311 
所有這些信息都
應該默認得到保護

00:01:52.546 --> 00:01:55.516 
我們認爲HTTPS
是新的HTTP

00:01:55.716 --> 00:01:58.385 
所以對於每個
通過網絡加載的資源

00:01:58.652 --> 00:02:02.256 
你應該爲你的用戶
提供機密性和數據完整性

00:02:04.825 --> 00:02:09.062 
另一個關鍵點是
並非每個HTTPS都是平等的

00:02:10.264 --> 00:02:15.335 
HTTPS基於SSL
或按現代的說法是TLS

00:02:15.969 --> 00:02:20.440 
並非這個協議的所有版本
都會提供足夠的安全保護

00:02:20.674 --> 00:02:23.110 
給你的用戶來抵抗攻擊

00:02:24.678 --> 00:02:26.313 
所以基於這些原則

00:02:26.780 --> 00:02:29.683 
去年我們推出了
App Transport Security

00:02:30.517 --> 00:02:31.718 
App Transport Security

00:02:33.153 --> 00:02:37.891 
指的是你做的所有加載
使用NSURLSession

00:02:38.025 --> 00:02:41.228 
或甚至是更舊的
NSURLConnection API

00:02:41.562 --> 00:02:46.633 
你需要使用最頂級
牢靠的TLS連接

00:02:47.568 --> 00:02:52.272 
首先 這意味着TLS版本1.2
該版本推出有一段時間了

00:02:52.673 --> 00:02:55.542 
但只有該版本能夠完全抵抗

00:02:55.642 --> 00:02:59.580 
我們所知的一切漏洞
像是BEAST攻擊

00:02:59.646 --> 00:03:02.883 
或者POODLE攻擊
或其他名字可怕的漏洞攻擊

00:03:04.852 --> 00:03:07.221 
這也意味着你必須
使用強大的加密方法

00:03:07.554 --> 00:03:11.091 
像是AES-128或更強大的密碼

00:03:11.491 --> 00:03:14.094 
以及有SHA-2簽名的證書

00:03:14.294 --> 00:03:17.297 
因爲有SHA-1簽名的證書
很容易受到攻擊

00:03:19.299 --> 00:03:21.401 
最後 這還意味着正向保密

00:03:21.835 --> 00:03:25.372 
這種方法可以在服務器
和客戶端之間交換密鑰

00:03:25.606 --> 00:03:30.744 
這會帶來十分驚人的屬性
意味着哪怕將來那個證書...

00:03:31.144 --> 00:03:33.113 
那個服務器證書被盜取了

00:03:33.514 --> 00:03:35.349 
你無法顯示出來

00:03:35.616 --> 00:03:38.185 
過去發生的任何通信內容

00:03:39.319 --> 00:03:41.088 
所以把這些都結合在一起

00:03:41.288 --> 00:03:43.924 
我們認爲 你就有了
一個安全的連接

00:03:43.991 --> 00:03:45.893 
可以保護客戶的數據

00:03:47.294 --> 00:03:50.597 
現在 我們知道
這需要一段時間來趕上

00:03:50.664 --> 00:03:54.168 
App Transport Security
的步伐 所以我們還推出了特例

00:03:54.501 --> 00:03:55.903 
你可以全局關閉

00:03:56.203 --> 00:03:59.072 
或你可以爲
特定域名設置特例

00:03:59.239 --> 00:04:01.775 
你知道那個域名
無法快速轉成TLS

00:04:02.976 --> 00:04:06.480 
現在我想知道在座的
有多少人在思考 “沒錯

00:04:06.580 --> 00:04:08.315 
我去年設置了那個特例

00:04:08.682 --> 00:04:13.220 
之後就沒再考慮了”
好吧 現在是重新考慮的時候了

00:04:14.288 --> 00:04:16.890 
因爲今年
我們會開始在

00:04:16.957 --> 00:04:19.593 
App Store上
施行App Transport Security

00:04:21.195 --> 00:04:23.664 
這會在2016年底開始生效

00:04:24.865 --> 00:04:26.934 
這意味着對於大多數特例

00:04:27.334 --> 00:04:29.770 
你需要提供正當的理由

00:04:30.204 --> 00:04:31.638 
所以 對於所有這些特例

00:04:31.705 --> 00:04:34.508 
真正關閉了
App Transport Security

00:04:34.575 --> 00:04:38.212 
或其關鍵屬性
像是使用TLS 1.2

00:04:38.412 --> 00:04:42.850 
你首先需要說明
你要使用該特例的理由

00:04:43.617 --> 00:04:45.886 
對於其他特例
像是正向保密

00:04:45.953 --> 00:04:49.489 
我們意識到
對它們的支持並非完全通用

00:04:49.656 --> 00:04:52.659 
所以目前會
自動授予這些特例

00:04:52.726 --> 00:04:54.428 
不需要任何理由

00:04:56.897 --> 00:05:00.200 
例如 如果你在使用
一個夥伴服務器

00:05:00.267 --> 00:05:04.037 
而且你無法控制
他們提供的加密套件

00:05:04.538 --> 00:05:07.808 
我們能夠讓你
繼續和那個服務器對話

00:05:13.046 --> 00:05:17.117 
我們還添加了一些
新的特例來使其易於採用

00:05:18.352 --> 00:05:20.988 
例如 如果你在使用
Streaming Media

00:05:21.154 --> 00:05:23.724 
而且那個媒體文件
已經批量加密了

00:05:24.224 --> 00:05:27.294 
我們可以能夠通過
AV Foundation提供特例

00:05:27.361 --> 00:05:30.063 
讓你不需連接TLS
就能加載那個媒體文件

00:05:30.464 --> 00:05:32.999 
我想說清楚
我們還是認爲正確的做法

00:05:33.200 --> 00:05:35.102 
是將TLS用於一切上面

00:05:35.435 --> 00:05:38.839 
但有些情況下
我們可以提供特例

00:05:39.072 --> 00:05:40.807 
來幫助你更順利地過渡

00:05:43.010 --> 00:05:45.312 
我們還提供
網頁內容特例

00:05:45.746 --> 00:05:49.683 
這裏有時候你的應用需要
加載網頁上的任意內容

00:05:49.750 --> 00:05:53.420 
當然 你無法保證
那是使用HTTPS的

00:05:53.987 --> 00:05:56.723 
所以如果你用
WKWebView

00:05:57.124 --> 00:06:00.561 
那你可以將這個密鑰
設置在應用的Info.plist裏面

00:06:01.261 --> 00:06:05.866 
NSAllowsArbitraryLoads
inWebContentKey

00:06:06.433 --> 00:06:08.702 
之後所有的這些
加載都會免去

00:06:08.769 --> 00:06:10.971 
App Transport Security要求

00:06:11.171 --> 00:06:12.906 
但你應用所做的其他事

00:06:13.040 --> 00:06:15.843 
像是和你自己的服務器對話
這還是會得到保護的

00:06:19.913 --> 00:06:21.982 
所以這是
App Transport Security

00:06:23.183 --> 00:06:25.919 
但我們還在整個系統
上爲TLS做變更

00:06:26.720 --> 00:06:30.123 
因爲加密套件不斷進化

00:06:30.190 --> 00:06:34.127 
與抵禦攻擊相比 發起
攻擊的能力不斷變得越加高效

00:06:34.728 --> 00:06:37.598 
所以無論你的ATS設置是什麼

00:06:38.065 --> 00:06:42.870 
我們現在爲所有使用我們
網絡API的人默認禁用了RC4

00:06:45.005 --> 00:06:48.242 
我們還在Secure Transport
中禁用了SSLv3

00:06:48.342 --> 00:06:51.211 
所以即使你下入到
我們的底層API

00:06:51.278 --> 00:06:53.347 
你還是無法使用SSLv3

00:06:54.214 --> 00:06:57.017 
研究已經遠遠超越
這兩項技術了

00:06:57.084 --> 00:07:00.687 
我們不認爲它們能爲我們的
用戶提供有效的安全

00:07:03.490 --> 00:07:04.825 
所以被禁用了

00:07:05.359 --> 00:07:07.661 
其他的算法也開始過時了

00:07:07.728 --> 00:07:13.233 
特別的 SHA-1變得
越來越容易受到攻擊

00:07:13.367 --> 00:07:14.568 
3DES也是

00:07:15.235 --> 00:07:18.839 
所以 如果你知道
你依賴於這些算法

00:07:20.107 --> 00:07:21.475 
現在該放棄它們了

00:07:22.242 --> 00:07:25.145 
而且我發現在場的
很多人是應用開發者

00:07:25.245 --> 00:07:27.414 
而且不負責自己的後端

00:07:27.648 --> 00:07:29.183 
所以你需要聯繫

00:07:29.249 --> 00:07:32.319 
你公司或其他
負責託管後端的那些人

00:07:32.386 --> 00:07:34.655 
來確保他們放棄

00:07:34.922 --> 00:07:38.458 
對這些老舊算法的依賴
因爲這些算法要被棄用了

00:07:39.259 --> 00:07:42.729 
現在非常適合你去
檢查加載內容的狀態

00:07:42.796 --> 00:07:47.267 
使用HTTPS 並且確保你能
使用App Transport Security

00:07:47.801 --> 00:07:49.803 
然後你就能快速
通過應用審覈了

00:07:53.240 --> 00:07:55.275 
所以這就是
App Transport Security

00:07:55.976 --> 00:07:58.779 
確保一切都是用
牢靠的TLS進行加載的

00:07:58.979 --> 00:08:01.381 
不過牢靠的TLS是不夠的

00:08:02.850 --> 00:08:08.322 
你還需要確保你用來驗證
TLS連接的證書

00:08:08.555 --> 00:08:10.724 
能表示正確的服務器

00:08:11.625 --> 00:08:14.061 
所以我想談談幾個不同的技術

00:08:14.361 --> 00:08:18.198 
我們今天使用它們
來幫助你確保你是真正

00:08:18.365 --> 00:08:20.634 
連接到正確的服務器上

00:08:20.801 --> 00:08:23.370 
當你在建立這些
安全通信的時候

00:08:25.606 --> 00:08:26.707 
所以首先我們回來

00:08:26.840 --> 00:08:29.409 
來稍微談談當今
證書的工作原理

00:08:32.746 --> 00:08:34.548  
所以如果你要連接一個服務器

00:08:34.615 --> 00:08:38.719  
那個服務器一定要有一個
由證書權威機構發放的證書

00:08:38.784 --> 00:08:40.621  
那個權威機構會驗證主機名

00:08:40.687 --> 00:08:43.957  
然後說 “沒錯 挺好的
你確實是example.com

00:08:44.024 --> 00:08:45.592  
這是你的密碼證明”

00:08:46.693 --> 00:08:49.396  
當你連接的時候
服務器會發來那個證書

00:08:52.999 --> 00:08:56.236 
但這不總是完美的機制

00:08:57.337 --> 00:09:01.575 
如果有攻擊者設法
得到了你主機名的證書

00:09:02.209 --> 00:09:04.178 
那他們就能提供那個證書

00:09:04.244 --> 00:09:06.780  
而客戶端無法分辨出

00:09:06.847 --> 00:09:08.849  
攻擊者的服務器
和你自己的服務器

00:09:09.516 --> 00:09:12.352  
如果證書權威機構
出錯的話 這就會發生

00:09:12.419 --> 00:09:13.954  
或更糟的情況

00:09:14.021 --> 00:09:16.256  
這個證書權威機構被入侵了

00:09:16.390 --> 00:09:18.959  
有其他人使用他們的
私人密鑰來進行簽名

00:09:21.728 --> 00:09:24.565 
所以今天我很自豪地宣佈
我們將加入到

00:09:24.698 --> 00:09:26.333 
證書透明度的工作中去

00:09:27.201 --> 00:09:29.770 
證書透明度是一種技術

00:09:29.837 --> 00:09:33.674 
使用了已發佈證書的
公開可驗證日誌

00:09:34.441 --> 00:09:37.277 
這些日誌從各種源中收集證書

00:09:37.344 --> 00:09:39.980 
所以有很多
證書權威機構參與進來

00:09:40.047 --> 00:09:42.015 
但事實上
任何人都可以提交日誌

00:09:43.717 --> 00:09:46.954 
之後 這些日誌會發布密碼證明

00:09:47.087 --> 00:09:50.457 
表明這個證書已被記錄
然後客戶端可以檢查那個證明

00:09:50.724 --> 00:09:52.459 
這裏的做法有很多

00:09:52.593 --> 00:09:54.695 
證明可以嵌入到證書中

00:09:54.761 --> 00:09:57.764 
或可以在TLS握手中交出

00:09:58.432 --> 00:10:02.402 
或可以通過OCSP裝訂傳輸
這一點我過會再細說

00:10:04.638 --> 00:10:07.040 
所以這是其工作原理的簡單概述

00:10:09.076 --> 00:10:11.311 
首先 證書權威機構

00:10:12.679 --> 00:10:15.182  
不僅向服務器發行證書

00:10:15.482 --> 00:10:19.419  
還將證書發送到日誌那裏
然後添加到公開日誌上

00:10:20.721 --> 00:10:24.558  
之後日誌會發送一個有簽名的證明
表明這個證書已被包括進去

00:10:25.325 --> 00:10:28.829  
然後服務器將它和原始證書一起

00:10:29.096 --> 00:10:30.330  
交給客戶端

00:10:30.831 --> 00:10:33.100  
這意味着你可以
一同驗證這一對

00:10:36.069 --> 00:10:39.873  
所以證書透明度
使發起攻擊變的更加困難

00:10:41.608 --> 00:10:43.510  
基本上這讓攻擊者身處困境

00:10:43.710 --> 00:10:48.315  
如果攻擊者可以從未參與的
權威機構那裏得到一個證書

00:10:48.916 --> 00:10:51.885  
他們無法得到那個密碼證明

00:10:52.119 --> 00:10:54.588  
因爲那個日誌中包括着證書

00:10:55.022 --> 00:10:58.225  
所以他們只能交出證書
然後客戶端就可以拒絕

00:10:59.993 --> 00:11:00.961  
或者

00:11:01.895 --> 00:11:04.865  
如果他們使用
參與的證書權威機構

00:11:05.499 --> 00:11:07.768  
那麼那個被感染的證書會被記錄

00:11:07.835 --> 00:11:10.704  
然後可以公開查看
這就讓你有機會

00:11:10.771 --> 00:11:13.574  
在證書權威機構級別撤銷證書

00:11:15.142 --> 00:11:17.311 
所以我們認爲這是
一種至關重要的技術

00:11:18.011 --> 00:11:22.149 
來讓你確認與你對話的那個證書

00:11:22.282 --> 00:11:24.718 
的確是你要對話的那個證書

00:11:27.654 --> 00:11:29.356 
所以你可以這樣試試

00:11:30.591 --> 00:11:32.559 
你可以使用
相同的info.plist

00:11:32.626 --> 00:11:35.729 
你用它設置了
應用的傳輸安全配置

00:11:36.330 --> 00:11:38.532 
這是新的關鍵字
所以對於每個例子

00:11:38.899 --> 00:11:42.336 
有一個參與的證書
你設置上關鍵字

00:11:42.536 --> 00:11:44.771 
然後你的客戶端會拒絕任何

00:11:44.838 --> 00:11:47.074 
無法證明其有公開日誌的證書

00:11:50.177 --> 00:11:52.379  
我們當前的策略大概要求

00:11:52.446 --> 00:11:54.715  
你需要有至少來自
兩個日誌的證明

00:11:55.749 --> 00:11:59.586  
這些日誌...我們會將
認證的新日誌添加上去

00:11:59.786 --> 00:12:03.223  
若你的證書能用在Chromium上
基本上在我們這裏也能行

00:12:04.024 --> 00:12:05.626 
有更多的信息

00:12:05.692 --> 00:12:09.663 
關於通用技術的
在certificatetransparency.org

00:12:09.796 --> 00:12:11.532 
所以我鼓勵你去查看一下

00:12:15.269 --> 00:12:19.006 
證書透明度是這個
生態系統中的一個重要部分

00:12:19.106 --> 00:12:21.241 
當它無法完全代替吊銷

00:12:21.375 --> 00:12:23.877 
這還有最後一步
當你發現了

00:12:23.944 --> 00:12:28.081 
證書由於某種原因出現缺陷
你必須要終止對其的信任

00:12:29.349 --> 00:12:31.051 
所以我想花幾分鐘時間

00:12:31.118 --> 00:12:33.554 
來談談我們推薦的做法

00:12:33.687 --> 00:12:35.289 
這叫做OCSP裝訂

00:12:35.989 --> 00:12:38.859 
這種標準已經推出很多年了

00:12:39.092 --> 00:12:41.028 
但是我們認爲現在是時候

00:12:41.094 --> 00:12:43.764 
讓大家轉移過去
真正開始採用它

00:12:44.164 --> 00:12:46.600 
因爲現在對它的支持
已非常廣泛了

00:12:47.701 --> 00:12:51.905 
OCSP裝訂是對
在線證書狀態協議的增強

00:12:51.972 --> 00:12:53.674 
並且解決了大量的問題

00:12:55.843 --> 00:12:58.712  
所以回顧一下
這就是OCSP的工作原理

00:12:59.046 --> 00:13:00.247  
我們有同樣的設置

00:13:00.314 --> 00:13:03.917  
證書權威機構向
服務器發放證書

00:13:05.219 --> 00:13:07.454  
每一次客戶端
連接那個服務器

00:13:07.521 --> 00:13:11.091  
客戶端就會看到那個證書
並且想知道證書是否仍然有效

00:13:12.059 --> 00:13:14.461  
所以它會請求證書權威機構

00:13:14.528 --> 00:13:16.663  
就在TLS握手過程中間

00:13:17.264 --> 00:13:18.899  
然後證書權威機構說

00:13:18.966 --> 00:13:22.970  
“是的 證書仍然有效” 或者
“不是 抱歉證書無效的 不要相信”

00:13:24.805 --> 00:13:25.906  
這有一些問題

00:13:26.707 --> 00:13:28.475  
其中之一是速度慢

00:13:28.542 --> 00:13:31.879  
你處在獲得資源的握手過程中

00:13:31.945 --> 00:13:35.182 
你不想等待一些其他
實體來進行連接

00:13:35.649 --> 00:13:38.819 
尤其是當那個服務器關閉了
你可能要等待一段時間

00:13:40.087 --> 00:13:42.956 
另一個重大問題是
這會稍微泄露出

00:13:43.023 --> 00:13:45.459 
關於你在線活動的信息

00:13:45.826 --> 00:13:49.229 
你的證書權威機構會看
你連接了哪些主機名

00:13:49.296 --> 00:13:52.633 
因爲每次你連接的時候
你都發送一個響應

00:13:55.936 --> 00:13:58.705  
OCSP裝訂
解決了很多這些擔憂

00:13:58.872 --> 00:14:00.674  
所以工作原理基本上是這樣

00:14:01.475 --> 00:14:06.013  
進行請求的不是客戶端
而是服務器請求證書權威機構

00:14:07.481 --> 00:14:11.018  
證書權威機構將一個
有簽名的響應交回服務器

00:14:11.118 --> 00:14:13.187  
由證書權威機構簽名

00:14:13.453 --> 00:14:14.788  
這樣就可以信任它了

00:14:16.056 --> 00:14:19.393  
之後服務器將這個證書和承諾一併

00:14:19.459 --> 00:14:23.630  
發給客戶端 表明證書是有效的
全部一致 全部是同一個握手過程

00:14:27.201 --> 00:14:28.168 
所以這意味着

00:14:28.235 --> 00:14:32.105 
你的吊銷信息會
可靠迅速地送達過來

00:14:32.172 --> 00:14:34.942 
沒有多餘的等待
沒有任何擔憂

00:14:36.009 --> 00:14:37.911 
而且會保護用戶的隱私

00:14:37.978 --> 00:14:40.981 
因爲他們唯一建立的
就是返回你服務器的連接

00:14:42.950 --> 00:14:46.486 
你可能注意到這個圖表
看起來和證書透明度的圖表相似

00:14:46.553 --> 00:14:48.622 
那是因爲你可以
使用相同的機制

00:14:48.689 --> 00:14:50.891 
來傳遞證書透明度證明

00:14:51.258 --> 00:14:54.194 
只要你的證書
權威機構參與進來

00:14:54.461 --> 00:14:57.631 
你可以在一次握手中
一同發出所有的信息

00:15:00.200 --> 00:15:03.770 
如我所說 OCSP裝訂
廣泛地支持於

00:15:03.837 --> 00:15:06.840 
多種操作系統
而且還能向後兼容

00:15:06.907 --> 00:15:10.177 
所以你今天就可以啓用
在Apache上 在GenX上

00:15:10.244 --> 00:15:12.913 
你的後端託管
在什麼地方都行

00:15:13.180 --> 00:15:16.216 
而且現在完全支持
所有的Apple平臺

00:15:19.753 --> 00:15:21.588 
所以如果可以回顧

00:15:21.655 --> 00:15:24.124 
總結我們在網絡安全上的進展

00:15:24.591 --> 00:15:29.229 
現在是時候前進到
應用傳輸安全標準上了

00:15:29.296 --> 00:15:34.101 
這是牢靠的算法
和牢靠的密碼 TLS 1.2

00:15:34.268 --> 00:15:36.737 
正向保密和SHA-2證書

00:15:38.772 --> 00:15:43.343 
還有 現在是時候開始對證書
透明度進行試驗了

00:15:43.544 --> 00:15:46.413 
尋找參與的證書權威機構

00:15:46.647 --> 00:15:49.550 
然後整合到這個生態系統中

00:15:51.251 --> 00:15:53.954 
還有 一定要啓用OCSP裝訂

00:15:54.021 --> 00:15:57.958 
這樣我們就萬無一失了
而且要知道你可以確保

00:15:58.058 --> 00:16:00.594 
建立安全的返回服務器連接

00:16:01.929 --> 00:16:03.297 
所以這就是網絡安全

00:16:05.999 --> 00:16:10.037 
現在我想花幾分鐘時間
來談談一些加密改進

00:16:12.005 --> 00:16:16.076 
所以 首先是SecKey
SecKey是我們的算法

00:16:16.210 --> 00:16:20.981 
不好意思 是我們用於
非對稱加密操作的API

00:16:21.281 --> 00:16:25.485 
在這次版本中 我們統一了
macOS和iOS上面的API

00:16:26.353 --> 00:16:31.191 
SecKey現在支持所有的常見操作
用非對稱密鑰

00:16:31.692 --> 00:16:33.193 
RSA 和 ACC 進行的操作

00:16:33.493 --> 00:16:37.030 
所以這是用非對稱密鑰
進行簽名和驗證

00:16:38.398 --> 00:16:44.571 
這意味着SecKey完全替代了
在macOS上被棄用的CDSA調用

00:16:45.339 --> 00:16:48.675 
而且它還替代了你可能
使用的SecTransform

00:16:48.876 --> 00:16:52.179 
來用非對稱密鑰進行加密

00:16:52.546 --> 00:16:55.015 
所以我們強烈推薦
前進到SecKey上

00:16:57.084 --> 00:17:01.088 
我們還將它嵌入到新工具包中
叫做CryptoTokenKit

00:17:01.788 --> 00:17:05.592 
CryptoTokenKit是對
加密設備的系統支持

00:17:05.759 --> 00:17:08.662 
所以那張你用來
證明身份的小卡片

00:17:08.729 --> 00:17:11.964 
在企業中用的那種
或者是USB token

00:17:13.300 --> 00:17:16.203 
現在我們直接整合了這些

00:17:16.603 --> 00:17:18.672 
而且它們可以
整合到系統服務中

00:17:18.739 --> 00:17:23.010 
所以這意味着這些Token內容
可以在keychain中獲得

00:17:23.210 --> 00:17:24.344 
如你所料

00:17:24.411 --> 00:17:29.049 
而且Token操作可以通過
使用SecKey API實現

00:17:29.950 --> 00:17:33.420 
這是一個複雜的話題
其中有很多的深層內容

00:17:33.820 --> 00:17:35.956 
所以請到
security lab見我們

00:17:36.023 --> 00:17:38.025 
我們可以詳細討論你的使用案例

00:17:40.394 --> 00:17:43.430 
所以感謝大家的關注
接下來我將交給Simon

00:17:43.497 --> 00:17:45.566 
來談談在平臺安全
上的新內容

00:17:50.737 --> 00:17:52.072 
非常感謝你 Lucia

00:17:53.207 --> 00:17:56.910 
大家好 我是Simon Cooper
我負責管理信任工程團隊

00:17:58.011 --> 00:17:59.880 
我將談談安全上的新內容

00:18:00.981 --> 00:18:03.483 
但首先我想談談...
稍微談談

00:18:04.051 --> 00:18:06.153 
軟件是如何傳輸到Mac上的

00:18:07.454 --> 00:18:09.389 
稍微談談Developer ID

00:18:10.490 --> 00:18:12.259  
然後我會談談Gatekeeper

00:18:12.359 --> 00:18:14.761  
和圍繞Gatekeeper
的一些打包問題

00:18:15.229 --> 00:18:18.332 
我們先開始談談
軟件是如何傳輸到

00:18:18.398 --> 00:18:20.701 
我們幾個平臺上的

00:18:22.736 --> 00:18:25.839 
所以對於iOS 你可以從
App Store上獲取應用

00:18:27.207 --> 00:18:33.180 
你能使用Xcode來創建並運行應用
然後將它們安裝在你自己的設備上

00:18:34.581 --> 00:18:36.383 
這有一些Enterprise Program

00:18:36.450 --> 00:18:40.320 
允許你將內容傳輸
到設備上並進行管理

00:18:41.522 --> 00:18:43.991 
你會發現所有這些安裝機制

00:18:44.057 --> 00:18:46.360 
都是由iOS平臺
在背後處理完成的

00:18:47.427 --> 00:18:49.630 
所以現在我想
稍微談談macOS

00:18:52.432 --> 00:18:55.269 
所以你還可以通過
Mac App Store獲得應用

00:18:55.969 --> 00:18:57.905 
而且這種獲取應用
的方法十分不錯

00:18:59.840 --> 00:19:03.644 
你還可以得到有
Developer ID簽名的應用

00:19:06.680 --> 00:19:08.248 
你還可以使用Xcode

00:19:08.482 --> 00:19:12.152 
來創建你自己的應用
然後使用傳統命令行UNIX工具

00:19:12.219 --> 00:19:14.388 
來以普通的UNIX方式創建內容

00:19:17.858 --> 00:19:21.328 
所以我們回來稍微
談談Developer ID

00:19:25.165 --> 00:19:27.034 
所以什麼是Developer ID？

00:19:30.103 --> 00:19:33.674 
Developer ID允許你
在App Store之外傳輸應用

00:19:35.876 --> 00:19:38.979 
這些應用通常使用
網頁瀏覽器下載完成的

00:19:41.915 --> 00:19:46.119 
Developer ID Program會
發放給你一個Developer ID簽名身份

00:19:48.822 --> 00:19:52.926 
當你以該身份給應用簽名時
應用會得到Gatekeeper的特別對待

00:19:55.195 --> 00:19:57.831 
實際上 在Xcode 8中
有一些改進的流程

00:19:57.998 --> 00:20:01.768 
允許你正確地導出有
Developer ID簽名的應用

00:20:08.475 --> 00:20:12.479 
所以我們要做的是改變
Developer ID Program

00:20:12.546 --> 00:20:13.847 
昨天已經宣佈了

00:20:13.914 --> 00:20:17.351 
我們允許Developer ID
和iCloud協同使用

00:20:19.786 --> 00:20:22.689 
所以Developer ID現在
可以使用iCloud的功能

00:20:22.756 --> 00:20:26.193 
這包括iCloud Drive
iCloud Keychain

00:20:26.627 --> 00:20:29.062 
Push Notifications和VPN

00:20:32.266 --> 00:20:33.367 
所以這意味着什麼？

00:20:34.201 --> 00:20:37.037 
這意味着你可以傳輸
iCloud驅動的應用

00:20:37.237 --> 00:20:39.373 
在App Store之外

00:20:40.007 --> 00:20:42.976 
你現可使用Developer ID
將數據分享給

00:20:43.043 --> 00:20:45.612 
你的iCloud驅動的iOS應用

00:20:46.680 --> 00:20:51.919 
你能將新的Developer ID
應用部署回macOS 10.9

00:20:52.553 --> 00:20:55.722 
所以大家一定想知道
何時能夠做到如此

00:20:57.124 --> 00:21:00.394 
你今天可開始
iCloud Development測試

00:21:00.594 --> 00:21:02.796 
使用Xcode 8工具

00:21:06.433 --> 00:21:10.070 
你肯定也注意到了
當你在做iCloud測試的時候

00:21:10.137 --> 00:21:12.573 
這有一個開發和生產環境

00:21:13.073 --> 00:21:16.510 
當你在部署
你的iCloud應用時

00:21:16.677 --> 00:21:19.079 
你要在生產環境中部署

00:21:19.146 --> 00:21:20.814 
然後要等待即將發佈的seed

00:21:20.881 --> 00:21:22.482 
這樣才能開始測試

00:21:24.685 --> 00:21:28.755 
當你那麼做的時候
請使用Xcode 8中的新流程

00:21:28.889 --> 00:21:32.926 
因爲這會確保你是在
生產服務器中進行部署

00:21:34.494 --> 00:21:36.997 
Xcode團隊還讓我提醒大家

00:21:37.164 --> 00:21:41.301 
除非你使用GM工具
否則請不要發佈應用

00:21:45.339 --> 00:21:49.710 
所以Developer ID的
另一邊是Gatekeeper

00:21:50.477 --> 00:21:54.381 
Gatekeeper允許我們控制
哪些應用可以在你的機器上運行

00:21:55.582 --> 00:21:59.319 
然後這是
Preference Panel

00:21:59.486 --> 00:22:01.889 
在El Capitan中的
Preference Panel上面

00:22:01.955 --> 00:22:05.425 
有這些選項 你可以運行來自
Mac App Store的應用

00:22:06.126 --> 00:22:09.796 
可運行Mac App Store
和未識別開發者的應用

00:22:09.897 --> 00:22:11.732 
或者你可以運行
來自任何地方的應用

00:22:13.267 --> 00:22:18.038 
當你第一次運行應用時
Gatekeeper會運行前提示你

00:22:19.940 --> 00:22:22.376 
其實我們在Gatekeeper
上做了些更改

00:22:22.442 --> 00:22:27.114 
而且我們對Sierra中的
Gatekeeper UI也做更改

00:22:28.549 --> 00:22:32.386 
我們改變了默認選項
而且那些默認選項會是

00:22:32.452 --> 00:22:34.354 
你可以運行
Mac App Store的應用

00:22:34.688 --> 00:22:37.324 
你可運行Mac App Store
和未識別開發者的應用

00:22:38.725 --> 00:22:41.728 
現在如果Gatekeeper
出於某種原因拒絕你的應用

00:22:42.095 --> 00:22:45.299 
這通常在這個Preference Pane中
會出現一個按鈕

00:22:45.365 --> 00:22:48.969 
讓你打開...
繼續打開

00:22:50.604 --> 00:22:54.074 
不幸的是 在seed版本中
這項功能並不起作用

00:22:54.141 --> 00:22:56.343 
但會在之後的seed
版本中得到修復

00:22:57.744 --> 00:23:00.614 
我還想說
我們沒有改變

00:23:00.681 --> 00:23:04.151 
基本機制和策略的工作方式

00:23:04.351 --> 00:23:06.553 
所以如果你已經完成管理配置

00:23:06.620 --> 00:23:09.823 
或者使用命令行工具和策略工具

00:23:09.923 --> 00:23:12.259 
你可以重新啓用
Allow Anywhere

00:23:18.765 --> 00:23:22.002 
我想稍微談談Gatekeeper
上的其他一些變更

00:23:22.202 --> 00:23:25.005 
但是我首先要談談
重新打包問題

00:23:25.639 --> 00:23:29.209 
和爲解決該問題而
開發的Gatekeeper加強的地方

00:23:30.143 --> 00:23:32.679 
現在重新打包成爲了一個問題

00:23:32.913 --> 00:23:34.882 
是由於某些應用編寫的方法

00:23:36.149 --> 00:23:37.651  
有一些類型的應用

00:23:37.985 --> 00:23:42.356  
在編寫的時候
延伸到了其本身之外

00:23:42.422 --> 00:23:44.224  
並且使用了外部資源

00:23:46.827 --> 00:23:51.164  
這些應用可能
以多種方式傳輸

00:23:53.700 --> 00:23:55.969  
而且它們可能
確實有正確的簽名

00:23:57.104 --> 00:24:01.475  
但是它們所延伸的
外部資源可能沒有簽名

00:24:02.376 --> 00:24:04.411  
它們可以是代碼或是等價代碼

00:24:04.511 --> 00:24:06.947  
可以是庫
可以是插件

00:24:07.214 --> 00:24:08.982  
甚至可以是HTML內容

00:24:09.283 --> 00:24:11.785  
你可能沒注意到
本地的HTML內容

00:24:11.885 --> 00:24:15.856  
如果含有JavaScript
這就可以訪問你的整個系統

00:24:19.159 --> 00:24:23.030 
這些資源還可以是Lua Scripts
或Python Scripts

00:24:23.297 --> 00:24:24.765 
或甚至是Apple Scripts

00:24:27.234 --> 00:24:28.435 
所以問題在哪？

00:24:29.570 --> 00:24:32.806 
如果你將這兩個東西
一起放入容器中

00:24:32.873 --> 00:24:37.177 
然後以這種方式傳輸應用
可能通過壓縮文件或磁盤鏡像

00:24:37.244 --> 00:24:42.282 
或者使用ISO鏡像
然後你將應用放入容器中

00:24:44.551 --> 00:24:46.820 
然後你將資源放在應用旁邊

00:24:48.822 --> 00:24:52.226 
當應用運作並和外部資源對話時

00:24:53.560 --> 00:24:56.830 
它就會加載這些
有潛在危險的東西

00:24:57.297 --> 00:25:00.167 
你會發現這裏的
應用有綠色的邊框

00:25:00.234 --> 00:25:01.668 
表明有簽名

00:25:02.236 --> 00:25:05.072  
它延伸到了外面
到簽名的外面

00:25:05.272 --> 00:25:08.408  
並嘗試接觸這些潛在資源

00:25:10.210 --> 00:25:12.913  
所以如果我將
那個應用重新打包

00:25:13.280 --> 00:25:16.583  
我不是將它和外部資源一同打包

00:25:16.850 --> 00:25:19.186  
那是你們開發者想放入的內容

00:25:20.387 --> 00:25:22.222  
我是將惡意內容放進去

00:25:22.789 --> 00:25:24.358  
之後當用戶運行應用

00:25:24.591 --> 00:25:26.760  
他們不會得到你的體驗

00:25:26.827 --> 00:25:30.797  
他們體驗到的是惡意代碼

00:25:31.431 --> 00:25:34.301 
如果那個惡意代碼
是一個動態庫

00:25:34.368 --> 00:25:37.204 
比如你可能把它放入
一個插件目錄裏了

00:25:37.604 --> 00:25:40.574 
那這幾乎可以肯定
你的應用將不會

00:25:40.707 --> 00:25:42.042 
執行你所預期的事情

00:25:48.582 --> 00:25:50.851 
所以我們將其
稱爲重新打包問題

00:25:52.186 --> 00:25:56.390 
有一些內容並非直接
受到打包問題的影響

00:25:56.990 --> 00:26:00.093 
那些內容是從Mac App
Store中傳輸過來的應用

00:26:00.794 --> 00:26:02.563 
這是獲取應用的最佳方式

00:26:04.331 --> 00:26:05.966 
其他內容

00:26:07.868 --> 00:26:10.237 
可以不受直接影響的

00:26:10.404 --> 00:26:14.107 
是你使用帶有簽名的Apple
Installer Package來安裝應用

00:26:14.942 --> 00:26:17.644 
這不意味着說
一旦應用安裝完成

00:26:17.711 --> 00:26:20.848 
就無法重新打包
並傳輸到另一個機制中

00:26:20.914 --> 00:26:23.083 
但實際的Apple Installer Package

00:26:23.150 --> 00:26:26.653 
在延伸到外部資源的
方面是沒有問題的

00:26:30.858 --> 00:26:32.593 
有些內容是會受到影響的

00:26:32.693 --> 00:26:36.530 
前提是你傳輸應用的方法
是用壓縮文件或磁盤鏡像

00:26:37.364 --> 00:26:39.666 
或者如果你將內容組合在

00:26:39.733 --> 00:26:43.570 
ISO鏡像中
以及其他任何一種存檔格式

00:26:46.173 --> 00:26:48.742 
還有可能的是
如果在你的磁盤鏡像

00:26:48.842 --> 00:26:52.813 
的結構中
你組裝應用的方式

00:26:53.180 --> 00:26:57.851 
是使用一種組合
將各處的資源

00:26:58.051 --> 00:27:01.555 
組合到一起
那你也可能受到影響

00:27:07.327 --> 00:27:09.329 
所以在此問題上
我們需要你們的幫助

00:27:12.733 --> 00:27:15.636 
由於這個問題
我們還需要保護我們客戶

00:27:18.472 --> 00:27:19.540 
我們需要做什麼？

00:27:20.207 --> 00:27:21.909 
如果你傳輸某些內容

00:27:21.975 --> 00:27:24.311 
其中有帶簽名的應用
和一些外部資源

00:27:24.378 --> 00:27:29.283 
你可能通過壓縮文件
或磁盤鏡像 或ISO鏡像來做

00:27:30.117 --> 00:27:33.620 
我們要請求你們
換成使用磁盤鏡像

00:27:35.689 --> 00:27:40.194 
我們請求你們這樣做的原因是
我們現在可以給磁盤鏡像簽名了

00:27:43.096 --> 00:27:48.669 
你可以用macOS 10.11.5
來給磁盤鏡像簽名

00:27:48.869 --> 00:27:51.872 
這是El Capitan的當前版本

00:27:52.439 --> 00:27:55.342 
或所有之後發佈的OS X

00:27:58.011 --> 00:28:00.814 
你可以使用共同簽署工具
來給應用簽名...

00:28:01.548 --> 00:28:03.450 
來給磁盤鏡像簽名
不好意思

00:28:03.884 --> 00:28:06.353 
這基本上會將

00:28:06.453 --> 00:28:08.956 
外部資源和應用綁定在一起

00:28:10.290 --> 00:28:12.860 
這些簽名實際上
嵌入在磁盤鏡像中

00:28:12.993 --> 00:28:14.328 
並隨着磁盤鏡像附帶

00:28:15.128 --> 00:28:19.933 
而且這個有簽名的磁盤鏡像
與舊的OS版本相兼容

00:28:22.936 --> 00:28:25.072 
現在我想說一些打包建議

00:28:25.839 --> 00:28:28.242 
避免打包問題的一種方法是...

00:28:28.308 --> 00:28:30.744 
重新打包方法
就是完全避開它

00:28:31.078 --> 00:28:33.480 
將你的資源放入應用捆綁包中

00:28:33.714 --> 00:28:35.215 
之後給整個內容簽名

00:28:40.854 --> 00:28:42.990 
如果你只發布
單個應用捆綁包

00:28:43.257 --> 00:28:46.226 
你應該考慮通過
Mac App Store傳輸

00:28:47.861 --> 00:28:49.596 
你一定要給應用簽名

00:28:50.597 --> 00:28:52.666 
或許在壓縮文檔中打包

00:28:52.766 --> 00:28:56.236 
不過請在發佈前
驗證那個簽名

00:28:57.504 --> 00:28:59.373 
或者 如果你有複雜的安裝

00:28:59.673 --> 00:29:02.276 
你可使用帶簽名的Apple
Installer Package

00:29:02.876 --> 00:29:04.211 
對於容器

00:29:05.045 --> 00:29:07.481 
還有應用和資源
還有磁盤鏡像

00:29:07.781 --> 00:29:10.384 
請使用並換成
有簽名的磁盤鏡像

00:29:11.218 --> 00:29:13.987 
容器中的所有內容都要簽名

00:29:14.121 --> 00:29:17.191 
所以其內部的應用
也應該簽上名

00:29:18.358 --> 00:29:19.927 
而且你應該給磁盤鏡像簽名

00:29:20.627 --> 00:29:23.597 
並請在發佈前
驗證所有的簽名

00:29:27.401 --> 00:29:29.203 
關於打包的最後幾點

00:29:31.004 --> 00:29:34.608 
如果你將個性化和
許可信息添加到你的應用上

00:29:34.675 --> 00:29:36.009 
在下載的時候

00:29:36.577 --> 00:29:39.847 
請在應用的捆綁包
路徑上使用擴展屬性

00:29:40.447 --> 00:29:42.883 
這是描述該做法的技術說明

00:29:43.083 --> 00:29:45.419 
那就是Tech Note 2206

00:29:45.586 --> 00:29:48.789 
你也可以通過給個性化
磁盤鏡像簽名來做到這一點

00:29:51.391 --> 00:29:53.894 
這裏有一些
你一定不要做的事

00:29:55.028 --> 00:29:57.297  
給應用簽完名之後
不應進行修改

00:29:57.364 --> 00:29:58.999  
因爲這會破壞代碼簽名

00:29:59.066 --> 00:30:03.203  
當Gatekeeper來驗證
你的應用時 就會出現問題

00:30:03.770 --> 00:30:06.273  
你絕對不可以傳輸
簽名被破壞的應用

00:30:06.607 --> 00:30:10.143  
然後請不要傳輸ISO鏡像了

00:30:10.844 --> 00:30:14.348 
現在我想談談
Gatekeeper增強

00:30:14.481 --> 00:30:17.484 
這是我們爲攻克這一
問題而開發出來的

00:30:18.252 --> 00:30:20.721 
這重點是爲了保護客戶

00:30:22.256 --> 00:30:26.059 
這個機制我們稱之爲
Gatekeeper Path Randomization

00:30:28.195 --> 00:30:33.033 
它補充了所有
現有的Gatekeeper保護

00:30:34.668 --> 00:30:37.738 
而且對於Mac App Store
的應用沒有任何變更

00:30:41.508 --> 00:30:44.211 
當你升級Sierra時
也沒有任何變更

00:30:44.411 --> 00:30:47.748 
對於任何之前在你
系統裏運行的應用

00:30:50.651 --> 00:30:55.322 
這個機制對任何
新下載的應用起作用

00:30:56.723 --> 00:31:01.094 
並且適用於
無簽名磁盤鏡像上的應用

00:31:03.330 --> 00:31:06.200 
我來描述一下究竟
這種機制是如何生效的

00:31:09.903 --> 00:31:11.839  
這是一個複雜對象

00:31:12.239 --> 00:31:14.174  
這可能在你的下載文件夾裏

00:31:14.241 --> 00:31:15.642  
而且可能是一個解壓縮文件

00:31:16.243 --> 00:31:18.412  
或者可能是一個
已裝載的磁盤鏡像

00:31:18.612 --> 00:31:21.715  
包含你的應用和那些額外資源

00:31:26.920 --> 00:31:29.022 
所以 當你雙擊應用時

00:31:32.059 --> 00:31:36.396 
當應用運行後
它會被重新轉移

00:31:37.898 --> 00:31:39.066 
通過一些技巧

00:31:39.533 --> 00:31:42.102 
放到文件系統裏的一個隨機位置

00:31:42.903 --> 00:31:45.739  
而且它不能訪問資源

00:31:49.843 --> 00:31:52.045  
所以 這會終止重新打包攻擊

00:31:54.815 --> 00:31:58.785 
所以在一些情況下
這種重新轉移是不會發生的

00:32:00.687 --> 00:32:04.424 
如果用戶明確地移動應用
只是移動應用本身

00:32:04.491 --> 00:32:07.127 
如果他們將應用
和其他東西一同移動

00:32:07.427 --> 00:32:10.097 
那這個機制不會關閉

00:32:10.764 --> 00:32:14.668 
如果用戶只移動應用本身
可能移動到/Applications

00:32:15.369 --> 00:32:17.237 
那這個機制會被關閉

00:32:19.573 --> 00:32:23.343 
如果給磁盤鏡像簽名
那這就不會發生

00:32:23.911 --> 00:32:26.246 
所以任何從帶有簽名的
磁盤鏡像運行的應用

00:32:26.313 --> 00:32:28.248 
這個機制將不會得到應用

00:32:31.318 --> 00:32:33.420 
這種機制也不會起作用

00:32:33.520 --> 00:32:37.157 
若你使用帶簽名的Apple
Installer Package安裝軟件

00:32:40.561 --> 00:32:43.564 
這也不會應用於任何來自
Mac App Store的應用

00:32:49.403 --> 00:32:52.773 
所以簡要來說
本次演講中的兩個收穫是

00:32:53.140 --> 00:32:56.810 
給你傳輸的內容進行簽名
然後檢查內容是否有效

00:32:59.780 --> 00:33:02.416 
所以關於本次演講的
更多信息可以在這裏找到