00:00:19.987 --> 00:00:23.690
發揮HealthKit最大價值

00:00:28.195 --> 00:00:31.398
早上好 歡迎來到
“發揮HealthKit最大價值”

00:00:31.899 --> 00:00:34.635
我是Matt
HealthKit團隊軟件工程師

00:00:34.768 --> 00:00:37.304
稍後這個舞臺
會交給我的同事Jeff

00:00:38.138 --> 00:00:41.475
本場演講 我們會講一些
很棒的新功能

00:00:41.542 --> 00:00:44.511
是iOS 10和watchOS 3中
HealthKit API的新拓展

00:00:45.412 --> 00:00:48.715
與此同時
我們也會講到一些主要的新特性

00:00:48.782 --> 00:00:51.685
核心概念和重要的工作流程
以確保

00:00:51.752 --> 00:00:54.621
你真正可以
充分利用HealthKit的價值

00:00:55.889 --> 00:00:57.791
希望你已經
對HealthKit有所瞭解

00:00:57.858 --> 00:00:59.393
若你在此觀看這場演講

00:00:59.459 --> 00:01:01.228
如果不是
我們會列出之前的演講

00:01:01.295 --> 00:01:02.262
在這場演講最後

00:01:02.329 --> 00:01:04.397
供你日後參考
來快速瞭解這些內容

00:01:05.065 --> 00:01:06.834
但是現在
我們開始講今天的內容

00:01:09.837 --> 00:01:13.240
在座的都知道
Apple的健康與健身生態系統

00:01:13.307 --> 00:01:15.375
在我們的用戶中
大受好評

00:01:16.043 --> 00:01:18.145
人們越來越健美
也越來越健康

00:01:18.212 --> 00:01:20.214
這歸功於我們將
HealthKit

00:01:20.280 --> 00:01:22.482
ResearchKit
和CareKit

00:01:22.549 --> 00:01:25.319
在iPhone和Apple Watch上
與你的應用和設備結合在一起

00:01:26.353 --> 00:01:28.288
我們想保證
你們可以

00:01:28.355 --> 00:01:31.458
一直創造這些很棒的
有關健康和健美的用戶體驗

00:01:31.525 --> 00:01:33.827
讓我們的用戶
有所期待並享受其中

00:01:35.195 --> 00:01:38.565
那麼今天我們就來看看
你都要做哪些事情

00:01:38.632 --> 00:01:40.467
來確保這些體驗
正確而且理想

00:01:41.835 --> 00:01:43.637
首先來講授權

00:01:43.704 --> 00:01:46.240
這是HealthKit
所有其他功能的基礎

00:01:47.040 --> 00:01:51.512
然後是Activity Rings API
在iOS 9.3下引入的

00:01:51.879 --> 00:01:54.381
還有健康記錄
今年在iOS 10系統下發布的

00:01:54.848 --> 00:01:57.317
這兩個都會產生
一些重要的影響

00:01:57.384 --> 00:01:58.685
與授權相關

00:02:00.587 --> 00:02:02.389
最後
在剩下的時間裏

00:02:02.456 --> 00:02:05.559
我們會講解各種
處理數據的好方法

00:02:05.692 --> 00:02:07.561
在你與HealthKit互動時

00:02:10.864 --> 00:02:11.698
現在就開始講吧

00:02:12.165 --> 00:02:13.901
首先就是授權

00:02:14.468 --> 00:02:16.370
若你使用HealthKit
一段時間

00:02:16.436 --> 00:02:18.939
那麼這裏大部分內容
對你來說可能就是回顧

00:02:19.239 --> 00:02:21.909
但我們建議你
重點關注一些細節

00:02:21.975 --> 00:02:25.045
因爲它們很重要
對我們過會兒要講的內容而言

00:02:25.212 --> 00:02:28.382
我們也會講到一些最佳操作
所以豎起耳朵聽

00:02:31.084 --> 00:02:34.388
iOS讓用戶
能完全掌握他們的健康數據

00:02:34.488 --> 00:02:37.124
以及哪個應用可以訪問
哪一部分數據

00:02:38.258 --> 00:02:39.893
在與HealthKit互動前

00:02:40.093 --> 00:02:43.797
你的應用需要請求許可
通過HK Health Store訪問正確的類型

00:02:44.364 --> 00:02:46.266
Health Store反過來會顯示

00:02:46.333 --> 00:02:49.203
一個正確的授權UI給用戶
如果有必要的話

00:02:51.038 --> 00:02:54.341
注意 用戶可以隨時更改
給你應用的權限

00:02:54.408 --> 00:02:56.777
在開發應用的時候
一定要記住這一點

00:02:57.811 --> 00:03:01.348
同樣重要的是
讀授權和寫授權

00:03:01.415 --> 00:03:02.783
完全獨立不相干

00:03:03.383 --> 00:03:05.152
最後這點
是有點複雜

00:03:05.219 --> 00:03:07.254
所以
我們來講的更細一點

00:03:11.191 --> 00:03:13.293
這裏看到的是
讀和寫的授權如何運行

00:03:14.094 --> 00:03:15.362
如果用戶同時授權你

00:03:15.429 --> 00:03:17.998
讀和寫的許可
給一個指定的HealthKit類型

00:03:18.298 --> 00:03:20.133
那麼你的應用
可以如你所願地查詢並保存

00:03:20.200 --> 00:03:22.302
這個HealthKit類型的數據

00:03:23.337 --> 00:03:26.173
如果用戶只給你
讀某個類型的權限

00:03:26.340 --> 00:03:27.174
那麼你的應用可讀

00:03:27.241 --> 00:03:29.076
但是不可改寫
這個HealthKit類型的數據

00:03:29.142 --> 00:03:30.010
到目前一切都好

00:03:31.778 --> 00:03:34.581
現在 如果用戶給你
改寫某個類型的權限

00:03:35.048 --> 00:03:37.417
那麼你的應用可以改寫
HealthKit中這個類型的數據

00:03:37.484 --> 00:03:39.653
但不能從HealthKit
回讀這個類型

00:03:40.120 --> 00:03:43.023
有寫的權限
不意味有讀的權限

00:03:43.390 --> 00:03:45.959
但是
這有一個很重要的例外

00:03:46.326 --> 00:03:48.629
如果你的應用
可改寫HealthKit類型

00:03:48.695 --> 00:03:51.698
那麼你可以回讀
你的應用所寫的內容

00:03:51.765 --> 00:03:53.400
只是不能讀
其他來源的數據

00:03:55.369 --> 00:03:57.104
最後 如果用戶拒絕

00:03:57.171 --> 00:03:59.339
對某個類型
所有讀和寫的權限

00:03:59.406 --> 00:04:01.909
那你就既不能查詢
也不能保存這個類型

00:04:02.709 --> 00:04:05.279
最後這一點
會產生重要的影響

00:04:05.412 --> 00:04:09.183
如果用戶拒絕了
之前授權給應用的許可

00:04:09.583 --> 00:04:11.752
那麼你的應用
就無法再讀取任何

00:04:11.818 --> 00:04:13.220
這個HealthKit類型的數據

00:04:13.387 --> 00:04:17.024
即便是你的應用之前寫的數據
一定要牢記這一點

00:04:21.195 --> 00:04:22.863
以上就是所有的技術回顧

00:04:22.930 --> 00:04:26.667
但是這裏iOS X的授權
有個重要的變化

00:04:26.733 --> 00:04:28.769
它與使用說明相關

00:04:30.070 --> 00:04:34.174
iOS X及以後版本的應用
必須爲用戶提供一個說明

00:04:34.241 --> 00:04:36.210
說明他們爲什麼要
訪問健康數據

00:04:36.643 --> 00:04:39.546
這也是再次強調了我們的原則
就是用戶控制數據

00:04:41.348 --> 00:04:45.118
使用說明應當在
應用的info.plist文件中聲明

00:04:45.185 --> 00:04:48.488
爲NSHealthShareUsageDescription驗證碼

00:04:48.555 --> 00:04:49.590
這是讀取數據的時候

00:04:50.324 --> 00:04:53.460
或者聲明爲NSHealthUpdateUsageDescription
在改寫數據的時候

00:04:56.129 --> 00:04:58.799
換個畫面
來看看你如何請求授權

00:04:59.766 --> 00:05:02.402
第一件事
是保證HealthKit

00:05:02.469 --> 00:05:04.071
可用於當前設備

00:05:04.137 --> 00:05:07.107
比如說
iPad上的應用就不行

00:05:07.875 --> 00:05:09.243
建好這個之後

00:05:09.409 --> 00:05:12.179
我們列舉一些類型
是我們想要讀取和改寫的

00:05:12.813 --> 00:05:14.781
最後
調出requestAuthorization

00:05:14.848 --> 00:05:17.718
在HK Health Store裏
傳遞我們感興趣的類型

00:05:17.784 --> 00:05:19.686
然後處理反饋
並回調

00:05:23.123 --> 00:05:24.458
watchOS應用怎麼辦？

00:05:25.125 --> 00:05:27.594
授權可以共享於
你的iOS應用

00:05:27.661 --> 00:05:29.129
和匹配的watchOS應用

00:05:29.463 --> 00:05:31.665
請求授權
可以隨時進行

00:05:31.732 --> 00:05:33.634
通過iOS代碼
或者watchOS代碼

00:05:34.434 --> 00:05:36.503
但是 系統授權UI

00:05:36.570 --> 00:05:38.772
只能顯示於
用戶的手機上

00:05:39.039 --> 00:05:41.441
因此這就造成了
重要的可用性問題

00:05:42.609 --> 00:05:45.412
比如
用戶準備開始鍛鍊

00:05:45.479 --> 00:05:47.714
他們可能已經
把手機綁在了臂帶上

00:05:47.781 --> 00:05:48.782
如果是這樣

00:05:49.183 --> 00:05:52.152
他們很難允許
你的應用發出的授權請求

00:05:52.219 --> 00:05:55.322
所以這就不是
請求初始授權的好時機

00:05:57.457 --> 00:05:59.259
但是還有一個更麻煩的情況

00:05:59.860 --> 00:06:02.996
如果用戶使用Watch應用
手機可能根本不在身邊

00:06:03.063 --> 00:06:03.931
這樣的話

00:06:04.031 --> 00:06:06.266
請求表單
甚至都無法顯示

00:06:06.934 --> 00:06:09.536
因此我們建議你
實際考慮一下這些問題

00:06:09.603 --> 00:06:11.371
在開發Watch應用的時候

00:06:12.439 --> 00:06:15.876
同樣要記住
請求授權調令的反饋時間

00:06:15.943 --> 00:06:16.844
沒有保證

00:06:16.910 --> 00:06:20.347
所以在等待反饋的時候
一定不要阻礙任何UI

00:06:24.551 --> 00:06:28.021
現在重要的是
提供給用戶正確的授權體驗

00:06:28.488 --> 00:06:29.523
在此之上

00:06:29.590 --> 00:06:33.861
應用可能會請求訪問一些
或者很多HealthKit數據類型

00:06:34.094 --> 00:06:36.230
所以就出現了
一個很重要的問題

00:06:36.663 --> 00:06:40.100
什麼時候應該請求訪問
一些或者所有的數據類型？

00:06:41.435 --> 00:06:43.437
以下是我們的一些建議
針對這個問題

00:06:44.304 --> 00:06:46.707
首先我們建議你
請求訪問

00:06:46.773 --> 00:06:48.642
合理的類型集合

00:06:48.709 --> 00:06:51.478
它們要對應
應用的邏輯活動

00:06:52.479 --> 00:06:55.015
比如說你的應用
允許用戶監測

00:06:55.082 --> 00:06:57.985
食物攝入量和身體指標
比如BMI

00:06:58.719 --> 00:06:59.553
要是這樣

00:06:59.620 --> 00:07:02.256
你要考慮請求訪問
營養數據類型

00:07:02.322 --> 00:07:04.224
在第一次用戶
記錄食物攝入的時候

00:07:04.791 --> 00:07:07.261
然後請求訪問
身體指標的數據類型

00:07:07.327 --> 00:07:09.329
在用戶每次要
記錄它們的時候

00:07:12.232 --> 00:07:13.400
這個規則也有一個例外

00:07:13.467 --> 00:07:15.202
就是當應用有加載流程的時候

00:07:15.602 --> 00:07:17.871
如果是這樣
你實際上就要

00:07:17.938 --> 00:07:21.742
請求訪問所有
應用要提前使用的數據類型

00:07:22.075 --> 00:07:25.646
因爲你現在已經可以
清楚地向用戶解釋

00:07:25.712 --> 00:07:27.948
你的應用
要用這些類型做什麼

00:07:29.383 --> 00:07:32.119
無論你選擇哪個類型
我們必須要建議你

00:07:32.186 --> 00:07:34.988
在開發過程中
常常測試授權

00:07:35.556 --> 00:07:38.192
你可以簡單的重設
初始授權流程

00:07:38.258 --> 00:07:41.061
通過刪除應用
從你的設備或者模擬器上

00:07:41.395 --> 00:07:42.963
在建立和運行之前

00:07:43.063 --> 00:07:44.665
這樣HealthKit
就顯示給用戶

00:07:44.731 --> 00:07:47.067
初始授權流程
從頭開始

00:07:49.169 --> 00:07:51.271
這時一定要測試

00:07:51.338 --> 00:07:54.842
授權有沒有延遲
或者被用戶完全拒絕

00:07:55.475 --> 00:07:57.344
應用在這些情況下如何運行？

00:07:57.711 --> 00:07:59.179
還有更多能力嗎？

00:08:01.215 --> 00:08:04.585
最後 如果要用一句話總結授權
那就是

00:08:05.619 --> 00:08:07.154
時刻考慮用戶體驗

00:08:08.055 --> 00:08:10.257
不要在不合適的時間
顯示問題

00:08:10.324 --> 00:08:12.492
並保證你的流程有意義

00:08:16.330 --> 00:08:19.199
我們已經花了很多時間
瞭解授權

00:08:19.266 --> 00:08:20.767
現在我們來講一些新特性

00:08:20.834 --> 00:08:23.570
是去年以後HealthKit新出的
從活動環開始吧

00:08:27.040 --> 00:08:30.077
Apple開發了一個很棒的
健康與健美的追蹤體驗

00:08:30.143 --> 00:08:31.144
在Apple Watch上

00:08:31.845 --> 00:08:34.948
用戶喜歡它能簡單地
追蹤主要的活動規律

00:08:35.015 --> 00:08:36.250
改善他們的生活

00:08:36.450 --> 00:08:38.318
在iOS 10和watchOS 3

00:08:38.385 --> 00:08:41.121
用戶甚至可以跟其他人
分享他們的活動環

00:08:41.188 --> 00:08:42.022
可以比賽

00:08:43.690 --> 00:08:45.292
我們提供給你一個很棒的方法

00:08:45.425 --> 00:08:47.528
來融合
這個活動環體驗

00:08:47.594 --> 00:08:51.598
到你的應用裏
通過iOS 9.3的Activity Rings API

00:08:54.201 --> 00:08:57.504
首先我們要開始
一個HKActivitySummary對象

00:08:59.506 --> 00:09:01.708
HKActivitySummary
代表的是

00:09:02.075 --> 00:09:05.012
在某一天的時間內
用戶的活動總量

00:09:05.512 --> 00:09:10.651
這包括了他們的熱量消耗
鍛鍊分鐘數和站立小時數

00:09:10.717 --> 00:09:12.152
以及他們設定的每個目標

00:09:15.322 --> 00:09:18.792
HKActivitySummary
是授權的一種獨特類型

00:09:19.293 --> 00:09:22.095
它不是HKObject
更像是一個特殊的只讀類型

00:09:22.162 --> 00:09:25.432
是你單獨從組件類型
請求的授權

00:09:26.667 --> 00:09:28.268
最後這一部分
十分重要

00:09:29.603 --> 00:09:32.840
HKActivitySummary
包含了一些HealthKit信息

00:09:32.906 --> 00:09:35.209
與HealthKit類型相同：
活動能量

00:09:35.475 --> 00:09:37.544
鍛鍊分鐘數
和站立小時數

00:09:38.612 --> 00:09:41.014
但這些都是以天爲單位累加

00:09:41.181 --> 00:09:43.383
所以
如果你想要做得

00:09:43.450 --> 00:09:45.485
更具體些 比如...

00:09:46.987 --> 00:09:50.324
更改用戶的Move ring
通過改寫活動能量的數據類型

00:09:50.691 --> 00:09:52.659
或者顯示精細糧食數據

00:09:52.726 --> 00:09:54.628
給這一天的活動

00:09:55.095 --> 00:09:57.030
這樣的話
你就需要請求

00:09:57.097 --> 00:09:58.932
單獨訪問每個成分類型

00:10:00.901 --> 00:10:03.937
由於ActivitySummary
對象代表的活動

00:10:04.004 --> 00:10:05.806
是某一天內的活動

00:10:05.873 --> 00:10:09.343
它可能 或許不能
對應24小時的時間段

00:10:09.910 --> 00:10:12.546
所以我們要指定
對應活動小結的日期

00:10:12.613 --> 00:10:14.281
通過使用
DateComponents對象

00:10:15.015 --> 00:10:17.050
那要怎麼做
就看下面這個例子

00:10:21.922 --> 00:10:24.992
假設我們想要獲取
今天的活動小結

00:10:25.526 --> 00:10:28.328
那麼就要使用
HKActivitySummaryQuery

00:10:29.863 --> 00:10:31.465
首先讓日曆

00:10:31.532 --> 00:10:34.468
對應今天創建
DateComponents對象

00:10:34.868 --> 00:10:39.540
使用規定的組件
時代 年 月 日

00:10:41.241 --> 00:10:44.077
接下來用這些組件
創建一個predicate對象

00:10:44.178 --> 00:10:46.880
這將我們的查詢
控制在活動小結裏

00:10:46.947 --> 00:10:48.415
日期與今天對應

00:10:49.783 --> 00:10:52.886
最後創建query
傳遞給predicate

00:10:53.153 --> 00:10:55.956
之後在這種情況下
處理單一的活動小結

00:10:56.023 --> 00:10:57.724
這會返回一個值

00:11:01.161 --> 00:11:03.363
以上就是如何
獲取活動小結數據

00:11:03.430 --> 00:11:05.966
但是最有意思的部分
是顯示環本身

00:11:06.033 --> 00:11:09.269
要做這個 我們要使用iOS的
HKActivityRingView

00:11:09.770 --> 00:11:13.841
或watchOS上類似的
WKInterfaceActivityRing

00:11:14.641 --> 00:11:15.742
外觀是這樣

00:11:15.809 --> 00:11:18.712
就像你想的那樣
它們用漂亮的動畫來顯示

00:11:18.779 --> 00:11:21.248
調出setActivitySummary
就能動了

00:11:24.785 --> 00:11:28.856
下面講幾個使用HKActivityRingView
和WKInterfaceActivityRing的技巧

00:11:30.224 --> 00:11:33.827
首先就像iOS和watchOS上的
健康和活動的應用那樣

00:11:34.561 --> 00:11:36.330
這個環在黑色背景上
最好看

00:11:36.396 --> 00:11:39.066
所以我們建議
你的應用也用類似的顯示

00:11:40.968 --> 00:11:43.937
第二 如果你的應用有
分享和交流的功能

00:11:44.004 --> 00:11:47.140
可以使用
HKActivitySummary的可寫屬性

00:11:47.307 --> 00:11:48.775
來架構你自己的對象

00:11:49.076 --> 00:11:53.080
並提供給HKActivityRingView
或者WKInterfaceActivityRing

00:11:53.480 --> 00:11:55.449
這樣就會顯示
另一個用戶的環形圖

00:11:55.516 --> 00:11:57.784
緊挨當前用戶的環形圖
在你自己的應用裏

00:12:00.354 --> 00:12:02.956
最後 當你使用
HKActivitySummaryQuery

00:12:03.023 --> 00:12:05.259
記住要使用
規定的DateComponents

00:12:05.325 --> 00:12:09.263
時代 年 月 日
在你的HKActivitySummaryQuery裏

00:12:11.098 --> 00:12:12.766
時間映射有時十分複雜

00:12:12.833 --> 00:12:16.170
所以如果你有任何使用日曆或
DateComponents的問題

00:12:16.236 --> 00:12:19.106
請參考上一次會議的精彩演講

00:12:22.843 --> 00:12:25.579
講了很多關於
授權和Activity Rings的信息

00:12:25.646 --> 00:12:27.514
現在來實際操作
通過快速的演示

00:12:28.448 --> 00:12:30.784
在右邊
有一個越來越流行的應用

00:12:30.851 --> 00:12:32.619
是給醫療小組用的
叫做LoopHealth

00:12:33.287 --> 00:12:34.555
這個應用有不一樣的功能

00:12:34.621 --> 00:12:37.424
但主界面都是dashboard
裏面有些很有用的信息

00:12:37.491 --> 00:12:39.726
比如說
你的醫生名字

00:12:39.793 --> 00:12:42.196
最近的預約
以及一些健康知識

00:12:43.564 --> 00:12:47.067
LoopHealth希望他們的病人
每天生活得更健康

00:12:47.134 --> 00:12:50.571
所以他們看到了一個好機會
就是能把Apple的Activity Rings

00:12:50.637 --> 00:12:51.905
帶入他們的界面

00:12:52.739 --> 00:12:54.441
這裏你看到
我們已經把

00:12:54.508 --> 00:12:57.945
一個HKActivityRingView
融入了應用的storyboard裏

00:12:58.245 --> 00:13:00.781
但是我們還沒有寫一個代碼
來鏈接到這個數據

00:13:00.981 --> 00:13:02.482
讓我們看看
這有多簡單

00:13:02.950 --> 00:13:06.086
在Xcode裏
有個DashboardViewController

00:13:06.153 --> 00:13:08.388
這個視圖控制器
是我們剛剛

00:13:08.589 --> 00:13:09.590
在LoopHealth裏看到的

00:13:10.357 --> 00:13:11.491
現在這裏很空

00:13:11.925 --> 00:13:13.927
但是我們的確有些
有用的信息可填

00:13:14.595 --> 00:13:16.496
你看到這裏
有一個IBOutlet

00:13:16.763 --> 00:13:19.800
被設置連接到應用裏已有的
activityRingView

00:13:21.134 --> 00:13:23.303
這裏我們導入HealthKitUI

00:13:23.370 --> 00:13:24.838
這是一個新的框架

00:13:24.905 --> 00:13:27.741
可在iOS的
HKActivityRingView裏找到

00:13:29.176 --> 00:13:30.644
最後在這個下面

00:13:30.711 --> 00:13:34.448
LoopHealth在應用代理中
設置了適用於全應用的HKHealthStore

00:13:34.515 --> 00:13:36.783
所以我們只要設置
一個簡單的計算屬性

00:13:36.850 --> 00:13:38.919
能方便我們檢索
需要的東西

00:13:41.288 --> 00:13:44.157
好的 如果我們想要
在應用中顯示活動小結

00:13:44.224 --> 00:13:46.827
第一件事就是
請求可讀許可

00:13:46.894 --> 00:13:48.228
給HKActivitySummary

00:13:49.196 --> 00:13:50.664
鑑於我們在讀取健康數據

00:13:50.731 --> 00:13:53.100
所以我們需要
包含一個使用說明

00:13:53.267 --> 00:13:54.968
那麼就讓我們去
info.plist文件

00:13:56.336 --> 00:13:57.437
添加一個新的key

00:13:58.972 --> 00:14:02.276
我們需要的這個key叫做
NSHealthShareUsageDescription

00:14:02.342 --> 00:14:05.479
這裏用簡易英語寫着
Privacy Health Share

00:14:09.383 --> 00:14:13.754
很好 然後只要加入
一個簡單的使用說明

00:14:13.820 --> 00:14:14.655
設置全部完成

00:14:15.722 --> 00:14:17.791
現在就可以回到
DashboardViewController

00:14:17.858 --> 00:14:20.661
再寫代碼
實際請求授權

00:14:21.828 --> 00:14:24.698
由於我們想讓這個初始畫面
能立刻顯示給用戶

00:14:24.765 --> 00:14:28.101
而每次用戶轉到dashboard的時候
都要更新環形圖

00:14:28.168 --> 00:14:31.138
要做這個最好是在
viewDidAppear方法裏

00:14:33.240 --> 00:14:34.341
那麼我把它拉到這裏

00:14:35.609 --> 00:14:37.411
在調出super後

00:14:37.611 --> 00:14:40.881
注意我們在HKHealthStore上調出
RequestAuthorization

00:14:41.381 --> 00:14:43.016
傳遞進activitySummaryType

00:14:43.684 --> 00:14:46.887
然後作爲返回
調出updateActivitySummary

00:14:47.654 --> 00:14:50.157
是爲了真正獲取
並更新數據

00:14:50.224 --> 00:14:51.491
現在就來執行這個代碼吧

00:14:55.996 --> 00:14:58.432
這就是
updateActivitySummary的基本構成

00:14:58.799 --> 00:15:00.100
我們這裏要做的

00:15:00.167 --> 00:15:03.170
是創建一個
HKActivitySummaryQuery

00:15:03.770 --> 00:15:05.873
請求今天的活動小結

00:15:05.939 --> 00:15:09.409
然後把這個活動小結定義到
HKActivityRingView

00:15:09.543 --> 00:15:10.410
在收到這個小結後

00:15:11.678 --> 00:15:14.848
首先 對應今天 創建一個
DateComponents對象

00:15:16.450 --> 00:15:19.887
由於DateComponents
只作用於一個特定的日曆

00:15:19.953 --> 00:15:22.089
我們就要把
需要的日曆對象

00:15:22.789 --> 00:15:24.424
放回組件對象

00:15:26.393 --> 00:15:27.528
呃 好了

00:15:28.362 --> 00:15:31.398
下面來創建predicate
通過那個組件對象

00:15:33.433 --> 00:15:36.403
一旦有了這個predicate
就可以創建query

00:15:36.470 --> 00:15:39.339
傳遞給predicate
然後在返回中

00:15:39.406 --> 00:15:42.142
獲取今天的活動小結

00:15:44.611 --> 00:15:46.146
現在只要有了這個小結

00:15:46.213 --> 00:15:49.550
我們要做的就是調度回主隊列
更新UI

00:15:51.351 --> 00:15:56.156
然後調出setActivitySummary
讓活動環變成動畫視圖

00:15:57.891 --> 00:16:01.061
現在有了query
剩下的就是去執行

00:16:03.864 --> 00:16:04.765
就這麼多

00:16:05.365 --> 00:16:07.901
那麼讓我們來
運行看看怎麼樣

00:16:23.684 --> 00:16:25.352
很好
那麼你看到的第一個東西

00:16:25.419 --> 00:16:28.121
是我們在請求訪問
活動小結

00:16:28.388 --> 00:16:31.091
Health正請求用戶
允許授權

00:16:33.493 --> 00:16:35.762
我們允許它讀取
活動數據類型

00:16:35.829 --> 00:16:37.965
這個時候
注意下屏幕底部

00:16:38.031 --> 00:16:40.501
有個使用說明
是爲讀取健康數據時添加的

00:16:40.567 --> 00:16:42.035
現在就在這裏
顯示給用戶了

00:16:42.536 --> 00:16:44.338
值得注意的是
在一個真正的應用裏

00:16:44.404 --> 00:16:46.173
我們要確保
這個說明已經本地化

00:16:46.240 --> 00:16:49.343
所以我們要把它放進
info.plist.strings文件

00:16:51.912 --> 00:16:53.514
我要在這裏允許授權

00:16:55.749 --> 00:16:57.484
就像這樣
我們看到這個活動環

00:16:57.551 --> 00:16:59.086
就在合適的地方
漂亮的動起來

00:17:09.096 --> 00:17:10.063
就是這麼簡單

00:17:10.130 --> 00:17:12.332
就將活動環加入了
你的應用

00:17:12.398 --> 00:17:13.934
一定要檢查API

00:17:14.601 --> 00:17:16.637
下面 我把舞臺交給
我的同事Jeff

00:17:16.703 --> 00:17:19.573
他會爲你們講述
一個 iOS X最棒的新功能

00:17:25.979 --> 00:17:26.813
謝謝你 Matt

00:17:27.181 --> 00:17:28.281
大家早上好

00:17:28.649 --> 00:17:30.117
我是Joefrey Kibuule

00:17:30.584 --> 00:17:31.752
與Matt是同事

00:17:31.818 --> 00:17:34.054
我是iOS軟件工程師
在Health團隊工作

00:17:34.855 --> 00:17:37.424
今天我很感到很自豪
來爲你們介紹

00:17:37.491 --> 00:17:39.393
iOS 10的一個新功能

00:17:39.626 --> 00:17:40.527
健康記錄

00:17:41.328 --> 00:17:43.864
健康記錄提供了
一個簡單便攜的方法

00:17:43.931 --> 00:17:46.500
讓你的私人信息
能隨你而動

00:17:47.100 --> 00:17:48.268
就在你的手機上

00:17:50.237 --> 00:17:51.939
由現在的經驗來看

00:17:52.005 --> 00:17:54.842
如果用戶去看醫生

00:17:54.908 --> 00:17:57.644
並要健康記錄的話
拿到的是這個

00:17:58.712 --> 00:18:00.981
一大疊文件
這會很麻煩

00:18:01.281 --> 00:18:03.584
如果你想從中
找一個特定的信息的話

00:18:05.319 --> 00:18:06.153
再近一點的時間

00:18:06.220 --> 00:18:09.289
健康機構
會給病人提供這個

00:18:10.224 --> 00:18:14.494
存有電子信息的光盤
使用起來不直觀

00:18:17.197 --> 00:18:21.401
但現在iOS有了健康記錄
我們就能解決這個問題

00:18:23.937 --> 00:18:26.106
通過我們的努力
推出的這個功能

00:18:26.273 --> 00:18:28.942
爲你的應用
開啓了新的可能

00:18:29.676 --> 00:18:31.979
尤其是與健康記錄的
交流與互動

00:18:34.448 --> 00:18:37.751
事實上在美國
使用這些API

00:18:37.818 --> 00:18:40.988
可以幫助健康機構
遵守新的規定

00:18:41.455 --> 00:18:45.392
就是要求他們給病人更多權利
掌握他們自己的健康數據

00:18:48.161 --> 00:18:49.830
首先
做個概述

00:18:50.564 --> 00:18:53.500
iOS健康記錄
是一個涵蓋性術語

00:18:53.600 --> 00:18:56.036
代表的是
各種不同病人就診信息

00:18:56.236 --> 00:18:58.172
由健康機構生成

00:18:59.873 --> 00:19:03.110
今天我們特別爲
健康檔案添加了支持

00:19:04.545 --> 00:19:08.849
用標準的機器可讀的XML
代表特定的病人就診信息

00:19:10.017 --> 00:19:11.151
這些包括

00:19:11.518 --> 00:19:12.719
病人就診總結

00:19:13.453 --> 00:19:15.022
持續護理記錄

00:19:15.422 --> 00:19:18.058
以及手術記錄
還有很多

00:19:19.927 --> 00:19:23.030
我們支持
國際HL-7 CDA標準

00:19:23.096 --> 00:19:26.066
來完成
與大量不同提供者的互操作

00:19:28.435 --> 00:19:32.306
這些文件可以
在病人的在線健康門戶裏找到...

00:19:32.973 --> 00:19:37.911
並且能通過Safari和郵件導入
現在所有應用都可以導入了

00:19:39.947 --> 00:19:43.517
這些文件的保存
跟其他HealthKit數據一樣

00:19:44.351 --> 00:19:47.855
安全的加密在
你的iOS設備上

00:19:49.957 --> 00:19:52.025
接下來
我們講講許可

00:19:53.093 --> 00:19:56.563
由於每份健康文件裏
都包含着大量的信息

00:19:56.897 --> 00:20:01.568
相比於HealthKit的其他數據類型
我們給用戶更多的控制力

00:20:02.903 --> 00:20:05.639
訪問許可
是基於每個文件的

00:20:05.706 --> 00:20:07.808
不僅僅是
健康文件數據類型

00:20:10.210 --> 00:20:11.945
在右邊你看到

00:20:12.012 --> 00:20:14.081
我們顯示的這個UI
可以讓用戶

00:20:14.147 --> 00:20:17.885
在授權你的應用之前
瀏覽和選擇文件

00:20:20.187 --> 00:20:22.856
這個UI會出現在
任何你想查詢文件的時候

00:20:22.923 --> 00:20:24.258
以及有新文件可用的時候

00:20:25.559 --> 00:20:26.727
如果要查詢文件

00:20:27.528 --> 00:20:29.162
並且沒有任何更改

00:20:30.631 --> 00:20:32.699
我們就不會
顯示這個UI給用戶

00:20:32.766 --> 00:20:35.502
那麼你的查詢
就會立刻返回結果

00:20:41.508 --> 00:20:42.676
如果查詢文件是在

00:20:42.743 --> 00:20:44.878
應用在後臺運行的時候

00:20:45.879 --> 00:20:49.416
我們永遠不會彈出UI
來授權新文件的許可

00:20:50.017 --> 00:20:52.386
HealthKit確保了
用戶總是知道

00:20:52.452 --> 00:20:54.888
他們何時授予你的應用
訪問文件的權限

00:20:55.289 --> 00:20:56.423
在第一次需要授權的時候

00:20:59.193 --> 00:21:01.995
下面來講講
如何在HealthKit創建文件

00:21:04.531 --> 00:21:07.534
要保存文件到HealthKit
你可保存一個原始XML

00:21:07.601 --> 00:21:10.971
到新的
HKCDADocumentSample類型

00:21:12.873 --> 00:21:16.243
我們會驗證創建
以保證它符合標準

00:21:16.510 --> 00:21:18.779
並且會在
失敗的時候報錯

00:21:21.748 --> 00:21:26.954
我們會自動提取
標題 病人 監護人和作者名字

00:21:27.020 --> 00:21:29.089
無論何時文件被
保存到HealthKit

00:21:29.223 --> 00:21:32.159
以便更快的查詢這些區域

00:21:32.392 --> 00:21:34.394
而不需要讀取整個文件

00:21:35.996 --> 00:21:38.065
我們來看看
這個例子的代碼

00:21:38.899 --> 00:21:42.135
我們要用documentData
並轉換爲Data對象

00:21:42.603 --> 00:21:44.371
通常這個XML的來源

00:21:44.438 --> 00:21:46.273
是一個健康機構的服務器

00:21:47.574 --> 00:21:50.677
接着就要創建一個新的
HKCDADocumentSample

00:21:50.744 --> 00:21:52.346
傳遞到Data對象

00:21:52.913 --> 00:21:54.581
定義合適的日期

00:21:55.048 --> 00:21:58.218
和任何附加元數據
跟其他HKSample一樣

00:21:59.553 --> 00:22:02.122
之後我們要保存這個文件
到healthStore

00:22:02.823 --> 00:22:03.657
完成了

00:22:03.924 --> 00:22:06.560
現在你的健康文件
就保存到HealthKit裏了

00:22:06.627 --> 00:22:08.228
並可以在其他應用上使用

00:22:08.295 --> 00:22:10.564
或者直接讓用戶
用Health應用瀏覽

00:22:13.267 --> 00:22:16.069
現在 我們來講講
如何在HealthKit裏查詢文件

00:22:17.771 --> 00:22:21.542
鑑於HKCDADocumentSample
是HKSample的子類

00:22:22.376 --> 00:22:24.912
現有的查詢對象
對你來說已經很熟悉

00:22:24.978 --> 00:22:26.947
它們會繼續運行
跟你想的一樣

00:22:28.215 --> 00:22:30.651
但是 你要使用新的
HKDocumentQuery

00:22:30.717 --> 00:22:32.419
去獲取原始的XML

00:22:32.886 --> 00:22:34.454
獲取原始XML成本很高

00:22:34.521 --> 00:22:37.057
我們只在有明確要求時 才這麼做

00:22:39.793 --> 00:22:41.728
我們提供predicate支持

00:22:41.795 --> 00:22:44.431
以便查詢自動提取的域

00:22:47.734 --> 00:22:49.369
最後 要記住

00:22:49.903 --> 00:22:52.206
由於HKDocumentSamples
不可更改

00:22:52.272 --> 00:22:56.443
對之前樣本的更改信息
被看作新的樣本

00:22:58.745 --> 00:23:00.113
現在我們看個例子

00:23:00.180 --> 00:23:02.449
如何查詢
HealthKit裏的文件

00:23:02.783 --> 00:23:05.252
在這個例子裏
我們要查詢

00:23:05.319 --> 00:23:06.420
用戶保存的所有文件

00:23:07.821 --> 00:23:09.690
首先我們要獲得
documentType

00:23:09.790 --> 00:23:12.159
我們要傳遞
CDA identifier給

00:23:12.226 --> 00:23:15.796
HKObjectType上的
forIdentifier方法

00:23:18.298 --> 00:23:20.501
再創建
HKDocumentQuery

00:23:21.268 --> 00:23:24.338
你要留出額外字段
用來篩選和排列文件

00:23:24.404 --> 00:23:26.707
讓它們按照你想要的順序返回

00:23:27.908 --> 00:23:29.443
然後執行查詢

00:23:29.510 --> 00:23:32.045
以便獲取
HKCDADocumentSamples

00:23:32.112 --> 00:23:33.080
從HealthKit返回

00:23:35.215 --> 00:23:37.584
我要強調一點
在這個特定的例子裏

00:23:37.651 --> 00:23:40.020
就是includeDocumentData定義爲假

00:23:40.254 --> 00:23:41.755
要定義爲真

00:23:41.822 --> 00:23:44.491
只能在你需要
完整原始XML文件數據的時候

00:23:47.594 --> 00:23:49.596
現在我們來講一些
最佳的操作

00:23:49.663 --> 00:23:52.232
在處理HealthKit健康文件時

00:23:53.433 --> 00:23:55.235
首先 檢查驗證錯誤

00:23:55.302 --> 00:23:58.105
在每次創建KCDADocumentSample的時候

00:23:59.439 --> 00:24:01.975
這個報錯告訴你
我們爲何不能轉換

00:24:02.042 --> 00:24:04.545
原始XML到可用樣本

00:24:07.181 --> 00:24:09.149
下面 你要用Health應用驗證

00:24:09.216 --> 00:24:12.619
你導入的文件是否正確保存

00:24:12.686 --> 00:24:14.955
以及自動提取的域是否存在

00:24:15.722 --> 00:24:16.723
這樣你就知道

00:24:16.790 --> 00:24:19.293
基於這些自動提取域的查詢

00:24:19.359 --> 00:24:21.395
所返回的正確樣本
是否符合你的預期

00:24:23.330 --> 00:24:26.800
最後請求原始XML數據
只能在必要的時候

00:24:27.134 --> 00:24:30.204
不發出請求的查詢
包括文件數據

00:24:30.871 --> 00:24:33.106
會返回
自動提取的域

00:24:33.173 --> 00:24:35.676
這可能是所有你
和你用戶所需要的

00:24:35.742 --> 00:24:37.945
用來唯一識別
HealthKit文件的工具

00:24:40.347 --> 00:24:43.183
要了解更多
HL-7 CDA標準的信息

00:24:43.250 --> 00:24:44.618
請訪問屏幕上的這個鏈接

00:24:48.689 --> 00:24:50.157
現在我們來換個話題

00:24:50.224 --> 00:24:52.459
給大家一些處理數據的基本指南

00:24:55.996 --> 00:24:58.665
你知道 HealthKit實際上
是個中央存儲庫

00:24:58.732 --> 00:25:01.702
在這裏你的應用和其他應用
可以幫助用戶

00:25:01.768 --> 00:25:03.570
管理他的健康記錄數據

00:25:05.205 --> 00:25:06.540
你在雲服務上的應用

00:25:06.607 --> 00:25:09.743
也許能直接連接到
雲服務上的其他應用

00:25:10.110 --> 00:25:12.646
這時就需要一些特別的考慮

00:25:13.213 --> 00:25:16.016
這裏我主要探討三點

00:25:16.083 --> 00:25:17.618
有關數據處理的問題

00:25:18.652 --> 00:25:20.187
第一 同步數據

00:25:21.054 --> 00:25:23.123
第二 追蹤更改的數據

00:25:23.891 --> 00:25:26.193
第三 數據遷移

00:25:27.427 --> 00:25:29.162
先看第一點 數據同步

00:25:30.163 --> 00:25:32.399
你要一直使用
HKAnchoredObjectQuery

00:25:32.466 --> 00:25:36.069
以便用戶處理
新樣本和已刪除的樣本

00:25:36.136 --> 00:25:38.038
從而與HealthKit更新一致

00:25:39.740 --> 00:25:41.875
Anchor像一個書籤
來標記

00:25:41.942 --> 00:25:44.211
最後一次請求查詢
以獲取數據

00:25:44.778 --> 00:25:45.946
你可以保存這個anchor

00:25:46.013 --> 00:25:49.183
方便下一次創建
新的HKAnchoredObjectQuery

00:25:51.518 --> 00:25:53.520
你可以給每個樣本類型
開放一個查詢

00:25:53.587 --> 00:25:54.755
只要你感興趣

00:25:55.822 --> 00:25:57.824
然後傳遞一個備選的更新處理器

00:25:57.891 --> 00:26:01.228
以便持續處理
新樣本和刪除的樣本

00:26:01.295 --> 00:26:03.797
不需要重複查詢HealthKit

00:26:05.299 --> 00:26:07.701
但是 要是爲了更好的用戶體驗

00:26:07.868 --> 00:26:11.171
爲了在應用第一次啓動時
能顯示新的UI

00:26:11.438 --> 00:26:13.974
或者是爲了讓你的雲數據保持同步

00:26:14.575 --> 00:26:17.878
那麼應用必須也要處理
新樣本和刪除的樣本

00:26:17.945 --> 00:26:19.646
即使當前不在運行狀態

00:26:20.447 --> 00:26:22.416
這就是
HKObserverQuery

00:26:22.482 --> 00:26:25.285
和HKAnchoredObjectQuery
一起發揮作用的地方

00:26:26.420 --> 00:26:28.322
我們來看一個圖表例子

00:26:30.757 --> 00:26:32.793
那麼這裏有四個主要步驟

00:26:33.527 --> 00:26:35.229
來處理後臺更新

00:26:35.295 --> 00:26:37.097
分爲兩個階段

00:26:37.464 --> 00:26:38.966
設置和執行

00:26:39.700 --> 00:26:40.968
第一步

00:26:41.034 --> 00:26:43.203
註冊後臺更新

00:26:43.337 --> 00:26:46.306
這要用於
每個你要操作的樣本類型

00:26:47.040 --> 00:26:50.177
第二步
打開ObserverQuery

00:26:51.078 --> 00:26:51.912
設置完成後

00:26:52.880 --> 00:26:54.381
ObserverQuery同時監測

00:26:54.448 --> 00:26:56.617
HealthKit裏的
新樣本和刪除的樣本

00:26:59.152 --> 00:27:02.222
當新樣本生成時
你就要開始第三步

00:27:02.689 --> 00:27:04.691
你會從observerQuery
收到一個回調

00:27:04.758 --> 00:27:06.960
然後執行
HKAnchoredObjectQuery

00:27:07.027 --> 00:27:09.463
來獲取新樣本
和已刪除的樣本

00:27:11.298 --> 00:27:12.666
那麼第四步

00:27:13.300 --> 00:27:15.402
調出observerQuery的
完成處理器

00:27:15.469 --> 00:27:16.637
以便告訴HealthKit

00:27:16.703 --> 00:27:19.406
你已經完成對
後臺更新的處理和傳送

00:27:20.407 --> 00:27:23.277
接着你會繼續循環
第三步和第四步

00:27:23.343 --> 00:27:25.212
以便與HealthKit保持更新

00:27:28.849 --> 00:27:32.452
現在 我們來一步一步看代碼

00:27:33.887 --> 00:27:37.257
第一步
要註冊後臺更新

00:27:37.558 --> 00:27:40.194
每次啓動應用的時候
都必須這麼做

00:27:40.260 --> 00:27:44.198
所以我們建議你在應用中寫
didFinishLaunchingWithOptions

00:27:45.599 --> 00:27:48.702
然後你從HKObjectType
獲取step的quantityType

00:27:49.703 --> 00:27:52.840
然後傳遞給HK Health Store的
enableBackgroundDelivery

00:27:52.906 --> 00:27:56.410
以便傳遞stepsType
以及你想要更新的頻率

00:27:57.444 --> 00:28:00.514
請注意
後臺傳輸時間沒有保證

00:28:03.383 --> 00:28:06.954
應用要選擇
它能處理的最長頻率

00:28:07.120 --> 00:28:09.790
以便保護
用戶的電池壽命

00:28:11.091 --> 00:28:14.061
還要注意的是
這個API是iOS特定的

00:28:14.428 --> 00:28:17.231
後臺更新
在watchOS上不可用

00:28:19.766 --> 00:28:20.601
第二步

00:28:20.667 --> 00:28:22.436
傳遞
step的quantityType

00:28:22.503 --> 00:28:25.739
創建HKObserverQuery

00:28:27.407 --> 00:28:29.743
這裏有
自定義的updateSteps方法

00:28:30.077 --> 00:28:32.412
我們可以用它來獲取

00:28:32.679 --> 00:28:35.649
HealthKit檢測到的
新樣本和刪除的樣本

00:28:36.350 --> 00:28:38.218
之後就要
執行這個查詢

00:28:39.052 --> 00:28:41.221
就這樣
設置階段完成了

00:28:41.288 --> 00:28:44.525
HealthKit就可以監測
HealthKit中的新樣本和已刪除的樣本

00:28:45.425 --> 00:28:46.260
那麼...

00:28:46.360 --> 00:28:49.062
在我走過舞臺
生成健康樣本

00:28:49.763 --> 00:28:50.764
是步數樣本的時候

00:28:53.233 --> 00:28:55.669
我們深入瞭解一下
updateSteps方法

00:28:55.736 --> 00:28:57.171
好讓我們知道要如何做

00:28:57.237 --> 00:28:59.139
才能獲取新樣本和刪除的樣本

00:28:59.573 --> 00:29:02.509
首先來創建
一個HKAnchoredObjectQuery

00:29:02.943 --> 00:29:04.144
傳遞給stepsType

00:29:04.478 --> 00:29:07.481
同樣有一個predicate
是額外字段

00:29:07.548 --> 00:29:10.784
讓你能篩選出
你想要的那個樣本

00:29:13.520 --> 00:29:15.255
然後調出
handleSteps方法

00:29:15.322 --> 00:29:17.658
以處理
新樣本和刪除的樣本

00:29:21.395 --> 00:29:22.496
更新anchor

00:29:22.563 --> 00:29:25.499
以便下一次創建
HKAnchoredObjectQuery

00:29:27.434 --> 00:29:29.703
然後調出
completionHandler

00:29:29.770 --> 00:29:32.406
宣佈獲取新數據進程已完成

00:29:34.741 --> 00:29:36.076
之後執行查詢

00:29:37.511 --> 00:29:39.246
最後 第四步

00:29:39.313 --> 00:29:42.783
調出completionHandler
這是observerQuery給我們的

00:29:43.617 --> 00:29:45.853
是爲了讓HealthKit知道
我們已經收到

00:29:45.919 --> 00:29:48.088
並且處理了後臺更新

00:29:48.589 --> 00:29:49.423
就是這樣

00:29:49.489 --> 00:29:52.092
現在你的應用啓動時
就會有新的UI

00:29:52.192 --> 00:29:53.861
然後同步雲數據

00:29:54.828 --> 00:29:56.296
按照這些步驟

00:29:58.899 --> 00:30:01.201
下面來講講追蹤更改數據

00:30:02.002 --> 00:30:03.470
你要使用UUID

00:30:03.537 --> 00:30:06.039
來追蹤唯一的HKObjects

00:30:10.410 --> 00:30:13.680
獨特的識別符要定義在
每次創建對象的時候

00:30:13.747 --> 00:30:15.782
而且要一直存在於
這個樣本的生命週期

00:30:17.951 --> 00:30:19.853
將UUID記錄到
你的個人數據庫

00:30:19.920 --> 00:30:20.754
或者...

00:30:21.221 --> 00:30:24.124
同時存到本地設備
和雲端

00:30:24.191 --> 00:30:26.994
這樣你就能知道
哪個樣本是一樣的

00:30:28.662 --> 00:30:33.166
當樣本被刪除的時候
以Health應用的鍛鍊爲例

00:30:33.834 --> 00:30:36.470
你要一直監測這些更改

00:30:36.570 --> 00:30:38.172
以確保那些相同樣本
也會被刪掉

00:30:38.238 --> 00:30:41.008
同樣也是在本地設備
和遠程雲端

00:30:43.911 --> 00:30:48.482
還要保證以後的同步操作
不會重新添加這些已經刪除的樣本

00:30:50.551 --> 00:30:53.287
這可能會產生兩個問題
我要重點講一下

00:30:53.353 --> 00:30:56.723
關於如何避免重複

00:30:57.391 --> 00:30:59.526
第一個就是預填充數據

00:30:59.860 --> 00:31:02.529
預填充數據是
抱歉 加載

00:31:03.030 --> 00:31:05.732
預填充數據是一個好方法
讓你在加載過程中

00:31:05.799 --> 00:31:07.935
節省用戶的時間
通過拉取那些

00:31:08.001 --> 00:31:09.837
已存在HealthKit裏的信息

00:31:11.471 --> 00:31:13.473
用戶可以驗證數據

00:31:13.540 --> 00:31:16.243
在HealthKit裏
需要的話也可更改

00:31:17.911 --> 00:31:20.681
但是問題在於
如何保存未更改的值

00:31:21.782 --> 00:31:25.152
要保證再次保存數據
是用戶的意願

00:31:28.856 --> 00:31:32.826
另外一個潛在的問題
就是數據攝取

00:31:32.893 --> 00:31:34.661
無論從其他應用
還是HealthKit

00:31:35.929 --> 00:31:38.398
記住只能選擇
同一個來源的信息

00:31:38.465 --> 00:31:40.701
並且最適合你的應用

00:31:41.568 --> 00:31:45.239
HealthKit有很棒的隱私性
這是我們的用戶已經認可的

00:31:45.305 --> 00:31:48.542
但是隻有你知道哪個來源
對你的應用最好

00:31:50.978 --> 00:31:53.747
一定不要保存
其他應用的數據

00:31:53.814 --> 00:31:54.815
以他們的名義

00:31:56.183 --> 00:31:59.786
只寫一遍你自己的數據
避免重複數據

00:31:59.853 --> 00:32:03.423
通過明確
哪個應用有權編寫

00:32:03.991 --> 00:32:06.326
這個規則有一個特別的例外

00:32:06.393 --> 00:32:08.262
有時候複製是有意的

00:32:09.496 --> 00:32:12.065
比如
數據來自多個來源的時候

00:32:13.734 --> 00:32:17.271
步數數據不僅
由用戶的手機生成

00:32:17.337 --> 00:32:18.705
還會由Apple Watch生成

00:32:20.974 --> 00:32:25.179
你可以使用HKStatisticsQuery
和HKStatisticsCollectionQuery

00:32:25.245 --> 00:32:28.115
來自動消重

00:32:28.182 --> 00:32:32.252
按照Health應用中
首選數據來源排列

00:32:32.586 --> 00:32:35.522
這樣的話
用戶體驗就會連貫流暢

00:32:35.656 --> 00:32:38.292
健康數據視圖
在整個生態環境裏都一致

00:32:39.960 --> 00:32:42.062
現在我來講講
數據遷移

00:32:42.563 --> 00:32:45.933
假設你發起了
一個新的Bluetooth體溫計

00:32:45.999 --> 00:32:47.501
和可把數據寫入HealthKit的應用

00:32:48.268 --> 00:32:50.871
你的應用上架App Store
已經幾天了

00:32:50.938 --> 00:32:52.673
但是用戶發現了一個問題

00:32:53.340 --> 00:32:54.241
在某些情況下

00:32:54.675 --> 00:32:57.778
本來要保存
98華氏度

00:32:58.579 --> 00:33:01.315
實際卻存的是
98攝氏度

00:33:01.648 --> 00:33:03.050
這溫度有點高

00:33:04.051 --> 00:33:04.885
這種情況下

00:33:04.952 --> 00:33:08.422
我們就知道如何遷移數據
來解決這個問題

00:33:08.822 --> 00:33:11.992
我們首先要
找到舊的樣本

00:33:13.560 --> 00:33:14.761
寫一個新樣本

00:33:14.828 --> 00:33:17.197
一定要更新
存在別處的UUID

00:33:19.099 --> 00:33:20.834
然後刪除舊樣本

00:33:23.103 --> 00:33:25.606
現在有幾個新事項
關於數據流動

00:33:25.672 --> 00:33:27.374
在iPhone和
Apple Watch之間

00:33:28.876 --> 00:33:32.880
從iOS 9.3開始
用戶手機產生的數據

00:33:32.946 --> 00:33:35.382
現在會同步於所有
與之匹配的Apple Watch

00:33:35.516 --> 00:33:37.317
Apple Watch現在反映的是

00:33:37.384 --> 00:33:40.954
存在HealthKit裏的
最新的健康數據

00:33:42.589 --> 00:33:43.991
爲了實現這個任務

00:33:44.291 --> 00:33:46.260
樣本會定期修整

00:33:46.326 --> 00:33:49.263
基於其在Apple Watch上的
結束日期

00:33:52.766 --> 00:33:54.201
所以一定要保存樣本

00:33:54.268 --> 00:33:57.337
特別是HKHealthStore
最早許可之後的樣本數據

00:33:57.871 --> 00:34:00.240
這是爲了保證
你的樣本能正確地保存

00:34:00.641 --> 00:34:03.110
並同步到用戶的設備

00:34:05.279 --> 00:34:07.714
最後
同步的時間沒有保證

00:34:08.916 --> 00:34:12.819
所以你的數據要保存在iPhone
或Apple Watch上

00:34:13.387 --> 00:34:14.221
不能兩個都存

00:34:18.292 --> 00:34:19.927
我現在把舞臺交還給Matt

00:34:19.993 --> 00:34:21.995
由他來最後
總結一下這場演講

00:34:22.129 --> 00:34:24.498
謝謝大家
好好享受 WWDC 吧

00:34:30.337 --> 00:34:31.170
謝謝你 Jeff

00:34:32.072 --> 00:34:32.906
在總結之前

00:34:33.106 --> 00:34:36.109
我想再着重講
一個很棒的輔助特性

00:34:36.176 --> 00:34:38.745
這是iOS 10和watchOS 3中
全新的特性

00:34:40.614 --> 00:34:41.614
輪椅輔助

00:34:43.382 --> 00:34:46.553
輔助功能是Apple
十分看重的部分

00:34:47.254 --> 00:34:50.456
所有的用戶
都應當享受我們的產品

00:34:50.524 --> 00:34:52.626
和最極致的體驗

00:34:53.092 --> 00:34:57.063
這樣強大的活動追蹤體驗
在Apple Watch也不例外

00:34:58.465 --> 00:35:02.836
iOS 10和watchOS 3就
包括了這種強大的運動跟蹤功能

00:35:02.903 --> 00:35:06.139
它可以自動記錄數據
對輪椅使用者十分有用

00:35:06.773 --> 00:35:09.676
現在你就可以
使用並記錄這些類型

00:35:09.743 --> 00:35:11.612
在與HealthKit互動的時候

00:35:14.314 --> 00:35:16.517
首先
這是個新的特性數據類型

00:35:16.683 --> 00:35:17.885
HKWheelchairUse

00:35:17.951 --> 00:35:20.354
它定義了
用戶是否使用輪椅

00:35:20.754 --> 00:35:23.857
它的值可以是
是 否或不確定

00:35:25.592 --> 00:35:28.629
然後我們有一些新的數量類型
專門針對輪椅使用者

00:35:28.762 --> 00:35:31.765
其中包括
輪椅移動距離和推動次數

00:35:31.832 --> 00:35:33.567
你可想象成是步數

00:35:35.369 --> 00:35:39.106
最後我們具備對輪椅使用者十分有用的
新的鍛鍊類型

00:35:39.306 --> 00:35:42.943
這些包括
輪椅的步行速度和跑動速度

00:35:47.047 --> 00:35:49.183
當輪椅使用者
佩戴Apple Watch時

00:35:49.249 --> 00:35:51.618
watch會自動記錄
推輪椅的次數

00:35:51.685 --> 00:35:53.220
並寫入新的推動次數類型

00:35:54.354 --> 00:35:55.189
另外

00:35:55.622 --> 00:35:58.392
站立環形圖中
對應站立小時數的數據類型

00:35:58.458 --> 00:36:00.360
變成了轉動小時數

00:36:01.662 --> 00:36:05.332
要注意 輪椅走的距離只能在

00:36:05.399 --> 00:36:06.800
輪椅運動時 自動記錄

00:36:07.434 --> 00:36:08.569
還要注意

00:36:09.069 --> 00:36:12.005
用戶的輪椅狀態
會隨着時間改變

00:36:12.539 --> 00:36:15.442
這十分重要
尤其當你要查詢歷史數據的時候

00:36:15.776 --> 00:36:18.011
這種情況下
你要保證同時查詢

00:36:18.111 --> 00:36:21.281
輪椅類型和非輪椅類型

00:36:21.348 --> 00:36:23.383
這樣就不會遺漏大段的

00:36:23.450 --> 00:36:25.252
用戶歷史信息

00:36:27.054 --> 00:36:29.857
總的來說
我們一直努力保證

00:36:29.923 --> 00:36:33.060
我們所有的產品和體驗
能爲所有人服務

00:36:33.393 --> 00:36:34.228
你也是

00:36:34.695 --> 00:36:35.929
我們強烈建議你

00:36:35.996 --> 00:36:38.131
去考慮
這一十分重要的用戶羣

00:36:38.432 --> 00:36:42.302
通過在你的應用裏支持並提供
這種輪椅數據類型

00:36:46.573 --> 00:36:48.208
我們今天講了很多

00:36:48.442 --> 00:36:49.276
現在回顧一下

00:36:51.178 --> 00:36:54.748
授權十分重要
對保護用戶隱私而言

00:36:54.915 --> 00:36:58.051
但是保證好的用戶體驗
絕對是重中之重

00:36:59.152 --> 00:37:00.521
時刻記得授權

00:37:00.587 --> 00:37:03.390
在開發應用時
而且一定要經常測試

00:37:05.225 --> 00:37:08.262
然後我們講瞭如何應用
Apple的健康與健身生態系統

00:37:08.328 --> 00:37:10.931
通過把活動環
帶入你的應用

00:37:10.998 --> 00:37:12.666
通過Activity Rings API

00:37:14.935 --> 00:37:18.438
不管何時與HealthKit互動
都要仔細處理所有情況

00:37:18.505 --> 00:37:22.042
正確的同步
刪除 複製這些數據

00:37:22.242 --> 00:37:24.912
以保證用戶的數據
始終精確

00:37:25.179 --> 00:37:26.647
並始終符合你的預期

00:37:28.815 --> 00:37:32.119
最後不要忘了
好好利用這些新出的好功能

00:37:32.186 --> 00:37:35.556
就在今年發佈的
iOS 10和watchOS 3中

00:37:35.622 --> 00:37:37.291
特別是輪椅輔助

00:37:37.424 --> 00:37:39.526
這是我們認爲
十分有意義的功能

00:37:42.930 --> 00:37:45.766
如果要了解更多
關於我們今天所講的話題

00:37:45.832 --> 00:37:48.035
又或者你有任何問題
請訪問這個網站

00:37:48.101 --> 00:37:50.337
這裏有更多資源可用

00:37:52.506 --> 00:37:55.142
也不要忘了
瞭解下其他相關的演講

00:37:55.909 --> 00:37:58.111
還有往年的精彩演講

00:37:58.178 --> 00:38:00.047
會讓你更快了解HealthKit

00:38:00.414 --> 00:38:02.115
感謝你們
創造了這些出色的應用

00:38:02.182 --> 00:38:03.951
讓我們的用戶
生活更加健康

00:38:04.017 --> 00:38:06.119
希望你喜歡WWDC的其他演講