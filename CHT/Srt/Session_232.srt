00:00:19.386 --> 00:00:21.722
國際用戶界面的新功能

00:00:21.922 --> 00:00:24.024
早上好！歡迎大家！

00:00:28.195 --> 00:00:31.164
感謝大家來參加本場演講
我是Sara Radi

00:00:31.231 --> 00:00:33.600
國際軟件工程師

00:00:33.667 --> 00:00:36.303
今天和同事Joaquim Lobo Silva

00:00:36.370 --> 00:00:38.972
一起討論一下國際用戶界面

00:00:39.306 --> 00:00:40.307
現在我們開始

00:00:43.110 --> 00:00:46.947
Apple軟件支持40多個本地化版本

00:00:47.247 --> 00:00:49.750
每一種語言對我們來說都是挑戰

00:00:49.850 --> 00:00:52.386
今天我們主要討論

00:00:52.452 --> 00:00:55.189
軟件支持的兩種從右向左書寫的語言

00:00:55.556 --> 00:00:57.724
它們是阿拉伯語和希伯來語

00:00:58.425 --> 00:01:01.228
這種語言是巨大的挑戰

00:01:01.728 --> 00:01:03.497
在開發應用時

00:01:03.564 --> 00:01:07.034
這是因爲書寫方向與衆不同

00:01:07.534 --> 00:01:10.170
那麼爲什麼我們要
單獨討論這兩種語言呢？

00:01:11.972 --> 00:01:15.209
在中東有超過4億的人口

00:01:15.275 --> 00:01:16.910
這是一個巨大的正在成長的市場

00:01:17.544 --> 00:01:21.381
就在去年 我們在阿拉伯聯合酋長國
開了兩個Apple Store

00:01:21.448 --> 00:01:24.051
圖片是Apple Store的開業
分別位於阿布扎比和

00:01:25.219 --> 00:01:26.119
迪拜...

00:01:26.720 --> 00:01:31.992
僅幾周前 我們在阿拉伯聯合酋長國
首次開放了Apple.com

00:01:32.125 --> 00:01:33.660
網站的阿拉伯語版本

00:01:33.927 --> 00:01:37.698
這確實非常令人激動
那麼這對你來說意味着什麼呢？

00:01:38.732 --> 00:01:43.237
作爲開發者
你在這個市場獲得了更多的機會

00:01:43.570 --> 00:01:47.741
爲用戶開發語言本地化的
應用非常重要

00:01:48.308 --> 00:01:51.879
因此在這個演講中
我們主要談論從右向左書寫的語言

00:01:52.279 --> 00:01:55.983
如果你想了解更多的
關於語言本地化應用的設計

00:01:56.049 --> 00:01:57.251
請查閱這兩個演講

00:01:57.451 --> 00:02:00.153
“兼收幷蓄的應用設計”
主要探討

00:02:00.387 --> 00:02:02.222
應用的人機交互界面

00:02:02.489 --> 00:02:04.391
以及“國際化最佳實踐”

00:02:04.458 --> 00:02:06.827
如果你想學習有關
應用國際化的知識

00:02:08.294 --> 00:02:11.265
去年 在iOS 9上

00:02:11.331 --> 00:02:13.333
我們擴大了國際化支持

00:02:13.400 --> 00:02:16.069
全面支持從右向左書寫語言

00:02:16.403 --> 00:02:17.905
在那以後

00:02:17.971 --> 00:02:23.477
在watchOS 2.1中加入了
希伯來語和阿拉伯語的本地化語言支持

00:02:24.378 --> 00:02:25.279
今年...

00:02:25.679 --> 00:02:30.651
我很高興的宣佈我們一直在致力於
爲這個市場重新設計macOS

00:02:31.318 --> 00:02:33.854
現在我想帶你們瀏覽一下

00:02:34.721 --> 00:02:37.424
在這個演講中我們要經過的議程

00:02:38.358 --> 00:02:42.629
首先Joaquim要簡要敘述一下APIs

00:02:42.696 --> 00:02:44.064
它們是在去年引入的

00:02:44.665 --> 00:02:49.002
然後他要討論一下在iOS 10中的
圖像處理的最新進展

00:02:50.137 --> 00:02:52.806
以及如何評估佈局方向

00:02:54.408 --> 00:02:57.110
最後他會探討watchOS支持的新功能

00:02:57.544 --> 00:03:01.515
然後我要講述macOS的新功能

00:03:02.349 --> 00:03:05.219
在文本支持中的最新進展
和你如何

00:03:05.285 --> 00:03:08.121
在應用中正確顯示混合文本

00:03:08.655 --> 00:03:12.826
現在讓Joaquim來講講iOS

00:03:13.260 --> 00:03:14.094
Joaquim

00:03:17.831 --> 00:03:19.333
好 謝謝Sara

00:03:19.399 --> 00:03:21.168
早上好!
謝謝大家的光臨!

00:03:21.702 --> 00:03:23.770
我叫Joaquim 首先讓我

00:03:23.837 --> 00:03:25.772
講講iOS

00:03:27.341 --> 00:03:31.111
剛纔Sara講過
去年在WWDC...

00:03:31.912 --> 00:03:36.717
我們宣佈了在iOS整個平臺上全面
支持從右向左語言的界面

00:03:38.085 --> 00:03:40.754
當這些語言的用戶運行應用時

00:03:40.821 --> 00:03:44.791
他們希望用戶界面適應這些語言的特點

00:03:46.693 --> 00:03:50.097
UIKit爲你做了大量的工作
它的控制層和視圖層

00:03:50.163 --> 00:03:52.966
使從右向左語言的應用運行正確

00:03:54.768 --> 00:03:57.905
在視圖中管理界面設計可以
通過自動設計來實現

00:03:57.971 --> 00:04:00.140
而且還有高層次的組件

00:04:00.207 --> 00:04:03.610
例如iOS 9中新添加的
UIStack視圖在去年也發佈了

00:04:04.578 --> 00:04:08.749
它可以讓你很容易地爲用戶界面建模
和維護你的界面

00:04:09.249 --> 00:04:12.386
它可以容易實現嵌套使用
多個水平和垂直視窗

00:04:12.853 --> 00:04:15.389
棧視圖的優點是

00:04:15.455 --> 00:04:17.757
它可以爲你管理自動佈局約束

00:04:18.959 --> 00:04:21.228
尤其對於從右向左語言來說

00:04:21.295 --> 00:04:23.297
它可以管理開頭和結尾的約束

00:04:23.363 --> 00:04:26.066
它包括左和右兩個屬性

00:04:26.133 --> 00:04:29.102
文本可以自動左右調整

00:04:29.169 --> 00:04:30.904
當在從右向左的語言中運行的時候

00:04:33.473 --> 00:04:36.343
重要的是要注意

00:04:36.543 --> 00:04:39.680
正是因爲這些語言是
從右向左書寫和閱讀的

00:04:40.080 --> 00:04:43.183
這意味着並不是應用的每一個控制都是

00:04:43.250 --> 00:04:46.753
嚴格遵守這些語言的書寫方向

00:04:47.221 --> 00:04:49.790
還有細微的差別和例外情況

00:04:49.857 --> 00:04:52.593
在爲這些語言設計應用時
要銘記在心

00:04:53.026 --> 00:04:56.997
一個例子是和重放有關的重放用戶界面

00:04:57.064 --> 00:05:01.735
例如視頻、音頻和時間軸的快退和快進

00:05:01.802 --> 00:05:04.304
它們的佈局方向應該保持一致

00:05:07.040 --> 00:05:09.543
另一個例子是我們稱之爲空間界面

00:05:09.676 --> 00:05:11.979
它可以是一組控制

00:05:12.045 --> 00:05:15.449
它們沒有與它們有關的特定方向性

00:05:15.816 --> 00:05:17.684
像左右這樣的文本對齊

00:05:17.751 --> 00:05:21.688
在所有的語言中顯然都應該保持一致

00:05:21.989 --> 00:05:24.258
還有一個例子是指南針

00:05:24.324 --> 00:05:28.095
那些在實體或者地理上
有對應物的東西

00:05:28.228 --> 00:05:29.396
應該保持不變

00:05:29.463 --> 00:05:32.266
東西南北不會根據左右而改變

00:05:34.201 --> 00:05:37.437
iOS中有語義內容屬性有助於你管理

00:05:37.704 --> 00:05:40.073
並且確定和調節

00:05:40.140 --> 00:05:42.943
每個視圖和子視圖的設計流程

00:05:44.278 --> 00:05:47.814
它是枚舉類型 正如我剛纔說的
它是建立在UIView上的屬性

00:05:48.115 --> 00:05:50.150
它包括我剛纔講到的所有的情況

00:05:50.217 --> 00:05:53.220
有重放、空間用戶界面

00:05:53.587 --> 00:05:56.723
還有自動的強制方向轉換

00:05:57.191 --> 00:05:59.826
另外還有未確定 它是默認值

00:06:00.060 --> 00:06:02.829
這可能是大多數視圖所屬的類別

00:06:05.699 --> 00:06:08.869
因此如果你想更詳盡的瞭解它們

00:06:08.936 --> 00:06:11.772
或者你是從右到左用戶界面設計的新手

00:06:11.872 --> 00:06:14.575
我建議你查看去年的演講

00:06:14.641 --> 00:06:16.910
對國際用戶界面的最新UIKit支持

00:06:17.211 --> 00:06:19.479
它詳細介紹了這些概念

00:06:19.546 --> 00:06:21.515
並且講解了一些新的API

00:06:21.748 --> 00:06:24.718
或者不很新但是是我們新添加到
iOS 9中的API

00:06:25.085 --> 00:06:26.086
用於從右到左用戶界面

00:06:27.421 --> 00:06:30.791
剛纔簡要介紹了iOS的佈局中
現有的功能

00:06:31.358 --> 00:06:33.794
下面我要介紹圖片

00:06:35.762 --> 00:06:37.331
用於從右向左語言的圖片很有趣

00:06:37.397 --> 00:06:40.033
它們可以分爲三類

00:06:42.102 --> 00:06:44.471
第一類是通用圖片

00:06:44.571 --> 00:06:47.941
這可能是大多數圖片所屬的類別

00:06:48.008 --> 00:06:49.977
它們包括插圖和圖標

00:06:50.310 --> 00:06:54.381
它們不需要考慮語言書寫的方向

00:06:54.448 --> 00:06:57.985
任何情況下它們都是一樣的
這對你來說當然是很熟悉的

00:06:58.051 --> 00:07:02.456
例如常規用戶界面圖片或者在圖片查看器
和Interface Builder上爲圖片命名

00:07:04.758 --> 00:07:09.229
第二類是有方向和它們關聯的圖片

00:07:09.463 --> 00:07:13.867
無論它是導航箭頭

00:07:13.934 --> 00:07:16.336
例如導航條中返回按鈕

00:07:16.803 --> 00:07:18.605
或者詳細展開按鈕

00:07:18.672 --> 00:07:21.008
或者界面佈局表格的單元格上
的展開箭頭

00:07:21.542 --> 00:07:24.578
或者像本例中 簡單的文本展示

00:07:24.878 --> 00:07:27.981
這些圖片應該按照從右向左來展示
僅僅翻轉這些圖片

00:07:28.048 --> 00:07:30.450
就會生成用於從右向左佈局的正確結果

00:07:30.517 --> 00:07:34.521
現在讓我們翻轉圖像
現在圓圈處在了正確的位置

00:07:36.723 --> 00:07:40.561
在iOS中你可以通過使用imageFlipped
ForRightToLeftLayoutDirection來實現

00:07:40.928 --> 00:07:44.231
我們把它稱爲基於界面圖像的
方法和它的返回對象

00:07:44.398 --> 00:07:48.101
當在用戶界面圖像視圖中展示的時候
它會自動糾正從而正確顯示

00:07:48.302 --> 00:07:50.404
如果這個應用在從右向左語言中運行

00:07:53.207 --> 00:07:54.208
最後...

00:07:54.508 --> 00:07:58.779
第三類是和方向密切相關的圖像

00:07:58.846 --> 00:08:01.648
它們要更加複雜

00:08:01.715 --> 00:08:04.384
僅僅翻轉圖像會產生

00:08:04.451 --> 00:08:06.954
錯誤的從右向左結果

00:08:07.254 --> 00:08:09.323
在本例中是和前面相同的項目列表

00:08:09.823 --> 00:08:13.126
但是項目符號是對號而不是
圓圈 當我翻轉圖像的時候

00:08:13.193 --> 00:08:15.162
對號現在處於正確的位置

00:08:15.229 --> 00:08:16.864
但是對號也被翻轉了

00:08:16.930 --> 00:08:20.067
而在這個從右向左的例子中
對號應該和原來保持一致

00:08:20.434 --> 00:08:23.871
此時我需要的是
兩個單獨的圖像

00:08:23.971 --> 00:08:25.506
每個圖像用於一個佈局方向

00:08:26.507 --> 00:08:28.542
我可以爲從右到左語言調節圖像

00:08:28.609 --> 00:08:32.446
現在它顯示正確了
現在我有兩個不同的圖像

00:08:32.513 --> 00:08:35.381
到現在爲止你在iOS上

00:08:35.448 --> 00:08:38.684
實現了在運行時正確的展示圖像
實際上是進行了運行時檢查

00:08:39.219 --> 00:08:41.621
你要使用語義內容屬性API

00:08:41.688 --> 00:08:43.357
來檢查佈局方向

00:08:43.557 --> 00:08:46.760
並且在運行時從文件庫中
加載正確的圖像

00:08:48.929 --> 00:08:51.765
在iOS 10中我們稍稍改變了一下

00:08:52.199 --> 00:08:54.001
我們不贊成

00:08:54.067 --> 00:08:56.370
爲從右向左佈局進行圖像翻轉

00:08:57.204 --> 00:08:59.573
爲此我們引入了一個新的概念

00:08:59.773 --> 00:09:02.142
就可以讓這三種圖像正確顯示

00:09:02.376 --> 00:09:06.413
我們使用常規用戶界面圖像
或者Interface Builder中的圖像命名

00:09:07.080 --> 00:09:10.184
在Xcode 8中引入全新的
方向圖片資源庫

00:09:10.250 --> 00:09:12.686
它位於資源目錄中

00:09:14.454 --> 00:09:15.389
謝謝！

00:09:17.824 --> 00:09:19.493
這意味着什麼？

00:09:20.027 --> 00:09:22.529
在Xcode中有你的圖像資源庫

00:09:22.596 --> 00:09:25.599
現在你有了新的概念和新的屬性
你可設置它們

00:09:25.832 --> 00:09:29.002
它被稱爲方向屬性
你可以設值不同的值

00:09:29.069 --> 00:09:31.605
對應前面的幻燈片中提到的概念

00:09:31.672 --> 00:09:34.508
一張圖片可以有一個固定的方向

00:09:36.043 --> 00:09:39.746
你可以指定一張圖片
用於一種佈局方向

00:09:39.813 --> 00:09:41.648
也可以翻轉適用於另一種佈局

00:09:41.715 --> 00:09:44.251
由從左到右佈局到從右到左佈局轉換
或者相反

00:09:46.220 --> 00:09:48.922
或者你也可以簡單的指定
兩張不同的圖片

00:09:48.989 --> 00:09:51.725
在你的資源目錄中
兩張圖片適用於不同的方向

00:09:53.760 --> 00:09:56.363
這些是圖片資源庫
你可能已經熟悉了

00:09:56.430 --> 00:09:59.600
其它種類的圖片轉化技術

00:09:59.666 --> 00:10:04.371
例如不同的像素密度或者
用於不同平臺的圖片

00:10:04.805 --> 00:10:08.609
實際上它們是同一個概念
你所要做的只是

00:10:08.675 --> 00:10:14.181
在Interface Builder中設置圖像或者
使用用戶界面圖像加載指定的圖像

00:10:15.883 --> 00:10:17.818
現在我想給你們做個演示

00:10:20.187 --> 00:10:21.288
好...

00:10:24.057 --> 00:10:26.193
這是一個很簡單的應用...

00:10:27.427 --> 00:10:30.264
讓我運行一遍
展示一下它的界面

00:10:31.064 --> 00:10:32.099
它的名字叫旗...

00:10:33.433 --> 00:10:38.739
國際模式
當然它是一個猜國旗的遊戲 耶

00:10:39.873 --> 00:10:44.411
這個遊戲比較直接
多人玩很有趣

00:10:45.345 --> 00:10:47.781
在這裏你只看到一個
非常簡單的用戶界面

00:10:47.848 --> 00:10:50.217
這是要猜的國旗

00:10:50.450 --> 00:10:52.119
底部有一個顯示按鈕

00:10:52.186 --> 00:10:54.721
誰知道這是哪個國家？

00:10:55.022 --> 00:10:57.791
我知道現在是星期五早上9點
是嗎？

00:10:57.858 --> 00:10:59.193
對 好的 我聽到了

00:10:59.259 --> 00:11:00.961
我聽到很多人說法國 很好

00:11:01.028 --> 00:11:03.163
好 謝謝你！

00:11:04.431 --> 00:11:08.068
上面有兩個箭頭 一個向前

00:11:08.135 --> 00:11:10.170
指向下一個問題
一個箭頭返回

00:11:11.738 --> 00:11:14.041
這是通過自動佈局約束實現的

00:11:14.107 --> 00:11:16.009
這也是一個垂直棧視圖

00:11:16.877 --> 00:11:18.345
誰知道這是哪個國家？

00:11:18.846 --> 00:11:22.049
噢 哇 好 很棒 聽聽 好

00:11:22.549 --> 00:11:24.952
好極了 是
這是我的祖國 葡萄牙

00:11:25.118 --> 00:11:26.753
好 現在你們明白了 對嗎？

00:11:27.421 --> 00:11:31.425
現在我要給這個應用添加
對從右向左語言的支持

00:11:32.092 --> 00:11:34.862
現在我不會講這種

00:11:34.928 --> 00:11:37.297
從右向左書寫和閱讀的語言

00:11:37.598 --> 00:11:40.834
然而如果我想看應用的界面是
什麼樣的 不必一定要會說這種語言

00:11:41.602 --> 00:11:43.003
Xcode允許我

00:11:43.070 --> 00:11:45.572
在自身模擬
一個從右向左的環境

00:11:45.639 --> 00:11:50.010
所以我要做的僅僅是編輯一下方案

00:11:50.077 --> 00:11:53.113
在這兒 頂部有編輯方案

00:11:53.947 --> 00:11:57.317
出現了下拉的列表 已經選擇了運行

00:11:57.384 --> 00:11:59.019
在頂部有選項標籤

00:12:00.053 --> 00:12:03.724
這兒是應用語言重載

00:12:04.458 --> 00:12:08.161
這兒列舉了本應用支持的
本地化語言 現在只有英語

00:12:08.228 --> 00:12:10.931
但是我也能選擇從右向左
的假語言設置

00:12:11.265 --> 00:12:13.700
下面運行應用

00:12:13.767 --> 00:12:16.503
用我的開發語言 英語

00:12:16.637 --> 00:12:18.472
但是它讓用戶界面認爲

00:12:18.539 --> 00:12:20.807
它運行在從右向左的語言環境中

00:12:21.275 --> 00:12:23.343
讓我這樣設置一下 關閉

00:12:23.710 --> 00:12:24.811
重新運行應用

00:12:25.812 --> 00:12:26.647
好

00:12:31.752 --> 00:12:33.353
讓我們再次運行這個遊戲

00:12:33.420 --> 00:12:35.389
我們很快就能看到一些變化

00:12:35.455 --> 00:12:37.357
導航條是正確的

00:12:37.424 --> 00:12:40.027
後退按鈕的位置正確

00:12:41.328 --> 00:12:43.564
並且我的用戶界面看起來和以前大致相同

00:12:43.797 --> 00:12:45.465
除了你可能已經注意到了

00:12:45.532 --> 00:12:49.069
箭頭的方向看起來不對
它們指向彼此

00:12:49.570 --> 00:12:52.973
它們的位置是正確的
前進按鈕在左面

00:12:53.040 --> 00:12:54.575
對從右向左語言來說是正確的

00:12:54.842 --> 00:12:57.311
但是圖像本身沒有適應變化
做出改變

00:12:57.477 --> 00:12:58.846
現在我需要改變這種情況

00:13:00.180 --> 00:13:02.850
在Xcode 8中 我需要做的是
到我的圖像資源庫中

00:13:02.916 --> 00:13:04.885
我需要繼續在此選擇它們

00:13:07.054 --> 00:13:09.456
注意 我有兩個不同的圖像

00:13:09.523 --> 00:13:11.758
一個是後退箭頭 一個是前進箭頭

00:13:13.227 --> 00:13:15.028
我要到檢查工具中

00:13:15.229 --> 00:13:17.364
選擇新的方向屬性

00:13:17.431 --> 00:13:21.101
把它從固定圖像改爲從左向右圖像

00:13:21.268 --> 00:13:23.770
翻轉爲
相反的佈局方向

00:13:24.671 --> 00:13:26.707
同樣...

00:13:27.374 --> 00:13:30.677
前進箭頭
你可以看到

00:13:30.744 --> 00:13:33.480
是從左向右圖像的翻轉
而不是固定方向

00:13:34.248 --> 00:13:35.782
現在再次運行我的應用

00:13:38.685 --> 00:13:40.487
讓我們看看它的界面怎樣

00:13:47.127 --> 00:13:48.362
酷 開始遊戲

00:13:48.996 --> 00:13:51.064
好 這就是我要做的

00:13:51.565 --> 00:13:54.401
它完整的支持從右向左語言環境

00:13:54.468 --> 00:13:57.371
不需要額外寫任何代碼

00:13:57.738 --> 00:13:59.373
就實現了從右到左用戶界面的設計

00:13:59.540 --> 00:14:02.442
自動佈局、棧視圖和現在的
圖像資源庫

00:14:02.509 --> 00:14:04.678
爲你的程序運行做了大大的提升

00:14:04.912 --> 00:14:06.580
對了 還有一個重要的組件

00:14:06.647 --> 00:14:08.815
頁面視圖控制器
會提供支持

00:14:08.882 --> 00:14:13.554
它會管理前進和後退的姿態

00:14:13.620 --> 00:14:15.722
因此我也不必爲此多費心思

00:14:16.290 --> 00:14:19.826
這就是關於圖像資源庫的演示
讓我們回到幻燈片

00:14:21.628 --> 00:14:22.462
太酷了！

00:14:24.431 --> 00:14:28.068
剛纔簡要介紹了新的
提供方向支持的圖像資源庫

00:14:29.236 --> 00:14:31.772
現在你也可以完成這一切

00:14:31.839 --> 00:14:35.175
如果你的圖像沒有直接
儲存在文件庫中

00:14:35.242 --> 00:14:37.177
比如你從遠端的服務器上
獲取內容

00:14:37.244 --> 00:14:39.346
並且它們具有方向性

00:14:39.413 --> 00:14:41.081
而且它們要在你的用戶界面上顯示出來

00:14:42.216 --> 00:14:43.917
對於沒有儲存在本地的圖像

00:14:43.984 --> 00:14:47.087
你可以使用UIKit中的特徵集合
來關聯這些圖像

00:14:49.223 --> 00:14:51.391
我們也有基於用戶界面圖像的方便方法

00:14:51.458 --> 00:14:55.028
讓你指定一個圖像是
另一個圖像的相對物

00:14:55.095 --> 00:14:56.430
並且它應該被翻轉以後

00:14:57.364 --> 00:14:59.066
再添加到圖像資源庫中

00:15:00.334 --> 00:15:02.936
這被稱爲imageWithHorizontally
FlippedOrientation方法

00:15:03.003 --> 00:15:06.573
如果我用代碼展示給你的話
可能更簡單一些

00:15:07.341 --> 00:15:10.611
這就是
我要做的就是創建圖像資源庫

00:15:11.545 --> 00:15:14.181
在這個例子中
我得到了一個從左向右圖像

00:15:14.248 --> 00:15:15.949
從遠端資源 比如服務器

00:15:16.884 --> 00:15:19.620
並且我的從右向左圖像
是同一個圖像

00:15:19.686 --> 00:15:23.290
但是被水平翻轉了
我使用了用戶界面圖像上的新方法

00:15:25.058 --> 00:15:27.094
然後要註冊兩個圖像

00:15:27.160 --> 00:15:29.997
對應每個佈局方向

00:15:30.430 --> 00:15:32.232
使用從左向右和從右向左的特徵集合

00:15:35.102 --> 00:15:39.506
你可能已經使用
或者編寫過相似的代碼

00:15:39.573 --> 00:15:42.943
你正好得到了和特徵集合兼容的圖像

00:15:43.243 --> 00:15:44.611
用於圖像視圖

00:15:44.678 --> 00:15:48.282
你不必做出改變
因爲再說一遍 它們是相同的概念

00:15:48.482 --> 00:15:51.351
我們只是在它之上建立了
一個新的方向屬性

00:15:54.488 --> 00:15:58.258
這就是方向圖像
在Xcode 8和iOS 10中的新概念

00:15:58.458 --> 00:16:00.294
同樣在watchOS和macOS中也是這樣

00:16:01.562 --> 00:16:05.432
正如你前面看到的 我們有了一個
新的屬性 叫做佈局方向

00:16:06.500 --> 00:16:08.535
這是UIKit中新的UITrait集合

00:16:08.602 --> 00:16:11.805
因爲它是新的屬性
不要忘記以下幾點

00:16:12.105 --> 00:16:15.142
在評估iOS中的佈局方向時

00:16:15.209 --> 00:16:16.310
用這個新概念

00:16:17.211 --> 00:16:20.414
舉個簡單的例子
我有一個UIView子類

00:16:20.747 --> 00:16:23.450
在佈局子視圖上進行定製佈局

00:16:23.784 --> 00:16:26.153
用這個簡單的藍盒子來表示

00:16:28.255 --> 00:16:30.524
由語義內容屬性告知

00:16:30.591 --> 00:16:32.826
它是應該是從左到右還是從右到左

00:16:32.893 --> 00:16:34.862
這時你可以使用我們的API

00:16:35.562 --> 00:16:37.331
現在如果沒有指明語言環境

00:16:37.664 --> 00:16:40.567
語義內容屬性服從應用的環境

00:16:40.634 --> 00:16:43.070
它可能屬於特徵環境

00:16:43.504 --> 00:16:45.072
特徵環境是一個特徵集合

00:16:45.138 --> 00:16:48.375
或者可能是這個應用的通用
用戶界面佈局方向

00:16:50.177 --> 00:16:54.915
現在實際上
你的用戶界面視圖應該僅僅關心

00:16:54.982 --> 00:16:57.618
它是應該從左到右還是
從右到左 就是這樣 好

00:16:57.684 --> 00:16:59.753
這相當複雜但是也確實很快

00:17:00.487 --> 00:17:04.023
我很高興的告訴大家在iOS 10中
你只要這樣做就可以了

00:17:04.324 --> 00:17:06.894
通過使用基於用戶界面視圖的新屬性

00:17:06.960 --> 00:17:10.364
它是一個計算屬性叫做
effectiveUserInterfaceLayoutDirection

00:17:10.430 --> 00:17:12.665
它會考慮所有的這些概念

00:17:12.733 --> 00:17:15.469
並且立即告訴你應該

00:17:15.536 --> 00:17:17.171
以從左向右還是從右向左佈局

00:17:19.406 --> 00:17:23.777
如果你在佈局中根本沒有
使用UIKit或者UIView

00:17:23.844 --> 00:17:26.946
例如你使用SceneKit視圖
或者SpriteKit視圖製作遊戲

00:17:27.013 --> 00:17:29.883
但是你仍然想利用這些
視圖控制器概念

00:17:29.950 --> 00:17:32.419
你可以做到的
使用這些基於用戶界面視圖新的類程序

00:17:32.786 --> 00:17:33.954
給你同樣的

00:17:34.021 --> 00:17:38.325
和語義內容屬性有關的
同樣的佈局評估

00:17:41.228 --> 00:17:43.430
這就是在iOS中的新進展
的簡要介紹

00:17:43.530 --> 00:17:46.300
我們看到了全新的方向圖像資源庫

00:17:46.366 --> 00:17:49.002
可以和Interface Builder以及
常規用戶界面圖像一起使用

00:17:49.203 --> 00:17:52.172
不需要額外寫任何
對從右向左語言支持的代碼

00:17:53.307 --> 00:17:54.908
對另外一些圖像也是如此

00:17:54.975 --> 00:17:56.944
這些圖像沒有直接
儲存在文件庫中

00:17:57.878 --> 00:17:59.680
結果是我們不贊成在

00:17:59.746 --> 00:18:02.649
iOS 10中使用imageFlippedForRight
ToLeftLayoutDirection

00:18:04.818 --> 00:18:07.554
我們也講解了基於用戶界面視圖
新的方便屬性

00:18:07.621 --> 00:18:10.490
用於決定定製佈局中的佈局方向

00:18:11.024 --> 00:18:12.392
還有一個類程序

00:18:12.459 --> 00:18:14.962
使你在其它語言中
達到了同樣的效果

00:18:16.597 --> 00:18:21.401
這就是iOS的情況
現在我要講講watchOS

00:18:23.370 --> 00:18:25.973
watchOS 2.1中

00:18:26.373 --> 00:18:29.610
添加了阿拉伯語和希伯來語
作爲備選系統語言

00:18:30.777 --> 00:18:36.683
對於你的應用來說這意味着
watchKit現在能夠識別從右向左語言

00:18:37.384 --> 00:18:39.386
所有watchKit元素
能正確的運行

00:18:39.453 --> 00:18:41.255
在選擇阿拉伯語或者希伯來語的時候

00:18:42.422 --> 00:18:44.224
它的API和iOS的相似

00:18:44.291 --> 00:18:48.795
使你能夠調整每個組
或者界面對象的實例

00:18:50.697 --> 00:18:54.067
重要的是也要注意 剛剛說過

00:18:54.134 --> 00:18:56.003
很自然的人們認爲

00:18:56.403 --> 00:18:59.940
我們在iOS中看到的很多設計
概念也應用於Watch

00:19:00.007 --> 00:19:04.478
推送和彈出界面控制器也有方向

00:19:04.545 --> 00:19:05.979
應也爲從右向左語言
環境下做出改變

00:19:06.046 --> 00:19:08.215
你應該記住這一點如果你的用戶界面

00:19:08.282 --> 00:19:09.950
也要這樣顯示

00:19:12.186 --> 00:19:15.756
在水平佈局中某些元素的優先級更高
要優先顯示

00:19:15.822 --> 00:19:20.194
或者按順序排列表格視圖
單元格中的圖像

00:19:20.627 --> 00:19:22.930
或者標籤有順序
都應該改變以適應這些變化

00:19:23.931 --> 00:19:28.368
對於Watch來說有一個特別的事物
那是時間的思想和概念

00:19:28.435 --> 00:19:32.072
具體來說就是順時針和逆時針

00:19:32.139 --> 00:19:35.309
再回到那些細微差別和例外情況

00:19:35.442 --> 00:19:39.246
如果你有輻射狀的、
順時針或者逆時針的用戶界面

00:19:39.313 --> 00:19:41.915
在佈局方向中它們
應該沒有變化

00:19:41.982 --> 00:19:43.951
這是需要謹記在心的一點

00:19:44.017 --> 00:19:46.286
除了剛纔我們討論過的概念以外

00:19:48.388 --> 00:19:49.890
你用API如何實現這個呢？

00:19:49.957 --> 00:19:51.425
因此正如我剛纔說的

00:19:51.491 --> 00:19:54.228
運行在從右向左的語言環境下時
所有界面對象顯示正確

00:19:54.294 --> 00:19:56.864
這包括按鈕、滑塊和開關

00:19:58.165 --> 00:19:59.399
除此之外

00:19:59.466 --> 00:20:03.337
方向和排列的概念也是自動改變的

00:20:03.403 --> 00:20:06.607
這就是說水平界面的方向

00:20:07.040 --> 00:20:11.011
和它們的排列以及

00:20:11.078 --> 00:20:13.313
和父類有關的WatchKit中
對象的排列也相應的改變

00:20:13.380 --> 00:20:16.884
在上面的例子中 有一個簡單的應用

00:20:17.017 --> 00:20:20.220
上面是水平排列的圖片 左對齊 向左

00:20:21.088 --> 00:20:23.524
底部是垂直排列的圖片 左對齊

00:20:24.091 --> 00:20:27.995
如果我在希伯來語中運行這個應用
左面都轉移到了右面

00:20:28.061 --> 00:20:31.665
注意水平界面的元素的排列順序
也發生了變化

00:20:33.500 --> 00:20:35.903
我們有語義內容屬性
和iOS一樣

00:20:36.503 --> 00:20:38.205
在我剛纔講過的實例中

00:20:38.505 --> 00:20:43.243
幫助管理各個界面、界面對象
或者對象組

00:20:44.444 --> 00:20:47.414
它的功能和其它屬性的功能一樣簡單

00:20:47.481 --> 00:20:49.216
在WatchKit對象中
你可以設置這些屬性

00:20:51.752 --> 00:20:53.887
如果你沒使用WatchKit
來規劃你的用戶界面

00:20:53.954 --> 00:20:56.957
而是使用SceneKit或者SpriteKit
在WatchOS 3中它們還是很新的

00:20:57.491 --> 00:20:59.159
你仍然能夠評估

00:20:59.226 --> 00:21:02.496
佈局方向 如果你記住
語義內容屬性的話

00:21:02.563 --> 00:21:06.133
在這兒我只是使用一個類程序
就得到了方向

00:21:06.200 --> 00:21:08.001
用於界面設備 一旦我有了它

00:21:08.068 --> 00:21:10.704
我只是檢查一下它是
從左向右還是從右向左

00:21:13.006 --> 00:21:15.776
這是對watchOS 2.1中
新添加的特性的簡要介紹

00:21:16.310 --> 00:21:19.479
它和iOS的思想和原則是一樣的

00:21:20.814 --> 00:21:23.383
所有watchKit元素做得很好
使界面顯示正確

00:21:23.483 --> 00:21:24.685
而不需要額外的工作

00:21:25.052 --> 00:21:28.522
任何在定製的用戶界面或者元素中
你也應該考慮到這一點

00:21:29.122 --> 00:21:32.626
當然要記住我剛纔提到的
微小差別和例外情況

00:21:32.693 --> 00:21:34.661
以及你可以使用語義內容屬性

00:21:34.895 --> 00:21:37.931
在運行時幫助決定佈局方向

00:21:39.499 --> 00:21:41.735
現在我要把時間交給Sara

00:21:41.902 --> 00:21:44.705
講解一下macOS和
如何處理雙向文本

00:21:44.972 --> 00:21:47.975
非常感謝！
希望你們度過一個愉快的週五 謝謝！

00:21:50.143 --> 00:21:50.978
謝謝！

00:21:52.112 --> 00:21:53.514
首先談談macOS

00:21:54.214 --> 00:21:56.984
正如其它平臺
iOS和watchOS

00:21:57.150 --> 00:21:59.586
對於macOS來說概念
是完全一樣的

00:21:59.887 --> 00:22:02.489
如果你使用標準AppKit控制層

00:22:03.056 --> 00:22:04.925
你會得到視圖的準確呈現

00:22:04.992 --> 00:22:07.628
當你在從右向左環境中
運行你的應用時

00:22:07.694 --> 00:22:11.298
現在我想帶你們瀏覽一下
系統的一些實例

00:22:11.365 --> 00:22:13.333
展示一下動態控制是如何運行的

00:22:14.201 --> 00:22:17.538
首先從我們稱之爲系統層控制開始

00:22:17.905 --> 00:22:20.974
我們把它稱之爲系統層控制
是因爲佈局

00:22:21.041 --> 00:22:23.810
遵循用戶運行的系統語言

00:22:23.877 --> 00:22:25.779
而不是你的應用佈局方向運行的

00:22:26.113 --> 00:22:28.715
讓我們看一些實例可能更清楚一些

00:22:28.882 --> 00:22:31.351
讓我們看一下這兒的菜單條

00:22:32.586 --> 00:22:35.022
我的系統在從右向左環境中運行

00:22:35.455 --> 00:22:36.857
正如你看到的

00:22:37.791 --> 00:22:40.594
上面的菜單條從窗口的右邊開始

00:22:41.461 --> 00:22:45.699
而且菜單內的元素也是從右向左擴展的

00:22:46.600 --> 00:22:47.835
這個概念...

00:22:49.403 --> 00:22:51.071
也適用於NSWindow

00:22:51.538 --> 00:22:52.639
通過設計

00:22:52.706 --> 00:22:56.109
我們決定使窗口控制保持一致

00:22:56.310 --> 00:22:59.646
在所有應用中不管你的
應用有沒有進行本地化

00:23:00.147 --> 00:23:04.051
如果你有自己的邏輯
並且你進行自己的定製控制

00:23:04.117 --> 00:23:07.120
你需要考慮到這一點
並且升級你的邏輯

00:23:07.187 --> 00:23:09.890
即使你的應用不支持阿拉伯語
或者希伯來語本地化

00:23:11.358 --> 00:23:13.493
下一個 應用層控制

00:23:13.927 --> 00:23:15.495
這是應用層控制

00:23:16.230 --> 00:23:19.633
應用的佈局方向遵循你的應用語言

00:23:20.167 --> 00:23:22.669
例如NSTableView

00:23:23.537 --> 00:23:26.240
這是一個任務監控應用的截屏

00:23:26.473 --> 00:23:28.075
我們使用棧表視圖

00:23:28.141 --> 00:23:31.178
你可以看到表視圖的列自動改變了方向

00:23:31.245 --> 00:23:33.680
當我們在阿拉伯語
中運行應用時

00:23:34.381 --> 00:23:36.984
另一個例子
NSCollectionView

00:23:37.885 --> 00:23:39.219
來自搜索應用

00:23:39.286 --> 00:23:42.089
集合視圖佈局遵循從右向左語言

00:23:42.723 --> 00:23:44.157
還有一個例子

00:23:45.425 --> 00:23:48.695
NSScrollView
用了相同的概念

00:23:48.962 --> 00:23:52.766
我們也轉換了滾動視圖中
滾動條的位置

00:23:53.100 --> 00:23:56.637
這將避免和應用的內容重疊

00:23:57.971 --> 00:24:02.442
注意如果你在應用中使用頁面視圖

00:24:02.709 --> 00:24:05.279
它的滾動條的工作方式略有不同

00:24:05.579 --> 00:24:08.815
WebKit會查閱你的網頁內容

00:24:08.916 --> 00:24:11.451
然後評估它的HTML屬性

00:24:11.752 --> 00:24:14.621
然後基於此來確定滾動條的位置

00:24:15.255 --> 00:24:18.125
例如我運行了Safari的英文版

00:24:18.192 --> 00:24:20.060
我進入了英文版Apple.com

00:24:20.827 --> 00:24:23.330
看看我的網頁內容

00:24:23.730 --> 00:24:24.731
我會得到

00:24:24.998 --> 00:24:27.267
方向的屬性被設置爲從左向右

00:24:27.334 --> 00:24:30.070
我們把滾動條設置在右邊

00:24:31.505 --> 00:24:33.841
如果我採用同樣的設置

00:24:34.241 --> 00:24:36.577
但這次我進入了
阿拉伯語版的Apple.com

00:24:36.643 --> 00:24:37.978
看看它的內容

00:24:38.512 --> 00:24:42.249
現在我的內容是阿拉伯語
看看這兒的方向屬性

00:24:42.316 --> 00:24:43.450
它被設置爲從右向左

00:24:43.517 --> 00:24:45.419
現在我們轉換了滾動條的位置

00:24:46.053 --> 00:24:49.890
這些是WebKit控制和
AppKit控制的例子

00:24:50.324 --> 00:24:52.726
現在我想談談API

00:24:55.896 --> 00:24:57.698
我們在上一個例子上看到

00:24:57.764 --> 00:25:01.034
WebKit控制和
AppKit控制略有不同

00:25:01.568 --> 00:25:05.506
在WebKit中
我們提供了新的API

00:25:05.572 --> 00:25:08.041
叫做userInterfaceDirectionPolicy

00:25:08.442 --> 00:25:13.981
我剛纔提到過
網頁的內容被設置爲默認值

00:25:14.047 --> 00:25:16.750
但是如果你願意你可以改變這個值

00:25:16.817 --> 00:25:19.653
例如 你的滾動條遵循系統語言

00:25:19.720 --> 00:25:22.055
而不是網頁的內容

00:25:22.256 --> 00:25:24.992
你可以使用系統
而不是內容來改變它的值

00:25:26.693 --> 00:25:28.962
下面讓我們談談AppKit API

00:25:31.698 --> 00:25:32.900
首先簡述一下

00:25:33.367 --> 00:25:36.570
如果你使用標準AppKit控制層
你什麼也不用做

00:25:36.637 --> 00:25:38.438
所有的工作都是自動完成的

00:25:39.139 --> 00:25:42.676
現在你可能有特殊的設計

00:25:42.743 --> 00:25:45.045
你想自己佈局你的視圖

00:25:45.746 --> 00:25:49.216
我們強烈建議你使用
StackViews和GridViews

00:25:49.283 --> 00:25:51.118
GridViews是
macOS新添加的

00:25:51.351 --> 00:25:53.554
這些工具都非常強大

00:25:53.620 --> 00:25:56.890
因爲它們在底層爲你
建立自動佈局約束

00:25:57.491 --> 00:25:59.893
它們也使用開頭和結尾約束

00:25:59.960 --> 00:26:01.828
它會自動翻轉視圖

00:26:01.895 --> 00:26:04.164
當你在從右向左環境下運行應用時

00:26:05.399 --> 00:26:08.902
如果不使用StackViews或
GridViews 就使用自動佈局

00:26:09.336 --> 00:26:12.573
如果你對此感到很陌生
前幾年關於這個有很棒的演講

00:26:12.639 --> 00:26:14.942
今天下午還有一場演講

00:26:15.008 --> 00:26:17.144
叫做自動佈局的最新進展
去看看吧

00:26:18.111 --> 00:26:21.949
最後如果你使用
基類方法中的storyboards

00:26:22.015 --> 00:26:24.751
我們也爲你做好了文本的翻轉

00:26:27.154 --> 00:26:30.257
此外 在NSView中有一個API

00:26:30.390 --> 00:26:33.961
讓你獲取和設置視圖的佈局方向

00:26:34.361 --> 00:26:36.897
舉個例子 我有一個橫幅滑塊

00:26:36.964 --> 00:26:38.999
它有兩個值 左和右

00:26:39.466 --> 00:26:43.303
我想讓滑塊和本地化語言保持一致

00:26:43.370 --> 00:26:46.173
這樣做是合理的
左應該總是待在左邊

00:26:46.240 --> 00:26:48.408
右應該總是待在右邊

00:26:48.842 --> 00:26:50.711
這完全沒有問題 如果我設置

00:26:50.777 --> 00:26:53.580
滑塊的佈局方向總是從左向右

00:26:54.615 --> 00:26:57.584
我剛纔說過
在NSView中有一個API

00:26:57.818 --> 00:26:59.086
讓你能夠這樣做

00:26:59.486 --> 00:27:03.690
默認值設置給
NSApp.userInterfaceLayoutDirection

00:27:04.791 --> 00:27:07.261
但是你可以重新設置爲左或者右

00:27:07.494 --> 00:27:09.596
取決於你想怎樣設計視圖

00:27:11.031 --> 00:27:13.600
現在談一下圖像

00:27:15.903 --> 00:27:17.938
在剛纔的Joaquim的演示中

00:27:18.038 --> 00:27:20.574
我們引入了方向圖像資源庫

00:27:21.108 --> 00:27:22.075
它位於資源目錄中

00:27:22.142 --> 00:27:24.811
在macOS中也有資源目錄

00:27:24.878 --> 00:27:27.814
它們和iOS以同樣的方式工作

00:27:27.881 --> 00:27:29.816
在這兒我就不詳細講解了

00:27:30.150 --> 00:27:31.985
但是有時

00:27:32.052 --> 00:27:34.588
在應用文件庫中沒有相應的圖像

00:27:34.655 --> 00:27:38.725
而你想從遠端 例如服務器中
得到相應的圖像

00:27:39.359 --> 00:27:42.563
在NSImageRep中
有一個API

00:27:42.629 --> 00:27:45.432
讓你能夠實現這個功能
用代碼註冊你的圖像

00:27:45.933 --> 00:27:48.969
讓我舉個例子看看它是如何工作的

00:27:51.471 --> 00:27:52.639
我剛纔說過

00:27:52.906 --> 00:27:56.009
有時你的圖像儲存在另一個地方

00:27:56.176 --> 00:27:57.511
你想註冊它們

00:27:57.578 --> 00:28:00.581
首先你需要做的是
創建從左向右圖像

00:28:00.647 --> 00:28:02.249
通過使用NSImage API

00:28:02.916 --> 00:28:03.951
有了圖像以後

00:28:04.017 --> 00:28:06.587
你需要把佈局方向設置爲從左向右

00:28:07.120 --> 00:28:09.189
對於從右向左圖像來說也是如此

00:28:09.423 --> 00:28:12.659
但是這一次你需要使用
NSImageRep API

00:28:13.060 --> 00:28:15.229
當你有了兩個圖像以後

00:28:15.762 --> 00:28:20.701
你需要註冊從右向左圖像展示

00:28:20.767 --> 00:28:24.304
和從左向右圖像展示
這可以通過使用其它展示API來實現

00:28:24.705 --> 00:28:27.541
當你註冊了兩個圖像以後

00:28:27.808 --> 00:28:30.777
在運行時加載正確的圖像就可以了

00:28:31.211 --> 00:28:32.446
無論你運行應用

00:28:32.513 --> 00:28:35.382
在從左向右還是從右向左環境下

00:28:37.885 --> 00:28:38.719
最後

00:28:38.819 --> 00:28:43.490
我們爲普通AppKit控制層
設計了新的方便初始化工具

00:28:44.024 --> 00:28:46.894
爲一個附件 例如
它會設置...

00:28:47.694 --> 00:28:50.564
對齊屬性和自動佈局屬性

00:28:50.631 --> 00:28:51.632
完全正確
無需你操心

00:28:52.366 --> 00:28:53.534
對於NSButton

00:28:54.434 --> 00:28:57.304
它會翻轉圖像 複選框的位置

00:28:57.371 --> 00:29:00.040
單選按鈕的位置
這一切都是自動進行的

00:29:00.507 --> 00:29:02.376
現在我爲你們做個演示

00:29:02.442 --> 00:29:04.411
來總結一下本次演講的內容

00:29:10.317 --> 00:29:11.151
好

00:29:16.089 --> 00:29:20.661
太酷了！我從Joaquim的演示中
得到啓發 創造了一個記分牌的應用

00:29:20.994 --> 00:29:24.598
當我們進行比賽的時候
可以用它紀錄分數

00:29:24.798 --> 00:29:26.200
這兒有一個簡單的...

00:29:27.768 --> 00:29:30.270
應用 你可以在視圖控制器中看到它

00:29:30.337 --> 00:29:31.805
這兒僅僅是一個表格視圖

00:29:32.239 --> 00:29:34.775
我已經設置好了自動佈局約束

00:29:35.242 --> 00:29:38.645
在表格視圖單元格中有一張圖片

00:29:38.712 --> 00:29:41.315
一個文本域 一個下一個按鈕
非常簡單

00:29:41.715 --> 00:29:43.517
這兒我用StackViews

00:29:43.584 --> 00:29:46.420
來佈局表格視圖單元格中的元素

00:29:46.486 --> 00:29:49.423
我不需要關心設置自動佈局約束

00:29:49.489 --> 00:29:52.092
因爲文本視圖已經爲我做好了

00:29:52.860 --> 00:29:53.861
在底部

00:29:54.361 --> 00:29:57.264
有一個標籤
我可以在那兒更新最高分

00:29:57.331 --> 00:29:59.366
和最好玩家
很簡單

00:30:00.200 --> 00:30:01.568
現在我需要做什麼呢？

00:30:01.635 --> 00:30:03.537
我將模擬從右向左環境

00:30:03.604 --> 00:30:06.039
這可以在我的應用上直接進行
看看是什麼樣子

00:30:07.641 --> 00:30:10.477
好 我要進入Scheme Editor

00:30:11.044 --> 00:30:12.713
進入應用語言

00:30:12.779 --> 00:30:15.282
選擇從右向左的假語言

00:30:15.349 --> 00:30:16.783
而不是系統語言

00:30:17.518 --> 00:30:19.286
我要重新編譯運行我的應用

00:30:21.722 --> 00:30:23.257
現在正在編譯 好

00:30:23.323 --> 00:30:25.893
你可以看到
沒有寫一行代碼

00:30:25.959 --> 00:30:29.596
僅通過使用storyboard、StackViews
和自動佈局就實現了它的功能

00:30:29.963 --> 00:30:30.898
就是這樣

00:30:31.331 --> 00:30:34.301
現在我的應用在從右向左
環境中看上去很好

00:30:34.368 --> 00:30:35.302
下面我要做什麼呢？

00:30:35.369 --> 00:30:38.172
我要回到我的代碼

00:30:39.406 --> 00:30:40.507
並且...

00:30:41.375 --> 00:30:43.977
我要運行我的應用 這一次

00:30:45.145 --> 00:30:49.383
用系統語言而不是
從右向左的假語言

00:30:49.449 --> 00:30:52.786
這次要在英語環境中運行應用
因爲系統語言是英語

00:30:54.087 --> 00:30:55.522
現在再次運行我的應用

00:30:57.925 --> 00:31:00.027
爲什麼我要這樣做
我只是想向你展示

00:31:00.093 --> 00:31:02.563
國際用戶界面的另一個功能

00:31:03.263 --> 00:31:06.200
我的應用在英語中看起來也很棒

00:31:06.533 --> 00:31:08.068
現在我要加入遊戲

00:31:08.135 --> 00:31:09.570
我要先添加一個遊戲者

00:31:12.439 --> 00:31:15.709
我要點擊這兒 添加新的遊戲者
很有趣

00:31:15.976 --> 00:31:18.145
我想用我的母語寫我的名字

00:31:18.212 --> 00:31:20.214
繼續 修改鍵入的語言

00:31:21.114 --> 00:31:22.749
使用阿拉伯語而不是英語

00:31:23.617 --> 00:31:25.853
好 我用阿拉伯語鍵入我的名字...

00:31:27.120 --> 00:31:27.988
好

00:31:28.822 --> 00:31:31.058
我其實也很擅長猜國旗

00:31:31.124 --> 00:31:33.227
我會在遊戲中取勝
我不會浪費時間

00:31:33.293 --> 00:31:35.195
現在我要更新我的分數

00:31:35.395 --> 00:31:36.263
好的...

00:31:37.764 --> 00:31:39.433
好 看看發生了什麼

00:31:39.499 --> 00:31:41.635
僅僅是更新我的名字

00:31:42.369 --> 00:31:46.840
我的標籤就徹底打亂了
因爲它跳到了右面

00:31:46.907 --> 00:31:51.545
現在標籤上是
“ ！得了最高分12 Sara”

00:31:51.612 --> 00:31:53.080
這看上去不對

00:31:53.881 --> 00:31:55.616
下面

00:31:55.682 --> 00:31:58.819
我要展示如何解決這個問題

00:31:58.886 --> 00:32:02.456
你怎樣才能使文本方向正確呢？

00:32:02.856 --> 00:32:04.324
讓我們回到幻燈片

00:32:14.067 --> 00:32:17.671
剛纔我們在演示應用中看到了
僅僅是用阿拉伯語輸入我的姓名

00:32:18.038 --> 00:32:19.873
就打亂了文本的呈現

00:32:20.307 --> 00:32:22.876
現在看看如何才能修復這個問題

00:32:27.181 --> 00:32:31.585
在應用中呈現文本非常重要

00:32:32.386 --> 00:32:36.623
無論你的應用是否支持某種語言
的本地化都沒有關係

00:32:36.690 --> 00:32:39.493
即使你的應用只支持英語

00:32:39.793 --> 00:32:45.132
你的用戶仍然可以用
其它語言閱讀和書寫內容

00:32:45.666 --> 00:32:47.100
當涉及到文本的時候

00:32:47.801 --> 00:32:51.338
重要的是要記住文本排列

00:32:51.405 --> 00:32:54.208
和文本方向是兩個不同的概念

00:32:54.775 --> 00:32:57.911
例如在這兒 有一段英文片段

00:32:58.078 --> 00:33:00.747
它是右對齊排列 很好
它看上去不錯

00:33:01.281 --> 00:33:03.217
因爲你可能需要那樣設計

00:33:03.283 --> 00:33:04.918
這沒有打亂文本的展示

00:33:05.752 --> 00:33:10.190
同樣在這個例子中
這一次是左對齊排列

00:33:10.390 --> 00:33:13.160
但是我把書寫順序改爲從右向左

00:33:13.227 --> 00:33:15.128
這就會打亂文本的呈現

00:33:15.195 --> 00:33:18.665
在本例中你會看到感嘆號的位置不對

00:33:19.600 --> 00:33:21.902
讓我們再展開一點

00:33:22.302 --> 00:33:25.606
在我們所有的平臺中
默認都是橫向對齊

00:33:25.672 --> 00:33:27.541
如果你沒有更改它的值

00:33:27.975 --> 00:33:31.044
在大多數情況下我們會
得到正確的顯示

00:33:31.378 --> 00:33:34.548
我們講講文本方向
它更復雜一點

00:33:37.351 --> 00:33:38.685
這兒我要簡要

00:33:38.752 --> 00:33:43.390
介紹一下文本引擎的算法

00:33:43.590 --> 00:33:46.894
如果你想了解更多的
關於Unicode的算法

00:33:47.094 --> 00:33:49.997
你可以查閱
Unicode.org中的詳述

00:33:50.631 --> 00:33:52.132
我們從最簡單的基礎開始

00:33:53.800 --> 00:33:56.370
Unicode字符有三種類型

00:33:56.803 --> 00:33:59.773
一種是嚴格從左向右字符

00:33:59.940 --> 00:34:00.774
例如

00:34:01.408 --> 00:34:05.212
我們所熟悉的有拉丁語、漢語或者日語

00:34:06.346 --> 00:34:08.982
一種是嚴格的從右向左字符

00:34:09.049 --> 00:34:13.853
例如阿拉伯語、希伯來語、
波斯語或者烏爾都語

00:34:13.920 --> 00:34:17.623
還有一些字符根本沒有方向

00:34:17.991 --> 00:34:20.928
我們把這些稱爲中立
或者非嚴格字符

00:34:21.161 --> 00:34:22.529
例如 空格

00:34:25.165 --> 00:34:27.568
文本引擎是如何決定

00:34:27.734 --> 00:34:30.437
某個片段的方向性的？

00:34:32.172 --> 00:34:36.476
文本引擎判斷首先出現的
嚴格Unicode字符是什麼類型

00:34:36.543 --> 00:34:37.476
就是這樣

00:34:37.543 --> 00:34:38.879
如果是嚴格從右向左字符

00:34:38.946 --> 00:34:40.880
整個章節就遵循從右向左方向

00:34:40.947 --> 00:34:42.049
如果是嚴格從左向右字符

00:34:42.114 --> 00:34:44.384
整個章節就遵循從左向右方向

00:34:44.784 --> 00:34:47.987
讓我們舉個例子看看
它是如何工作的

00:34:48.688 --> 00:34:50.991
現在我把演示應用中的標籤單獨取出來

00:34:51.291 --> 00:34:53.260
%@得了最高分

00:34:54.328 --> 00:34:59.233
我不知道在運行時%@會被什麼代替

00:34:59.299 --> 00:35:03.170
因爲用戶可以用鍵盤輸入任何字符

00:35:03.704 --> 00:35:05.639
讓我們把問題變得簡單些

00:35:05.939 --> 00:35:09.610
假如%@被拉丁名字代替

00:35:10.844 --> 00:35:12.980
此處第一個字母是A

00:35:13.380 --> 00:35:16.316
它是拉丁字母 嚴格從左向右字字符

00:35:16.617 --> 00:35:20.954
因此章節的方向也是從左向右
顯示正確

00:35:21.922 --> 00:35:26.493
現在假如這個變量被
阿拉伯名字代替

00:35:26.860 --> 00:35:30.797
第一個嚴格字符是阿拉伯字符

00:35:30.864 --> 00:35:35.002
使整個章節變成從右向左

00:35:35.068 --> 00:35:38.672
這就是爲什麼文本的
呈現被打亂了

00:35:38.739 --> 00:35:39.673
這是錯誤的

00:35:41.208 --> 00:35:43.710
那麼現在什麼是正確的顯示呢？

00:35:43.777 --> 00:35:47.114
我希望文本這樣顯示
即使我的名字是阿拉伯人名

00:35:47.181 --> 00:35:50.350
我希望它在左面
並且章節的其它部分

00:35:50.417 --> 00:35:52.553
也從左向右顯示

00:35:54.221 --> 00:35:56.523
所以最好的情形是這樣的

00:35:56.657 --> 00:35:59.293
它能讀取變量並且把它隔離開

00:35:59.660 --> 00:36:02.029
讓名字自己按照一定的方向排列

00:36:02.095 --> 00:36:04.131
而不會影響章節的其它部分

00:36:04.631 --> 00:36:07.467
用Isolates支持這是可能的

00:36:07.868 --> 00:36:11.672
Isolates是最新的
雙向Unicode字符

00:36:11.738 --> 00:36:13.974
在Unicode 6.3中引入

00:36:14.374 --> 00:36:17.644
並且在我們所有的平臺中
的文本引擎都支持

00:36:18.078 --> 00:36:19.246
我剛纔講過

00:36:19.646 --> 00:36:22.749
Isolates允許部分文本隔離開

00:36:23.083 --> 00:36:26.386
使首先出現的嚴格字符
遵循一定的方向

00:36:26.787 --> 00:36:30.090
而不影響周圍的文本

00:36:31.124 --> 00:36:33.360
我高興告訴大家
你不需要

00:36:33.427 --> 00:36:37.064
自己插入字符
就像具體問題具體分析

00:36:37.631 --> 00:36:40.601
因爲如果你使用
localizedStringWithFormat

00:36:41.068 --> 00:36:42.936
它們能自動實現這個功能

00:36:43.003 --> 00:36:46.840
因此localizedStringWithFormat
會自動隔離%@

00:36:46.907 --> 00:36:49.276
在運行時它會做出正確的選擇

00:36:50.377 --> 00:36:53.280
現在 回到演示應用

00:36:53.347 --> 00:36:56.149
僅僅通過一行代碼
就能解決前面的問題

00:36:56.216 --> 00:36:57.084
讓我們試一下

00:37:04.658 --> 00:37:06.326
好 太酷了

00:37:06.393 --> 00:37:09.530
現在我要回到這個視圖控制器

00:37:10.364 --> 00:37:12.099
在這兒我更新了我的標籤

00:37:13.901 --> 00:37:15.369
爲了節省時間

00:37:15.435 --> 00:37:18.305
我已經寫好了代碼
使用帶格式的本地化標準字符串

00:37:18.372 --> 00:37:20.174
而不是用正常的字符串

00:37:20.574 --> 00:37:24.044
我打算繼續給這個正常的
字符串加上註釋符號

00:37:24.411 --> 00:37:27.514
對於使用localizedString
WithFormat的一行則取消註釋

00:37:28.348 --> 00:37:29.783
再次運行我的應用

00:37:31.318 --> 00:37:32.686
看看問題是否解決了

00:37:38.625 --> 00:37:42.129
好 正如你們看到的 問題解決了

00:37:42.196 --> 00:37:45.232
現在我的名字在句子的左邊

00:37:45.299 --> 00:37:46.633
我可以正確地讀出它

00:37:46.900 --> 00:37:49.803
再看看對於英文名字是否起作用

00:37:50.437 --> 00:37:54.308
看看 如果我把名字改爲Rana
它起作用了

00:37:54.741 --> 00:37:56.310
再看看阿拉伯名字 也沒問題

00:37:56.543 --> 00:37:59.112
這就是我們的平臺的
Isolates支持

00:38:00.180 --> 00:38:01.381
讓我們回到幻燈片

00:38:06.420 --> 00:38:08.188
好 總結一下

00:38:10.157 --> 00:38:13.594
在本次演講中我們引入了
方向圖像資源庫

00:38:14.094 --> 00:38:17.497
現在它能更容易的支持不同的圖像

00:38:17.564 --> 00:38:20.801
用於從左向右或者
從右向左本地化設置

00:38:22.002 --> 00:38:26.740
在iOS watchOS和macOS中
我們爲你設計了新的API

00:38:27.541 --> 00:38:29.843
自動佈局是非常友好的

00:38:29.910 --> 00:38:34.047
如果你想佈局你的視圖
或者支持其它語言的本地化

00:38:35.382 --> 00:38:38.285
我們也改善了文本引擎

00:38:38.352 --> 00:38:40.754
通過支持Isolates的
Unicode字符

00:38:42.422 --> 00:38:44.191
有了這些改進

00:38:44.258 --> 00:38:49.530
作爲開發者的你能更容易的
開發軟件 開拓新的市場

00:38:51.031 --> 00:38:54.368
如果你需要更多的信息
請參閱developer.apple.com

00:38:54.434 --> 00:38:57.771
那兒有我們的演講
謝謝你們的到來！

00:38:58.071 --> 00:39:01.041
如果你錯過了一些演講
那兒還有相關的演講

00:39:01.108 --> 00:39:03.177
請查閱它們 它們很棒

00:39:04.611 --> 00:39:06.446
祝你們度過愉快的一天

00:39:06.513 --> 00:39:09.650
希望大家在WWDC餘下的演講中
過得愉快 非常感謝！