00:00:20.153 --> 00:00:25.225 
WATCHOS快速操作技術

00:00:30.831 --> 00:00:32.332 
大家早上好

00:00:33.834 --> 00:00:35.035 
我叫Tom Witkin

00:00:35.135 --> 00:00:37.371 
Apple watchOS的工程師

00:00:37.437 --> 00:00:40.174 
今早我們將討論添加快速操作

00:00:40.240 --> 00:00:41.842 
進入Apple Watch應用

00:00:42.309 --> 00:00:44.545 
讓我們從這個問題開始

00:00:44.845 --> 00:00:47.147 
我們如何定義快速操作？

00:00:47.548 --> 00:00:51.985 
我很確定你們中的很多人
爲iOS或Mac OS開發過應用

00:00:52.052 --> 00:00:54.354 
在那些平臺上
我們一般測量

00:00:54.454 --> 00:00:56.857 
用戶花在你的應用上的時間

00:00:57.024 --> 00:00:59.293 
尺度是幾分鐘甚至幾小時

00:00:59.393 --> 00:01:01.695 
但是在watchOS中
是另一種情況

00:01:01.795 --> 00:01:03.630 
用戶希望可以舉起他們的手腕

00:01:03.697 --> 00:01:07.100 
然後快速獲得特定信息
或者執行特定操作

00:01:07.201 --> 00:01:09.536 
然後放下他們的手腕
回到他們之前做的事

00:01:09.636 --> 00:01:12.539 
所以交互模型完全不同

00:01:12.606 --> 00:01:15.509 
這裏有些關於什麼是
Apple Watch快速操作之例

00:01:17.411 --> 00:01:19.613 
比如說開始一個定時器

00:01:22.649 --> 00:01:23.884 
或者查看天氣

00:01:27.621 --> 00:01:29.923 
或者從你的購物清單裏刪除一項

00:01:31.291 --> 00:01:34.795 
我們認爲這些是一些操作類型的原型
在Apple Watch上

00:01:34.895 --> 00:01:38.232 
在這背後有一些關鍵的哲學
你們可能已經在這周聽說過

00:01:38.699 --> 00:01:40.734 
首先Apple Watch上的應用

00:01:40.834 --> 00:01:42.069 
他們要易於查看

00:01:42.169 --> 00:01:43.637 
也就是說只需要一瞥

00:01:43.704 --> 00:01:46.139 
你的用戶就應該能夠獲得他們
想要的信息

00:01:47.207 --> 00:01:48.709 
應用要易於操作

00:01:48.775 --> 00:01:51.445 
也就是說用戶應該能夠作出快速

00:01:51.545 --> 00:01:53.146 
並且獲得足夠信息的決定

00:01:53.714 --> 00:01:55.082 
最後它們要可響應

00:01:55.182 --> 00:01:57.317 
你應該從不讓用戶等待

00:01:57.618 --> 00:01:59.720 
如果你有興趣瞭解更多

00:01:59.820 --> 00:02:01.088 
我強烈建議你觀看

00:02:01.188 --> 00:02:04.491  
今天下午的設計優秀
Apple Watch體驗這一演講

00:02:04.591 --> 00:02:08.729  
或觀看watchOS 3新特性演講

00:02:09.696 --> 00:02:13.200  
現在我們對什麼是快速操作
有了初步瞭解

00:02:13.267 --> 00:02:17.104  
但是Apple Watch上的
快速操作是指多長時間？

00:02:17.905 --> 00:02:20.908 
我們認爲理想的操作時間

00:02:21.675 --> 00:02:23.777 
是2秒

00:02:23.844 --> 00:02:25.579 
2秒並不長

00:02:25.679 --> 00:02:29.082 
所以你們不得不仔細考慮
你們的設計

00:02:29.183 --> 00:02:30.817 
以及開發你們的應用

00:02:30.884 --> 00:02:32.719 
但是我們認爲這是可以實現的

00:02:32.786 --> 00:02:34.521 
特別是有了這些新特性的幫助

00:02:34.621 --> 00:02:37.224 
我們在watchOS 3中
加入的一個API

00:02:37.824 --> 00:02:39.159 
我們要從這開始

00:02:39.226 --> 00:02:42.029 
通過談論這些新的特性和API

00:02:42.095 --> 00:02:44.665 
之後我們要談論一些實用技術

00:02:44.731 --> 00:02:46.099 
你們可以在應用裏使用

00:02:46.166 --> 00:02:48.235 
來創建這一類快速操作

00:02:48.836 --> 00:02:51.138 
我要說的就這些
我想把演講交給我的同事

00:02:51.238 --> 00:02:53.240 
來談論新特性和API

00:02:54.942 --> 00:02:56.043 
謝謝Tom

00:02:56.143 --> 00:02:58.345 
大家好 我是Miguel

00:02:58.445 --> 00:03:00.380 
我將帶你們快速瀏覽

00:03:00.480 --> 00:03:03.250 
我們在WatchKit裏
引入的新API

00:03:03.317 --> 00:03:05.319 
使你們能實現快速操作

00:03:06.887 --> 00:03:09.590 
我將談論5類API

00:03:09.690 --> 00:03:12.893 
讓你們的應用易讀 易操作
隨時響應

00:03:13.894 --> 00:03:18.198 
首先要讓你們可以訪問更多新的
輸入種類

00:03:18.999 --> 00:03:20.300 
你們現在可以使用手勢

00:03:20.400 --> 00:03:22.269 
在你的應用中有手勢識別

00:03:23.604 --> 00:03:24.638 
我們要給你訪問

00:03:24.705 --> 00:03:27.407 
Digital Crown中的
旋轉事件

00:03:28.942 --> 00:03:31.778 
我們還有3個其他方面

00:03:32.279 --> 00:03:35.349 
一是增強的表導航

00:03:35.415 --> 00:03:38.652 
對新的用戶通知框架的支持

00:03:38.719 --> 00:03:41.622 
以及集成SpriteKit和SceneKit

00:03:42.422 --> 00:03:43.524 
讓我們開始

00:03:44.157 --> 00:03:46.460 
我會給你們API的概覽

00:03:46.527 --> 00:03:48.228 
然後 Tom會回到臺上

00:03:48.295 --> 00:03:51.431 
向你們展示一些他如何結合這些
API的例子

00:03:52.833 --> 00:03:56.136 
如果你在iOS中使用過手勢識別

00:03:56.236 --> 00:03:58.705 
那麼你基本上已經知道了幾乎
所有需要知道的

00:03:58.805 --> 00:04:01.642 
關於watchOS的手勢識別

00:04:01.708 --> 00:04:04.678 
如果你還沒有
手勢識別是對象

00:04:05.012 --> 00:04:07.481 
用來幫助你分析底層的觸摸事件

00:04:07.581 --> 00:04:09.983 
到可識別的手勢中

00:04:10.484 --> 00:04:13.187 
我們爲4個識別器編寫了支持

00:04:13.253 --> 00:04:14.087 
兩個離散的

00:04:14.788 --> 00:04:16.255 
SwipeGesture

00:04:17.757 --> 00:04:18.791 
和TapGesture

00:04:18.858 --> 00:04:21.261 
以及兩個連續的手勢識別器

00:04:23.230 --> 00:04:24.398 
PanGesture

00:04:26.567 --> 00:04:27.835 
和LongPress

00:04:29.336 --> 00:04:30.404 
你使用它們的方法

00:04:30.470 --> 00:04:32.940 
和你在WatchKit中進行的
大部分開發相似

00:04:33.006 --> 00:04:35.609 
是storyboard中的
interface builder

00:04:36.009 --> 00:04:38.879 
你把對象拖入你的界面中

00:04:39.313 --> 00:04:40.747 
如果你看看這個庫

00:04:40.814 --> 00:04:43.750 
你可以看到4個識別器實例

00:04:43.817 --> 00:04:45.586 
它們被拖入元素中

00:04:45.652 --> 00:04:48.522 
那些你想要附加手勢的元素

00:04:48.922 --> 00:04:52.292 
然後你在檢查器中設置
interface builder

00:04:53.293 --> 00:04:56.330 
你要做的最後一件事是把行動
拖入識別器中

00:04:56.430 --> 00:04:59.032 
到你的代碼的一個函數裏

00:04:59.132 --> 00:05:00.567 
這是一個函數將被調用

00:05:00.634 --> 00:05:02.870 
當手勢被系統識別時

00:05:03.370 --> 00:05:06.773 
如你所見一個參數是手勢識別器
它自己

00:05:07.841 --> 00:05:10.811 
從中你可以知道位置

00:05:11.178 --> 00:05:13.180 
手勢在這個位置被識別

00:05:13.247 --> 00:05:14.281 
這個對象的邊界

00:05:14.381 --> 00:05:16.984 
以及手勢的狀態

00:05:17.985 --> 00:05:20.654 
一些關於手勢狀態的事

00:05:21.788 --> 00:05:25.192 
手勢在被識別前從可能狀態開始

00:05:25.259 --> 00:05:28.495 
可能會轉變成已識別或失敗狀態

00:05:28.896 --> 00:05:30.797 
當你處理離散手勢時

00:05:30.898 --> 00:05:32.999 
你不需要過多考慮狀態

00:05:33.600 --> 00:05:36.403 
你只需要知道當手勢被識別時

00:05:36.470 --> 00:05:38.272 
你的行動方法被調用

00:05:39.506 --> 00:05:42.109 
這和連續手勢有一點不同

00:05:42.743 --> 00:05:44.912 
它們也從可能狀態開始

00:05:45.012 --> 00:05:46.813 
但就像它們的名字所表明的

00:05:47.414 --> 00:05:51.318 
它們會在代碼裏經歷多次更新

00:05:51.385 --> 00:05:55.589 
所以要假設你的行動方法會被
多次調用

00:05:55.656 --> 00:05:57.357 
隨着手勢的改變

00:05:57.424 --> 00:06:00.060 
給你一個機會更新用戶界面

00:06:02.563 --> 00:06:05.065 
一些watchOS中使用手勢的提示

00:06:05.866 --> 00:06:09.970 
我們推薦把它們附加到
組元素上

00:06:10.070 --> 00:06:11.972 
而不是控制上
你可以這樣做

00:06:12.039 --> 00:06:13.707 
但是你可能會和其他手勢衝突

00:06:13.774 --> 00:06:15.809 
那些已經在控制裏的手勢

00:06:16.276 --> 00:06:18.812 
並且記住你獲得一個更小的屏幕

00:06:18.879 --> 00:06:19.880 
在Watch應用中

00:06:19.947 --> 00:06:23.016 
那些組會是更大的界面元素

00:06:23.083 --> 00:06:24.518 
在你的應用中

00:06:25.786 --> 00:06:28.889 
你可以設定手勢間的依賴關係

00:06:29.790 --> 00:06:31.792 
但是對watchOS這隻可能

00:06:31.892 --> 00:06:34.194 
在查看器及interface
builder中

00:06:35.729 --> 00:06:38.498 
並且注意那些系統手勢

00:06:38.599 --> 00:06:41.401 
會優先於你定義的手勢

00:06:42.202 --> 00:06:43.036 
比如

00:06:44.004 --> 00:06:46.940 
如果你有一個元素允許滾動

00:06:47.007 --> 00:06:50.711 
並且你想要附加
一個SwipeDown手勢

00:06:50.777 --> 00:06:53.680 
它不會被識別
滾動會優先

00:06:53.814 --> 00:06:56.383 
ForceTouch和
LongPress也是同樣的

00:06:58.151 --> 00:06:59.987 
讓我們繼續到第二個輸入元素

00:07:00.053 --> 00:07:01.488 
Digital Crown

00:07:02.289 --> 00:07:05.592 
這是一個Apple Watch
獨有的元素

00:07:05.659 --> 00:07:09.997 
它允許用戶快速準確控制輸入

00:07:10.063 --> 00:07:13.166 
從watchOS 2
開始訪問Digital Crown

00:07:13.233 --> 00:07:15.769 
通過WKInterfacePicker對象

00:07:17.037 --> 00:07:20.140 
要使用它你要提供一個選取項目
列表

00:07:20.207 --> 00:07:21.475 
並且設置樣式

00:07:22.776 --> 00:07:25.078 
WatchKit會爲你繪製這些元素

00:07:25.145 --> 00:07:26.580 
這是列表樣式

00:07:26.647 --> 00:07:28.415 
你有堆疊樣式

00:07:29.082 --> 00:07:31.785 
圖片序列樣式

00:07:33.353 --> 00:07:34.922 
但是對這個元素

00:07:34.988 --> 00:07:38.125 
WatchKit幫助你處理很多事情

00:07:38.192 --> 00:07:39.359 
我們繪製這個元素

00:07:39.426 --> 00:07:42.663 
我們處理錶冠事件的解釋

00:07:42.729 --> 00:07:45.799 
我們當一個選擇被做出時
調用你的行動

00:07:46.867 --> 00:07:48.202 
在watchOS 3中

00:07:48.268 --> 00:07:51.405 
我們允許你直接訪問旋轉事件

00:07:51.605 --> 00:07:54.007 
所以你可以編寫你自己的UI元素

00:07:54.107 --> 00:07:56.276 
並且用旋轉數值來驅動它

00:07:58.212 --> 00:08:00.247 
這能過兩個新對象實現

00:08:00.347 --> 00:08:01.882 
通過我們要介紹的新類

00:08:01.949 --> 00:08:05.619 
WKCrownSequencer
它使你能訪問旋轉事件

00:08:06.453 --> 00:08:08.188 
對不起每秒的旋轉數

00:08:08.255 --> 00:08:11.425 
和新的委託協議
WKCrownDelegate

00:08:11.525 --> 00:08:13.760 
在旋轉差量上有回調函數

00:08:14.228 --> 00:08:16.563 
所以你會得到2種值

00:08:16.630 --> 00:08:19.366 
每秒的旋轉數和旋轉差量

00:08:19.867 --> 00:08:22.569 
你怎麼處理它們
或者你怎麼訪問它們?

00:08:23.470 --> 00:08:26.507 
如果你對每秒旋轉數感興趣

00:08:26.573 --> 00:08:28.909 
訪問crownSequencer
屬性

00:08:28.976 --> 00:08:32.379 
現在出現在所有界面控制器類中

00:08:33.280 --> 00:08:37.217 
你查詢它的每秒旋轉數屬性

00:08:37.284 --> 00:08:38.919 
這可能是你將會用到的東西

00:08:38.986 --> 00:08:41.788 
當你想知道錶冠的旋轉速度

00:08:41.855 --> 00:08:45.092 
可能是基於物理的動畫 遊戲
類似這些的東西

00:08:47.694 --> 00:08:50.297 
旋轉差量和你通信

00:08:50.364 --> 00:08:52.232 
通過委託協議

00:08:52.299 --> 00:08:56.803 
這使你能夠知道錶冠的旋轉次數

00:08:57.604 --> 00:09:00.574 
你會在crownDidRotate
方法中獲得回調

00:09:00.641 --> 00:09:03.844 
rotationalDelta
是一個參數

00:09:05.445 --> 00:09:07.247 
你在這個方法中需要做的

00:09:07.314 --> 00:09:09.616 
是維護一個累加器變量

00:09:09.683 --> 00:09:12.553 
你把我們傳給你的
差量加到這個累加器中

00:09:13.153 --> 00:09:16.557 
你要用的數學是一整圈旋轉

00:09:16.623 --> 00:09:19.159 
相當於累積的差量是1

00:09:20.694 --> 00:09:24.131 
另一個例子是如果你只想要
偵測到旋轉一半

00:09:24.198 --> 00:09:26.500 
你最多積累差量到0.5

00:09:26.567 --> 00:09:28.735 
所以你還是累加我們給你的差量

00:09:28.802 --> 00:09:30.470 
當它們超過閾值時

00:09:30.537 --> 00:09:32.472 
你知道一次旋轉發生了

00:09:33.874 --> 00:09:35.876 
這取決於你來斷定

00:09:35.943 --> 00:09:37.511 
如何計算這些旋轉

00:09:37.578 --> 00:09:40.781 
根據你想要顯示的內容的靈敏度

00:09:43.784 --> 00:09:47.120 
當我們向你發送數值時
請注意符號

00:09:47.187 --> 00:09:48.689 
可以是正或負

00:09:49.256 --> 00:09:51.225 
當用戶在滾動

00:09:51.291 --> 00:09:53.227 
想讓內容上移

00:09:53.293 --> 00:09:55.929 
我們發送正的值

00:09:56.029 --> 00:09:58.532 
當他們滾動想讓內容下移

00:09:58.599 --> 00:10:00.033 
我們發送負的值

00:10:00.334 --> 00:10:03.136 
這些值方向無關

00:10:03.203 --> 00:10:06.607 
所以你不需要考慮順時針逆時針
代表什麼

00:10:06.907 --> 00:10:11.545 
如果用戶改變錶冠的方向

00:10:11.612 --> 00:10:14.882 
我們仍然會給你正或負值

00:10:14.948 --> 00:10:16.383 
爲上和下

00:10:16.450 --> 00:10:17.718 
所以你不需要考慮那些

00:10:19.253 --> 00:10:22.089 
最後有一個錶冠焦點的概念

00:10:22.155 --> 00:10:25.993 
焦點可以被其他界面元素獲取

00:10:26.059 --> 00:10:29.129 
比如一個選擇器 一個滑動器
任何可滾動的元素

00:10:29.429 --> 00:10:31.164 
這需要你來決定

00:10:31.231 --> 00:10:35.068 
什麼時候界面元素需要取得錶冠
的焦點

00:10:35.435 --> 00:10:38.639 
這是一個很好的使用新手勢的地方

00:10:39.940 --> 00:10:40.774 
而且

00:10:41.808 --> 00:10:45.179 
一旦你決定你的元素需要重新
獲得焦點

00:10:45.245 --> 00:10:47.247 
請調用函數focus

00:10:47.314 --> 00:10:49.283 
並且不要忘了在初始化時調用

00:10:49.349 --> 00:10:52.719 
當你的界面控制器第一次出現

00:10:55.556 --> 00:10:58.425 
讓我們把輸入元素放一邊
說說別的

00:10:58.492 --> 00:11:01.595 
關於我們將引入的垂直填充

00:11:03.096 --> 00:11:07.601 
用戶瀏覽表格的典型方式

00:11:07.668 --> 00:11:09.503 
是選擇一行

00:11:09.570 --> 00:11:12.773 
在另一個控制器中查看這一行
的詳情

00:11:13.273 --> 00:11:16.176 
他們需要返回主表

00:11:16.243 --> 00:11:19.213 
他們需要選擇另一行才能查看詳情

00:11:21.114 --> 00:11:24.718 
在watchOS 3中
我們有垂直填充的概念

00:11:25.219 --> 00:11:27.187 
所以在你的表格中啓用它時

00:11:27.254 --> 00:11:30.557 
一旦你的用戶第一次進入詳情

00:11:30.657 --> 00:11:34.127 
他們可以滑動手指或使用錶冠

00:11:34.294 --> 00:11:37.531 
上和下來查看隨後的詳情

00:11:38.198 --> 00:11:42.436 
他們不需要回到主表中

00:11:42.669 --> 00:11:45.005 
使你的應用看起來更有響應性

00:11:46.273 --> 00:11:48.208 
你怎麼進入這種模式?

00:11:48.275 --> 00:11:49.743 
這很簡單

00:11:49.810 --> 00:11:53.680 
你只需要點選 Item
Pagination複選框

00:11:53.747 --> 00:11:56.316 
在你的表查看器中

00:11:56.884 --> 00:12:01.555 
但是你還需要確定你的表格
使用segues API

00:12:01.955 --> 00:12:05.959 
在這裏你告訴我們你想用什麼
上下文初始化控制器

00:12:06.026 --> 00:12:07.661 
然後用指定的上下文來初始化它

00:12:07.728 --> 00:12:09.196 
你可能已經在這樣做

00:12:11.131 --> 00:12:13.267 
所以這個API並沒有改變很多

00:12:13.333 --> 00:12:15.035 
只有一些改變

00:12:15.102 --> 00:12:19.806 
有一個方法允許你用代碼進入
連續模式

00:12:20.307 --> 00:12:22.576 
它在你啓動應用的時候很有用

00:12:22.643 --> 00:12:27.080 
通過點擊一個
complication或通知

00:12:27.147 --> 00:12:29.483 
並且你想直接進入一個特定視圖

00:12:29.583 --> 00:12:31.185 
在連續模式下

00:12:32.653 --> 00:12:34.821 
你要知道的第二件事是

00:12:35.789 --> 00:12:37.824 
WatchKit正試着
變聰明並幫助你

00:12:37.891 --> 00:12:39.226 
提升應用速度

00:12:39.293 --> 00:12:41.228 
所以我們爲控制器進行預熱

00:12:41.295 --> 00:12:44.731 
預測用戶會向上或下滾動

00:12:45.232 --> 00:12:48.268 
所以控制器的一些生命週期方法

00:12:48.368 --> 00:12:51.238 
會在元素出現在屏幕前被調用

00:12:51.872 --> 00:12:54.107 
我不會談論太多細節

00:12:54.174 --> 00:12:57.444 
但是我們有一整個新的場次
爲了性能的架構

00:12:57.544 --> 00:12:59.713 
會給你詳細的例子

00:12:59.780 --> 00:13:02.149 
關於所有的生命週期方法

00:13:03.417 --> 00:13:05.586 
現在讓我們來談談通知

00:13:05.686 --> 00:13:09.022 
他們是最快的操作

00:13:09.089 --> 00:13:12.459 
我們最初發布Apple Watch
產品時就引入了

00:13:14.494 --> 00:13:17.731 
所以從用戶的角度
你的用戶的角度

00:13:18.665 --> 00:13:21.568 
他們操作通知的方式

00:13:21.668 --> 00:13:24.538 
是簡單的感覺他們手臂的震動

00:13:25.239 --> 00:13:26.440 
他們擡起手腕

00:13:26.874 --> 00:13:29.877 
他們會自動看到這個短看界面

00:13:29.943 --> 00:13:31.278 
爲你的通知

00:13:31.845 --> 00:13:34.948 
如果他們保持手擡起

00:13:35.015 --> 00:13:38.285 
我們轉到這個通知的長看界面

00:13:41.488 --> 00:13:44.124 
他們對你通知的反應是

00:13:44.191 --> 00:13:46.493 
我會通過長看的例子

00:13:46.560 --> 00:13:48.262 
有着最多的細節

00:13:50.330 --> 00:13:53.333 
所以如果你已經有了優秀的交流

00:13:53.400 --> 00:13:56.036 
通過使用文字來表現你的
通知的內容

00:13:56.637 --> 00:13:59.106 
他們不需要做任何事
除了刪除這條通知

00:13:59.173 --> 00:14:01.175 
這是最短的快速操作

00:14:02.576 --> 00:14:06.046 
他們還可以點擊通知來啓動應用

00:14:08.415 --> 00:14:09.249 
或者

00:14:09.716 --> 00:14:14.154 
請記住通知可以有與它們相關聯
的定製化行動

00:14:14.621 --> 00:14:16.223 
在這個情況下我會展示3個

00:14:16.290 --> 00:14:18.525 
接受 可能 拒絕按鈕

00:14:18.659 --> 00:14:20.594 
你最多可以有4個

00:14:21.395 --> 00:14:24.131 
當你把行動和通知關聯時

00:14:24.565 --> 00:14:27.067 
他們可以是前臺行動

00:14:27.167 --> 00:14:29.369 
就是說如果用戶點擊按鈕

00:14:29.436 --> 00:14:31.605 
你的應用會被激活

00:14:31.839 --> 00:14:33.273 
或者後臺行動

00:14:34.341 --> 00:14:39.112 
後臺活動在watchOS 2中
永遠會被轉發給你的手機

00:14:42.115 --> 00:14:45.285 
在watchOS 3中
對通知的一個大改變

00:14:45.352 --> 00:14:49.189 
是有一個全新的通知框架

00:14:50.724 --> 00:14:53.627 
請到介紹通知這個場次

00:14:53.694 --> 00:14:57.331 
去了解關於這個新框架的所有
細節

00:14:58.065 --> 00:15:02.135 
但是對WatchKit開發者
高級的重點有三個

00:15:04.505 --> 00:15:05.706 
你們現在有一套

00:15:05.839 --> 00:15:09.510 
跨平臺的類似的通知API

00:15:09.576 --> 00:15:11.778 
iOS tvOS和watchOS

00:15:13.380 --> 00:15:16.884 
我們現在可以在watch上調度通知

00:15:19.219 --> 00:15:21.722 
有後臺行動的通知

00:15:21.788 --> 00:15:24.525 
會被髮送到你的擴展

00:15:24.591 --> 00:15:26.894 
只要它們是在Watch上調度的

00:15:30.364 --> 00:15:31.665 
讓我們來看看API

00:15:32.900 --> 00:15:35.903 
新的UNUserNotificationCenter
對象

00:15:35.969 --> 00:15:38.205 
你想要成爲這個對象的代表

00:15:38.272 --> 00:15:42.676 
當applicationDidFinishLaunching
方法啓動你的應用時

00:15:43.443 --> 00:15:44.611 
你想要指出

00:15:44.678 --> 00:15:48.515 
你要採用notification
center 委託協議

00:15:49.216 --> 00:15:52.119 
這個協議的2個方法對你很有用

00:15:52.219 --> 00:15:54.421 
第1個是willPresent方法

00:15:54.922 --> 00:15:57.925 
它會被調用
當你的應用已經被激活

00:15:58.458 --> 00:15:59.960 
在錶盤上

00:16:01.261 --> 00:16:03.564 
系統會給你一個機會告訴它

00:16:03.630 --> 00:16:05.966 
你想要系統怎麼處理那條通知

00:16:06.667 --> 00:16:09.002 
所以根據你的決定

00:16:09.069 --> 00:16:10.838 
在完成處理器這

00:16:11.205 --> 00:16:13.373 
系統將會做二件事中的一件

00:16:14.374 --> 00:16:17.311 
如果你要用警告選項

00:16:17.678 --> 00:16:21.281 
我們將會返回普通的長看界面

00:16:21.348 --> 00:16:25.085 
屬於這個通知並且它會覆蓋在
你的應用之上

00:16:26.119 --> 00:16:27.988 
如果你不想做任何事

00:16:28.055 --> 00:16:30.257 
那表明系統不應該做任何事

00:16:30.591 --> 00:16:32.192 
因爲你的應用已經被激活

00:16:32.259 --> 00:16:35.529 
你需要處理顯示通知內容

00:16:35.596 --> 00:16:37.231 
在你的應用裏用某些方式

00:16:38.699 --> 00:16:41.602 
第二個方法是
didReceive響應

00:16:42.469 --> 00:16:45.038 
當你的用戶在通知上採取行動

00:16:45.772 --> 00:16:48.642 
這是程序變成前臺運行時的
回調函數

00:16:48.709 --> 00:16:50.444 
因爲用戶點擊了按鈕

00:16:50.978 --> 00:16:54.248 
這也是watchOS 3新的入口點

00:16:54.314 --> 00:16:57.317 
在這你可以得到後臺行動的回調

00:16:57.684 --> 00:16:59.653 
但是請記住這隻作用於後臺行動

00:16:59.720 --> 00:17:01.755 
是由Watch自己調度的後臺行動

00:17:03.657 --> 00:17:05.692 
現在是快速回顧的好時機

00:17:05.759 --> 00:17:10.063 
回顧在Apple Watch上
調度和傳送通知

00:17:11.031 --> 00:17:13.867 
任何時候手機觸發一個通知

00:17:14.667 --> 00:17:18.672 
它被轉發給Watch
如果手機屏幕關閉

00:17:18.739 --> 00:17:21.275 
而且你戴着Watch並且它被解鎖

00:17:21.742 --> 00:17:23.676 
永遠都會是這種行爲

00:17:25.311 --> 00:17:26.646 
但在watchOS 3中

00:17:26.713 --> 00:17:29.082 
你可以調度你自己的通知

00:17:29.149 --> 00:17:30.584 
在Apple Watch上

00:17:31.218 --> 00:17:34.488 
請記住它們只被發送到Watch上

00:17:34.555 --> 00:17:36.056 
如果你的應用需要

00:17:36.123 --> 00:17:40.327 
在手機上也有相應的通知

00:17:40.427 --> 00:17:42.796 
你需要和手機通訊

00:17:42.863 --> 00:17:44.898 
並且在那調度你的通知

00:17:45.499 --> 00:17:48.368 
現在你可能想知道
如果我調度多個通知

00:17:48.435 --> 00:17:50.204 
如果它們都觸發了會發生什麼?

00:17:51.305 --> 00:17:54.908 
你可以刪除重複通知

00:17:54.975 --> 00:17:56.743 
只要你使用相同的識別符

00:17:56.810 --> 00:17:58.278 
在Watch上

00:17:58.345 --> 00:18:00.447 
和在iPhone上
對這個通知

00:18:01.081 --> 00:18:02.816 
如果我們在這種情況

00:18:02.883 --> 00:18:05.686 
我們轉發通知給Watch

00:18:06.753 --> 00:18:08.589 
我們首先查看識別符

00:18:08.722 --> 00:18:11.158 
如果還存在通知有相同的識別符

00:18:11.225 --> 00:18:12.793 
當時在Watch上被觸發

00:18:12.860 --> 00:18:15.128 
這有更高的優先級並且被顯示

00:18:15.195 --> 00:18:18.232 
這樣用戶就不會同時
看到兩條相同通知

00:18:21.768 --> 00:18:25.639 
最後讓我們談談SpriteKit
以及SceneKit對象

00:18:27.174 --> 00:18:30.210 
SpriteKit和SceneKit
提供豐富的API

00:18:30.277 --> 00:18:33.146 
它們允許你進行2D和3D繪製

00:18:33.213 --> 00:18:35.582 
它們允許你極大的擴展

00:18:35.649 --> 00:18:37.985 
你應用的視覺語言

00:18:39.486 --> 00:18:42.389 
我們有2個類爲了WatchKit

00:18:42.789 --> 00:18:44.691 
支持這些框架

00:18:44.758 --> 00:18:48.195 
針對SpriteKit
的WKInterfaceSKScene

00:18:48.929 --> 00:18:52.499 
針對SceneKit
的WKInterfaceSCNScene

00:18:54.101 --> 00:18:56.303 
你們還是進行所有的設置

00:18:56.370 --> 00:18:58.505 
在storyboard
以及interface builder中

00:18:59.406 --> 00:19:02.543 
你現在可以看到這兩個類出現在
庫中

00:19:04.278 --> 00:19:06.547 
你只需要把它們拖入你的控制器

00:19:06.613 --> 00:19:10.317 
它們就會提供繪製場景的畫布

00:19:10.617 --> 00:19:12.252 
然後設置就完成了

00:19:12.819 --> 00:19:14.955 
在查看器和interface builder中

00:19:17.858 --> 00:19:20.027 
一旦你準備好顯示場景

00:19:20.661 --> 00:19:24.164 
SpriteKit和SceneKit
所有代碼保持原樣

00:19:24.231 --> 00:19:26.200 
你繼續使用API

00:19:26.266 --> 00:19:29.303 
我不會討論那些框架本身的API

00:19:30.003 --> 00:19:33.006 
但是一旦你的場景準備好顯示

00:19:33.373 --> 00:19:36.710 
和WatchKit集成
來顯示場景很簡單

00:19:37.010 --> 00:19:39.179 
如果你在處理SpriteKit場景

00:19:39.246 --> 00:19:40.848 
你調用百分比函數

00:19:41.882 --> 00:19:44.751 
或者幾個函數
取決於你是否有過渡

00:19:45.485 --> 00:19:47.721 
如果你有一個SceneKit場景

00:19:47.821 --> 00:19:52.159 
你只需要在對象裏設置場景的屬性

00:19:53.360 --> 00:19:56.330 
這就是集成需要做的所有事

00:19:58.232 --> 00:20:00.334 
我已經帶你們快速回顧了

00:20:00.400 --> 00:20:03.203 
你們擁有的新的工具包項目

00:20:03.504 --> 00:20:05.672 
來開發易於查看 易於操作

00:20:05.739 --> 00:20:07.908 
可響應的應用

00:20:08.342 --> 00:20:11.078 
現在Tom會回來給出一些特定例子

00:20:11.144 --> 00:20:13.847 
關於怎樣結合多個界面

00:20:14.147 --> 00:20:16.049 
讓你的應用有更好的響應性

00:20:16.216 --> 00:20:17.050 
謝謝

00:20:23.357 --> 00:20:25.225 
好的
現在我們有了工具包

00:20:25.292 --> 00:20:27.160 
所以我們可以來看一些實用技術

00:20:27.227 --> 00:20:29.796 
要創建這些快速操作

00:20:30.497 --> 00:20:32.900 
我們要談談
增加complications

00:20:32.966 --> 00:20:35.736 
和通知在你的應用中
現在這些並不是新東西

00:20:35.802 --> 00:20:38.605 
但是我們要談談它們的一些
獨特的新方式

00:20:39.540 --> 00:20:41.275 
之後我們會談談

00:20:41.341 --> 00:20:44.077 
在apps有一個簡單的瀏覽模型

00:20:44.711 --> 00:20:45.913 
最後我們會談談

00:20:45.979 --> 00:20:48.582 
給你的用戶放下手腕的信心

00:20:48.649 --> 00:20:51.585 
在他們在你的應用裏完成操作後

00:20:52.219 --> 00:20:54.855 
我們從易於操作的
complications開始

00:20:55.656 --> 00:20:59.593 
在watchOS 2中對第三方應用
引入了complications

00:20:59.660 --> 00:21:02.462 
在watchOS 3中
它們扮演更重要的角色

00:21:03.063 --> 00:21:05.832 
現在有更多的錶盤
有complications

00:21:06.033 --> 00:21:09.870 
有一些已有的錶盤有更多的
complication插槽

00:21:10.270 --> 00:21:12.739 
現在你可以快速滑動

00:21:13.774 --> 00:21:17.778 
在你的錶盤間來查看
所有complications

00:21:17.845 --> 00:21:20.280 
因此我們認爲每個應用

00:21:20.347 --> 00:21:22.850 
Apple Watch
都該有complication

00:21:22.916 --> 00:21:26.386 
你還什麼看到所有原生apps
都有complications

00:21:26.453 --> 00:21:28.655 
比如健身應用和心率應用

00:21:29.723 --> 00:21:30.991 
爲何有complications？

00:21:31.358 --> 00:21:33.827 
它們非常易讀
它們永遠在手腕上

00:21:33.894 --> 00:21:37.197 
只要一眼就能看到很多重要信息

00:21:38.198 --> 00:21:39.566 
它們頻繁更新

00:21:39.633 --> 00:21:42.503 
若你的應用在當前錶盤
上有complication

00:21:42.569 --> 00:21:44.571 
它每小時至少更新2次

00:21:44.638 --> 00:21:46.640 
你能確保新鮮

00:21:46.707 --> 00:21:49.443 
以及當前的數據
用戶部是可以得到這些

00:21:50.744 --> 00:21:52.079 
你的應用會保留在內存裏

00:21:52.145 --> 00:21:53.680 
這很重要

00:21:53.780 --> 00:21:56.717 
因爲這使你應用的啓動很快

00:21:56.783 --> 00:21:58.952 
使你應用裏的很多操作

00:21:59.019 --> 00:22:00.587 
響應更快

00:22:01.889 --> 00:22:06.159 
而且complications提供
一種方式使用戶更快進入應用

00:22:06.226 --> 00:22:08.495 
來完成特定功能

00:22:09.263 --> 00:22:12.733 
比如我們來看
音樂complication

00:22:12.799 --> 00:22:15.502 
我點擊它
我直接進入現在播放界面

00:22:15.569 --> 00:22:18.539 
如果我在播放音樂這對我最重要

00:22:18.605 --> 00:22:21.241 
我可以播放 暫停 跳過一首歌

00:22:21.308 --> 00:22:23.877 
這使整個操作快得多

00:22:23.944 --> 00:22:26.113 
因爲我直接進入我想要的界面

00:22:27.814 --> 00:22:31.552 
watchOS 3和iOS 10中
新出現的是新畫廊

00:22:31.618 --> 00:22:33.720 
在iPhone的
Apple Watch應用中

00:22:33.954 --> 00:22:37.558 
這很好因爲它允許你在
Apple Watch中添加新錶盤

00:22:37.624 --> 00:22:40.260  
它還允許你定製錶盤

00:22:40.327 --> 00:22:42.095  
並在complications中
選擇

00:22:42.162 --> 00:22:44.765  
第三方complications
也會出現在這

00:22:44.831 --> 00:22:47.968  
這方便用戶
發現你的complications

00:22:48.068 --> 00:22:50.137  
並把它直接加入錶盤

00:22:51.138 --> 00:22:53.173 
如果你想成爲這些
complications的一部分

00:22:53.240 --> 00:22:54.808 
你創建一個
complication捆綁

00:22:54.875 --> 00:22:57.544 
在開發者網站上有相關文檔

00:22:57.611 --> 00:22:59.479 
我強烈建議你們去看一下

00:23:00.280 --> 00:23:03.717 
所以Apple Watch上的
complications機制很棒

00:23:03.784 --> 00:23:05.385 
使用戶進入你的應用

00:23:05.485 --> 00:23:07.721 
並提供一系列快速操作

00:23:07.821 --> 00:23:10.390 
如果你的當前應用
沒有complication

00:23:10.490 --> 00:23:12.993 
或者你正在開發新應用
請確保你包括它們

00:23:14.795 --> 00:23:17.898 
接下來我們來到易讀的通知

00:23:17.998 --> 00:23:20.100 
我們都知道通知

00:23:20.167 --> 00:23:22.069 
在Apple Watch上很優秀

00:23:22.503 --> 00:23:26.139 
一個主要原因是它們完全可定製

00:23:26.206 --> 00:23:28.709 
你可以把它們弄成任意你想要的
樣子

00:23:29.076 --> 00:23:33.213 
而且它允許你顯示真正有價值的
信息

00:23:33.280 --> 00:23:35.516 
在通知中

00:23:35.616 --> 00:23:37.885 
比如這是一個日曆通知

00:23:37.951 --> 00:23:41.054 
我可以看到事件的名稱
時間 地點

00:23:41.421 --> 00:23:42.656 
而且

00:23:42.723 --> 00:23:44.625 
這經常可以去除一種必要性

00:23:44.691 --> 00:23:46.226 
啓動Watch應用的必要性

00:23:46.293 --> 00:23:49.363 
因爲重要的信息都內聯了

00:23:49.429 --> 00:23:50.697 
在通知中

00:23:51.231 --> 00:23:54.968 
在watchOS 3中
所有通知都支持SpriteKit

00:23:55.068 --> 00:23:56.904 
和SceneKit以及內聯視頻

00:23:56.970 --> 00:23:59.473 
所以你能提供更多定製

00:23:59.540 --> 00:24:00.874 
在你的通知中

00:24:02.176 --> 00:24:03.510 
所以SpriteKit和SceneKit

00:24:03.577 --> 00:24:06.213 
我確定你們中的很多人認爲是
爲了遊戲

00:24:06.280 --> 00:24:07.447 
而且他們確實利於遊戲

00:24:07.514 --> 00:24:10.918 
在週五會有一個場次
關於Apple Watch的遊戲

00:24:11.084 --> 00:24:15.155 
但是在這裏我想要談談它們
非遊戲的界面

00:24:15.756 --> 00:24:17.925 
爲什麼它們對非遊戲重要?

00:24:18.292 --> 00:24:22.229 
它們允許你完全定製內容

00:24:22.296 --> 00:24:25.399 
和佈局以及你界面的動畫

00:24:25.465 --> 00:24:29.069 
所以這允許你創建定製化的外觀

00:24:29.636 --> 00:24:32.873 
我們來看一個Photos應用的例子

00:24:32.940 --> 00:24:35.809 
你可以看到我獲得
來自我的朋友Ivy的通知

00:24:35.876 --> 00:24:37.711 
她向我分享了一些照片

00:24:38.145 --> 00:24:40.180 
這不包括很多信息

00:24:40.247 --> 00:24:41.982 
我不知道這些照片是關於什麼

00:24:42.049 --> 00:24:44.751 
我需要閱讀文字來知道誰分享了
它們

00:24:44.818 --> 00:24:47.888 
這樣我們可以獲得很多好處

00:24:47.955 --> 00:24:51.124 
從通知的可定製性中

00:24:51.959 --> 00:24:55.529 
所以現在有另一種方法
在頂部使用SpriteKit

00:24:55.596 --> 00:24:57.998 
它包括共享給我的相片

00:24:58.065 --> 00:25:00.067 
它有我朋友Ivy的相片

00:25:00.133 --> 00:25:02.703 
只需要瞥一眼我就可以獲得
大量信息

00:25:02.769 --> 00:25:05.739 
最終我可以獲得更多信息來做決定

00:25:05.806 --> 00:25:08.008 
我是否需要啓動Watch應用

00:25:08.075 --> 00:25:10.878 
或者拿出我的iPhone來查看
關於相片的更多信息

00:25:12.479 --> 00:25:14.014 
我們來看看這是如何實現的

00:25:14.081 --> 00:25:17.618 
在頂部我們有新的
WKInterfaceSKScene對象

00:25:18.051 --> 00:25:20.854  
在那之下我們有一個普通標籤

00:25:20.921 --> 00:25:24.157  
我想要指出這裏的關鍵之處是你
混合搭配

00:25:24.224 --> 00:25:27.127  
SpriteKit和
WatchKit界面元素

00:25:27.194 --> 00:25:29.863  
也許你正在使用動畫圖像

00:25:29.930 --> 00:25:31.798  
或者視圖動畫API

00:25:31.865 --> 00:25:33.834 
你可以用SpriteKit替換它們

00:25:34.134 --> 00:25:36.737 
或者你想要添加動畫到已有界面

00:25:36.803 --> 00:25:39.773 
你不需要爲了採用SpriteKit
而重寫一切

00:25:39.840 --> 00:25:42.643  
所以它提供一種強大的方式
來添加更豐富的內容

00:25:42.709 --> 00:25:43.810  
到你的界面中

00:25:43.877 --> 00:25:47.314  
而無需拋棄已有的一切重新開始
這很酷

00:25:48.782 --> 00:25:50.617 
如果你的應用中有通知

00:25:50.684 --> 00:25:53.554 
請確保充分發揮它們提供的優勢

00:25:53.687 --> 00:25:55.722 
如果你只想要默認界面

00:25:55.789 --> 00:25:57.958 
考慮什麼信息是真正重要的

00:25:58.025 --> 00:25:59.426 
在通知裏

00:25:59.493 --> 00:26:01.762 
添加一個定製界面來反映它

00:26:03.864 --> 00:26:05.399 
接下來讓我們來到

00:26:05.465 --> 00:26:09.069 
你應用中的一個簡單瀏覽模型

00:26:09.703 --> 00:26:13.006 
早前我們談論了表格的新的
垂直填充API

00:26:13.073 --> 00:26:15.609 
它對所有分層的應用都有利

00:26:15.676 --> 00:26:17.578 
但是在這裏我們想談談瀏覽

00:26:17.644 --> 00:26:20.414 
關於另外兩種技術

00:26:20.881 --> 00:26:23.650 
它們是手勢和
Digital Crown

00:26:23.717 --> 00:26:26.620 
Digital Crown
是Apple Watch特有的

00:26:26.687 --> 00:26:29.189 
它是一個很好的輸入機制

00:26:29.556 --> 00:26:32.726 
它允許你快速精確地操作界面

00:26:32.793 --> 00:26:35.529 
它用很多種使用方法

00:26:35.996 --> 00:26:38.198 
比如計時器應用

00:26:38.265 --> 00:26:41.668 
它可以快速通過不同的時長來
選擇你想要的時間

00:26:42.469 --> 00:26:44.805 
或者在Photos應用中它可以

00:26:44.872 --> 00:26:46.907 
放大縮小相片

00:26:47.741 --> 00:26:51.245 
你如何在應用中使用 Digital
Crown可很有創造性

00:26:51.311 --> 00:26:53.647 
我們對你怎樣使用它感到興奮

00:26:53.881 --> 00:26:55.716 
在這我們想通過一些例子

00:26:55.782 --> 00:26:57.384 
通過一個跑步應用

00:26:57.451 --> 00:26:59.720 
使用手勢和
Digital Crown

00:26:59.786 --> 00:27:01.188 
來簡化瀏覽

00:27:02.155 --> 00:27:04.224 
我們有一個跑步應用

00:27:04.291 --> 00:27:06.560 
目的是顯示我之前的跑步

00:27:06.627 --> 00:27:10.430 
並且顯示平均時間 距離 高度

00:27:11.031 --> 00:27:13.967 
一個版本是有一個關於每一英里
的列表

00:27:14.034 --> 00:27:16.837 
我可能點擊一英里來看更多信息

00:27:16.937 --> 00:27:19.439 
或者我滾動列表來看跑步全程

00:27:19.973 --> 00:27:23.377 
這個版本有我需要的所有信息

00:27:23.544 --> 00:27:26.380 
你不得不找來找去來尋找你想要的

00:27:26.446 --> 00:27:28.782 
你需要點擊一行
你需要滾動這個列表

00:27:28.849 --> 00:27:31.218 
信息的密度不易讀

00:27:31.285 --> 00:27:34.087 
這絕對可以用更好的方式實現

00:27:35.255 --> 00:27:37.758 
這是一個使用SpriteKit的
替代方案

00:27:37.824 --> 00:27:40.661 
使頂部有一個圖表
顯示跑步全程

00:27:40.727 --> 00:27:43.997 
只需要一瞥我可以看到更多信息

00:27:44.498 --> 00:27:47.100 
現在有了手勢
我可以點擊圖表

00:27:47.334 --> 00:27:50.304 
它會在步速和高度中使用動畫

00:27:51.205 --> 00:27:54.141 
用Digital Crown
在圖表中瀏覽

00:27:54.208 --> 00:27:55.909 
到達特定的數據點

00:27:56.910 --> 00:27:59.346 
雖然屏幕上有很多信息

00:27:59.413 --> 00:28:01.148 
瀏覽變得更容易

00:28:01.215 --> 00:28:03.951 
要到達我在尋找的特定信息

00:28:04.017 --> 00:28:06.854 
使得整個操作更快

00:28:07.621 --> 00:28:09.823 
如你所見我們開始混合搭配

00:28:09.890 --> 00:28:11.792 
我們介紹的所有技術

00:28:11.859 --> 00:28:14.561 
手勢 Digital Crown
和SpriteKit

00:28:14.862 --> 00:28:17.231 
它們創造出一些很強大的組合

00:28:17.531 --> 00:28:19.733 
當你開發自己的應用時

00:28:19.800 --> 00:28:22.936 
你應該確保考慮過這些技術

00:28:23.036 --> 00:28:26.273 
並看看它們能怎樣幫助簡化你
應用的瀏覽

00:28:26.573 --> 00:28:30.978 
我們把很多時間花在
watchOS 3的瀏覽上

00:28:31.044 --> 00:28:33.247 
我們很想確保它

00:28:33.313 --> 00:28:36.416 
也進入到你們的應用裏

00:28:39.419 --> 00:28:42.155 
最後我們要談一個技術

00:28:42.456 --> 00:28:44.658 
允許你的用戶放下手腕

00:28:44.725 --> 00:28:46.593 
一旦他們完成操作

00:28:47.194 --> 00:28:50.264 
在Apple Watch上
完成快速操作的一個關鍵方面

00:28:50.330 --> 00:28:53.267 
是使你的應用有很好的響應性

00:28:53.467 --> 00:28:57.037 
特別是你要用到任何類型的網絡

00:28:57.104 --> 00:28:59.206 
或者要和iPhone通訊

00:28:59.606 --> 00:29:01.241 
因爲通常這樣

00:29:01.308 --> 00:29:03.844 
會引入載入指示符
這並不是很好

00:29:04.444 --> 00:29:05.879 
它的一方面是

00:29:05.946 --> 00:29:07.915 
如果你在應用中更新數據

00:29:07.981 --> 00:29:10.851 
這是一個很大的話題我們實際上
可以花一整場時間來討論

00:29:10.918 --> 00:29:12.886  
使你的Watch應用保持最新狀態

00:29:12.953 --> 00:29:14.454  
請確保去看了這個演講

00:29:14.955 --> 00:29:18.992  
但是我們現在想討論響應用戶
操作時的網絡問題

00:29:19.526 --> 00:29:22.329 
例如我們有食品派送應用

00:29:22.429 --> 00:29:25.165 
你想買一些食品並點擊購買按鈕

00:29:25.232 --> 00:29:27.901 
你的應用在這種情況下應當怎樣
響應?

00:29:29.570 --> 00:29:32.639 
我們建議你立即提供反饋

00:29:32.706 --> 00:29:35.275 
向你的用戶
而不是顯示一個載入指示符

00:29:35.809 --> 00:29:38.312 
我們會用一個例子來解釋那
是什麼意思

00:29:38.412 --> 00:29:41.081 
這是我在談論的食品派送應用

00:29:41.682 --> 00:29:44.351 
我可以點擊我最喜歡的商品
那有一個大的購買按鈕

00:29:44.418 --> 00:29:47.487 
我們認爲這會是一個很快的操作

00:29:47.654 --> 00:29:50.891 
我點擊購買
我得到一個載入指示符

00:29:51.725 --> 00:29:54.494 
因爲應用要和服務器通訊

00:29:54.561 --> 00:29:57.531 
它需要處理這個訂單
它需要得到確認

00:29:57.898 --> 00:29:59.299 
一旦它完成了

00:29:59.466 --> 00:30:01.268 
它需要發送回Watch

00:30:01.335 --> 00:30:04.771 
此時它纔可以移除載入指示符

00:30:04.838 --> 00:30:06.640 
並且說 “你的訂單在路上了”

00:30:07.274 --> 00:30:10.110 
如果我們看看它的時間線
就會發現問題

00:30:10.177 --> 00:30:11.745 
我們從選擇商品開始

00:30:11.979 --> 00:30:12.980 
我們點擊購買

00:30:13.747 --> 00:30:15.682 
然後顯示載入指示符

00:30:15.782 --> 00:30:16.617 
在這期間

00:30:16.683 --> 00:30:19.319 
用戶只能擡着手腕看着你的應用

00:30:19.686 --> 00:30:21.555  
直到你顯示確認

00:30:21.822 --> 00:30:24.258  
用戶僅僅進行操作

00:30:24.324 --> 00:30:26.026  
在開始和結束階段

00:30:26.093 --> 00:30:28.295 
大部分時間用來等待

00:30:28.629 --> 00:30:31.899 
我們絕對可以改進這類操作

00:30:32.933 --> 00:30:36.670 
如果我們回到我們的食品應用

00:30:36.737 --> 00:30:39.940 
點擊購買按鈕
我們馬上得到反饋

00:30:40.474 --> 00:30:42.376 
關鍵是這並不是確認

00:30:42.442 --> 00:30:44.278 
因爲我們還沒有進行網絡通信

00:30:44.344 --> 00:30:46.013 
我們不能說訂單已經在路上

00:30:46.079 --> 00:30:47.414 
因爲我們不知道

00:30:47.481 --> 00:30:51.552 
但是我們想提供反饋
並讓用戶相信

00:30:51.618 --> 00:30:53.787 
應用在處理他們的訂單

00:30:53.954 --> 00:30:56.523 
並允許用戶放下手腕

00:30:56.590 --> 00:30:58.825 
不需要等待應用

00:30:59.393 --> 00:31:01.695 
現在在後臺應用會用

00:31:01.762 --> 00:31:04.398 
一個後臺NSURLSession

00:31:04.665 --> 00:31:06.366 
來和服務器通訊

00:31:06.433 --> 00:31:08.235 
並最終獲得響應

00:31:08.602 --> 00:31:11.238 
然後應用在後臺被喚醒

00:31:11.338 --> 00:31:13.740 
現在它可以使用本地通知支持

00:31:14.208 --> 00:31:17.611 
來說“好的現在你的訂單
已經確認了 它在路上”

00:31:17.778 --> 00:31:20.814 
然後你有和之前相同的信息

00:31:21.682 --> 00:31:22.816 
看看這種情況的時間線

00:31:22.883 --> 00:31:26.153 
它顯示這樣有怎樣的提升

00:31:26.220 --> 00:31:29.256 
我們選擇商品 點擊購買
我們以相同方式開始

00:31:29.957 --> 00:31:32.125 
接下不不是顯示載入指示符

00:31:32.192 --> 00:31:33.227 
我們顯示反饋

00:31:33.861 --> 00:31:35.629 
在我們完成網絡通信之後

00:31:35.696 --> 00:31:36.930  
我們顯示通知

00:31:37.698 --> 00:31:40.501  
從應用的角度來看
總的操作

00:31:40.567 --> 00:31:43.837  
和前一種情況一樣

00:31:44.438 --> 00:31:46.073  
但是從用戶的角度來看

00:31:46.440 --> 00:31:49.676  
感覺更快響應性更好

00:31:49.776 --> 00:31:52.045 
所以是一個更好的互動

00:31:52.646 --> 00:31:54.815 
我想要指出在這你實際上可以
怎麼

00:31:54.882 --> 00:31:57.551 
在用戶放下手腕後進行處理

00:31:57.618 --> 00:31:59.019 
如果你進行網絡通信

00:31:59.219 --> 00:32:02.089 
你可用後臺NSURLSession

00:32:02.155 --> 00:32:03.690 
並確保使用一個下載任務

00:32:03.757 --> 00:32:07.494 
這將允許你的應用在任務完成後
在後臺被喚醒

00:32:07.561 --> 00:32:10.097 
在這時
你可以進行本地通知

00:32:10.163 --> 00:32:11.765 
這對你的應用有意義

00:32:12.833 --> 00:32:16.036 
或者你需要在Watch中進行處理

00:32:16.103 --> 00:32:18.472 
你可以使用一個後臺任務判定

00:32:18.539 --> 00:32:19.673 
我們對它有很好的介紹

00:32:19.740 --> 00:32:22.176 
在去年的會話中
WatchKit提示和技巧

00:32:22.242 --> 00:32:25.145 
如果你要做任何處理請去看它

00:32:25.212 --> 00:32:26.313 
在Watch本身處理

00:32:27.047 --> 00:32:29.449 
2秒是一個大膽的目標

00:32:29.516 --> 00:32:32.819  
就Apple Watch上的
互動應該多快而言

00:32:32.886 --> 00:32:34.621  
但我們認爲它應該就是目標

00:32:34.688 --> 00:32:36.023  
當你開發你的應用時

00:32:36.089 --> 00:32:40.027  
因爲它會告訴你怎樣設計和開發應用

00:32:40.627 --> 00:32:43.564  
所以當你要開發新應用時

00:32:43.630 --> 00:32:45.632  
或者思考你已有的應用

00:32:45.699 --> 00:32:48.836 
確保在一開始就關注快速操作

00:32:49.002 --> 00:32:50.737 
思考什麼特性

00:32:50.804 --> 00:32:53.907 
是你的用戶想在你的應用上使用的

00:32:53.974 --> 00:32:56.476 
確保它們出現在最前

00:32:56.543 --> 00:32:58.545 
並且確實很快響應性很好

00:32:59.746 --> 00:33:01.715 
使用complications
和通知

00:33:01.782 --> 00:33:05.085 
因爲它們帶來很快的操作

00:33:05.152 --> 00:33:10.357 
它們爲你的應用帶來很多可用性

00:33:12.192 --> 00:33:15.963 
使用SceneKit和
SpriteKit創建豐富

00:33:16.029 --> 00:33:18.298 
且可操作的界面

00:33:18.365 --> 00:33:20.534 
它們能帶來很多能力

00:33:20.601 --> 00:33:23.136 
爲你新的和已有的應用

00:33:23.203 --> 00:33:25.772 
我們對你們將用它們做什麼
感到興奮

00:33:26.907 --> 00:33:28.342 
簡化瀏覽

00:33:28.408 --> 00:33:31.445 
再一次 watchOS做了很多工作

00:33:31.512 --> 00:33:34.081 
在系統層面簡化瀏覽

00:33:34.147 --> 00:33:38.018 
但是我們也希望那也發生在所有
的應用中

00:33:39.686 --> 00:33:41.522 
再一次 永遠不要讓用戶等待

00:33:41.588 --> 00:33:43.557 
如果你在屏幕上顯示載入指示符

00:33:43.624 --> 00:33:47.494 
試着重新組織你的應用
允許用戶放下手腕

00:33:47.561 --> 00:33:50.364 
立即提供反饋
並讓用戶相信

00:33:50.464 --> 00:33:52.332 
你的應用在處理事情

00:33:53.300 --> 00:33:56.103 
想了解我們今天談論的話題的
更多信息

00:33:56.170 --> 00:33:57.804 
去查看開發者網站

00:33:58.272 --> 00:34:00.641 
這周有很多演講我都強烈推薦

00:34:00.707 --> 00:34:03.777 
今天下午的
設計優秀Apple Watch體驗

00:34:03.844 --> 00:34:06.213 
或者明天的watchOS演講

00:34:07.147 --> 00:34:08.715 
就這些了
謝謝今天到這來

00:34:08.782 --> 00:34:10.951 
請在舊金山享受這種接下來的時光