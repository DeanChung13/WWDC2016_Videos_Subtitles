00:00:20.367 --> 00:00:22.767 
大家好 歡迎來到511會話

00:00:22.833 --> 00:00:25.833 
AVCapturePhotoOutput的基礎功能拓展

00:00:26.400 --> 00:00:29.333 
本期節目是第501期的補充

00:00:29.533 --> 00:00:31.500 
即對iOS Photography新進展的演示及說明

00:00:32.033 --> 00:00:32.967 
我是Brad Ford

00:00:33.033 --> 00:00:35.700 
Apple核心多媒體擷取團隊工程師

00:00:37.933 --> 00:00:42.533 
501會話重點講解了
AV foundations的攝影捕獲API

00:00:42.600 --> 00:00:45.600 
特別是AVCapturePhotoOutput

00:00:46.133 --> 00:00:49.667 
它是iOS 10下新的拍照接口

00:00:50.667 --> 00:00:53.400 
該輸出端支持實時圖象捕獲

00:00:54.167 --> 00:00:55.667 
RAW + DNG

00:00:56.733 --> 00:00:58.233 
寬色域內容

00:00:58.800 --> 00:01:01.333 
圖片預覽或縮略圖

00:01:01.967 --> 00:01:04.167 
如果你還未看過501會話

00:01:04.300 --> 00:01:07.700 
建議你暫停一下 先去收看501會話

00:01:08.067 --> 00:01:10.100 
以便你能從本期節目中獲得更多知識

00:01:12.533 --> 00:01:16.467 
在本期中 我們將會拓展
AVCapturePhotoOutput基礎

00:01:16.533 --> 00:01:21.067 
並討論501會話中未講解的兩個重點

00:01:21.133 --> 00:01:23.233 
即 場景監控

00:01:23.833 --> 00:01:26.833 
以及資源分配與回收

00:01:27.533 --> 00:01:29.267 
最後 我們將花幾分鐘

00:01:29.333 --> 00:01:31.900 
講解一個不相關 但很重要的東西

00:01:32.300 --> 00:01:35.367 
iOS 10下的相機隱私策略變化

00:01:37.567 --> 00:01:39.000 
簡要的回顧一下

00:01:39.533 --> 00:01:43.400 
新的AVCapturePhotoOutput擁有增強型接口

00:01:43.467 --> 00:01:47.433 
可應對AVCaptureStillImangeOutput的一些設計挑戰

00:01:48.467 --> 00:01:51.900 
使用一種功能化的程序模型

00:01:52.100 --> 00:01:55.867 
在可變數據與不可變數據
之間有明確的界線

00:01:56.733 --> 00:02:00.267 
它使用獨立的對象封裝各相片設置

00:02:00.333 --> 00:02:02.433 
這些設置稱爲AVCapturePhotoSettings

00:02:02.800 --> 00:02:05.767 
當發出照片捕獲請求時就需要調用它.

00:02:06.600 --> 00:02:08.300 
該設置使用委託式的接口

00:02:08.366 --> 00:02:11.367 
以跟蹤照片捕獲請求

00:02:11.433 --> 00:02:15.100 
這稱爲AVCapturePhoto的捕獲委託協議

00:02:16.967 --> 00:02:18.767 
委託協議中的所有回調函數

00:02:18.833 --> 00:02:22.700 
將返回AVCaptureResolvedPhoto設置的一個實例

00:02:23.067 --> 00:02:25.900 
這是個不可變對象 其中所有相片設置

00:02:25.967 --> 00:02:27.133 
都已確定

00:02:29.567 --> 00:02:32.700 
AVCapturePhotoOutput還支持場景監控功能

00:02:32.933 --> 00:02:36.133 
運用剛纔說過的那些捕獲對象的子集

00:02:38.533 --> 00:02:41.000 
場景監控可讓你呈現UI

00:02:41.067 --> 00:02:43.833 
該界面將場景特徵告知用戶

00:02:43.900 --> 00:02:45.200 
這些場景都是當前活動的場景

00:02:45.667 --> 00:02:47.867 
在這個Apple相機應用的截圖中

00:02:48.100 --> 00:02:50.733 
用戶明顯處於光度低的環境

00:02:51.967 --> 00:02:54.600 
屏幕下方閃光燈圖標

00:02:54.867 --> 00:02:58.133 
顯示用戶處於自動閃光模式下

00:02:58.200 --> 00:03:01.833 
意味着只有在情景需要時才能使用閃光功能

00:03:02.767 --> 00:03:06.200 
Apple相機應用是
AVCapturePhotoOutput的客戶端

00:03:06.267 --> 00:03:07.833 
進行場景監控

00:03:07.900 --> 00:03:11.200 
以驅動閃光燈激活爲黃色閃光圖標

00:03:11.267 --> 00:03:12.833 
你在屏幕正上方看見的

00:03:14.567 --> 00:03:17.133 
黃色的閃光圖標表示

00:03:17.200 --> 00:03:20.367 
如果用戶現在拍照的話
閃光燈就會啓動

00:03:22.033 --> 00:03:24.500 
AVCapturePhotoOutput執行場景監控功能

00:03:24.567 --> 00:03:26.067 
在兩種情況下

00:03:26.133 --> 00:03:27.667 
第一種是閃光燈

00:03:29.967 --> 00:03:31.833 
當前Apple所有的iPhone型號

00:03:31.900 --> 00:03:34.700 
以及9.7英寸的iPad Pro

00:03:34.767 --> 00:03:37.900 
都配備了雙色閃光燈以照亮黑暗的場景

00:03:37.967 --> 00:03:39.967 
通過後置視力相機

00:03:41.067 --> 00:03:44.233 
和retina閃光技術將
你的視網膜顯示器

00:03:44.300 --> 00:03:46.033 
變成雙色閃光燈

00:03:46.100 --> 00:03:48.800 
將亮度提高到正常情況的三倍

00:03:48.867 --> 00:03:51.333 
以便將低亮度的自拍照變亮

00:03:52.833 --> 00:03:55.733 
支持場景監控的第二種類型是

00:03:55.800 --> 00:03:57.533 
靜態圖象穩定技術

00:03:58.667 --> 00:04:02.267 
靜態圖象穩定是一種
多重圖象融合的捕獲技術

00:04:02.333 --> 00:04:07.533 
通過不同方式融合曝光圖片
以減少低亮度下的圖片模糊

00:04:08.033 --> 00:04:10.733 
有一點可能還不是很清楚
爲什麼靜態圖象穩定技術

00:04:10.800 --> 00:04:12.033 
具有低光度特點

00:04:12.433 --> 00:04:14.900 
這並是說你的手在黑暗中抖得更厲害

00:04:15.467 --> 00:04:17.700 
而僅僅是因爲相機需要更長的曝光時間

00:04:17.767 --> 00:04:19.867  
以獲取相同的光子數量

00:04:20.033 --> 00:04:22.767  
這要求攝影者得非常非常穩定才行

00:04:23.367 --> 00:04:25.800  
而靜態圖象穩定技術能解決這個問題

00:04:25.867 --> 00:04:28.733  
通過捕獲不同曝光水平的多重圖象

00:04:28.800 --> 00:04:32.700  
並將它們融合在一起
以消除幹擾與運動僞影

00:04:33.300 --> 00:04:38.233  
所以乍看起來 閃光燈的作用
或靜態圖象穩定技術的作用

00:04:38.300 --> 00:04:42.400  
似乎是無關的,
但事實上 它們密切相關

00:04:42.633 --> 00:04:44.967  
而這會造成接口衝突

00:04:46.867 --> 00:04:50.267  
從這張圖上可以看到適用的光亮範圍

00:04:50.333 --> 00:04:53.967  
在Flash Capture
是否帶有靜態圖象穩定時的對比情況

00:04:54.433 --> 00:04:58.067  
我將靜態圖象穩定技術簡稱爲SIS

00:04:58.667 --> 00:05:01.000  
藍條表示亮度級別

00:05:01.067 --> 00:05:03.300  
即照片輸出使用閃關燈的亮度

00:05:03.367 --> 00:05:05.733  
如果你選擇開啓SIS的話

00:05:06.333 --> 00:05:09.567  
綠條表示適於閃光燈啓動的光照強度

00:05:09.633 --> 00:05:11.800  
如果你選擇關閉SIS的話

00:05:12.633 --> 00:05:14.233  
注意到 在開啓SIS時

00:05:14.300 --> 00:05:17.233  
在相對黑暗的環境下能夠
不通過閃光燈來進行照片輸出

00:05:18.033 --> 00:05:22.000  
這是因爲SIS一定程度上
降低了圖象中的幹擾

00:05:22.067 --> 00:05:23.533  
因此不需要閃光燈介入

00:05:24.800 --> 00:05:29.033  
如果你當前所處環境的光強度在此
那麼問題的答案是

00:05:29.100 --> 00:05:32.000  
閃光燈一定會介入

00:05:33.000 --> 00:05:34.733  
但如果光強度在此

00:05:35.267 --> 00:05:39.233  
那完全取決於
你是否想開啓靜態圖象穩定技術

00:05:39.300 --> 00:05:40.800  
反之亦然

00:05:41.367 --> 00:05:42.800  
那麼 具體該怎麼做呢？

00:05:43.433 --> 00:05:47.000  
AVCapturePhotoOutput
並不知道你希望抓拍的類型

00:05:47.233 --> 00:05:48.367  
除非你向它提出要求

00:05:49.067 --> 00:05:52.700  
可如果開啓場景監控就得不停運行

00:05:53.067 --> 00:05:55.967  
當前是SIS場景還是flash場景呢？

00:05:58.633 --> 00:06:01.300 
在AVCapturePhotoOutput中
我們解決了這個問題

00:06:01.367 --> 00:06:03.900 
通過使用特定的場景監控端口

00:06:03.967 --> 00:06:06.733 
該端口叫做 關於場景監控的照片設置

00:06:07.967 --> 00:06:11.000 
並且我們提供了兩項鍵值觀察屬性

00:06:11.067 --> 00:06:13.233 
該屬性可對你進行非同步通知

00:06:13.300 --> 00:06:15.333 
當場景的適合性發生改變時

00:06:15.400 --> 00:06:18.433 
關於使用靜態圖像穩定技術還是閃光燈

00:06:21.367 --> 00:06:23.900 
你創建一個AVCapturePhotoSettings實例

00:06:23.967 --> 00:06:26.400 
具體來說是關於場景監控的實例

00:06:26.467 --> 00:06:30.400 
並明確你希望AVCapturePhotoOutput具備的功能

00:06:31.200 --> 00:06:33.967 
現在我將閃光燈設置爲自動模式

00:06:35.000 --> 00:06:38.433 
這說明我希望在使用閃光燈時

00:06:38.500 --> 00:06:39.733 
它已處於適用狀態

00:06:39.800 --> 00:06:42.967 
並且我還將AutoStillImageStabilization的Enabled屬性

00:06:43.033 --> 00:06:43.867 
設置爲true

00:06:44.133 --> 00:06:46.300 
那麼 對SIS也應該進行同樣設置

00:06:47.033 --> 00:06:50.167 
SIS會一貫地輸出比flash質量更高的圖片

00:06:50.567 --> 00:06:52.733 
那麼當場景陷入一種交叉範圍

00:06:52.800 --> 00:06:54.367 
該範圍處於SIS與flash之間

00:06:54.733 --> 00:06:57.400 
photoOutput報告
此種情況屬於SIS場景

00:06:58.133 --> 00:07:01.033 
接下來我將該對象指定爲照片設置

00:07:01.100 --> 00:07:02.967 
在SceneMonitoring屬性中

00:07:03.567 --> 00:07:05.300 
該屬性可在任何時候進行設置

00:07:05.367 --> 00:07:08.567 
甚至包括在你運行
AVCaptureSession前

00:07:10.333 --> 00:07:12.100 
爲獲知閃光燈的變化情況

00:07:12.167 --> 00:07:14.633 
及靜態圖象穩定技術的價值

00:07:14.867 --> 00:07:18.933 
我對之前提及的
isFlashScene添加了鍵值監測

00:07:19.000 --> 00:07:21.867 
並對isStillImageStabliziationScene
也進行了該操作

00:07:22.333 --> 00:07:25.133 
然後隨着場景值變化
我進行了回調操作

00:07:25.200 --> 00:07:26.600 
對於那兩個屬性

00:07:29.400 --> 00:07:31.733 
現在我們來討論場景監控的默認配置

00:07:33.100 --> 00:07:36.567 
photoSettingsforSceneMonitoring
的屬性是可空

00:07:36.633 --> 00:07:38.767 
並且該默認值爲nil,

00:07:38.833 --> 00:07:41.267 
這意味着沒有對場景進行監控

00:07:42.367 --> 00:07:45.133 
如果你在查詢
isStillImageStabilization

00:07:45.200 --> 00:07:50.033 
或isFlashScene時
若沒對場景監控功能進行相片設置配置

00:07:50.100 --> 00:07:52.867 
那麼它們將會一直報告錯誤

00:07:53.600 --> 00:07:56.267 
一旦你爲場景監控成功配置相片設定後

00:07:56.333 --> 00:08:00.567 
你可以查詢或通過鍵值觀察
兩種isScene的屬性

00:08:00.633 --> 00:08:02.100 
並得到恰當的回覆

00:08:03.467 --> 00:08:06.467 
但請注意
如果你對場景監控進行的照片設置中

00:08:06.533 --> 00:08:08.733 
包含關閉的flash模式的話

00:08:09.167 --> 00:08:11.900 
isFlashScene
將依舊報告錯誤

00:08:12.333 --> 00:08:15.100 
對於AutoStillImageStabilization
的Enabled屬性來說也一樣

00:08:18.233 --> 00:08:20.867 
對於場景監控 我的建議很簡單

00:08:21.400 --> 00:08:23.433 
如果你的應用不顯示任何用戶界面

00:08:23.500 --> 00:08:26.067 
僅顯示用戶正看到的場景

00:08:26.133 --> 00:08:28.233 
那麼你沒有必要啓動場景監控功能.

00:08:28.567 --> 00:08:31.800 
但如果啓動了該功能
它將會監控你希望捕獲的畫面

00:08:31.867 --> 00:08:36.332 
比如你希望使用Auto Flash
來拍攝而非SIS

00:08:36.633 --> 00:08:40.967 
那麼帶閃光模式的監控器
設爲自動或者自動SIS關閉

00:08:41.400 --> 00:08:44.000 
如果不這樣做 將會使用戶混淆

00:08:44.067 --> 00:08:46.933 
因爲你的用戶界面可能會報告
目前不處於閃光燈場景

00:08:47.000 --> 00:08:50.100 
儘管在實際拍照時 閃光燈會被啓動

00:08:52.600 --> 00:08:54.233 
以上爲場景監控功能的內容

00:08:54.500 --> 00:08:56.533 
在接下來的課程中 將介紹

00:08:56.600 --> 00:08:59.100 
資源調配與回收功能

00:09:01.133 --> 00:09:04.167  
爲了解按需資源調配功能的需要

00:09:04.233 --> 00:09:07.167  
我們來看看AVCaptureSession的
正常數據流程圖

00:09:08.833 --> 00:09:11.400  
當AVCaptureSession
開始運行

00:09:12.133 --> 00:09:15.100  
數據即開始從各個
AVCapture輸入端

00:09:15.167 --> 00:09:17.200  
流向各個 AVCapture輸出端

00:09:17.867 --> 00:09:21.233  
大部分輸出端口對數據流形式的數據
進行接收與處理

00:09:21.300 --> 00:09:23.067  
比如VideoPreviewLayer

00:09:23.133 --> 00:09:26.067  
該輸出口將輸入的數據
不斷地顯示在屏幕上

00:09:26.533 --> 00:09:30.767  
或VideoDataOutput
該輸出口通過委託回調來緩存至應用

00:09:31.500 --> 00:09:33.033  
此類流輸出

00:09:33.100 --> 00:09:36.433  
需要分裂性的捕獲渲染管道重建

00:09:36.500 --> 00:09:38.433  
如果改變它們的結構

00:09:38.500 --> 00:09:41.367  
你就不得不爲一種輸出模式進行配置

00:09:41.433 --> 00:09:43.067  
在運行程序之前

00:09:44.367 --> 00:09:46.433  
而AVCapturePhotoOutput不同

00:09:46.500 --> 00:09:50.333  
因爲它僅根據需要來從輸入接受數據

00:09:51.367 --> 00:09:54.567  
當你通過CapturePhoto
請求一張照片

00:09:54.633 --> 00:09:56.333  
並進行設置與代理

00:09:56.767 --> 00:10:00.467  
照片輸出端僅
輸出一個結果或結果的集合

00:10:01.967 --> 00:10:03.467  
不像流輸出口

00:10:03.633 --> 00:10:05.733  
照片輸出具有充分的等待時間

00:10:06.200 --> 00:10:11.233  
因此能夠在完美的位置上 按要求
進行資源調配或回收

00:10:11.300 --> 00:10:15.367  
而不會造成擾亂性的渲染模式重組

00:10:15.433 --> 00:10:18.533  
雖然看不見 但整個調配過程
卻十分華麗

00:10:20.533 --> 00:10:22.867 
當然 資源調配過程並非免費的

00:10:23.233 --> 00:10:26.433 
AVCapturePhotoOutput的功能集很廣

00:10:27.867 --> 00:10:30.300 
拍攝420像素的未壓縮照片

00:10:30.367 --> 00:10:32.900 
這些照片都爲
AVCapture設備的原始格式

00:10:32.967 --> 00:10:34.933 
僅需要極少的一部分資源

00:10:36.267 --> 00:10:39.767 
像EGRA或JPEG這類
經處理過後的輸出格式

00:10:39.833 --> 00:10:41.767 
則需要另外一些資源

00:10:41.833 --> 00:10:43.967 
因爲有格式轉換功能介入

00:10:45.033 --> 00:10:48.167 
閃光拍攝則需要它們自己的硬件資源集

00:10:48.233 --> 00:10:52.400 
以傳遞與預閃光序列及頻閃同圖像

00:10:53.800 --> 00:10:57.567  
靜態圖象穩定功能需要對
多個緩衝進行融合

00:10:58.967 --> 00:11:01.467  
拍攝RAW格式圖片則需要
十分大量的緩衝

00:11:02.567 --> 00:11:06.533  
RAW加JPEG格式的圖片則需要
大小資源的組合

00:11:07.667 --> 00:11:10.300  
Bracketed捕捉
需要大量的緩衝

00:11:10.367 --> 00:11:12.633  
以便將多個圖片返回到客戶端

00:11:13.833 --> 00:11:16.933  
當然 許多這樣的特徵
都能被混合並匹配

00:11:17.000 --> 00:11:19.067  
並需要資源超集

00:11:21.467 --> 00:11:23.367 
由於那麼多適用的捕獲特徵

00:11:23.433 --> 00:11:25.567 
AVCapturePhotoOutput很難

00:11:25.633 --> 00:11:28.667 
估計需要預先準備多少資源

00:11:29.233 --> 00:11:32.600 
過度準備及準備不足都是不好的

00:11:33.467 --> 00:11:36.133 
我們將過度準備比喻成烤蛋糕

00:11:36.200 --> 00:11:39.100 
一年中的每天都在烤蛋糕
以防止這一天就是你的生日

00:11:39.633 --> 00:11:41.133 
對我門而言 這需要付出很大努力

00:11:41.200 --> 00:11:43.033 
需要投入很多材料

00:11:43.100 --> 00:11:45.300 
扔掉很多沒有吃過的蛋糕

00:11:46.233 --> 00:11:48.767 
造成視頻預覽可能每次來的更慢

00:11:49.367 --> 00:11:51.800 
而內存消耗則可能高得毫無必要

00:11:53.233 --> 00:11:55.900 
沒作充分準備就算不比前者糟糕
也不是件好事

00:11:56.400 --> 00:11:58.267 
如果我們沒有準備好

00:11:58.333 --> 00:12:01.367 
使用所要求的特徵集進行照片捕捉
我們可能會錯過這次拍攝

00:12:01.433 --> 00:12:03.567 
直到按要求分配資源

00:12:04.667 --> 00:12:06.700 
幸運的是, 我們提供瞭解決方案

00:12:08.133 --> 00:12:11.200 
AVCapturePhotoOutput會讓你事先告知

00:12:11.267 --> 00:12:13.600 
你希望捕捉的類型

00:12:13.667 --> 00:12:17.533 
只需要啓動
setPreparedPhotoSettingsArray功能

00:12:18.400 --> 00:12:21.400 
傳遞AVCapturePhotoSettings的數組

00:12:21.467 --> 00:12:24.167 
包括各個代表不同捕捉類型的數據

00:12:24.233 --> 00:12:26.133 
你希望爲之準備的

00:12:27.167 --> 00:12:29.300 
你可以選擇性地傳遞完成處理程序

00:12:29.367 --> 00:12:31.767 
待準備完成時 即可調用該程序

00:12:33.433 --> 00:12:34.900 
照片輸出端口還提供

00:12:34.967 --> 00:12:38.633 
一種只讀屬性的
preparedPhotoSettingsArray

00:12:38.700 --> 00:12:41.467 
因此你可以查詢最終設定的
設置數組

00:12:44.567 --> 00:12:48.033 
setPreparedPhotoSettingsArray功能
可以做很多事

00:12:49.500 --> 00:12:52.000 
它可以爲所有的捕捉類型準備資源

00:12:52.067 --> 00:12:53.667 
在你的設置數組中

00:12:54.200 --> 00:12:57.867 
另外 如果存在不需要的資源
該功能會對其進行回收

00:12:59.433 --> 00:13:03.000 
並且你還可以通過傳遞一個空數組
來回收所有的資源

00:13:05.133 --> 00:13:08.067 
當所有資源準備完畢
該功能會通知你

00:13:08.867 --> 00:13:12.633 
如果資源無法準備
該功能會返回錯誤

00:13:12.933 --> 00:13:15.867 
整個數據傳遞都通過完成回調進行

00:13:17.700 --> 00:13:20.133 
preparedPhotoSettingsArray的默認值

00:13:20.200 --> 00:13:24.200 
是一種關於AVCapturePhotoSettings
的默認函數

00:13:24.267 --> 00:13:27.433 
該函數將JPEG設置爲輸出格式

00:13:27.500 --> 00:13:30.267 
和AutoStillImageStabilization
的enabled屬性

00:13:33.267 --> 00:13:36.200 
preparedPhotoSettingsArray
具備sticky屬性

00:13:36.567 --> 00:13:40.833 
它會在AVCaptureSession
的啓動及結束之間

00:13:41.700 --> 00:13:45.600 
配置開始或確認期間持續存在
並且你可以對其進行設置或忽略

00:13:45.667 --> 00:13:48.433 
如果你總是通過你的應用
拍攝同種類型的照片

00:13:49.533 --> 00:13:52.600 
setpreparedPhotoSettingsArray
的另一好處是

00:13:52.933 --> 00:13:55.567 
它能加入AVCaptureSession的

00:13:55.633 --> 00:13:59.267 
begin/commitConfiguration延期工作語義

00:13:59.700 --> 00:14:02.467 
也就是說如果你調用
beginConfiguration

00:14:02.533 --> 00:14:04.733 
之後改變會話的拓撲模型

00:14:04.800 --> 00:14:07.467 
通過添加或移除輸出端口或輸入端口

00:14:07.533 --> 00:14:10.333 
之後設置新的
preparedPhotoSettingsArray

00:14:10.900 --> 00:14:12.667 
然後確認配置

00:14:13.000 --> 00:14:17.367 
除非配置確認被調用
否則不會進行準備程序

00:14:17.833 --> 00:14:20.233 
你可以按照原子的方式來
對會話配置進行變更

00:14:20.300 --> 00:14:21.933 
並同時準備照片輸出

00:14:22.000 --> 00:14:24.733 
爲新的配置

00:14:28.200 --> 00:14:31.167 
你可以在運行AVCaptureSession前進行準備

00:14:31.233 --> 00:14:33.700 
以確保app處於準備捕捉相片的狀態

00:14:33.767 --> 00:14:35.800 
只要視頻預覽開始運行

00:14:37.000 --> 00:14:40.767 
在會話停止時 如果你調用
setPreparedPhotoSettingsArray

00:14:41.067 --> 00:14:43.900 
它不會立即回調完成處理程序

00:14:43.967 --> 00:14:47.700 
相反 完成處理程序會在
準備完成時被調用

00:14:47.767 --> 00:14:51.000 
在你調用會話啓動程序之後

00:14:51.833 --> 00:14:54.967 
如果你的會話被終止並且
你已經準備了一組設定參數

00:14:55.033 --> 00:14:56.333 
之後 你改變了注意

00:14:56.400 --> 00:14:58.767 
使用另一組設定參數重新調用該程序

00:14:58.833 --> 00:15:01.367 
你最初的完成處理程序將即刻啓動

00:15:01.433 --> 00:15:03.533 
通過設置爲false的準備數據

00:15:03.600 --> 00:15:07.800 
實際上 這是對最初準備數據的註銷

00:15:09.833 --> 00:15:11.533 
我們提三個簡單的建議

00:15:11.600 --> 00:15:13.933 
關於如何使用我們準備的API

00:15:14.400 --> 00:15:16.467 
首先 準備

00:15:17.367 --> 00:15:20.600 
你可在不進行最初準備的情況下
發出捕捉請求

00:15:20.933 --> 00:15:23.533 
但 如果未對照片輸出

00:15:23.600 --> 00:15:26.033 
準備你希望捕捉的精確類型

00:15:26.100 --> 00:15:28.567 
則你可能會很慢地獲取的第一張照片

00:15:30.333 --> 00:15:34.467 
第二 在啓動你的會話程序之前
進行準備

00:15:34.967 --> 00:15:37.433 
知道你感興趣的捕捉類型

00:15:37.500 --> 00:15:40.100 
讓會話程序爲你分配最佳數量

00:15:40.167 --> 00:15:41.133 
在啓動時

00:15:42.733 --> 00:15:46.533 
第三 僅在你的UI界面發生變更時
重新進行準備

00:15:46.733 --> 00:15:49.767 
你不必在捕捉圖片的各時刻
重新進行準備

00:15:49.833 --> 00:15:53.033 
僅在你改變了將要捕捉的類型時

00:15:53.100 --> 00:15:56.667 
例如當你的用戶將
RAW Capture或Bracketed Capture

00:15:56.733 --> 00:15:58.200 
在應用中切換成打開或關閉

00:16:01.100 --> 00:16:03.333 
不是所有AVCapturePhotoOutput特徵

00:16:03.400 --> 00:16:06.200 
都具有按需資源準備的資格

00:16:07.133 --> 00:16:11.033 
首當其衝的isHighResolutionCaptureEnabled

00:16:11.800 --> 00:16:15.400 
一些照相格式可以讓你
捕捉高清晰的靜態圖像

00:16:15.467 --> 00:16:19.567 
比該格式可支持的流分辨率還要大

00:16:19.633 --> 00:16:22.567 
比如 前置相機的照片格式

00:16:22.633 --> 00:16:25.333 
在iPhone 6s
及6s Plus上的

00:16:25.400 --> 00:16:27.767 
支持五百萬像素的靜態圖像

00:16:27.833 --> 00:16:30.400 
但僅能傳輸1280x960的圖片

00:16:30.833 --> 00:16:33.267 
當相機配置該種格式

00:16:33.333 --> 00:16:36.367 
要麼傳輸1280x960的靜態圖像

00:16:36.433 --> 00:16:38.533 
要麼傳輸五百萬像素的靜態圖像

00:16:38.600 --> 00:16:42.600 
根據你的照片設置是否規定了
高分辨率捕捉

00:16:43.167 --> 00:16:47.200 
但事先必須對相機配置爲
五百萬像素的靜態圖像

00:16:47.567 --> 00:16:51.600 
所以AVCapturePhotoOutput
要求你選擇其特徵

00:16:51.667 --> 00:16:53.100 
在你準備啓動程序前

00:16:53.167 --> 00:16:56.367 
通過設定isHighResolutionCaptureEnabled
爲true

00:16:57.167 --> 00:17:01.700 
一旦你選定 就可以在啓動或未啓動
高分辨率捕捉功能的情況下 拍攝靜態圖

00:17:01.767 --> 00:17:04.500 
而不會造成複雜的圖形重建

00:17:06.099 --> 00:17:09.800 
類似地  LivePhotoCapture涉及動態影片

00:17:09.867 --> 00:17:11.400 
及靜態圖像的拍攝

00:17:11.867 --> 00:17:14.032 
電影包含的樣本來自過去

00:17:14.567 --> 00:17:17.599 
在你發出捕捉請求之前1.5秒

00:17:17.666 --> 00:17:20.867 
因此 對捕捉渲染模式的配置操作

00:17:20.933 --> 00:17:22.599 
必須在進行該項捕捉程序之前

00:17:23.599 --> 00:17:29.033 
最後 動態圖像能夠以智能及自動的方式
在捕捉時間進行調整

00:17:29.100 --> 00:17:31.367 
如果檢測到大幅度的目的性運動

00:17:31.433 --> 00:17:35.367 
比如某人將手臂放下 把設備裝進口袋

00:17:36.033 --> 00:17:39.667 
如果你想捕獲
原始動態照片的整個過程

00:17:39.733 --> 00:17:43.433 
你必須在啓動程序前
退出自動調整功能

00:17:43.500 --> 00:17:44.967 
在你的AVCaptureSession上

00:17:47.233 --> 00:17:48.567 
今天最後要討論的是

00:17:48.633 --> 00:17:52.433 
iOS 10中的相機隱私策略變更

00:17:54.467 --> 00:17:57.533 
讓我們回顧一下Apple關於
媒體的隱私策略

00:17:58.267 --> 00:18:01.933 
用戶iOS設備上的照片
與視頻是個人的

00:18:02.000 --> 00:18:04.000 
私人的以及敏感的數據

00:18:04.533 --> 00:18:07.633 
照相機與麥克風的使用需要特別授權

00:18:07.700 --> 00:18:10.467 
必須經用戶的明確授權

00:18:11.300 --> 00:18:13.267 
因此從iOS 7開始

00:18:13.333 --> 00:18:16.133 
用戶被告知 首次使用的應用

00:18:16.200 --> 00:18:20.500 
照相機或麥克風
都有一次被禁止使用的機會

00:18:21.100 --> 00:18:22.367 
這件事非常好

00:18:22.867 --> 00:18:24.300  
爲了透明與信任

00:18:24.367 --> 00:18:27.633  
別爲點擊一次OK而惱怒 這是值得的

00:18:29.433 --> 00:18:34.267  
在iOS 10 我們要求應用
在透明度方面多一步確認

00:18:34.333 --> 00:18:38.367  
通知用戶
爲什麼它們要訪問敏感數據

00:18:38.933 --> 00:18:42.267  
有時 你的UI會做得很明顯
但有時卻不會

00:18:42.900 --> 00:18:45.733  
你的原因字符串
應沒有任何歧義

00:18:45.800 --> 00:18:48.767  
例如：
此處 AVCam告訴用戶

00:18:48.833 --> 00:18:52.200  
它想要使用相機
拍攝照片和視頻

00:18:52.267 --> 00:18:55.800  
這非常明確的交代了
它將用相機做什麼

00:18:57.467 --> 00:19:00.600  
同樣 iOS 10中的應用

00:19:00.667 --> 00:19:03.633  
必須提供原因字符串
以使用麥克風

00:19:06.400 --> 00:19:08.867  
最後是Photos Library

00:19:08.933 --> 00:19:12.600  
你該在Photos Library
的原因字符串中明確交代

00:19:13.067 --> 00:19:16.333  
你是把它用來
讀或寫 還是兩者兼而有之？

00:19:18.900 --> 00:19:20.600  
在Xcode的最新版本中

00:19:20.667 --> 00:19:23.700  
你會發現一連串的
可能的隱私描述說明

00:19:23.967 --> 00:19:26.500  
不僅侷限於攝像頭、麥克風和照片

00:19:26.700 --> 00:19:29.000  
而是針對所有敏感數據的訪問

00:19:29.533 --> 00:19:33.633  
爲了使用這些服務
你必須提供原因字符串

00:19:33.933 --> 00:19:34.867  
如果沒有

00:19:34.933 --> 00:19:38.100  
你的應用將無法
獲得所需服務的訪問權限

00:19:40.467 --> 00:19:43.633 
Capture的三個特殊關鍵要點是

00:19:43.700 --> 00:19:46.600 
NSCameraUsageDescription

00:19:46.667 --> 00:19:48.933 
NSMicrophone3UsageDescription

00:19:49.000 --> 00:19:51.733 
以及NSPhotoLibraryUsageDescription

00:19:54.700 --> 00:19:56.567 
下面讓我們總結一下剛學習的內容

00:19:57.267 --> 00:20:01.233 
AVCapturePhotoOutput允許
對場景監控行爲進行精準控制

00:20:02.167 --> 00:20:05.767 
它還可以按需
進行資源分配和回收

00:20:06.633 --> 00:20:10.500 
Capture客戶端必須提供
原因才能使用攝像頭、麥克風

00:20:10.567 --> 00:20:12.933 
以及照片這些iOS 10
功能組件的原因

00:20:14.467 --> 00:20:16.400 
想要了解更多詳情 請訪問URL

00:20:16.467 --> 00:20:19.700 
瞭解iOS Photography
的新進展這期節目

00:20:19.767 --> 00:20:21.100 
也就是501會話

00:20:22.867 --> 00:20:26.000 
如果你還在觀看節目
我們邀請你訪問

00:20:26.067 --> 00:20:27.800 
所有相關的三期節目

00:20:27.867 --> 00:20:32.000 
與攝影、
RAW以及Wide Color相關

00:20:32.067 --> 00:20:34.633 
謝謝收看
祝你捕獲快樂瞬間

00:20:34.700 --> 00:20:36.167 
請繼續享受其餘會話