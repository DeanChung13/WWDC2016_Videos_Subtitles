00:00:19.419 --> 00:00:21.622
字體排版和字體

00:00:26.226 --> 00:00:27.060
早上好

00:00:28.395 --> 00:00:29.496
大家早上好

00:00:30.330 --> 00:00:31.999
我叫
Antonio Cavedoni

00:00:32.064 --> 00:00:34.868
我來到這裏給大家講講字體排版和字體

00:00:34.935 --> 00:00:36.770
我是Apple的字體設計師

00:00:37.971 --> 00:00:41.375
所以在今天的日程上
將來看看San Francisco

00:00:41.808 --> 00:00:43.277
以及系統字體的升級

00:00:43.777 --> 00:00:45.913
我們會看到關於字體排版的一些術語

00:00:46.947 --> 00:00:48.982
我們會看看一些字體排版的概念

00:00:49.550 --> 00:00:52.419
以及在進行字體排版時
你可以使用的工具

00:00:53.220 --> 00:00:55.756
最後 我們會看看一些
你可能想要採用的細節

00:00:55.822 --> 00:00:57.291
當你在做應用的時候

00:00:59.426 --> 00:01:01.328
好了 San Francisco

00:01:01.929 --> 00:01:04.464
是我們系統字體的族類

00:01:04.697 --> 00:01:06.300
我們去年推出的

00:01:06.800 --> 00:01:09.369
你在這裏看到的就是SF

00:01:09.436 --> 00:01:13.674
而且它是macOS
iOS和tvOS的系統字體

00:01:14.308 --> 00:01:18.378
我們在去年 WWDC 上
推出了這一族類

00:01:18.445 --> 00:01:23.050
這裏有一個視頻講的
就是關於SF的理念和應用

00:01:24.985 --> 00:01:27.154
我們將SF應用到
我們的所有平臺上

00:01:27.588 --> 00:01:32.259
有Apple TV 我們將San
Francisco應用到Mac

00:01:33.126 --> 00:01:36.230
不過我們還將它應用到
重新設計的音樂應用上

00:01:36.763 --> 00:01:40.767
若在Moscone Center裏
你還沒有看完所有字體

00:01:40.834 --> 00:01:45.639
SF族類確實新添加了
一位成員 叫做SF Mono

00:01:46.607 --> 00:01:52.646
SF Mono是一種用於編碼的
新設計 而且有多種樣式

00:01:52.713 --> 00:01:54.815
我們從細體開始

00:01:54.882 --> 00:01:56.350
升到正常

00:01:56.683 --> 00:01:57.518
中等

00:01:58.018 --> 00:01:59.219
半粗體

00:01:59.286 --> 00:02:02.723
然後我們有表現力更強
的樣式 像是粗體和特粗

00:02:03.524 --> 00:02:06.927
所有這些都有斜體版本

00:02:08.529 --> 00:02:11.698
它們涵蓋拉丁文
SL和拉丁字母

00:02:12.132 --> 00:02:15.469
不過還有西裏爾字母
和希臘字母

00:02:15.536 --> 00:02:18.572
在所有樣式和
所有帶斜體的粗細中

00:02:19.206 --> 00:02:22.976
當然SF Mono是等寬設計

00:02:23.410 --> 00:02:26.547
而且在所有粗細中也是等寬的

00:02:28.348 --> 00:02:33.253
這意味着如果你改變字體粗細
文本是不會迴流的

00:02:33.787 --> 00:02:34.855
當然 這有點困難

00:02:34.922 --> 00:02:36.423
當我們在設計
這個更粗的字體

00:02:36.490 --> 00:02:38.725
我們必須要將
所有這些字形擠壓進來

00:02:39.560 --> 00:02:43.764
不過我們先設計出用於
編碼的小號SF Mono

00:02:44.164 --> 00:02:45.899
我們微調了其中一些字形

00:02:45.966 --> 00:02:48.769
像是標點符號
或者括號 花括號

00:02:48.836 --> 00:02:52.439
一些用於編碼的數字

00:02:53.507 --> 00:02:58.946
當然SF Mono是Swift
Playgrounds的新默認字體選擇

00:02:59.713 --> 00:03:01.682
在Xcode中也是默認字體

00:03:02.149 --> 00:03:04.551
看看這個新的主題

00:03:05.953 --> 00:03:10.624
好了 我簡短介紹了
San Francisco和新SF Mono族類

00:03:12.726 --> 00:03:15.896
接下來 我想給大家講講
一些關於字體的術語

00:03:15.963 --> 00:03:20.601
讓我們在這些偶爾會
混淆的字體術語上達成一致

00:03:21.034 --> 00:03:23.103
在我開始之前
我想提前說一下

00:03:23.170 --> 00:03:27.608
這就是今天我們將看看
拉丁字母和希臘字母

00:03:28.108 --> 00:03:31.945
不過如果你對多語種字體排版
感興趣 你也應該感興趣

00:03:32.012 --> 00:03:35.782
昨天有兩場演講
你可以在視頻上補看

00:03:36.049 --> 00:03:37.718
談論的正是這個話題

00:03:38.619 --> 00:03:39.653
所以我們開始吧

00:03:40.454 --> 00:03:41.355
什麼是文本？

00:03:42.556 --> 00:03:44.992
文本給語言編碼
而且與含義有關

00:03:45.826 --> 00:03:48.262
文本就是打字的東西

00:03:48.662 --> 00:03:50.797
文本會得到
自動校正和分析

00:03:51.098 --> 00:03:52.399
併發送給你的朋友

00:03:53.300 --> 00:03:54.968
文本是由什麼構成的？

00:03:55.235 --> 00:03:58.172
它是由字符構成

00:03:58.906 --> 00:04:05.646
字符是文本的抽象單位
可以說是由一個代碼所代表

00:04:06.580 --> 00:04:11.285
在你看到這些字符之前
你需要有東西將它表達出來

00:04:11.351 --> 00:04:13.020
這叫做字形

00:04:13.687 --> 00:04:19.091
字形在你的設備上以輪廓
一連串的點而存儲着

00:04:19.760 --> 00:04:21.995
並且存在於字體文件中

00:04:23.330 --> 00:04:26.466
在字體文件中
字符和字形之間

00:04:26.533 --> 00:04:27.935
通常是1對1的映射

00:04:28.001 --> 00:04:30.070
然而 事情並非
總是如此簡單

00:04:30.671 --> 00:04:33.640
這裏可能會出現叫做
字體排版功能的東西

00:04:33.707 --> 00:04:37.678
這一種機制會
改變這種1對1的映射

00:04:38.312 --> 00:04:41.315
並讓事情變得更復雜一點

00:04:41.381 --> 00:04:43.417
例如 你可以有字體

00:04:43.483 --> 00:04:47.721
當你按下F或I的按鍵
這個字符就會生成

00:04:48.255 --> 00:04:50.924
你得到了一個字形
而並非兩個

00:04:50.991 --> 00:04:53.727
因爲它們組合到一起了
這叫做連字

00:04:54.094 --> 00:04:56.663
這個連字是通過
字體排版功能實現的

00:04:56.730 --> 00:04:58.832
這是自動的
並且取決於字體

00:04:58.932 --> 00:04:59.967
不是所有字體都這樣

00:05:00.734 --> 00:05:04.404
一些字體有可選的功能
可以改變數字的形狀

00:05:04.471 --> 00:05:08.842
例如San Francisco
有數字6的替換形狀

00:05:09.243 --> 00:05:12.079
當我們想讓它更加
易讀時就會使用

00:05:13.881 --> 00:05:15.916
字體有多種樣式

00:05:16.917 --> 00:05:18.252
當然 都看起來不同

00:05:18.318 --> 00:05:20.888
一些字體只有兩種樣式

00:05:21.188 --> 00:05:22.689
另一些字體則有非常多

00:05:22.756 --> 00:05:26.860
你可能聽說過它們的名稱
像是粗體 斜體 粗斜體 緊縮

00:05:26.927 --> 00:05:28.529
這些都是樣式名稱

00:05:29.029 --> 00:05:34.902
將它們維繫在一起的是
這個名叫設計DNA的東西

00:05:35.202 --> 00:05:37.704
其想法就是一組形狀

00:05:37.771 --> 00:05:38.972
那就是字型

00:05:40.340 --> 00:05:41.975
字型有很多種

00:05:42.042 --> 00:05:44.244
你可能見過或是認得這些

00:05:44.678 --> 00:05:48.215
你用字型做的事是字體排版

00:05:48.549 --> 00:05:53.820
字體排版是使用字型
來設置文本並給語言編碼

00:05:54.354 --> 00:05:58.959
字體排版是圖形設計
和UI設計的根基

00:06:00.527 --> 00:06:01.929
我們剛看了一些術語

00:06:01.995 --> 00:06:03.764
看過了文本

00:06:04.364 --> 00:06:05.699
文本是由字符構成

00:06:06.033 --> 00:06:08.836
字符是由字形所編碼或表示

00:06:10.437 --> 00:06:11.905
在字符和字形之間

00:06:11.972 --> 00:06:16.510
是字體排版功能
這可以改變兩者的映射

00:06:17.277 --> 00:06:19.580
它們存儲於字體文件中

00:06:20.047 --> 00:06:22.683
這可以有常見的多種樣式

00:06:24.051 --> 00:06:27.054
它們都歸於同樣的字型組羣中

00:06:27.120 --> 00:06:29.556
這是所有這些樣式背後的設計理念

00:06:30.057 --> 00:06:34.061
然後字體排版使用
所有這些東西來傳遞文本

00:06:35.696 --> 00:06:38.832
作家和編輯 那些書寫文本的人

00:06:39.399 --> 00:06:41.368
他們的工作就是文本

00:06:42.836 --> 00:06:45.772
字符是由統一碼聯盟所定義的

00:06:45.839 --> 00:06:46.940
所以你不必考慮它們

00:06:48.208 --> 00:06:50.210
字體設計師和字體製造商

00:06:50.277 --> 00:06:54.281
是想出設計靈感的人羣

00:06:54.348 --> 00:06:58.118
並設計字形 然後將其放入字體中

00:06:58.185 --> 00:07:02.890
之後創建字體排版功能供你進行更改

00:07:04.358 --> 00:07:08.095
字體排版者是那些進行字體排版的人

00:07:08.562 --> 00:07:12.332
我告訴大家一些好消息
那就是你們就是字體排版者

00:07:12.399 --> 00:07:14.268
事實上我們都是字體排版者

00:07:14.334 --> 00:07:16.603
無論我們什麼時候更改字體 使其加粗

00:07:16.670 --> 00:07:18.005
我們改變磅值

00:07:18.071 --> 00:07:19.740
這都是字體排版的工作

00:07:20.707 --> 00:07:23.644
當然 作爲字體排版者
你會給字體排版

00:07:24.311 --> 00:07:28.515
不過 當然你還可以
改變文本以及選取字體

00:07:28.582 --> 00:07:31.818
選擇它們 組合樣式
並改變字體排版的功能

00:07:31.885 --> 00:07:33.520
將可選的打開

00:07:35.956 --> 00:07:37.491
好了 我快說完了

00:07:37.558 --> 00:07:39.026
不過我還有幾個術語

00:07:39.259 --> 00:07:41.094
它們實際上與某種東西的缺失有關

00:07:41.161 --> 00:07:44.164
內容周圍的負空間

00:07:44.565 --> 00:07:46.366
我剛給你展示了什麼是字形

00:07:46.433 --> 00:07:48.735
它是代表字符的輪廓

00:07:48.902 --> 00:07:51.271
而且在字體中 它作爲輪廓存儲着

00:07:51.338 --> 00:07:55.475
但它還有寬度 這基本上是間距屬性

00:07:56.076 --> 00:08:01.415
如果我挑選出這樣的間距
然後將它排版到字行上

00:08:01.481 --> 00:08:03.917
我會得到這樣的節奏 這非常不均勻

00:08:03.984 --> 00:08:09.056
所以字體設計師會改變它
讓字形之間的節奏變得平均

00:08:09.957 --> 00:08:12.926
間距是內置在字體中的
而且你無法去改變它

00:08:13.193 --> 00:08:14.928
不過 你可以改變字間距

00:08:15.429 --> 00:08:18.065
字間距可以對負間距進行調整

00:08:18.131 --> 00:08:19.766
它可以是零值

00:08:20.567 --> 00:08:21.668
或是負值

00:08:22.069 --> 00:08:23.070
或是正值

00:08:23.971 --> 00:08:26.874
這對字體中的所有字形通用

00:08:26.940 --> 00:08:29.877
要麼將它們遠離 要麼讓它們更近

00:08:29.943 --> 00:08:33.046
當你在進行小號字體排版時
這會非常有用

00:08:33.113 --> 00:08:35.148
你可能想將字母更加遠離

00:08:35.215 --> 00:08:37.150
然後在大的時候靠在一起

00:08:38.085 --> 00:08:41.488
字間距可能會和字偶距相混淆

00:08:41.722 --> 00:08:45.526
字偶距就是一種用於
單個字形對的異常機制

00:08:45.592 --> 00:08:47.961
在這個案例中A和V太遠了

00:08:48.028 --> 00:08:50.764
所以字體中的字偶距表格

00:08:50.831 --> 00:08:52.766
說將它們拉近一些

00:08:53.600 --> 00:08:57.137
字偶距表格也由有字體設計師
製作完成並放入字體內部

00:08:57.204 --> 00:08:59.606
而且你無法控制 這是自動發生的

00:09:00.507 --> 00:09:01.608
然而 行距

00:09:01.675 --> 00:09:05.312
行之間的間距 這是你可以控制的

00:09:06.647 --> 00:09:09.483
行距這個名稱 源自與金屬字體排印學

00:09:09.550 --> 00:09:13.554
將字行進一步分離開 抱歉

00:09:14.288 --> 00:09:17.057
你要在行之間插入金屬片

00:09:18.292 --> 00:09:19.293
所以我們剛看了

00:09:20.360 --> 00:09:25.332
間距 字間距 字偶距和行距

00:09:26.033 --> 00:09:27.868
嵌入於字體中

00:09:27.935 --> 00:09:30.037
間距和字偶距是內置於字體中

00:09:30.737 --> 00:09:33.941
不過 字間距和行距是可以調整的

00:09:35.008 --> 00:09:37.110
在字體術語上 我就只說這些

00:09:37.177 --> 00:09:40.814
現在大家都清楚 這些字體排版術語了

00:09:41.715 --> 00:09:44.718
我們來看看一些字體排版的概念

00:09:46.420 --> 00:09:47.821
我們從易讀性開始

00:09:48.322 --> 00:09:50.757
易讀性指的是識別形狀

00:09:51.124 --> 00:09:52.759
並將它們與彼此區分開

00:09:53.594 --> 00:09:55.095
你可能熟悉這個想法

00:09:55.162 --> 00:09:58.532
一些字型本身就易於閱讀

00:10:00.033 --> 00:10:04.204
然而 在一種大小上難以看清的

00:10:04.271 --> 00:10:06.840
而在另一種大小上看得清清楚楚

00:10:08.041 --> 00:10:10.844
易讀性與尺寸有關

00:10:12.279 --> 00:10:14.982
當你改變一段文本的尺寸

00:10:15.048 --> 00:10:18.919
之前看不見的細節就會顯現出來

00:10:18.986 --> 00:10:21.188
所以受到影響的是所看內容的大小

00:10:22.356 --> 00:10:26.026
在這些情況下 UI字體排版

00:10:26.093 --> 00:10:29.496
會更像是路標

00:10:29.563 --> 00:10:30.697
你在馬路上行駛

00:10:30.764 --> 00:10:34.801
你看到的標誌很大 字體很大

00:10:35.068 --> 00:10:37.704
但離你很遠

00:10:38.172 --> 00:10:40.307
尺寸不僅與磅值有關

00:10:40.374 --> 00:10:44.511
還與讀者離閱讀面的距離有關

00:10:45.946 --> 00:10:50.918
在這些情況下 在小尺寸字體
排版上應用的東西也是能適用的

00:10:50.984 --> 00:10:53.220
例如 將字母分離開

00:10:53.287 --> 00:10:56.089
或者讓字體更粗可能會提高易讀性

00:10:57.124 --> 00:10:59.293
但是易讀性 不僅適用於文本

00:10:59.660 --> 00:11:01.395
它也適用於佈局

00:11:03.197 --> 00:11:05.699
很明顯的是 在一種尺寸上的佈局

00:11:05.766 --> 00:11:10.237
層級清晰 易於閱讀
而在另一種尺寸上會難以看清

00:11:10.604 --> 00:11:12.606
這裏的問題是密集度會被破壞掉

00:11:12.673 --> 00:11:15.909
實際上增加了非常多

00:11:16.376 --> 00:11:17.911
所以解決密集度的方法是

00:11:17.978 --> 00:11:20.414
你可以將元素進一步分離

00:11:20.781 --> 00:11:22.382
不過常常更好的方法是

00:11:22.449 --> 00:11:26.286
重新考慮你的層級和
內容位置 你的佈局

00:11:26.353 --> 00:11:28.689
用於不同尺寸

00:11:29.556 --> 00:11:32.426
如果你想知道更多關於佈局的內容

00:11:32.492 --> 00:11:36.697
在週五有一場演講
內容關於迭代UI設計

00:11:36.763 --> 00:11:38.599
那是獲得想法的方法論

00:11:38.665 --> 00:11:41.301
而且他們還會有關於
如何評估那些想法的祕訣

00:11:41.368 --> 00:11:42.669
這是重要的部分

00:11:44.605 --> 00:11:50.377
尺寸和密集度也不是
只適用於文本和佈局

00:11:50.444 --> 00:11:51.812
還可以是字形設計

00:11:52.145 --> 00:11:53.580
我們給大家一個例子

00:11:54.147 --> 00:11:55.048
這是什麼字形？

00:11:55.315 --> 00:11:56.250
它叫什麼？

00:11:56.950 --> 00:11:58.385
當然 這是at標誌

00:11:58.852 --> 00:12:00.420
但在意大利 它的名字很奇怪

00:12:00.487 --> 00:12:03.056
我們叫它“chiocciola”
指的是蝸牛

00:12:03.891 --> 00:12:10.497
當我們在San Francisco中
抱歉 在SF Mono中設計這個蝸牛時

00:12:10.564 --> 00:12:12.032
我們從San Francisco
中的那個開始

00:12:12.099 --> 00:12:14.835
當然 我們是這樣做的 讓它變得等寬

00:12:15.269 --> 00:12:19.540
然而 當我們在合適的背景
和尺寸下驗證這個形狀時

00:12:19.606 --> 00:12:21.341
我們意識到密集度太高了

00:12:21.675 --> 00:12:24.144
變得模糊 很難看清

00:12:24.611 --> 00:12:27.447
所以我們想出了這樣的解決方案

00:12:28.248 --> 00:12:29.349
我把它放大

00:12:30.584 --> 00:12:33.487
在這個例子中

00:12:33.554 --> 00:12:37.824
我們極大地改變了字形的密集度

00:12:38.225 --> 00:12:40.827
我們的做法是增加負空間

00:12:40.894 --> 00:12:42.963
這對易讀性至關重要

00:12:44.298 --> 00:12:49.169
再考慮一下SF Mono
粗體中的H M和N字形

00:12:49.937 --> 00:12:53.540
如果我們把它們放得非常大

00:12:53.607 --> 00:12:57.110
你可能會看出筆畫的厚度並不是相同的

00:12:57.377 --> 00:13:00.447
這是因爲在它們大的時候能看出來

00:13:00.514 --> 00:13:01.648
但小的時候 你看不出

00:13:01.715 --> 00:13:05.118
所以我們稍微誤導你
讓你認爲它們的密集度相同

00:13:06.320 --> 00:13:09.790
想象一下 你現進入到這個圖片裏了

00:13:10.290 --> 00:13:12.459
你要弄清身在何處以及你要去往哪裏

00:13:13.193 --> 00:13:15.996
你可能要坐地鐵去某個地方
可能是去教堂大道

00:13:16.063 --> 00:13:17.097
但你在哪裏？

00:13:17.464 --> 00:13:18.365
我知道你在哪裏

00:13:18.699 --> 00:13:21.101
你在紐約 我是通過字體得知的

00:13:21.802 --> 00:13:24.571
我還恰巧知道 我知道 不好意思

00:13:27.140 --> 00:13:29.409
我還恰巧知道他們使用的
不完全是Helvetica

00:13:29.476 --> 00:13:31.879
所以我用Helvetica Neue Bold
再現了那個標誌

00:13:32.312 --> 00:13:35.849
不過我想表達的是
對於字體排版質感的認識

00:13:35.916 --> 00:13:40.654
如果你將字型變成另一種不同樣式

00:13:40.721 --> 00:13:42.322
即使是同一族類之中

00:13:42.589 --> 00:13:45.325
不僅那個標誌的效果會不同

00:13:45.526 --> 00:13:47.027
給人的感覺也會不同

00:13:47.194 --> 00:13:48.095
對吧

00:13:48.862 --> 00:13:52.132
所以字型有這種質感品質

00:13:52.199 --> 00:13:54.334
這個完全不像是紐約的感覺

00:13:54.968 --> 00:13:56.170
這個也不是

00:13:57.504 --> 00:14:02.276
這個質感屬性不是次要的
實際上這有助於營造一種氛圍

00:14:02.543 --> 00:14:06.580
例如 我在用SF字體閱讀郵件
然後現在我在玩遊戲

00:14:06.747 --> 00:14:08.949
可能在遊戲不適合用SF字體

00:14:09.650 --> 00:14:12.819
字型真的能幫助你營造氛圍

00:14:12.886 --> 00:14:15.222
並幫助你的用戶清楚他們所在的位置

00:14:17.457 --> 00:14:19.126
好了 這是我們剛纔看過的概念

00:14:19.193 --> 00:14:23.197
我們看了易讀性 尺寸 密集度和質感

00:14:23.630 --> 00:14:26.166
現在我想給大家談談一些工具

00:14:32.339 --> 00:14:34.374
當我們在平臺上進行字體排版時

00:14:34.842 --> 00:14:37.711
有三種基本工具供你使用

00:14:38.445 --> 00:14:40.247
第一個是系統字體

00:14:40.881 --> 00:14:42.482
第二個是動態類型

00:14:42.683 --> 00:14:45.219
然後第三個是我們的定製字體

00:14:46.620 --> 00:14:49.957
你看的那個系統字體是在平臺上原生的

00:14:50.257 --> 00:14:52.793
而且作爲字型 在平臺上有原生的感覺

00:14:53.026 --> 00:14:56.830
獲取系統字體API在

00:14:56.897 --> 00:15:01.268
iOS watchOS
tvOS和macOS之間都相同

00:15:01.668 --> 00:15:05.172
所以NSFont和UIFont
基本上有相同的API

00:15:05.772 --> 00:15:06.974
它們有很多的好處

00:15:07.040 --> 00:15:11.778
它們能讓你獲取全部9種
San Francisco的粗細

00:15:11.845 --> 00:15:13.814
還有特定大小的字間距

00:15:14.381 --> 00:15:19.253
基本上字母自動地靠近或者遠離

00:15:19.319 --> 00:15:21.989
取決於你設定的系統字體磅值

00:15:22.623 --> 00:15:25.292
你還會自動得到特定大小的輪廓

00:15:26.226 --> 00:15:29.930
然後你會獲得粗體字轉換

00:15:29.997 --> 00:15:32.900
這是在iOS的設置中

00:15:33.333 --> 00:15:37.171
人們可以開啓它 這讓他們
所有設備上的文本都粗體顯示

00:15:38.805 --> 00:15:42.776
第二個可用工具是動態類型

00:15:42.843 --> 00:15:43.677
這個工具極好

00:15:43.744 --> 00:15:45.479
在iOS和watchOS上提供

00:15:46.613 --> 00:15:48.382
動態類型就是指兩件事

00:15:48.749 --> 00:15:53.687
第一個是文本樣式API
preferredFont (forTextStyle)

00:15:54.321 --> 00:15:57.057
這會讓你獲得語義標識符

00:15:57.124 --> 00:16:00.160
會給你特定用於那個用途的字體

00:16:00.227 --> 00:16:03.664
你可請求用於大標題或正文等等的字體

00:16:03.730 --> 00:16:05.499
你會得和系統字體相似的字體

00:16:05.566 --> 00:16:07.634
但它們是專門爲那個用途而調整的

00:16:09.203 --> 00:16:11.672
不過動態類型也是內容大小類別

00:16:12.005 --> 00:16:15.609
它就是這個滑動器上你所熟悉的刻痕

00:16:15.976 --> 00:16:19.880
人們可進入到設置中將滑動器上下移動

00:16:19.947 --> 00:16:22.516
他們可以改變設備的全局磅值

00:16:22.583 --> 00:16:23.984
這是一項非常棒的無障礙功能

00:16:27.955 --> 00:16:31.091
如果你使用動態類型
還使用文本樣式API

00:16:31.358 --> 00:16:33.760
這上面的動態類型支持是自動的

00:16:34.094 --> 00:16:39.533
然而 如果你使用定製字體
或者直接調用系統字體

00:16:39.600 --> 00:16:42.336
那你必須要做一些工作來應用動態類型

00:16:42.402 --> 00:16:45.005
不過這很簡單 我給大家展示如何去做

00:16:46.240 --> 00:16:48.075
首先你要選取或捆綁一種字體

00:16:48.942 --> 00:16:52.513
之後你可以有一個查找表
上面有內容大小類別

00:16:53.213 --> 00:16:55.916
然後你必須要覆蓋
traitCollectionDidChange

00:16:55.983 --> 00:16:58.785
這是UIView和UI的方法

00:16:59.019 --> 00:17:00.420
你控制子類

00:17:01.655 --> 00:17:03.624
之後你更新你的字體以及段落樣式

00:17:04.391 --> 00:17:06.126
然後你重新佈局 這就完成了

00:17:06.527 --> 00:17:08.561
所以我們稍微深入地看看這些步驟

00:17:09.029 --> 00:17:11.632
到底如何將字體捆綁到應用中？

00:17:12.098 --> 00:17:12.933
這很簡單

00:17:12.999 --> 00:17:14.468
只需把它拖到Xcode中

00:17:14.535 --> 00:17:17.570
然後你在info.plist列表中
聲明字體的名稱

00:17:17.637 --> 00:17:18.972
上面專門的鍵

00:17:20.674 --> 00:17:22.943
對於內容大小類別

00:17:23.010 --> 00:17:27.247
當然 你要有一個查找表
將它們映射到磅值中

00:17:27.314 --> 00:17:29.583
可能是粗細 字間距值或甚至是行距中

00:17:29.650 --> 00:17:31.952
取決於你選擇的字型

00:17:32.786 --> 00:17:35.422
我有一個查找表 像這個樣

00:17:35.656 --> 00:17:39.993
我有工具池 磅值
樣式名稱 行距和字間距

00:17:40.294 --> 00:17:44.431
你在這裏看到的符號是內容大小類別

00:17:44.498 --> 00:17:47.601
你會發現這實際上
比滑動器上的刻痕要更多

00:17:47.668 --> 00:17:51.471
因爲這裏面有五個無障礙類別

00:17:52.172 --> 00:17:54.508
人們可以在無障礙設置中打開

00:17:54.808 --> 00:17:58.078
所以當你使用查找表時
你也要記住這幾點

00:18:00.113 --> 00:18:04.384
一旦你做好了 你就覆蓋
traitCollectionDidChange方法

00:18:05.319 --> 00:18:07.654
在內部你可以做什麼都行

00:18:07.721 --> 00:18:11.592
你可以寫上基於視圖和顯示效果的代碼

00:18:11.658 --> 00:18:13.560
能夠調整字體並重新佈局

00:18:14.928 --> 00:18:15.896
所以

00:18:16.630 --> 00:18:19.466
當你在那個方法內部

00:18:19.533 --> 00:18:22.769
你應該詢問當前對象的特徵集合

00:18:23.103 --> 00:18:25.372
並查詢優選的內容大小類別

00:18:26.440 --> 00:18:29.776
然後將其作爲查找表的鍵 這就完成了

00:18:31.178 --> 00:18:32.713
第五步是重新佈局

00:18:32.779 --> 00:18:35.616
但如果你用自動佈局
這就不會有第五步了

00:18:35.983 --> 00:18:37.818
如果你感興趣瞭解自動佈局

00:18:37.885 --> 00:18:41.622
明天和週五有關於這些專題的演講

00:18:43.657 --> 00:18:47.561
好了 我們剛剛看了如何
將動態類型用於定製字體

00:18:48.028 --> 00:18:50.497
不過假如你想開始着手去做

00:18:50.564 --> 00:18:51.932
到底應該如何下手？

00:18:52.366 --> 00:18:56.436
如果你一開始嘗試使用定製字體

00:18:57.704 --> 00:19:00.140
我推薦一次從一個字型開始

00:19:01.208 --> 00:19:02.876
這樣的話會更簡單

00:19:03.110 --> 00:19:06.246
但重要的是
一旦你用上了你所考慮的字型

00:19:06.313 --> 00:19:08.348
試着去理解其設計意圖

00:19:08.415 --> 00:19:09.850
因爲在使用上會有很大幫助

00:19:10.117 --> 00:19:11.552
字型是工具

00:19:11.718 --> 00:19:13.954
它們是由人們設計而成用於特定用途的

00:19:14.121 --> 00:19:15.455
理解其用途

00:19:15.522 --> 00:19:18.759
會極大幫助到字體使用者和字體排版者

00:19:21.195 --> 00:19:23.397
你還要考慮可以調整的設置 對吧

00:19:23.797 --> 00:19:27.801
你無法在應用環境中輕易更改字偶距

00:19:28.101 --> 00:19:29.536
如果字體調不了字偶距

00:19:29.603 --> 00:19:31.672
你可能要考慮其它選擇了

00:19:31.738 --> 00:19:35.442
然而如果字體行距太緊
你是可以改變的

00:19:35.742 --> 00:19:36.577
不要擔心

00:19:38.545 --> 00:19:43.917
好了 我們剛看了系統字體
動態類型和定製字體

00:19:45.018 --> 00:19:47.487
接下來我想展示一些小細節

00:19:48.188 --> 00:19:51.358
你可能會考慮在自己的應用中使用

00:19:52.960 --> 00:19:55.729
我想展示的第一個是箭頭

00:19:56.797 --> 00:19:58.232
箭頭很了不起

00:19:58.298 --> 00:20:01.235
它們可以用於指向內容

00:20:01.535 --> 00:20:03.537
不過 它們也能用在
complications上

00:20:03.604 --> 00:20:05.172
那裏信息的密集度十分高

00:20:05.239 --> 00:20:07.975
然後你想得到更多一點的信息

00:20:08.208 --> 00:20:12.246
箭頭在SF中 實際上是
作爲字符保存在字體中

00:20:12.312 --> 00:20:14.381
你可以將它們複製粘貼到你的字符串中

00:20:14.448 --> 00:20:16.783
例如在Xcode中
然後它們就會出現

00:20:17.284 --> 00:20:19.620
不過 更重要的是因爲它們在字體之內

00:20:19.953 --> 00:20:22.022
它們與系統字體的粗細相匹配

00:20:22.189 --> 00:20:26.226
如果人們改變粗體字轉換或用動態類型

00:20:26.293 --> 00:20:28.028
箭頭會相應地改變大小

00:20:30.264 --> 00:20:34.401
我想說的第二點是高易讀性替換

00:20:34.735 --> 00:20:38.138
我講了在字體排版功能中的替換

00:20:38.672 --> 00:20:42.509
我們在San Francisco中
有一個新替換 有助於這種情況

00:20:42.943 --> 00:20:44.077
如果你給字符串排版

00:20:44.578 --> 00:20:47.948
沒足夠的語境來分辨出這都是哪些字形

00:20:48.015 --> 00:20:51.718
人們可能要將其傳到別處
或者在其他地方輸入

00:20:51.785 --> 00:20:55.122
人們必須要能讀它而且必須要完全分清

00:20:55.189 --> 00:20:56.356
都有哪些字形

00:20:56.723 --> 00:20:58.258
這裏有新的統計集

00:20:58.325 --> 00:21:02.129
這會將這些字形改變
成完全無歧義的形狀

00:21:02.196 --> 00:21:04.965
I有了襯線
0有了一撇

00:21:05.365 --> 00:21:09.903
L有一個小尾巴
然後6不那麼容易和8混淆

00:21:10.137 --> 00:21:12.706
我們不推薦一直啓用這些形狀

00:21:12.773 --> 00:21:15.475
因爲如你所見 這是非常巨大的改變

00:21:15.542 --> 00:21:18.979
而且極大擾亂了文本整體的質地和外觀

00:21:19.179 --> 00:21:20.581
以及文本的感覺

00:21:20.881 --> 00:21:23.617
所以儘可能謹慎使用

00:21:24.418 --> 00:21:27.120
不過 這是啓用它們的代碼

00:21:27.187 --> 00:21:30.057
順便一提 這個代碼在
UIFont和NSFont效果一樣

00:21:30.123 --> 00:21:31.191
是完全相同

00:21:31.859 --> 00:21:36.296
你從UIFont或別的東西開始
你從中衍生出一個字體描述符

00:21:36.530 --> 00:21:40.934
然後你修改它 給它添加功能

00:21:41.001 --> 00:21:42.903
然後從中衍生出另一個字體

00:21:45.572 --> 00:21:47.407
接下來 小型大寫字母

00:21:48.942 --> 00:21:53.680
我肯定大家都熟悉大寫字母和小寫字母

00:21:53.747 --> 00:21:58.719
不過這個組中還有第三個成員
那就是小型大寫字母

00:22:00.287 --> 00:22:02.856
小型大寫字母是大寫字母的縮小版

00:22:02.923 --> 00:22:04.358
與小寫字母對齊

00:22:04.725 --> 00:22:07.361
當我說對齊時 我指的是幾乎對齊

00:22:07.661 --> 00:22:09.596
它們實際上應該稍大一點

00:22:11.031 --> 00:22:12.199
什麼時候用上它們？

00:22:12.599 --> 00:22:15.302
例如 當你給首字母縮略詞排版時

00:22:16.336 --> 00:22:19.640
首字母縮略詞或者
當你想創建精妙的信息層級

00:22:19.706 --> 00:22:20.774
例如有數字

00:22:20.841 --> 00:22:25.112
然後你想弱化
它邊下的另一條信息

00:22:25.712 --> 00:22:29.883
讓我展示一個案例研究 關於如何在
Apple TV上使用小型大寫字母

00:22:30.751 --> 00:22:32.219
上面有這個段落

00:22:33.287 --> 00:22:35.956
還有層級 列表是在左邊

00:22:36.023 --> 00:22:37.457
然後段落在右邊

00:22:37.524 --> 00:22:41.495
你想讓左上角的文本成爲
標頭 並且稍微突出一點

00:22:42.029 --> 00:22:44.064
如果你將它看成線框圖

00:22:44.464 --> 00:22:46.400
你差不多可以看出

00:22:46.466 --> 00:22:50.470
那全是大寫的字符串在高度上碾壓四方

00:22:50.537 --> 00:22:52.105
看起來有點太大了

00:22:53.073 --> 00:22:55.309
你可以修正它的一種方法是

00:22:55.375 --> 00:22:58.545
你可以改變磅值將它降下來

00:22:58.612 --> 00:23:02.449
不過如果你那樣做
這還會使字母變得更細更緊湊

00:23:02.516 --> 00:23:05.819
所以密集度會與其他的文本不相配

00:23:06.086 --> 00:23:08.021
你怎麼辦 小型大寫字母

00:23:08.522 --> 00:23:11.391
小型大寫會保留全大寫的設置

00:23:11.758 --> 00:23:14.461
且還保留你想要的密集度以及筆畫厚度

00:23:15.429 --> 00:23:18.332
這裏有兩種基本方式 兩種API

00:23:18.398 --> 00:23:20.400
將小型大寫字母帶到系統中

00:23:21.101 --> 00:23:24.037
而且它們與字體排版功能

00:23:24.104 --> 00:23:28.675
和基本文本之間的互動有關

00:23:28.909 --> 00:23:31.845
所以假想你有一段都是大寫的文本

00:23:32.379 --> 00:23:35.182
你啓用大寫中的小型大寫字母功能

00:23:35.549 --> 00:23:37.684
你會得到一段都是小型大寫字母的文本

00:23:38.118 --> 00:23:39.086
看起來很好

00:23:39.920 --> 00:23:44.258
如果你的字符串混有大小寫字母

00:23:44.324 --> 00:23:48.061
然後你啓用大寫中的小型
大寫字母功能 結果是這樣

00:23:48.595 --> 00:23:50.130
這看起來很糟

00:23:50.564 --> 00:23:52.966
這個的問題是這裏的大寫字母

00:23:53.033 --> 00:23:56.436
沒有在強調任何內容而且幾乎像是錯誤

00:23:56.503 --> 00:23:58.238
所以請你儘量不要這樣做

00:23:59.306 --> 00:24:02.242
如果你有一個全是小寫字母的字符串

00:24:02.309 --> 00:24:04.811
然後你啓用大寫中的小型大寫字母功能

00:24:04.878 --> 00:24:07.748
你得到的全都是小寫
這不是你所預料的

00:24:07.814 --> 00:24:09.249
但起碼看起來還行

00:24:09.483 --> 00:24:10.551
所以沒問題

00:24:11.318 --> 00:24:13.554
這個大寫中的小型大寫字母功能

00:24:13.654 --> 00:24:16.990
這個代碼與我之前
展示的特性碼是完全一樣的

00:24:17.057 --> 00:24:19.026
用於高易讀性替換

00:24:19.526 --> 00:24:22.462
你只需要更改功能標識符和選擇符

00:24:24.398 --> 00:24:26.800
這裏有另一種啓用小型大寫字母的方法

00:24:26.867 --> 00:24:29.203
是從一段小寫文本開始

00:24:29.269 --> 00:24:30.771
抱歉

00:24:31.705 --> 00:24:33.373
如果你有全部都是大寫的字符串

00:24:33.440 --> 00:24:38.278
然後你從小寫啓用
小型大寫字母 得到全是大寫

00:24:38.612 --> 00:24:40.314
這不是你所預料的

00:24:40.380 --> 00:24:41.748
但起碼看起來還行

00:24:42.583 --> 00:24:46.887
當你在混有大小寫的字符串上
從小寫啓用小型大寫字母

00:24:46.954 --> 00:24:48.222
你會得到這個

00:24:48.455 --> 00:24:51.892
你會得到混有大寫和
小型大寫的字符串 這是可以的

00:24:52.159 --> 00:24:54.795
我們的確在地圖中使用 比如在

00:24:54.928 --> 00:24:56.163
某些縮放級別上

00:24:57.130 --> 00:24:58.465
小型大寫的重點在於精妙

00:24:58.532 --> 00:25:01.401
而且這是一種創建精妙層級的方法實例

00:25:02.069 --> 00:25:03.470
所以沒問題

00:25:04.438 --> 00:25:06.673
如果你的字符串都是小寫的

00:25:06.740 --> 00:25:08.475
然後你從小寫啓用小型大寫字母

00:25:08.542 --> 00:25:11.345
你得到的都是小型大寫 這沒問題的

00:25:12.412 --> 00:25:14.948
這個的代碼是完全一樣的

00:25:15.015 --> 00:25:17.317
我只改了那一段代碼

00:25:18.519 --> 00:25:21.922
你可以用功能做的一件事是
你可以同時啓用多個

00:25:22.122 --> 00:25:24.525
所以這取決於你獲取那段文本的位置

00:25:24.591 --> 00:25:27.227
如果是你控制 如果用戶可以編輯

00:25:27.294 --> 00:25:30.297
比如 你可能想要同時將它們啓用

00:25:32.533 --> 00:25:34.568
關於小型大寫字母有一個精妙之處

00:25:34.902 --> 00:25:36.637
這就是它們的重點就是精妙

00:25:36.703 --> 00:25:38.272
不過還有一點精妙之處

00:25:38.605 --> 00:25:44.211
這就是它們不僅適用於大寫字母

00:25:44.378 --> 00:25:46.013
在數字和標點符號上也行

00:25:46.647 --> 00:25:48.282
你可能會想這是爲什麼

00:25:48.916 --> 00:25:51.451
原因是你可能會有像這樣的字符串

00:25:51.518 --> 00:25:53.654
你想將它們全都變成小型大寫

00:25:53.720 --> 00:25:56.089
所以我們支持小型大寫數字
小型大寫標點符號

00:25:56.156 --> 00:25:58.258
在所有這些在系統字體中

00:25:59.793 --> 00:26:03.964
好了 我們剛剛看了一些
字體排版的細節 例如箭頭

00:26:04.131 --> 00:26:06.533
高易讀性替換和小型大寫字母

00:26:08.435 --> 00:26:10.270
我們今天要講的就是這些

00:26:11.305 --> 00:26:13.540
我們剛纔看了
San Francisco字體

00:26:13.607 --> 00:26:16.510
以及用於編碼的
新SF Mono族類更新

00:26:16.577 --> 00:26:17.477
希望大家喜歡

00:26:18.412 --> 00:26:19.479
我們看了一些術語

00:26:19.947 --> 00:26:24.251
我們看了一些字體排版概念
設計方面的 沒錯 是設計理念

00:26:24.484 --> 00:26:25.552
然後我們看了些工具

00:26:26.253 --> 00:26:27.855
最後我們看了一些細節

00:26:27.921 --> 00:26:30.824
一些新的小功能
你可能會採用到你應用中

00:26:31.592 --> 00:26:36.263
欲瞭解更多信息 你可以在
這個URL上找到本次演講的視頻

00:26:36.330 --> 00:26:39.967
不過你還會找到一本
文獻和一些可供參考的

00:26:40.033 --> 00:26:43.270
網站 讓你以字體排版者的
身份踏上的新路程

00:26:44.571 --> 00:26:46.773
這裏還有相關演講

00:26:47.107 --> 00:26:50.310
這些還沒有開始
整個周都有

00:26:51.044 --> 00:26:53.547
第一場演講實際上是介紹一個工具

00:26:53.614 --> 00:26:55.249
這在動態類型上面給你極大幫助

00:26:55.349 --> 00:26:56.550
不過我就不劇透了

00:26:58.118 --> 00:27:00.854
其他兩場演講與打造適應性應用有關

00:27:00.921 --> 00:27:03.423
自動佈局的話題

00:27:04.358 --> 00:27:07.528
迭代設計會給你一些設計元素

00:27:07.594 --> 00:27:09.730
以及相應評估方法

00:27:10.430 --> 00:27:13.200
然後 “自動佈局的新特性”
的演講是在週五

00:27:13.267 --> 00:27:14.134
也會非常精彩

00:27:14.868 --> 00:27:16.537
就是這些了 非常感謝大家