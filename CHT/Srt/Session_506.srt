00:00:20.020 --> 00:00:23.790 
tvOS平臺上的AVKit框架

00:00:28.629 --> 00:00:29.463 
早上好

00:00:32.198 --> 00:00:36.236 
有多少人在App Store上有
應用或在開發播放視頻的應用？

00:00:37.104 --> 00:00:39.473 
有不少人 不錯

00:00:39.773 --> 00:00:44.444 
不管是爲運動、新聞、娛樂、還是教育

00:00:47.648 --> 00:00:50.484 
視頻播放系統中最重要的部分是什麼？

00:00:51.118 --> 00:00:54.021 
是播放 暫停控制？快移？

00:00:55.122 --> 00:00:57.891 
也許是音頻 字幕設置？

00:01:00.394 --> 00:01:03.630 
不 當然不是
當然是視頻呈現

00:01:04.998 --> 00:01:06.200 
所以重要的是

00:01:06.266 --> 00:01:10.103 
當用戶在用你的應用看視頻時

00:01:10.270 --> 00:01:13.607 
他們完全關注在視頻表現上

00:01:14.174 --> 00:01:18.045 
不會爲了搞清用戶界面而分心

00:01:20.647 --> 00:01:23.550 
所以很重要的是 視頻播放系統

00:01:23.617 --> 00:01:27.354 
對觀衆來說要是簡單 一致 可預計的

00:01:27.554 --> 00:01:30.157 
當他們在Apple TV上
往返於不同應用時

00:01:32.593 --> 00:01:35.395 
視頻播放在Apple TV上
看似簡單

00:01:35.462 --> 00:01:36.997 
卻不是什麼簡單的任務

00:01:37.064 --> 00:01:39.433 
市面上有很多不同的用戶交互工具

00:01:40.000 --> 00:01:44.605 
包括Siri remote上的
按鈕和觸控表面

00:01:44.972 --> 00:01:48.675 
Siri聲控前幾代的
Apple TV remote

00:01:49.776 --> 00:01:51.311 
iOS Remote應用

00:01:51.578 --> 00:01:54.181 
藍牙鍵盤 遊戲遙控器

00:01:55.048 --> 00:01:57.417 
當然還有紅外線通用遙控器

00:02:00.754 --> 00:02:03.490 
如果你不需要對付這些不同的
控制方式不會很棒麼？

00:02:04.691 --> 00:02:07.027 
我是Dan Wright
今天我要講講

00:02:07.094 --> 00:02:10.330 
怎樣用AVKit框架
輕易達到這個目的

00:02:11.899 --> 00:02:15.903 
AVKit提供先進的回放控制
和一致的用戶界面

00:02:16.537 --> 00:02:20.174 
讓我們快速看一下AVKit
提供的一些功能

00:02:22.276 --> 00:02:24.344 
這是用AVKit播放視頻

00:02:24.745 --> 00:02:27.548 
可見一條透明的運輸條顯示播放時間

00:02:27.614 --> 00:02:30.317 
在視頻中的位置以及所剩時間

00:02:31.418 --> 00:02:34.288 
觸摸遙控器上的觸控表面顯示提示

00:02:35.088 --> 00:02:38.358 
點擊邊緣會往前或往後跳

00:02:39.092 --> 00:02:43.330 
或者向下按住觸摸面
觀衆可以快進或快退

00:02:44.998 --> 00:02:49.269 
暫停時 在遙控器上從一邊刷到另一邊

00:02:49.336 --> 00:02:51.672 
可以迅速快進快退整個視頻

00:02:52.840 --> 00:02:55.209 
向下劃會顯示信息面板 包括

00:02:55.275 --> 00:02:58.345 
關於該視頻和導航標記的信息

00:02:59.513 --> 00:03:03.350 
還可以進入音頻和字幕的設置

00:03:05.152 --> 00:03:08.789 
最後AVKit自動支持Siri聲控

00:03:08.856 --> 00:03:11.892 
像“回到開頭” “她說了什麼？”

00:03:11.959 --> 00:03:13.560 
“向前跳30秒”

00:03:13.627 --> 00:03:16.463 
暫時開着字幕重播

00:03:17.965 --> 00:03:22.603 
AVKit使用先進的媒體棧
iOS macOS也有該框架

00:03:24.304 --> 00:03:26.507 
AVKit負責提供用戶體驗

00:03:27.674 --> 00:03:31.411 
AVFoundation和
CoreMedia提供核心播放工具

00:03:32.446 --> 00:03:37.518 
UIKit或者
在macOS上是AppKit

00:03:37.584 --> 00:03:39.419 
提供界面元素

00:03:40.587 --> 00:03:43.557 
今天我們要講三點

00:03:44.525 --> 00:03:48.128 
第一 我們要展示
用AVKit如何簡單開始

00:03:48.996 --> 00:03:51.031 
第二 我們看看幾種方式

00:03:51.098 --> 00:03:55.402 
用tvOS的特點擴展播放體驗

00:03:56.136 --> 00:03:58.205 
第三 我們要講怎樣最好地實踐

00:03:59.406 --> 00:04:00.741 
好了開始吧

00:04:02.075 --> 00:04:04.545 
讓我們講講AVPlayerViewController

00:04:05.746 --> 00:04:09.616 
AVPlayerViewController
用AVPlayer AVPlayerItem

00:04:09.683 --> 00:04:12.252 
和AVAsset 由你的應用提供

00:04:13.253 --> 00:04:16.690 
AVAsset代表音頻視頻媒體

00:04:16.757 --> 00:04:20.627 
AVPlayerItem
代表媒體資源狀態

00:04:21.060 --> 00:04:23.030 
AVPlayer控制播放

00:04:23.764 --> 00:04:27.134 
AVPlayerViewController
在最頂端 負責UI

00:04:29.269 --> 00:04:32.573 
讓我們看看
怎樣把媒體提供給AVKit

00:04:35.108 --> 00:04:36.443 
有四個步驟

00:04:37.311 --> 00:04:39.646 
第一 從URL創建媒體資源

00:04:40.914 --> 00:04:43.183 
第二 創建一個該資源的播放項

00:04:44.384 --> 00:04:46.987 
第三 用播放項創建播放器

00:04:47.054 --> 00:04:50.791 
第四 把播放器視圖控制器
和創建的播放器相關聯

00:04:52.292 --> 00:04:55.095 
現在 你可以簡化所有步驟到一行

00:04:55.662 --> 00:04:57.731 
只要直接用URL創建播放器

00:04:57.798 --> 00:05:01.502 
並指定它爲播放器視圖控制器的
播放器屬性就行

00:05:03.937 --> 00:05:07.140 
接下來讓我們看看你
怎樣嵌入內聯播放器視圖

00:05:09.710 --> 00:05:11.945 
首先 構建播放器視圖控制器

00:05:13.113 --> 00:05:16.149 
然後 設置畫面爲內聯視圖

00:05:17.084 --> 00:05:20.721 
這兒我們直接設置畫面了
但你應當用約束

00:05:22.356 --> 00:05:26.393 
第三 把播放視圖控制器的視圖
加入你的視圖

00:05:26.860 --> 00:05:28.328 
把播放視圖控制器自己加到

00:05:28.395 --> 00:05:31.198 
你視圖控制器的子視圖控制器

00:05:33.267 --> 00:05:35.969 
現在 一旦你做好交互全屏展示的準備

00:05:36.036 --> 00:05:40.407 
就可以呈現這個視圖控制器
它會自動實現動畫效果

00:05:40.474 --> 00:05:42.776 
從內聯播放器到全屏

00:05:46.780 --> 00:05:50.484 
好 讓我們談談延伸播放體驗

00:05:52.719 --> 00:05:59.159 
去年秋天tvOS 9引入
AVKit附帶一些增強功能

00:05:59.860 --> 00:06:04.831 
也就是 可以添加無交互覆蓋

00:06:05.399 --> 00:06:07.100 
限制播放時的交互

00:06:08.235 --> 00:06:09.937 
提供元數據

00:06:11.205 --> 00:06:12.539 
導航標記

00:06:13.740 --> 00:06:16.210 
識別插播廣告內容

00:06:19.279 --> 00:06:22.816 
tvOS 10中
我們將引入一些新的增強功能

00:06:23.483 --> 00:06:26.386 
可以修改如何跳着播放

00:06:30.290 --> 00:06:32.192 
可以展示播放內容建議

00:06:35.229 --> 00:06:37.197 
現在我們依個說說

00:06:39.433 --> 00:06:43.403 
覆蓋層用來放圖標和其他覆蓋着的圖形

00:06:44.204 --> 00:06:47.107 
播放覆蓋視圖在視頻本身的上面

00:06:47.908 --> 00:06:49.276 
但在控制層的下面

00:06:53.680 --> 00:06:56.583 
視圖可能是靜止的 或活動的

00:06:56.984 --> 00:06:59.820 
但是視圖接收不到聚焦或事件

00:07:02.589 --> 00:07:04.391 
現在繼續討論限制播放控制

00:07:05.359 --> 00:07:08.795 
播放器視圖控制器的
requiresLinearPlayback屬性

00:07:09.263 --> 00:07:13.200 
限制用戶交互到僅剩播放和暫停

00:07:13.734 --> 00:07:16.403 
功能如快進 快移 跳播

00:07:16.470 --> 00:07:20.474 
章節導航等都在設定這個屬性時被禁止

00:07:20.841 --> 00:07:24.178 
一般來說 你會把它設爲真
當你想強製播放

00:07:24.244 --> 00:07:29.149 
一段視頻比如廣告 或法律注意事項時

00:07:32.853 --> 00:07:34.454 
外部元數據屬性

00:07:35.322 --> 00:07:39.259 
補充替代了你媒體資源內置信息

00:07:39.459 --> 00:07:43.964 
像標題 描述 流派 媒體內容評級

00:07:44.031 --> 00:07:46.800 
PG-13還是R級這些或者海報封面

00:07:51.138 --> 00:07:54.408 
現在讓我們回到之前看到的
顯示信息面板的截屏

00:07:55.242 --> 00:07:58.812 
我想讓你們注意這裏頂部的部分

00:07:59.279 --> 00:08:03.517 
這是tvOS中信息元數據顯示的地方

00:08:03.851 --> 00:08:07.521 
現在 不僅如此
還顯示在iOS Remote應用上

00:08:08.722 --> 00:08:10.791 
這兒我們看到這個封面

00:08:10.858 --> 00:08:12.926 
看上去像是從視頻中
一幀靜止畫面

00:08:13.927 --> 00:08:14.862 
看到標題

00:08:14.928 --> 00:08:17.865 
還能直接從資源信息上看到時長

00:08:17.931 --> 00:08:20.767 
媒體內容評級和描述

00:08:23.036 --> 00:08:26.874 
現在看看如何創建外部元數據條目

00:08:27.241 --> 00:08:31.178 
我們將創建一些輔助函數

00:08:31.245 --> 00:08:32.779 
來讓它變得簡單

00:08:33.947 --> 00:08:37.384 
第一個函數 叫做元數據條目
需要一個標識符和一個值

00:08:37.451 --> 00:08:39.820 
將返回AVMetadataItem

00:08:40.621 --> 00:08:44.157 
那麼元數據條目有很多屬性

00:08:44.224 --> 00:08:49.363 
你需要設置這三個屬性：
值 識別符

00:08:50.397 --> 00:08:53.033 
和經常被忽略的擴展性語言標籤

00:08:54.268 --> 00:08:57.538 
現在你們看到的
我把它設爲字符串“und”

00:08:57.604 --> 00:09:01.675 
作爲“未定義的”簡稱
所以它有通配符的作用

00:09:02.142 --> 00:09:06.380 
如果你沒有非常特別的語言版本的話

00:09:06.914 --> 00:09:10.717 
這就是AVKit會展現的

00:09:11.552 --> 00:09:13.353 
如果你沒有任何語言翻譯

00:09:13.420 --> 00:09:16.590 
如果所有內容都是
比如說 英語的 或者法語的

00:09:16.957 --> 00:09:20.060 
那就用“未定義的”這樣用戶

00:09:20.127 --> 00:09:22.396 
不管他們用什麼語言都可以看到些什麼

00:09:24.765 --> 00:09:26.934 
封面就有點不一樣了

00:09:29.102 --> 00:09:33.841 
封面的元數據項的值屬性是圖像

00:09:33.907 --> 00:09:36.877 
它是原始數據
你可以用PNG或者JPEG格式的

00:09:37.945 --> 00:09:39.780 
你還需要設置數據類型字段

00:09:39.847 --> 00:09:42.149 
來確定你提供的是什麼類型的數據

00:09:44.284 --> 00:09:47.521 
還有一樣的 你要設置識別符
和擴展性語言標籤

00:09:50.057 --> 00:09:51.291 
我們要把這些放到一起

00:09:51.358 --> 00:09:53.894 
創建幾個外部元數據條目

00:09:53.961 --> 00:09:55.028 
創建一個數組

00:09:55.229 --> 00:09:57.931 
用輔助函數添加標題

00:09:58.298 --> 00:10:01.435 
描述 和海報封面到這個數組

00:10:01.969 --> 00:10:03.737 
抱歉 還有流派

00:10:03.904 --> 00:10:05.572 
最後把數組指定爲

00:10:05.639 --> 00:10:08.775 
當前播放項的外部元數據屬性

00:10:11.712 --> 00:10:13.547 
好了 回到信息面板

00:10:15.249 --> 00:10:18.185 
向下看看底部

00:10:18.285 --> 00:10:19.753 
這是導航部分

00:10:19.820 --> 00:10:22.823 
這裏展示一組導航標識

00:10:24.024 --> 00:10:27.661 
導航標記常用來標記章節

00:10:27.728 --> 00:10:30.831 
但也用來方便進入視頻中不同部分

00:10:32.566 --> 00:10:35.536 
導航標識組標記章節或事件

00:10:35.602 --> 00:10:37.938 
舉例說 事件會是在一個運動視頻中

00:10:38.005 --> 00:10:40.107 
你會想標記的比賽精彩部分

00:10:44.878 --> 00:10:47.548 
一組導航標識被定義爲

00:10:47.614 --> 00:10:51.552 
AVNavigationMarkersGroup
類的一個對象

00:10:52.419 --> 00:10:56.056 
它包含一個數組的導航標記
這裏是章節標記

00:11:00.861 --> 00:11:02.396 
每個標記有一個標題

00:11:03.664 --> 00:11:04.898 
大部分情況下還有

00:11:04.965 --> 00:11:07.601 
一個圖像 往往是視頻縮略圖

00:11:07.668 --> 00:11:08.802 
但那是可選的

00:11:11.438 --> 00:11:14.608 
一個事件組本身也有標題

00:11:14.675 --> 00:11:16.610 
章節組則沒有

00:11:19.580 --> 00:11:22.916 
好 還有一個小小的輔助函數用來
創建導航標記

00:11:22.983 --> 00:11:27.087 
它需要標題 描述 和時間範圍

00:11:27.588 --> 00:11:31.458 
定時範圍是你要定位到的
視頻片段的時間

00:11:31.525 --> 00:11:33.827 
然而持續時間是隨意的

00:11:35.062 --> 00:11:37.731 
如果你不是非要設置 可以隨它設爲0

00:11:39.499 --> 00:11:43.504 
這裏又一次 我們要爲標題
和描述創建元數據條目

00:11:43.871 --> 00:11:46.340 
最後創建定時的元數據組

00:11:46.406 --> 00:11:49.710 
用元數據和定時範圍

00:11:53.981 --> 00:11:56.316 
好 講講插播內容

00:11:58.719 --> 00:12:02.322 
這裏我們看到有幾個插播內容的視頻

00:12:03.490 --> 00:12:06.693 
以運輸條上的點來指明

00:12:08.362 --> 00:12:10.731 
用戶在看一條插播內容

00:12:10.797 --> 00:12:15.536 
運輸條上方的時間在倒數剩餘時間

00:12:16.470 --> 00:12:21.175 
下方時間表示已播放時間

00:12:25.345 --> 00:12:29.049 
插播內容是與正播放視頻無關的內容

00:12:29.116 --> 00:12:33.754 
所以是像廣告 法律聲明 之類的

00:12:36.790 --> 00:12:38.759 
插播時間範圍僅表示

00:12:38.825 --> 00:12:42.029 
在含有插播內容的資源中的一個部分

00:12:44.064 --> 00:12:45.599 
插播時間範圍會摺疊起來

00:12:45.666 --> 00:12:48.535 
運輸條上的點像缺口

00:12:48.602 --> 00:12:50.404 
如前一頁幻燈片上看到的

00:12:51.305 --> 00:12:55.475 
最後 在快移時 插播內容是隱藏的

00:12:55.542 --> 00:12:58.478 
所以用戶在從這個視頻定位

00:12:58.545 --> 00:13:01.782 
用快移時 不會被彈出的廣告幹擾

00:13:05.185 --> 00:13:06.854 
這裏有一張簡圖

00:13:07.955 --> 00:13:11.124 
比較上面的視頻文件時間線

00:13:11.325 --> 00:13:14.561 
和底部用戶看到的運輸條

00:13:14.862 --> 00:13:17.731 
九分鐘的視頻中有幾個插播內容

00:13:18.999 --> 00:13:21.435 
都被摺疊成點

00:13:21.768 --> 00:13:25.672 
注意到運輸條上的插播內容持續時間

00:13:25.739 --> 00:13:27.407 
長度減少了

00:13:27.474 --> 00:13:29.977 
或者說這些插播內容的
持續長度看上去減少了

00:13:34.147 --> 00:13:37.551 
現在看看如何創建並聲明插播內容

00:13:38.952 --> 00:13:43.891 
首先在你的服務器上應該鏈接插播內容

00:13:43.957 --> 00:13:46.226 
直接到HLS流媒體庫

00:13:47.961 --> 00:13:49.663 
接下來 在用戶應用上

00:13:50.864 --> 00:13:53.567 
聲明插播內容時間範圍

00:13:54.768 --> 00:13:58.639 
實現一些委託代理方法來執行播放規則

00:14:00.274 --> 00:14:01.508 
這裏一小段代碼

00:14:01.942 --> 00:14:05.112 
表現如何聲明插播內容時間範圍

00:14:05.579 --> 00:14:09.316 
每個插播內容 創建一個
AVInterstitialTimeRange

00:14:10.184 --> 00:14:12.486 
然後設置插播內容時間範圍屬性爲

00:14:12.553 --> 00:14:14.788 
播放項的該屬性

00:14:18.492 --> 00:14:22.296 
這裏我們之創建了單個
插播內容時間範圍

00:14:25.766 --> 00:14:27.434 
接下來 委託代理方法

00:14:30.704 --> 00:14:33.473 
講三個重要的方法

00:14:33.540 --> 00:14:36.710 
第一是willPresent
willPresent被調用

00:14:37.544 --> 00:14:40.314 
當其中一個插播內容開始播放

00:14:41.748 --> 00:14:46.053 
一般這時你需要修改
requiresLinearPlayback屬性

00:14:46.119 --> 00:14:47.588 
來限制導航

00:14:48.121 --> 00:14:49.957 
比如這是一則廣告

00:14:50.023 --> 00:14:52.693 
也許你有合同上的原因

00:14:52.759 --> 00:14:55.796 
要求用戶一旦開始必須看完整廣告

00:14:56.430 --> 00:14:57.364 
你把它設爲真

00:14:57.431 --> 00:15:00.334 
那麼用戶不能跳過
但他們還是可以暫停

00:15:00.901 --> 00:15:02.936 
去廚房什麼的再回來

00:15:03.704 --> 00:15:05.706 
但他們不能導航

00:15:05.772 --> 00:15:08.575 
在插播內容裏就不能跳過

00:15:10.310 --> 00:15:13.080 
didPresent方法
在插播結束時被調用

00:15:13.380 --> 00:15:16.216 
你常常需要把
requiresLinearPlayback設回到假

00:15:16.283 --> 00:15:18.252 
這樣用戶又能導航了

00:15:20.220 --> 00:15:21.188 
最後

00:15:22.422 --> 00:15:27.861 
timeToSeekAfterUserNavigatedFrom
從一個時間到某個目標時間點

00:15:28.529 --> 00:15:31.431 
這個方法被調用 當用戶導航時

00:15:31.498 --> 00:15:34.635 
或表示他們想要移動到視頻別的部分

00:15:34.701 --> 00:15:37.404 
比如快進或快退

00:15:38.605 --> 00:15:40.641 
快移 點擊播放

00:15:40.707 --> 00:15:44.645 
或者用導航標記跳到視頻的另一部分

00:15:45.913 --> 00:15:48.115 
oldTime表示播放時間點

00:15:48.182 --> 00:15:49.449 
在快進之前

00:15:49.516 --> 00:15:52.486 
targetTime表示
接下來開始播放的時間

00:15:53.287 --> 00:15:58.892 
代理方法返回的時間是你想播放器
恢復播放的時間點

00:16:00.027 --> 00:16:02.696 
所以默認下 如果不實現這個方法

00:16:02.763 --> 00:16:04.798 
它恢復在
targetTime目標時間

00:16:04.865 --> 00:16:07.634 
AVKit會找到目標時間點開始播放

00:16:07.901 --> 00:16:11.004 
不然 如果你提供插播開始時間

00:16:11.672 --> 00:16:14.541 
AVKit會自動重定向到
插播開始時間

00:16:15.676 --> 00:16:17.811 
那麼如果你重定向了插播開始時間

00:16:18.345 --> 00:16:20.747 
不像這裏的簡單示例

00:16:20.814 --> 00:16:22.850 
你就會需要記錄目標時間

00:16:23.784 --> 00:16:27.487 
當插播完畢後 找到目標時間

00:16:27.554 --> 00:16:29.489 
那麼用戶可以再開始看

00:16:29.890 --> 00:16:33.026 
他們想看的時間點

00:16:34.661 --> 00:16:36.463 
現在看看跳過播放

00:16:38.932 --> 00:16:40.234 
這是跳過的指示符

00:16:40.300 --> 00:16:43.203 
tvOS 10新的跳過指示符

00:16:43.337 --> 00:16:44.805 
逐條跳過指示符

00:16:48.642 --> 00:16:51.879 
取代之前 跳過指示符是

00:16:51.945 --> 00:16:54.715 
10秒向前向後跳躍播放的

00:16:57.351 --> 00:17:00.587 
tvOS 10系統中你可以
選擇這兩種跳過方式

00:17:01.889 --> 00:17:06.026 
如果你的應用展示的是電影或電視節目

00:17:06.693 --> 00:17:08.694 
用戶就可以用來

00:17:08.762 --> 00:17:12.366 
定位向前或向後10秒

00:17:12.432 --> 00:17:16.236 
每次 更方便的找到他們想看的場面

00:17:17.204 --> 00:17:21.141 
如果放的是一系列短視頻
比如鍛鍊視頻

00:17:21.775 --> 00:17:24.845 
用戶更可能使用 可以輕鬆跳到

00:17:24.912 --> 00:17:29.683 
下一個視頻 下一項鍛鍊
或者前一個視頻 前一項鍛鍊的功能

00:17:29.750 --> 00:17:32.352 
而不是在一個鍛鍊視頻裏前後跳一點

00:17:33.220 --> 00:17:36.123 
所以爲了適應這些情景
你可以改變跳躍播放方式

00:17:36.190 --> 00:17:38.458 
今天定義了兩種：

00:17:38.525 --> 00:17:42.429 
默認方式是加減10秒
還有逐條跳躍的方式

00:17:43.330 --> 00:17:46.033 
播放器視圖控制器有三個屬性

00:17:46.099 --> 00:17:48.101 
與此相關：跳躍方式屬性

00:17:48.168 --> 00:17:50.871 
和其他屬性來啓用或禁用

00:17:50.938 --> 00:17:54.408 
跳躍指示符

00:17:57.044 --> 00:18:02.115 
那麼來看看逐條跳躍播放
而不是跳幾秒的

00:18:03.150 --> 00:18:05.853 
第一件事要做的是

00:18:06.520 --> 00:18:08.121 
選擇新的跳躍播放方式

00:18:08.188 --> 00:18:09.957 
這裏就一路設置啓用

00:18:10.023 --> 00:18:12.426 
向前向後跳躍
我有點兒偷懶

00:18:13.227 --> 00:18:16.697 
然後實現兩個代理方法

00:18:17.331 --> 00:18:18.632 
跳到下一項的方法中

00:18:18.732 --> 00:18:23.270 
我們要做的是替代當前項爲新的視頻

00:18:24.738 --> 00:18:27.541 
然後跳到前一項方法也一樣
只不過是向後退一個視頻

00:18:30.611 --> 00:18:34.515 
好作爲所有這些功能的演示

00:18:34.581 --> 00:18:37.251 
我要歡迎
Jonathan Long上臺

00:18:37.384 --> 00:18:38.252 
Jonathan

00:18:45.092 --> 00:18:46.093 
早上好

00:18:46.159 --> 00:18:50.063 
我是Jonathan Long
和Dan一起從事tvOS的AVKit框架

00:18:50.564 --> 00:18:55.736 
今天 我們要演示一個應用
叫做AVKit Player

00:18:56.403 --> 00:18:58.605 
在Xcode打開這個項目

00:18:59.273 --> 00:19:01.508 
這是主視圖控制器

00:19:01.975 --> 00:19:04.311 
是UIViewController
的子類

00:19:04.611 --> 00:19:07.614 
其中有一個變量引用
AVPlayerViewController

00:19:08.248 --> 00:19:11.952 
我們在prepare函數中獲取
該引用爲了回調轉場

00:19:12.753 --> 00:19:15.088 
並且 我們創建AVAsset

00:19:15.589 --> 00:19:18.992 
AVPlayerItem
和AVPlayer 指定爲

00:19:19.059 --> 00:19:20.961 
播放器視圖控制器的播放器屬性

00:19:21.461 --> 00:19:24.164 
接下來打包運行這個項目看它怎麼樣

00:19:27.534 --> 00:19:29.603 
這是我們全屏下的播放器視圖控制器

00:19:29.670 --> 00:19:31.672 
附帶所有常見的用戶交互功能

00:19:32.005 --> 00:19:34.908 
如果我向下劃會顯示信息面板

00:19:35.242 --> 00:19:38.312 
你可以看到這兒並沒有很多有趣的信息

00:19:38.378 --> 00:19:40.981 
最明顯的是這兒缺了信息標籤

00:19:41.682 --> 00:19:43.851 
所以第一件事要做的是加入

00:19:43.917 --> 00:19:46.119 
一些外部元數據和導航標記

00:19:46.186 --> 00:19:47.754 
這樣信息標籤頁就會出現了

00:19:49.156 --> 00:19:52.826 
回到Xcode 第一件事要做的是

00:19:52.893 --> 00:19:54.995 
加入外部元數據

00:19:55.229 --> 00:19:58.165 
那麼創建一些
AVMetadataItems

00:19:58.232 --> 00:20:00.567 
把它們加入一個數組 然後指定該數組

00:20:00.634 --> 00:20:03.203 
爲播放項外部元數據的屬性

00:20:04.638 --> 00:20:07.474 
這裏我直接加入了一些輔助函數

00:20:07.941 --> 00:20:10.777 
它們可能非常眼熟 因爲與

00:20:10.844 --> 00:20:12.646 
Dan在幻燈片上演示給你們的相同

00:20:13.247 --> 00:20:16.016 
第一個函數創建封面的
AVMetadataItem

00:20:16.149 --> 00:20:18.619 
設置數據類型爲JPEG

00:20:19.520 --> 00:20:23.390 
第二個函數爲其他值類型創建
AVMetadataItem

00:20:23.457 --> 00:20:26.460 
設置擴展性語言標籤爲“未定義的”

00:20:28.962 --> 00:20:34.902 
現在 這裏還有一個輔助函數
拿字典爲參數

00:20:35.269 --> 00:20:38.939 
映射字典的鍵值對

00:20:39.006 --> 00:20:43.410 
來創建AVMetadataItems
返回一個數組的AVMetadataItems

00:20:44.878 --> 00:20:47.481 
現在用輔助函數

00:20:47.915 --> 00:20:52.419 
我們可以設置播放項的外部元數據屬性

00:20:52.953 --> 00:20:57.491 
爲剛纔得到的
AVMetadataItems數組

00:20:58.392 --> 00:21:00.527 
好 我們創建了
AVMetadataItems

00:21:00.594 --> 00:21:02.996 
把它們加到數組中 並指定該數組

00:21:03.063 --> 00:21:05.432 
到播放項的外部元數據屬性

00:21:06.934 --> 00:21:09.269 
現在繼續加入一些導航標記

00:21:10.537 --> 00:21:12.806 
這兒有一些輔助函數來幫助實現

00:21:14.474 --> 00:21:17.711 
第一個函數創建一個
AVTimedMetadataGroup

00:21:17.778 --> 00:21:22.382 
用標題 描述 和時間範圍作參數

00:21:23.817 --> 00:21:29.990 
第二個用名字創建
AVNavigationMarkersGroup

00:21:30.624 --> 00:21:33.093 
和四個時間元數據組

00:21:33.160 --> 00:21:35.796 
代表視頻內容中不同時間範圍

00:21:37.097 --> 00:21:39.867 
現在用這些函數

00:21:39.933 --> 00:21:43.237 
我們可以設置導航標記組屬性

00:21:43.303 --> 00:21:44.471 
在播放項上

00:21:44.705 --> 00:21:49.576 
設爲一個
AVNavigationMarkerGroups的數組

00:21:49.977 --> 00:21:52.079 
命名爲“附加組”

00:21:53.814 --> 00:21:57.017 
好 所以我們創建了
AVNavigationMarkersGroup

00:21:57.084 --> 00:21:59.686 
用一些時間元數據組和名字

00:22:00.320 --> 00:22:03.090 
把它加入一個數組
指定該數組

00:22:03.156 --> 00:22:06.360 
爲播放項的導航標記組屬性

00:22:06.927 --> 00:22:09.463 
讓我們打包運行一下看會發生什麼

00:22:13.934 --> 00:22:16.236 
這還是我們的播放器視圖控制器

00:22:16.637 --> 00:22:19.673 
下劃看信息標籤

00:22:19.873 --> 00:22:22.743 
現在我們看到在元數據區域
所有的元數據

00:22:22.809 --> 00:22:26.280 
我們指定了封面和標題

00:22:27.080 --> 00:22:29.116 
現在如果我在底部選擇

00:22:29.183 --> 00:22:31.151 
其中一個我們加入的導航標記

00:22:31.218 --> 00:22:33.987 
就可以跳到視頻內容中的那個點了

00:22:36.523 --> 00:22:37.925 
所以只需要一點點代碼

00:22:37.991 --> 00:22:40.861 
非常容易的就能加入
外部元數據和導航標記

00:22:40.961 --> 00:22:43.764 
爲信息面板提供豐富的用戶體驗

00:22:44.665 --> 00:22:49.803 
現在我要請Dan回來講講tvOS中
AVKit框架的新API了

00:22:50.437 --> 00:22:51.438 
Dan

00:22:55.342 --> 00:22:56.510 
謝謝你 Jonathan

00:23:00.814 --> 00:23:02.716 
好 播放內容建議

00:23:04.484 --> 00:23:08.188 
播放內容建議就是
對接下來看什麼的建議

00:23:09.489 --> 00:23:12.893 
你也許在最喜歡的應用裏看到過
接下來的提示

00:23:13.427 --> 00:23:16.597 
比如Netflix、
Hulu、HBO

00:23:18.432 --> 00:23:21.502 
當你看到每集最後時 比如白宮風雲

00:23:21.935 --> 00:23:25.072 
你會看到一個提示跳出來說看下一集

00:23:26.240 --> 00:23:28.876 
然後一直看一直看直到凌晨三點

00:23:30.944 --> 00:23:34.481 
許多應用在它們tvOS 9版本
實現了這個功能

00:23:34.548 --> 00:23:37.684 
這有點難搞 沒別的

00:23:39.620 --> 00:23:42.356 
在tvOS 10
AVKit提供一種標準方法

00:23:42.422 --> 00:23:45.993 
來呈現可定製的 接下來 體驗

00:23:46.059 --> 00:23:48.028 
我們稱之爲播放內容建議

00:23:49.263 --> 00:23:50.731 
這裏有個例子

00:23:52.833 --> 00:23:53.834 
謝謝

00:23:55.869 --> 00:23:58.539 
現在你有一整個屏幕工作

00:23:58.672 --> 00:24:01.341 
你不受限於任何

00:24:01.408 --> 00:24:02.776 
這只是一個示例

00:24:04.578 --> 00:24:06.580 
在右下方 有一些元數據

00:24:06.647 --> 00:24:08.382 
和一些可以點擊的大按鈕

00:24:10.217 --> 00:24:12.719 
上面正播放着視頻

00:24:14.354 --> 00:24:18.091 
這裏是提議視頻的縮略圖

00:24:21.094 --> 00:24:23.463 
現在 一個播放內容建議出現了

00:24:23.530 --> 00:24:26.433 
通過AVContentProposal
類的一個對象

00:24:27.034 --> 00:24:28.902 
這基本上是個模範對象

00:24:29.903 --> 00:24:32.272 
這裏有一些屬性

00:24:32.339 --> 00:24:34.174 
我不會花很多時間在所有這些屬性上

00:24:34.241 --> 00:24:36.510 
但我想重點講一些重要的

00:24:37.711 --> 00:24:40.013 
第一個是contentTimeForTransition

00:24:41.114 --> 00:24:44.484 
這是在當前播放視頻的時間中

00:24:45.452 --> 00:24:49.289 
你想讓播放建議呈現給用戶的時間點

00:24:50.757 --> 00:24:53.126 
所以如果你指定視頻持續時間

00:24:53.193 --> 00:24:54.695 
或者0作爲捷徑

00:24:55.963 --> 00:25:00.033 
這就意味着你想讓建議出現在視頻的
最後

00:25:00.701 --> 00:25:04.204 
然而 如果你想呈現一個電視節目
或者電影之類的

00:25:04.271 --> 00:25:07.307 
有很長的片尾攝製人員名單
用戶不想坐着看完

00:25:07.474 --> 00:25:10.744 
也許你會想要在片尾致謝名單開頭
呈現播放建議

00:25:10.811 --> 00:25:12.980 
可以對應這種情況 設置屬性

00:25:15.048 --> 00:25:17.150 
接下來 automaticAcceptanceInterval
屬性

00:25:17.851 --> 00:25:21.855 
允許你設定建議超時時間

00:25:23.390 --> 00:25:25.225 
你可以設置比如30秒

00:25:25.292 --> 00:25:28.462 
這表示 如果用戶什麼都沒做

00:25:28.529 --> 00:25:32.165 
不採取行爲30秒 那麼建議

00:25:32.232 --> 00:25:35.068 
就會自動被接受執行

00:25:37.471 --> 00:25:38.739 
如果不設置這個屬性

00:25:39.606 --> 00:25:43.977 
那麼建議會留在屏幕上直到用戶採取
某種行動

00:25:45.245 --> 00:25:49.917 
標題和預覽圖像會成爲僅有的一些信息

00:25:49.983 --> 00:25:53.587 
你可以提供給用戶的
你可以 當然 也提供

00:25:53.654 --> 00:25:56.523 
一些多餘的信息 比如：描述

00:25:57.391 --> 00:26:01.562 
也許是一個小工具可以設置用戶評分的

00:26:02.229 --> 00:26:04.831 
也許是一些其他視頻的建議

00:26:07.434 --> 00:26:10.304 
最後 用來指定建議內容的

00:26:10.370 --> 00:26:12.673 
是設置下條建議屬性

00:26:13.140 --> 00:26:15.242 
在當前播放項上

00:26:17.511 --> 00:26:19.680 
讓我們看看創建一個播放內容建議

00:26:22.015 --> 00:26:23.417 
好吧 這挺簡單

00:26:23.483 --> 00:26:25.719 
先創建一個AVContentProposal的實例

00:26:26.119 --> 00:26:29.590 
我們要指定過渡時間屬性爲0

00:26:30.390 --> 00:26:32.693 
這意味着我們想要它在視頻最後出現

00:26:32.759 --> 00:26:35.495 
這是個捷徑 如果不知道視頻時長的話

00:26:35.562 --> 00:26:38.298 
比如 播放項還沒有載入

00:26:40.200 --> 00:26:43.670 
我們要設置標題和預覽圖

00:26:43.904 --> 00:26:47.374 
這個情況下 播放建議第九季第二集

00:26:47.441 --> 00:26:50.577 
的一部虛構電視劇集
叫做"狂歡萬歲"

00:26:54.147 --> 00:26:56.850 
這個情況下我們要設置一個可選屬性

00:26:56.917 --> 00:26:58.418 
播放建議的URL屬性

00:26:58.485 --> 00:27:01.255 
設爲這個劇集的URL

00:27:02.356 --> 00:27:03.824 
爲我們之後所用

00:27:05.225 --> 00:27:07.361 
現在把建議指派給播放項

00:27:07.427 --> 00:27:08.795 
就會顯示這個建議了

00:27:09.763 --> 00:27:12.999 
當然當前播放項是第九季第一集的

00:27:17.905 --> 00:27:21.341 
那麼 再一次 我們有三個有趣的
代理方法

00:27:22.709 --> 00:27:24.578 
ShouldPresent
被調用

00:27:24.645 --> 00:27:28.315 
在建議馬上呈現給用戶之前

00:27:29.082 --> 00:27:31.952 
現在你可以有機會返回假

00:27:32.019 --> 00:27:34.588 
來禁止呈現建議

00:27:35.522 --> 00:27:38.225 
但你也可以把它用作最後一次機會

00:27:38.292 --> 00:27:40.994 
再重新設置 準備呈現

00:27:42.029 --> 00:27:44.231 
我們馬上會舉個例子

00:27:45.299 --> 00:27:49.636 
當用戶接受建議
就會調用didAccept方法

00:27:49.703 --> 00:27:52.673 
這意味着他們想要看你提議的視頻

00:27:53.006 --> 00:27:55.609 
當超時發生時也會調用這個方法

00:27:57.945 --> 00:28:01.181 
didReject方法會被調用
當用戶表示

00:28:01.248 --> 00:28:03.984 
他們不想看你的提議 不想看視頻

00:28:04.051 --> 00:28:07.421 
他們想回到菜單

00:28:12.259 --> 00:28:15.762 
最後 你要實現展示就要

00:28:15.829 --> 00:28:19.633 
通過創建自定義的
AVContentProposalViewController子類

00:28:21.435 --> 00:28:23.704 
這個子類中有一些有趣的東西

00:28:23.770 --> 00:28:25.772 
讓我們看看...兩樣

00:28:26.373 --> 00:28:31.211 
preferredPlayerViewFrame是
屏幕上的畫面

00:28:31.278 --> 00:28:34.615 
你想要建議視頻出現的畫面位置

00:28:35.749 --> 00:28:40.721 
現在 基類僅返回整個屏幕的畫面

00:28:41.121 --> 00:28:44.191 
這種情況下視頻會繼續填滿屏幕

00:28:44.925 --> 00:28:47.728 
而你的建議會覆蓋在那上面

00:28:48.395 --> 00:28:50.531 
不然你可以指定一個小點的長方形

00:28:50.597 --> 00:28:52.733 
也許偏移在角落之類的

00:28:53.267 --> 00:28:54.968 
來空出很多空間

00:28:55.035 --> 00:28:57.571 
控制屏幕其餘部分

00:29:00.841 --> 00:29:05.345 
還有dismissContentProposal函數
指定如何打發播放內容建議

00:29:05.412 --> 00:29:07.381 
你可以指定三個中的一個動作：

00:29:08.081 --> 00:29:12.920 
接受 拒絕 和推遲

00:29:12.986 --> 00:29:17.758 
推遲是指用戶想要隱藏建議

00:29:17.858 --> 00:29:20.861 
繼續看片尾致謝名單這樣他們能

00:29:20.928 --> 00:29:22.896 
我不知道
也許想看到自己名字

00:29:22.963 --> 00:29:24.831 
在名單上
若他們爲攝製那視頻工作了

00:29:25.399 --> 00:29:29.970 
然後正如其名 推遲 會重新出現在
視頻結尾

00:29:33.140 --> 00:29:36.276 
現在讓我們看看如何迴應代理提醒

00:29:37.711 --> 00:29:38.712 
shouldPresent方法

00:29:38.779 --> 00:29:41.615 
在這裏 我們要創建一個實例屬於

00:29:41.949 --> 00:29:46.119 
播放建議視圖控制器的自定義子類

00:29:46.186 --> 00:29:49.456 
且指定它爲
播放建議視圖控制器下的屬性

00:29:49.523 --> 00:29:51.758 
在播放器視圖控制器函數中
並且最後返回真

00:29:53.594 --> 00:29:55.963 
這讓我們最後設置了一下

00:29:56.029 --> 00:29:57.965 
當我們知道確實需要它的時候

00:29:58.031 --> 00:30:02.102 
這麼做也沒有分配
一堆用戶用不到的記憶容量

00:30:04.071 --> 00:30:05.072 
didAccept方法

00:30:05.906 --> 00:30:08.909 
這裏我們要做的是替代當前播放項

00:30:09.376 --> 00:30:11.178 
以一個建議內容的播放項

00:30:12.079 --> 00:30:14.681 
非常直觀
我們已經見過這段代碼幾次了

00:30:15.883 --> 00:30:18.785 
你會注意到這裏
我用了URL屬性

00:30:18.852 --> 00:30:21.822 
當我創建播放建議時設置的

00:30:22.789 --> 00:30:25.359 
現在 不誇張的說

00:30:25.792 --> 00:30:27.761 
你不需要實現這些

00:30:27.828 --> 00:30:31.265 
因爲AVKit
若你在創建播放建議時提供了URL

00:30:31.899 --> 00:30:33.867 
AVKit會自動做完剩下的

00:30:33.934 --> 00:30:36.003 
如果你不實現這個代理方法

00:30:39.006 --> 00:30:41.909 
好 現在演示播放內容建議

00:30:41.975 --> 00:30:42.809 
Jonathan

00:30:49.616 --> 00:30:50.484 
大家好

00:30:53.253 --> 00:30:54.154 
好

00:30:54.788 --> 00:30:57.090 
我們繼續講講AVKitPlayer

00:30:57.157 --> 00:30:59.493 
加入“接下來”體驗

00:30:59.560 --> 00:31:02.496 
通過添加AVContentProposal
ViewController 的子類

00:31:03.730 --> 00:31:04.998 
所以我們要做的第一件事

00:31:05.065 --> 00:31:08.869 
是創建AVContentProposal
ViewController 的自定義子類

00:31:09.636 --> 00:31:13.140 
我這裏已經有一個了
那麼我直接加到項目中

00:31:20.147 --> 00:31:23.283 
這是UpNextContentViewController

00:31:23.750 --> 00:31:27.187 
AVContentProposalViewController
的子類

00:31:27.554 --> 00:31:30.057 
這兒有一些UI屬性

00:31:30.123 --> 00:31:33.594 
比如UIImageView
UILabel以及其他

00:31:35.095 --> 00:31:39.766 
我們覆蓋了父類中preferredPlayer
ViewFrame 來返回所需的CGRect

00:31:40.400 --> 00:31:42.536 
讓播放視圖控制器的視圖

00:31:42.603 --> 00:31:45.973 
活動起來的 當呈現播放建議時

00:31:47.608 --> 00:31:50.010 
現在 其他視圖控制器僅處理

00:31:50.077 --> 00:31:52.279 
視圖和子視圖的佈局

00:31:52.779 --> 00:31:55.015 
所以我們回到主視圖控制器

00:31:56.350 --> 00:31:58.352 
還有兩件事需要做

00:31:58.452 --> 00:32:02.022 
第一 創建AVContentProposal的實例

00:32:02.322 --> 00:32:06.593 
並指定它爲播放項的
下一個播放建議屬性值

00:32:13.033 --> 00:32:18.205 
所以 這裏創建
AVContentProposal的實例

00:32:19.072 --> 00:32:23.076 
這兒有過渡時間 標題和預覽圖

00:32:24.311 --> 00:32:26.547 
我們還設置了自動接收超時時間

00:32:26.613 --> 00:32:27.948 
爲15秒

00:32:29.416 --> 00:32:33.854 
另外 還設置了URL
和播放建議的元數據

00:32:33.921 --> 00:32:36.790 
和下一個播放內容的信息相吻合

00:32:36.857 --> 00:32:39.359 
如果用戶選擇接受建議的話

00:32:41.094 --> 00:32:44.464 
最後 我們把剛剛創建的
播放建議設置爲

00:32:44.531 --> 00:32:49.002 
AVPlayerItem上的
下一個播放內容屬性

00:32:50.737 --> 00:32:53.340 
這樣接下來要做的
也是最後要做的

00:32:53.407 --> 00:32:56.643 
就是實現兩個
playerViewController的代理方法

00:32:57.511 --> 00:33:01.381 
你可以看到這裏我們把播放視圖控制器
代理設爲自己

00:33:02.616 --> 00:33:04.718 
我們要實現的兩個方法爲

00:33:04.785 --> 00:33:10.457 
shouldPresentProposal和
didAccept

00:33:12.426 --> 00:33:15.662 
所以在shouldPresentProposal中
我們創建了一個實例

00:33:15.729 --> 00:33:18.899 
AVContentProposalViewController
的子類的實例

00:33:19.566 --> 00:33:20.834 
並指定該實例爲

00:33:20.901 --> 00:33:24.538 
playerViewController下的
contentProposalViewController

00:33:25.639 --> 00:33:27.140 
另外 我們返回真

00:33:27.207 --> 00:33:30.277 
來表明是否要呈現播放建議

00:33:32.112 --> 00:33:34.314 
最後 在didAccept中

00:33:34.781 --> 00:33:38.151 
我們需要處理從當前播放項
到下一個的過渡

00:33:38.919 --> 00:33:39.920 
爲了完成這個

00:33:40.120 --> 00:33:44.224 
我們從播放建議中獲取URL

00:33:45.058 --> 00:33:47.794 
從URL創建
AVPlayerItem

00:33:48.395 --> 00:33:51.732 
然後僅僅用我們的播放項替代當前項

00:33:52.799 --> 00:33:53.700 
就完成了

00:33:54.168 --> 00:33:56.069 
讓我們打包運行看看怎麼樣

00:34:04.011 --> 00:34:07.047 
那麼我直接跳到接近結尾的地方

00:34:15.054 --> 00:34:17.524 
這是我們的播放建議

00:34:17.958 --> 00:34:20.527 
正如你看到的
元數據正如我們規定的

00:34:20.594 --> 00:34:22.629 
有預覽圖還有標題

00:34:23.163 --> 00:34:24.598 
如果這裏我選擇播放下一個

00:34:26.867 --> 00:34:28.869 
就會過渡到下個播放項

00:34:32.739 --> 00:34:35.576 
所以我認爲 如果你在tvOS 9上
實現了這些功能

00:34:35.641 --> 00:34:37.311 
你會很高興使用這個API

00:34:37.377 --> 00:34:39.545 
你會發現這個很好用

00:34:40.347 --> 00:34:41.715 
我要邀請Dan回來上臺

00:34:41.782 --> 00:34:43.984 
講講AVKit怎樣最好地實踐

00:34:52.525 --> 00:34:55.027 
好 最好的實踐

00:34:58.866 --> 00:35:02.269 
我要講一些事：該做的 和該避免的事

00:35:04.638 --> 00:35:07.708 
第一 我們推薦你做的一些事

00:35:09.309 --> 00:35:13.380 
再說一次表現方法
或者表現播放控制器

00:35:13.447 --> 00:35:15.749 
可以處理從內聯視圖自動放大的動畫

00:35:15.816 --> 00:35:18.418 
所以沒有理由實現你自己的動畫

00:35:21.088 --> 00:35:24.157 
第二 記得播放控制只有在全屏時
纔可交互

00:35:25.559 --> 00:35:28.362 
第三 用新的播放建議API

00:35:28.996 --> 00:35:31.965 
你們中的一些人之前編寫過更難的方式

00:35:32.032 --> 00:35:34.868 
我們鼓勵你換到新的方式

00:35:35.068 --> 00:35:37.104 
我認爲你會發現代碼簡單很多

00:35:37.171 --> 00:35:38.639 
很容易理解代碼思路

00:35:38.705 --> 00:35:42.976 
而且你可以避免一些故障或者
其他碰到的問題

00:35:43.043 --> 00:35:45.179 
當你們之前試圖讓它完美運作時

00:35:48.415 --> 00:35:53.287 
還有注意到playerItem中
播放器的error屬性

00:35:53.587 --> 00:35:56.456 
這就是你怎樣在播放控制中發現錯誤的

00:35:58.258 --> 00:36:00.928 
我馬上要講一個特別的錯誤

00:36:00.994 --> 00:36:03.130 
需要處理
但你們應該還要注意任何錯誤

00:36:03.197 --> 00:36:06.333 
發生以及用戶反饋的

00:36:09.336 --> 00:36:11.104 
好 現在有一些要避免的

00:36:12.005 --> 00:36:14.374 
避免開關
showsPlaybackControls

00:36:15.242 --> 00:36:19.179 
這個屬性不是用來暫時顯示或隱藏
播放控制的

00:36:19.246 --> 00:36:22.516 
這是用來表示你永久的意願

00:36:22.583 --> 00:36:25.052 
如果把它設爲假 就是在說

00:36:25.586 --> 00:36:28.488 
我們一點兒都不需要播放控制

00:36:29.056 --> 00:36:32.259 
所以如果你來回開關這個屬性就是在
告訴AVKit

00:36:32.326 --> 00:36:33.961 
來毀滅所有控制 重新創造它們

00:36:34.027 --> 00:36:35.529 
毀滅它們 再造它們

00:36:35.629 --> 00:36:38.632 
你可以想象這不太有效率

00:36:39.766 --> 00:36:42.903 
第二 有些人討厭這點

00:36:42.970 --> 00:36:45.305 
但避免加入補充手勢來操控

00:36:45.372 --> 00:36:48.775 
因爲這會混淆用戶
人們不會發現這些手勢的

00:36:49.643 --> 00:36:50.644 
同樣的

00:36:50.711 --> 00:36:54.848 
不要過份超載選擇鍵和觸摸服務手勢

00:36:55.616 --> 00:36:59.386 
不僅因爲這會混淆用戶
也有可能會在未來弄壞它

00:37:03.056 --> 00:37:06.193 
現在講些一般的建議

00:37:06.260 --> 00:37:08.795 
替換資源
如果你看到這個錯誤：

00:37:08.862 --> 00:37:11.431 
AVErrorMediaServicesWereReset

00:37:12.699 --> 00:37:14.034 
如果你沒有作出迴應

00:37:14.101 --> 00:37:16.904 
媒體服務會在播放時重置

00:37:18.172 --> 00:37:19.606 
視頻播放會失敗

00:37:20.541 --> 00:37:24.344 
用戶也做不了任何事除了
希望是 退出

00:37:24.444 --> 00:37:27.748 
所以他們必須做的是退出
回到菜單再點進視頻

00:37:27.915 --> 00:37:31.485 
如果你捕獲這個錯誤
自動替換資源

00:37:31.552 --> 00:37:34.888 
播放項和播放器基本上是你
AVFoundation的所有對象

00:37:35.389 --> 00:37:38.258 
然後你就能更天衣無縫的處理這個情況

00:37:38.325 --> 00:37:40.994 
用戶根本不會發現發生了什麼

00:37:42.829 --> 00:37:45.599 
現在 其他一些演講講的播放控制
最好的實踐

00:37:45.666 --> 00:37:49.136 
包括今年的AVFoundation
播放系統的發展

00:37:49.503 --> 00:37:53.273 
那個演講在這周早些時候
你們可在 WWDC 應用裏看到視頻

00:37:54.374 --> 00:37:57.110 
兩年前曾有一個傑出的演講

00:37:57.311 --> 00:37:59.112 
精通現代媒體播放

00:37:59.179 --> 00:38:02.349 
演講包括了AVKit和
AVFoundation的竅門

00:38:02.416 --> 00:38:04.251 
讓它們很好地合作

00:38:06.653 --> 00:38:12.326 
所以總的來說
AVKit提供優秀的播放控制

00:38:12.392 --> 00:38:15.696 
來支持遙控器 遊戲控制器和Siri

00:38:16.530 --> 00:38:20.567 
能完全控制媒體棧
強大的API

00:38:21.101 --> 00:38:22.769 
而且非常容易上手

00:38:23.504 --> 00:38:26.874 
確保查看示例代碼看一些更深入的例子

00:38:27.274 --> 00:38:28.809 
我們期待看到你們的應用

00:38:29.610 --> 00:38:31.912 
要看更多信息 可以去屏幕上的URL

00:38:31.979 --> 00:38:35.382 
我們會有指向示例代碼
和其他資源的鏈接

00:38:37.317 --> 00:38:39.186 
還有看看其他相關的演講

00:38:39.253 --> 00:38:43.156 
我們還有HTTP流媒體傳輸的會話

00:38:43.223 --> 00:38:44.691 
在這周早些時候

00:38:44.758 --> 00:38:47.127 
還有兩個演講關於使用TVMLKit

00:38:47.194 --> 00:38:51.465 
這也是一種直接使用
AVKit的替代方法

00:38:53.367 --> 00:38:54.268 
那麼 謝謝各位