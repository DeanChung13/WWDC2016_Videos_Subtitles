00:00:24.324 --> 00:00:29.162 
下午好
歡迎來到2016全球開發者大會

00:00:30.764 --> 00:00:33.333 
自我們上次相聚 已有一年時間
且發生了不少事情

00:00:33.800 --> 00:00:37.638 
新出了tvOS
然後是四個Apple OS平臺

00:00:37.704 --> 00:00:39.506 
其中很多
擁有其App Store

00:00:40.040 --> 00:00:43.610 
並且我們的所有平臺都爲其
自身的獨特體驗進行了優化

00:00:43.844 --> 00:00:47.581 
但他們共享了相當多的
通用技術和API

00:00:47.648 --> 00:00:50.984 
令你容易將你的應用帶到
所有四個平臺

00:00:51.285 --> 00:00:53.921 
通過同時衡量個體特性

00:00:55.155 --> 00:00:58.325 
我們的專家工具鏈
對於這四個平臺是相同的

00:00:59.226 --> 00:01:01.762 
他們共享大部分的框架和庫

00:01:02.262 --> 00:01:05.065 
還有基本的編程概念和語言

00:01:05.132 --> 00:01:06.266 
也是相同的

00:01:07.634 --> 00:01:11.505 
今天我們要宣佈很多
新的API和技術

00:01:11.572 --> 00:01:13.540 
你將可以利用到的

00:01:13.740 --> 00:01:16.243 
你會找到更多的方式來表達你的觀點

00:01:16.310 --> 00:01:19.479 
你甚至可以瞄準更多市場中的
更多用戶

00:01:20.848 --> 00:01:24.685 
特別是我們的iOS X
對於開發者來說變化巨大

00:01:25.352 --> 00:01:28.922 
事實上 至少如果你看下
我們今早宣佈的 iOS

00:01:28.989 --> 00:01:32.559 
你會發現我們開放了
iOS的整個用戶體驗

00:01:32.626 --> 00:01:35.696 
給開發者 涵蓋了所有東西
從通知

00:01:35.762 --> 00:01:38.365 
到電話 信息 地圖
甚至是Siri

00:01:40.200 --> 00:01:43.470 
一個重要的概念我們用來實現這個
那就是extension

00:01:43.537 --> 00:01:46.507 
並且你可能記得我們兩年前
介紹了extension

00:01:46.707 --> 00:01:49.409 
其代表了一個日益重要的機制

00:01:49.476 --> 00:01:51.879 
因爲他們允許你從應用中擴展開來

00:01:51.945 --> 00:01:54.548 
並參與到我們的系統功能性

00:01:55.215 --> 00:01:58.018 
它們允許你安全地定製我們的OS

00:01:58.085 --> 00:02:02.556 
通過運行短生命週期的沙盒服務
沙盒服務按需啓動

00:02:04.525 --> 00:02:08.294 
我們發出的產品已支持很多
extension points

00:02:08.395 --> 00:02:10.197 
並且今年我們會添加更多

00:02:10.531 --> 00:02:13.800 
允許你更深入的連接到
我們的OS和應用

00:02:15.202 --> 00:02:18.839 
也許最令人興奮的新extension point
就是創造iMessage App

00:02:19.039 --> 00:02:22.209 
我將交給Darin Adler
來給你講述它的所有細節

00:02:29.316 --> 00:02:32.753 
新信息用起來非常好

00:02:32.819 --> 00:02:34.421 
並且我希望你們都會這樣

00:02:34.555 --> 00:02:37.424 
iMessage App是你如何
變成它的一部分

00:02:38.759 --> 00:02:42.329  
現在 正如Andreas所提到的
iMessage App是extension

00:02:42.429 --> 00:02:44.231  
意味着它和其他extensions一樣

00:02:44.298 --> 00:02:46.700  
你將其包含到App Store
裏的應用上

00:02:47.467 --> 00:02:50.070  
但對於iMessage Apps
也有另一個選項

00:02:50.137 --> 00:02:52.339  
你可將它們包含到
iMessage App Store

00:02:52.406 --> 00:02:54.808  
也就是從信息裏直接獲取

00:02:54.875 --> 00:02:56.076  
看起來像這樣

00:02:57.978 --> 00:03:04.284 
現在 當你通過iMessage
App發送交互信息

00:03:04.518 --> 00:03:09.356 
你會在上方角落
看到應用的圖標

00:03:09.556 --> 00:03:11.124 
但甚至更重要的是

00:03:11.191 --> 00:03:13.794 
如果你發給交互信息的那個人

00:03:14.127 --> 00:03:15.495 
還沒有這個應用

00:03:16.029 --> 00:03:18.966 
他們將得到這條鏈接上面寫道
獲取應用名稱

00:03:19.333 --> 00:03:20.667 
如果你點擊該鏈接

00:03:21.235 --> 00:03:23.470 
這會帶着你獲取或者購買這個應用

00:03:23.537 --> 00:03:27.174 
因此這是個令人驚異的方式來
令你的用戶

00:03:27.241 --> 00:03:29.243 
傳播你的應用 從一個人到另一個人

00:03:31.044 --> 00:03:33.814 
現在 如果你想創建一個便籤應用
這真的很簡單

00:03:33.881 --> 00:03:35.282 
根本不需要編寫代碼

00:03:35.349 --> 00:03:38.085 
你只需爲應用的圖標
準備好所有的圖像素材

00:03:38.151 --> 00:03:39.586 
便籤的圖片素材

00:03:39.653 --> 00:03:43.657 
把他們放進Xcode建立 然後
提交到iTunes Connect

00:03:44.925 --> 00:03:48.228 
如果你想編寫一個更爲複雜的應用

00:03:48.295 --> 00:03:51.164 
並利用iMessage Apps
裏的所有力量

00:03:51.398 --> 00:03:56.303 
你用Swift編程並使用UIKit
就像其他的extensions一樣

00:03:56.470 --> 00:03:58.972 
還有一個新的Messages
extension point

00:03:59.806 --> 00:04:02.743 
這個Messages extension point中的類
給你訪問權限

00:04:02.809 --> 00:04:05.078 
你需要一切
都在Messages App裏

00:04:05.145 --> 00:04:08.482 
因此有一個對象代表
你發出的信息

00:04:08.549 --> 00:04:10.117 
有一個對象代表

00:04:10.184 --> 00:04:12.352 
此信息作爲其中一部分的整個對話

00:04:12.419 --> 00:04:15.055 
甚至有一個對象代表
一個叫會話的東西

00:04:15.122 --> 00:04:17.089 
讓你將信息彙集在一起

00:04:17.156 --> 00:04:21.461 
這是一個很好的方式來創建
協作性的iMessage Apps

00:04:22.563 --> 00:04:26.333  
現在 所有這些已完成
都沒有妥協掉私密性

00:04:26.400 --> 00:04:28.035  
信息就是以此出名的

00:04:28.635 --> 00:04:32.706  
你的應用沒有除當前對話外的
任何訪問權限

00:04:32.773 --> 00:04:35.008  
應用之外正在發生什麼

00:04:35.108 --> 00:04:38.345  
它甚至不需知道

00:04:38.412 --> 00:04:40.581  
誰參與了 你發送給誰

00:04:40.781 --> 00:04:43.483  
因爲保持了私密性的完好無缺

00:04:45.686 --> 00:04:51.391 
現在適應性設計對於任何
iOS app開發都很重要

00:04:51.859 --> 00:04:54.528 
這對於iMessage Apps
甚至更加重要

00:04:54.595 --> 00:04:57.030 
那是因爲信息運行在

00:04:57.097 --> 00:05:01.935 
所有種類尺寸形狀不一的設備
和適應性

00:05:02.002 --> 00:05:04.872 
所以它運行在iPad上
它運行在iPhone上

00:05:04.938 --> 00:05:08.008 
它運行在iPad的
slide over裏 豎直和水平

00:05:08.075 --> 00:05:10.711 
iMessage Apps也需要它

00:05:11.078 --> 00:05:13.547 
對於iMessage Apps
有額外考慮因素

00:05:13.614 --> 00:05:16.149 
就是當它們運行在
Compact Mode

00:05:16.216 --> 00:05:18.018 
底部鍵盤

00:05:18.085 --> 00:05:21.889 
並且你能在它們間滑動切換
或者你能調用相同的應用

00:05:21.955 --> 00:05:23.924 
並將其擴展到全尺寸

00:05:23.991 --> 00:05:26.326 
有時應用會完成這個操作
有時用戶完成該操作

00:05:26.393 --> 00:05:30.063 
適應性設計對於這個體驗也很重要

00:05:31.365 --> 00:05:34.701 
所有你所需開發iMessages
App的東西都可用了

00:05:34.768 --> 00:05:36.370 
因此你現在就能開始了

00:05:36.637 --> 00:05:39.439  
SDK有我談論的所有東西

00:05:39.506 --> 00:05:41.742  
所有來自messages
extension point的東西

00:05:42.309 --> 00:05:46.246  
並且模擬器甚至有一個新的
特殊版本的信息

00:05:46.313 --> 00:05:47.514  
專門給開發者的

00:05:47.581 --> 00:05:50.918  
來讓你看到對話的雙方

00:05:50.984 --> 00:05:52.619  
並且試驗你的
iMessage Apps

00:05:52.686 --> 00:05:54.588  
來看它們是如何發送和接收的

00:05:55.389 --> 00:06:01.361  
現在Adele Peterson將向你展示如何
將這些在iOS X中集合起來

00:06:07.768 --> 00:06:08.602 
謝謝 Darin

00:06:09.369 --> 00:06:13.440 
正如你今早所見 我們在迪斯尼的朋友
已經做了一些很棒的便籤

00:06:13.507 --> 00:06:14.608 
我將向你展示他們是如何做到的

00:06:14.675 --> 00:06:16.977 
在Xcode中組合起一個便籤應用

00:06:18.378 --> 00:06:21.949 
現在 這僅將花一分鐘
因此即使我現在開始一個新的項目

00:06:22.015 --> 00:06:23.283 
其實我幾乎都要完成了

00:06:23.550 --> 00:06:26.753 
通過選擇便籤包應用模板

00:06:27.020 --> 00:06:29.790 
我會給它一個好的名字像是
《星球大戰》

00:06:31.158 --> 00:06:35.128 
保存它 且選擇便籤資源類別

00:06:35.662 --> 00:06:38.165 
現在 我想要便籤有一個好的圖標

00:06:38.232 --> 00:06:40.367 
當我在信息應用抽屜看他們時

00:06:40.434 --> 00:06:43.370 
我將從拖拽進我的圖標開始

00:06:44.071 --> 00:06:47.441 
現在我可以選擇我的便籤包
並把便籤拽入

00:06:49.042 --> 00:06:50.410 
好的 讓我們試一下

00:06:51.478 --> 00:06:53.380 
信息現在模擬器中

00:06:53.447 --> 00:06:56.550 
對於你在iMessage Apps
中試用你的便籤很容易

00:06:59.453 --> 00:07:05.092 
好的 讓我們運行便籤包
我喜歡這個8-bit的機器人

00:07:05.325 --> 00:07:07.060 
所以我可以試下發送一個

00:07:08.195 --> 00:07:10.464 
並且我甚至可以試驗剝離

00:07:10.531 --> 00:07:12.733 
並且拖拽一個便籤到另一個信息

00:07:14.134 --> 00:07:17.371 
看起來不錯 如此輕鬆就做出一個
便籤應用

00:07:25.379 --> 00:07:27.848 
現在看看iMessage Apps

00:07:28.515 --> 00:07:30.184 
我這有個冰淇淋應用

00:07:30.551 --> 00:07:32.786 
我女兒很喜歡這類的應用

00:07:32.853 --> 00:07:36.223 
可以讓她設計和創造事物
現在我要做iMessage App

00:07:36.290 --> 00:07:38.992 
爲她和她的朋友們製作冰淇淋便籤

00:07:39.359 --> 00:07:43.397 
在Compact View中 你有
已經完成的冰淇淋便籤

00:07:43.864 --> 00:07:48.068 
並且當我點擊加號 應用擴展開
並顯示冰淇淋創建UI

00:07:48.669 --> 00:07:51.271 
我將從選擇一個筒身開始

00:07:52.639 --> 00:07:54.908 
我將會選擇它併發送

00:07:55.576 --> 00:07:57.110 
現在模擬器顯示

00:07:57.177 --> 00:07:59.980 
會話的發送方和接收方

00:08:00.314 --> 00:08:02.916 
所以你甚至不需要使用兩臺iOS設備

00:08:02.983 --> 00:08:04.351 
來測試你的iMessage App

00:08:04.751 --> 00:08:09.156 
在這個視圖中 我實際是John Appleseed
並且我將會把筒身發送給Kate Bell

00:08:09.223 --> 00:08:11.391 
讓我們從會話的另一方來看一下

00:08:12.526 --> 00:08:14.428 
在這裏Kate已經收到了筒身

00:08:14.628 --> 00:08:16.897 
你可以點擊此信息 啓動app

00:08:17.397 --> 00:08:19.900 
添加一些冰淇淋球
並將其發回給John

00:08:21.168 --> 00:08:23.403 
然後在會話的另外一邊

00:08:24.204 --> 00:08:25.405 
你接收到這個

00:08:25.472 --> 00:08:27.774 
你點擊此信息 加上冰淇淋頂

00:08:29.343 --> 00:08:31.078 
並將其發回給Kate

00:08:32.246 --> 00:08:33.947 
現在 就如看起來的一樣美味

00:08:34.014 --> 00:08:36.049 
我不想要我的整個會話

00:08:36.116 --> 00:08:38.751 
被這些半成品冰淇淋甜筒所佔據

00:08:38.852 --> 00:08:42.722 
其實有個更爲簡潔的方法來創建這個
協同性的iMessage App

00:08:43.323 --> 00:08:46.093 
如果我爲每一個信息
使用相同的MS會話

00:08:46.393 --> 00:08:49.096 
那麼早前創建冰淇淋的步驟將被取代

00:08:49.162 --> 00:08:50.764 
通過緊湊簡潔的描述

00:08:50.831 --> 00:08:54.101 
並且你將只會看到後者
也就是最新的冰淇淋信息

00:08:54.301 --> 00:08:57.471 
我將在Xcode裏做出變化並向你
展示它看起來什麼樣

00:08:58.338 --> 00:09:03.076 
讓我切換到冰淇淋項目
讓我們看看

00:09:04.912 --> 00:09:08.482 
這裏是我的部分代碼
創建了MS message對象

00:09:08.549 --> 00:09:10.517 
我將會拖拽進

00:09:11.285 --> 00:09:12.986 
我將會拖拽進此代碼

00:09:14.354 --> 00:09:17.925 
這段代碼是看會話中有沒有選定的信息

00:09:17.991 --> 00:09:19.493 
那是你點擊該信息時所得到的

00:09:19.560 --> 00:09:21.361 
並且它全屏啓動應用

00:09:21.628 --> 00:09:23.163 
因此如果有一個選定的信息

00:09:23.230 --> 00:09:25.566 
我們會使用該信息所關聯的會話

00:09:25.632 --> 00:09:28.135 
我們會傳入一個新的MS會話

00:09:28.535 --> 00:09:29.903 
讓我們試一下

00:09:33.740 --> 00:09:38.212 
好的 現在我們再次啓動這個應用

00:09:38.412 --> 00:09:43.984 
我們點擊加號按鈕 選擇一個筒身
將它發送給Kate

00:09:45.819 --> 00:09:50.791 
加上一些冰淇淋頂 發回給John

00:09:52.926 --> 00:09:57.030 
然後將它完成 併發回給Kate

00:09:57.197 --> 00:09:59.299 
所以現在你能看到那些描述

00:09:59.366 --> 00:10:01.635 
描述此過程先前的步驟

00:10:01.702 --> 00:10:03.604 
並且你不再有半成品的冰淇淋了

00:10:03.704 --> 00:10:05.639 
在完成的產品的上面

00:10:06.006 --> 00:10:09.510 
這就是你能利用iMessage
Apps所能做的一些小嚐試

00:10:09.810 --> 00:10:12.746 
接下來 Robby Walker
會跟你們談談Siri

00:10:17.651 --> 00:10:18.519 
謝謝你 Adele

00:10:20.320 --> 00:10:21.288 
五年前

00:10:21.822 --> 00:10:25.893 
我們發佈了Siri
iPhone的智能助手

00:10:26.693 --> 00:10:30.731 
從那時起 Siri已經和人們交談
幾千億次了

00:10:31.198 --> 00:10:35.135  
如今 Siri在五類設備上都可用

00:10:35.636 --> 00:10:37.871  
並且支持36種本地化語言

00:10:38.839 --> 00:10:42.509 
Siri也有很多新的特性和改進的
核心體驗

00:10:43.010 --> 00:10:46.847 
一個很酷的例子 在iPhone 6s
和iPhone 6s Plus上

00:10:46.914 --> 00:10:49.983 
你可以立即開始和Siri說話
當你按Home鍵的時候

00:10:50.050 --> 00:10:52.219 
以幾乎零毫秒的延遲

00:10:52.286 --> 00:10:55.656 
多虧了我們硬件和軟件團隊之間
令人驚奇的合作

00:10:55.923 --> 00:10:58.025 
但是當然 直到今天

00:10:58.091 --> 00:11:01.261 
有些很重要的東西一直缺失
那就是應用

00:11:01.328 --> 00:11:05.432  
所以我們非常興奮地在
iOS上啓用初版的SiriKit

00:11:13.307 --> 00:11:16.343  
我們相信對於人們的最佳體驗就是
使用他們喜歡的應用

00:11:16.410 --> 00:11:17.978  
你們所有人已經創建的應用

00:11:18.178 --> 00:11:19.179  
有着SiriKit

00:11:19.246 --> 00:11:21.481  
人們現在將能夠同這些應用進行交互

00:11:21.548 --> 00:11:23.250  
通過一個嶄新的 談話式的方式

00:11:23.784 --> 00:11:26.687  
我會談談如何讓你的應用
與SiriKit一起工作

00:11:26.753 --> 00:11:29.156  
來提供一個很棒的 談話式的體驗

00:11:31.225 --> 00:11:33.827 
Siri所做的第一件事是
理解用戶說了什麼

00:11:33.894 --> 00:11:36.129 
採集音頻並將它轉換成文本

00:11:37.064 --> 00:11:38.932 
然後 Siri理解用戶是什麼意思

00:11:38.999 --> 00:11:42.135 
採集文本並將它轉換成
我們稱之爲intent的東西

00:11:43.403 --> 00:11:46.406 
依據intent
Siri接下來採取行動

00:11:47.040 --> 00:11:49.476 
並且提供反饋 同時通過視覺和語音

00:11:50.444 --> 00:11:52.679 
你的應用將提供三樣東西

00:11:52.880 --> 00:11:55.649 
第一個是幫助Siri進行理解的詞彙

00:11:55.716 --> 00:11:58.385 
第二個是應用邏輯
你的核心功能

00:11:58.452 --> 00:12:00.854 
並且當然了 一個很棒的用戶界面

00:12:01.588 --> 00:12:04.892  
現在 我們設計了SiriKit
以便Siri可以處理對話

00:12:04.958 --> 00:12:07.060  
並且你的應用處理功能

00:12:07.261 --> 00:12:10.864  
這麼做最棒的是它意味着採用
SiriKit會難以置信的容易

00:12:10.931 --> 00:12:14.902  
並且你的用戶們可以期待一個連續的
高質量的體驗 它非常自然

00:12:14.968 --> 00:12:17.604  
感覺像是一個談話而不是一個命令行

00:12:18.238 --> 00:12:19.373  
讓我們深入一點

00:12:20.207 --> 00:12:22.676  
你的應用的一個角色是提供詞彙

00:12:22.743 --> 00:12:25.546  
有兩種 第一種是應用的詞彙

00:12:25.712 --> 00:12:28.615  
這是面向你應用的任何用戶
都應該知道的術語

00:12:28.682 --> 00:12:30.350  
像是UberX或Pinboard

00:12:30.751 --> 00:12:32.819  
另一種是用戶詞彙

00:12:33.153 --> 00:12:37.391  
這些術語對於你應用的個體用戶來說
更詳盡和重要

00:12:37.457 --> 00:12:40.160  
像是他們的聯絡人姓名
或是照片相冊的名字

00:12:41.428 --> 00:12:44.198  
你的應用的主要角色是提供應用邏輯

00:12:44.264 --> 00:12:46.834  
它在三個重要時刻伴隨
extension而來

00:12:47.267 --> 00:12:50.571 
第一個是幫助Siri理解
用戶意圖的參數

00:12:50.704 --> 00:12:53.707 
第二個是幫助Siri展示給用戶
將會發生什麼

00:12:53.774 --> 00:12:55.342 
如果當他們確認的時候

00:12:55.409 --> 00:12:58.545 
第三個 當然了 就是掌控此意圖

00:12:58.612 --> 00:13:00.814  
來完成用戶想完成的

00:13:01.815 --> 00:13:04.985  
並且在此會話中
Siri展現圖像給用戶

00:13:05.152 --> 00:13:08.021  
你可以選擇性提供第二個
extension來配置這些

00:13:08.088 --> 00:13:09.957  
以便在使用Siri時 你的應用

00:13:10.023 --> 00:13:12.593  
仍然像是在其他地方用你的應用一樣

00:13:13.527 --> 00:13:16.864 
讓我們看一個 叫Hologram的
信息應用集成

00:13:17.130 --> 00:13:19.800 
Hologram是在遙遠的銀河系
發送信息類軟件中

00:13:19.867 --> 00:13:21.535 
排名第一的應用

00:13:23.170 --> 00:13:24.872 
假設有人跟Siri說

00:13:25.305 --> 00:13:28.141 
“發一個hologram給
Obi-Wan 你是我唯一的希望”

00:13:29.510 --> 00:13:32.913 
現在 Siri的工作是提取音頻並
將其轉化爲文本

00:13:33.247 --> 00:13:34.982 
但Siri需要你應用的幫助

00:13:35.749 --> 00:13:38.852 
Siri自己不知道Obi-wan
是一個重要的用戶

00:13:38.919 --> 00:13:40.821 
還是你用戶生活中一個重要的人

00:13:40.888 --> 00:13:43.290 
所以通過提供這部分的詞彙給Siri

00:13:43.357 --> 00:13:45.859 
你可以確保Siri理解
你的用戶說了什麼

00:13:47.327 --> 00:13:50.297 
接下來 Siri會進行理解
用戶正試圖做什麼

00:13:50.364 --> 00:13:52.633 
在這個案例中 是發送一個重要的信息

00:13:53.367 --> 00:13:55.502 
並且Siri也將試圖理解參數

00:13:55.569 --> 00:13:57.471 
像是收件人和內容

00:13:58.872 --> 00:14:01.675 
Siri將所有這些信息打包成一個
結構化的對象

00:14:01.742 --> 00:14:03.577 
一個很好 簡潔的對象

00:14:03.911 --> 00:14:06.079 
你的應用不需要擔心數不勝數的方式

00:14:06.146 --> 00:14:08.448 
某人可能會表達同樣的觀點給Siri

00:14:08.515 --> 00:14:11.318 
它是不是不同的短語
或者多步驟的交互

00:14:11.385 --> 00:14:13.387 
那些都被搞定了
所有你需要操心的就是

00:14:13.453 --> 00:14:14.922 
這個相當簡單的對象

00:14:16.356 --> 00:14:18.525 
然後SiriKit會把這個對象
傳遞給

00:14:18.592 --> 00:14:20.327 
extension
來幫助參數的解析

00:14:20.394 --> 00:14:23.530 
例如 可能你的app知道用戶說
“Obi-Wan”

00:14:23.597 --> 00:14:25.899 
但其通常指
Old Ben Kenobi

00:14:26.066 --> 00:14:28.202 
你可以教SiriKit來更新
此intent

00:14:29.236 --> 00:14:30.470 
然後就是重要的時刻了

00:14:30.537 --> 00:14:32.840 
現在要實際處理用戶的intent

00:14:32.906 --> 00:14:36.310 
SiriKit再次將這個對象傳給
extension來進行處理

00:14:36.376 --> 00:14:38.045 
在這個例子中 你會發送信息

00:14:38.111 --> 00:14:39.146 
你會進入一個逃生艙

00:14:39.213 --> 00:14:41.114 
翻滾過沙丘 對付一些Jawa

00:14:41.181 --> 00:14:43.250 
你會爲你的用戶們完成這些

00:14:44.685 --> 00:14:46.453 
與此同時 Siri會提供

00:14:46.520 --> 00:14:49.456 
一個默認的用戶界面給這個交互

00:14:49.523 --> 00:14:53.126 
如果你想 你也可以把你的應用體驗
帶進Siri

00:14:53.193 --> 00:14:55.429 
以便讓你的用戶們感覺更熟悉

00:14:56.563 --> 00:14:57.397 
就是這樣

00:14:57.497 --> 00:14:59.600 
這就是你的應用必須得做的三件事

00:14:59.666 --> 00:15:01.835 
因爲SiriKit會處理會話

00:15:02.769 --> 00:15:04.972 
處理這個會話實際上意味着很多

00:15:05.105 --> 00:15:06.240 
Siri行爲不一

00:15:06.306 --> 00:15:09.176 
取決於某人是如何
開始和Siri談話的

00:15:09.276 --> 00:15:12.279 
所以如果你拿着你的電話
按Home鍵

00:15:12.346 --> 00:15:13.514 
看着你的屏幕

00:15:13.580 --> 00:15:16.984 
Siri將會提供更多視覺反饋
減少大聲說出來的東西

00:15:17.084 --> 00:15:20.120 
但若你說“Hey Siri”
或你在車裏用CarPlay

00:15:20.187 --> 00:15:22.022 
那麼Siri會展現更多東西

00:15:22.089 --> 00:15:24.591 
抱歉 是說更多而展現更少

00:15:26.260 --> 00:15:29.596 
SiriKit由extensions
和NSUserActivity所支持

00:15:29.963 --> 00:15:32.766 
這些相同的技術還支持了正在增加的
OS集成

00:15:32.833 --> 00:15:34.535 
本週你會聽到更多關於它們的消息

00:15:36.136 --> 00:15:39.106 
今年 SiriKit會在六個領域
連接到應用

00:15:39.173 --> 00:15:41.308 
在每個領域中
會有多於一個的intent

00:15:41.375 --> 00:15:43.744 
來提供一個完整的 會話式的體驗

00:15:43.810 --> 00:15:47.014 
例如 在Messaging裏
你可以發送或者搜索信息

00:15:47.080 --> 00:15:50.017 
在支付裏
你可以請求或者發送支付

00:15:51.151 --> 00:15:54.221 
並且SiriKit會對
所有Siri語言可用

00:15:54.454 --> 00:15:55.889 
這可是意義重大

00:15:55.956 --> 00:15:58.825 
當我之前說Siri會處理會話的時候

00:15:58.892 --> 00:16:01.728 
我實際的意思是Siri會處理會話

00:16:01.795 --> 00:16:03.630 
用所有36種本地化語言

00:16:03.697 --> 00:16:06.400 
所以你的應用不需要擔心這些

00:16:15.108 --> 00:16:19.513 
我們非常興奮想看到你們將會創建什麼
其他我們認識的人也是

00:16:19.746 --> 00:16:21.815 
Siri 跟應用問好

00:16:23.717 --> 00:16:25.986 
我很快地跟它們成了朋友

00:16:27.387 --> 00:16:30.824 
籍此有請Chris
Lattnert談下Swift

00:16:40.267 --> 00:16:41.101 
好的

00:16:41.168 --> 00:16:42.002 
謝謝 Robby

00:16:42.769 --> 00:16:44.638 
讓我們看看Swift有什麼新特性

00:16:44.905 --> 00:16:47.241 
很容易忘記我們推出了Swift

00:16:47.441 --> 00:16:50.077 
並在不到兩年前發佈了它

00:16:50.511 --> 00:16:51.678 
在這麼短的時間內

00:16:51.745 --> 00:16:56.283 
你們已建立並提交逾
100,000個應用到Apps

00:16:56.750 --> 00:16:58.919 
包括這些響噹噹的應用

00:16:59.586 --> 00:17:03.090 
現在 Swift在企業中也同樣流行

00:17:03.390 --> 00:17:04.625 
舉個簡單的例子

00:17:04.691 --> 00:17:08.628 
IBM已經開發和部署了
數以百計用Swift寫的應用

00:17:10.030 --> 00:17:10.864 
現在

00:17:15.002 --> 00:17:17.137 
人們喜歡Swift有很多原因

00:17:17.204 --> 00:17:20.473 
其中一個就是
我們不到六個月前把它開源了

00:17:28.482 --> 00:17:29.783 
從那開始 它變成

00:17:29.850 --> 00:17:32.920 
GitHub上下載量第一的語言項目

00:17:33.487 --> 00:17:35.155 
觀看量排名第一的

00:17:35.222 --> 00:17:38.625 
最喜愛排名第一的 並且它保持在前列

00:17:39.193 --> 00:17:41.562 
我想對我而言 比這更棒的是

00:17:41.628 --> 00:17:45.299 
我們有很多的新人蔘與到這個項目

00:17:45.432 --> 00:17:49.436 
我們現在有數以百計的新貢獻者
通過開源參與

00:17:49.503 --> 00:17:51.772 
且我們已處理了
數以千計的投票請求

00:17:51.839 --> 00:17:53.774 
這反響真是很大

00:17:54.875 --> 00:17:57.978 
我們將Swift開源的一個原因是
對於我們很重要的是

00:17:58.045 --> 00:17:59.947 
我們想看到它到處都是

00:18:00.514 --> 00:18:03.617 
例如
我們認爲Swift對於服務器很棒

00:18:03.851 --> 00:18:07.888 
所以我們把它遷移到Linux
社區認可了

00:18:08.655 --> 00:18:10.190 
在很短的時間內

00:18:10.257 --> 00:18:13.894 
他們已經開始將它帶到其他流行的平臺
像是FreeBSD

00:18:14.061 --> 00:18:16.096 
Android 甚至Windows

00:18:23.871 --> 00:18:26.240 
爲了幫助Swift進入所有這些平臺

00:18:26.306 --> 00:18:28.375 
我們啓用了
Swift Package Manager

00:18:28.809 --> 00:18:32.412 
Package Manager是
一個很好的方式來建立 共享和重用

00:18:32.479 --> 00:18:34.147 
跨平臺的package

00:18:34.748 --> 00:18:36.717 
它可以生成一個Xcode項目文件

00:18:36.783 --> 00:18:41.054 
甚至在像是Linux這樣的平臺上
本地化編譯項目

00:18:42.055 --> 00:18:43.390 
另一個關於Swift開源很棒的事

00:18:43.457 --> 00:18:46.226 
是你能參與到語言的設計本身

00:18:46.493 --> 00:18:49.229 
Swift的進化一直是個很棒的體驗

00:18:49.429 --> 00:18:50.931 
有着激烈的興趣

00:18:50.998 --> 00:18:54.434 
在郵件列表上簡直瘋狂的郵件數

00:18:54.501 --> 00:18:55.669 
這太叫人吃驚了

00:18:56.803 --> 00:19:00.140 
現在 我發佈了一個公開的路線圖
包含了每次發佈的更新

00:19:00.607 --> 00:19:04.478 
並且我們徵求意見 討論我們可能走的
不同方向

00:19:04.545 --> 00:19:06.813 
來共同向前推進語言的發展

00:19:07.514 --> 00:19:10.684 
然後我們像一個社區一樣
一起公開討論這些

00:19:10.884 --> 00:19:13.053 
我們將它們變成正式的提案

00:19:13.420 --> 00:19:17.457 
目前爲止 我們已經有了超過
100個提案 來推進Swift發展

00:19:18.258 --> 00:19:19.726 
這僅僅是在六個月內

00:19:20.060 --> 00:19:23.864 
這是個很棒的標誌來說明
Swift發展的多快

00:19:24.498 --> 00:19:27.267 
但是它也說明另一個重要和有趣的點

00:19:27.401 --> 00:19:28.769 
儘管它使用廣泛

00:19:28.836 --> 00:19:31.638 
Swift仍然是個
相對較新的編程語言

00:19:32.139 --> 00:19:33.607 
現在 正如你所想的

00:19:33.907 --> 00:19:39.446 
我們選擇快速發現Swift語言
中的問題並修復它們

00:19:39.646 --> 00:19:42.783 
因爲我們不想永遠被這些問題所困擾

00:19:43.483 --> 00:19:47.154 
我們正在開發Swift
將其作爲下一代很棒的編程語言

00:19:47.221 --> 00:19:50.624 
所以我們想要
它對將到來的十年來說很好用

00:19:51.024 --> 00:19:53.193 
現在的問題是對於有些開發者

00:19:53.260 --> 00:19:55.696 
編程語言發生在深層的變化

00:19:55.762 --> 00:19:56.997 
可能會令你感到擔憂

00:19:57.197 --> 00:20:00.033 
並且隨着Swift來到新的平臺

00:20:00.100 --> 00:20:02.569 
和Swift Playgrounds
帶來的新類型用戶

00:20:02.636 --> 00:20:04.771 
這會變成一個甚至更大的擔憂

00:20:05.839 --> 00:20:08.976 
以此爲背景
讓我們看看Swift 3的新特性

00:20:10.711 --> 00:20:13.447 
我們在12月宣佈了Swift 3

00:20:14.114 --> 00:20:16.917  
作爲推出Swift開源的一部分

00:20:16.984 --> 00:20:19.353  
我們一直在完全開源地開發它

00:20:19.987 --> 00:20:23.357  
Swift 3的第一特性
和第一目標就是

00:20:23.423 --> 00:20:26.326  
克服這些早先成長期的痛處

00:20:26.393 --> 00:20:29.229  
並且將Swift轉變成一個
穩定且成熟的平臺

00:20:29.296 --> 00:20:32.666  
我們可以保持與語言未來版本的兼容性

00:20:34.101 --> 00:20:34.935  
不是嗎

00:20:41.942 --> 00:20:45.012  
因此 我們在關注語言的核心要素

00:20:45.078 --> 00:20:48.348  
並使工具和開發體驗非常棒

00:20:48.649 --> 00:20:51.385  
在Swift裏
你有很多的方式可以看出來這個

00:20:51.785 --> 00:20:56.023 
給你舉個簡單的例子
對於Swift 2的一個常見抱怨是

00:20:56.089 --> 00:21:00.160 
一些Cocoa中的API
在Swift中感覺不是自然的

00:21:00.327 --> 00:21:04.097 
Swift喜歡清晰透明 且致力於
定義模板文件

00:21:04.631 --> 00:21:07.935 
在Swift 3中
Cocoa APIs有精緻的感覺

00:21:08.035 --> 00:21:10.037 
你可以說他們完全Swift化了

00:21:11.171 --> 00:21:14.174 
我們是通過一些不同的初創完成的

00:21:14.441 --> 00:21:20.180 
首先 我們坐下來努力思考什麼
造就一個很棒的Swift API

00:21:20.547 --> 00:21:24.117 
我們把它寫成文檔
並放在Swift.org上

00:21:25.219 --> 00:21:27.321 
然後我們採用那些規則

00:21:27.387 --> 00:21:29.790 
並把它們寫到Swift的重編譯器

00:21:29.857 --> 00:21:33.460 
所以它會自動把這些規則應用到
Objective-C API

00:21:33.527 --> 00:21:35.395 
把它們引入到Swift

00:21:36.230 --> 00:21:38.432 
但是Swift所做的遠不止命名

00:21:38.498 --> 00:21:41.935 
命名是個相當困難的問題 不過
它做的遠不止命名

00:21:42.536 --> 00:21:44.805 
舉個簡單的例子
若你看foundation

00:21:44.872 --> 00:21:47.708 
你會發現全新的Swift
本地化數據類型

00:21:48.809 --> 00:21:52.079 
Date就是一個例子
如果你比較Date和NSDate

00:21:52.145 --> 00:21:54.681 
你就會發現它提供了恰當的值語義

00:21:54.748 --> 00:21:57.150 
它有兩倍快的速度去傳值

00:21:57.551 --> 00:22:01.688 
由於減少了免於MalCon 的通信
擁有40倍快的速度去變化

00:22:09.396 --> 00:22:12.666 
現在 這些例子到處都是
隨着Calendar變爲了Calendar

00:22:12.733 --> 00:22:14.902 
Global Constant變成了
scoped enum

00:22:15.502 --> 00:22:18.438 
Date Components NSDate Components
變成了一個恰當的值類型

00:22:18.505 --> 00:22:20.741 
所有東西都感覺那麼的快速和敏捷

00:22:21.108 --> 00:22:23.944 
如果你不看foundation

00:22:24.378 --> 00:22:27.915 
dispatch是另一個關鍵API
我們一直在用的

00:22:28.448 --> 00:22:31.151 
但是它提供的是低級別 C風格的接口

00:22:31.585 --> 00:22:34.288 
Swift 3中
Dispatch有一個重要的革新

00:22:34.354 --> 00:22:36.223 
有個漂亮的面向對象的API

00:22:44.498 --> 00:22:46.633 
並且它遵從所有最好的命名規範

00:22:46.700 --> 00:22:48.836 
從一個很棒的
Swift API期待的

00:22:49.336 --> 00:22:51.371 
Core Graphics
是另一例子

00:22:51.605 --> 00:22:54.842 
這裏是Swift 3中典型的
core graphics代碼

00:22:54.942 --> 00:22:58.478 
它精緻 漂亮
並且就如你所期待的一樣工作

00:23:04.251 --> 00:23:08.488 
現在Swift 3有很多很棒的特性
你能學足一週

00:23:09.022 --> 00:23:11.124  
Swift 3在Xcode 8中
可用

00:23:11.491 --> 00:23:14.294  
並且Xcode提供了一個
很好的遷移助手

00:23:14.361 --> 00:23:17.798  
來幫助遷移你的代碼
從Swift 2到Swift 3

00:23:18.599 --> 00:23:22.336  
甚至更好的是 Xcode 8
也包含Swift 2.3

00:23:23.437 --> 00:23:25.806  
這意味着能遷移到Swift 3語法

00:23:25.873 --> 00:23:27.341  
當時機對你恰當的時候

00:23:34.014 --> 00:23:35.649  
這就是我今天要講的全部

00:23:35.782 --> 00:23:38.385  
謝謝 我將交回給Andreas
談談下一個大事件

00:23:38.452 --> 00:23:39.319  
iPad上的Swift

00:23:44.925 --> 00:23:45.792 
謝謝你 Chris

00:23:47.861 --> 00:23:52.199  
Swift另一個讓我們興奮的方面是
它如此簡單和易接近

00:23:52.266 --> 00:23:55.369  
它不僅對於開發應用和
服務器部件很棒

00:23:55.435 --> 00:23:58.338  
它作爲第一個編程語言來學習也很棒

00:23:59.406 --> 00:24:02.309  
事實上 我們認爲這超級重要
當我們設計Swift時

00:24:02.376 --> 00:24:04.211  
那也是個我們明確的目標

00:24:05.012 --> 00:24:08.148 
從Swift推出開始 我們介紹了
Xcode Playgrounds

00:24:08.215 --> 00:24:11.518 
一個交互的環境
你可以快速迭代你的代碼

00:24:11.785 --> 00:24:15.322 
而且有經驗的開發者
用我們的Xcode IDE很棒

00:24:15.722 --> 00:24:18.525 
我想要極度擴展我們的關注點
幷包含kits

00:24:18.592 --> 00:24:20.827 
爲初始學習如何編程的人

00:24:21.228 --> 00:24:24.798  
所以今天我們要宣佈Swift Playgrounds
iPad的一個新app

00:24:24.865 --> 00:24:27.334  
你已經看了
今早keynote上的一個展示

00:24:27.868 --> 00:24:31.338 
它與Xcode技術匹配
但是它從底向上

00:24:31.405 --> 00:24:34.007 
爲了學習和教授如何用Swift編程

00:24:34.174 --> 00:24:36.977 
它對於年輕觀衆既好玩又有參與感

00:24:37.144 --> 00:24:41.281 
並且它是個有趣的方式來嘗試新的東西
對於有經驗的開發者來說

00:24:42.449 --> 00:24:45.752 
它被設計成
利用iPad的觸控界面工作

00:24:46.854 --> 00:24:48.422 
我們創建了一個
新的Smart Keyboard

00:24:48.488 --> 00:24:50.624 
爲你的代碼帶來快速的鍵入提示

00:24:50.691 --> 00:24:52.793 
和Xcode中的代碼自動完成類似

00:24:53.093 --> 00:24:54.862 
你經常能寫完整段代碼

00:24:54.928 --> 00:24:57.030 
而根本不用調出完全的鍵盤

00:24:58.365 --> 00:25:00.901 
當你編輯行中的值 比如數字和顏色時

00:25:00.968 --> 00:25:04.638 
我們彈出這些快速編輯控制
允許你輕鬆選擇一個值

00:25:04.705 --> 00:25:07.174 
再次 不要調出完整的鍵盤

00:25:08.675 --> 00:25:10.444 
你可以在Playground裏
快速修改代碼

00:25:10.511 --> 00:25:14.214 
簡單地在屏幕上用手指
拖拽這些結構化的元素

00:25:15.415 --> 00:25:18.185 
並且如你所期待的
有提前寫好的代碼片段的庫

00:25:18.252 --> 00:25:20.487 
你可以簡單點擊就可以插入到你的代碼

00:25:20.554 --> 00:25:22.656 
或者再次用手指拖拽它們

00:25:23.790 --> 00:25:26.627 
並且當有時候你調出完整鍵盤寫代碼時

00:25:26.693 --> 00:25:29.096 
我們展現給你一個專用的編程用鍵盤

00:25:29.162 --> 00:25:32.666 
對於訪問許多特殊符號和數字超級容易

00:25:32.733 --> 00:25:37.137 
你用來寫Swift代碼的
就用一個手指滑動即可

00:25:37.371 --> 00:25:39.506 
不需要切換鍵盤佈局

00:25:41.208 --> 00:25:44.311 
應用也帶有很棒的課程內容

00:25:45.012 --> 00:25:47.080 
我們正在編寫一個完整系列的課程

00:25:47.147 --> 00:25:49.783 
會一步一步向你介紹Swift編程

00:25:49.850 --> 00:25:51.885 
並且我們正計劃快速擴展這一內容

00:25:51.952 --> 00:25:53.520 
對於明年的課程

00:25:54.354 --> 00:25:57.224 
但你可以提供給學習者一系列的挑戰

00:25:57.291 --> 00:25:58.859 
他們將頻繁更新的

00:25:58.926 --> 00:26:02.596 
所以他們會保持回到這個應用
並保持參與學習過程

00:26:02.663 --> 00:26:04.665 
對於這些有深度的主題

00:26:05.933 --> 00:26:09.570 
但是你不被限於跟從這個入門課程內容

00:26:09.636 --> 00:26:13.373 
你也有權利和靈活度
來探索你自己的編程

00:26:14.341 --> 00:26:16.009 
利用一系列的簡單模板

00:26:16.076 --> 00:26:18.745 
我們創建了一個挺容易組成程序的

00:26:18.812 --> 00:26:20.514 
只帶有文本的輸入和輸出

00:26:20.814 --> 00:26:24.351 
並且另一個允許你
探索和視覺化圖像概念

00:26:24.418 --> 00:26:25.485 
基於形狀

00:26:26.820 --> 00:26:30.357 
除此外
由於你在指尖擁有整個iOS SDK

00:26:30.657 --> 00:26:32.893 
自由創建任何
你喜歡的Playground

00:26:32.960 --> 00:26:35.229 
並且使用這個應用來教授許多主題

00:26:35.662 --> 00:26:38.131 
你甚至能控制機器人
像是屏幕上的這個

00:26:38.198 --> 00:26:40.434 
和其他的配件
從你的Playground

00:26:40.601 --> 00:26:42.069 
所以它將帶來很多歡樂

00:26:42.135 --> 00:26:44.738 
爲了向你更多展示你能如何操控應用

00:26:44.805 --> 00:26:47.174 
我會請Ken Orr來
給我們另一個演示

00:26:54.615 --> 00:26:56.183 
好的 謝謝 Andreas

00:26:57.050 --> 00:27:01.588 
Swift Playgrounds
令通過編程進行創新很容易

00:27:01.955 --> 00:27:04.491 
讓我們看下我早前
創造的Playground

00:27:04.558 --> 00:27:06.193 
我會給你們展示我是什麼意思

00:27:08.662 --> 00:27:11.398 
現在我從選擇一個形狀模板開始

00:27:11.465 --> 00:27:15.269 
你們能看到開始我的圖片在右邊

00:27:15.669 --> 00:27:20.107 
就是圍繞中心旋轉的
一些不同尺寸顏色的塊

00:27:20.707 --> 00:27:26.413 
現在
所有右邊的東西是我左邊代碼的產物

00:27:26.980 --> 00:27:30.617 
我代碼的中心是這個for循環

00:27:30.918 --> 00:27:33.587 
在這裏我創建了每個塊

00:27:34.188 --> 00:27:37.724 
然後在頂部 我有個變量定義了

00:27:37.791 --> 00:27:39.860 
我應該創建多少個塊

00:27:40.294 --> 00:27:43.797 
好的
現在被設成了15個 但是我想要

00:27:43.864 --> 00:27:47.367 
讓整個右手邊被顏色填充

00:27:47.701 --> 00:27:50.704 
爲了實現這個
讓我試試把這個調成80

00:27:51.605 --> 00:27:52.806 
然後我點擊運行

00:27:54.274 --> 00:27:59.379 
好的 我也許不想用褐紅色
想用個好看的藍色

00:28:01.248 --> 00:28:02.082 
這看起來不錯

00:28:02.583 --> 00:28:05.285 
我真的很喜歡這裏的圖案

00:28:05.352 --> 00:28:08.822 
螺旋進入畫布中心的方塊

00:28:08.889 --> 00:28:10.290 
這看起來真的很酷

00:28:10.891 --> 00:28:12.960 
我打賭我能把這做得更加明顯

00:28:13.026 --> 00:28:17.364 
如果我隨着時間的推移
更戲劇性地改變那些方塊的大小

00:28:17.631 --> 00:28:22.569 
所以在for循環這裏
我計算大小

00:28:22.636 --> 00:28:26.507 
我要去挖掘這兩個不同
的表達式之間加分

00:28:27.074 --> 00:28:30.544 
而不是僅僅將它們放在一起
爲什麼不去我嘗試乘法

00:28:31.578 --> 00:28:34.581 
運行 這看起來不錯

00:28:35.082 --> 00:28:38.218 
所以 你就可以開始獲得一個點子

00:28:38.285 --> 00:28:42.823 
使用touch代碼探索和實踐
是多麼容易

00:28:43.857 --> 00:28:47.928 
所以接下來
我想將生活中的點滴帶入圖片

00:28:48.195 --> 00:28:49.930 
我將用一些動畫

00:28:51.164 --> 00:28:55.602 
現在 爲了做到這一點 我將使用
內置在了形狀模板的API

00:28:56.470 --> 00:29:00.674 
我想我要的是
這個方塊彈出來

00:29:01.175 --> 00:29:03.844 
並且停靠在流的中間

00:29:04.711 --> 00:29:08.482 
所以我要點擊這裏
在我創建每個方塊以後

00:29:08.749 --> 00:29:11.785 
然後進入快捷工具條
接下來滾動

00:29:11.985 --> 00:29:14.054 
我要去點擊動畫功能

00:29:14.821 --> 00:29:18.258 
所以我有一個三秒長的動畫

00:29:18.325 --> 00:29:22.896 
我會讓它在開始前僅等待一秒

00:29:23.230 --> 00:29:26.767 
然後該塊有內部的一切東西

00:29:26.834 --> 00:29:29.169 
它將代替我自動演示動畫效果

00:29:29.803 --> 00:29:32.206 
所以我會拉動旋轉

00:29:32.472 --> 00:29:36.543 
然後 我也想方塊大小動畫

00:29:36.677 --> 00:29:41.248 
所以我想我會在寬度和高度均爲零開始

00:29:41.481 --> 00:29:45.419 
然後回到動畫塊
我將它設置爲之前的參數

00:29:46.687 --> 00:29:51.792 
所以我說
square.size=size

00:29:52.359 --> 00:29:54.828 
然後 我已經計算上面的尺寸

00:29:54.895 --> 00:29:59.099 
我就用同一個變量 點擊運行

00:30:01.368 --> 00:30:04.037 
很酷 它開始生動了

00:30:05.672 --> 00:30:06.507 
謝謝

00:30:10.811 --> 00:30:13.280 
我還想在此做一件事

00:30:13.514 --> 00:30:16.550 
對於觸摸操控 我想補充一點

00:30:16.783 --> 00:30:20.654 
要做到這一點 我將使用一些
內置到了圖形模板的API

00:30:21.522 --> 00:30:22.756 
底部這裏

00:30:22.823 --> 00:30:26.994 
我其實已經在畫布上添加了
一個拖動處理程序

00:30:27.361 --> 00:30:31.899 
塊正等待我去填補它
而且我也在此寫一個函數

00:30:32.032 --> 00:30:35.169 
它將使每個方塊圍繞畫布中心

00:30:35.369 --> 00:30:38.772 
所以我只需要在此塊調用該函數

00:30:39.139 --> 00:30:44.645 
因此 回到快捷方式欄
我說squares.rotateforTouches

00:30:45.546 --> 00:30:46.980 
然後我就點擊運行

00:30:48.448 --> 00:30:51.518 
而現在我要用手指點擊並按住右上角

00:30:51.585 --> 00:30:54.188 
並往下拉

00:30:54.721 --> 00:30:57.658 
就這樣 我已經添加了觸摸操控

00:30:59.259 --> 00:31:00.093 
謝謝

00:31:04.198 --> 00:31:07.467 
順便說一句 到目前爲止
你可能已注意到

00:31:07.534 --> 00:31:10.938 
對於任何這些 其實我還沒用到全鍵盤

00:31:11.004 --> 00:31:12.506 
我認爲這很酷

00:31:14.107 --> 00:31:17.244 
今天下午我還有另一個東西向大家展示

00:31:17.477 --> 00:31:22.182 
我是做UI的傢伙 我喜歡
建立自定義的控制和俏皮的UI

00:31:22.549 --> 00:31:26.386 
我一直在四處擺弄
這個自定義顏色選擇器

00:31:26.453 --> 00:31:27.688 
我很想向大家展示

00:31:28.889 --> 00:31:32.993 
當你點擊顏色選擇
會彈出一個顏色選擇器

00:31:33.060 --> 00:31:35.562 
從你的手指下面
你可以拖動

00:31:35.629 --> 00:31:37.097 
並選擇您想要的顏色

00:31:37.798 --> 00:31:41.935 
現在 所有將構建的代碼在左邊

00:31:42.436 --> 00:31:45.472 
因此 讓我的代碼變大
我們可以快速看下

00:31:46.173 --> 00:31:48.575 
現在 你首先會發現 最頂端

00:31:48.976 --> 00:31:54.248 
我導入的UIKit
我已能獲取iOS的SDK

00:31:54.314 --> 00:31:58.352 
在這個Playground和
我創建的任何Playgrounds

00:31:59.186 --> 00:32:01.522 
然後一路下行
在底部

00:32:01.955 --> 00:32:05.459 
我告訴Swift Playground
獲得我的視圖

00:32:05.526 --> 00:32:07.895 
並顯示在右側

00:32:09.763 --> 00:32:13.267 
我想添加最後一樣東西至
我的Playground

00:32:13.333 --> 00:32:16.637 
添加我可以設置顏色的東西

00:32:16.703 --> 00:32:18.805 
這樣我可以嘗試一下我的顏色選擇器

00:32:19.740 --> 00:32:23.010 
我認爲要做到這一點
我就添加了一個簡單的UI圖片瀏覽

00:32:23.143 --> 00:32:26.813 
讓我調出編碼鍵盤 我要說

00:32:26.980 --> 00:32:30.817 
“讓圖像視圖

00:32:31.485 --> 00:32:34.955 
等於UI圖像視圖”

00:32:35.522 --> 00:32:38.258 
我會使用採用圖像初始化

00:32:38.725 --> 00:32:42.429 
然後我就輕按在快捷欄的
第三項 即小圖片

00:32:43.197 --> 00:32:44.565 
這是文字的圖像

00:32:44.698 --> 00:32:48.035 
所以 當我在點擊源代碼 就可以選擇

00:32:48.101 --> 00:32:50.838 
從已添加資源
到這個Playground

00:32:56.343 --> 00:32:57.978 
所以我提前加入了
Swift的logo（小鳥）元素

00:32:58.045 --> 00:32:59.379 
所以我會選擇那個

00:33:01.181 --> 00:33:04.751 
我需在此做的最後一件事
我需要將你的

00:33:04.818 --> 00:33:08.555 
UI圖像試圖放進視圖層次
所以我說

00:33:08.622 --> 00:33:15.629 
viewController.view.addSubview

00:33:16.897 --> 00:33:18.398 
折騰在圖像視圖

00:33:19.066 --> 00:33:22.369 
我們將運行 然後我將使視圖全屏顯示

00:33:23.103 --> 00:33:25.372 
而且知道我們可以看到我的圖像

00:33:26.240 --> 00:33:27.508 
我已經有了顏色選擇器

00:33:28.041 --> 00:33:30.777 
其實這一小小的其他功能讓我有些困惑

00:33:30.978 --> 00:33:33.847 
我希望它有一點點樂趣
設置鳥的顏色

00:33:34.181 --> 00:33:36.283 
想通哎 爲什麼不那樣做

00:33:43.257 --> 00:33:46.460 
這就是Swift Playgrounds
謝謝Andreas

00:33:51.832 --> 00:33:52.666 
謝謝你 Ken

00:33:57.504 --> 00:34:01.275 
所以你看到的 不管你創建
什麼樣的Playground

00:34:01.742 --> 00:34:05.913 
你總是通過利用
實際的iOS SDK做到這一點

00:34:05.979 --> 00:34:09.248 
包括讓你訪問
該設備的硬件API

00:34:09.516 --> 00:34:11.217 
並通過編寫真正Swift代碼

00:34:11.284 --> 00:34:14.188 
這也許是與其他學習應用
最大的區別

00:34:14.254 --> 00:34:17.491 
經常使用用戶數量過快增長的有限方法

00:34:17.558 --> 00:34:21.094 
在Swift Playgrounds 你將學習
如何編寫真正的SWIFT CODE

00:34:21.460 --> 00:34:22.462 
順便提醒一下

00:34:22.529 --> 00:34:25.498 
Playgrounds應用本身
也是用Swift寫的

00:34:32.406 --> 00:34:34.908 
Swift Playgrounds
爲您提供了許多方法來試驗

00:34:34.975 --> 00:34:37.043 
教授並學習如何編寫代碼

00:34:37.777 --> 00:34:40.581 
而我們儘可能讓更多用戶

00:34:40.647 --> 00:34:43.750 
尤其是孩子 對於利用這一新的機遇
充滿激情

00:34:43.817 --> 00:34:45.786 
而事實上
我們希望你能幫助我們

00:34:46.219 --> 00:34:50.290 
通過創建其他內容
而創建整個學習平臺

00:34:50.791 --> 00:34:51.859 
現在開始

00:34:51.925 --> 00:34:54.761 
我們正在製作Playground
文件格式的文檔

00:34:54.828 --> 00:34:56.463 
今天在我們的網站
已經可以獲得

00:34:56.964 --> 00:35:00.100 
而在今年晚些時候
我們計劃發佈學習資料

00:35:00.167 --> 00:35:02.236 
包括豐富的3D拼圖

00:35:02.302 --> 00:35:06.340 
按照許可證 可以讓您複製
和重複使用我們的材料

00:35:06.406 --> 00:35:07.808 
結合自己的想法

00:35:07.875 --> 00:35:10.577 
並幫助我們覆蓋
世界各地的許多觀衆

00:35:13.013 --> 00:35:14.982  
一旦用戶創造了Playground

00:35:15.148 --> 00:35:17.584  
有多種方式分享其成果

00:35:18.018 --> 00:35:20.020  
Playgrounds僅僅是文件
所以你可以分享

00:35:20.087 --> 00:35:22.089  
用你熟悉的常用的方式

00:35:22.155 --> 00:35:23.490 
而我們並沒有就此止步

00:35:23.857 --> 00:35:26.493 
對於你的程序輸出 拍照變得更容易

00:35:26.560 --> 00:35:30.264 
甚至納入重播工具包
讓您可以錄製編碼會話

00:35:30.330 --> 00:35:32.232 
並作爲視頻發佈你的成果

00:35:33.333 --> 00:35:34.168  
並且對於

00:35:40.474 --> 00:35:41.642  
對於更高層次的學習者

00:35:41.708 --> 00:35:43.777  
iPad上的Swift Playgrounds

00:35:43.844 --> 00:35:46.480  
和Mac上的Xcode相得益彰

00:35:46.747 --> 00:35:49.449  
你可將Playgrounds來回
在兩種環境間切換

00:35:49.516 --> 00:35:53.353  
最終過渡到在Xcode IDE
開發完整的應用

00:35:54.121 --> 00:35:56.323  
這很好地將我們帶入下一個話題

00:35:59.693 --> 00:36:02.796 
更深入探討Xcode
有請Matthew Furlich

00:36:08.836 --> 00:36:09.803 
謝謝Andreas

00:36:10.304 --> 00:36:13.240 
Xcode 8 是一個重大發布
可以談的東西很多

00:36:13.307 --> 00:36:16.910  
讓我們直入主題
從源碼編輯器開始

00:36:17.511 --> 00:36:21.148  
此次發佈 我們將重點放在
添加來自大家

00:36:21.215 --> 00:36:22.049  
最被要求的功能

00:36:23.250 --> 00:36:25.719 
我們開始添加活動行高亮

00:36:25.953 --> 00:36:27.988 
你可編輯該顏色

00:36:28.055 --> 00:36:30.023 
它會與任何編輯器主題完美融洽

00:36:34.328 --> 00:36:35.162 
變得更棒

00:36:36.930 --> 00:36:39.233 
我們也做了Swift的色彩文字支持

00:36:39.333 --> 00:36:42.402 
所以你現在可以在你的源代碼中
查看並定義顏色

00:36:48.475 --> 00:36:49.409 
讓我們進入第三點

00:36:49.476 --> 00:36:53.514 
我們還添加了Swift圖像文字
所以你現可在源代碼查看圖像

00:36:55.716 --> 00:36:57.718 
作爲代碼完成的結果

00:36:59.052 --> 00:37:01.121 
並幫助你更好地編寫文檔

00:37:01.188 --> 00:37:02.856 
編輯器現在有一個命令

00:37:02.923 --> 00:37:05.659 
爲記錄你的API而生成標記

00:37:12.032 --> 00:37:14.668  
這些特性和多項可用性改進

00:37:14.735 --> 00:37:17.337  
真正讓Xcode的編輯體驗變得很棒

00:37:18.405 --> 00:37:21.108  
但我們並沒有就此止步
我們已經增加了一個特性

00:37:21.175 --> 00:37:24.011  
它原來是你們的頭號要求

00:37:25.345 --> 00:37:26.480  
應用程序擴展

00:37:34.087 --> 00:37:38.992  
Xcode 8中 我們正開放IDE
我們開始用源編輯

00:37:39.526 --> 00:37:41.662  
該擴展與活動編輯器一起運作

00:37:41.728 --> 00:37:44.331  
激活變革 選擇中的改變

00:37:44.398 --> 00:37:46.066  
文件中導航

00:37:46.466 --> 00:37:48.769  
這開闢了諸多機會

00:37:48.836 --> 00:37:51.772  
對於命令 例如重新格式化 評論

00:37:51.839 --> 00:37:54.107  
本地化 甚至待辦事項

00:37:54.808 --> 00:37:57.611  
現在 你可在每個extension
中實施許多操作

00:37:57.911 --> 00:38:00.981  
每個操作被列爲編輯菜單的一部分

00:38:01.882 --> 00:38:04.451 
用戶也可爲這些操作設定按鍵

00:38:04.518 --> 00:38:06.553 
作爲員工隊伍的一部分
讓他們工作

00:38:08.789 --> 00:38:10.891 
作爲extension的開發者

00:38:15.495 --> 00:38:19.666 
你可以將它們通過App Store
加載或開發者ID部署

00:38:19.867 --> 00:38:21.702 
而這些Xcode
8上的extension

00:38:21.768 --> 00:38:24.204 
在Sierra和El
Capitan都運作

00:38:29.409 --> 00:38:32.412 
現在作爲一個標準extension
用戶也感到安全了

00:38:32.880 --> 00:38:34.948 
這些擴展作爲一個單獨進程運行

00:38:35.015 --> 00:38:37.150 
且自身簽名通過驗證

00:38:37.551 --> 00:38:39.119 
並進一步加強安全性

00:38:39.186 --> 00:38:42.322 
現在系統完整性保護
保證Xcode的安全

00:38:42.556 --> 00:38:45.325 
這意味着只有
受信任的庫和擴展

00:38:45.392 --> 00:38:47.895 
可與IDE和你的代碼交互

00:38:49.429 --> 00:38:52.699  
因此 新源編輯擴展是我們的第一步

00:38:52.766 --> 00:38:55.836  
致力於使Xcode變成
更可擴展的IDE

00:38:56.236 --> 00:39:00.073  
我們很想聽聽你們就此的反饋
以及想看到的其他extension

00:39:01.308 --> 00:39:04.778 
我們也一直致力於
改善您瞭解代碼的方式

00:39:04.845 --> 00:39:08.282  
藉此 我們有全新API參照體驗

00:39:10.083 --> 00:39:12.186  
我們已合併了API文檔

00:39:12.252 --> 00:39:15.889  
將我們四個平臺合併到單一統一的參照

00:39:16.857 --> 00:39:21.795  
現在 這個基準使導航變得容易
通過框架和符號運作

00:39:22.696 --> 00:39:26.867  
現在 搜索統一參照意味着
對於每個API 你看到單一結果

00:39:27.201 --> 00:39:28.969  
我們已經集成了同樣的模糊匹配

00:39:29.036 --> 00:39:31.271  
我們用以快速代碼完成和開放

00:39:32.873 --> 00:39:33.941  
瀏覽參照時

00:39:34.007 --> 00:39:37.711  
對於每個API
該平臺可用性清楚地列出

00:39:38.512 --> 00:39:41.982 
而在以前的發佈中 我們將這個
作爲單獨下載來加載

00:39:42.049 --> 00:39:43.217 
因爲它的大小

00:39:43.483 --> 00:39:46.220 
在本發佈中
我們已能夠將其縮小爲先前的十分之一

00:39:46.286 --> 00:39:49.122 
所以我們已默認將其包含在內

00:39:49.189 --> 00:39:51.525 
你總能獲取你需要的信息

00:39:58.498 --> 00:40:01.602  
現在我們還在Interface Builder中
做了一些重大革新的改進

00:40:01.668 --> 00:40:03.871  
我想在演示中向你們展示

00:40:10.911 --> 00:40:14.414 
所以在這裏我們有一個項目
我們稱其爲Trailblazer

00:40:14.481 --> 00:40:17.818 
它是共享你喜愛的健行步道
社交應用程序

00:40:18.719 --> 00:40:22.055 
除了你的界面佈局方式

00:40:22.122 --> 00:40:24.124 
你會發現 Interface
Builder向你展示

00:40:24.191 --> 00:40:26.527 
它會呈現在設備上的方式

00:40:26.960 --> 00:40:28.929 
Interface Builder現可
向你展示視覺效果

00:40:28.996 --> 00:40:32.399 
例如畫布上的活力 模糊 陰影

00:40:32.599 --> 00:40:36.170 
使設計和運行應用程序成爲無縫體驗

00:40:37.137 --> 00:40:39.072 
你還會注意到我們在設備緯度內

00:40:39.139 --> 00:40:40.841 
展示接口

00:40:41.108 --> 00:40:43.310 
並在底部有新配置

00:40:43.377 --> 00:40:44.845 
普通設備的尺寸

00:40:45.779 --> 00:40:48.782 
在此我們在iPhone 6s
Plus上看

00:40:49.349 --> 00:40:53.220 
我選擇其他一項
就像讓我點擊iPad上的一項

00:40:53.287 --> 00:40:55.923 
我可以看到界面如何顯示

00:41:03.263 --> 00:41:07.034 
你看 我們通過iPad上的兩列
設計了自適應佈局

00:41:08.402 --> 00:41:10.871 
要以其他方式查看它
我可以改變方向

00:41:10.938 --> 00:41:12.506 
如果我想橫向進行查看

00:41:12.873 --> 00:41:14.942 
我還可以在自適應佈局下查看

00:41:15.008 --> 00:41:17.377 
例如 讓我們以三分之一大小來查看下

00:41:17.444 --> 00:41:20.247 
這是用於多任務的滑動

00:41:21.114 --> 00:41:22.616 
這很棒
因爲它可以讓我

00:41:22.683 --> 00:41:25.018 
爲確保我實施了正確的界面

00:41:25.085 --> 00:41:27.955 
用戶將以多種方式體驗我的應用

00:41:29.256 --> 00:41:30.757 
我們還改進了經驗

00:41:30.824 --> 00:41:34.027 
通過使用大小類創建自適應佈局

00:41:34.094 --> 00:41:35.362 
具體來看一個例子

00:41:36.163 --> 00:41:39.800 
這個應用程序的設計者希望
在圖像頂部放個按鈕

00:41:39.867 --> 00:41:42.336 
在地圖上覆蓋顯示健行步道

00:41:42.703 --> 00:41:46.373 
但因爲地圖的大小
他們只想在更廣泛的顯示器上做

00:41:46.907 --> 00:41:47.908 
這真的很容易

00:41:48.675 --> 00:41:51.745 
在配置欄中
我將點擊Vary for Traits按鈕

00:41:51.812 --> 00:41:53.981 
我將獲得兩個尺寸類選項

00:41:54.047 --> 00:41:55.249 
寬度和高度

00:41:55.983 --> 00:41:58.886 
iPhone和iPad上的
寬度尺寸類別不同

00:41:58.952 --> 00:42:00.220 
所以我會檢查該選項

00:42:01.421 --> 00:42:03.524 
配置欄會變成藍色 提醒我

00:42:03.590 --> 00:42:06.960 
我正在爲特定尺寸類做自定義

00:42:07.461 --> 00:42:10.197 
但你也注意到設備的列表已經改變

00:42:10.264 --> 00:42:14.334 
我能看到那些將利用該定製的設備

00:42:14.868 --> 00:42:18.539 
在這裏 我看到各種iPad
預覽方向和適應

00:42:19.106 --> 00:42:22.843 
最後一個項目
iPhone 6s Plus的橫向預覽

00:42:23.477 --> 00:42:27.614 
該設備和預覽方向使用常規寬度尺寸類

00:42:27.681 --> 00:42:30.017 
這是重要的信息 因爲現在我可以確保

00:42:30.083 --> 00:42:32.719 
我將爲設備設計正確的界面

00:42:33.554 --> 00:42:37.357 
我們的界面將很好看
所以讓我們繼續做這些改變

00:42:38.158 --> 00:42:40.727 
我將去到庫中 拿出一個按鈕

00:42:40.794 --> 00:42:42.329 
並將其拖到界面

00:42:43.297 --> 00:42:46.166 
如果你的手不那麼汗溼
你可以拿住按鈕

00:42:47.868 --> 00:42:48.702 
來吧

00:42:53.173 --> 00:42:54.541 
各位 一秒內不許看

00:43:00.080 --> 00:43:01.815 
一秒後 這將不再有趣

00:43:14.161 --> 00:43:14.995 
好了

00:43:24.271 --> 00:43:26.540 
這不應該贏得最響亮的掌聲
好的

00:43:27.608 --> 00:43:31.144 
讓我們繼續
我將在此處刪除標題

00:43:31.211 --> 00:43:33.547 
我們繼續
爲它設置圖像

00:43:33.614 --> 00:43:35.949 
我們將把它做成這個漂亮的羅盤圖標

00:43:36.083 --> 00:43:37.918 
而我們只需把它放在正確位置

00:43:38.151 --> 00:43:40.854 
現在 我將稍後連接這個按鈕

00:43:40.921 --> 00:43:43.423 
但確保得到了我們想要的界面

00:43:43.724 --> 00:43:45.759 
我將在配置欄中點擊完成

00:43:45.959 --> 00:43:49.563 
我們將橫向切換回
iPhone 6S Plus

00:43:49.630 --> 00:43:50.664 
我們的按鈕出現了

00:43:51.131 --> 00:43:54.034 
當我切換到縱向預覽 這不

00:43:54.101 --> 00:43:56.203 
而這正是我想要的界面

00:43:56.370 --> 00:44:00.207 
Interface Builder
現使得設計自適應佈局變得很容易

00:44:01.375 --> 00:44:05.512 
在配置欄中將會顯示
iOS和watchOS設備

00:44:06.013 --> 00:44:08.248 
還顯示了tvOS一些有用的選項

00:44:08.949 --> 00:44:11.652 
我將談到應用程序的tvOS版本

00:44:11.718 --> 00:44:14.321 
你會看到在配置欄中
現在向你顯示的選項

00:44:14.388 --> 00:44:17.991 
對於亮界面和暗界面

00:44:18.458 --> 00:44:20.360 
我甚至可以在此進行自定義

00:44:20.427 --> 00:44:23.697 
例如 讓我們添加羅盤圖標的特化

00:44:23.764 --> 00:44:26.266 
暗模式 使其彈出效果更好一點

00:44:27.901 --> 00:44:30.938 
我想給你看Interface
Builder的另一特性

00:44:31.939 --> 00:44:34.641 
你會看到tvOS Storyboard縮小

00:44:34.708 --> 00:44:36.910 
所以它覆蓋整個畫布

00:44:37.611 --> 00:44:41.615 
Interface Builder
現支持任意縮放級別的畫布操作

00:44:49.389 --> 00:44:51.258 
因此 無論你想放大

00:44:51.325 --> 00:44:53.026 
獲得完美像素比對

00:44:53.360 --> 00:44:55.996 
或者你想要縮小回來
在Overview模式上運作

00:44:56.296 --> 00:44:57.130 
你可以做到這一切

00:45:02.936 --> 00:45:05.172 
這就是我們給Interface
Builder配備的新特性

00:45:14.648 --> 00:45:15.482 
謝謝

00:45:15.816 --> 00:45:19.653 
設計Interface Builder
現在感覺就像直接在設備上工作

00:45:19.720 --> 00:45:23.390 
編輯任何縮放級別
意味着你不再受制於

00:45:23.457 --> 00:45:25.759 
設備的大小

00:45:27.961 --> 00:45:31.331  
在此發佈中
我們還專注於工具的輔助性

00:45:31.398 --> 00:45:34.368  
我們尤其已讓
Interface Builder

00:45:34.434 --> 00:45:35.669  
與語音輔助程序Voiceover
一起協調運作

00:45:36.103 --> 00:45:38.639  
我們也完全改寫
AppleScript字典

00:45:38.705 --> 00:45:42.109  
使得Xcode更容易
融合於桌面自動化

00:45:48.482 --> 00:45:51.518 
現在 在每次發佈中 我們增加了尋找

00:45:51.585 --> 00:45:53.754 
診斷和修復問題的額外技術支持

00:45:54.021 --> 00:45:56.990  
藉於Xcode 8
我們正跨出另一大步

00:45:58.125 --> 00:46:01.662  
在過去的一年 我們增加了
100多個新的診斷方法

00:46:01.728 --> 00:46:03.730  
提供了極大的洞察力
當你構建

00:46:03.797 --> 00:46:05.999  
以及當你編輯代碼碰到實時問題

00:46:07.000 --> 00:46:08.836  
我們已添加了三個新的靜態分析器

00:46:08.902 --> 00:46:12.105  
用於本地化 延展性和釋放

00:46:12.172 --> 00:46:15.175  
所有常用的可能在應用程序中
引起問題的模式

00:46:16.276 --> 00:46:18.912  
我們繼續投資測試系統

00:46:18.979 --> 00:46:22.683  
提高穩定性 性能
並增加一些新的選項

00:46:24.618 --> 00:46:28.322  
現在Xcode將捕獲和顯示崩潰日誌

00:46:28.388 --> 00:46:29.957  
在你的測試期間發生

00:46:35.729 --> 00:46:37.798 
這很棒 因爲你可以運行測試

00:46:37.865 --> 00:46:40.334 
收集這些日誌 比如崩潰日誌

00:46:40.400 --> 00:46:43.470 
你可以直接用調試器來查看診斷問題

00:46:44.438 --> 00:46:48.909 
我們還用一新選項來增強xcodebuild
聯編以運行預建測試

00:46:54.648 --> 00:46:55.482  
哇哦 確實如此

00:46:55.549 --> 00:46:58.552  
這意味着這對合成
可擴展測試而言是完美的

00:46:58.619 --> 00:47:00.521  
與自己的持續合成

00:47:02.656 --> 00:47:05.092 
Xcode比以往任何時候都
更會幫助解決問題

00:47:05.158 --> 00:47:08.195 
當你構建 分析和測試自己的應用

00:47:08.595 --> 00:47:09.496 
但通常情況下

00:47:09.563 --> 00:47:13.233 
一些最有趣的 若非
我們說的毒辣問題

00:47:13.300 --> 00:47:15.169 
當你運行代碼時發生

00:47:15.536 --> 00:47:19.206  
爲此 我們推出了新的東西
叫做Runtime Issues

00:47:24.578 --> 00:47:26.180 
Runtime Issues與
其他應用一樣

00:47:26.246 --> 00:47:28.448 
會在活動視圖提醒你

00:47:28.515 --> 00:47:31.285 
你會在問題導航關看到詳細信息

00:47:31.685 --> 00:47:34.188  
我們已在頂部添加了一個切換
以使其醒目

00:47:34.988 --> 00:47:37.925  
現在 有三種運行問題

00:47:37.991 --> 00:47:40.294  
UI 線程和存儲器

00:47:40.894 --> 00:47:41.995  
讓我們先從UI開始

00:47:43.330 --> 00:47:45.399  
視圖調試器已是一個很棒的工具

00:47:45.465 --> 00:47:49.369  
用於你的界面可視化以及問題診斷

00:47:50.137 --> 00:47:52.873  
除了改進的準確度和視覺呈現

00:47:52.940 --> 00:47:56.376  
視圖調試器現將在運行時檢測佈局問題

00:47:58.846 --> 00:48:00.547 
每次捕獲 視圖調試器

00:48:00.614 --> 00:48:03.951 
能夠檢測到含糊的佈局視圖

00:48:04.218 --> 00:48:07.154 
而這些是由於遺漏和錯誤
配置的限制而造成的

00:48:12.593 --> 00:48:14.595 
這些問題在導航器裏浮現出來

00:48:14.661 --> 00:48:17.731 
檢測將提供詳細信息
幫助你解決這些問題

00:48:19.166 --> 00:48:22.102  
現在 線程問題往往難以預測

00:48:22.169 --> 00:48:25.606  
且可能難以調試
可能出現問題的原因很多

00:48:25.672 --> 00:48:29.243 
比如 從錯誤的線程或數據爭用解鎖

00:48:30.043 --> 00:48:32.479 
爲了幫助你跟蹤這類問題

00:48:32.546 --> 00:48:35.749 
我們正把Thread Sanitizer整合到Xcode 8中

00:48:36.817 --> 00:48:38.252  
當你的應用啓動時

00:48:38.318 --> 00:48:42.122  
Thread Sanitizer檢測常見線程問題

00:48:42.189 --> 00:48:44.258  
並將其作爲運行問題呈現

00:48:45.025 --> 00:48:47.494  
你可在這些問題出現時
中斷Xcode

00:48:47.561 --> 00:48:48.929  
或者你可以收集全部

00:48:48.996 --> 00:48:50.664  
在會話結束時審查

00:48:51.298 --> 00:48:54.468  
和綜合報告提供了這些問題的具體細節

00:48:54.535 --> 00:48:56.837  
給你提供任何爭用條件的詳細信息

00:48:56.904 --> 00:48:59.273  
並提供棧幀來幫助你導航

00:49:00.807 --> 00:49:01.875  
像——是的

00:49:07.147 --> 00:49:12.019  
現在 像線程 內存問題
往往難以確定和修復

00:49:12.386 --> 00:49:13.754  
想要有效地進行調試

00:49:13.820 --> 00:49:16.456  
通常你得查看對象圖

00:49:16.523 --> 00:49:20.561  
看看它們是如何相互關聯的
這就是我們建立的東西

00:49:22.329 --> 00:49:26.133 
Xcode 8的新特徵是工具條
提供了一個內存調試器

00:49:26.433 --> 00:49:29.636 
這將幫助你可視化和導航運行應用時的

00:49:29.703 --> 00:49:31.205 
對象圖

00:49:45.085 --> 00:49:48.088 
你是否會更喜歡它
如果我告訴你 它會自動查找泄漏呢？

00:49:54.862 --> 00:49:57.998 
這是調試內存問題一個很棒的新工具

00:49:58.065 --> 00:49:59.867 
我想在演示中向你們展示

00:50:05.672 --> 00:50:08.208 
好了 在此我們有
Trailblazer應用

00:50:08.275 --> 00:50:10.277 
我要在模擬器中啓動它

00:50:11.044 --> 00:50:12.379 
我之前在調試

00:50:12.446 --> 00:50:14.615 
我想看一下之前注意到的內存問題

00:50:15.315 --> 00:50:17.885 
當我們正在做這的同時
我將彈出內存報告

00:50:17.951 --> 00:50:19.486 
我會點擊步道

00:50:19.686 --> 00:50:21.188 
你會看到內存峯值

00:50:21.255 --> 00:50:23.056 
沒關係 我早調查過了

00:50:23.123 --> 00:50:25.592 
這還只是加載所有資源的步道

00:50:26.360 --> 00:50:28.996 
我注意到
當我點擊每個評論

00:50:29.062 --> 00:50:30.330 
我們的內存峯值

00:50:31.131 --> 00:50:32.999 
我們不恢復內存

00:50:33.066 --> 00:50:36.436 
即使我們一路回到應用程序的起點

00:50:37.371 --> 00:50:39.606 
這預示存儲器管理問題

00:50:39.673 --> 00:50:42.442 
我們可以使用內存調試器進行調查

00:50:43.343 --> 00:50:45.913 
我將點擊工具欄中的內存調試器按鈕

00:50:46.113 --> 00:50:49.650 
當我們暫停你的應用時
我們捕捉到對象圖

00:50:50.617 --> 00:50:52.252 
調試導航現在向我顯示

00:50:52.319 --> 00:50:54.888 
在我的應用程序中分配到的所有對象

00:50:54.955 --> 00:50:57.991 
有我創建的和系統創建的

00:50:59.226 --> 00:51:02.229 
我可以將其過濾
只顯示我的項目中的相關條目

00:51:02.930 --> 00:51:06.934 
我還可以輸入字符串
或地址來查找特定對象

00:51:07.568 --> 00:51:08.969 
我已經輸入了“控制器”

00:51:09.036 --> 00:51:12.506 
我有評論視圖控制器的三個實例

00:51:12.906 --> 00:51:14.141 
這令我感到詫異

00:51:14.808 --> 00:51:16.510 
當我選擇它們中的任何一個

00:51:16.577 --> 00:51:19.012 
我們會看到該對象圖表在右邊顯示

00:51:19.713 --> 00:51:23.350 
現在 你看到的都是該對象的參照路徑

00:51:23.417 --> 00:51:25.319 
存在內存裏

00:51:26.887 --> 00:51:30.290 
我在此看到的其中一個對象
是Swift捕獲環境

00:51:30.424 --> 00:51:32.459 
這是代碼中我的視圖控制器的某處

00:51:32.526 --> 00:51:36.563 
已被捕獲閉包的一部分
這是開始查看的一個好地方

00:51:37.698 --> 00:51:40.133 
我將用檢查查看更多的細節

00:51:40.200 --> 00:51:42.302 
其中一個細節是回溯追蹤

00:51:42.369 --> 00:51:44.238 
至捕獲發生的地點

00:51:44.805 --> 00:51:47.274 
當然 我可以直接點擊導航

00:51:47.341 --> 00:51:49.042 
至導致它的那一行代碼

00:51:57.751 --> 00:51:59.286 
我看到問題的根源

00:51:59.353 --> 00:52:01.622 
我已經爲這個視圖控制器
建立了一個觀察器

00:52:01.688 --> 00:52:03.557 
被告知評級何時發生變化

00:52:03.857 --> 00:52:06.159 
此API返回的觀察令牌

00:52:06.226 --> 00:52:09.596 
當視圖消失 我已妥善上下清理

00:52:09.963 --> 00:52:11.999 
但我從來沒有保留它

00:52:12.266 --> 00:52:14.368 
這是一個常見和易犯的錯誤

00:52:14.434 --> 00:52:18.272 
也是內存調試器容易找到和修復的錯誤

00:52:19.606 --> 00:52:22.676 
現在 我之前提到的
內存調試還能發現泄漏

00:52:22.743 --> 00:52:25.679 
並且它提醒了我在活動視圖有三個泄漏

00:52:26.280 --> 00:52:28.749 
我會點擊那個
將被帶到問題導航

00:52:28.815 --> 00:52:31.084 
在那裏我看到泄漏的三種類型對象

00:52:31.418 --> 00:52:34.488 
陣列 用戶評論和用戶對象

00:52:35.355 --> 00:52:37.791 
我要點擊任一評論
抱歉 點擊用戶

00:52:37.858 --> 00:52:40.060 
現在我們看到的是參照週期

00:52:40.727 --> 00:52:43.030 
用戶有書面評論的數組

00:52:43.096 --> 00:52:46.533 
每一個用戶評論都有一個
參照返回給該用戶

00:52:47.167 --> 00:52:50.904 
如果所有參照都強行持有
這將泄漏遍佈這些對象

00:52:51.905 --> 00:52:54.374 
現在 它看起來像是我一致泄漏它們

00:52:54.508 --> 00:52:57.144 
如果我想獲取這些對象
中任何一個的詳細信息

00:52:57.211 --> 00:53:00.614 
我可以使用上下文菜單
在控制檯打印出來

00:53:00.681 --> 00:53:03.183 
或只是彈出一個快速瀏覽
看看更多的細節

00:53:04.985 --> 00:53:07.020 
在這種情況下 審查用戶關係

00:53:07.087 --> 00:53:11.024 
是我要進行調查的
正如代碼一樣導航

00:53:11.091 --> 00:53:12.459 
我命令式點擊一下就可以了

00:53:12.526 --> 00:53:15.495 
就將被帶到產生參照源的代碼行

00:53:15.662 --> 00:53:18.232 
果然 我忘了聲明它是弱的

00:53:19.066 --> 00:53:21.535 
就這樣
內存調試器能夠告訴我

00:53:21.602 --> 00:53:23.437 
我有的泄漏 以及幫我解決這些問題

00:53:32.279 --> 00:53:34.448 
這是Xcode 8的新內存調試器

00:53:36.283 --> 00:53:39.453  
今天我還有一個其他類型的問題想談談

00:53:39.686 --> 00:53:41.255  
這與配置有關

00:53:46.894 --> 00:53:50.397 
沒有什麼更令人沮喪的
當你在做項目時

00:53:51.331 --> 00:53:53.200 
代碼簽名出了問題

00:53:55.102 --> 00:53:57.070 
其實 這並不完全真實

00:53:57.137 --> 00:53:59.373 
因爲在一些情況下 解決方案

00:53:59.439 --> 00:54:01.608 
比問題本身更令人沮喪

00:54:08.949 --> 00:54:10.384 
因此 我們在Xcode 8中
解決了這個問題

00:54:10.450 --> 00:54:12.953 
我們已經完全重建了配置系統

00:54:19.326 --> 00:54:23.030 
我們開始通過創建更快
更強大的新簽名行動

00:54:23.096 --> 00:54:25.365 
並考慮到新Xcode
的工作流而建立

00:54:25.766 --> 00:54:28.468 
我們構建了新的用戶界面元素
以清晰地想你展示

00:54:28.535 --> 00:54:31.138 
概況 團隊和你正使用的證書

00:54:31.205 --> 00:54:33.240 
並明確告訴你所有問題

00:54:33.640 --> 00:54:37.511 
我們完善了信息
以確保其始終包括可操作的信息

00:54:37.578 --> 00:54:40.881 
同時我們也確保生成請求日誌

00:54:40.948 --> 00:54:43.784 
其結果是將所發生的任何事透明化

00:54:45.118 --> 00:54:46.486 
基此 我們有一個強大基礎

00:54:46.553 --> 00:54:49.423 
以供建立兩個新配置工作流

00:54:50.324 --> 00:54:52.993  
Xcode 8具有自動
代碼簽名的選項

00:54:53.493 --> 00:54:56.964  
有了這個代碼簽名選項
Xcode處理了所有的細節

00:54:57.030 --> 00:54:58.832  
通過專用信息

00:54:58.899 --> 00:55:02.369  
而此信息與你創建或管理的
任何其他信息無關

00:55:03.237 --> 00:55:05.239  
我們將應對所有簽名請求

00:55:05.305 --> 00:55:08.208  
添加權利和再生新項

00:55:09.276 --> 00:55:12.546  
對於你希望對簽名設置
有更多控制的情況下

00:55:12.679 --> 00:55:16.183  
您可以禁用此選項
並使用自定義代碼簽名

00:55:21.221 --> 00:55:23.123  
有了這個 你可以指定

00:55:23.190 --> 00:55:26.059  
你想使用的確切的簽名資源

00:55:26.493 --> 00:55:29.530  
並且你可以在每個生成配置中指定

00:55:29.596 --> 00:55:32.699  
這是一個很好的選擇
當你有各種各樣的簽名需要

00:55:37.638 --> 00:55:40.674  
自定義代碼簽名仍然利用了新基礎

00:55:40.741 --> 00:55:43.977  
對於任何問題
給你很好的反饋和幫助

00:55:45.112 --> 00:55:47.648  
我們還想關注配置的另一點

00:55:47.714 --> 00:55:49.583  
就是開發證書

00:55:50.050 --> 00:55:53.020  
使用多臺機器工作時
爲了使開發更容易

00:55:53.086 --> 00:55:56.557  
Xcode現支持多個開發證書

00:56:01.728 --> 00:56:05.365 
這意味着當你得到一臺新Mac
你只需要添加Apple ID即可

00:56:05.432 --> 00:56:07.835 
你不再需要取消或分享證書

00:56:07.901 --> 00:56:09.536 
從你的其他開發

00:56:16.643 --> 00:56:20.080 
所以新的授權系統
自動並且定製登錄

00:56:20.147 --> 00:56:22.015 
並且複製開發許可

00:56:22.082 --> 00:56:25.085  
Xcode 8總是使得授權變得容易

00:56:25.152 --> 00:56:26.854  
並且給你你需要的控制

00:56:28.589 --> 00:56:30.891  
在這個版本里
我們把注意力集中在性能上

00:56:30.958 --> 00:56:32.926  
而且我們達到了一些
了不起的成就

00:56:33.560 --> 00:56:36.396  
和我們一年前發佈的版本相比

00:56:36.463 --> 00:56:38.966  
你會發現Xcode的啓動速度
提高了2倍

00:56:39.032 --> 00:56:42.269  
測試的索引速度甚至提高了50倍

00:56:48.509 --> 00:56:53.113 
所有的這些使得Xcode 8變得
更快更好用

00:56:54.248 --> 00:56:58.318 
這是你將在Xcode 8裏找到
特性和提升的一部分

00:56:58.719 --> 00:57:01.755  
請在這周來實驗室讓我們知道
您的想法

00:57:02.389 --> 00:57:04.658  
接下來 邀請
Sebastien Marineau-Mes

00:57:04.725 --> 00:57:08.595  
他將會和你們分享一些
令人興奮的新平臺技術

00:57:08.762 --> 00:57:09.897 
Sebastien

00:57:11.532 --> 00:57:12.533 
謝謝Matthew

00:57:13.934 --> 00:57:14.768 
謝謝

00:57:15.335 --> 00:57:18.672 
讓我介紹一些關鍵的
根本的技術的更新

00:57:18.739 --> 00:57:20.807 
我會從壓縮開始

00:57:21.441 --> 00:57:24.611  
如果你們記得 去年我們介紹了
lzfse

00:57:24.678 --> 00:57:26.446  
作爲我們主流的壓縮算法

00:57:26.513 --> 00:57:30.517  
比zlib算法快3倍
並且能量消耗少一半以上

00:57:30.584 --> 00:57:34.154  
這真是一個引人注目的技術
並且獲得了廣泛的使用

00:57:34.888 --> 00:57:39.826 
現在我們宣佈 我們要開源
lzfse 並且

00:57:41.628 --> 00:57:42.462 
現在你知道了

00:57:43.830 --> 00:57:46.900 
我們相信這會鼓勵lzfse
獲得更多的使用

00:57:46.967 --> 00:57:51.205 
特別是多平臺以及離線壓縮
這些使用案例中

00:57:51.805 --> 00:57:54.408 
接下來 我想要討論網絡

00:57:55.509 --> 00:57:59.246  
現在,我們知道一些
應用的性能

00:57:59.313 --> 00:58:01.949  
取決於擁有一個好的網絡連接

00:58:02.015 --> 00:58:03.417  
但是如今的網絡

00:58:03.483 --> 00:58:06.854  
沒有好的辦法給最重要的
通信優先級

00:58:07.054 --> 00:58:11.625 
比如說 人們在工作時下載
YouTube上的貓的視頻

00:58:11.692 --> 00:58:14.494 
會影響你真正重要的視頻會議

00:58:14.828 --> 00:58:18.699 
所以我們和思科合作
給網絡加入智能

00:58:18.765 --> 00:58:23.170 
現在網絡能夠識別被信任的設備

00:58:23.470 --> 00:58:27.674 
識別對你的工作最重要的應用

00:58:28.041 --> 00:58:32.613 
然後優先讓這些通信在網絡終端
間傳輸

00:58:32.679 --> 00:58:34.581 
這將提供更好的性能

00:58:34.648 --> 00:58:37.351 
給那些對你最重要的應用

00:58:38.051 --> 00:58:40.254 
這就是網絡部分
接下來

00:58:44.224 --> 00:58:46.693  
接下來 請我們討論記錄

00:58:47.160 --> 00:58:50.030  
如今 記錄是你們所有人都
使用的一項技術

00:58:50.097 --> 00:58:53.767  
在開發 調試及現場診斷中

00:58:54.368 --> 00:58:57.137  
在傳統中 記錄是碎片化的

00:58:57.204 --> 00:58:59.740 
你們有很多人使用你們自己的
方案

00:59:00.174 --> 00:59:03.010 
這個平臺已有的方案通常很慢

00:59:03.310 --> 00:59:06.647 
所以今年我們重新思考了記錄

00:59:06.980 --> 00:59:10.250 
並用我們提出一個我們認爲
很吸引人的技術

00:59:10.417 --> 00:59:12.886 
它是統一的並且非常快

00:59:12.953 --> 00:59:15.822 
它在硬盤上記錄的數據很緊湊

00:59:16.056 --> 00:59:18.725 
它還給你足夠的靈活性來支持

00:59:18.792 --> 00:59:22.529 
跨應用 守護進程 系統服務
的記錄

00:59:22.863 --> 00:59:25.265 
它有內存內追蹤的概念

00:59:25.332 --> 00:59:28.635 
你可以捕捉頻繁的記錄信息

00:59:28.702 --> 00:59:30.537 
只保存它們在硬盤中

00:59:30.604 --> 00:59:33.307 
當你的應用有錯誤時

00:59:33.807 --> 00:59:36.343 
最後 我們也加入了隱私

00:59:36.610 --> 00:59:39.646 
所以在開發時你可以捕捉非常
多的記錄信息

00:59:39.713 --> 00:59:41.882 
並且使它們被自動編輯

00:59:41.949 --> 00:59:44.651 
當你向最終用戶發佈你的應用時

00:59:45.919 --> 00:59:47.087 
現在 和這個一起

00:59:49.022 --> 00:59:53.493 
我們重寫了控制檯應用
它有了更多的功能

00:59:53.560 --> 00:59:56.063 
比如說 它能夠直播流媒體

00:59:56.129 --> 00:59:59.600 
通過開發設備
高級過濾的能力

00:59:59.666 --> 01:00:02.569 
等級系統的內省能力

01:00:02.669 --> 01:00:04.605 
這就是新的記錄系統

01:00:06.039 --> 01:00:06.940  
接下來

01:00:09.576 --> 01:00:11.979 
接下來 我們來說說文件系統

01:00:13.046 --> 01:00:13.881 
好的

01:00:16.216 --> 01:00:21.188 
當然 如今HFS+是Mac上的主流
文件系統

01:00:21.255 --> 01:00:24.024 
它是1998年發佈的

01:00:24.625 --> 01:00:27.961  
如今它被部署到所有的Apple
產品

01:00:28.028 --> 01:00:30.264  
超過10億臺設備

01:00:30.697 --> 01:00:35.102  
當然 HFS+是18年前設計的

01:00:35.369 --> 01:00:38.672  
我認爲它證明瞭當初的設計相當
優秀

01:00:38.739 --> 01:00:41.074  
它在今天仍然是一個優秀的文件
系統

01:00:41.141 --> 01:00:44.511  
但是 在它設計的時候 Mac上
還有軟驅

01:00:44.578 --> 01:00:50.384  
我們認爲現在可能是我們
開始一個新的文件系統的時候

01:00:50.450 --> 01:00:54.421  
所以今天我們要宣佈一個全新的
Apple File System

01:00:59.459 --> 01:01:00.294 
這就是它

01:01:01.695 --> 01:01:05.132 
我認爲你們會爲此感到興奮

01:01:05.199 --> 01:01:09.570  
Apple File System
從我們最小的設備Watch擴展到

01:01:09.636 --> 01:01:12.940  
高端的擁有很大的存儲配置的
Mac Pro

01:01:13.473 --> 01:01:16.143 
它還是現代的
我們設計它首先

01:01:16.210 --> 01:01:19.847 
針對當今以及未來的存儲技術
閃存和SSD

01:01:19.913 --> 01:01:21.048 
它是有彈性的

01:01:21.114 --> 01:01:25.953 
並且我們利用這個機會來統一
iOS和Mac OS上的加密

01:01:26.019 --> 01:01:28.589 
使我們在未來有良好的靈活性

01:01:29.356 --> 01:01:32.292 
Apple File System
有很多新的獨特特性

01:01:32.359 --> 01:01:34.461 
我想要重點展示其中的兩個

01:01:34.995 --> 01:01:38.198 
第一個是克隆
爲什麼要克隆？

01:01:38.532 --> 01:01:41.401 
如果你看看一個運行了一段時間
的系統

01:01:41.468 --> 01:01:43.804 
你會發現很多同樣的重複文件

01:01:43.871 --> 01:01:45.973 
到處複製是人的天性

01:01:46.039 --> 01:01:49.510 
這當然不高效
這會浪費存儲空間

01:01:49.910 --> 01:01:54.414 
但是有了克隆 你可以複製文件
只需要使用初始存儲空間

01:01:54.548 --> 01:01:56.416 
當文件被修改時

01:01:56.650 --> 01:02:01.221 
這很快並且你可以克隆
文件 目錄 目錄結構

01:02:02.289 --> 01:02:05.559 
第二個我想要強調的特性是快照

01:02:05.626 --> 01:02:06.927 
什麼是快照？

01:02:07.160 --> 01:02:10.797 
他們是文件系統在一個時間點的
內容的鏡像

01:02:11.231 --> 01:02:12.566 
爲什麼你們需要它？

01:02:12.633 --> 01:02:15.335 
好吧 假設你在開發一個備份
應用

01:02:15.502 --> 01:02:17.704 
使用快照 你可以備份

01:02:17.771 --> 01:02:20.674 
文件系統在一個時間點的
統一的視圖

01:02:21.241 --> 01:02:24.978 
另一個這很有用的好的例子是
在教室

01:02:25.379 --> 01:02:27.247 
你可能會爲學生準備一臺設備

01:02:27.314 --> 01:02:30.517 
包括內容 配置文件 應用等等

01:02:30.584 --> 01:02:32.052 
在上課時使用

01:02:32.352 --> 01:02:34.621 
學生使用設備時

01:02:34.821 --> 01:02:37.724 
他們可能會修改內容或設置

01:02:37.791 --> 01:02:40.527 
你可以在課程結束時使用快照

01:02:40.761 --> 01:02:43.363 
使設備恢復到初始狀態

01:02:43.430 --> 01:02:45.832 
這樣它們就可以被下次課
的學生使用

01:02:46.733 --> 01:02:49.736 
這就是新的Apple
File System的特性

01:02:50.270 --> 01:02:54.141 
Developer Preview會做爲
Mac OS Sierra的一部分

01:02:54.208 --> 01:02:55.475 
在今天提供給你

01:02:55.542 --> 01:02:59.046 
我們希望你們都可以下載它
使用它並向我們提供反饋

01:02:59.112 --> 01:03:02.749 
Apple File System
會很快來到所有的Apple設備

01:03:08.922 --> 01:03:09.756 
好的

01:03:11.658 --> 01:03:13.560 
最後 讓我們來談談隱私

01:03:13.961 --> 01:03:17.231  
你們聽說了一個新的 強大的
技術 叫做差分隱私

01:03:17.297 --> 01:03:18.665  
在今早的keynote中

01:03:18.732 --> 01:03:21.401  
我將向你們解釋它

01:03:21.835 --> 01:03:25.672 
我從差分隱私背後的數學
開始

01:03:27.508 --> 01:03:30.777  
這看起來很複雜

01:03:30.844 --> 01:03:33.013  
但我保證這些數學很有效

01:03:33.080 --> 01:03:36.450  
我會用一些例子來解釋它

01:03:36.950 --> 01:03:40.687  
第一個例子是我們將用差分
隱私來解決

01:03:40.754 --> 01:03:41.889  
一勞永逸地解決

01:03:41.955 --> 01:03:44.458  
最有爭議和最重要的問題之一

01:03:44.525 --> 01:03:46.126  
在現代計算機科學中

01:03:47.060 --> 01:03:48.629 
代碼格式

01:03:50.898 --> 01:03:52.499 
這當然是一個重要問題

01:03:52.566 --> 01:03:55.669 
我們將讓聽衆對問題的答案投票

01:03:55.736 --> 01:03:59.406 
你們會希望你們的結果保持私密

01:03:59.473 --> 01:04:00.807 
因爲讓我們來面對它

01:04:00.908 --> 01:04:03.777 
你的一些同事會對這很熱情

01:04:04.044 --> 01:04:07.147 
那麼我們怎麼利用差分隱私？

01:04:07.214 --> 01:04:10.350 
首先 你們每人提供你們的傾向

01:04:11.118 --> 01:04:14.855 
但是在我們把它發送給Apple
產生調查結果前

01:04:14.922 --> 01:04:18.158 
通過差分隱私
我們在每個答案里加入噪聲

01:04:18.225 --> 01:04:19.693 
在我們加入噪聲後

01:04:19.893 --> 01:04:22.262 
我們無法知道你的原始答案

01:04:22.663 --> 01:04:26.066 
我們把它發送給Apple
差分隱私的優點

01:04:26.366 --> 01:04:29.369 
就是我們把來自很多人的數據
集中在一起後

01:04:29.436 --> 01:04:33.073 
我們可以還原我們問題的答案

01:04:33.473 --> 01:04:36.476 
我不會對答案進行做判斷

01:04:36.543 --> 01:04:40.614 
看起來我們的意見還是很不同

01:04:40.681 --> 01:04:43.617 
但是當你通過編譯器運行你的
代碼之後

01:04:43.684 --> 01:04:45.085 
這並不重要

01:04:45.853 --> 01:04:46.687 
所以

01:04:48.222 --> 01:04:49.056 
那就是

01:04:53.427 --> 01:04:56.864 
所以 現在我們怎樣在
iOS X中使用差分隱私?

01:04:56.930 --> 01:04:58.465 
讓我來提供一個例子

01:04:58.999 --> 01:05:02.002 
在Spotlight中 我們爲
深層鏈接提供建議

01:05:02.069 --> 01:05:03.937 
我們當然希望提供

01:05:04.338 --> 01:05:08.041 
最相關和最流行的建議給
最終用戶

01:05:09.109 --> 01:05:12.613 
我們這樣做
我們賦予每個深層鏈接

01:05:12.679 --> 01:05:16.283 
一個獨有的哈希值
當用戶瀏覽它們的設備時

01:05:16.683 --> 01:05:20.654 
每當他們遇到一個深層鏈接
我們獲取那個哈希值並加入噪聲

01:05:20.721 --> 01:05:23.624 
提取它們的片斷
併發送給Apple

01:05:24.091 --> 01:05:27.628 
現在 任意單獨片斷都沒有意義

01:05:28.195 --> 01:05:31.164 
但是當我們把整個用戶羣
整合到一起時

01:05:31.465 --> 01:05:35.936  
我們可以還原深層鏈接的流行度
然後就可以使用它

01:05:36.003 --> 01:05:39.506  
使它們出現在Spotlight中
並提升用戶體驗

01:05:40.340 --> 01:05:44.912  
這就是差分隱私背後的科學

01:05:45.112 --> 01:05:47.748  
我還想介紹它的另一方面

01:05:48.015 --> 01:05:51.618  
你可能會想 如果我們從用戶
收集樣本

01:05:51.685 --> 01:05:54.421  
這通過從大量用戶中收集
大量樣本實現

01:05:54.721 --> 01:05:58.592  
如果Apple從同一個用戶那收集
大量樣本會怎樣?

01:05:58.659 --> 01:06:00.961  
你們難道不會發現我在做什麼?

01:06:01.428 --> 01:06:03.864 
這就是隱私預算起作用的時候

01:06:04.298 --> 01:06:07.601 
隱私預算限制我們可以獲得的
樣本數量

01:06:07.668 --> 01:06:10.337 
從任何一個用戶
並且它確保最終

01:06:10.404 --> 01:06:14.374 
我們永遠無法從任何用戶那恢復
有意義的信息

01:06:15.242 --> 01:06:16.877 
這就是差分隱私

01:06:17.244 --> 01:06:20.647 
這個強大的技術允許我們從
用戶那學習

01:06:20.747 --> 01:06:24.818 
提高用戶體驗的同時保護
你的隱私

01:06:25.385 --> 01:06:29.289 
就這些了 接下來請
Toby Paterson演講

01:06:29.590 --> 01:06:32.626 
Toby將會介紹
iOS X的高層特性

01:06:33.627 --> 01:06:34.628 
謝謝 Sebastien

01:06:40.033 --> 01:06:40.868 
下午好

01:06:46.206 --> 01:06:47.040 
讓我們開始

01:06:47.441 --> 01:06:51.445 
所以 你知道的 非常感謝你們
所有人

01:06:51.712 --> 01:06:55.115 
使得我們有一個如此好的
iOS生態環境

01:06:55.782 --> 01:07:00.821 
我們一直在努力尋找使用戶
找到新應用的方法

01:07:01.221 --> 01:07:06.093 
進入到他們喜歡使用的應用中
並且整合你的應用

01:07:06.326 --> 01:07:08.128 
到其他操作系統中

01:07:09.763 --> 01:07:14.434 
你們之前已經看到你們的應用
可以怎樣通過消息病毒式傳播

01:07:14.902 --> 01:07:18.605 
並且我們使告訴人們你們的應用
變得相當容易

01:07:19.273 --> 01:07:21.141 
從主屏幕

01:07:22.476 --> 01:07:25.679 
我們在快速行動列表中新添加了
一個分享按鈕

01:07:26.280 --> 01:07:27.915 
它會調出分享菜單

01:07:28.081 --> 01:07:31.084 
這樣你就可以向全世界Tweet
你的應用

01:07:31.151 --> 01:07:33.921 
這在所有應用中都可以免費使用

01:07:36.256 --> 01:07:39.860 
現在 我們有很多方式來
獲得用戶

01:07:39.927 --> 01:07:42.563 
在正確的時間進入正確的應用

01:07:42.796 --> 01:07:45.699 
我將要快速介紹它們
請耐心等候

01:07:47.434 --> 01:07:51.839 
Handoff讓你可以把任務
從一臺設備帶到另一臺設備

01:07:52.172 --> 01:07:55.709 
Spotlight可以直接和你的
應用內容連接

01:07:56.176 --> 01:07:57.411 
一個通用鏈接

01:07:57.477 --> 01:08:00.614 
會把你帶到對一個平臺最合適的
地方

01:08:00.681 --> 01:08:05.052 
你可以直接將一個應用和另一個
應用連接起來

01:08:05.452 --> 01:08:09.656 
Siri會在今天的視圖以及
Spotlight中推薦應用

01:08:09.823 --> 01:08:12.392 
我們可以只在正確的時間推薦
應用

01:08:12.526 --> 01:08:14.895 
在主屏的任務切換器中

01:08:15.262 --> 01:08:17.865 
我們可以基於相同的數據類型
連接應用

01:08:17.930 --> 01:08:21.134 
就像這個 這個 以及這個

01:08:22.202 --> 01:08:23.670 
我想你已經瞭解了這個主意

01:08:24.136 --> 01:08:27.674 
只有一件事我想你從中拿走

01:08:28.075 --> 01:08:30.444 
那就是NSUserActivity

01:08:30.611 --> 01:08:33.447 
這是很多的功能出入口

01:08:34.113 --> 01:08:38.585 
這是你的應用如何告訴操作系統
人們在你的應用裏做什麼

01:08:39.019 --> 01:08:42.956 
並且讓我們能夠創造智能的
建議和連接

01:08:43.023 --> 01:08:44.825 
在你的應用之間

01:08:45.792 --> 01:08:50.162 
在iOS X中 我們加入了2個
重要的信息

01:08:51.365 --> 01:08:55.202 
現在 很多應用用多種方式使用
地址

01:08:55.402 --> 01:08:59.573 
我們可以用它來在你的應用間
建立連接

01:09:00.073 --> 01:09:02.743 
讓我用一個例子來說明

01:09:03.676 --> 01:09:06.913 
這是一家我最喜歡的餐廳的
Yelp頁面

01:09:06.979 --> 01:09:08.182 
在舊金山

01:09:08.782 --> 01:09:13.353 
假設向NSUserActivity
提供這個地址

01:09:14.054 --> 01:09:18.759 
這將使我能夠做類似於要Siri
帶我到這來

01:09:20.294 --> 01:09:23.363 
我的手機知道我經常用Uber出行

01:09:23.430 --> 01:09:25.165 
這使得很容易

01:09:25.232 --> 01:09:28.569 
讓我叫車去餐廳

01:09:29.336 --> 01:09:34.107 
或者當我在期待獲得位置數據的
文本域打字時

01:09:34.408 --> 01:09:38.078 
QuickType能建議一個
我剛剛在看的地址

01:09:38.612 --> 01:09:42.149 
而且地圖可以在推薦列表裏
包含這個地址

01:09:42.448 --> 01:09:45.953 
以及一個快速回到這個應用
的方法

01:09:48.020 --> 01:09:51.325  
現在 我們也用多種方式
和其他人互動

01:09:51.390 --> 01:09:56.263  
操作系統可以學習我用什麼
應用和特定的人聯繫

01:09:57.064 --> 01:10:00.834  
要達到這點 你的應用需要提供
3個信息

01:10:01.468 --> 01:10:03.937 
足夠的上下文
這樣我們能找到一個入口

01:10:04.004 --> 01:10:06.006 
在該人的Address Book中

01:10:06.507 --> 01:10:11.478 
你提供的服務種類
那是消息或者視頻聊天平臺

01:10:11.912 --> 01:10:16.583 
以及一個你將爲那個人使用的
特定的標識符或處理者

01:10:18.051 --> 01:10:20.287 
這是新的Address Book卡

01:10:20.354 --> 01:10:23.957 
通過它我們可以在操作系統中
實現很多功能

01:10:24.558 --> 01:10:27.594 
而且你將注意到我們可以
自動包含

01:10:27.661 --> 01:10:30.697 
我們從你的應用學到的信息

01:10:31.565 --> 01:10:35.335 
現在 當我按任意一個
快速通信按鈕時

01:10:35.402 --> 01:10:37.037 
在卡的頂部

01:10:37.104 --> 01:10:40.641 
我們還可以在選項列表裏包含
你的應用

01:10:41.208 --> 01:10:44.344 
當我做出選擇時
我們會記下來

01:10:44.411 --> 01:10:47.214 
所以下一次
當我按這個按鈕時

01:10:47.648 --> 01:10:50.584 
我們可以把你直接打到那個應用

01:10:51.185 --> 01:10:53.854 
我需要指出所有這些學習

01:10:53.921 --> 01:10:57.991 
是用戶的私密
只有他們的設備能訪問

01:11:00.561 --> 01:11:05.732 
現在 我們深深的相信
跨操作系統的應用整合

01:11:05.799 --> 01:11:09.403 
提供更豐富的用戶體驗

01:11:10.070 --> 01:11:12.239 
擴展 當然 是你如何做那些

01:11:12.306 --> 01:11:15.309 
而且你早前已經聽說了新的
iMessage Apps

01:11:15.375 --> 01:11:17.911 
地圖擴展和SiriKit

01:11:19.046 --> 01:11:22.082 
那麼 我想要告訴你們兩個
擴展點的一些信息

01:11:22.149 --> 01:11:24.251 
我們加入到通知中

01:11:26.186 --> 01:11:28.522 
一個服務擴展在後臺運行

01:11:28.589 --> 01:11:31.124 
並且允許你修改推送內容

01:11:31.425 --> 01:11:34.228 
在我們向用戶顯示通知前

01:11:34.661 --> 01:11:39.299 
這使你可以做一些事
比如下載圖片 視頻 音頻文件

01:11:39.366 --> 01:11:43.337 
在後臺並將之直接嵌入到通知裏

01:11:44.137 --> 01:11:48.375 
或者你可以在你的服務器上
對推送內容加密

01:11:48.442 --> 01:11:52.145 
並用一個服務擴展在設備上解密

01:11:52.513 --> 01:11:55.616 
提供完全的端對端加密

01:11:59.486 --> 01:12:02.556 
我需要指出你可能想要使用
一些更強大的

01:12:02.623 --> 01:12:05.692 
比我們在這提出的ROT13算法

01:12:05.893 --> 01:12:09.663 
我們會在明年改進ROT13
來提供更多的安全性

01:12:14.034 --> 01:12:18.839 
現在如果你想要更豐富的
用戶體驗

01:12:19.072 --> 01:12:22.442 
一個內容擴展可以提供一個
任意的視圖

01:12:22.509 --> 01:12:25.746 
我們會用來擴展一條通知的
界面

01:12:26.113 --> 01:12:29.883 
這使你能提供動態的互動的
體驗

01:12:29.950 --> 01:12:32.553 
安全爲你的應用量身打造

01:12:35.389 --> 01:12:38.825 
今早你快速瀏覽了改進後的
今日視圖

01:12:38.892 --> 01:12:41.628 
和它充滿活力的 擁有新外觀的
小部件

01:12:41.762 --> 01:12:46.633 
一個小部件可以是任意大小
只要在合理的限制內

01:12:47.067 --> 01:12:50.504 
但是我們還添加了一個新的
緊湊的 固定大小

01:12:50.571 --> 01:12:53.207 
來優化信息密度

01:12:54.074 --> 01:12:56.476 
使我們感到興奮的是

01:12:56.777 --> 01:13:00.414 
使這些小部件在主屏上就
可以使用

01:13:00.848 --> 01:13:05.352 
我將要告訴你使你的小部件工作
需要做什麼

01:13:06.486 --> 01:13:09.189 
首先你可能想要更新它的外觀

01:13:09.256 --> 01:13:13.093 
並且支持新的緊湊大小
這樣你的小部件不會看起來可笑

01:13:14.027 --> 01:13:18.966 
你需要用iOS X SDK構建它
如此而已

01:13:19.333 --> 01:13:22.836 
不需要改變構建小部件的
其他方面

01:13:23.003 --> 01:13:25.372 
你將免費獲得這個新功能

01:13:25.439 --> 01:13:26.940 
所以我們很興奮

01:13:27.007 --> 01:13:31.144 
我們認爲這將爲你的應用打開
一個新的次元

01:13:33.013 --> 01:13:36.049 
好的 讓我們轉到Mac

01:13:37.317 --> 01:13:41.989 
Mac OS Sierra加入了
本地化應用的全面支持

01:13:42.055 --> 01:13:43.924 
在從右到左的語言中

01:13:43.991 --> 01:13:48.161 
包括有意義的
翻轉UI元素

01:13:49.029 --> 01:13:52.299 
Mac加入了iOS和watchOS

01:13:52.366 --> 01:13:56.403 
它們在今年早些時候悄悄加入了
對這一功能的支持

01:13:57.037 --> 01:14:00.874 
在全世界有這麼多潛在客戶

01:14:00.974 --> 01:14:03.777 
這比以往更加重要

01:14:03.844 --> 01:14:07.714 
你的應用被正確的本地化和
全球化

01:14:07.781 --> 01:14:09.816 
你可以在這獲得更多相關信息

01:14:12.419 --> 01:14:16.089 
你知道 當Sebastien
首先談論製表符和空格符

01:14:16.156 --> 01:14:18.525 
我們很確定他會講到這

01:14:19.326 --> 01:14:23.397 
你今早看到人們怎樣把他們
所有的窗口收集到一起

01:14:23.463 --> 01:14:25.465 
到一個分頁UI

01:14:26.466 --> 01:14:29.770 
AppKit將會在這爲你處理所有事

01:14:29.837 --> 01:14:32.506 
它聰明到知道不要將你的設置
窗口配對

01:14:32.573 --> 01:14:35.909 
你的文檔窗口 等等

01:14:36.376 --> 01:14:38.045 
其實 若你使用NSDocument

01:14:38.111 --> 01:14:42.349 
你在你的應用中不需要做其他事

01:14:43.083 --> 01:14:44.818 
如果你沒有使用NSDocument

01:14:44.885 --> 01:14:48.989 
你需要採用一些API來支持創建
新標籤頁

01:14:49.122 --> 01:14:52.059 
但是我強烈建議你看看
NSDocument是否

01:14:52.125 --> 01:14:56.196 
不符合你的使用案例
你看

01:14:56.663 --> 01:14:59.700 
我們今早還向你展示了
我們如何使人們易於

01:14:59.766 --> 01:15:03.203 
把他們的文檔和數據遷移到雲上

01:15:03.270 --> 01:15:07.074 
並且我們相信
那是文件存儲的未來

01:15:07.774 --> 01:15:12.279 
所以你的應用採用最佳做法
非常重要

01:15:12.579 --> 01:15:16.016 
關於文件協調和元數據查詢

01:15:16.617 --> 01:15:19.553 
如果你在此使用NSDocument

01:15:19.720 --> 01:15:22.856 
它會爲你處理所有瑣事

01:15:22.990 --> 01:15:27.294 
就像iOS上的
UIDocument那樣

01:15:28.996 --> 01:15:32.232 
現在我有一個iCloud的重要更新

01:15:33.200 --> 01:15:37.671 
如你所知iCloud API在
我們的所有平臺上都可用

01:15:38.105 --> 01:15:42.309 
但是在Mac上 對這些API的使用
受到限制

01:15:42.376 --> 01:15:46.180 
只有通過Mac App Store
發佈的應用可以使用

01:15:46.747 --> 01:15:50.817 
在Mac OS Sierra中
我們移除了這一限制

01:15:57.424 --> 01:15:58.258 
現在

01:15:58.325 --> 01:16:01.361 
你的應用仍然需要被有效的
developer ID簽名

01:16:01.428 --> 01:16:05.866 
同時也會移除那些煩人的
不受信任開發者警告

01:16:06.466 --> 01:16:09.169 
但是一旦你完成了這一步
你可以使用所有的API

01:16:09.236 --> 01:16:12.306 
無論你怎樣分發你的應用給用戶

01:16:15.008 --> 01:16:16.643 
接下來CloudKit

01:16:17.377 --> 01:16:19.546 
我們2年前介紹了CloudKit

01:16:19.613 --> 01:16:22.216 
它是基礎 我們用來開發

01:16:22.282 --> 01:16:24.418 
所有我們的新雲服務

01:16:25.085 --> 01:16:28.088 
現在他的權限模型相當粗粒化

01:16:28.689 --> 01:16:32.793 
你的數據或者可以被任何人訪問

01:16:33.293 --> 01:16:36.430 
或者只能被一個用戶訪問

01:16:37.364 --> 01:16:41.134 
新的CloudKit分享特性
允許你的應用

01:16:41.201 --> 01:16:44.371 
能夠絕對決定誰能訪問你的數據

01:16:51.011 --> 01:16:52.880 
新的CKShare類

01:16:54.314 --> 01:16:56.650 
使你能管理權限

01:16:56.717 --> 01:16:59.286 
誰能讀寫一個指定的數據集

01:16:59.353 --> 01:17:02.856 
這個API在所有的平臺上都可
使用

01:17:03.991 --> 01:17:08.529 
在Mac和iOS上
我們提供標準API

01:17:08.662 --> 01:17:11.765 
來處理邀請他人的機制

01:17:11.865 --> 01:17:14.334 
並且在你的應用中管理他人

01:17:15.602 --> 01:17:19.506 
我們用CloudKit分享來實現
新的合作特性

01:17:19.573 --> 01:17:21.208 
我們把它加入了Notes

01:17:21.275 --> 01:17:24.845 
我鼓勵你們在今天developer
preview中看一看它們

01:17:26.213 --> 01:17:28.615 
接下來交給Josh Shaffer

01:17:28.682 --> 01:17:30.984 
他會向你們介紹watchOS的
一些更新

01:17:31.051 --> 01:17:31.885 
謝謝

01:17:37.891 --> 01:17:38.725 
謝謝 Toby

01:17:40.127 --> 01:17:44.164 
如你們在keynote所知
watchOS 3簡化了導航

01:17:44.231 --> 01:17:45.999 
並提升了性能

01:17:46.700 --> 01:17:49.503 
這些改進超過了系統層面

01:17:49.736 --> 01:17:52.372 
並且包含很多對應用的改進

01:17:53.407 --> 01:17:57.444 
這些改進聚焦在Watch應用的
3個關鍵方面

01:17:57.911 --> 01:18:00.047  
首先是方便查看

01:18:01.114 --> 01:18:04.084  
和Apple Watch的單次互動
都很短暫

01:18:04.284 --> 01:18:07.387  
所以需要呈現設計良好
簡單的信息

01:18:07.454 --> 01:18:10.858  
給用戶
只聚集最相關的信息

01:18:10.991 --> 01:18:13.093  
來確保容易消化

01:18:14.561 --> 01:18:16.463  
第二是易於操作

01:18:17.064 --> 01:18:18.932  
這包括簡化使用

01:18:18.999 --> 01:18:21.768  
對最常用的
發生在Watch上的操作

01:18:22.302 --> 01:18:24.905  
比如 我們重新設計了健身應用

01:18:24.972 --> 01:18:27.841  
來減少開始一次健身
所需的步驟

01:18:28.842 --> 01:18:32.012  
這也意味着簡化訪問關鍵信息

01:18:32.079 --> 01:18:34.014  
你的用戶將會希望按照它來行動

01:18:34.248 --> 01:18:36.884  
即使他們不會在Watch上
採取這些行動

01:18:38.085 --> 01:18:41.255  
第三是保證你的應用的響應性

01:18:41.321 --> 01:18:44.958  
通過保持它們在被需要時
狀態是最新的並且立即可使用的

01:18:47.628 --> 01:18:49.696 
當然 謝謝 我同意

01:18:51.131 --> 01:18:52.966 
所以 當你思考一個應用

01:18:53.033 --> 01:18:56.670 
首先想到的是全屏應用

01:18:57.204 --> 01:18:58.739 
它絕對是這個的一部分

01:18:58.805 --> 01:19:02.142 
但是在Apple Watch上
重要的一點是記住你的應用可使用

01:19:02.209 --> 01:19:06.947 
另外2種界面
complications和通知

01:19:07.848 --> 01:19:12.319 
這三種界面只是你同一應用的
3種不同視圖

01:19:12.452 --> 01:19:15.289 
所以重要的一點是他們呈現
一致的信息

01:19:15.789 --> 01:19:18.892 
當你更新它們中的一個
你應當更新其他的

01:19:19.059 --> 01:19:21.261 
因爲如果他們顯示不同信息

01:19:21.328 --> 01:19:23.630 
你的用戶不會信任任何一個

01:19:24.598 --> 01:19:27.100 
你可能記得在watchOS 2中

01:19:27.167 --> 01:19:29.369 
有第4種界面叫做Glances

01:19:29.870 --> 01:19:32.206 
Glances簡化獲得

01:19:32.272 --> 01:19:35.242 
你最喜歡的應用的信息的摘要

01:19:36.276 --> 01:19:40.080 
在watchOS 3中
新的Dock將提供這一功能

01:19:40.247 --> 01:19:44.117 
並且只要按一下側邊按鈕就
可以從任何地方立即達到

01:19:45.619 --> 01:19:48.155 
若你watchOS 2
使用Glance界面

01:19:48.322 --> 01:19:51.792 
這個分開的界面
在watchOS 3中不再需要

01:19:52.125 --> 01:19:55.295 
但是它簡單的設計可以幫助你
更新主界面

01:19:55.362 --> 01:19:58.866 
爲你的應用 來確保它
看起來和使用起來都很好

01:19:58.932 --> 01:20:00.200 
當用Dock顯示時

01:20:01.535 --> 01:20:04.805 
在Dock裏的應用會立即響應
來確保

01:20:04.872 --> 01:20:07.040 
Watch上最常用的任務

01:20:07.107 --> 01:20:09.576 
可以在幾秒內完成

01:20:10.310 --> 01:20:12.412 
現在 那很明顯是很短的時間

01:20:12.479 --> 01:20:14.882 
爲此努力可以成爲一個好的引導

01:20:14.948 --> 01:20:17.951 
幫助你爲你的應用設計
頂級的特性

01:20:18.018 --> 01:20:21.054 
爲確保在Apple Watch上
確實運行良好

01:20:22.523 --> 01:20:24.658 
儘管每一個單獨操作都很短

01:20:24.725 --> 01:20:28.428 
一些應用可能會在較長的一段
時間裏被使用多次

01:20:28.962 --> 01:20:32.199 
比如我可能會多次查看購物清單

01:20:32.266 --> 01:20:33.367 
當我在一家商店時

01:20:34.301 --> 01:20:36.537 
在watchOS 3中
每當我擡起手腕

01:20:36.603 --> 01:20:39.306 
我能馬上看到我要買的東西

01:20:39.473 --> 01:20:41.675 
並且刪除我已經拿了的東西

01:20:42.276 --> 01:20:45.879 
現在設計擁有這種交互模型的
應用相當容易

01:20:45.946 --> 01:20:49.249 
因爲watchOS 3會
返回你使用的最後一個應用

01:20:49.316 --> 01:20:52.019 
在你最後使用它之後長達8分鐘內

01:20:52.853 --> 01:20:55.556 
當你完成之後
你會返回到Watch界面

01:21:01.828 --> 01:21:03.163 
當你的應用未被使用時

01:21:03.230 --> 01:21:06.900 
確保它保持響應意味着
讓它在後臺保持最新

01:21:06.967 --> 01:21:09.636 
所以當你要使用它時
它已經準備好了

01:21:10.003 --> 01:21:11.271 
要達到這非常容易

01:21:11.338 --> 01:21:15.542  
watchOS 3包括一系列新的
後臺應用刷新API

01:21:16.276 --> 01:21:18.245  
後臺應用刷新是一個關鍵部分

01:21:18.312 --> 01:21:21.048  
來開發可響應的watchOS應用

01:21:21.114 --> 01:21:23.450  
週期性的在後臺更新你的應用

01:21:23.517 --> 01:21:24.918  
是一個巨大的改進

01:21:24.985 --> 01:21:26.887  
不管你開發何種應用

01:21:27.321 --> 01:21:30.724  
現在 如果你開發健身應用
對這類應用

01:21:30.791 --> 01:21:33.126  
它們保持最新更加重要

01:21:33.193 --> 01:21:35.128  
在整個健身過程中

01:21:35.229 --> 01:21:37.865  
所以我們爲它們有一些額外改進

01:21:39.099 --> 01:21:40.434 
在一次健身中

01:21:40.501 --> 01:21:43.370 
這些應用將會持續在後臺運行

01:21:43.437 --> 01:21:44.838 
即使屏幕關閉時

01:21:45.172 --> 01:21:47.207 
確保他們能監視健身進度

01:21:47.274 --> 01:21:48.709 
並向用戶提供更新

01:21:48.775 --> 01:21:51.378 
當他們用觸真體驗技術達到里程碑

01:21:53.814 --> 01:21:56.683 
在健身中
它們也保持立刻可用

01:21:56.750 --> 01:21:59.653 
即使你切換到另一個應用
來完成其他任務

01:21:59.920 --> 01:22:02.789 
所以當我跳出到音樂應用裏
切換音樂

01:22:02.923 --> 01:22:04.191 
我放下手腕後

01:22:04.258 --> 01:22:06.727 
我會很快回到我的健身

01:22:07.628 --> 01:22:09.129 
我們還加強了訪問

01:22:09.196 --> 01:22:11.031 
心率計和加速儀

01:22:11.098 --> 01:22:13.500 
所以現在它們提供連續的數據

01:22:13.567 --> 01:22:15.702 
在整個健身過程中

01:22:20.807 --> 01:22:22.209 
除了這些傳感器方面的增強

01:22:22.276 --> 01:22:25.445 
還有一系列新的硬件訪問API

01:22:25.979 --> 01:22:29.650 
Crown事件使你原始訪問來自
Digital Crown旋轉事件

01:22:30.484 --> 01:22:35.088 
手勢識別使爲應用添加定製的
觸碰操作更容易

01:22:35.155 --> 01:22:38.792 
觸摸操作 比如輕觸 滑動 拖移
當然還有

01:22:38.859 --> 01:22:42.362 
除了加速儀 現在還可以
訪問陀螺儀

01:22:46.900 --> 01:22:50.170 
來確保你可以通過這些硬件訪問
API來做一些很酷的事情

01:22:50.237 --> 01:22:54.107 
我們還爲watchOS SDK
帶來了一系列圖形圖像框架

01:22:54.508 --> 01:22:57.311 
SpriteKit和SceneKit
給你很多自由

01:22:57.377 --> 01:23:01.982 
來增強你的應用和通知的外觀

01:23:02.850 --> 01:23:06.486 
AV Foundation使得
用Watch的外放播放聲音相當容易

01:23:06.954 --> 01:23:09.356 
本着簡化應用瀏覽的精神

01:23:09.423 --> 01:23:13.560 
你現在可以在應用界面中
播放視頻

01:23:16.296 --> 01:23:19.499 
當然 你也常常需要將數據
傳入或傳出Watch

01:23:19.566 --> 01:23:21.768 
Toby已經提到 爲了簡化這方面

01:23:21.835 --> 01:23:24.471  
CloudKit是
watchOS SDK一部分

01:23:24.905 --> 01:23:27.541  
因爲它基於NSURL會話

01:23:27.608 --> 01:23:29.510  
它甚至可以脫離手機運行

01:23:29.576 --> 01:23:31.745  
若你的Watch
靠近已知Wi-Fi網絡

01:23:32.713 --> 01:23:37.050  
Apple Watch是在
商店購買商品的方便途徑

01:23:37.150 --> 01:23:40.320  
在watchOS 3中
你可以賣東西

01:23:40.387 --> 01:23:41.889  
在你自己的應用裏

01:23:41.955 --> 01:23:44.691  
只需雙擊側邊按鈕即可購買

01:23:45.926 --> 01:23:48.462 
開發一個Watch應用只是第一步

01:23:48.662 --> 01:23:50.964 
另一件重要的事是使用戶易於

01:23:51.031 --> 01:23:52.999 
發現和安裝你的應用

01:23:53.367 --> 01:23:54.501 
爲了幫助你實現這點

01:23:54.568 --> 01:23:57.037 
在iOS X新的
Watch Face Gallery中

01:23:57.104 --> 01:24:01.141 
含有一整個部分專門用來顯示
所有你的應用

01:24:01.942 --> 01:24:05.312 
只需幾個簡單的步驟就能創建
一個complication bundle

01:24:05.379 --> 01:24:08.081 
使應用出現在錶盤圖庫中

01:24:08.615 --> 01:24:10.951 
當拿到新表時
你第一眼就會看到錶盤圖庫

01:24:11.018 --> 01:24:14.188 
在成功配對之後
顯示complications

01:24:14.254 --> 01:24:17.457 
來自你iPhone上每天
經常使用的應用

01:24:17.991 --> 01:24:21.395 
這就讓安裝應用 變得非常簡單

01:24:21.461 --> 01:24:23.230 
並添加到他們的錶盤上

01:24:24.164 --> 01:24:26.800 
我們竭盡所能爲你提供所需要
的全部工具 幫你創建

01:24:26.867 --> 01:24:30.237  
非常棒的、引人注目的、
可控性強的、響應式的應用

01:24:30.304 --> 01:24:32.439  
並且我們迫不及待想看到你
要如何利用它們

01:24:32.573 --> 01:24:35.809  
爲了讓你瞭解這將如何在
watchOS中強化你的應用

01:24:35.876 --> 01:24:39.112  
Eliza Block會給我們展示一個
Background App Refresh的演示

01:24:39.179 --> 01:24:41.582  
和一些新的圖形API Eliza

01:24:47.554 --> 01:24:52.092 
大家好 我這兒有一款基於
watchOS 2創建的應用

01:24:52.292 --> 01:24:55.495 
展示了一位名叫Max的熊貓朋友

01:24:55.629 --> 01:24:58.999 
它能告訴我他在不同時間的不同心情

01:24:59.233 --> 01:25:01.235 
那麼現在 你可以看到他很高興

01:25:02.336 --> 01:25:04.004 
如果我掛起應用

01:25:04.571 --> 01:25:07.975 
可看到有complication
仍然會告訴我他很高興

01:25:08.375 --> 01:25:12.880 
但這兒有個通知 說Max餓了

01:25:13.480 --> 01:25:15.816 
這個watchOS 2的應用

01:25:15.883 --> 01:25:18.285 
有一些問題 我現在要演示給你們看

01:25:18.385 --> 01:25:20.821 
首先 如果我不理會這個通知

01:25:21.355 --> 01:25:25.492 
我的complication就不會更新
也不會體現出Max現在很餓

01:25:26.460 --> 01:25:31.999 
更糟糕的是 當我進入Dock
Dock中的應用快照

01:25:32.266 --> 01:25:35.269 
也沒有更新 所以我不能演示出

01:25:35.335 --> 01:25:40.307 
在app中所有界面都享有一致的數據

01:25:42.676 --> 01:25:47.147 
現在讓我們看看代碼
在watchOS 3中有一種

01:25:47.214 --> 01:25:48.448 
簡單新方法來處理該問題

01:25:49.783 --> 01:25:52.619 
在擴展委託中有一個單一點管道

01:25:52.719 --> 01:25:56.089 
叫做處理和後臺任務
可以完美地更新

01:25:56.156 --> 01:25:58.592 
所有界面 當數據變化時

01:25:59.393 --> 01:26:01.929 
在快照刷新後臺任務中

01:26:02.095 --> 01:26:05.365 
我只需要添加兩行代碼
就能處理這兩個問題

01:26:05.432 --> 01:26:10.170 
第一行代碼更新界面上的
當前狀態

01:26:11.772 --> 01:26:14.808 
第二行代碼刷新
complication

01:26:16.243 --> 01:26:17.978 
當查看快照的時候

01:26:18.612 --> 01:26:21.882 
好了 這就解決了我們之前的問題

01:26:22.616 --> 01:26:23.784 
既然說到這兒了

01:26:23.851 --> 01:26:26.220 
那咱們就把這個應用變得
更有意思一些吧

01:26:26.286 --> 01:26:30.290 
顯然 你所看到的Max在
watchOS 2中只是個靜態圖像

01:26:30.457 --> 01:26:34.561 
但在watchOS 3中
可合成一個SceneKit場景

01:26:34.795 --> 01:26:36.330 
實現一些動畫

01:26:37.364 --> 01:26:39.766 
那麼我要切換到我的界面

01:26:40.167 --> 01:26:43.470 
這是我的應用界面 我要先
刪除這個圖片

01:26:44.104 --> 01:26:47.908 
然後拖一個SceneKit場景進來

01:26:50.978 --> 01:26:53.280 
我之前寫好了少量的代碼

01:26:53.347 --> 01:26:56.984 
只是給這個場景填充一些
SceneKit assets

01:26:57.217 --> 01:26:59.920 
然後創建一個出口
現在我要把它連上了

01:27:02.222 --> 01:27:04.091 
把它拖到SceneKit界面

01:27:05.592 --> 01:27:09.663 
現在 不僅能在應用中添加
SceneKit場景

01:27:09.730 --> 01:27:11.965 
還能在通知中添加場景

01:27:12.432 --> 01:27:15.402 
這可比文字通知有意思多了

01:27:15.936 --> 01:27:17.871 
我還要把一個場景拖到那兒去

01:27:19.106 --> 01:27:21.008 
我需要稍微調一下尺寸

01:27:22.376 --> 01:27:24.645 
鉤住出口

01:27:29.483 --> 01:27:32.953 
這就行了 我要再運行一下應用

01:27:33.987 --> 01:27:36.823 
這次 我們有希望能看到更多
動態畫面

01:27:46.166 --> 01:27:49.703 
那麼 我們就有了一個更養眼的
版本 因爲Max能跑了

01:27:50.370 --> 01:27:53.040 
我現在再掛起應用

01:27:54.141 --> 01:27:55.609 
等他變餓

01:28:00.113 --> 01:28:04.718 
我們看到一個非常沮喪的Max
摸着肚子 這個版本更直觀

01:28:08.655 --> 01:28:10.157 
我覺得這好玩兒多了

01:28:10.224 --> 01:28:12.059 
當我掛起通知時

01:28:12.960 --> 01:28:17.064 
complication如我們希望
那樣更新了 體現出了他的當前狀態

01:28:17.564 --> 01:28:19.166 
如果我在Dock中查看

01:28:19.666 --> 01:28:22.069 
你會看到快照也更新了

01:28:22.135 --> 01:28:24.137 
體現出他餓了 不高興了

01:28:24.204 --> 01:28:26.673 
這只是能實現的很小一
部分新功能

01:28:26.740 --> 01:28:29.142 
用watchOS 3提供的新API

01:28:29.209 --> 01:28:31.044 
我們非常期待你們會
創造出什麼

01:28:31.111 --> 01:28:35.115 
接下來 讓我們請Jim Young
上臺來講一下tvOS

01:28:42.556 --> 01:28:43.390 
謝謝Eliza

01:28:44.057 --> 01:28:47.327 
自App Store在Apple TV上線以來
我們一直很興奮

01:28:47.394 --> 01:28:48.695 
就在去年十月

01:28:49.630 --> 01:28:51.965 
因爲我們堅信TV的未來屬於應用

01:28:52.366 --> 01:28:54.468 
從那一刻起 你們就忙於

01:28:55.536 --> 01:29:00.073 
讓6000多個應用在App Store
上架 其中包括娛樂應用、遊戲應用、

01:29:00.274 --> 01:29:03.043 
保健和健身應用、教育應用等等

01:29:03.577 --> 01:29:06.513 
現在讓我們談談這對於tvOS
的開發意味着什麼

01:29:07.614 --> 01:29:09.416 
首先 你已經很熟悉它了

01:29:09.583 --> 01:29:11.952 
你可以使用你已經掌握的
工具和語言

01:29:12.920 --> 01:29:16.857 
而且tvOS包含你已經熟悉的
iOS的基礎框架

01:29:17.658 --> 01:29:21.161 
此外 我們還有一些針對tvOS
創建的新框架

01:29:22.429 --> 01:29:25.599 
還有你創建很棒的應用時所需要
的所有基礎支持

01:29:26.133 --> 01:29:28.535 
有豐富多媒體資源
幫你創建音頻/視頻應用

01:29:29.536 --> 01:29:32.039 
當然 我們對遊戲應用的
支持也非常出色

01:29:33.607 --> 01:29:36.043 
而且我們也將更多的特性
引入到平臺中

01:29:36.343 --> 01:29:37.911 
現你可用PhotoKit創建

01:29:37.978 --> 01:29:41.181 
能在大屏幕中顯示用戶的
圖片的應用

01:29:42.349 --> 01:29:45.385 
並且使添加明暗變化
變得非常簡單—

01:29:46.053 --> 01:29:47.988 
請看一下明暗效果

01:29:49.857 --> 01:29:52.359 
這樣的技術相當豐富
這個列表只列出了其中一部分

01:29:52.426 --> 01:29:53.660 
還有一大批沒有列出來

01:29:56.430 --> 01:29:58.365 
現在讓我們談談這些技術的使用

01:29:58.432 --> 01:30:01.668 
並把它們結合在一起 在tvOS中
實現一種優秀的用戶體驗

01:30:02.769 --> 01:30:04.238 
我想先從Touch談起

01:30:04.905 --> 01:30:07.274 
在設計tvOS時 我們很清楚
需要引入

01:30:07.341 --> 01:30:09.843 
一種優秀的Touch體驗 到客廳

01:30:10.477 --> 01:30:12.713 
現在 Touch必須讓人感到
流暢和連貫

01:30:13.113 --> 01:30:15.082 
要精準和有趣

01:30:15.916 --> 01:30:19.186 
這在客廳裏是極具挑戰性的
因爲TV就在10英尺之內

01:30:20.954 --> 01:30:22.589 
讓我們看看該如何解決這個問題

01:30:23.423 --> 01:30:24.892 
我們更新了UIKit

01:30:25.158 --> 01:30:28.028 
所以大屏幕上的所有控件和視圖
看起來都很漂亮

01:30:29.062 --> 01:30:33.300 
我們添加UIFocus 可定義UI
中的哪些元素可設定爲焦點

01:30:34.268 --> 01:30:38.472 
更新了UIMotionEffect
可獲取聚焦引擎的輸入

01:30:39.473 --> 01:30:41.375 
以上這些都可以直接連接

01:30:41.441 --> 01:30:43.544 
在用戶遠程操作

01:30:43.610 --> 01:30:45.145 
和在大屏幕上看到的結果之間

01:30:46.813 --> 01:30:49.449 
好消息是我們已經幫你們
做了大量的工作

01:30:50.050 --> 01:30:52.085 
你們的UIKit app
可免費使用該成果

01:30:53.654 --> 01:30:56.890 
如果你現在還有基於服務器、
用於提交內容的app

01:30:56.957 --> 01:30:59.660 
我們有很多不錯的應用 就像
Showtime頻道顯示的這個一樣

01:30:59.726 --> 01:31:02.996 
我們有一種技術叫TVMLKit
還有一個框架叫TVMLKit

01:31:03.931 --> 01:31:07.768 
TVMLKit是我們專門爲tvOS
開發的一個新的高級框架

01:31:08.635 --> 01:31:10.637 
它建立在UIKit的基礎上

01:31:10.704 --> 01:31:13.707 
所以你能獲得我們剛剛展示的
所有無縫Touch體驗

01:31:15.042 --> 01:31:17.444 
我們提供大量模板 你們甚至
可以提供

01:31:17.511 --> 01:31:20.080 
自己的自定義模板和本地控件

01:31:21.815 --> 01:31:23.450 
TVMLKit允許團隊創建

01:31:23.517 --> 01:31:26.253 
漂亮的、高度程式化的、
自定義應用

01:31:26.320 --> 01:31:27.554 
在短時間內

01:31:29.556 --> 01:31:33.827 
現在讓我們談談如何將這種體驗
擴展到Apple TV之外

01:31:33.894 --> 01:31:36.263 
通過整合其他Apple設備

01:31:37.531 --> 01:31:40.934 
可以用CloudKit很方便地在
雲中保存應用和遊戲狀態

01:31:41.835 --> 01:31:44.471 
用戶可以很方便地在Apple TV
上開始遊戲

01:31:44.738 --> 01:31:47.975 
然後在iPhone或iPad上再
繼續遊戲

01:31:52.479 --> 01:31:56.049 
我們還看到了一些不錯的應用
可同時使用多個Apple設備

01:31:56.350 --> 01:31:58.619 
比如FreshPlanet中的
SongPop Party

01:31:58.685 --> 01:32:00.854 
每個家庭成員都可以
用自己的iPhone

01:32:01.221 --> 01:32:03.457 
來回答音樂相關的提問

01:32:05.359 --> 01:32:08.128 
爲了讓不同的設備更好地進行溝通

01:32:08.195 --> 01:32:10.864 
我們在平臺中引入了
Multipeer Connectivity

01:32:11.131 --> 01:32:12.466 
只需要少量代碼

01:32:17.504 --> 01:32:21.341 
就能很容易地連接運行在多個
設備上的應用

01:32:23.243 --> 01:32:25.712 
今天早晨 我們發佈了新的
Apple TV Remote

01:32:26.213 --> 01:32:28.582 
現在 你的家人只要有iPhone

01:32:28.649 --> 01:32:30.651 
就相當於有
Apple TV Remote了

01:32:32.186 --> 01:32:35.355 
你的apps無論看起來還是用
起來都跟Siri Remote很像

01:32:35.422 --> 01:32:37.925 
並且我們還利用屏幕優勢
增加了更多功能

01:32:38.825 --> 01:32:41.428 
Now Playing在屏幕上
提供了一整套的

01:32:41.495 --> 01:32:43.197 
重播控制和媒體封面

01:32:44.364 --> 01:32:47.534 
就像iOS在鎖屏時顯示的畫報
和控制一樣

01:32:47.601 --> 01:32:49.469 
使用Media Player Remote

01:32:49.536 --> 01:32:52.206 
我經常用Media Player Remote
Command API

01:32:52.706 --> 01:32:54.575 
把信息添到Remote app中

01:32:56.143 --> 01:32:58.779 
這個應用還提供遊戲設定的佈局

01:32:59.246 --> 01:33:02.349 
在玩兒遊戲時 這個新應用可以
當做微型遊戲手柄

01:33:02.983 --> 01:33:04.718 
就像Siri Remote一樣

01:33:05.152 --> 01:33:07.054 
要實現多個微型遊戲手柄

01:33:07.120 --> 01:33:10.123 
你需要設置一個
Info.plist key

01:33:12.326 --> 01:33:14.761 
除了Siri Remote和新的
Remote app之外

01:33:14.895 --> 01:33:17.497 
tvOS還支持MFi遊戲控制器

01:33:18.832 --> 01:33:19.700 
今年秋季

01:33:19.766 --> 01:33:22.970  
tvOS將同時支持多達四個
遊戲控制器

01:33:29.142 --> 01:33:30.711  
但我們不想止步於此

01:33:31.311 --> 01:33:33.480  
我們想做出更出色的遊戲

01:33:33.747 --> 01:33:36.984  
我們想做出需要這種控制器的遊戲

01:33:37.885 --> 01:33:41.889  
因此我們很高興地宣佈
我們將更新控制器政策

01:33:42.756 --> 01:33:45.792  
你可以限定你的遊戲必須使用控制器

01:33:53.734 --> 01:33:56.170  
tvOS會查看所需要的
控制器是否存在

01:33:56.236 --> 01:33:58.105  
如果必要的話 會提醒用戶

01:33:59.806 --> 01:34:03.477 
這是tvOS的進步 我們非常高興
能取得這樣的成績

01:34:03.544 --> 01:34:06.213 
我們會舉辦很多tvOS工程師參
與的實踐活動和研討會

01:34:06.280 --> 01:34:07.681 
歡迎你們參加

01:34:08.081 --> 01:34:09.983 
接下來
我們歡迎Geoff Stahl上臺

01:34:10.050 --> 01:34:12.352 
談一談圖形技術 Geoff

01:34:16.156 --> 01:34:16.990 
謝謝Jim

01:34:18.525 --> 01:34:19.693 
我要談談繪圖

01:34:19.760 --> 01:34:23.030 
我要談一下圖形學的幾個領域

01:34:23.197 --> 01:34:25.566  
今天我們要談一些了不起的技術

01:34:25.632 --> 01:34:26.934  
我要從色彩說起

01:34:29.002 --> 01:34:34.308 
我們爲最新的iPads和Macs
打造了令人驚歎的新顯示器

01:34:34.842 --> 01:34:38.545 
可以完全還原色彩

01:34:39.379 --> 01:34:41.415 
其實DisplayMate展現的是

01:34:41.481 --> 01:34:46.153 
“色彩的精確程度是人眼不可
辨別的”

01:34:47.254 --> 01:34:50.257 
那麼我們要如何實現 嗯
這其實是色飽和度

01:34:51.124 --> 01:34:54.294 
絕大多數顯示屏都採用了
sRGB色飽和度

01:34:54.361 --> 01:34:55.796 
範圍很窄

01:34:55.863 --> 01:34:59.099 
不能準確還原我們日常生活中能
看到的所有色彩

01:34:59.166 --> 01:35:01.268 
比如花兒和畫兒的色彩

01:35:01.335 --> 01:35:03.203 
亦或是你穿的衣服的色彩

01:35:04.338 --> 01:35:07.608 
所以我們步入了範圍更廣的P3
色飽和度的時代

01:35:07.674 --> 01:35:11.245 
可以真正實現色彩的精準還原

01:35:11.311 --> 01:35:13.113 
並把這些現實的對象渲染出來

01:35:14.915 --> 01:35:18.151 
但我們並沒有止步不前 我們
將色彩做到極致

01:35:18.418 --> 01:35:22.289 
從系統API到系統應用

01:35:22.356 --> 01:35:24.458 
我們始終致力於顯示更深、
更廣的色域

01:35:24.758 --> 01:35:29.062 
如果app採用了
UIImageView或UIView

01:35:29.463 --> 01:35:32.065 
可以免費使用 自動獲取

01:35:32.499 --> 01:35:35.736 
如果你要自己控制範圍更廣的色彩

01:35:35.802 --> 01:35:38.138 
我們還提供API

01:35:39.439 --> 01:35:41.608 
當然 我們有一個很棒的色彩
捕捉工具

01:35:41.842 --> 01:35:44.711 
我們最新的攝像頭支持捕捉更
深、更廣的色彩

01:35:44.945 --> 01:35:48.115 
我們用API獲取原始圖像

01:35:48.849 --> 01:35:52.819 
而且現在還可以用
API LivePhotos來獲取

01:35:54.087 --> 01:35:54.922 
以上說的是色彩

01:36:00.861 --> 01:36:02.696 
現在我要談一談技術

01:36:02.763 --> 01:36:05.933  
改變了產業走向 即Metal

01:36:06.767 --> 01:36:10.804  
我們在兩年前引入了Metal
目前已被廣泛使用

01:36:11.371 --> 01:36:13.207  
請記住 當我們開發Metal時

01:36:13.273 --> 01:36:16.443  
我們優化它時 我們同時也
考慮到了我們的設備

01:36:16.510 --> 01:36:18.879  
所以我們能很快地創新

01:36:19.213 --> 01:36:22.683  
用Metal細分曲面技術這樣的高
質量的表面處理技術

01:36:22.749 --> 01:36:25.152  
來實現之前從未實現的渲染精確度

01:36:26.019 --> 01:36:27.988  
或Metal功能專業化

01:36:28.088 --> 01:36:32.359  
結合S碼 可以創建一套着色器

01:36:32.459 --> 01:36:35.896  
自動處理材質並照亮場景中的道具

01:36:37.431 --> 01:36:39.499 
對於低內存的渲染目標

01:36:39.566 --> 01:36:42.669 
可採用碎片兌現中的結構

01:36:42.736 --> 01:36:46.340 
來減少應用或源代碼中使用的內存

01:36:46.406 --> 01:36:47.975 
這就允許應用

01:36:48.141 --> 01:36:51.478 
有一種專門的算法在Metal應用
中處理內存

01:36:54.648 --> 01:36:59.419 
Metal幾乎無處不在 成千上萬的
設備都使用Metal

01:37:00.320 --> 01:37:02.990 
我們的關鍵圖形框架
和主遊戲引擎

01:37:03.056 --> 01:37:04.157 
就建立在它的基礎上

01:37:05.626 --> 01:37:09.663 
所以 無論是用高級API 還是直
接在Metal中編程

01:37:09.730 --> 01:37:13.233 
都能獲得我們創建的所有
的性能優化

01:37:14.568 --> 01:37:15.869 
關於Metal的另外一點是

01:37:15.936 --> 01:37:19.907 
它是我們遊戲生態系統的
基礎技術之一

01:37:20.140 --> 01:37:21.408 
因此讓我們來談一談遊戲

01:37:23.644 --> 01:37:26.980 
在過去幾年中 我們創建了偉大
的遊戲生態系統

01:37:27.047 --> 01:37:30.784 
目的是創建API和工具

01:37:30.851 --> 01:37:34.888 
把你對於遊戲的想法付諸實踐

01:37:35.155 --> 01:37:37.024 
今天在這裏我想有重點地說幾個

01:37:38.258 --> 01:37:40.460  
第一個是上午說過的
Replay Kit

01:37:40.861 --> 01:37:44.364  
我們去年引入了Replay Kit
應用起來非常簡單

01:37:44.565 --> 01:37:48.368 
可以讓你的用戶錄製遊戲過程

01:37:49.703 --> 01:37:53.140 
編輯錄像 然後分享給他們的朋友

01:37:54.107 --> 01:37:58.378  
今年 我們會更上一層樓
將推出ReplayKit Streaming

01:38:00.047 --> 01:38:02.316  
目前 Replay Kit可以現場直播

01:38:02.382 --> 01:38:05.819  
在支持ReplayKit Streaming
Extension服務的設備上

01:38:05.886 --> 01:38:09.823  
這就允許用戶不僅僅是—

01:38:09.990 --> 01:38:14.061 
不僅僅是能和朋友分享
還能通過Internet實時發佈

01:38:14.127 --> 01:38:16.730 
自動地 通過ReplayKit
Live Streaming

01:38:16.797 --> 01:38:18.565 
並且——是絕對的

01:38:23.370 --> 01:38:24.605 
甚至更好

01:38:24.671 --> 01:38:27.574 
如果你已經使用了Replay Kit
只需要添加三行代碼

01:38:27.641 --> 01:38:32.346 
非常簡單 可以真正擴展應用
的社交覆蓋度

01:38:32.880 --> 01:38:35.349 
說到社交 讓我們談一談
Game Center

01:38:37.384 --> 01:38:40.320  
我們將改變Game Center
Multiplayer工作模式

01:38:40.387 --> 01:38:42.689  
目前在最新版的OS中

01:38:42.890 --> 01:38:45.826  
只要能發信息就能邀請

01:38:45.893 --> 01:38:48.862  
所以你的用戶可以邀請任何
通過信息能聯繫到的人

01:38:48.929 --> 01:38:52.432  
就是這麼簡單 發個信息就可以了

01:38:53.600 --> 01:38:54.601 
而且最酷的是

01:38:54.668 --> 01:38:57.437 
如果你已經在遊戲中使用了
多玩家API

01:38:57.504 --> 01:39:00.974 
你甚至不需要做任何改動
在最新版的OS中就可以這樣運行了

01:39:02.609 --> 01:39:04.244 
並且我們不會止步不前

01:39:04.311 --> 01:39:08.849 
我們將向Game Center中
添加新API

01:39:08.916 --> 01:39:10.584 
Game Center Sessions

01:39:10.651 --> 01:39:14.521 
Game Center Sessions
營造了一種堅挺的分享體驗

01:39:14.588 --> 01:39:16.056 
用戶可以隨意進出

01:39:16.323 --> 01:39:19.793 
意思是你要在設計遊戲時充分
考慮到移動設備用戶

01:39:19.860 --> 01:39:22.563 
進入和離開應用的方式

01:39:22.729 --> 01:39:26.366 
這就需要一個移動設備的多玩家
遊戲的新典範

01:39:28.702 --> 01:39:30.604 
最後 說一下GameplayKit

01:39:30.704 --> 01:39:33.340 
GameplayKit是一個
基於組件的API

01:39:33.407 --> 01:39:36.143 
可以實例化和自定義這些組件

01:39:36.210 --> 01:39:38.512 
併爲遊戲對象構建模塊

01:39:38.579 --> 01:39:40.514 
把難題留給我們來解決吧

01:39:41.648 --> 01:39:44.518 
接下來
我要邀請Norman Wang上臺

01:39:44.585 --> 01:39:48.555 
講解這些組件和Xcode
gameplay工具的展示

01:39:54.228 --> 01:39:55.062 
謝謝Geoff

01:39:55.896 --> 01:40:00.067 
我想向你們展示在Xcode 8中
創建一個遊戲有多快

01:40:00.334 --> 01:40:02.669 
這是一個我正在開發的遊戲項目

01:40:03.070 --> 01:40:06.106 
這是一款競技性遊戲 角色有
英雄和敵人

01:40:06.173 --> 01:40:08.108 
互相投擲彩繪氣球

01:40:08.742 --> 01:40:12.779 
我現已使用了今年發佈的
新API中的SpriteKit和GameplayKit

01:40:12.946 --> 01:40:16.650 
你可以看到 遊戲需要三個主要元素

01:40:16.984 --> 01:40:20.153 
一張地圖、一個英雄和遊戲設定

01:40:21.021 --> 01:40:25.425 
我已經實現了英雄的移動和動畫

01:40:25.492 --> 01:40:29.329 
但毫無疑問 缺失了小島邊界的衝突

01:40:29.396 --> 01:40:30.864 
那麼讓我們來解決一下

01:40:32.466 --> 01:40:35.869 
打開Xcode對象 看一下源代碼

01:40:36.303 --> 01:40:38.872 
我已經寫了一些遊戲設定行爲

01:40:38.939 --> 01:40:42.075 
使用了GameplayKit提供的
GKComponent

01:40:42.142 --> 01:40:43.744 
比如這個戰鬥組件

01:40:44.111 --> 01:40:49.316 
在Xcode 8中 我可以公開
任何一個類屬性

01:40:50.684 --> 01:40:53.587 
是在2D編輯器中定義的類

01:40:53.654 --> 01:40:54.955 
然後我可以自定義

01:40:55.022 --> 01:40:58.325 
在場景中這個行爲何時與
一個實體相關聯

01:40:59.092 --> 01:41:03.330 
我用了新版的碎片地圖編輯器
來創建小島地圖

01:41:03.931 --> 01:41:04.965 
因此在遊戲中

01:41:05.032 --> 01:41:08.101 
有三個不同的碎片集

01:41:08.368 --> 01:41:10.704 
分別是沙子、水和草

01:41:11.271 --> 01:41:16.610 
我不僅可以指定內部和外部的碎片

01:41:16.677 --> 01:41:18.679 
還可以引入差異

01:41:18.846 --> 01:41:21.715 
所以這裏的這個紅邊 比如說

01:41:21.782 --> 01:41:25.319 
對於這個獨立的碎片圖片
如果我想添加一個新外觀

01:41:25.385 --> 01:41:27.154 
去掉小石頭

01:41:27.221 --> 01:41:30.023 
我只需要把它從Media Library
中拽進來

01:41:30.224 --> 01:41:32.125 
現在這個碎片集就完成了

01:41:32.693 --> 01:41:35.128 
現在讓我來展示一下如何使用它

01:41:35.462 --> 01:41:38.165 
那麼我們再切換到小島地圖

01:41:40.501 --> 01:41:44.037 
小島是用新的碎片地圖功能創建的

01:41:44.104 --> 01:41:45.439 
由SpriteKit提供的

01:41:45.706 --> 01:41:49.176 
所以要修改它 我只需要
選擇碎片地圖

01:41:49.243 --> 01:41:50.310 
雙擊

01:41:50.377 --> 01:41:52.946 
選擇激活的碎片

01:41:53.280 --> 01:41:56.350 
現在 我覺得小島看起來
有點兒太單調

01:41:56.517 --> 01:42:02.022 
要進行更多修改 我只需要
繪製各個遊戲關卡

01:42:02.823 --> 01:42:05.626 
Xcode會自動繪製正確的碎片

01:42:05.692 --> 01:42:08.428 
使相鄰的元素得以匹配
就這麼簡單

01:42:08.962 --> 01:42:11.932 
現在我覺得我實現了我想要的
小島的效果

01:42:11.999 --> 01:42:14.401 
讓我們看一下這裏的一些
遊戲設定元素

01:42:14.668 --> 01:42:20.140 
要武裝我們的英雄
讓他有一些動作和動畫

01:42:20.207 --> 01:42:22.843 
我已經關聯了玩家輸入組件

01:42:22.910 --> 01:42:24.311 
和動作組件

01:42:24.711 --> 01:42:29.082 
要讓玩家待在小島的邊界之內

01:42:29.183 --> 01:42:32.419 
我只需要添加一個衝突組件

01:42:32.719 --> 01:42:35.622 
這樣 它會自動創建一個實體

01:42:35.689 --> 01:42:37.591 
爲我們的英雄和小島

01:42:37.658 --> 01:42:40.294 
基於當前設置好的碎片集

01:42:41.261 --> 01:42:44.831 
要使玩家能投擲水球

01:42:44.898 --> 01:42:47.634 
我只需要添加戰鬥組件

01:42:47.935 --> 01:42:52.773 
請留意一下 戰鬥組件類是
如何公開健康值的

01:42:52.840 --> 01:42:56.176 
現在是可見的了
我可以給它一個自定義值

01:42:56.243 --> 01:42:59.246 
比如說 我可以設置它的值是2

01:42:59.346 --> 01:43:01.548 
而不是使用默認值1

01:43:02.349 --> 01:43:08.055 
另外 我設置了一個雄蜂投
擲彩繪氣球

01:43:08.288 --> 01:43:10.390 
還有一個敵人 在場景中

01:43:10.924 --> 01:43:13.360 
要賦予敵人同樣的戰鬥力

01:43:13.427 --> 01:43:16.663 
撿起彩繪氣球並扔向我

01:43:16.997 --> 01:43:19.333 
我要添加同樣的戰鬥組件

01:43:19.566 --> 01:43:21.235 
要讓遊戲成爲一個公平的遊戲

01:43:21.301 --> 01:43:23.704 
我會給敵人設置同樣的健康
等級 即2級

01:43:23.770 --> 01:43:26.340 
而不是使用默認值1

01:43:27.708 --> 01:43:30.043 
現在 我覺得這個關卡的設置
非常棒

01:43:30.110 --> 01:43:33.213 
讓我們運行一下 看一下效果

01:43:34.414 --> 01:43:37.918 
雄蜂會隨機投下彩繪氣球

01:43:37.985 --> 01:43:40.454 
氣球戰鬥即將打響

01:43:40.521 --> 01:43:42.689 
那麼看起來所有的元素都齊了

01:43:43.056 --> 01:43:47.995 
因此在Xcode 8中 可以很輕鬆
地實現遊戲關卡的設置

01:43:48.061 --> 01:43:50.797 
並關聯所有遊戲設置邏輯

01:43:51.899 --> 01:43:52.833 
相當迅捷

01:43:52.900 --> 01:43:55.369 
因爲我用了SpriteKit和
GameplayKit

01:43:55.435 --> 01:43:58.472 
我的遊戲可以在所有Apple
平臺上順利運行

01:43:59.173 --> 01:44:01.508 
謝謝大家 現在讓我們把舞臺
交還給Andreas

01:44:06.446 --> 01:44:07.381 
謝謝Norman

01:44:07.681 --> 01:44:11.418 
好了 讓我們快速回顧一下
我們剛談到的幾個重點

01:44:12.553 --> 01:44:14.655 
現在有四個Apple OS平臺

01:44:14.721 --> 01:44:17.658 
都有自己的App Store
你可以在裏面發佈自己的想法

01:44:18.325 --> 01:44:21.862 
而且今天 我們增加了豐
富的新擴展接口

01:44:21.929 --> 01:44:24.965 
可以更深層地連接我們的OS平臺

01:44:25.365 --> 01:44:26.567 
也許最重要的是

01:44:26.633 --> 01:44:29.369 
我們建議你考慮創建一
個iMessage App

01:44:29.570 --> 01:44:32.172 
並把你的app與SiriKit整
合在一起

01:44:32.940 --> 01:44:36.210 
但這只是今天我們要發佈的
衆多API中的兩個

01:44:36.877 --> 01:44:38.378 
並且全部支持

01:44:38.445 --> 01:44:41.381 
都由新版Xcode IDE提供

01:44:41.548 --> 01:44:44.084 
Xcode 8的運行平臺包括
Mac OS El Capitan

01:44:44.151 --> 01:44:45.118 
和Sierra

01:44:45.219 --> 01:44:48.288 
當然 也支持Swift 3的開發

01:44:49.256 --> 01:44:51.491  
現在 這些技術都可以下載了

01:44:51.558 --> 01:44:53.994  
今天 從WWDC Attendee Portal中

01:44:54.061 --> 01:44:56.730  
那麼你可以在今年下半年
捷足先登

01:44:56.797 --> 01:44:59.600  
當我們發佈產品時

01:44:59.666 --> 01:45:02.669  
你就可以爲你的用戶創建
更強大、更獨特的應用

01:45:03.770 --> 01:45:06.039 
同時 留意一下新版Swift
Playgrounds app

01:45:06.106 --> 01:45:08.709 
我們將它納入了iOS X
Developer Preview

01:45:08.775 --> 01:45:10.477 
我想你們一定會獲得很多樂趣

01:45:10.544 --> 01:45:12.579 
也許你會考慮創建額外的內容

01:45:12.646 --> 01:45:15.315 
爲剛開始學習如何使用Swift
編程的孩子們

01:45:16.650 --> 01:45:18.852 
此次會議中有許多機會

01:45:18.919 --> 01:45:21.021 
來更多地瞭解我們今天
所發佈的一切

01:45:21.088 --> 01:45:24.091 
有100多場研討會和很多
實踐活動

01:45:24.157 --> 01:45:26.894 
你可以跟現場的每個工程師
一對一地進行交流

01:45:26.960 --> 01:45:29.329 
他們會在這裏回答你的所有提問

01:45:30.130 --> 01:45:33.066 
我希望你們能盡情享受此次
研討會 下半周再見