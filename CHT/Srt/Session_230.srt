00:00:20.020 --> 00:00:26.226
用CallKit提升VoIP應用

00:00:32.399 --> 00:00:33.433
大家好

00:00:33.800 --> 00:00:35.335
歡迎來到演講230

00:00:35.536 --> 00:00:38.138
我是Sirisha
一名CallKit的工程師

00:00:38.605 --> 00:00:40.974
今天和我一起的還有
我的同事Stewart和Nick

00:00:41.308 --> 00:00:44.912
今天我們很興奮地向大家
介紹一個全新的框架

00:00:45.412 --> 00:00:46.380
CallKit

00:00:49.383 --> 00:00:51.985
你們有很多人已經編寫過VoIP應用

00:00:52.719 --> 00:00:55.055
你們改變了電話通訊的面貌

00:00:55.122 --> 00:00:56.790
讓世界變得更小

00:00:57.891 --> 00:01:01.662
你想讓你的應用成爲用戶
的首要選擇

00:01:01.728 --> 00:01:05.331
他們用你的應用在iOS上接聽電話
我們想爲你們提供這方面的支持

00:01:06.200 --> 00:01:10.103
CallKit是一個框架 能夠大大提升
第三方VoIP應用

00:01:10.170 --> 00:01:11.839
使它和原裝應用的體驗一樣好

00:01:18.879 --> 00:01:19.713
謝謝

00:01:20.614 --> 00:01:22.749
因爲你們很多人已經
編寫過VoIP應用

00:01:22.816 --> 00:01:25.853
接下來的40分鐘中
假設我們創建了

00:01:25.919 --> 00:01:28.021
一個全新的應用
叫做Speakerbox

00:01:28.655 --> 00:01:31.358
Speakerbox是一個簡單的應用

00:01:31.425 --> 00:01:35.929
能在iOS上撥打與接聽電話
就像現在的iOS上的軟件一樣

00:01:37.097 --> 00:01:39.666
在開始之前
先讓我設置一個場景

00:01:40.434 --> 00:01:42.369
Jane一直在歐洲旅遊

00:01:42.970 --> 00:01:45.138
關心她的父母想要聯繫她

00:01:45.205 --> 00:01:46.673
以確定她現在很好

00:01:47.508 --> 00:01:50.143
因爲是國際長途
他們要使用Speakerbox

00:01:50.210 --> 00:01:51.311
給她打電話

00:01:52.479 --> 00:01:55.649
現在看看給Jane的來電是什麼樣子

00:01:57.184 --> 00:01:58.719
這是Jane的鎖屏屏幕

00:01:59.653 --> 00:02:01.588
首先她收到爸爸的iMessage

00:02:02.222 --> 00:02:05.792
在她還沒有回覆的時候
就收到了媽媽打進來的電話

00:02:07.194 --> 00:02:08.996
Jane不能分辨

00:02:09.062 --> 00:02:12.666
iMessage通知

00:02:12.733 --> 00:02:15.402
與打入電話通知的區別

00:02:16.103 --> 00:02:19.139
因爲現在的VoIP電話

00:02:19.373 --> 00:02:20.674
它僅僅是一個通知

00:02:21.642 --> 00:02:23.877
如果Jane想接聽這個電話

00:02:24.178 --> 00:02:27.481
她要打開Speakerbox
輸入密碼

00:02:27.848 --> 00:02:31.785
連接到應用上去
然後開始講話

00:02:34.154 --> 00:02:38.559
這是Jane開鎖後的屏幕
體驗很糟糕

00:02:39.459 --> 00:02:41.061
她收到媽媽打來的電話

00:02:43.130 --> 00:02:45.332
你會不小心錯過這個電話嗎？

00:02:46.400 --> 00:02:48.502
有可能
它僅僅是一個頂部的橫條

00:02:49.736 --> 00:02:51.338
那麼是不是這樣更好呢？

00:02:51.405 --> 00:02:55.809
如果給Jane的來電是這個樣子

00:02:56.743 --> 00:02:58.512
這是Jane的鎖屏屏幕

00:02:59.146 --> 00:03:00.914
她收到媽媽打來的電話

00:03:01.481 --> 00:03:03.450
注意全屏本地用戶界面

00:03:08.822 --> 00:03:12.960
Jane滑動一下就可以
接聽電話和媽媽交談了

00:03:14.528 --> 00:03:18.632
而且在解鎖屏幕上也是這樣

00:03:18.699 --> 00:03:21.668
同樣豐富的本地用戶界面
上面有接聽和拒接按鈕

00:03:21.735 --> 00:03:23.704
而且預先設置好的鈴聲會響起

00:03:29.910 --> 00:03:31.111
這樣不是更好嗎？

00:03:31.178 --> 00:03:34.047
如果VoIP電話能夠和系統中
的其它電話互動

00:03:34.982 --> 00:03:38.218
例如本地電話、
FaceTime語音電話

00:03:38.685 --> 00:03:40.521
或者另一個VoIP電話

00:03:41.922 --> 00:03:46.460
甚至VoIP電話能夠從通話記錄、
常用聯繫人、

00:03:46.793 --> 00:03:48.595
甚至是聯繫人中撥打電話

00:03:49.830 --> 00:03:52.900
或者從Siri、
Bluetooth上撥打電話

00:03:53.534 --> 00:03:57.905
甚至有請勿打擾和黑名單等功能

00:03:58.705 --> 00:03:59.940
這就是CallKit

00:04:09.716 --> 00:04:12.886
今天我們將講解CallKit的架構、

00:04:13.287 --> 00:04:16.490
打入電話流程和打出電話流程

00:04:16.557 --> 00:04:19.026
最後詳細講解一下它的API

00:04:19.560 --> 00:04:20.627
現在開始

00:04:21.361 --> 00:04:25.265
好 這兒我們有所有的系統服務
例如藍牙、

00:04:25.332 --> 00:04:28.068
Siri、CarPlay和本地用戶界面

00:04:28.402 --> 00:04:31.772
這兒有全部的VoIP應用
例如Speakerbox

00:04:32.506 --> 00:04:34.408
它們是兩個獨立的實體

00:04:34.708 --> 00:04:38.645
系統和服務不能獲知
對Speakerbox進行的調用

00:04:39.913 --> 00:04:44.017
在iOS 10中我們已經在
系統服務中採用了CallKit

00:04:44.718 --> 00:04:48.889
現在系統通過CallKit
可以獲知對藍牙的調用

00:04:49.923 --> 00:04:52.693
如果Speakerbox想要相似的體驗

00:04:52.759 --> 00:04:54.294
它要使用CallKit

00:04:55.095 --> 00:04:58.732
系統現在通過CallKit可以獲知
對Speakerbox做出的調用

00:04:59.299 --> 00:05:03.604
然後系統會給其它服務
公佈這些調用

00:05:04.805 --> 00:05:07.307
讓我們深入講解一下
Speakerbox

00:05:08.876 --> 00:05:11.512
現在我們有Speakerbox
和它的所有代碼

00:05:12.145 --> 00:05:15.148
它和網絡通信
它有自己的應用用戶界面

00:05:15.916 --> 00:05:17.351
現在我們要連接CallKit

00:05:18.418 --> 00:05:21.288
在CallKit中我們關心
兩個主要的類

00:05:22.055 --> 00:05:24.424
第一個是CXProvider類

00:05:25.359 --> 00:05:27.861
這個類是Speakerbox用來

00:05:27.928 --> 00:05:31.431
讓系統獲知

00:05:31.498 --> 00:05:32.432
發生過的帶外通知

00:05:33.567 --> 00:05:36.170
第二個類是
CXCallController

00:05:36.970 --> 00:05:39.840
這個類是Speakerbox用來

00:05:39.907 --> 00:05:43.043
讓系統獲知本地用戶的操作

00:05:44.578 --> 00:05:48.448
讓我們詳細瞭解一下這兩個類
首先是供應商

00:05:49.216 --> 00:05:51.084
供應商 正如我剛纔說的

00:05:51.318 --> 00:05:55.522
是讓系統獲知帶外通知的一個類

00:05:55.989 --> 00:05:58.659
這些通知不是用戶的行爲

00:05:59.126 --> 00:06:01.995
他們實際是外來的事件 例如

00:06:02.062 --> 00:06:04.231
Speakerbox接到一個
打來的電話

00:06:05.098 --> 00:06:07.201
和CXCallController
對比一下

00:06:07.901 --> 00:06:11.371
CXCallController
是Speakerbox用來

00:06:11.438 --> 00:06:15.709
讓系統獲知來自應用內部請求的類

00:06:16.176 --> 00:06:18.478
它實際上是用戶行爲

00:06:19.580 --> 00:06:22.683
是內部事件 例如撥打電話的操作

00:06:24.284 --> 00:06:27.221
通過CallController
Speakerbox

00:06:27.287 --> 00:06:28.956
可以與系統的其它呼叫互動

00:06:30.190 --> 00:06:33.493
例如在一個本地電話通話時

00:06:33.560 --> 00:06:37.764
用戶想從Speakerbox界面
發起一個Speakerbox通話

00:06:39.233 --> 00:06:41.034
通過使用控制器

00:06:41.101 --> 00:06:43.570
系統會獲知發起通話的操作

00:06:43.871 --> 00:06:46.340
並且系統會通知
本地電話的供應商

00:06:46.406 --> 00:06:50.444
保持它的通話 從而讓
Speakerbox開始它的通話

00:06:52.212 --> 00:06:54.381
讓我們舉一些例子說明一下

00:06:55.482 --> 00:06:59.853
供應商用來報告帶外通知

00:07:00.187 --> 00:07:02.990
例如向Speakerbox發起的來電

00:07:03.924 --> 00:07:06.193
或者向外撥出的電話已經連接

00:07:06.894 --> 00:07:09.863
或者撥出的電話已被對方終止

00:07:11.064 --> 00:07:14.468
而控制器用來請求

00:07:14.735 --> 00:07:17.437
來自系統的操作 例如用戶想

00:07:17.504 --> 00:07:20.974
發起一個的通話
或者用戶想接聽

00:07:21.041 --> 00:07:25.479
Speakerbox的來電
或者結束Speakerbox的通話

00:07:27.347 --> 00:07:29.416
當供應商想和

00:07:29.483 --> 00:07:33.587
系統通信的時候
它使用CSXCallUpdate類

00:07:34.221 --> 00:07:36.256
當系統想讓Speakerbox

00:07:36.323 --> 00:07:38.125
和用戶互動的時候

00:07:38.292 --> 00:07:41.862
它使用CXAction類
通知Speakerbox

00:07:43.330 --> 00:07:46.033
控制器和系統通信時

00:07:46.099 --> 00:07:49.136
用戶的操作被
捆綁成CSTransaction

00:07:49.670 --> 00:07:51.972
以便讓系統獲知這些操作

00:07:53.941 --> 00:07:55.576
剛纔講了許多

00:07:55.843 --> 00:07:59.546
讓我們看看打入電話的流程

00:08:00.814 --> 00:08:04.852
我們有Speakerbox
Jane接到了來自媽媽的呼叫

00:08:05.652 --> 00:08:10.390
呼叫來到Speakerbox以後
Speakerbox創建了CXCallUpdate

00:08:10.757 --> 00:08:12.960
並且使用供應商
把呼叫傳送給系統

00:08:13.927 --> 00:08:16.363
然後系統會把呼入

00:08:16.430 --> 00:08:18.765
公佈給所有的服務進程 包括用戶界面進程

00:08:20.200 --> 00:08:23.437
如果Jane想通過應用界面來接聽呼叫

00:08:23.504 --> 00:08:25.706
接聽操作會傳遞給系統

00:08:26.206 --> 00:08:30.244
系統接着會告訴Speakerbox
供應商

00:08:30.544 --> 00:08:33.013
會回覆CXAnswerCallAction

00:08:33.881 --> 00:08:37.150
在需要的情況下
Speakerbox會接聽這個呼叫

00:08:38.150 --> 00:08:43.289
如果Jane現在想從應用界面
內結束這個通話

00:08:43.357 --> 00:08:45.125
結束操作就傳遞到控制器中

00:08:45.459 --> 00:08:48.161
控制器把它捆綁
傳遞給CXTransaction

00:08:48.562 --> 00:08:51.798
並且傳遞給系統
如果一切順利的話

00:08:52.199 --> 00:08:55.169
系統把它通過供應商
返回給Speakerbox

00:08:55.569 --> 00:08:58.605
然後Speakerbox就可以結束通話

00:09:00.340 --> 00:09:02.843
下面我們讓Stewart爲
我們做一下演示

00:09:08.615 --> 00:09:09.650
謝謝Sirisha

00:09:09.850 --> 00:09:12.753
現在你們瞭解了CallKit的好處

00:09:12.819 --> 00:09:14.488
我將演示一下如何使用CallKit

00:09:14.555 --> 00:09:17.758
在一個已經做好的VoIP應用中
Speakerbox應用

00:09:17.824 --> 00:09:18.992
就是Sirisha剛纔講過的應用

00:09:19.393 --> 00:09:22.696
我首先給你們展示一下
如何用它處理一個呼入的通話

00:09:23.664 --> 00:09:26.900
我首先打開一個Speakerbox
Xscript工程

00:09:28.802 --> 00:09:32.206
在我深入講解在應用中使用
CallKit之前

00:09:32.439 --> 00:09:34.608
讓我給你們展示一下
這個應用的架構

00:09:34.675 --> 00:09:36.109
這樣你就有一個參考的框架

00:09:36.510 --> 00:09:39.112
在應用中有兩個主要的類

00:09:39.780 --> 00:09:43.984
SpeakerboxCallManager類
它維護應用中的通話列表

00:09:44.051 --> 00:09:48.956
它有一些操作
比如發起通話和結束通話

00:09:50.290 --> 00:09:53.026
另一個主要的類是
SpeakerboxCall

00:09:53.460 --> 00:09:56.997
這是一個模板類
表示應用中的一個通話

00:09:57.064 --> 00:10:00.367
它有關於通話的元數據
和一些回調代碼區

00:10:00.434 --> 00:10:04.304
在它運行的時候我們可以得知
通話的生命週期

00:10:05.739 --> 00:10:09.209
正如Sirisha提到的 我們
使用CallKit時首先需要做的

00:10:09.276 --> 00:10:12.679
是創建CX供應商

00:10:12.746 --> 00:10:13.914
並且設置它的代理

00:10:14.381 --> 00:10:18.619
首先我要創建一個新文件叫做
供應商代理

00:10:23.724 --> 00:10:26.994
在這個新文件中我要加入一些
已經寫好的新代碼

00:10:27.361 --> 00:10:29.363
首先讓我們看看它能做些什麼

00:10:29.830 --> 00:10:32.733
在初始化程序中
我們把一個引用參數

00:10:32.799 --> 00:10:34.568
傳遞給SpeakerboxCallManager類

00:10:35.202 --> 00:10:38.972
使供應商代理
能夠訪問應用的通話列表

00:10:39.406 --> 00:10:42.409
然後通過UUID引用它們
我們在後面會演示

00:10:43.544 --> 00:10:46.647
然後我們 我們創建一個
CXProvider實例

00:10:47.214 --> 00:10:48.148
然後我們傳遞

00:10:48.215 --> 00:10:50.984
叫做供應商配置的東西
我們現在看到的就是

00:10:51.685 --> 00:10:53.053
供應商配置

00:10:53.120 --> 00:10:55.589
會在後面詳細講解

00:10:55.656 --> 00:10:58.926
它讓應用能夠配置一些系統選項

00:10:58.992 --> 00:11:00.260
以決定它的行爲

00:11:01.662 --> 00:11:03.063
現在回到初始化程序

00:11:03.730 --> 00:11:08.502
我們把這個類設置爲供應商代理
然後如果有必要的話

00:11:09.036 --> 00:11:11.405
我們請求使用供應商的授權

00:11:12.372 --> 00:11:13.207
好

00:11:13.273 --> 00:11:16.009
現在已經設置好了
供應商和代理

00:11:16.076 --> 00:11:18.212
我們需要在應用代理中創建這個

00:11:18.812 --> 00:11:21.481
我聲明一個變量
供應商代理

00:11:22.616 --> 00:11:25.052
並且在application函數中實現了

00:11:25.118 --> 00:11:27.187
didFinishLaunchingWithOptions
方法

00:11:28.088 --> 00:11:28.922
酷

00:11:28.989 --> 00:11:31.458
現在應用中
有了一個供應商

00:11:32.392 --> 00:11:35.095
那麼當有呼入的通話時
應用怎樣對作出反應呢？

00:11:35.762 --> 00:11:36.930
我把它往下拉

00:11:37.397 --> 00:11:40.067
我們會看到應用現在使用PushKit

00:11:40.133 --> 00:11:42.903
通過推送通知獲知呼入請求

00:11:43.704 --> 00:11:45.506
我們看看這個代碼起了什麼作用

00:11:46.039 --> 00:11:48.208
我們看到
它查閱了dictionaryPayload

00:11:48.275 --> 00:11:50.711
它從推送通知中查閱
並且獲得一些

00:11:50.777 --> 00:11:54.448
關於呼入電話的元數據
例如UUID

00:11:54.515 --> 00:11:57.317
和代表呼入者的標識符
叫做句柄

00:11:58.318 --> 00:12:01.455
然後我們調用顯示來電方法

00:12:01.922 --> 00:12:03.323
我們看 這兒的代碼是

00:12:03.390 --> 00:12:06.393
應用控制本地的通知

00:12:06.560 --> 00:12:08.495
給用戶顯示來電

00:12:09.463 --> 00:12:10.797
但是如果使用CallKit

00:12:10.864 --> 00:12:14.101
我們不再需要本地通知來顯示這個

00:12:14.635 --> 00:12:19.740
我們轉而可以使用系統的
全屏本地來電用戶界面

00:12:19.940 --> 00:12:22.543
我們這樣做是因爲
這能獲得更好的體驗

00:12:23.510 --> 00:12:26.713
要這樣做 我將回到
供應商代理

00:12:27.214 --> 00:12:28.815
我要創建一個helper方法

00:12:29.449 --> 00:12:31.919
它讓我們爲
供應商調用API

00:12:33.320 --> 00:12:35.088
我將會調用reportIncomingCall方法

00:12:36.490 --> 00:12:37.658
在這個方法中

00:12:38.292 --> 00:12:41.161
我首先要創建一個
CXCallUpdate類

00:12:41.228 --> 00:12:44.431
它含有呼入電話的元數據

00:12:45.265 --> 00:12:49.002
然後我們爲供應商調用
reportNewIncomingCall方法

00:12:49.303 --> 00:12:52.706
這將會告知系統來電的信息

00:12:53.841 --> 00:12:55.642
現在我們要在代碼中加入異常處理

00:12:56.410 --> 00:12:57.878
我們要檢查是否有異常

00:12:58.612 --> 00:13:02.616
如果沒有異常我們就創建
SpeakerboxCall實例且配置它

00:13:02.783 --> 00:13:05.652
然後我們把這個通話添
加到應用的通話列表中

00:13:06.520 --> 00:13:08.522
後面我們會詳細講解

00:13:08.589 --> 00:13:10.524
爲什麼這兒有個異常處理？

00:13:10.791 --> 00:13:13.060
無需多說 有些情況下

00:13:13.126 --> 00:13:15.529
設備沒有準備好

00:13:15.596 --> 00:13:16.864
接聽來電

00:13:18.432 --> 00:13:21.168
好 現在我們的供應商代理中
有了helper方法

00:13:21.735 --> 00:13:23.270
回到我的應用代理

00:13:23.770 --> 00:13:26.707
把這些代碼改爲調用helper

00:13:27.574 --> 00:13:28.775
發佈本地通知

00:13:30.043 --> 00:13:30.878
好

00:13:30.944 --> 00:13:32.880
現在我們使用CallKit

00:13:32.946 --> 00:13:35.315
通知呼入電話

00:13:35.382 --> 00:13:37.518
而過去我們通過推送通知獲知這個消息

00:13:37.584 --> 00:13:41.255
系統使用全屏本地來電用戶界面
顯示了來電

00:13:42.022 --> 00:13:44.992
好 那麼如果用戶按下綠色按鈕

00:13:45.058 --> 00:13:46.460
接聽來電會發生什麼呢？

00:13:47.661 --> 00:13:48.829
在這個時候

00:13:49.296 --> 00:13:52.966
供應商代理
會收到另一個方法 我們還需要實現它

00:13:54.101 --> 00:13:59.206
這就是ProviderPerformAnswer
CallAction方法

00:13:59.773 --> 00:14:01.208
讓我演示一下

00:14:02.176 --> 00:14:04.044
首先我們創建一個

00:14:04.111 --> 00:14:07.314
Speakerbox call
類的實例 它和

00:14:07.381 --> 00:14:08.715
我們正接聽的通話UUID相對應

00:14:09.850 --> 00:14:13.086
下面我們調用
answerSpeakerboxcall方法

00:14:13.520 --> 00:14:17.090
這些代碼來自老版本的應用

00:14:17.157 --> 00:14:20.160
它和網絡通信告訴它要應答這個來電

00:14:20.494 --> 00:14:23.030
我們在供應商代理
回調中這樣做

00:14:24.031 --> 00:14:27.000
最後我們調用執行操作

00:14:28.001 --> 00:14:30.771
在CallKit中 每一個動作
要麼被執行

00:14:30.838 --> 00:14:34.441
如果成功的話 要麼執行失敗
如果有異常的話

00:14:35.242 --> 00:14:37.578
這兒有幾行代碼

00:14:37.878 --> 00:14:41.215
如果我們找不到Speakerbox
對這個UUID的調用

00:14:41.281 --> 00:14:44.384
我們就調用failed方法
向系統報告

00:14:46.119 --> 00:14:48.755
這個方法處理對來電的應答

00:14:49.289 --> 00:14:51.491
那麼如果用戶如何結束通話呢？

00:14:52.059 --> 00:14:56.230
爲此我們有一個相似的方法叫做

00:14:56.296 --> 00:14:58.565
ProviderPerformEndCallAction

00:14:59.499 --> 00:15:00.868
它們很相似

00:15:00.934 --> 00:15:03.904
它查詢一個基於UUID的調用

00:15:04.838 --> 00:15:07.774
它使用endSpeakerBoxCall
方法和網絡通信

00:15:08.575 --> 00:15:11.745
通過調用執行告知這方法執行成功

00:15:12.513 --> 00:15:14.948
然後把通話從應用的通話列表中刪除

00:15:16.350 --> 00:15:18.485
現在處理呼入的通話
我們講的差不多了

00:15:18.819 --> 00:15:20.621
還有一件事情

00:15:20.687 --> 00:15:22.456
在處理呼入的通話時應該考慮

00:15:22.856 --> 00:15:24.258
就是通話的音頻

00:15:25.225 --> 00:15:26.660
使用CallKit時

00:15:26.727 --> 00:15:30.063
你不需要直接激活應用的音頻會話

00:15:30.664 --> 00:15:33.767
你只需要配置音頻會話

00:15:33.834 --> 00:15:36.537
系統會爲你激活應用的音頻會話

00:15:36.603 --> 00:15:38.338
並且提高它的優先級

00:15:38.872 --> 00:15:40.340
讓我演示一下它是如何工作的

00:15:42.242 --> 00:15:45.612
回到PerformAnswerCallAction方法中

00:15:46.647 --> 00:15:49.983
我在函數configureaudiosession中
插入一個通話

00:15:51.018 --> 00:15:54.421
正如字面意思
它能配置應用的音頻會話

00:15:54.488 --> 00:15:55.722
但是並沒有激活它

00:15:56.857 --> 00:15:59.726
音頻會話將被系統激活

00:16:00.093 --> 00:16:01.195
然後

00:16:01.261 --> 00:16:03.964
我們會收到一個返回的代理叫做
供應商

00:16:04.031 --> 00:16:05.365
didActivate audioSession

00:16:05.999 --> 00:16:08.936
從這兒開始
我們開始處理通話的音頻

00:16:10.304 --> 00:16:14.875
最後一步是停止處理通話的音頻

00:16:14.942 --> 00:16:17.010
它是用PerformEndCallAction
方法實現的

00:16:18.312 --> 00:16:22.983
好的 這是我們使用CallKit
處理呼入通話的所有代碼

00:16:23.650 --> 00:16:27.921
現在我把設備屏幕顯示在電腦屏幕上

00:16:28.322 --> 00:16:30.290
讓我們編譯運行設備上的應用

00:16:32.426 --> 00:16:34.094
爲了本次演示

00:16:34.161 --> 00:16:37.297
我僅僅使用底部的按鈕
模擬呼入通話

00:16:37.965 --> 00:16:39.166
現在我按下它

00:16:39.600 --> 00:16:42.503
我們會看到Speakerbox
的呼入請求

00:16:42.569 --> 00:16:45.305
它使用了全屏本地呼入用戶界面

00:16:46.073 --> 00:16:47.841
我可以接聽這個電話

00:16:48.642 --> 00:16:52.713
供應商代理就會收到
PerformAnswerCallAction方法

00:16:53.180 --> 00:16:57.317
它執行了
最後當我和Jane交談完以後

00:16:57.551 --> 00:17:02.189
我可以結束通話和應用
供應商代理也執行了

00:17:03.257 --> 00:17:06.492
這是使用CallKit處理
呼入電話的演示

00:17:06.560 --> 00:17:08.829
現在交給Sirisha

00:17:09.128 --> 00:17:09.963
謝謝

00:17:16.036 --> 00:17:16.970
謝謝 Stewart

00:17:17.538 --> 00:17:19.839
讓我們再回顧一下Stewart的演示

00:17:20.140 --> 00:17:22.175
首先 把呼入的請求

00:17:22.242 --> 00:17:25.012
通過reportnew
Incomingcall API通知給系統

00:17:25.779 --> 00:17:27.948
然後我們處理接聽電話的操作

00:17:28.015 --> 00:17:30.817
通過實現代理方法
performActionAnswer

00:17:31.084 --> 00:17:32.119
CallAction

00:17:32.686 --> 00:17:34.488
然後我們接聽了電話

00:17:34.555 --> 00:17:37.257
我們通過調用執行API
執行了這個操作

00:17:38.458 --> 00:17:40.627
CallKit能做的不僅僅只是接電話

00:17:41.128 --> 00:17:43.463
這個列表
列舉了它支持的其它操作

00:17:43.931 --> 00:17:48.168
有保持通話、多人通話、
雙音多頻電話等等

00:17:49.536 --> 00:17:52.639
現在花點時間談談多人通話

00:17:53.273 --> 00:17:55.809
假如Speakerbox可以
處理多人通話

00:17:56.476 --> 00:17:57.878
在這兒 在這個例子中

00:17:57.945 --> 00:18:00.547
已經有一個活動的
Speakerbox通話了

00:18:00.614 --> 00:18:02.783
這時又呼入了一個電話

00:18:03.383 --> 00:18:05.485
若用戶想用本地用戶界面
結束這個活動的通話

00:18:05.552 --> 00:18:09.356
並且接聽下一個呼叫

00:18:09.423 --> 00:18:12.326
系統就會發送CXTransaction
給Speakerbox

00:18:13.227 --> 00:18:18.899
CXTransaction就是一個
或多個操作的列表

00:18:19.132 --> 00:18:22.169
在這種情況下 那就是
結束和應答的操作

00:18:22.836 --> 00:18:25.005
一旦Speakerbox處理

00:18:25.072 --> 00:18:26.874
和執行其中的操作

00:18:26.940 --> 00:18:29.209
它需要分別完成它們

00:18:29.276 --> 00:18:32.246
這樣系統知道要轉換用戶界面

00:18:33.647 --> 00:18:37.484
現在我要交給Nick
講解打出電話流程

00:18:41.455 --> 00:18:42.489
謝謝Sirisha

00:18:43.190 --> 00:18:44.691
讓我們繼續用Jane的例子

00:18:45.359 --> 00:18:48.729
她昨天和媽媽通了電話
但是今天她有點想家了

00:18:48.795 --> 00:18:50.163
她想和家人聯絡

00:18:51.031 --> 00:18:53.267
讓我們看看如何打出電話

00:18:57.137 --> 00:18:59.873
首先Jane要做的是到最近聯繫人中

00:18:59.940 --> 00:19:03.644
點擊 給她的媽媽打電話
應用啓動時

00:19:03.710 --> 00:19:05.412
首先出現了可能通話操作列表

00:19:06.780 --> 00:19:10.217
你們中有人可能已經看了
SiriKit的演講介紹

00:19:11.251 --> 00:19:12.920
我們介紹了可能通話操作列表

00:19:12.986 --> 00:19:15.055
如果你想了解更多信息

00:19:15.122 --> 00:19:16.890
你可以觀看在線視頻

00:19:17.724 --> 00:19:19.960
一言以蔽之
可能操作列表

00:19:20.027 --> 00:19:22.296
就是期望的用戶行爲

00:19:22.563 --> 00:19:26.033
被打包在NSUser活動中
並且傳送給應用

00:19:27.434 --> 00:19:30.604
應用收到可能通話操作列表

00:19:30.671 --> 00:19:33.540
就創建可能通話操作

00:19:33.607 --> 00:19:35.442
根據可能通話操作中的信息

00:19:36.610 --> 00:19:40.581
我們會得到相應的操作 然後通過
CallController發出請求

00:19:41.782 --> 00:19:44.985
CallController
會把操作傳送給系統

00:19:45.419 --> 00:19:48.956
如果它接收了 它會通過
供應商代理返回給應用

00:19:50.224 --> 00:19:52.392
最後我們的應用會得到這個操作

00:19:52.860 --> 00:19:55.829
使用網絡上必要的命令

00:19:55.896 --> 00:19:57.164
打出電話

00:19:57.965 --> 00:20:01.201
首先看看從這時開始的
呼出電話的生命週期

00:20:01.969 --> 00:20:04.404
我們已經開始進行呼出操作

00:20:05.005 --> 00:20:06.707
所以呼叫現在處於正在開始狀態

00:20:08.008 --> 00:20:10.677
這時我們完成了執行這個操作

00:20:10.744 --> 00:20:13.914
執行操作把呼叫轉移到已經開始狀態

00:20:15.148 --> 00:20:17.618
當對方接聽電話時

00:20:18.385 --> 00:20:21.788
我們會通知供應商
通話正在連接

00:20:23.156 --> 00:20:24.091
最後

00:20:24.791 --> 00:20:28.462
我們會通知供應商
通話已經連接並且通知系統

00:20:28.529 --> 00:20:30.864
雙方可以通話了

00:20:32.733 --> 00:20:34.168
有請Stewart回臺上

00:20:34.234 --> 00:20:35.636
做另一個演示

00:20:41.508 --> 00:20:42.409
謝謝 Nick

00:20:42.476 --> 00:20:44.478
現在我要演示第二部分

00:20:44.545 --> 00:20:46.713
如何使用CallKit
和Speakerbox

00:20:46.914 --> 00:20:49.850
這一次是如何使用它
處理呼出的通話

00:20:50.817 --> 00:20:54.154
我要再次打開一個
Speakerbox Xscript工程

00:20:55.122 --> 00:20:57.391
回到我們的應用代理類

00:20:57.991 --> 00:21:01.528
我們看到Speakerbox
現在這樣處理啓動

00:21:01.595 --> 00:21:03.664
用一個URL開始新的通話

00:21:04.631 --> 00:21:06.800
當用CallKit的時候

00:21:06.867 --> 00:21:09.937
撥出電話的過程是相似的

00:21:10.470 --> 00:21:14.141
但是當用戶從這些場閤中
發起通話的時候 例如電話應用、

00:21:14.208 --> 00:21:18.145
最近聯繫人、聯繫人
卡片或者Siri

00:21:18.212 --> 00:21:20.147
應用啓動時有可能操作列表

00:21:20.214 --> 00:21:23.250
並且會通過NSUser活動傳遞給我們

00:21:24.218 --> 00:21:27.454
這兒使用CallKit的第一步是

00:21:27.521 --> 00:21:31.658
實現applicationContinue
UserActivity方法

00:21:32.793 --> 00:21:34.494
看看是怎麼做的吧

00:21:34.928 --> 00:21:37.865
先看看
NSUser活動

00:21:38.232 --> 00:21:40.767
我們要得到startCallHandle
變量的值

00:21:41.668 --> 00:21:45.038
這些代碼我們已經寫好了
查看NSUser活動

00:21:45.472 --> 00:21:48.342
得到可能操作列表 返回句柄

00:21:48.408 --> 00:21:51.211
它是一個字符串代表我們
想要把電話打給何人

00:21:52.446 --> 00:21:53.847
現在一旦我們有了句柄

00:21:54.281 --> 00:21:58.652
開始新通話的過程就等於
上面的URL句柄

00:21:58.952 --> 00:22:01.955
我們僅僅是在通話管理器中
調用了開始通話方法

00:22:03.257 --> 00:22:05.125
現在看看這個方法做了什麼

00:22:06.793 --> 00:22:09.696
我們可以在
SpeakerboxCallManager類中看到

00:22:09.763 --> 00:22:13.033
我們通過創建模板類的一個新實例
就開始了一個通話

00:22:13.100 --> 00:22:14.301
Speakerbox通話

00:22:14.968 --> 00:22:17.971
然後我們調用
StartSpeakerBoxCall方法

00:22:18.338 --> 00:22:20.941
它會和網絡通信 然後開始發起通話

00:22:21.608 --> 00:22:25.012
最後還把這個通話加入
到通話列表中

00:22:26.113 --> 00:22:28.749
但是現在還沒有使用
CallKit來通知系統

00:22:28.815 --> 00:22:30.584
我們打算髮起一個新的通話

00:22:30.918 --> 00:22:32.019
我們需要這樣做

00:22:32.486 --> 00:22:34.555
所以我現在要刪除這些代碼

00:22:34.621 --> 00:22:36.690
過一會兒我還要把某些部分添加回來

00:22:38.425 --> 00:22:41.361
在這個類中採用CallKit
首先要

00:22:41.428 --> 00:22:42.663
導入框架

00:22:45.098 --> 00:22:48.702
然後我需要Sirisha
提到的第二個類

00:22:48.769 --> 00:22:50.571
CXCallController

00:22:52.039 --> 00:22:55.542
現在在開始通話方法裏已經有了

00:22:56.543 --> 00:22:59.046
我需要創建
startCallAction

00:22:59.112 --> 00:23:02.015
然後用我想撥出的句柄配置它

00:23:03.383 --> 00:23:06.954
然後創建CXTransaction
它含有有上面的操作

00:23:07.921 --> 00:23:10.924
最後我在callController中
調用請求事務

00:23:10.991 --> 00:23:13.193
請求系統執行操作

00:23:14.161 --> 00:23:17.531
現在僅僅是重複Sirisha
提到的這一點

00:23:17.931 --> 00:23:20.901
你可能想知道爲什麼我們
需要向系統請求這個事務

00:23:20.968 --> 00:23:23.804
其實看起來這一切只是

00:23:23.871 --> 00:23:25.339
發生在應用的內部

00:23:26.106 --> 00:23:29.009
原因是當你試圖

00:23:29.076 --> 00:23:30.344
發起一個通話的時候

00:23:30.410 --> 00:23:33.080
系統可能已經有了一個
其它的通話正在進行

00:23:33.146 --> 00:23:36.517
例如 如果用戶使用本地電話、
FaceTime電話

00:23:36.884 --> 00:23:38.619
或者其它的VoIP應用電話

00:23:39.119 --> 00:23:43.423
如果這樣的話 系統需要在你的通話
開始之前保留原來的通話

00:23:43.924 --> 00:23:46.426
爲什麼我們需要
從系統層請求操作

00:23:46.693 --> 00:23:48.595
要讓系統知道這些操作

00:23:51.298 --> 00:23:55.569
現在 一旦系統接收並且
改善了我們的開始通話操作

00:23:55.936 --> 00:23:59.907
它要通過供應商代理
把這個操作發送回給應用

00:24:00.674 --> 00:24:03.911
所以我需要實現供應商代理
的另一個方法

00:24:04.645 --> 00:24:08.649
它叫做provider perform
StartCallAction方法

00:24:09.316 --> 00:24:10.584
讓我們一起寫這些代碼吧

00:24:11.852 --> 00:24:14.555
和以前一樣 我們首先

00:24:14.621 --> 00:24:17.090
創建一個Speakerbox call
模板實例

00:24:17.324 --> 00:24:20.027
然後用我們用撥出
通話的句柄來配置它

00:24:20.961 --> 00:24:24.798
然後配置音頻會話
這和以前一樣

00:24:24.865 --> 00:24:28.135
當應答不同時間打來的電話時

00:24:28.268 --> 00:24:30.804
我們需要在通話上配置一些屬性

00:24:31.371 --> 00:24:33.874
這兒的代碼很多 讓我們梳理一下

00:24:34.675 --> 00:24:37.878
我們爲通話設置兩個通話返回代碼區

00:24:38.545 --> 00:24:43.383
hasStartedConnectingDidChange和
hasConnctedDidChange

00:24:44.184 --> 00:24:47.287
它們是異步的通話返回代碼區
它們會被激活

00:24:47.354 --> 00:24:49.756
當通話由已連接狀態

00:24:49.823 --> 00:24:52.259
進入正在連接狀態
然後再進入已連接狀態

00:24:52.893 --> 00:24:54.561
在這些通話返回代碼區中

00:24:54.895 --> 00:24:57.664
我們向系統報告通話的過程

00:24:57.731 --> 00:25:01.001
這樣系統就會知道
並且在界面中顯示出來

00:25:02.169 --> 00:25:06.807
設置好了以後 我們就可以
調用startSpeakerboxCall方法

00:25:06.874 --> 00:25:07.741
在通話時

00:25:08.008 --> 00:25:10.878
它會再次同網絡通信 然後撥出電話

00:25:11.745 --> 00:25:15.249
完成了這個操作就可以
向系統報告操作成功

00:25:15.949 --> 00:25:17.985
並且把通話添加到
通話管理列表中

00:25:20.821 --> 00:25:24.057
好 這是對呼出通話的處理

00:25:24.124 --> 00:25:26.927
但是如果用戶想結束通話
我們該怎麼做呢？

00:25:26.994 --> 00:25:29.463
從我們自己的--應用自己的用戶界面上

00:25:30.464 --> 00:25:33.967
這樣我們需要回到
Speakerbox callManager類中

00:25:34.034 --> 00:25:35.335
看看結束通話方法

00:25:36.036 --> 00:25:39.806
在這兒 我們可以看到
和前面的發起通話方法一樣

00:25:39.873 --> 00:25:41.375
它還沒有使用CallKit

00:25:41.875 --> 00:25:43.877
所以我要替換一下代碼

00:25:44.845 --> 00:25:49.583
我把它拖進來
看看 我們創建了結束通話操作

00:25:50.017 --> 00:25:51.785
它被打包成事務

00:25:52.052 --> 00:25:54.821
從callController可以
請求這個事務

00:25:55.956 --> 00:25:58.425
這一次你不需要在
供應商代理中做任何改動

00:25:58.492 --> 00:26:01.361
因爲你可以看到

00:26:01.428 --> 00:26:03.764
我們已經在前面的演示中實現了這個

00:26:04.998 --> 00:26:07.668
這就是我們處理
呼出通話的所有代碼

00:26:07.868 --> 00:26:11.138
現在我要在設備上編譯和運行應用
給你們另一個演示

00:26:17.110 --> 00:26:20.047
我已經在設備上編譯和更新了應用

00:26:20.280 --> 00:26:21.548
爲了給你們演示呼出通話

00:26:21.615 --> 00:26:26.286
我想回到聯繫人卡中的電話應用

00:26:26.687 --> 00:26:31.058
現我們能夠看到Speakerbox
應用列在聯繫人卡中了

00:26:31.592 --> 00:26:34.194
我只要點擊這兒就可以運行應用

00:26:34.461 --> 00:26:36.763
應用啓動了

00:26:36.830 --> 00:26:38.665
它會收到可能操作列表

00:26:38.999 --> 00:26:42.936
使用callController
開始一個通話

00:26:43.637 --> 00:26:46.940
它會請求系統支持的一個事務

00:26:47.307 --> 00:26:51.144
提供給供應商代理
然後供應商代理執行操作

00:26:51.845 --> 00:26:53.914
現在看 就是這樣

00:26:53.981 --> 00:26:55.482
現在通話正在進行

00:26:57.451 --> 00:27:02.155
現在正在通話 如果我按下home鍵
退出 我們能看到一些新鮮玩意

00:27:02.589 --> 00:27:06.059
竟然出現了綠色的雙倍高度的狀態條

00:27:06.126 --> 00:27:08.262
在顯示我們的應用正在運行

00:27:08.829 --> 00:27:11.164
以前這是本地電話

00:27:11.231 --> 00:27:13.934
和FaceTime電話專用的
如果我點擊它

00:27:14.168 --> 00:27:16.303
將會回到Speakerbox通話頁面

00:27:20.240 --> 00:27:21.108
謝謝！

00:27:21.742 --> 00:27:24.645
當通話結束的時候
我點擊結束通話

00:27:24.711 --> 00:27:27.848
這會向系統發出請求 終止通話操作

00:27:27.915 --> 00:27:29.449
供應商代理
會執行這個操作

00:27:30.450 --> 00:27:34.454
這是使用CallKit處理
呼出通話的所有演示

00:27:34.521 --> 00:27:38.292
現在交回給Nick回顧一下
然後介紹幾個別的API

00:27:38.592 --> 00:27:39.426
謝謝

00:27:46.400 --> 00:27:47.267
謝謝 Stewart

00:27:47.768 --> 00:27:50.437
首先快速回顧一下剛纔的內容

00:27:53.140 --> 00:27:56.643
首先是Speakerbox
收到可能通話列表

00:27:57.411 --> 00:27:59.580
基於這個列表創建了開始通話操作

00:27:59.813 --> 00:28:01.715
然後請求開始通話操作

00:28:02.816 --> 00:28:05.953
開始通話操作通過
供應商代理被接收

00:28:06.386 --> 00:28:08.188
然後執行

00:28:09.156 --> 00:28:13.360
最後 Speakerbox報告
通話成爲正在連接狀態

00:28:13.861 --> 00:28:15.395
然後是已經連接狀態

00:28:17.998 --> 00:28:21.201
這是基本的流程

00:28:21.802 --> 00:28:23.837
現在讓我們深入研究
一下API的細節

00:28:23.904 --> 00:28:25.706
以便充分的使用CallKit

00:28:26.507 --> 00:28:30.611
我們要尤其關注供應商授權

00:28:30.677 --> 00:28:34.214
和配置
它們幫助在本地用戶界面中定製應用

00:28:34.915 --> 00:28:37.518
我們看看如何處理操作異常

00:28:37.584 --> 00:28:39.019
和系統約束

00:28:39.353 --> 00:28:41.755
最後看看CallKit

00:28:41.822 --> 00:28:44.091
在應用的通話音頻扮演什麼角色

00:28:47.394 --> 00:28:51.798
所以和其它API一樣
例如聯繫人和定位

00:28:52.499 --> 00:28:54.801
CallKit要求用戶的使用許可

00:28:55.335 --> 00:28:56.336
因此

00:28:56.403 --> 00:28:59.239
應用在啓動的時候
首先要做的是

00:28:59.306 --> 00:29:01.775
檢查它當前授權的狀態

00:29:02.476 --> 00:29:05.112
因爲從上次啓動應用以來
它可能發生了變化

00:29:05.179 --> 00:29:08.348
如果用戶設置激活或者終止你的應用

00:29:09.616 --> 00:29:10.751
那麼現在

00:29:10.817 --> 00:29:13.220
如果你發現應用的授權狀態

00:29:13.287 --> 00:29:17.324
還沒有確定
你應該請求應用的授權

00:29:18.192 --> 00:29:21.028
這就是
告訴操作系統給用戶展示一個

00:29:21.094 --> 00:29:23.197
警告 請求獲得許可

00:29:23.931 --> 00:29:25.566
這是爲你的應用做出的授權

00:29:26.066 --> 00:29:29.069
因爲這是爲你的應用做出的授權
你應該確定

00:29:29.136 --> 00:29:32.840
在應用的info.plist中包含
應用字符串 提供相應的信息

00:29:35.475 --> 00:29:37.544
最後 當應用啓動的時候

00:29:37.945 --> 00:29:40.180
你應該確定時刻監聽

00:29:40.247 --> 00:29:42.716
可能發生的授權狀態的改變

00:29:43.717 --> 00:29:46.253
這樣你能一直爲用戶顯示
最新的用戶界面

00:29:49.790 --> 00:29:52.226
現在談談供應商配置

00:29:53.026 --> 00:29:55.629
供應商配置使你的應用

00:29:55.729 --> 00:30:00.701
直接在本地或者通話用戶界面中
定製通話體驗

00:30:02.836 --> 00:30:06.240
可以定製

00:30:06.306 --> 00:30:08.442
爲你的通話顯示應用的本地名稱

00:30:09.610 --> 00:30:11.478
這包括特定的功能

00:30:11.545 --> 00:30:14.181
例如應用是否支持視頻通話

00:30:15.415 --> 00:30:16.550
這甚至包括

00:30:16.617 --> 00:30:20.954
是否指定自己定製的圖像
直接顯示在

00:30:21.021 --> 00:30:22.990
終端用戶界面的按鈕處

00:30:23.490 --> 00:30:26.927
當點擊的時候
會讓用戶直接啓動應用

00:30:28.295 --> 00:30:30.797
記一下 對於本應用圖標的支持

00:30:30.864 --> 00:30:32.833
在下一個版本會實現

00:30:36.570 --> 00:30:40.407
到目前爲止我們看到了
執行順暢的時候應用的表現

00:30:40.474 --> 00:30:42.543
但是如果碰到問題會怎樣呢？

00:30:43.277 --> 00:30:45.612
看看前面撥出電話的例子吧

00:30:46.580 --> 00:30:50.217
我們已經執行了開始通話操作

00:30:50.851 --> 00:30:54.221
但是在執行的過程中
我們碰到了異常

00:30:54.922 --> 00:30:57.591
也許是和網絡服務器連接不好

00:30:57.658 --> 00:30:59.626
導致我們無法撥出電話

00:31:00.727 --> 00:31:04.498
在這種情況下 我們要終止通話操作

00:31:05.499 --> 00:31:09.269
這很重要是因爲它要通知
操作系統

00:31:09.336 --> 00:31:10.637
出問題了

00:31:11.004 --> 00:31:12.973
操作系統反過來

00:31:13.607 --> 00:31:17.044
會通過調用失敗用戶界面通知用戶

00:31:19.179 --> 00:31:22.583
同這些操作異常密切相關的是
操作失敗時間

00:31:23.917 --> 00:31:28.121
系統的每一個操作都有和它關聯的
特定的失敗時間

00:31:28.822 --> 00:31:31.391
這些失敗時間很重要
因爲它們確保

00:31:31.458 --> 00:31:35.462
用戶發出的操作

00:31:35.529 --> 00:31:38.498
以操作和迴應的方式進行

00:31:39.399 --> 00:31:42.236
因此
應用應該總是確保

00:31:42.302 --> 00:31:45.339
在一定時間內來執行這些操作

00:31:46.707 --> 00:31:49.443
如果某個操作超時了

00:31:50.043 --> 00:31:54.081
應用會通過合適的
供應商代理方法得到通知

00:31:54.147 --> 00:31:56.116
同時做出合適的反應

00:32:00.687 --> 00:32:03.257
根據設備當時的狀態

00:32:03.323 --> 00:32:05.792
一定的系統約束是必要的

00:32:06.793 --> 00:32:09.296
讓我們用打入電話作爲例子

00:32:10.564 --> 00:32:13.433
你的呼叫

00:32:13.500 --> 00:32:17.638
應用的打入呼叫被拒絕了
可能因爲

00:32:17.704 --> 00:32:21.508
用戶停止了應用
它不再被授權使用

00:32:22.643 --> 00:32:25.279
或者撥入電話者

00:32:25.345 --> 00:32:26.747
在接入電話的黑名單中

00:32:27.581 --> 00:32:29.917
或者用戶啓用了
禁止打擾功能

00:32:30.350 --> 00:32:33.120
現在不想接任何電話

00:32:34.955 --> 00:32:36.590
對於所有這些情況

00:32:37.024 --> 00:32:40.894
應用會通過API的
完成句柄得到通知

00:32:41.995 --> 00:32:44.831
例如 reportNewIncomingCall
API

00:32:44.898 --> 00:32:47.134
在完成句柄中會返回一個錯誤代碼

00:32:48.035 --> 00:32:52.472
你看 應用檢查了返回的錯誤代碼

00:32:53.006 --> 00:32:56.009
看到錯誤代碼是禁止打擾

00:32:56.543 --> 00:32:58.045
就會做出相應的處理

00:32:59.446 --> 00:33:02.216
現在讓我們看看CallKit的音頻

00:33:03.750 --> 00:33:07.955
有了CallKit的通話音頻
應用得到很多好處

00:33:08.255 --> 00:33:10.090
最大的好處是

00:33:10.424 --> 00:33:14.728
它的音頻會話在系統中的
優先級會得到很大提高

00:33:14.795 --> 00:33:17.431
同本地電話和
FaceTime電話不相上下

00:33:18.232 --> 00:33:21.468
這意味着系統上的其它應用不能

00:33:21.535 --> 00:33:23.337
打斷你的應用的通話音頻

00:33:24.838 --> 00:33:26.139
除此之外

00:33:26.640 --> 00:33:29.943
CallKit能分辨系統的
特定音頻路由

00:33:30.677 --> 00:33:34.548
這意味着它能知道如何路由音頻
根據

00:33:34.615 --> 00:33:37.784
用戶的當前訪問配置

00:33:37.851 --> 00:33:40.454
還是當前連接的藍牙設備

00:33:42.990 --> 00:33:46.627
讓我們把呼入電話流程作爲例子

00:33:47.361 --> 00:33:49.663
我們知道在接到電話以後
應用

00:33:50.097 --> 00:33:54.401
會收到迴應呼叫操作
然後執行這個操作

00:33:55.702 --> 00:33:58.505
在收到迴應呼叫操作以後應該

00:33:58.572 --> 00:34:00.841
配置音頻會話

00:34:01.308 --> 00:34:03.977
因爲我們知道
通話很快就會進入已連接狀態

00:34:05.312 --> 00:34:07.581
當我們執行迴應呼叫操作以後

00:34:08.581 --> 00:34:11.618
系統會自動爲應用
開啓一個音頻會話

00:34:11.685 --> 00:34:14.054
而且具有很高的優先級

00:34:14.721 --> 00:34:16.623
然後讓應用知道這些已經完成

00:34:17.157 --> 00:34:20.527
這是通過did activateaudiosession
Providerdelegatecallback告知的

00:34:21.328 --> 00:34:22.996
這實際是通知應用

00:34:23.563 --> 00:34:26.033
應該爲通話開啓多媒體了

00:34:26.667 --> 00:34:29.870
這是對API 的細節的
簡要介紹

00:34:29.937 --> 00:34:32.672
它們幫助我們使用CallKit

00:34:37.511 --> 00:34:41.681
現在我們邀請你在創建的
VoIP 應用中採用CallKit

00:34:42.014 --> 00:34:45.118
或者使用CallKit創建一個
全新的VoIP 應用

00:34:46.353 --> 00:34:50.757
使用CallKit你將直接調用
整合系統的底層驅動

00:34:51.692 --> 00:34:55.062
一旦你使用了CallKit
你的應用將獲得

00:34:55.128 --> 00:34:56.964
和本地電話服務平等的功能

00:34:57.965 --> 00:34:59.166
最重要的是

00:34:59.566 --> 00:35:02.970
使用CallKit你的應用將

00:35:03.036 --> 00:35:05.939
在系統中是可見的
無論是在全屏、

00:35:06.006 --> 00:35:10.244
鎖屏的來電提醒、最近來電、

00:35:10.310 --> 00:35:14.715
常用聯繫人和聯繫人中 還是和Siri、

00:35:14.781 --> 00:35:16.350
CarPlay和Bluetooth的整合中

00:35:19.186 --> 00:35:21.622
要獲得更多信息請查閱我們的演講網址

00:35:21.688 --> 00:35:23.090
developer.apple.com

00:35:23.457 --> 00:35:25.826
那兒也有Speakerbox
的示例代碼

00:35:25.893 --> 00:35:27.995
這個演講中
我們也一直在引用上面的代碼

00:35:29.696 --> 00:35:32.065
我們有很多精彩的相關演講

00:35:32.366 --> 00:35:35.769
一定要參閱關於Siri、
可能操作列表、

00:35:35.836 --> 00:35:37.237
網絡和音頻的更多信息

00:35:38.672 --> 00:35:41.341
非常感謝你們的到來
希望在實驗室裏看到你們