00:00:19.987 --> 00:00:23.590
在服務器端使用開源Swift

00:00:28.795 --> 00:00:32.499
歡迎大家 我是Philippe Hausler
我在Apple Foundation工作

00:00:32.566 --> 00:00:35.602
今天我們將談論服務器上的Swift

00:00:36.003 --> 00:00:38.572
我們看看爲什麼服務器端的Swift
是引人注目的

00:00:38.639 --> 00:00:42.476
各個部分是怎麼一起工作的
有哪些是可以開箱即用的

00:00:42.743 --> 00:00:46.780
哪些不是 一些現實世界中的
Swift運行在服務器上的例子

00:00:46.847 --> 00:00:48.749
最關鍵的

00:00:48.815 --> 00:00:51.818
你可以怎麼貢獻來使服務器端的
Swift更好

00:00:53.520 --> 00:00:57.124
現代應用開發不僅僅是爲一個
平臺開發

00:00:57.591 --> 00:00:58.825
它是一個生態系統

00:00:59.126 --> 00:01:01.361
你很難找到一個應用

00:01:01.428 --> 00:01:03.830
沒有任何服務器端的部分

00:01:04.230 --> 00:01:06.767
來自分析 實時通訊

00:01:07.067 --> 00:01:09.203
或者雲上儲存的共享的狀態

00:01:09.269 --> 00:01:12.906
服務器是構建一個豐富並吸引人
的應用必須的一部分

00:01:14.041 --> 00:01:16.276
現在構建下一個偉大的事

00:01:16.343 --> 00:01:19.313
通常有接觸開關需要製造

00:01:20.647 --> 00:01:23.884
你最後嗡嗡地響
寫你的應用

00:01:24.251 --> 00:01:27.321
然後你知道你要寫的下一個東西
是用不同的語言

00:01:27.387 --> 00:01:30.490
這會造成停機時間和重複實現

00:01:30.557 --> 00:01:34.361
我們都知道我們有多不喜歡重複
代碼

00:01:35.362 --> 00:01:37.564
但是運行在服務器上的Swift
有潛力

00:01:37.631 --> 00:01:40.801
不僅僅提供無縫開發體驗

00:01:40.868 --> 00:01:44.137
還提供更豐富更吸引人的用戶體驗

00:01:44.338 --> 00:01:46.406
通過分享你的代碼庫合適的部分

00:01:46.740 --> 00:01:50.878
可以節省開發以及測試的時間

00:01:51.745 --> 00:01:53.146
但這不僅是語言

00:01:53.413 --> 00:01:54.781
這是API

00:01:55.115 --> 00:01:58.585
通常難以剝離API的架構

00:01:58.652 --> 00:02:01.121
從語言的構造中剝離

00:02:01.188 --> 00:02:04.424
比如字符串 數組 字典 併發

00:02:04.858 --> 00:02:08.794
它們通常成爲表達那個語言的庫的
核心部分

00:02:09.128 --> 00:02:11.999
有了這些 讓我們來到Swift的
架構

00:02:12.065 --> 00:02:16.403
不僅僅是在服務器上
還包括Swift怎麼適用於其他平臺

00:02:17.838 --> 00:02:19.773
在早期的設計考慮中

00:02:20.174 --> 00:02:23.610
Swift不是隻能運行
在Darwin系統上的語言

00:02:23.677 --> 00:02:27.514
它本質上可以運行在多種平臺上

00:02:27.581 --> 00:02:31.351
有了社區的幫助 這個目標開始
成爲現實

00:02:31.418 --> 00:02:36.456
對平臺 平臺支持比如FreeBSD
目標比如Raspberry Pi

00:02:36.523 --> 00:02:38.892
甚至Windows和Android

00:02:38.959 --> 00:02:41.128
一些很令人興奮的事

00:02:42.095 --> 00:02:45.566
在所有這些平臺
Swift依賴系統庫

00:02:45.632 --> 00:02:48.468
構建在其上的
你有標準庫

00:02:48.535 --> 00:02:53.507
它提供一些根本性的基本構建塊
和數據結構

00:02:55.342 --> 00:02:58.412
在Darwin上我們有被稱爲覆蓋的
附件

00:02:58.478 --> 00:03:01.448
這幫助系統框架更好的通過接口
連接Swift

00:03:01.915 --> 00:03:06.253
但因爲Linux中
沒有Foundation或Dispatch

00:03:06.320 --> 00:03:10.324
一個可移植的接口被創建做爲
那些基本的部分

00:03:10.858 --> 00:03:13.794
我們從一個那裏應該有什麼的大綱
開始

00:03:13.861 --> 00:03:16.163
和一些初步的實現

00:03:16.230 --> 00:03:19.800
和社區一起 我們添加了很多
基本功能

00:03:19.867 --> 00:03:22.102
任何現代的開發工作都會需要的

00:03:23.203 --> 00:03:25.339
當你的應用進行混合時

00:03:25.405 --> 00:03:30.277
你可以看到這些部分在一起工作
用在兩個平臺上相同的方式

00:03:30.677 --> 00:03:32.779
有了以這種方式創造的Swift

00:03:32.846 --> 00:03:36.984
作爲開發者你可以從你的應用中
選出合適的部分

00:03:37.050 --> 00:03:41.321
來爲服務器開發
使用你一直在用的熟悉的概念

00:03:42.689 --> 00:03:47.661
Swift.org是獲得
最新版本的Swift的中心地帶

00:03:47.728 --> 00:03:51.265
註冊郵件列表
得到GitHub倉庫的鏈接

00:03:51.331 --> 00:03:53.233
或者持續集成構建

00:03:53.734 --> 00:03:58.038
或者一個閱讀資料支持的好地方
關於Swift的最新開發進展

00:03:58.105 --> 00:04:00.674
這是一個針對Swift工具鏈的地方

00:04:01.542 --> 00:04:04.278
工具箱裏都有什麼？

00:04:05.245 --> 00:04:09.283
工具箱提供在Linux和
Mac上構建的支持

00:04:09.783 --> 00:04:13.487
你可以在Mac上開發
然後部署到Linux服務器

00:04:13.554 --> 00:04:16.356
有持續集成服務器來確保

00:04:16.423 --> 00:04:20.394
對語言和API的改變

00:04:20.494 --> 00:04:26.133
發生並持續集成
這樣所有東西都像預期的一樣運行

00:04:27.134 --> 00:04:28.602
你有標準庫

00:04:28.669 --> 00:04:33.173
給你基本的構建塊 協議 結構 類型

00:04:33.240 --> 00:04:36.043
你在構建任何Swift應用時都需要
用到的

00:04:36.844 --> 00:04:40.080
還獲得Foundation、
Dispatch、XCTest

00:04:40.147 --> 00:04:43.016
作爲Swift工具鏈中的項目

00:04:43.517 --> 00:04:46.286
這給你可移植API的橫截面

00:04:46.353 --> 00:04:51.058
這使你爲不同平臺開發時
能保持代碼幾乎是一樣的

00:04:51.959 --> 00:04:53.427
但是你得到一系列工具

00:04:53.493 --> 00:04:56.864
用來編譯 打包
和調試Swift應用

00:04:56.930 --> 00:05:01.301
以及Swift倉庫來完成
嘗試那些新特性

00:05:01.368 --> 00:05:05.072
你在兩個平臺上都可以得到所有這些

00:05:06.840 --> 00:05:09.910
現在有一些東西沒有被包括

00:05:10.644 --> 00:05:12.679
我們做了一個設計決定

00:05:12.746 --> 00:05:17.251
有些東西對跨平臺沒意義

00:05:17.317 --> 00:05:21.822
或者讓開發者開發自己的方案更好

00:05:21.889 --> 00:05:23.590
因爲他們是高度特殊化的

00:05:24.591 --> 00:05:26.960
新平臺不僅僅是代碼

00:05:27.494 --> 00:05:31.899
它們是持續集成和驗證
而且移植到新平臺的冠軍

00:05:31.965 --> 00:05:36.570
通常最瞭解實現那些

00:05:37.404 --> 00:05:38.372
你的代碼來到這裏
開發者機會

00:05:38.438 --> 00:05:42.042
用戶界面是一個非常特定於平臺
的東西

00:05:42.576 --> 00:05:44.378
在iOS上你有UIKit

00:05:44.845 --> 00:05:51.018
在Mac上你有AppKit
雖然它們有很多相似之處

00:05:51.218 --> 00:05:53.487
他們是兩個不同的東西

00:05:53.554 --> 00:05:55.722
因爲他們解決不同的問題

00:05:56.356 --> 00:06:00.060
關於這點
UI可以是網絡模板

00:06:00.127 --> 00:06:04.431
有時用戶界面中的用戶不一定是人

00:06:04.498 --> 00:06:09.002
有可能是另一個服務連接在發送
服務協議

00:06:09.503 --> 00:06:12.940
這很明顯是一些相當專門化的東西

00:06:13.774 --> 00:06:16.076
現在把你的應用部署到服務器中

00:06:16.143 --> 00:06:18.111
這是一個專門化的任務

00:06:18.545 --> 00:06:21.548
這樣你可以選擇合適的服務

00:06:21.615 --> 00:06:27.788
適合你的要求 預算 規模 當然還有
你的應用的服務

00:06:28.522 --> 00:06:31.558
這不應綁定到特定的Swift軌道上

00:06:31.859 --> 00:06:34.361
在服務器上運行
你可以有多個應用

00:06:34.428 --> 00:06:36.597
運行在多個Swift版本上

00:06:37.764 --> 00:06:42.603
很高興看到熱愛者創建一個開放
和分享的社區

00:06:42.669 --> 00:06:46.139
有一些很好的機會

00:06:46.206 --> 00:06:47.875
來豐富Swift生態環境

00:06:48.342 --> 00:06:55.082
總有很多努力被投入到了這個領域

00:06:55.148 --> 00:06:57.484
我們在IBM的合作貢獻者做出了

00:06:57.551 --> 00:06:59.786
一些相當優雅的東西

00:07:00.354 --> 00:07:02.723
我們會看一些抽象的概述

00:07:02.789 --> 00:07:04.725
讓我們深入一些

00:07:04.791 --> 00:07:07.361
現在看一些現實世界的例子

00:07:07.427 --> 00:07:12.633
關於他們在IBM是怎麼參與到Swift中的
John Ponzo和Patrick Bohrer

00:07:20.774 --> 00:07:21.775
謝謝Philippe

00:07:22.009 --> 00:07:23.510
嘿 我是John Ponzo

00:07:23.577 --> 00:07:26.780
我是IBM移動雲開發的技術領導

00:07:26.847 --> 00:07:30.817
我很激動今天能做爲WWDC的一部分

00:07:30.884 --> 00:07:34.054
我們在IBM
對Swift社區感到興奮

00:07:34.121 --> 00:07:37.658
做爲開源的一部分
我們看到了這個語言的極大潛力

00:07:39.359 --> 00:07:42.196
對不熟悉的人 讓我稍微介紹一下
關於IBM的一些事

00:07:42.262 --> 00:07:43.830
及我們怎麼參與到Swift中

00:07:44.364 --> 00:07:46.900
2014年Apple和IBM宣佈了
我們的合作 聚焦在

00:07:46.967 --> 00:07:50.370
企業應用和解決方案

00:07:51.038 --> 00:07:55.242
接下來IBM成爲Swift的
早期使用者之一

00:07:55.309 --> 00:07:58.879
當它兩年前在WWDC上被宣佈時

00:07:59.479 --> 00:08:03.851
從那以後我們開發了超過100個
企業應用

00:08:04.685 --> 00:08:08.021
完全用Swift開發那些應用和解決
方案

00:08:08.522 --> 00:08:11.892
而且我們有最高的集中程度之一

00:08:11.959 --> 00:08:15.229
在IBM開發這些應用的Swift
開發者的集中程度

00:08:16.230 --> 00:08:19.499
我們開發這些企業應用和解決方案
的經驗

00:08:19.566 --> 00:08:25.005
持續地指出後臺允許一個優秀
的體驗的重要性

00:08:26.106 --> 00:08:29.176
做爲開發者我們知道它有多重要

00:08:29.476 --> 00:08:33.614
有一個後臺 帶來優秀的
移動體驗

00:08:34.914 --> 00:08:37.918
我們還知道一個重要的事是我們
快速安全地

00:08:37.985 --> 00:08:40.587
部署適合的代碼到適合的地方

00:08:41.188 --> 00:08:44.491
這就是爲什麼我們對幫助把Swift
帶到服務器來如此興奮

00:08:46.894 --> 00:08:50.664
我們感謝Swift.org
社區的資源和活動

00:08:50.731 --> 00:08:52.666
從郵件列表

00:08:52.733 --> 00:08:56.370
到代碼貢獻和新形成的開源項目

00:08:57.337 --> 00:09:00.407
我想強調我們在IBM做的一些事情

00:09:00.474 --> 00:09:03.477
來幫助開源社區
把Swift帶到服務器

00:09:04.645 --> 00:09:07.080
首先我會告訴你社區實現

00:09:07.181 --> 00:09:11.618
然後告訴你Swift沙盒
和Swift程序包目錄服務

00:09:11.685 --> 00:09:13.854
我們開發了這些來幫助開發者

00:09:13.921 --> 00:09:18.292
更容易學習、發現、
分享Swift資源

00:09:19.793 --> 00:09:23.664
接下來我們受到一致的開發者體驗
的激勵

00:09:24.031 --> 00:09:25.933
連接客戶和服務器的體驗

00:09:25.999 --> 00:09:29.369
最後我們開發了Kitura網絡框架

00:09:29.436 --> 00:09:32.906
用來幫助促進和優先我們的貢獻

00:09:32.973 --> 00:09:36.476
進入libdispatch和
foundation的核心庫中

00:09:38.512 --> 00:09:43.283
接下來雲實現是開發過程中的
重要部分

00:09:43.350 --> 00:09:48.655
我們受到了使把Swift部署到雲上
更容易更有趣的動力

00:09:48.722 --> 00:09:52.426
通過IBM Cloud
對Swift運行時的早期支持

00:09:52.492 --> 00:09:56.830
和Xcode附加應用

00:09:56.897 --> 00:09:59.366
來幫助部署代碼到雲上
社區實現

00:10:01.835 --> 00:10:04.171
當Swift.org 12月發佈時

00:10:04.238 --> 00:10:06.373
我們想做的第一件事之一

00:10:06.440 --> 00:10:08.775
就是幫助增長開發者生態環境

00:10:09.409 --> 00:10:10.878
我們看到了這個語言的價值

00:10:10.944 --> 00:10:13.981
我們想快速地把它介紹給其他
開發者

00:10:14.515 --> 00:10:16.183
我們創造了沙盒

00:10:16.250 --> 00:10:21.588
這允許開發者更容易在Linux上
運行和測試代碼

00:10:22.256 --> 00:10:25.225
沙盒在瀏覽器中運行
有了這

00:10:25.292 --> 00:10:28.862
你可以輕易地編寫Swift代碼
保存代碼

00:10:28.929 --> 00:10:30.764
並看到在服務器上的運行

00:10:31.565 --> 00:10:33.600
自從我們發佈了沙盒

00:10:33.667 --> 00:10:37.471
我們根據社區的反饋和要求做出
了很多改進

00:10:38.071 --> 00:10:42.843
沙盒現在支持移動UI
多種UI主題

00:10:43.977 --> 00:10:48.515
自動保存代碼
允許選擇多個Swift運行時

00:10:49.216 --> 00:10:53.787
爲了幫助開發者分享關於Swift
的問題和解決方案

00:10:53.854 --> 00:10:58.125
我們增加了代碼快照的支持
依靠一個永久的URL

00:10:58.458 --> 00:11:02.129
你可以用這在郵件列表中分享代碼

00:11:02.196 --> 00:11:04.665
還可以在開發者論壇中分享 比如
stackoverflow.com

00:11:06.166 --> 00:11:09.469
從2105年12月4日起
運行了多於150萬的代碼

00:11:11.104 --> 00:11:15.642
謝謝 我們看到了超過150萬次
在沙盒中的運行

00:11:15.709 --> 00:11:17.611
從我們12月發佈它起

00:11:17.678 --> 00:11:22.783
從2月起增長了超過200%

00:11:23.951 --> 00:11:28.922
沙盒解鎖了從其他平臺訪問Swift

00:11:29.656 --> 00:11:33.493
實際上我們看到了穩定的增長
和興趣

00:11:33.560 --> 00:11:37.631
關於來自其他操作系統
的運行和會話

00:11:37.965 --> 00:11:42.503
我們很高興見到這些
我們希望繼續看到Swift的增長

00:11:43.670 --> 00:11:46.306
我們還看到了來自全球的使用

00:11:46.707 --> 00:11:50.677
開發者使用沙盒學習Swift併合作

00:11:51.411 --> 00:11:56.483
我們的目的是繼續支持沙盒來幫助
社區的成長

00:11:58.952 --> 00:12:03.323
一個有活力的程序包生態系統對
任何語言都至關重要

00:12:04.157 --> 00:12:08.629
儘管Swift的程序包管理器規格
還是早期技術

00:12:09.029 --> 00:12:10.631
我們在服務器上做的所有事

00:12:10.697 --> 00:12:14.468
都是基於創建和構成基於Swift
的程序包

00:12:15.435 --> 00:12:20.507
因爲這 我們發現了關於發現和發佈
我們自己的程序包的需求

00:12:21.008 --> 00:12:24.011
所以我們開發了Swift程序包目錄
幫助實現這個目標

00:12:24.478 --> 00:12:26.980
我們繼續更新程序包目錄

00:12:27.047 --> 00:12:30.517
隨着Swift程序包管理器
規格的進化

00:12:31.552 --> 00:12:38.025
今天我們的目錄中有1500個
和Swift程序包管理器兼容的程序包

00:12:38.559 --> 00:12:41.461
從2月以來增長了400%

00:12:44.198 --> 00:12:47.234
接下來當我們開始思考服務器

00:12:47.301 --> 00:12:50.437
任何服務器語言的一個基本要求

00:12:50.504 --> 00:12:52.906
是能夠支持網絡接口

00:12:53.907 --> 00:12:57.611
網絡框架負責監聽端口

00:12:57.678 --> 00:13:00.180
路由代碼到合適的邏輯

00:13:00.981 --> 00:13:05.052
我們認爲很重要的一點是那個
邏輯儘可能一致

00:13:05.118 --> 00:13:06.987
和客戶端的編程模型

00:13:07.621 --> 00:13:10.023
爲此目的我們開發了Kitura框架

00:13:10.891 --> 00:13:13.293
我們在2月開源了Kitura

00:13:13.760 --> 00:13:16.730
這是一個基於模塊化程序包的
網絡框架

00:13:17.731 --> 00:13:21.401
它利用libdispatch和
Foundation實現並行

00:13:21.468 --> 00:13:22.970
和實用程序庫的支持

00:13:23.036 --> 00:13:25.138
一致的開發者體驗

00:13:25.205 --> 00:13:28.976
這也驅使IBM
對Swift.org的貢獻

00:13:30.043 --> 00:13:33.547
我們用Kitura來開發我們
服務器端的應用

00:13:34.848 --> 00:13:36.083
我們和社區一起工作

00:13:36.149 --> 00:13:40.254
有很多IBM以外的
Kitura活躍貢獻者

00:13:40.954 --> 00:13:44.591
這是我們把Swift帶到服務器的
很重要的一部分

00:13:46.860 --> 00:13:50.998
我們還爲基於Swift的工作優化了
我們的雲

00:13:52.065 --> 00:13:54.501
我很榮幸地宣佈我們最新的更新

00:13:54.601 --> 00:13:57.538
我們基於Cloud Foundry
針對Bluemix的構建包

00:13:58.105 --> 00:14:00.007
包括所有你需要的

00:14:00.073 --> 00:14:04.478
來快速部署你的基於Kitura
的應用到IBM Cloud

00:14:05.345 --> 00:14:08.549
這個構建包
包括最新的Swift運行時

00:14:08.615 --> 00:14:12.052
核心庫 依賴的C庫

00:14:12.119 --> 00:14:14.555
部署Kitura到雲需要它們

00:14:16.423 --> 00:14:19.193
此外開發是關鍵

00:14:19.826 --> 00:14:23.197
我們很高興宣佈
IBM Cloud Tools for Swift

00:14:23.263 --> 00:14:25.766
一個Mac應用允許你

00:14:25.832 --> 00:14:28.735
容易地用Swift開發端對端應用

00:14:29.736 --> 00:14:35.008
這個工具幫助你快速和容易地
連接客戶端應用

00:14:35.075 --> 00:14:37.878
和運行在IBM雲上的
服務器端Swift

00:14:38.579 --> 00:14:40.781
繼續開發你的工程

00:14:40.848 --> 00:14:44.585
你的客戶和服務器端工程
在Xcode中

00:14:44.651 --> 00:14:49.756
用這個工具來連接那些工程
並且部署你的代碼到服務器

00:14:50.691 --> 00:14:52.025
有了這些介紹

00:14:52.092 --> 00:14:55.262
我想歡迎我的同事
Patrick Bohrer上臺

00:14:55.329 --> 00:14:57.631
他會展示正在運行的服務器端Swift

00:15:05.572 --> 00:15:07.341
謝謝John
我是Pat Bohrer

00:15:07.407 --> 00:15:10.811
是IBM圍繞Swift進行
很多有趣事的技術領導

00:15:11.278 --> 00:15:14.181
很激動來到WWDC

00:15:14.248 --> 00:15:17.885
我會進行我認爲本場演講中
有趣且令人興奮的部分

00:15:18.285 --> 00:15:21.855
它有趣因爲我會在服務器上進行
一些Swift的實時編程

00:15:21.922 --> 00:15:23.924
它令人興奮是因爲我的2個演示

00:15:23.991 --> 00:15:25.759
依賴到雲的一個工作的網絡

00:15:25.826 --> 00:15:27.928
希望我好運

00:15:30.764 --> 00:15:32.566
我們已經談了服務器端的Swift

00:15:33.667 --> 00:15:35.335
這對很多人意味着很多

00:15:35.402 --> 00:15:37.337
但是對本場觀衆
對本次演講

00:15:37.404 --> 00:15:39.439
我們想談論的是網絡服務

00:15:41.175 --> 00:15:42.743
什麼是網絡服務？

00:15:43.210 --> 00:15:46.847
簡單地說 它們是運行在電腦上的
程序

00:15:47.848 --> 00:15:48.849
它們監聽

00:15:48.916 --> 00:15:50.651
它們監聽進來的請求

00:15:51.285 --> 00:15:52.920
它們負責路由這些請求

00:15:52.986 --> 00:15:56.156
到一些服務器端邏輯並返回迴應

00:15:56.857 --> 00:15:59.059
現在外面的
可以是一個瀏覽器

00:15:59.126 --> 00:16:00.727
可以是另一個應用

00:16:01.395 --> 00:16:03.130
誰知道呢？
可以是另一個服務

00:16:03.397 --> 00:16:05.265
但簡單的說
它就是這樣

00:16:05.532 --> 00:16:07.768
要開始 這聽起來足夠簡單

00:16:08.702 --> 00:16:11.271
讓我們繼續深入
做一個現場演示

00:16:15.008 --> 00:16:16.210
我已經提到過

00:16:17.044 --> 00:16:19.346
通常這些網絡服務運行在Linux上

00:16:19.413 --> 00:16:21.849
我們聽說了
Swift運行在Linux上

00:16:22.182 --> 00:16:25.285
讓我們繼續 爲第一個在Linux上
的演示工作

00:16:26.653 --> 00:16:27.888
讓我們那麼做

00:16:28.488 --> 00:16:31.458
這裏我們有Linux在運行
確保我不是在撒謊

00:16:32.826 --> 00:16:35.762
讓我們新建一個目錄來做一些
來玩一玩

00:16:35.829 --> 00:16:38.398
所以我們非常有創造性地創造了
一個用來玩的目錄

00:16:39.399 --> 00:16:40.701
你可以看到裏面沒有東西

00:16:41.568 --> 00:16:43.303
我們會用Swift程序包管理器

00:16:43.370 --> 00:16:49.076
如John提到的 我們在服務器
上做的任何事都是基於程序包的

00:16:49.443 --> 00:16:52.880
我們要用 這是一個版本的
Swift程序包管理器

00:16:52.946 --> 00:16:56.149
對晚些時候觀看的人來說
這些語法會改變

00:16:56.216 --> 00:17:00.387
但是對我們今天用的這個版本
它有一個初始化步驟

00:17:01.154 --> 00:17:04.758
所以如果我們使用這個命令
可以看到它創建了一些文件

00:17:05.659 --> 00:17:10.130
根據結構和
package.swift文件

00:17:10.964 --> 00:17:13.800
Swift程序包管理器知道怎麼構建
你的應用

00:17:13.867 --> 00:17:17.905
如你在這裏所見
我們有package.swift

00:17:18.438 --> 00:17:20.641
它創建了
一個Sources.main

00:17:20.707 --> 00:17:24.077
這就是用來構建一Swift
一個簡單Swift程序包所需的全部

00:17:24.744 --> 00:17:26.847
說過這些
讓我們繼續

00:17:27.146 --> 00:17:30.517
我們可以開始Swift構建
這很容易

00:17:30.984 --> 00:17:35.255
它創建了一個.build/debug/play
可執行程序

00:17:35.322 --> 00:17:36.423
讓我們運行它

00:17:37.991 --> 00:17:39.326
你好世界

00:17:44.898 --> 00:17:47.134
但我們在開發網絡服務
讓我們做一些真實東西

00:17:49.903 --> 00:17:54.141
這是Swift程序包管理器
爲我們創建的東西

00:17:54.208 --> 00:17:59.179
我們最好有一個程序包
它是基於我們的稱爲Play的目錄

00:17:59.246 --> 00:18:01.982
它給我們的可執行程序命名爲play
這是得名的原因

00:18:02.583 --> 00:18:04.418
我們想要增加一部分

00:18:04.484 --> 00:18:08.555
那是對Kitura的依賴
我們只需要指出這

00:18:10.757 --> 00:18:15.329
現在我們來到主文件

00:18:15.796 --> 00:18:17.497
讓我們刪除舊的你好世界

00:18:19.032 --> 00:18:20.467
讓我們在這加一些代碼

00:18:20.901 --> 00:18:23.737
這個代碼所做的是 忠實的支持者

00:18:23.804 --> 00:18:25.205
我們獲得Foundation

00:18:25.739 --> 00:18:30.043
我們導入Kitura和
一些Kitura支持程序包

00:18:31.345 --> 00:18:34.548
我們定義了一個路由
我提到過的 爲了進入的請求

00:18:34.615 --> 00:18:36.316
我們需要把這些請求導到一些地方

00:18:36.850 --> 00:18:40.821
我們要定義一個路由
在這 那是/hello

00:18:41.421 --> 00:18:45.659
如果任何請求進入 我們會運行
這些代碼

00:18:45.993 --> 00:18:46.827
很簡單

00:18:47.461 --> 00:18:49.363
我們會指定一些迴應頭

00:18:50.063 --> 00:18:53.033
我們會發送回一個字符串說你好
世界

00:18:53.767 --> 00:18:57.771
往下到這我們指定我們監聽的端口
是8095

00:18:58.238 --> 00:19:01.842
我們開始監聽這個端口
我們指定我們的路由是一個委託

00:19:01.909 --> 00:19:03.343
然後我們啓動服務器

00:19:03.944 --> 00:19:04.978
這很簡單

00:19:08.882 --> 00:19:10.417
讓我們保存它

00:19:13.153 --> 00:19:15.656
現在我們要第一次構建Kitura

00:19:15.789 --> 00:19:17.224
因此我們在這加了一些東西

00:19:17.291 --> 00:19:20.627
John提到過 我們利用
libdispatch和Foundation

00:19:21.028 --> 00:19:22.529
所以它在做的是獲取

00:19:22.596 --> 00:19:25.232
Swift程序包管理器正在獲取我們
需要的東西

00:19:25.299 --> 00:19:26.867
我們寫我們關心的代碼

00:19:27.334 --> 00:19:29.837
Swift程序包管理器
獲得Kitura

00:19:29.903 --> 00:19:33.674
它在獲取我們的網絡
它在獲取一些系統支持

00:19:33.740 --> 00:19:38.378
一個記錄器 所有你在網絡服務
中需要的東西

00:19:38.512 --> 00:19:41.448
以及監聽套接字和其他的功能

00:19:41.515 --> 00:19:43.584
這些都是獨立的程序包

00:19:43.650 --> 00:19:46.186
在GitHub上
你可以獲取

00:19:50.190 --> 00:19:51.525
它被編譯和構建

00:19:54.761 --> 00:19:56.897
現在讓我們運行可執行文件

00:19:56.964 --> 00:20:02.069
我們現在可以看到
它說它在監聽8095端口

00:20:02.736 --> 00:20:04.938
讓我們看一看

00:20:07.975 --> 00:20:12.846
打開本地主機8095端口
因程序運行在本地Mac和Linux

00:20:13.180 --> 00:20:14.715
你看到我們看到一個Kitura頁面

00:20:14.781 --> 00:20:17.417
如果我們沒有定義默認路由

00:20:17.651 --> 00:20:21.088
它會顯示這個頁面並說明其他
開始的方式

00:20:21.154 --> 00:20:25.592
你可以覆蓋這些
但是對我們來說想要定義的是一個你好

00:20:33.967 --> 00:20:37.504
所以你要做的第一件事是說你好
世界

00:20:37.571 --> 00:20:40.841
第一步
當你思考它時

00:20:40.908 --> 00:20:42.743
讓我們返回
我們會在這做更多

00:20:45.012 --> 00:20:47.080
讓我們返回並編輯主文件

00:20:47.314 --> 00:20:49.783
這裏有很多東西是我們可以用的

00:20:49.850 --> 00:20:50.918
我們有Foundation

00:20:52.119 --> 00:20:54.054
我們可以生成JSON

00:20:54.488 --> 00:21:00.060
讓我們添加一個小助手代碼來
幫助我們生成JSON字符串

00:21:00.494 --> 00:21:03.497
我們會添加一個叫做今天的路由

00:21:06.233 --> 00:21:10.470
這是一個新路由 如果有東西進入
/today

00:21:10.537 --> 00:21:13.974
它會利用Foundation
獲得當前日期

00:21:14.741 --> 00:21:16.577
我們會新建
一個NSDateFormatter

00:21:16.643 --> 00:21:18.111
就像我們在客戶端會做的一樣

00:21:18.512 --> 00:21:22.382
我們用這DateFormatter
來創建日期和時間字符串

00:21:22.449 --> 00:21:25.052
然後我們來到我們的迴應

00:21:25.118 --> 00:21:27.754
在這我們創建一個負載是一個字典

00:21:28.255 --> 00:21:31.458
現在在互聯網上 你們都知道的
這都是JSON

00:21:31.925 --> 00:21:36.530
我們指定消息是你好世界
日期和時間是當前的

00:21:36.597 --> 00:21:40.033
我們把它轉化成字符串
這是我們這次返回的

00:21:40.133 --> 00:21:41.668
讓我們看看它是怎麼工作的

00:21:44.605 --> 00:21:45.973
讓我們重新構建

00:21:46.673 --> 00:21:48.308
快多了 所有程序包都在本地

00:21:48.375 --> 00:21:49.409
這很好

00:21:50.844 --> 00:21:54.248
我們會再次運行它
你可以看到我們在監聽8095

00:21:55.949 --> 00:22:00.053
我們會刷新並看到我們仍然在
你好上返回你好世界

00:22:00.721 --> 00:22:02.022
讓我們看看今天

00:22:03.924 --> 00:22:05.726
這就是了
我們有JSON負載

00:22:11.398 --> 00:22:13.567
每次有人來這

00:22:13.634 --> 00:22:16.003
這些代碼會被運行
返回一個迴應

00:22:16.069 --> 00:22:18.805
這是一個很簡單的如何開始

00:22:26.713 --> 00:22:28.448
我妻子要我取下眼鏡

00:22:30.784 --> 00:22:33.754
這很有趣但是現在讓我們讓它更
有趣

00:22:34.755 --> 00:22:36.790
在我們討論時我想首先介紹給你們

00:22:36.857 --> 00:22:39.826
一個有趣的例子
我們提供給社區的

00:22:39.893 --> 00:22:41.094
它叫做BluePic

00:22:41.161 --> 00:22:42.162
端對端Swift BluePic

00:22:42.229 --> 00:22:46.200
BluePic是一個
社交相片分享應用示例

00:22:47.968 --> 00:22:51.205
它有富客戶端界面
一個很漂亮的界面

00:22:51.271 --> 00:22:54.341
我們開發並提供它做爲示例的
一部分

00:22:55.108 --> 00:22:59.746
它還有個很有趣的後端

00:22:59.813 --> 00:23:02.783
是一個Swift服務器後端
純Swift

00:23:02.850 --> 00:23:05.419
使用Kitura
運行在IBM Cloud

00:23:05.485 --> 00:23:08.021
它還使用一些有趣的服務

00:23:08.088 --> 00:23:10.824
我會提到 如Watson和
ObjectStore

00:23:10.891 --> 00:23:12.826
SQL數據庫 這些好東西

00:23:13.493 --> 00:23:15.929
如果你準備好深入

00:23:18.932 --> 00:23:22.870
它還使用IBM全新的事件驅動的
編程模型

00:23:22.936 --> 00:23:25.339
叫做OpenWhisk
它也支持Swift

00:23:25.739 --> 00:23:28.909
這個程序包還有很多事在發生

00:23:28.976 --> 00:23:32.045
它現在在GitHub上
爲那些想開始的人

00:23:33.614 --> 00:23:35.949
在我們進入演示模式前

00:23:36.016 --> 00:23:38.652
我想花一點時間談談設計模式

00:23:39.486 --> 00:23:42.890
不像以前我們有網絡瀏覽器做爲
客戶端

00:23:43.724 --> 00:23:45.926
我們當然有iOS應用

00:23:45.993 --> 00:23:47.761
它有我們的MVC設計模式

00:23:47.828 --> 00:23:49.596
你看到它還有一個網絡接口

00:23:49.663 --> 00:23:51.231
有請求和迴應

00:23:51.765 --> 00:23:55.169
它和我們的Swift中間層聯繫
和我們剛剛做的類似

00:23:55.235 --> 00:23:57.004
這只是更有趣

00:23:57.070 --> 00:24:01.475
接收一個進入的路由請求 把它們
路由到一些邏輯

00:24:02.075 --> 00:24:04.811
然後 最後 我們還有一部分

00:24:04.878 --> 00:24:07.714
我們有一些有趣的服務
我們會討論一下

00:24:07.781 --> 00:24:10.317
用來保存我們應用的所有數據

00:24:12.419 --> 00:24:14.488
再深入一點

00:24:14.555 --> 00:24:15.789
我們有客戶端

00:24:16.490 --> 00:24:19.459
它有響應性
它是非常用戶特定的和視圖驅動的

00:24:19.526 --> 00:24:24.965
用來渲染一些漂亮的界面
和應用的用戶互動

00:24:25.032 --> 00:24:26.366
然後我們有中間層

00:24:26.433 --> 00:24:29.670
中間層響應用戶有的所有東西

00:24:29.736 --> 00:24:31.772
但是它還做一些很有趣的事

00:24:31.839 --> 00:24:35.709
當相片被遞交給中間層

00:24:35.776 --> 00:24:39.146
它會接受那些相片並儲存到
ObjectStore中

00:24:39.246 --> 00:24:41.381
會圍繞它們創建一些元數據

00:24:41.448 --> 00:24:43.383
但還會做些有趣的事

00:24:43.450 --> 00:24:48.622
它會把相片遞交給Watson的
Vision Insights

00:24:49.056 --> 00:24:51.225
提取相片的標籤

00:24:51.291 --> 00:24:53.694
山 湖和類似的東西

00:24:53.760 --> 00:24:57.164
這像是從中間層給我們的應用
添加一些特殊醬汁

00:24:57.598 --> 00:24:59.666
它還會注意到相片是在哪拍攝的

00:25:00.367 --> 00:25:03.637
調用Watson的Weather
Insights獲取信息

00:25:03.704 --> 00:25:05.305
當地的天氣是怎樣的？

00:25:05.405 --> 00:25:06.440
我們添加所有這些

00:25:06.507 --> 00:25:09.610
不是把這些雙程通信放在客戶端

00:25:09.676 --> 00:25:12.946
我們把它放在服務器端
它總是可用

00:25:13.013 --> 00:25:15.182
構成我們的服務

00:25:15.549 --> 00:25:18.018
實際上這是端對端Swift

00:25:18.218 --> 00:25:20.988
讓我們部署合適的代碼到合適的
地方

00:25:23.023 --> 00:25:25.359
這是在野外運行的BluePic

00:25:26.193 --> 00:25:27.394
它運行在設備上

00:25:27.461 --> 00:25:29.796
它連接了雲

00:25:29.863 --> 00:25:31.832
應用服務器接下來聯繫

00:25:31.899 --> 00:25:34.701
各種不同的服務
我提到過的 這很好

00:25:35.369 --> 00:25:39.373
現在如果出現一些問題 我們需要
調試或進一步開發應用

00:25:39.439 --> 00:25:40.274
我們要怎麼做？

00:25:40.674 --> 00:25:43.310
做爲一個iOS開發者我們知道該
怎麼做

00:25:43.911 --> 00:25:46.547
我們獲取應用的源代碼放到我們
的Mac中

00:25:46.780 --> 00:25:49.716
我們把它載入Xcode
然後我們準備好了 對嗎？

00:25:49.783 --> 00:25:50.884
我們可以調試它

00:25:51.552 --> 00:25:52.753
我們可以調試應用

00:25:52.819 --> 00:25:55.756
你可以向雲發送請求

00:25:56.056 --> 00:25:58.025
我們現在知道做這些

00:25:58.292 --> 00:26:00.694
但是現在中間層也在運行Swift

00:26:00.761 --> 00:26:01.595
我們要怎麼做？

00:26:02.062 --> 00:26:05.666
對的 你可能不想
像我一樣在Linux上使用VI

00:26:07.534 --> 00:26:09.303
但是我們能做相同的事

00:26:09.369 --> 00:26:14.107
我們可以獲取服務器端源代碼到
Mac中

00:26:14.341 --> 00:26:18.111
把它載入Xcode 然後我們就可以
進行正常的開發

00:26:18.178 --> 00:26:20.781
並且在Mac上本地調試
我們在調試和開發

00:26:23.784 --> 00:26:24.751
這令人興奮

00:26:27.187 --> 00:26:30.324
現在我們的開發世界變得更大了

00:26:30.424 --> 00:26:32.659
我們實際上控制端到端的所有事

00:26:32.726 --> 00:26:36.096
從客戶端到中間層
甚至到我們接觸的服務

00:26:36.463 --> 00:26:38.632
我們真的對此感到興奮

00:26:38.699 --> 00:26:41.535
因爲我們認爲它降低了開發週期

00:26:41.635 --> 00:26:43.203
因爲你在客戶端上工作

00:26:43.270 --> 00:26:45.606
而且你想在後端增加功能

00:26:45.672 --> 00:26:47.441
是在一個你瞭解的世界中

00:26:48.976 --> 00:26:53.013
到那一端 我們做爲開發者
我們認爲我們可以再深入一些

00:26:53.614 --> 00:26:56.617
就像我們對程序包目錄
和Swift沙盒所做的

00:26:56.683 --> 00:26:59.653
我們開發了叫做
IBM Cloud Tools for Swift應用

00:27:00.287 --> 00:27:04.224
作爲一個Mac應用來幫助我們管理
這個更大的開發世界

00:27:04.725 --> 00:27:06.593
我們對此感到興奮

00:27:08.161 --> 00:27:11.198
這個應用實際上使我們能夠

00:27:11.265 --> 00:27:13.800
管理端到端的整個棧

00:27:14.835 --> 00:27:17.905
有很多事是我們能手動做的

00:27:18.639 --> 00:27:20.707
但是爲什麼不用一些工具來幫助
你呢？

00:27:20.774 --> 00:27:22.009
IBM Cloud Tools for Swift

00:27:22.075 --> 00:27:24.278
我們期待聽到你們對此的反饋

00:27:24.344 --> 00:27:26.280
像我們的沙盒和目錄

00:27:26.914 --> 00:27:30.250
我們會繼續 你們知道
我們的這些應用剛開始

00:27:30.317 --> 00:27:33.654
做爲開發者我們知道我們想要它
做的

00:27:33.954 --> 00:27:36.623
我們會繼續增加功能並聆聽社區

00:27:36.690 --> 00:27:38.592
但是我們對它的可能性感到興奮

00:27:39.359 --> 00:27:42.129
我們的目標是允許社區

00:27:42.196 --> 00:27:46.600
繼續開發優秀的應用
現在由服務器上的Swift驅動

00:27:48.235 --> 00:27:50.204
有了這些背景

00:27:50.270 --> 00:27:52.306
讓我們再看看一些演示

00:27:53.407 --> 00:27:56.076
會向你展示和Swift一起的未來
有多光明

00:28:01.748 --> 00:28:05.819
首先這是
IBM Cloud Tools for Swift

00:28:06.253 --> 00:28:07.888
如果你想要開始

00:28:08.222 --> 00:28:11.925
它顯示給你一個界面
是一個漂亮的富界面

00:28:12.092 --> 00:28:14.828
對那些想要
開始使用BluePic的人

00:28:15.095 --> 00:28:18.065
它還允許創建一個BluePic工程

00:28:18.866 --> 00:28:21.935
創建Kitura工程或一個空工程

00:28:22.436 --> 00:28:23.904
關於這有趣的部分

00:28:23.971 --> 00:28:27.307
不僅是克隆那些工程

00:28:27.374 --> 00:28:31.044
還提供來自IBM Cloud的資源

00:28:31.111 --> 00:28:34.181
當你準備好部署工程
它會

00:28:34.248 --> 00:28:37.251
實際上 當你創建這些
它會部署它

00:28:37.317 --> 00:28:39.453
因爲它知道這是一個工作的例子

00:28:40.053 --> 00:28:43.490
要準備好並快速運行
這是開始的一個好方式

00:28:45.626 --> 00:28:48.662
對我們 我們已經創建了一個
BluePic應用

00:28:49.930 --> 00:28:52.399
你可以看到
我們有一個BluePic演示

00:28:53.267 --> 00:28:54.234
非常聰明的命名

00:28:55.035 --> 00:28:57.204
在這你可以看到我們有一個客戶端
應用

00:28:57.271 --> 00:29:00.140
一個客戶端應用和雲運行時之間
的捆綁

00:29:00.240 --> 00:29:01.408
它們都用Swift寫

00:29:01.975 --> 00:29:06.280
此外如果我們深入
這裏是服務器端代碼

00:29:06.580 --> 00:29:10.684
你可以看到它有代碼在我的電腦
本地位置的引用

00:29:10.751 --> 00:29:13.854
以及綁定到它在雲上的位置

00:29:13.921 --> 00:29:18.192
以及爲了應用提供的所有服務

00:29:18.559 --> 00:29:21.895
我可以在Mac本地管理所有這些

00:29:23.830 --> 00:29:26.500
並且我可以啓動

00:29:26.567 --> 00:29:30.003
在界面中點擊一下
來查看我的客戶端

00:29:30.904 --> 00:29:32.973
這就是BluePic的客戶端應用

00:29:35.542 --> 00:29:40.080
它也被創建了 讓我放大一下
這個文件

00:29:40.147 --> 00:29:41.648
Bluemix.plist

00:29:42.049 --> 00:29:44.551
知道開發週期 可以運行

00:29:44.618 --> 00:29:48.121
你的雲服務 在本地而不是遠程

00:29:48.188 --> 00:29:50.157
很容易控制這些

00:29:50.357 --> 00:29:55.262
它會監聽本地8090或者遠程的
在Bluemix裏

00:29:55.329 --> 00:29:57.130
並傳遞授權

00:29:58.165 --> 00:30:00.367
這裏的想法是使這些簡單

00:30:01.268 --> 00:30:03.770
在這我們繼續運行
讓我們想像

00:30:03.837 --> 00:30:10.310
有人提交了一個關於這個應用的
錯誤報告

00:30:10.477 --> 00:30:11.745
這是我們的應用

00:30:12.045 --> 00:30:14.481
它有漂亮的界面

00:30:15.048 --> 00:30:17.384
我們可以滾動
我們可以看更多圖片

00:30:17.451 --> 00:30:21.188
如果我們點擊這些圖片
我們可以看到有更多信息

00:30:21.255 --> 00:30:24.024
這一張的名字是自然
我們可以看看是誰拍攝的

00:30:24.391 --> 00:30:26.393
可以看到 是在德克薩斯州
奧斯汀拍攝的

00:30:26.460 --> 00:30:27.794
在那沒有山

00:30:29.263 --> 00:30:31.265
我們還可以看到當時的天氣

00:30:31.365 --> 00:30:35.602
多虧Watson Insight
我們看到一些標籤

00:30:35.669 --> 00:30:38.005
這很有趣
如果我點擊標籤可以看到

00:30:38.071 --> 00:30:40.307
我們有一個相片有湖

00:30:41.375 --> 00:30:42.943
如果我返回 讓我們點擊山

00:30:43.577 --> 00:30:45.612
我們看到有一些相片有山

00:30:45.679 --> 00:30:48.649
所有這些都是通過後端集成完成的

00:30:48.715 --> 00:30:51.718
用戶不需要加標籤
這是自動提取的

00:30:52.686 --> 00:30:55.422
但是我們聽說有一些抱怨關於
當我點擊多雲的天時

00:30:55.489 --> 00:30:56.590
所以讓我們看看

00:30:57.624 --> 00:30:59.660
我們點擊多雲的天
我們看不到任何東西

00:31:00.060 --> 00:31:02.796
我們知道這發生了什麼

00:31:02.863 --> 00:31:05.732
不知道爲什麼服務器沒有返回正確
結果

00:31:06.433 --> 00:31:07.534
讓我們切換一下

00:31:08.368 --> 00:31:10.704
我們想找出原因 弄清真相

00:31:11.271 --> 00:31:15.108
所以我們來到這 點擊服務器端
代碼

00:31:16.476 --> 00:31:20.113
它會啓動並顯示服務器端代碼
所在的目錄

00:31:21.348 --> 00:31:23.250
如果我把這些載入一個終端

00:31:25.986 --> 00:31:28.288
你可以看到有很多相同文件
我提到過的

00:31:28.355 --> 00:31:30.357
我們在服務器上
使用Swift 3.0

00:31:30.724 --> 00:31:33.260
我們有Package.Swift
我們有資源

00:31:33.660 --> 00:31:35.295
我繼續

00:31:35.362 --> 00:31:37.798
並創建了一個服務器端代碼的
Xcode工程

00:31:39.066 --> 00:31:40.067
讓我們打開它

00:31:42.236 --> 00:31:45.172
這就是代碼
這是一個圖像的獲取處理器

00:31:45.305 --> 00:31:47.875
我們知道當我們想要圖像
我們的圖像供給

00:31:47.941 --> 00:31:51.078
我們會調用獲取函數 在服務器
的/images目錄

00:31:51.745 --> 00:31:53.614
若我們看看這 我們想要深入它並說

00:31:53.680 --> 00:31:57.818
不知道爲什麼當我傳入一個標籤
我們沒有返回正確結果

00:31:58.018 --> 00:32:01.355
讓我們在這加一個斷點
我們會運行服務器

00:32:05.158 --> 00:32:08.195
現在我們可以看到服務器在監聽
本地的8090端口

00:32:09.129 --> 00:32:10.597
讓我們切回去

00:32:14.968 --> 00:32:19.706
在這我們要客戶端的本地選擇是

00:32:19.773 --> 00:32:22.075
這樣它就會連接到我們的本地服務器

00:32:22.142 --> 00:32:23.911
讓我們重新運行模擬器

00:32:27.548 --> 00:32:30.817
順便說一下 我在網絡連接這方面
真是很幸運

00:32:31.151 --> 00:32:32.486
請繼續保持你們所做的

00:32:34.021 --> 00:32:37.658
讓我們向下滾動到我們有問題的
文件

00:32:37.724 --> 00:32:38.859
讓我們在這點擊

00:32:39.293 --> 00:32:41.061
讓我們點擊多雲的天

00:32:41.261 --> 00:32:42.262
好的

00:32:43.163 --> 00:32:45.098
在這我們在服務器來到了斷點

00:32:51.705 --> 00:32:54.274
如果我們想知道發生了什麼

00:32:54.341 --> 00:32:55.509
比如我們想要打印標籤

00:32:58.045 --> 00:33:01.315
我們可以看到
有點難看到那個

00:33:01.815 --> 00:33:05.319
我們可以看到進入的字符串
是cloudy%20sky

00:33:05.819 --> 00:33:07.187
這不好
我們不想要這樣

00:33:08.388 --> 00:33:09.957
讓我們看看

00:33:10.023 --> 00:33:11.959
我們還知道
有Foundation

00:33:12.659 --> 00:33:17.030
若我們用Foundation清理它

00:33:18.732 --> 00:33:20.501
我們會移除百分號

00:33:21.635 --> 00:33:24.571
現在這是一個變量而不是一個let

00:33:25.572 --> 00:33:26.940
讓我們構建它

00:33:30.511 --> 00:33:31.712
我們會再運行它

00:33:32.546 --> 00:33:33.547
重新運行服務器

00:33:36.016 --> 00:33:38.318
讓我們返回應用

00:33:39.052 --> 00:33:41.822
好了

00:33:42.489 --> 00:33:43.624
等待我們的時候超時了

00:33:44.625 --> 00:33:47.361
讓我們返回
讓我們再點擊一次多雲的天

00:33:48.395 --> 00:33:50.063
看看我們是不是改正了我們的問題

00:33:51.498 --> 00:33:52.332
打印標籤

00:33:53.033 --> 00:33:54.868
好多了
這是我們想要的

00:33:56.336 --> 00:34:00.974
讓我們關閉這個斷點並繼續

00:34:06.914 --> 00:34:08.514
我們看到我們得到了結果

00:34:14.755 --> 00:34:17.257
此外 因爲我改正了錯誤

00:34:17.991 --> 00:34:21.395
我可以返回到Swift雲工具

00:34:21.460 --> 00:34:25.132
我可以進行重新部署
把這些代碼部署到服務器上

00:34:25.364 --> 00:34:27.701
它會馬上開始部署代碼

00:34:28.068 --> 00:34:30.536
和你的客戶端一起工作就是這麼簡單

00:34:30.603 --> 00:34:33.440
和你的服務器端
以及重新部署到雲

00:34:40.746 --> 00:34:43.016
我希望你們喜歡這些演示

00:34:43.083 --> 00:34:46.687
我需要告訴你因爲每件事都進展順利
我覺得放鬆了很多

00:34:48.922 --> 00:34:53.493
代表IBM
我和John謝謝所有抽空前來的人

00:34:54.061 --> 00:34:56.530
做爲一個Swift開發者這是令人
興奮的時候

00:34:57.097 --> 00:35:01.902
我們邀請你加入我們
加入更廣泛的社區

00:35:01.969 --> 00:35:05.539
把Swift的能力帶到服務器

00:35:06.139 --> 00:35:08.475
更多信息 關於你在這聽到的任何
事

00:35:08.842 --> 00:35:10.577
關於我們是什麼 IBM在做什麼

00:35:11.178 --> 00:35:15.549
我們有developer.IBM.com/Swift
你們可以來我們的開發中心

00:35:16.016 --> 00:35:17.451
就這些了 再次感謝

00:35:17.518 --> 00:35:18.585
我會交回給Philippe

00:35:27.828 --> 00:35:31.865
如你們見 IBM對Swift
進行了很多很棒的工作

00:35:31.932 --> 00:35:34.535
他們不僅僅貢獻優秀的代碼

00:35:34.868 --> 00:35:36.603
他們還豐富社區

00:35:36.670 --> 00:35:38.605
和他們開發服務的各種經驗

00:35:38.672 --> 00:35:40.307
和流水線化開發流程

00:35:40.841 --> 00:35:44.645
他們的一些工作對使服務器端
Swift成爲可能相當重要

00:35:45.946 --> 00:35:49.049
但是你們也可以幫助
使服務器端Swift成爲現實

00:35:49.750 --> 00:35:53.086
有一些事是你們可以貢獻的

00:35:54.288 --> 00:35:56.723
Swift的一些部分還沒有完成

00:35:56.790 --> 00:35:58.425
有很多工作要做

00:35:58.659 --> 00:36:01.361
有一些功能還沒有實現

00:36:01.662 --> 00:36:05.032
沒有實現表明有貢獻的機會

00:36:05.499 --> 00:36:08.168
有很多容易的方式讓你做出貢獻

00:36:08.235 --> 00:36:13.774
缺陷追蹤系統有一類問題被加上
了初學者缺陷的標籤

00:36:13.841 --> 00:36:15.776
但是代碼不僅僅是實現

00:36:16.310 --> 00:36:19.880
設計可以和Swift一起工作的
新API和指南

00:36:19.947 --> 00:36:23.851
是郵件列表上的日常工作

00:36:24.084 --> 00:36:27.454
很多討論是關於語言本身的工作

00:36:27.521 --> 00:36:29.690
並且是來自像你這樣的貢獻者

00:36:30.657 --> 00:36:34.228
當然 你的程序包 你的應用

00:36:34.294 --> 00:36:36.563
會使得服務器上的Swift了不起

00:36:38.365 --> 00:36:41.935
如果你有任何問題
關於資源或鏈接

00:36:42.002 --> 00:36:44.371
關於我們今天討論的內容的

00:36:44.438 --> 00:36:48.242
我們有本場演講 我們有一切
集合在一起

00:36:48.909 --> 00:36:52.613
還有一些很好的相關演講

00:36:52.679 --> 00:36:54.548
我強烈建議觀看

00:36:54.915 --> 00:36:59.887
API設計指南討論了我們的一些
設計上的想法

00:36:59.953 --> 00:37:03.123
在Swift 3新命名的背後

00:37:03.724 --> 00:37:07.294
我強烈建議你們看一下

00:37:07.361 --> 00:37:09.429
“Swift Foundation
的新特性”

00:37:09.496 --> 00:37:12.533
所有新添加的值的類型和特性

00:37:12.599 --> 00:37:16.103
都會在服務器上可用

00:37:16.703 --> 00:37:20.140
當然性能不僅僅是在本地應用上
必要的

00:37:20.908 --> 00:37:23.577
我們也需要確保服務器

00:37:23.644 --> 00:37:25.379
的響應性好而且快

00:37:25.445 --> 00:37:29.550
所以性能 在所有平臺上
Linux和Mac上都有

00:37:29.883 --> 00:37:31.351
是需要關注的

00:37:31.418 --> 00:37:36.757
我強烈建議看一看GCD中的新特性

00:37:36.823 --> 00:37:38.892
會和Swift 3一起發佈

00:37:40.427 --> 00:37:42.196
就是這些了 非常謝謝