00:00:19.453 --> 00:00:26.460
使用Core Motion
以健康和健身

00:00:27.427 --> 00:00:28.262
謝謝

00:00:28.962 --> 00:00:29.796
大家好

00:00:30.297 --> 00:00:32.598
下午好 歡迎

00:00:33.233 --> 00:00:34.535
我是Bharath Rao

00:00:34.601 --> 00:00:36.737
是Core Motion團隊工程師

00:00:37.004 --> 00:00:41.542
今天我很高興和你們談談健康和
健身

00:00:42.376 --> 00:00:46.313
在這次演講中 我會向你們展示
如何使用Core Motion框架

00:00:46.380 --> 00:00:50.551
來增加一些有趣和迷人的特性

00:00:50.617 --> 00:00:51.652
到你的應用

00:00:53.187 --> 00:00:54.454
在我們開始前

00:00:54.521 --> 00:00:56.390
對Core Motion新手們

00:00:56.456 --> 00:00:59.626
我想要提醒你去觀看一些我們過去
的演講

00:00:59.860 --> 00:01:04.031
他們有一些很好的信息
關於傳感器是怎麼工作的

00:01:04.096 --> 00:01:07.267
及怎麼在Core Motion中
使用這些傳感器

00:01:07.334 --> 00:01:14.041
來提供API來幫助你的應用觀察
統計和活動

00:01:14.107 --> 00:01:16.176
和設備Motion及其他很多

00:01:16.577 --> 00:01:17.444
請去看它們

00:01:18.946 --> 00:01:20.814
有了那些 讓我們開始

00:01:21.481 --> 00:01:23.517
這是我們今天爲你們準備好的

00:01:23.917 --> 00:01:26.153
我有一個對歷史加速儀的更新

00:01:26.220 --> 00:01:27.721
我希望和你們分享

00:01:29.189 --> 00:01:34.328
我們有一個新計步器事件API
針對iPhone和Apple Watch

00:01:35.462 --> 00:01:38.932
最後我們會把
設備Motion API帶到

00:01:38.999 --> 00:01:41.468
Apple Watch和
watchOS 3一起

00:01:44.771 --> 00:01:45.606
謝謝

00:01:48.709 --> 00:01:51.478
首先是歷史加速儀

00:01:54.414 --> 00:01:57.918
去年我們介紹了CM傳感器記錄API

00:01:58.118 --> 00:01:59.386
有了這個API

00:01:59.453 --> 00:02:03.223
你的應用可以訪問原始的加速儀採樣

00:02:03.290 --> 00:02:04.758
或很長一段時間的採樣

00:02:05.192 --> 00:02:08.027
而且你只需要用很少的電量來訪問

00:02:08.895 --> 00:02:12.866
當你的應用請求框架開始錄製這些採樣

00:02:12.933 --> 00:02:16.670
他們可以暫停
而且操作系統會提供那些採樣

00:02:16.737 --> 00:02:18.272
即使設備在休眠中

00:02:18.338 --> 00:02:20.541
當你的應用準備好使用那些採樣

00:02:20.607 --> 00:02:22.976
它們可以啓動併發送一個請求

00:02:23.043 --> 00:02:26.213
並且獲得對所有緩衝了的採樣的
訪問

00:02:28.916 --> 00:02:32.319
在watchOS 3中
我們有一系列重要更新

00:02:32.386 --> 00:02:34.855
首先是更長的時間

00:02:35.789 --> 00:02:40.093
現在你的應用有一個36小時的窗口
在其中它們可以啓動

00:02:40.160 --> 00:02:43.931
並且獲得對所有歷史加速儀採樣
的訪問

00:02:45.899 --> 00:02:48.235
第二個更新應該不會讓你們吃驚

00:02:48.302 --> 00:02:51.805
它是對於API被請求最多的更新之一

00:02:52.139 --> 00:02:54.474
所以我很高興宣佈
在watchOS 3中

00:02:54.541 --> 00:02:57.778
現在採樣的延遲只有3秒了

00:03:00.547 --> 00:03:03.417
有了這個更新現在你可以使用傳感器
記錄器

00:03:03.483 --> 00:03:07.421
不僅僅是觀測用戶活動
或者是長時間

00:03:07.487 --> 00:03:09.857
而且有一些實時應用

00:03:09.923 --> 00:03:12.059
對這些應用你現在可以使用傳感器
記錄器

00:03:12.125 --> 00:03:13.327
也許

00:03:14.928 --> 00:03:18.632
來追蹤體育活動或者記錄健身房
裏的健身

00:03:18.699 --> 00:03:20.133
或者甚至是健康診斷

00:03:20.667 --> 00:03:24.638
想像應用在Apple Watch上
可以偵測手顫

00:03:24.705 --> 00:03:28.408
現在每當用戶發生一些手顫

00:03:28.642 --> 00:03:29.810
他們可以啓動應用

00:03:30.177 --> 00:03:33.814
你的應用將能夠獲得所有歷史
加速儀採樣

00:03:34.281 --> 00:03:35.916
對它們進行一些分析

00:03:35.983 --> 00:03:40.921
得到一個報告說那個手顫有多嚴重

00:03:40.988 --> 00:03:43.156
並且是哪種顫動

00:03:43.223 --> 00:03:46.727
並和用戶分享它
還可能在獲得同意的情況下分享給醫生

00:03:46.793 --> 00:03:51.565
所以這樣可以對這種病症加速
診斷和治療

00:03:53.267 --> 00:03:57.237
在watchOS 3中
對歷史加速儀的更新是很好的

00:03:57.804 --> 00:03:59.940
下一個是計步器

00:04:06.380 --> 00:04:09.082
CMPedometer是
一個多用的API

00:04:09.650 --> 00:04:13.854
它記錄統計和距離
以及階梯步級

00:04:13.921 --> 00:04:16.356
用戶在一天中所爬的階梯步級

00:04:16.423 --> 00:04:19.593
這樣你可以用它來創造一個全天
活動的追蹤器

00:04:19.660 --> 00:04:22.896
你可以設置一些有趣的目標讓用戶
來達到

00:04:22.996 --> 00:04:26.366
通過這樣你激勵他們達到一個
更健康的生活方式

00:04:27.301 --> 00:04:33.040
但是CMPedometer真正強大
之處是在鍛鍊的環境中

00:04:34.107 --> 00:04:36.476
比如速度測量

00:04:36.543 --> 00:04:41.181
我們有步幅估計算法在iPhone
和Apple Watch上運行

00:04:41.515 --> 00:04:42.716
使用這些

00:04:42.950 --> 00:04:46.553
我們可以提供相當精確的速度和
距離測量

00:04:46.620 --> 00:04:49.089
即使手機沒有GPS信號

00:04:49.156 --> 00:04:51.225
或你帶着Apple Watch跑步

00:04:51.291 --> 00:04:52.860
你沒有帶手機

00:04:53.060 --> 00:04:55.929
即使這樣用戶得到非常精確的測量

00:04:56.997 --> 00:05:00.133
我們今天增加的計步器事件API

00:05:00.701 --> 00:05:04.671
實際上會幫你使那些健身體驗

00:05:04.738 --> 00:05:06.940
更吸引人更精確

00:05:09.776 --> 00:05:13.580
讓我們設想一個典型的跑步健身
在地市裏跑步

00:05:14.014 --> 00:05:15.382
做爲第三方開發者

00:05:15.716 --> 00:05:18.519
你在這種情況下會面對的挑戰之一是

00:05:18.585 --> 00:05:20.988
如何偵測所有的那些開始和停止

00:05:21.054 --> 00:05:24.892
當用戶在城市裏跑步時在十字路口
發生的

00:05:25.392 --> 00:05:27.961
用戶在紅燈的時候停下來

00:05:28.028 --> 00:05:33.333
你的應用會繼續累加他們站立不動
的時間

00:05:34.101 --> 00:05:36.570
在他們完成跑步的時候

00:05:36.970 --> 00:05:39.039
你已經累加了足夠的時間

00:05:39.106 --> 00:05:43.110
如果你試着計算他們的整個跑步
的平均速度

00:05:43.177 --> 00:05:47.481
你的結果可能和他們的爺爺的
速度相似

00:05:50.117 --> 00:05:53.487
也許爺爺的速度比他們快 沒關係

00:05:53.687 --> 00:05:59.092
我想說的是你會得到一個非常
不精確的速度

00:05:59.159 --> 00:06:01.795
有可能遠遠小於他們跑步的速度

00:06:02.362 --> 00:06:04.231
一個可能的解決方法是

00:06:04.298 --> 00:06:07.801
你可以提供手動的暫停和繼續
選項

00:06:08.402 --> 00:06:10.237
但是現在一旦他們暫停了

00:06:10.304 --> 00:06:14.308
他們需要記得當他們開始跑步時
繼續這次鍛鍊

00:06:14.608 --> 00:06:18.812
如果他們沒有這麼做所有他們在
應用暫停時跑的步

00:06:18.879 --> 00:06:21.481
不會被記錄在鍛鍊中

00:06:21.548 --> 00:06:25.752
所以如果他們忘記暫停
他們會得到不精確的速度

00:06:25.819 --> 00:06:29.389
如果他們忘記繼續
他們失去距離

00:06:30.524 --> 00:06:35.562
很明顯你需要一些自動暫停和繼續
的偵測

00:06:35.629 --> 00:06:38.699
不但要精確 還要響應快速

00:06:38.765 --> 00:06:40.767
需要感覺你的應用

00:06:40.834 --> 00:06:44.438
能很好的偵測那些開始和停止

00:06:45.706 --> 00:06:48.976
此時你可能在想爲什麼不用GPS
和步數

00:06:49.042 --> 00:06:51.578
畢竟你的應用可以訪問那些

00:06:53.013 --> 00:06:54.581
如果你以前用過GPS

00:06:54.648 --> 00:06:57.484
你知道你不得不做大量的過濾工作

00:06:57.551 --> 00:06:59.319
這樣你可以移除噪聲

00:06:59.720 --> 00:07:02.723
也就是說響應會很慢

00:07:03.524 --> 00:07:06.393
而你從CMPedometer
得到的步數

00:07:06.460 --> 00:07:07.628
它有一個內置的延遲

00:07:07.995 --> 00:07:11.298
我們這樣做因爲我們想避免誤報

00:07:11.665 --> 00:07:13.867
我們用步數來估計步幅

00:07:14.168 --> 00:07:16.270
從那我們計算距離和速度

00:07:16.336 --> 00:07:18.105
所以這對我們很重要

00:07:18.172 --> 00:07:22.676
首先有精確的步數計數

00:07:25.412 --> 00:07:28.715
所以在這個版本中
我們給你計步器事件

00:07:28.782 --> 00:07:31.685
會幫助你偵測那些開始和停止

00:07:31.752 --> 00:07:35.122
不但有好的精確度
而且延遲低

00:07:36.223 --> 00:07:40.761
我們的計步器事件解決方案
或者自動暫停繼續方案

00:07:40.827 --> 00:07:42.496
使用一個預測算法

00:07:42.996 --> 00:07:45.632
這個預測算法用用戶數據進行訓練

00:07:45.699 --> 00:07:47.901
所以我們可以提高估計的似然度

00:07:47.968 --> 00:07:52.039
關於用戶是運動中還是完全靜止？

00:07:52.506 --> 00:07:54.508
當然都是在徒步的情況下

00:07:55.576 --> 00:07:59.112
通過這麼做我們可以彌補大部分

00:07:59.179 --> 00:08:01.982
和步數計數算法相關的延遲

00:08:02.316 --> 00:08:05.219
但是我們可以這樣做並有很好
的精度

00:08:07.621 --> 00:08:08.956
我還想要指出

00:08:09.022 --> 00:08:12.993
因爲預測算法一直追蹤用戶是否
在移動

00:08:13.060 --> 00:08:14.895
或者他們停下來了

00:08:15.229 --> 00:08:17.698
我們還支持步行速度

00:08:17.764 --> 00:08:21.034
當用戶停下來

00:08:21.802 --> 00:08:24.938
不論是從走路還是跑步
你會得到一個暫停事件

00:08:25.005 --> 00:08:28.008
一旦用戶開始跑或走

00:08:28.075 --> 00:08:30.410
你會在應用中得到一個繼續事件

00:08:32.412 --> 00:08:37.017
計步器事件API在iOS X和
watchOS 3上看起來是一樣的

00:08:38.852 --> 00:08:40.821
讓我們來看看API

00:08:42.789 --> 00:08:44.591
你有暫停和繼續事件

00:08:45.192 --> 00:08:47.427
每個事件都包括一個具體時間

00:08:47.494 --> 00:08:51.598
算法發現從運行變成非運動
狀態的時間

00:08:51.665 --> 00:08:52.566
以及反過來

00:08:53.233 --> 00:08:55.736
你需要開始和停止更新

00:08:56.103 --> 00:08:59.006
來幫助你的應用註冊和取消註冊
這些事件

00:09:01.842 --> 00:09:06.180
我一直在說計步器事件會怎麼

00:09:06.246 --> 00:09:09.783
被用來清楚劃分跑步的階段

00:09:09.850 --> 00:09:12.085
在一次完整的跑步鍛鍊中

00:09:12.452 --> 00:09:15.956
以用你能怎樣用它來得到精確的
測量

00:09:16.723 --> 00:09:20.994
但是你還有其他有趣的計步器用法

00:09:21.128 --> 00:09:22.863
讓我們看一個例子

00:09:24.164 --> 00:09:26.667
這是一個iPhone上的越野跑應用

00:09:26.934 --> 00:09:29.803
所以我們會用計步器事件來看

00:09:30.571 --> 00:09:33.040
來找出什麼時候我們能夠與用戶
銜接

00:09:33.106 --> 00:09:37.177
以及當我們這麼做時我們能夠
怎樣向他們顯示一些有趣的信息

00:09:37.244 --> 00:09:41.348
能讓他們響應更多的活動

00:09:42.282 --> 00:09:44.117
因爲這是越野跑應用

00:09:44.184 --> 00:09:46.320
整個跑步過程中會有高度的變化

00:09:46.386 --> 00:09:49.623
我們要看看這是否會有一些有意義
的信息

00:09:54.228 --> 00:09:56.530
我們會用CMPedometer類

00:09:56.597 --> 00:09:58.665
來註冊暫停和繼續事件

00:09:58.732 --> 00:10:01.235
我們還會得到相關的高度更新

00:10:01.301 --> 00:10:04.838
或者海拔高度的變化
使用CMAltimeter類

00:10:06.840 --> 00:10:10.043
如果你想要繼續在應用中
接收計步器事件

00:10:10.110 --> 00:10:11.678
即使屏幕關閉

00:10:11.745 --> 00:10:13.514
你的應用必須保持運行

00:10:14.615 --> 00:10:16.583
在iPhone這麼做的一個方法

00:10:16.650 --> 00:10:19.920
是訂閱持續後臺位置

00:10:20.153 --> 00:10:22.389
如果你對知道更多相關信息有興趣

00:10:22.456 --> 00:10:26.393
我建議你去看Core Location最佳實踐
演講

00:10:26.460 --> 00:10:28.462
會在今天的 WWDC 舉行

00:10:30.264 --> 00:10:33.133
接下來我們會首先註冊相關的
高度更新

00:10:33.200 --> 00:10:34.968
並檢查可用性

00:10:35.035 --> 00:10:37.604
然後我們提供一個操作隊列

00:10:37.671 --> 00:10:41.141
並提供一個回調處理器來開始
接收那些更新

00:10:41.875 --> 00:10:46.713
在這個例子中我會記錄最近的更新

00:10:46.780 --> 00:10:50.717
但是可能在你的應用中
你可以緩存所有更新

00:10:50.918 --> 00:10:53.654
在鍛鍊結束時你可能可以提供

00:10:53.720 --> 00:10:56.757
一個漂亮的整個跑步過程的高度
輪廓

00:10:59.393 --> 00:11:01.962
接下來我們會註冊計步器事件本身

00:11:02.029 --> 00:11:03.597
首先還是檢查是否存在

00:11:03.764 --> 00:11:06.967
然後通過提供回調處理器來註冊

00:11:08.335 --> 00:11:13.140
這只是一個小提示來確保我不會
面臨併發問題

00:11:13.207 --> 00:11:17.044
我會工作在來自同樣的操作隊列上
的所有處理器

00:11:19.680 --> 00:11:23.317
現在這個應用被設置成找出

00:11:23.383 --> 00:11:26.720
什麼時候用戶開始和停止跑步

00:11:27.521 --> 00:11:31.225
我們準備好看一下它們是否能用在
一個有前後關係的方式中

00:11:31.792 --> 00:11:35.262
他們一開始跑步我們就會在應用中
收到繼續事件

00:11:36.096 --> 00:11:37.664
在這時你可以

00:11:38.532 --> 00:11:41.768
記錄下你收到繼續事件的時間

00:11:41.835 --> 00:11:43.670
那麼在鍛鍊完成時

00:11:43.737 --> 00:11:46.974
你可以把所有跑步時間加起來

00:11:47.474 --> 00:11:51.378
來計算整次跑步的精確的平均速度

00:11:51.845 --> 00:11:56.683
在這個例子中我會記錄下最近的
高度更新

00:11:56.750 --> 00:12:00.554
這樣我就知道他們開始跑步時是
在什麼高度開始的

00:12:01.755 --> 00:12:03.490
當用戶停止時

00:12:03.557 --> 00:12:06.326
現在是個很好的機會來找出

00:12:06.560 --> 00:12:09.963
因爲我們有高度 我們可以找出
是不是他們在跑上一座山

00:12:10.764 --> 00:12:13.634
如果是的
這可能是他們第一次在山上跑步

00:12:13.700 --> 00:12:16.537
爲什麼不給他們一個登山包成就

00:12:17.237 --> 00:12:20.040
如果他們已經在山上跑了多次

00:12:20.107 --> 00:12:24.378
因爲我們有每次跑步的精確時間

00:12:24.611 --> 00:12:25.879
現在我們可以比較它們

00:12:25.946 --> 00:12:29.716
並且給它們一個統計
關於他們在特定的山上跑步中做得怎樣

00:12:31.084 --> 00:12:34.388
這是我們使用計步器事件的一個
例子

00:12:34.454 --> 00:12:37.357
不僅僅達到非常精確的測量

00:12:37.424 --> 00:12:39.059
還劃分那些跑步階段

00:12:39.126 --> 00:12:42.663
這也是一個你可以使用

00:12:42.729 --> 00:12:44.965
那些事件來做些有趣的事的例子

00:12:46.700 --> 00:12:47.601
在跑步的最後

00:12:47.668 --> 00:12:50.537
當然你要取消那些註冊

00:12:50.604 --> 00:12:52.406
這也會釋放

00:12:52.472 --> 00:12:55.342
所有框架中的處理器代碼塊

00:12:57.077 --> 00:13:00.781
計步器事件在iPhone 6s
和更新發布的iPhone中可用

00:13:00.848 --> 00:13:02.316
還有Apple Watch

00:13:03.350 --> 00:13:06.954
這就是iOS X和
watchOS 3中的計步器

00:13:08.422 --> 00:13:10.290
接下來讓我們談談設備Motion

00:13:12.860 --> 00:13:14.261
如你所知

00:13:14.328 --> 00:13:18.065
設備Motion API自從
iOS 5起就存在iPhone上

00:13:18.832 --> 00:13:23.804
有了watchOS 3 我們把相同
API帶到了Apple Watch

00:13:26.340 --> 00:13:29.943
Apple Watch上
有非常強大的傳感器包

00:13:30.010 --> 00:13:34.314
它是在我們手腕上一個固定的位置
並且我們全天都在使用

00:13:34.715 --> 00:13:36.283
因爲我們用手

00:13:36.350 --> 00:13:38.719
來做幾乎任何事
在我們全天做的事中

00:13:38.785 --> 00:13:42.956
這是一個很強大的工具
來觀察用戶的所有活動

00:13:43.857 --> 00:13:45.325
設備Motion所做的就是

00:13:45.392 --> 00:13:48.729
獲得加速儀和陀螺儀的採樣

00:13:48.795 --> 00:13:49.796
它融合這些

00:13:50.030 --> 00:13:53.333
來清楚地告訴你用戶的所有活動

00:13:53.400 --> 00:13:55.469
這些就在你的手腕上

00:13:57.237 --> 00:14:00.474
所有手腕上的motion被描述成
設備Motion

00:14:00.541 --> 00:14:02.409
使用四個不同的屬性

00:14:02.843 --> 00:14:07.414
姿態 重力 旋轉速度和用戶加速度

00:14:09.917 --> 00:14:14.021
如果你想詳細知道這些屬性是如何
導出的

00:14:14.087 --> 00:14:15.255
以及它們的作用

00:14:15.322 --> 00:14:19.693
我鼓勵你去看2011
和2012年的演講

00:14:20.561 --> 00:14:24.464
在這個演講中我會給你非常簡短
的關於這些屬性的概述

00:14:24.531 --> 00:14:26.333
這樣我們可以建立一些灌輸

00:14:26.600 --> 00:14:30.270
以及用例子看看你能怎麼使用它們

00:14:30.337 --> 00:14:33.173
在一些健康和健身應用中
用有趣的方式

00:14:34.274 --> 00:14:36.443
第一個屬性是姿態

00:14:37.578 --> 00:14:39.246
在你的應用中使用姿態

00:14:39.313 --> 00:14:44.618
你可以獲得對設備方向和空間的觀測

00:14:45.118 --> 00:14:49.723
你用CMDeviceMotion時
你獲得三個姿態屬性

00:14:50.457 --> 00:14:54.428
是四元數 旋轉矩陣 和歐拉角度

00:14:55.362 --> 00:14:57.731
當你在應用內使用姿態

00:14:57.798 --> 00:14:59.132
需要注意的一件事是

00:14:59.199 --> 00:15:01.368
每一個姿態觀測

00:15:01.435 --> 00:15:04.771
都和一個固定的參考座標系是相對的

00:15:05.939 --> 00:15:07.407
這的意思是

00:15:07.474 --> 00:15:09.610
每一個方向觀測

00:15:09.676 --> 00:15:13.380
是通過一個不是固定在設備上的
點進行的

00:15:13.447 --> 00:15:17.451
參考座標系保持靜止
但設備可以到處移動

00:15:17.518 --> 00:15:20.921
這就是你如何用姿態來觀測方向

00:15:22.723 --> 00:15:23.991
而且

00:15:24.391 --> 00:15:27.861
你的應用註冊來開始接收更新的時間

00:15:27.928 --> 00:15:30.697
是參考座標系設定的時間

00:15:30.764 --> 00:15:34.168
所以你的應用接下來收到的採樣

00:15:34.234 --> 00:15:35.602
會被計算

00:15:35.669 --> 00:15:40.440
用開始更新時設定的相對參考座標系
計算

00:15:40.707 --> 00:15:46.146
這是你在應用中使用姿態時需要注意的

00:15:46.513 --> 00:15:48.815
而且你不要做假設

00:15:48.882 --> 00:15:52.486
關於設備在絕對空間中的方向的假設

00:15:54.087 --> 00:15:55.989
下一個屬性是重力

00:15:57.591 --> 00:15:58.725
重力是

00:15:59.793 --> 00:16:04.231
它是重力 把物體拉向地心的力

00:16:04.298 --> 00:16:05.732
在設備Motion中

00:16:05.799 --> 00:16:08.635
它在設備座標系裏被表示成單位矢量

00:16:09.636 --> 00:16:15.709
使用重力你可以觀測設備的翻轉
和傾斜

00:16:16.977 --> 00:16:20.948
但是你可能會問 難道翻轉和傾斜
不也和姿態一樣是方向嗎？

00:16:21.014 --> 00:16:22.516
但是一個關鍵的不同是

00:16:22.583 --> 00:16:26.787
現在你從設備座標系中觀測所有方向

00:16:27.054 --> 00:16:31.325
比如如果我要保持我的手完美的
和地面平行

00:16:31.391 --> 00:16:34.261
在我的兩側
然後我把它移到我的前面

00:16:34.761 --> 00:16:36.597
你無法用重力觀測到這

00:16:36.663 --> 00:16:40.501
因爲重力的x y z成分會維持不變

00:16:40.567 --> 00:16:42.202
在這兩個方向中

00:16:42.503 --> 00:16:44.238
要觀測像這樣的情況
你需要

00:16:44.304 --> 00:16:47.341
一個觀測點是外部的或固定的

00:16:47.841 --> 00:16:50.377
當設備移動時
這就是姿態

00:16:50.444 --> 00:16:53.680
所以你可以用重力來觀測方向

00:16:53.747 --> 00:16:55.716
但是在有限的情況下

00:16:56.083 --> 00:17:00.053
但是在你所設想的應用中
這可能工作得很好

00:17:01.555 --> 00:17:03.390
關於重力的另一件事是

00:17:03.457 --> 00:17:05.659
當你拿着設備並完全靜止時

00:17:05.726 --> 00:17:07.861
你可以用加速儀觀測它

00:17:07.928 --> 00:17:11.198
加速儀會得到一個固定的加速度

00:17:11.431 --> 00:17:14.434
你可以從加速儀中讀出它

00:17:15.135 --> 00:17:17.704
但是一旦你開始移動設備

00:17:17.771 --> 00:17:20.674
這時加速儀獲取的不光是重力成分

00:17:20.741 --> 00:17:24.211
它還獲取所有用戶產生的motion

00:17:24.611 --> 00:17:27.881
這會使只獲得重力成分越來越難

00:17:28.515 --> 00:17:31.618
設備Motion所做的是使用融合

00:17:31.685 --> 00:17:37.291
我們轉而用陀螺儀來追蹤重力單位
矢量

00:17:40.227 --> 00:17:42.829
下一個屬性是旋轉率

00:17:43.397 --> 00:17:47.134
就像名字暗示的
這是角度motion的變化率

00:17:47.568 --> 00:17:50.470
這很適合用來觀測一些事
比如手腕的旋轉

00:17:50.537 --> 00:17:52.272
當你旋轉手腕時

00:17:52.339 --> 00:17:55.075
會有一個圍繞設備x軸
的旋轉motion

00:17:55.142 --> 00:17:57.544
你可以用旋轉率觀測它

00:17:58.212 --> 00:18:01.148
你還可以觀測圍繞身體的任何旋轉

00:18:01.381 --> 00:18:05.686
因爲我們的大多數
固定我們的軀幹活動我們的手臂

00:18:05.752 --> 00:18:08.722
所以會有一些弓形的motion

00:18:08.789 --> 00:18:11.091
所以有旋轉並且你可以觀測到它

00:18:11.425 --> 00:18:14.661
利用設備Motion的旋轉率屬性

00:18:17.364 --> 00:18:19.967
最後一個屬性是用戶加速度

00:18:20.234 --> 00:18:23.136
你通過設備Motion得到的用戶
加速度

00:18:23.203 --> 00:18:24.705
是對重力的抵消

00:18:25.172 --> 00:18:28.041
回憶一下我提過的加速儀怎麼獲取

00:18:28.108 --> 00:18:30.844
重力成分和用戶產生的成分

00:18:30.911 --> 00:18:33.213
而這僅僅是用戶產生的成分

00:18:33.614 --> 00:18:36.817
但是它抵消了導出的重力

00:18:36.884 --> 00:18:39.553
使用設備傳感器融合導出的重力

00:18:41.021 --> 00:18:44.424
這就是對這些屬性的快速概述

00:18:44.625 --> 00:18:48.795
現在讓我們看看你可以怎樣在應用中
使用它們的一些例子

00:18:50.764 --> 00:18:52.799
第一個屬性是姿態

00:18:53.066 --> 00:18:57.671
姿態很適合用來
觀察任何重複motion

00:18:57.838 --> 00:19:01.909
像是對舉重進行計數
所以當你舉起重物時

00:19:01.975 --> 00:19:05.612
你實際上進行了一系列方向的改變

00:19:05.679 --> 00:19:10.484
所以通過觀察這些方向改變是如何
重複的

00:19:10.817 --> 00:19:12.019
你可以計算次數

00:19:12.286 --> 00:19:14.655
使用姿態來這樣做最好的部分是

00:19:14.721 --> 00:19:17.658
現在他們可能使用一種機器
他們拉在

00:19:17.724 --> 00:19:19.660
水平方向或者從上面

00:19:19.726 --> 00:19:22.596
你可以用姿態觀測到所有重複

00:19:24.665 --> 00:19:28.335
重力 像我已經提到的
很適合用來測量翻轉和傾斜

00:19:28.802 --> 00:19:32.306
這表明你可以把它用在瑜珈應用中

00:19:32.372 --> 00:19:37.778
所以如果他們在做一個下犬式
或者保持一個戰士式姿勢

00:19:37.845 --> 00:19:40.714
你可以得出他們能保持姿勢在多
靜止的狀態

00:19:41.014 --> 00:19:43.817
當他們從一個姿勢變換到另一個
姿勢時

00:19:43.884 --> 00:19:47.221
你可以發現他們是用優雅的方式
這樣做

00:19:47.287 --> 00:19:48.989
還是隻是摔倒了

00:19:52.926 --> 00:19:57.130
旋轉率最有用的使用方法是

00:19:57.197 --> 00:19:59.566
觀測旋轉motion的速度

00:19:59.867 --> 00:20:01.835
比如以棒球練習爲例

00:20:01.902 --> 00:20:04.071
當你揮棒時

00:20:04.371 --> 00:20:06.740
你不只是圍繞身體旋轉你的手臂

00:20:06.807 --> 00:20:08.976
還有圍繞手腕的旋轉

00:20:09.076 --> 00:20:12.179
你可以用旋轉率的這兩個成分

00:20:12.246 --> 00:20:13.881
來估計揮棒速度

00:20:14.114 --> 00:20:16.917
當然你需要知道棒的長度

00:20:16.984 --> 00:20:19.820
以及要在棒上的哪點測量速度

00:20:22.356 --> 00:20:26.360
用戶加速度最好用在有一些突然
的motion時

00:20:26.660 --> 00:20:30.964
因爲加速儀捕捉所有用戶正在進行
的motion

00:20:31.031 --> 00:20:33.867
如果你想開發一種應用

00:20:33.934 --> 00:20:37.070
你用用戶加速度來測量一些小的
運動

00:20:37.137 --> 00:20:38.839
可能會被噪聲淹沒

00:20:39.139 --> 00:20:44.111
有突然的motion的地方是最適合
用用戶加速度的

00:20:44.378 --> 00:20:46.079
比如擊拳和反衝

00:20:46.146 --> 00:20:51.018
你可以知道他們打中沙包有多痛

00:20:51.084 --> 00:20:54.388
或者是對手
希望那是空氣製造的

00:20:56.690 --> 00:20:59.793
這只是一部分例子

00:20:59.860 --> 00:21:02.529
你能怎樣在應用中
使用設備Motion

00:21:03.163 --> 00:21:04.665
在看過這些之後

00:21:04.731 --> 00:21:07.801
若你覺得你有一個
可以使用設備Motion的應用的想法

00:21:07.868 --> 00:21:11.171
而且想知道更多
關於如何應用設備Motion

00:21:11.605 --> 00:21:13.740
請在明天到我們的實驗室去

00:21:13.807 --> 00:21:16.577
我們會很高興幫助你

00:21:18.579 --> 00:21:21.849
現在讓我們看看API
你有四個屬性

00:21:21.915 --> 00:21:25.385
姿態和重力 它們沒單位
重力是單位矢量

00:21:25.919 --> 00:21:30.691
用戶加速度的單位是G
旋轉率的單位是弧度每秒

00:21:32.893 --> 00:21:36.363
在你可以在你的應用內接收
設備Motion更新前

00:21:36.430 --> 00:21:38.298
你需要設定它們的採樣率

00:21:38.799 --> 00:21:41.301
你可以設定採樣率最高到100赫茲

00:21:41.635 --> 00:21:43.370
一旦你設定了採樣率

00:21:43.437 --> 00:21:47.541
你可以去註冊更新
使用開始更新這個方法

00:21:48.742 --> 00:21:49.943
從這之後

00:21:50.010 --> 00:21:53.547
你可以選擇週期性
獲取設備Motion屬性

00:21:53.614 --> 00:21:55.482
獲得最新採樣

00:21:55.949 --> 00:21:58.919
或者你可以提供一個回調處理器
你可以獲得

00:21:58.986 --> 00:22:02.222
設備Motion爲你產生的
每一個更新

00:22:03.957 --> 00:22:07.861
當然一旦你完成了
監聽設備Motion更新

00:22:07.928 --> 00:22:11.965
你可以取消註冊
使用stopDeviceMotionUpdates方法

00:22:13.500 --> 00:22:16.069
我的演講就是這些了

00:22:16.136 --> 00:22:18.906
現在我要把講臺交給Paul
他會帶你們

00:22:18.972 --> 00:22:21.675
看一個Apple Watch
的示例應用

00:22:21.742 --> 00:22:24.211
用一種有趣的方法
使用設備Motion

00:22:24.878 --> 00:22:26.747
謝謝 給你 Paul

00:22:33.954 --> 00:22:34.888
謝謝Bharath

00:22:36.156 --> 00:22:36.990
大家好

00:22:37.658 --> 00:22:40.060
我是Paul Thompson
我是Core Motion工程師

00:22:41.428 --> 00:22:43.730
Bharath剛談了Core
Motion API的新特性

00:22:44.498 --> 00:22:47.134
我要做的是向你們展示怎樣使用
它們中的一個

00:22:47.201 --> 00:22:48.669
在一個Apple Watch
健身應用中

00:22:50.370 --> 00:22:51.305
在這個應用中

00:22:51.805 --> 00:22:54.408
我們要做的是創建一次網球
鍛鍊

00:22:54.641 --> 00:22:58.011
然後我們會向設備Motion
訂閱傳感器更新

00:22:59.179 --> 00:23:01.481
最後我們會偵測揮拍

00:23:01.548 --> 00:23:04.484
並區分正手和反手揮拍

00:23:05.953 --> 00:23:09.890
要這麼做我們需要做的是利用
Core Motion的功能

00:23:10.490 --> 00:23:12.593
和一些HealthKit的新功能

00:23:14.461 --> 00:23:15.863
你們可能記得

00:23:16.830 --> 00:23:20.067
watchOS 2應用高度依賴
HealthKit和Core Motion

00:23:20.133 --> 00:23:22.236
來進行實時分析和傳感器輸出

00:23:22.569 --> 00:23:24.838
並提供給你數據
比如步數

00:23:24.905 --> 00:23:27.941
步級 距離和熱量消耗估計

00:23:28.742 --> 00:23:30.944
現在在一次鍛鍊中

00:23:31.345 --> 00:23:35.749
你的應用做有限的工作來處理
設備Motion採樣

00:23:35.816 --> 00:23:38.051
當用戶並沒有直接進入你的應用中

00:23:40.220 --> 00:23:43.290
但是當然
這個功能也帶來一些警告

00:23:44.424 --> 00:23:47.761
開始你必須啓用了
新的HealthKit授權

00:23:47.828 --> 00:23:48.996
在Xcode項目中

00:23:50.564 --> 00:23:53.767
進一步 後臺工作只能

00:23:53.834 --> 00:23:55.536
在一次活動的鍛鍊中被完成

00:23:58.705 --> 00:23:59.540
除此以外

00:24:00.040 --> 00:24:03.043
當處於後臺時
你必須最小化CPU使用

00:24:04.077 --> 00:24:07.314
否則你的應用會被暫停

00:24:07.514 --> 00:24:09.850
直到用戶明確的把它調入前臺

00:24:13.320 --> 00:24:16.223
因爲後臺能力是
由HealthKit提供的

00:24:16.690 --> 00:24:19.893
我鼓勵觀看早前的演講來瞭解更多
關於它的細節

00:24:22.196 --> 00:24:25.098
考慮到這點 讓我們想想我們的
應用看起來是什麼樣的

00:24:26.466 --> 00:24:29.102
有了應用
你可能想和你的朋友

00:24:29.169 --> 00:24:31.238
戴着Apple Watch去網球場

00:24:31.305 --> 00:24:32.940
進行一些截擊練習

00:24:33.874 --> 00:24:37.377
你簡單地開始一個快速鍛鍊
來回擊球

00:24:39.613 --> 00:24:42.182
然後你希望在任何時候

00:24:42.249 --> 00:24:45.986
你快速地看一眼watch
可以獲得一些媒體反饋

00:24:53.260 --> 00:24:56.530
考慮到這些 讓我們想想我們
項目的結構

00:24:57.097 --> 00:24:59.433
會有三層我們需要考慮

00:25:00.934 --> 00:25:01.835
首先是UI

00:25:02.135 --> 00:25:04.371
我們最終要向用戶顯示我們做了什麼

00:25:05.672 --> 00:25:08.008
然後我們有鍛鍊管理器

00:25:08.876 --> 00:25:10.711
我們會和HealthKit互動

00:25:11.278 --> 00:25:15.082
開始和停止鍛鍊會話
並啓用後臺功能

00:25:17.184 --> 00:25:19.586
然後我們有motion管理器

00:25:21.088 --> 00:25:23.457
在這我們會直接和
Core Motion互動

00:25:24.258 --> 00:25:25.959
實現我們的偵測算法

00:25:26.994 --> 00:25:29.796
在這我們會響應50赫茲
設備Motion更新

00:25:29.863 --> 00:25:31.999
並把採樣結果加入一個
RunningBuffer

00:25:33.033 --> 00:25:34.801
之後在每次更新時

00:25:35.369 --> 00:25:38.739
我們會判斷是否有揮拍發生
如果有 我們會實現UI

00:25:42.976 --> 00:25:46.346
我們怎麼給我們想要偵測的揮拍
建立模型？

00:25:48.382 --> 00:25:50.184
網球是個複雜的運動

00:25:50.551 --> 00:25:54.421
在這個情況下我們要做的是
我們會看看兩個動作的基本點

00:25:55.088 --> 00:25:56.990
一個完整的正手和反手揮拍

00:25:58.258 --> 00:26:01.228
我們通過使用重力和旋轉矢量
來這麼做

00:26:01.295 --> 00:26:02.763
這些矢量由設備Motion提供

00:26:04.598 --> 00:26:08.202
如果你假設watch是在主手上

00:26:08.869 --> 00:26:12.739
那麼你期待一個完整的正手揮拍
會包括用戶的旋轉

00:26:14.241 --> 00:26:17.144
如果我們進行點乘

00:26:17.211 --> 00:26:19.246
來自可能的揮拍的旋轉率

00:26:19.580 --> 00:26:21.048
和重力單位向量點乘

00:26:21.448 --> 00:26:25.118
我們可以忽略設備的姿態並
分離這個運動

00:26:25.652 --> 00:26:27.855
還可以忽略一些無關運動

00:26:29.790 --> 00:26:33.894
然後當我們獲得足夠多關於這的
採樣

00:26:34.294 --> 00:26:37.931
我們可以判斷是否旋轉了足夠遠
是否遠到可以計數爲一次揮拍

00:26:40.868 --> 00:26:43.904
所以我們現在知道要做什麼
讓我們看看我們的採樣應用

00:26:46.273 --> 00:26:48.742
要開始 我們來想象一下我們簡單
的UI

00:26:49.109 --> 00:26:50.978
我們會向用戶顯示信息

00:26:53.780 --> 00:26:56.283
這就是了
三個WatchKit界面標籤

00:26:56.350 --> 00:26:58.151
我們希望在運行時更新

00:26:58.819 --> 00:27:00.787
這包括鍛鍊標籤

00:27:01.922 --> 00:27:03.190
正手計數標籤

00:27:03.957 --> 00:27:05.325
和反手計數標籤

00:27:05.592 --> 00:27:08.061
鍛鍊標籤會做的是簡單地告訴用戶

00:27:08.128 --> 00:27:10.631
我們開始和停止了鍛鍊會話

00:27:11.198 --> 00:27:13.333
而正手反手計數標籤

00:27:13.500 --> 00:27:16.537
會顯示我們偵測到了多少次對應
的活動

00:27:18.305 --> 00:27:22.042
我們有一Force Touch菜單
來開始和停止鍛鍊會話

00:27:25.779 --> 00:27:30.784
我們知道UI會顯示什麼
讓我們看看鍛鍊管理器

00:27:32.286 --> 00:27:35.255
在這我們處理和HealthKit間
互動

00:27:35.322 --> 00:27:37.824
並且創建我們的鍛鍊會話

00:27:39.493 --> 00:27:43.564
我們還指導我們的motion管理器
開始和停止傳感器更新

00:27:47.134 --> 00:27:50.737
在我們的鍛鍊管理器中我們將
開始一次鍛鍊

00:27:52.372 --> 00:27:55.175
要開始我們會創建我們的鍛鍊配置

00:27:55.242 --> 00:27:57.477
我們會用它來初始化鍛鍊會話

00:27:58.579 --> 00:28:02.149
因爲我們在創建一個網球應用
讓我們用網球做爲活動類型

00:28:02.482 --> 00:28:03.951
戶外做爲地點

00:28:05.419 --> 00:28:07.554
初始化之後

00:28:08.288 --> 00:28:10.424
我們會讓HealthKit
開始鍛鍊會話

00:28:10.724 --> 00:28:12.693
並訂閱設備Motion更新

00:28:13.393 --> 00:28:16.730
此時我們可以在屏幕關閉時做
一些工作

00:28:20.801 --> 00:28:23.203
此外我們還需要停止鍛鍊

00:28:24.171 --> 00:28:28.909
我們只需要進行相反的動作
並且取消訂閱傳感器更新

00:28:29.243 --> 00:28:31.445
然後告訴HealthKit
結束鍛鍊會話

00:28:32.913 --> 00:28:35.549
此時普通後臺規則會生效

00:28:38.285 --> 00:28:40.721
讓我們看看我們的motion管理器

00:28:41.955 --> 00:28:45.759
它直接和Core Motion
打交道並實現我們的偵測算法

00:28:50.330 --> 00:28:52.399
要開始 我們在這要做的是

00:28:53.166 --> 00:28:55.435
我們會創建一個到
CMMotionManager鏈接

00:28:55.836 --> 00:28:59.239
並且創建一個NS操作隊列
使採樣工作在它之上

00:29:01.175 --> 00:29:04.811
此時我們會詢問watch是在左手
還是右手

00:29:05.379 --> 00:29:08.415
正手反手揮拍的區別

00:29:08.482 --> 00:29:10.284
會完全取決於這一點

00:29:12.653 --> 00:29:15.989
我們還會保持一個本地的計數
爲正手反手揮拍

00:29:16.790 --> 00:29:19.293
並且標記我們最近是否見到一次
揮拍

00:29:22.729 --> 00:29:24.932
我們選擇50赫茲採樣率

00:29:25.232 --> 00:29:28.135
創建一個RunningBuffer
它應儲存不多於1秒的數據

00:29:30.571 --> 00:29:32.172
像Bharath早前提到的

00:29:32.439 --> 00:29:35.509
設備Motion採樣可最多以100
赫茲的速率被提供

00:29:36.143 --> 00:29:39.446
你通常想要採樣率儘量低

00:29:39.513 --> 00:29:41.982
同時能提供你所需的保真度

00:29:44.918 --> 00:29:49.223
此外我們還會設置三個在我們的
偵測算法中會用到的常量

00:29:50.123 --> 00:29:53.260
這包括最小的揮拍角度

00:29:53.894 --> 00:29:56.096
揮拍時最高速度的最小值

00:29:56.897 --> 00:29:59.166
揮拍的最大安定速度

00:30:00.901 --> 00:30:02.269
現在我們選擇這些值

00:30:02.336 --> 00:30:04.905
根據實驗和我們收集的採樣數據

00:30:05.439 --> 00:30:09.109
但是一般你會發現收集數據和選擇
這些值的過程

00:30:09.176 --> 00:30:10.677
是你應用工作量的一半

00:30:12.546 --> 00:30:15.315
最後我們會在這創建委託引用

00:30:15.382 --> 00:30:17.417
我們會用它來和UI通信

00:30:20.854 --> 00:30:23.457
現在在我們設置了所有屬性之後

00:30:24.157 --> 00:30:27.127
我們會調整操作隊列來反應一個
連續隊列

00:30:27.694 --> 00:30:30.330
我們會用它來處理所有
設備Motion採樣

00:30:31.198 --> 00:30:35.602
我想在這強調一下
我們創建了這個操作隊列

00:30:35.836 --> 00:30:39.206
來確保所有的數據處理發生在
主隊列之外

00:30:41.842 --> 00:30:44.111
現在我們還會創建這個函數

00:30:44.178 --> 00:30:46.580
我們會用它來重置所有聲明類

00:30:46.647 --> 00:30:47.915
同時使UI歸零

00:30:50.784 --> 00:30:53.620
然後最後提供一系列方便的方法

00:30:54.254 --> 00:30:57.224
我們會創建一些補充的更新委託
函數

00:30:58.158 --> 00:31:01.261
在這我們簡單地實現對揮拍的計數

00:31:02.062 --> 00:31:05.399
標記我們最近遇到了一次揮拍
並讓UI知道

00:31:09.970 --> 00:31:12.573
現在讓我們和
Core Motion打交道

00:31:13.907 --> 00:31:16.243
和往常一樣我們要做的第一件事

00:31:17.010 --> 00:31:19.980
是詢問API是否在我們要運行的
設備上被支持

00:31:21.715 --> 00:31:25.853
然後我們告訴Core Motion
用50赫茲的頻率更新

00:31:27.421 --> 00:31:30.157
最後我們訂閱設備Motion更新

00:31:30.624 --> 00:31:32.192
通過傳遞我們的操作隊列

00:31:32.526 --> 00:31:36.296
和一塊代碼用來響應所有進來的
設備Motion採樣

00:31:37.598 --> 00:31:41.668
這整塊代碼要做的是簡單地檢查
更新是否有錯誤

00:31:42.169 --> 00:31:44.338
然後把它傳遞給我們的偵測函數

00:31:47.641 --> 00:31:51.078
讓我們看看我們的偵測函數將會
做什麼

00:31:52.813 --> 00:31:56.517
如Bharath早前提到
設備Motion給我們很多事

00:31:56.650 --> 00:31:57.718
但是在這個例子中

00:31:57.784 --> 00:32:00.854
我們只會用到重力和旋轉率矢量

00:32:02.422 --> 00:32:03.590
現在如你可能記得的

00:32:03.657 --> 00:32:06.360
重力矢量只是簡單的
Core Motion的終點

00:32:06.426 --> 00:32:09.763
重力單位矢量 不論設備如何移動了

00:32:10.364 --> 00:32:13.901
旋轉率是設備的旋轉矢量

00:32:13.967 --> 00:32:15.435
給我們弧度每秒

00:32:16.803 --> 00:32:19.740
所以現在我們的算法要做的

00:32:20.407 --> 00:32:24.144
是點乘旋轉矢量

00:32:24.211 --> 00:32:26.880
來自可能的揮拍
和重力單位矢量

00:32:27.514 --> 00:32:30.217
所以我們只分析motion中關於
重力的部分

00:32:31.919 --> 00:32:34.288
然後我們把結果標量加入

00:32:34.354 --> 00:32:37.090
一個RunningBuffer
保存不多於1秒的數據

00:32:38.325 --> 00:32:41.795
一旦我們有了足夠的內容
我們分析這些內容

00:32:44.164 --> 00:32:47.568
所以我們要用來分析揮拍的兩個
度量值

00:32:48.035 --> 00:32:51.438
是累計的旋轉角度和揮拍的最高
速度

00:32:52.873 --> 00:32:55.142
在這要獲得累計旋轉

00:32:55.709 --> 00:32:59.246
只需要累加我們採集到的所有
旋轉採樣的總和

00:32:59.913 --> 00:33:01.548
在我們採集它們的那一秒中

00:33:02.249 --> 00:33:03.317
然後你得到最高速率

00:33:03.383 --> 00:33:06.887
你簡單地獲得最大或最小值
取決於旋轉的方向

00:33:10.324 --> 00:33:11.658
繼續我們的函數

00:33:11.992 --> 00:33:14.561
我們會檢查是否包括足夠遠

00:33:14.628 --> 00:33:16.396
和足夠快來判斷爲一次揮拍

00:33:17.764 --> 00:33:20.767
如果是我們會選擇正手還是反手

00:33:21.101 --> 00:33:24.505
根據Apple Watch位置
和這個標量的符號

00:33:27.975 --> 00:33:29.843
最後在函數的結尾

00:33:30.611 --> 00:33:32.746
我們會添加一個測試
看看這次揮拍是否安定下來

00:33:33.280 --> 00:33:35.182
這樣我們可以拒絕一些反彈運動

00:33:35.616 --> 00:33:38.051
像是用戶的手臂回到位置上準備
下一次擊球

00:33:39.853 --> 00:33:43.957
最後要結束這個類
我們有stopUpdates函數

00:33:44.458 --> 00:33:47.127
我們用來取消訂閱
DeviceMotionUpdates

00:33:47.194 --> 00:33:48.529
當鍛鍊結束時

00:33:51.899 --> 00:33:54.001
這結束了我們的基本採樣應用

00:33:54.368 --> 00:33:56.570
我們簡單地描述了一個簡單的
用戶界面

00:33:57.271 --> 00:34:00.707
然後我們創建了一個鍛鍊管理
處理和HealthKit連接

00:34:01.775 --> 00:34:03.477
然後創建了motion管理器

00:34:03.544 --> 00:34:06.580
處理Core Motion並
實現我們的偵測算法

00:34:08.849 --> 00:34:12.085
我希望你們都對如何使用
設備Motion有了好的瞭解

00:34:12.152 --> 00:34:13.920
這是新引入Apple Watch的

00:34:17.791 --> 00:34:18.759
在我結束前

00:34:19.259 --> 00:34:21.995
我想要強調使用這個API的一些
細節

00:34:23.664 --> 00:34:27.835
現在當你期待watch在一個固定的
可預測的位置時

00:34:28.302 --> 00:34:30.938
永遠記得檢查設備是在哪隻手上

00:34:31.938 --> 00:34:35.475
這個位置的區別會極大地影響
你的分析

00:34:37.511 --> 00:34:41.715
更進一步 當使用慣性傳感器時
永遠記得

00:34:42.315 --> 00:34:45.085
試着理解你是操作在什麼參考座標系
上的

00:34:47.020 --> 00:34:48.956
而且如我們早前提到的

00:34:49.590 --> 00:34:52.759
設備Motion提供
最高100赫茲的採樣

00:34:53.493 --> 00:34:55.128
我們永遠希望能達到平衡

00:34:55.295 --> 00:34:57.998
在提供你的採樣率所需的資源

00:34:58.131 --> 00:35:00.067
和你的應用所需的保真度之間

00:35:01.001 --> 00:35:02.436
這很重要

00:35:02.503 --> 00:35:05.572
因爲鍛鍊會話的後臺限制

00:35:08.242 --> 00:35:10.110
要總結這次演講

00:35:10.911 --> 00:35:14.448
我們早前談到了歷史加速儀的
性能提升

00:35:15.649 --> 00:35:17.951
然後我們演示瞭如何使用計步器
事件

00:35:18.018 --> 00:35:19.520
來精確的給階段加標籤

00:35:19.586 --> 00:35:22.089
提供準確的上下文反饋給用戶

00:35:23.156 --> 00:35:26.193
然後我們介紹了Apple
Watch上的設備Motion

00:35:26.660 --> 00:35:27.628
然後瀏覽了一個應用

00:35:27.694 --> 00:35:30.898
來偵測正手和反手揮拍
在一次網球鍛鍊中

00:35:33.133 --> 00:35:35.969
如果你想知道更多信息

00:35:36.036 --> 00:35:37.971
比如資料和採樣代碼

00:35:38.539 --> 00:35:39.873
請查看這個鏈接

00:35:42.543 --> 00:35:44.178
然後如你所見

00:35:44.645 --> 00:35:46.847
該應用和HealthKit
的新特性互動

00:35:47.014 --> 00:35:49.149
我鼓勵你們都去
看看HealthKit演講

00:35:49.216 --> 00:35:51.685
來瞭解更多細節
關於“watchOS 3的新特性”

00:35:53.420 --> 00:35:56.823
此外Core Location
有一些最佳實踐需要你查看

00:35:56.890 --> 00:35:58.759
我建議你們也去看看

00:36:00.194 --> 00:36:04.531
最後我還推薦看看watchOS 3
的其他資料

00:36:05.666 --> 00:36:06.500
謝謝