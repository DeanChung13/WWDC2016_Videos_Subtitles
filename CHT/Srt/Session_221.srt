00:00:19.486 --> 00:00:24.491
優化按需加載資源

00:00:25.859 --> 00:00:28.228
歡迎來到優化按需加載資源

00:00:28.295 --> 00:00:31.064
我是tvOS工程師團隊
的Bill Bumgarner

00:00:32.766 --> 00:00:37.337
在這個演講上 在去年的WWDC上

00:00:37.404 --> 00:00:39.506
在這一年的開發者廚房

00:00:39.573 --> 00:00:42.709
我們已經講瞭如何使用按需加載資源

00:00:43.010 --> 00:00:44.611
本場演講中 我們想要關注在

00:00:44.678 --> 00:00:47.748
如何優化資源的使用 特別是

00:00:47.814 --> 00:00:50.417
如何打磨用戶體驗 來真正地創造

00:00:50.484 --> 00:00:52.653
一個極好的用戶體驗

00:00:53.053 --> 00:00:56.190
我們來看一下這些動機的一個基本概況

00:00:56.256 --> 00:00:59.593
如何指定標籤 API的使用

00:00:59.660 --> 00:01:02.396
然後講一下如何優化首次啓動

00:01:02.462 --> 00:01:05.799
如何優化運行中的用戶體驗

00:01:05.866 --> 00:01:08.235
同時也會講一下優化應用更新

00:01:08.302 --> 00:01:10.771
和一些實現的細節

00:01:13.674 --> 00:01:15.709
所以爲什麼

00:01:15.776 --> 00:01:17.878
爲什麼要按需加載資源

00:01:17.945 --> 00:01:20.914
對於一個傳統的應用程序

00:01:20.981 --> 00:01:24.518
它是由應用程序的二進制值
和一堆資源所構成的

00:01:24.585 --> 00:01:26.720
這些一起組成了應用束

00:01:27.054 --> 00:01:29.423
它被組合在一起 上傳到商店

00:01:30.123 --> 00:01:32.893
你們的用戶可以下載並安裝它

00:01:32.960 --> 00:01:36.363
慢慢地 他們會下載和安裝一堆的應用

00:01:37.231 --> 00:01:39.867
但是如果你看一下這些應用的使用模式

00:01:39.933 --> 00:01:45.405
我們會發現
只有一部分的資源被經常用到

00:01:45.806 --> 00:01:47.641
另外一些資源可能只被用了一次

00:01:47.708 --> 00:01:49.710
在程序介紹或類似的其它地方

00:01:50.844 --> 00:01:53.280
而這會導致佔用大量的磁盤空間

00:01:53.914 --> 00:01:56.250
這也意味着
用戶不得不在一定程度上思考

00:01:56.316 --> 00:01:58.418
關於什麼是他們要保留什麼的
什麼是不要保留的

00:01:58.485 --> 00:02:01.355
我們不想讓我們的用戶變成系統管理員

00:02:03.056 --> 00:02:06.226
所以在按需資源應用中
我們想要嘗試優化的是

00:02:06.293 --> 00:02:08.895
優化資源的使用

00:02:08.961 --> 00:02:11.365
在它被使用的時候

00:02:11.431 --> 00:02:14.768
同時保證它是可得的 早於用戶注意到

00:02:14.835 --> 00:02:16.036
它需要被下載

00:02:17.104 --> 00:02:20.941
所以在傳統應用的基礎上 我們把資源

00:02:21.008 --> 00:02:24.678
分成綁定的資源和按需加載資源

00:02:24.745 --> 00:02:28.215
它們不是真的存在於系統裏
當應用被安裝的時候

00:02:29.183 --> 00:02:33.420
現在 在過去的一年中
有一些錯誤的概念

00:02:33.487 --> 00:02:35.889
關於tvOS應用的大小

00:02:36.924 --> 00:02:40.661
有一種說法是
我們把它限制在200MB以內

00:02:40.727 --> 00:02:41.929
這不是真的

00:02:42.496 --> 00:02:48.268
tvOS上主程序集限制是200MB
而對於iOS

00:02:48.335 --> 00:02:51.138
它可以最大到4GB
無論如何 在這兩種系統中

00:02:51.205 --> 00:02:54.308
它們的按需加載資源可以達到20GB

00:02:56.276 --> 00:02:58.345
所以按需資源

00:02:58.912 --> 00:03:03.317
它們提供了動態加載的內容
它可以按需提供

00:03:03.383 --> 00:03:05.586
或者可以在應用安裝時被下載

00:03:06.753 --> 00:03:10.691
它是託管在App Store上的
包括託管不同版本

00:03:10.757 --> 00:03:12.960
所以升級不是問題

00:03:13.026 --> 00:03:16.029
顯然若你有一個用戶堅持使用舊版本
它還是能工作的

00:03:18.065 --> 00:03:20.534
它們在程序安裝過程中是可以下載的

00:03:20.601 --> 00:03:24.104
在運行的時候 如果有請求
它們也是可以下載的

00:03:24.605 --> 00:03:27.474
而且你可以控制下載的優先級

00:03:27.541 --> 00:03:29.343
而且你可以調整優先級

00:03:29.409 --> 00:03:31.845
因爲用戶可能改變他們的想法

00:03:31.912 --> 00:03:33.046
去做他們想做的事情

00:03:34.348 --> 00:03:36.917
同時 所以這些和系統一起

00:03:36.984 --> 00:03:40.854
提供了智能的內容緩存和智能清理

00:03:41.588 --> 00:03:45.092
這樣 我們就讓用戶遠離了
系統管理的工作

00:03:45.392 --> 00:03:49.596
對於你的的應用來說 好處是變小了

00:03:50.130 --> 00:03:52.032
這意味着它更快了和加速了下載

00:03:52.099 --> 00:03:55.736
意味着這個時間間隔變短了
在用戶點擊購買按鈕和

00:03:55.802 --> 00:03:57.371
用戶使用你的程序之間

00:03:59.072 --> 00:04:03.210
而且 你有更爲豐富的應用內容
最高可達20GB

00:04:03.277 --> 00:04:05.179
這可是很大的空間哦

00:04:07.214 --> 00:04:10.217
而且 那樣就可在系統中裝更多的應用

00:04:10.284 --> 00:04:14.521
它們都是可以運行的
而且減少了管理存儲的需求

00:04:14.721 --> 00:04:16.822
這也意味着用戶可以拍很多的照片

00:04:16.890 --> 00:04:19.091
一部分按需加載資源可能被釋放出來

00:04:19.159 --> 00:04:20.494
這都是完全自動的

00:04:22.329 --> 00:04:24.998
那麼我們如何來實現這個呢？
我們如何採用這個呢

00:04:25.065 --> 00:04:28.302
你要做的第一件事是要指定標籤

00:04:28.368 --> 00:04:31.405
給所有的資源 你實現這個通過尋找

00:04:31.471 --> 00:04:34.074
在程序中 找出所有的資源

00:04:34.141 --> 00:04:37.044
找出每個資源在你的應用中的角色

00:04:37.477 --> 00:04:38.645
和你需要它們的時間

00:04:40.113 --> 00:04:42.416
然後在Xcode中指定標籤

00:04:42.482 --> 00:04:43.784
標籤一點兒都不神奇

00:04:43.851 --> 00:04:45.085
它們只是字符串

00:04:46.453 --> 00:04:50.023
只是一些你想要的字符串
第一級 任意東西

00:04:50.891 --> 00:04:52.726
它們可以被應用於單獨的資產

00:04:52.793 --> 00:04:58.632
或者一個單獨的資源 一個聲音文件
一個紋理 一張圖片 無論什麼東西

00:04:58.699 --> 00:05:01.902
純數據
或者它們可以被指定給整個文件夾

00:05:02.769 --> 00:05:05.205
而且 每個資源可以有多個標籤

00:05:05.272 --> 00:05:07.074
因爲它有可能有多個角色

00:05:08.609 --> 00:05:10.944
讓我們回過頭
看看GreatGame這個應用

00:05:11.011 --> 00:05:13.547
看一下那些資源

00:05:13.614 --> 00:05:15.916
把這些資源按照角色分類

00:05:16.450 --> 00:05:19.520
在這個例子中
這是一個非常明瞭的基於級別的應用

00:05:21.021 --> 00:05:23.390
而且它有總是需要的資源

00:05:23.457 --> 00:05:25.392
這些就是 比如你的啓動頁面

00:05:25.459 --> 00:05:27.294
你的啓動加載頁面 或者是設置頁面

00:05:27.361 --> 00:05:28.362
這一類的東西

00:05:28.428 --> 00:05:32.499
它有給每一級別提供的資源

00:05:32.966 --> 00:05:36.637
或者購買項目或者應用內購買的東西

00:05:38.138 --> 00:05:40.474
對於這些標籤 是非常直接明瞭的

00:05:40.541 --> 00:05:42.609
只要給他們和它們角色一樣的名字就行

00:05:44.912 --> 00:05:47.648
所以當我們做這些 當我們看這些時

00:05:47.714 --> 00:05:49.917
我們給這些東西打標籤的策略是什麼呢

00:05:49.983 --> 00:05:52.853
只要給主程序集的資源

00:05:52.920 --> 00:05:56.156
那些程序始終確實需要的資源

00:05:56.924 --> 00:05:59.459
你的加載頁面
你的程序啓動頁面 這類東西

00:06:00.861 --> 00:06:04.631
然後你給另外所有的東西打上標籤

00:06:05.432 --> 00:06:09.403
每個標籤可被應用在最多512MB的

00:06:09.503 --> 00:06:11.138
資產或者資源

00:06:11.572 --> 00:06:15.309
然而 我們強烈建議你
遵循64MB左右的限制

00:06:15.375 --> 00:06:18.111
因爲那樣會使下載更快

00:06:18.178 --> 00:06:20.013
而且讓用戶更加不易察覺

00:06:20.881 --> 00:06:23.750
每個資源可以都多個標籤

00:06:24.218 --> 00:06:26.887
只要你用了其中的一個標籤

00:06:26.954 --> 00:06:29.890
就會提取所有對應的資源

00:06:31.391 --> 00:06:34.962
所有我們已將所有東西歸類並打上標籤

00:06:35.028 --> 00:06:36.730
讓我們看一下運行時的情況

00:06:38.131 --> 00:06:41.568
在運行時 我們嘗試讓API儘量簡單

00:06:41.869 --> 00:06:44.071
實際上 這只是一個類

00:06:44.638 --> 00:06:47.074
有一個資源請求類

00:06:47.674 --> 00:06:51.678
你要創建這個類的一個實例來管理所有

00:06:51.745 --> 00:06:53.413
按需加載資源的讀取

00:06:53.914 --> 00:06:56.717
它通過一個標籤或者一組標籤來創建

00:06:56.783 --> 00:06:58.785
而且它有一些其它的選項來管理它

00:06:59.686 --> 00:07:03.023
你可以用它來開始和結束資源的訪問

00:07:03.090 --> 00:07:06.426
開始訪問會觸發下載 如果需要

00:07:06.793 --> 00:07:09.429
結束訪問會告訴系統 嘿 我結束啦

00:07:10.364 --> 00:07:12.799
在這個對象中 你也可以設定優先級

00:07:12.866 --> 00:07:16.270
如果你有一個特別大的下載
或者一個特別慢的網絡連接

00:07:16.336 --> 00:07:20.174
你可以追蹤進度
而且也有可能會遇到錯誤

00:07:20.707 --> 00:07:22.342
我們馬上會降到

00:07:22.409 --> 00:07:23.911
關於這個類有一個有趣的東西是

00:07:23.977 --> 00:07:25.879
每一個實例都是一次性的

00:07:25.946 --> 00:07:28.215
它們是非常輕量級的 非常容易被創建

00:07:28.282 --> 00:07:32.252
這意味着當你創建一個實例
開始訪問它

00:07:32.319 --> 00:07:35.088
在你調用結束訪問之後
這個對象就完了

00:07:35.489 --> 00:07:36.323
創建一個新的

00:07:39.026 --> 00:07:43.096
有一個非常重要需要記住的概念是

00:07:43.163 --> 00:07:47.701
請求和訪問是不關聯的

00:07:48.535 --> 00:07:52.406
所有當你請求

00:07:52.472 --> 00:07:54.675
從當你要使用這個資源時
我們是可以的

00:07:54.741 --> 00:07:56.543
我們會在預測加載講這些

00:07:56.610 --> 00:07:58.312
所有我們可以預測用戶將要幹什麼

00:07:58.378 --> 00:08:00.447
來保證他們永遠不會看到那些加載界面

00:08:01.849 --> 00:08:03.617
讓我們來看一下真實的代碼

00:08:05.752 --> 00:08:08.922
初始化一批資源請求是相當直接的

00:08:08.989 --> 00:08:12.092
只要給它一組標籤
然後你就有你的請求了

00:08:12.659 --> 00:08:15.028
如果你想要開始訪問那些標籤

00:08:15.095 --> 00:08:18.365
調用開始訪問 它有一個完成句柄

00:08:18.432 --> 00:08:20.767
那個完成句柄會被錯誤地調用

00:08:20.834 --> 00:08:23.036
如果有錯誤的話 或者它會被正確調用

00:08:23.103 --> 00:08:24.938
那麼你的資源就是可利用的了

00:08:25.606 --> 00:08:28.742
爲了得到資源 使用包API

00:08:28.809 --> 00:08:31.311
抓住一個NS包實例 對不起

00:08:31.378 --> 00:08:34.815
包實例 重命名 從請求中

00:08:34.881 --> 00:08:38.085
只要使用正常的資源請求方法

00:08:38.150 --> 00:08:39.753
於包 來控制它

00:08:41.355 --> 00:08:44.358
當你結束了之後
調用結束訪問是非常重要的

00:08:44.424 --> 00:08:47.060
這告訴了系統你已經用完了這個資源

00:08:47.127 --> 00:08:48.862
需要重點指出的是 那不意味着

00:08:48.929 --> 00:08:51.365
系統就會真的刪除資源

00:08:51.431 --> 00:08:53.333
系統是非常懶惰的

00:08:53.400 --> 00:08:56.537
它們不想做額外的工作
刪除東西的額外工作

00:08:58.038 --> 00:09:02.409
所以當你加載資源的時候
你可以控制優先級

00:09:02.476 --> 00:09:04.711
比如 你要在玩一個遊戲

00:09:04.778 --> 00:09:06.246
用戶改變了他們的想法

00:09:06.313 --> 00:09:07.915
你就下載這個級別的資源

00:09:07.981 --> 00:09:09.516
現在你需要下載級別5

00:09:10.217 --> 00:09:11.952
你開始於開始訪問

00:09:12.019 --> 00:09:13.987
你可以繼續 你可以改變加載優先級

00:09:14.054 --> 00:09:18.325
來把優先級提到5級或者降到3級

00:09:18.392 --> 00:09:20.561
如果你覺得他們可能返回
或者你可以結束它

00:09:21.562 --> 00:09:23.530
它只是一個值 從0到1

00:09:23.931 --> 00:09:26.600
但是有特別緊急的優先級

00:09:27.501 --> 00:09:30.771
有時候 會播放器會關閉

00:09:30.838 --> 00:09:33.140
而你又無法預測

00:09:33.407 --> 00:09:36.143
你需要立即下載所有東西

00:09:36.510 --> 00:09:40.747
在這種情況下
這種特別緊急的加載優先級

00:09:40.814 --> 00:09:41.882
就能被用到了

00:09:41.949 --> 00:09:43.817
它會掛起所有其它的下載

00:09:44.284 --> 00:09:46.220
也會最大化吞吐量

00:09:46.286 --> 00:09:47.754
所有沒有網絡節流

00:09:48.255 --> 00:09:51.692
也會最大化中央處理器使用
專門用於下載

00:09:54.995 --> 00:09:57.397
最後 會有有條件請求

00:09:57.631 --> 00:10:00.367
有條件請求可以用來檢查

00:10:00.434 --> 00:10:02.536
資源是否已經被下載

00:10:03.203 --> 00:10:05.973
如果你還記得在我說結束訪問的時候

00:10:06.039 --> 00:10:08.542
不一定要刪除資源

00:10:09.443 --> 00:10:11.178
播放器已經在玩一個遊戲

00:10:11.245 --> 00:10:13.180
他們已經玩過了1 2 3 級

00:10:13.247 --> 00:10:15.549
你已經結束對1 2 3級別的訪問

00:10:16.617 --> 00:10:18.652
他們退出遊戲
下線後再做了其它一些事情

00:10:18.719 --> 00:10:20.354
當他們回來 重啓遊戲

00:10:20.854 --> 00:10:22.589
他們想要重玩1級

00:10:22.956 --> 00:10:24.591
你可以有條件地使用

00:10:24.658 --> 00:10:27.327
或者說他們想要選擇不同的級別

00:10:27.394 --> 00:10:30.130
你可以條件地使用開始訪問

00:10:30.531 --> 00:10:32.065
來檢查什麼級別已經被下載了

00:10:32.132 --> 00:10:34.902
給它們指示什麼已經可以玩了

00:10:35.302 --> 00:10:37.171
或者如果它們進入了一個級別

00:10:37.237 --> 00:10:40.040
在每個級別中
你已按照角色分解你的資源

00:10:40.107 --> 00:10:42.176
可能你優化了級別的第一部分

00:10:42.242 --> 00:10:45.112
只是展示數和刷子和敵人

00:10:45.179 --> 00:10:47.548
正好那個時候在磁盤上

00:10:47.614 --> 00:10:49.850
當你在後臺下載餘下的部分

00:10:50.450 --> 00:10:52.219
所以所有都是關於你可以

00:10:52.286 --> 00:10:54.454
避免加載頁面

00:10:56.490 --> 00:11:00.727
如果這些項目已經被下載了
那就會像開始訪問一樣地工作

00:11:02.095 --> 00:11:04.865
同樣 需要調用介紹訪問

00:11:04.932 --> 00:11:08.702
就算你得到回調 那它也是假的

00:11:08.769 --> 00:11:11.371
你決定不去觸發下載

00:11:11.438 --> 00:11:12.840
總是調用結束訪問

00:11:14.942 --> 00:11:18.078
現在你有了一個可以工作的程序

00:11:22.749 --> 00:11:24.384
但是讓我們看一下首次啓動

00:11:26.787 --> 00:11:28.822
特別看一下這個時間軸

00:11:29.823 --> 00:11:31.491
我們會沿着時間軸

00:11:32.226 --> 00:11:35.729
從用戶在商場中
購買這個應用的那一刻開始

00:11:35.796 --> 00:11:37.631
應用被下載 被安裝

00:11:38.765 --> 00:11:41.468
和第一次啓動
然後我們需要做的事情

00:11:41.535 --> 00:11:44.471
我們要做的第一件事 開始訪問1級

00:11:44.771 --> 00:11:47.941
這會觸發一個下載
然後播放器開始這個遊戲

00:11:48.575 --> 00:11:52.079
然後到達2級 我們也是開始訪問

00:11:52.312 --> 00:11:53.981
它會下載 用戶在那等待

00:11:54.081 --> 00:11:56.483
用戶繼續玩 重複這個流程

00:11:56.550 --> 00:11:59.052
3級 下載 等待 玩遊戲

00:11:59.987 --> 00:12:03.023
甚至對於可購買的項目 程序內購買

00:12:03.423 --> 00:12:05.125
下載 等待 玩遊戲

00:12:07.060 --> 00:12:09.630
這不是一個好的用戶體驗

00:12:10.664 --> 00:12:13.534
讓用戶經常地看到加載頁面
這是不行的

00:12:13.600 --> 00:12:14.635
我們不想這個樣子

00:12:14.968 --> 00:12:16.336
所以我們要做的第一是

00:12:16.403 --> 00:12:19.206
充分利用功能和按需加載資源

00:12:19.706 --> 00:12:23.510
這是自帶的功能 來優化首次啓動

00:12:23.577 --> 00:12:27.247
我們要做的第一是使用初始安裝標籤

00:12:28.282 --> 00:12:30.984
接下來我們要使用的是預獲取標籤

00:12:33.220 --> 00:12:34.755
有了這些

00:12:35.055 --> 00:12:38.926
那麼1級會在應用購買的時候
被下載和安裝

00:12:39.426 --> 00:12:42.496
2級會緊跟着被下載和安裝

00:12:42.896 --> 00:12:45.666
用戶可以開始玩了

00:12:47.067 --> 00:12:49.169
讓我們看一下預測下載

00:12:49.236 --> 00:12:51.038
但先看一下

00:12:51.104 --> 00:12:53.040
如何配置初始預提取

00:12:54.274 --> 00:12:57.344
所以初始安裝標籤

00:12:57.411 --> 00:13:01.081
這些在Xcode中
被標記的標籤需要被下載

00:13:01.148 --> 00:13:03.450
作爲出程序安裝的一部分

00:13:04.084 --> 00:13:07.387
最多可以有多達2GB的資源
這是很多的

00:13:08.488 --> 00:13:11.358
這是在App Store上
顯示的程序大小的一部分 實際上

00:13:11.425 --> 00:13:13.994
當下載進度條開始的時候

00:13:14.061 --> 00:13:16.930
表明初始安裝標籤也開始了

00:13:18.098 --> 00:13:20.400
預提取標籤是稍有不同的

00:13:20.934 --> 00:13:23.470
你可以有任意多的預提取標籤

00:13:23.537 --> 00:13:27.307
最高可達4GB減去初始安裝的大小

00:13:28.308 --> 00:13:30.477
它會遵循Xcode中指定的一個排序

00:13:30.911 --> 00:13:34.615
預提取標籤在初始化之後立即被下載

00:13:35.249 --> 00:13:36.884
它們不會阻止應用的啓動

00:13:37.651 --> 00:13:40.687
所以用戶可以進入遊戲並開始玩了

00:13:40.754 --> 00:13:43.257
儘管預提取的東西在後臺被下載下來

00:13:44.291 --> 00:13:45.726
在Xcode中

00:13:46.894 --> 00:13:48.862
用戶界面是這個樣子的

00:13:48.929 --> 00:13:53.400
這是資源標籤檢查器 在目標編輯器內

00:13:53.467 --> 00:13:54.635
對於你的應用

00:13:55.002 --> 00:13:57.671
它有三部分 初始 預提取

00:13:57.738 --> 00:13:59.640
和按需標籤的下載

00:14:00.207 --> 00:14:01.208
你一開始移動這些東西

00:14:01.275 --> 00:14:04.011
這些會和你的應用一起打包

00:14:04.077 --> 00:14:05.779
同時被安裝

00:14:06.713 --> 00:14:10.317
預提取
會按照你在屏幕上看到的順序被下載

00:14:11.051 --> 00:14:13.453
最後 按需的下載

00:14:13.720 --> 00:14:17.591
是隻有你開始訪問那些標籤的時候
才被下載

00:14:19.960 --> 00:14:21.495
回到我們的時間軸

00:14:21.795 --> 00:14:23.664
我們非常簡略地講過預測加載

00:14:23.730 --> 00:14:25.165
那這到底是什麼意思呢？

00:14:25.232 --> 00:14:27.000
我們開始初始化

00:14:27.301 --> 00:14:28.602
得到我們的預提取

00:14:28.669 --> 00:14:30.904
我們仍然讓我們在3級的時候在等待

00:14:31.505 --> 00:14:35.676
若我們開始訪問3級標籤對應的資源

00:14:36.043 --> 00:14:37.845
在1級或者2級的某些時候

00:14:37.911 --> 00:14:41.949
這樣可能在用戶到達那裏的時候
那些資源就已被下載並能被使用了

00:14:42.649 --> 00:14:44.218
同樣對於購買項目

00:14:44.551 --> 00:14:49.022
如果在你的應用 遊戲 不管什麼中
有一個特殊的時間點

00:14:49.089 --> 00:14:52.125
你認爲有可能或者你希望玩家將要

00:14:52.192 --> 00:14:55.562
做一個程序內購買
那就在那裏開始訪問

00:14:55.896 --> 00:14:58.298
只有當你得到返回後 你才能訪問它們

00:14:58.365 --> 00:15:00.634
但是至少它會在那裏 不會有等待

00:15:00.734 --> 00:15:04.438
現在我們得到一個大的綠色時間軸
和一個非常高興的用戶

00:15:06.173 --> 00:15:09.743
我們已經討論了這個基於層級的遊戲

00:15:10.344 --> 00:15:12.212
這是一個非常線性訪問的模式

00:15:12.746 --> 00:15:14.815
它非常容易創建漂亮的幻燈片

00:15:14.882 --> 00:15:16.016
這不是真實的世界

00:15:17.384 --> 00:15:21.555
在一個線性訪問模式中
大部分資產會被使用

00:15:21.622 --> 00:15:23.524
它們大部分會被按照順序地使用

00:15:23.924 --> 00:15:26.460
你的標籤大小不是那麼得關鍵

00:15:26.527 --> 00:15:30.330
因爲你始終可以在用戶之前得到訪問

00:15:31.932 --> 00:15:35.035
但是問題是 當然

00:15:35.102 --> 00:15:36.537
這裏沒有什麼是線性的

00:15:37.371 --> 00:15:38.639
特別地

00:15:38.705 --> 00:15:43.076
很多時候 應用都是隨機訪問模式

00:15:43.911 --> 00:15:45.712
播放器可以播放任意一個地方

00:15:45.779 --> 00:15:48.148
或者有些東西可能被不同的級別所共享

00:15:48.215 --> 00:15:50.784
或者他們可能選擇特定的配置

00:15:50.851 --> 00:15:54.421
或者他們可能購買了一些應用內購買項
在這種情況下

00:15:54.488 --> 00:15:57.991
目標是儘量多地預測

00:15:58.058 --> 00:16:00.160
嘗試在用戶需要之前把東西下載下來

00:16:00.227 --> 00:16:02.329
但是在你需要下載的時候

00:16:02.396 --> 00:16:04.164
在那一刻真的需要時

00:16:05.065 --> 00:16:07.100
堅持小的標籤組

00:16:08.035 --> 00:16:10.571
這樣就會下載得很快

00:16:11.205 --> 00:16:13.640
而且你可以有前瞻性地下載標籤組

00:16:13.707 --> 00:16:16.710
可以繼續了 只是猜測什麼將會被需要

00:16:17.377 --> 00:16:20.047
讓它們就那樣 下載到磁盤 因爲

00:16:20.113 --> 00:16:22.216
當然 我們有這個智能緩存機制

00:16:22.282 --> 00:16:25.752
它會在後臺運行 確保刪除正確的東西

00:16:25.819 --> 00:16:27.287
如果磁盤滿了的話

00:16:28.488 --> 00:16:30.757
再強調一遍 結束訪問並不意味着刪除

00:16:30.824 --> 00:16:33.293
如果你下線了
而且你提前下載了一些東西

00:16:33.360 --> 00:16:34.828
然後你根本不需要它 沒關係

00:16:34.895 --> 00:16:36.797
只要結束訪問 它可能還是在那裏

00:16:36.864 --> 00:16:39.633
當你以後需要它的時候

00:16:41.001 --> 00:16:43.670
現在有另外一種模式
這是一種在兩者之間的

00:16:44.805 --> 00:16:46.807
那是探索性訪問模式

00:16:47.174 --> 00:16:49.476
那是...你想

00:16:49.543 --> 00:16:52.012
從一個村莊到另一個村莊類似的情況

00:16:52.613 --> 00:16:54.848
在這種情況下 存在有限的預測

00:16:55.282 --> 00:16:57.317
很多可能不會被使用

00:16:58.585 --> 00:17:01.622
但是你經常在一個分支上
當你在一個分支上的時候

00:17:01.688 --> 00:17:03.790
你可以下載一個標籤的子集

00:17:03.857 --> 00:17:05.459
用戶左轉 右轉

00:17:05.526 --> 00:17:07.560
所以我要下載向左的標籤和向右的標籤

00:17:07.627 --> 00:17:09.896
當用戶做出決定後

00:17:10.464 --> 00:17:13.634
打算向右

00:17:13.700 --> 00:17:15.002
讓那個下載停止

00:17:15.801 --> 00:17:18.571
關注右邊 開始預測下一步

00:17:21.141 --> 00:17:23.877
所以現在這個應用可以正常工作了

00:17:23.944 --> 00:17:28.048
我們得到了一個非常棒的用戶體驗

00:17:29.049 --> 00:17:31.418
但是讓我們看一下一些實現的細節

00:17:31.485 --> 00:17:33.353
在頁面的背後進行着的

00:17:34.555 --> 00:17:37.991
你可以關注一下以進一步優化用戶體驗

00:17:41.828 --> 00:17:45.566
特別地 正如我所說的 程序包

00:17:45.799 --> 00:17:50.137
在iOS上被限制爲4GB
在tvOS上被限制爲200MB

00:17:50.204 --> 00:17:53.106
但你可有多達20GB的按需加載資源

00:17:53.173 --> 00:17:56.577
它們中的最多2GB可以
和應用一起被下載和安裝

00:17:57.077 --> 00:18:01.882
最多4GB可以被預提取
減去那2GB或者最多2GB的安裝

00:18:02.749 --> 00:18:05.018
還有一些數據要記住

00:18:06.353 --> 00:18:09.957
同一時間最多可以有2GB的活動資源

00:18:10.290 --> 00:18:13.660
所以你開始訪問最多2GB的標籤

00:18:14.228 --> 00:18:16.430
那些會被下載 然後就是可用的

00:18:16.496 --> 00:18:17.464
這非常棒

00:18:17.664 --> 00:18:20.267
當你超過了2GB 會發生的是

00:18:20.334 --> 00:18:25.038
開始訪問方法會得到一個NS錯誤

00:18:25.105 --> 00:18:28.675
這表示用完了帶標籤資源的空間

00:18:28.909 --> 00:18:32.279
你需要對一些標籤集結束訪問

00:18:32.346 --> 00:18:35.382
來釋放一些空間
使得更多的資源能被訪問

00:18:35.749 --> 00:18:39.052
重複這一點是
因爲有另外一個困惑的地方

00:18:39.820 --> 00:18:43.056
如果你有2GB的已經下載好的標籤

00:18:43.490 --> 00:18:45.092
而且你想要訪問更多

00:18:45.158 --> 00:18:48.295
你訪問其中的500MB

00:18:48.362 --> 00:18:51.798
固定另外的250MB
那500MB資源

00:18:51.865 --> 00:18:53.800
可能不會被刪除

00:18:53.967 --> 00:18:55.569
它們還在而且是可用的

00:18:55.636 --> 00:18:58.238
但是這只是告訴系統
如果情況變得不好了

00:18:58.305 --> 00:19:00.107
它可以去刪除它們

00:19:01.775 --> 00:19:06.313
任意一個標籤 最多可以到512MB
儘量堅持64MB或者更小

00:19:09.049 --> 00:19:12.019
你已經有最多1000個資產包

00:19:13.220 --> 00:19:16.890
資產包是什麼鬼呢 還沒提過這個詞

00:19:17.991 --> 00:19:22.062
資產包來自於Xcode編譯系統

00:19:22.129 --> 00:19:24.131
這是你的應用生成和管理的方式

00:19:24.198 --> 00:19:27.134
這是按需下載資源被編譯在一起的方式

00:19:27.201 --> 00:19:28.969
通過商店來管理

00:19:30.170 --> 00:19:32.673
看一下我們GreatGame
在這個情況中

00:19:32.739 --> 00:19:34.708
一個角色扮演遊戲 這無所謂

00:19:35.509 --> 00:19:39.112
我們有標籤 非常的典型

00:19:39.847 --> 00:19:42.449
資源會被重複使用

00:19:42.516 --> 00:19:44.751
東西會被使用在1級到2級

00:19:44.952 --> 00:19:47.187
敵人變成了朋友 諸如此類的東西

00:19:47.921 --> 00:19:53.560
所以我們在這裏有這兩個資源
它們在2級的時候被使用

00:19:53.961 --> 00:19:57.631
所以它們標記了1級和2級的標籤

00:20:01.368 --> 00:20:03.203
所以我們的標籤集看起來是這樣的

00:20:03.303 --> 00:20:07.674
我們有四個帶一個標籤的資源
和兩個帶兩個標籤的資源

00:20:08.642 --> 00:20:11.311
當我們至於四個標籤的時候

00:20:12.246 --> 00:20:14.114
最後會有六個資產包

00:20:14.548 --> 00:20:18.418
如果你考慮一下一個隨機訪問的遊戲

00:20:19.253 --> 00:20:20.954
這就會變成一個阻礙

00:20:21.455 --> 00:20:25.459
若你很多資源被很多不同的角色共享

00:20:25.526 --> 00:20:30.197
比如很多資源有
5個 10個 15個標籤

00:20:30.497 --> 00:20:33.901
那麼所以這些的叉積會超過

00:20:33.967 --> 00:20:36.770
1000個標籤
或者1000個資產包的限制

00:20:36.837 --> 00:20:38.939
這時需要注意的

00:20:41.008 --> 00:20:45.612
所以在遊戲或者應用的生命週期內

00:20:45.679 --> 00:20:48.048
當然 你會有程序更新

00:20:48.448 --> 00:20:51.618
你想要提升用戶體驗 讓用戶回來

00:20:53.453 --> 00:20:56.957
按需下載資源被優化

00:20:57.024 --> 00:20:58.659
爲了程序的更新

00:20:59.693 --> 00:21:01.828
可能有一點點令人驚奇

00:21:02.763 --> 00:21:04.998
但是如果你仔細想想 這是合理的

00:21:05.332 --> 00:21:08.735
特別的 我們以1.0版本的遊戲開始

00:21:09.803 --> 00:21:12.439
我們在遊戲中
有一堆的資源 一些帶標籤的

00:21:12.506 --> 00:21:14.041
和一些在主要包裏的

00:21:14.107 --> 00:21:16.009
然後我們發佈第二版

00:21:16.076 --> 00:21:18.412
我們在主包裏面做了一些改動

00:21:18.478 --> 00:21:20.814
我們可能給1級增加了一下資源

00:21:21.348 --> 00:21:23.217
對2級更改了一些東西

00:21:23.283 --> 00:21:24.785
我們增加了一個全新的級別

00:21:25.919 --> 00:21:27.754
這些都很好

00:21:27.821 --> 00:21:30.157
那在升級的過程中會發生什麼呢

00:21:32.392 --> 00:21:36.330
第一件事情是當你更新資源的時候

00:21:36.396 --> 00:21:41.268
更新帶標籤的資源
沒有什麼是被自動重新下載的

00:21:41.568 --> 00:21:44.171
當它第一次被訪問時 它會被重新下載

00:21:45.706 --> 00:21:48.342
我們不想重新下載教學級別

00:21:48.642 --> 00:21:50.811
當用戶已經遠離這個了

00:21:52.846 --> 00:21:55.916
所有沒被更改的資源會待在磁盤中

00:21:56.984 --> 00:21:59.019
不需要下載 它們就可以被訪問

00:22:00.587 --> 00:22:03.290
新的資源
它們會在被訪問的時候被下載

00:22:03.624 --> 00:22:06.727
所有 再說一遍
系統對待這個是非常懶惰的

00:22:06.793 --> 00:22:10.898
在這種情況下 因爲我們不能預測
我們會對應用做什麼樣的改動

00:22:10.964 --> 00:22:13.667
會被需求各種各樣的狀態 或者用戶

00:22:13.734 --> 00:22:14.968
在你的應用留下的東西

00:22:15.369 --> 00:22:16.637
我們將其交給你決定

00:22:16.703 --> 00:22:20.841
觸發開始訪問來觸發上傳

00:22:20.908 --> 00:22:22.109
和下載新東西

00:22:22.176 --> 00:22:24.444
實際上 在第一次啓動時
你可能想要開始

00:22:24.511 --> 00:22:27.247
和開始訪問一些你改變過的東西

00:22:27.314 --> 00:22:31.018
以此確保在用戶主要到之前
就讓這些資源是可用的

00:22:33.053 --> 00:22:36.790
所以 這個的最佳實踐

00:22:38.392 --> 00:22:42.262
避免對帶標籤資源的不必要的修改

00:22:43.163 --> 00:22:44.464
比如

00:22:44.531 --> 00:22:47.668
我們有過一種情形
當有人做了一個拼寫的改變

00:22:47.734 --> 00:22:49.670
令人驚奇的是所有東西都被重新下載了

00:22:49.736 --> 00:22:51.171
當第一次訪問它的時候

00:22:53.273 --> 00:22:57.477
如果你改變了這個資產包裏的一個資源

00:22:57.845 --> 00:23:01.648
這會觸發下載整個資產包 這只是一個

00:23:01.715 --> 00:23:03.183
具體的實現

00:23:03.517 --> 00:23:04.518
所以請牢記

00:23:04.585 --> 00:23:06.954
你應該做的是 比如

00:23:07.020 --> 00:23:10.891
在我們給1級
增加一些額外資源的情況下

00:23:11.458 --> 00:23:14.027
我們可以讓1級更新一個標籤

00:23:14.094 --> 00:23:16.797
然後開始訪問它們 下載

00:23:16.864 --> 00:23:19.900
當它們都可以使用的時候
然後運行用戶運行1級

00:23:21.802 --> 00:23:23.303
保持那些標籤一致

00:23:25.606 --> 00:23:28.709
從一開始 你要設計好

00:23:28.775 --> 00:23:32.646
可更新內容和靜態內容的分離

00:23:35.082 --> 00:23:38.685
所有這些意味着 你可能有一個標籤

00:23:38.752 --> 00:23:40.954
對於你的程序中的單一的角色

00:23:41.255 --> 00:23:44.258
可能你想要把那個標籤分隔成多個標籤

00:23:44.324 --> 00:23:47.194
當它是可能永遠不會改變

00:23:47.261 --> 00:23:48.662
和少數會被改變

00:23:52.366 --> 00:23:56.503
所以這些如何組成智能內容緩存的呢

00:23:58.639 --> 00:24:02.709
對於tvOS
這個操作系統的目標之一

00:24:02.776 --> 00:24:07.214
是永遠不讓用戶注意到這個用法

00:24:08.282 --> 00:24:10.017
永遠不需要刪除東西

00:24:10.851 --> 00:24:12.452
永遠不需要去考慮它

00:24:13.854 --> 00:24:15.122
作爲這個的一部分

00:24:15.189 --> 00:24:18.392
有一個完整的
緩存管理系統和自動清理系統

00:24:19.359 --> 00:24:22.763
系統會清理到磁盤上的資源

00:24:22.829 --> 00:24:24.998
當磁盤空間快滿了的時候

00:24:25.499 --> 00:24:28.268
有多個不同的級別
從優先級最低的開始

00:24:28.335 --> 00:24:29.736
會清理緩存這些

00:24:29.803 --> 00:24:32.005
然後一步一步地到越來越高的優先級

00:24:33.307 --> 00:24:35.909
所以 再強調一些這點

00:24:36.844 --> 00:24:41.415
當你用完了資源的時候
一定要結束訪問

00:24:41.481 --> 00:24:43.050
這並不意味着資源會被刪除

00:24:44.384 --> 00:24:46.687
智能內容緩存

00:24:46.753 --> 00:24:50.123
有很多變量告訴系統關於清理的順序

00:24:50.591 --> 00:24:55.329
顯然的 最長時間沒被用的先被清理

00:24:55.929 --> 00:24:58.532
你也可以控制保留優先級

00:25:00.367 --> 00:25:03.770
保留優先級是一個信號
對於打包資源請求

00:25:04.505 --> 00:25:08.275
這是一個0到1的數值 只是用來表示

00:25:08.342 --> 00:25:10.911
系統以什麼樣的順序刪除東西

00:25:11.645 --> 00:25:14.348
它獨立於你的應用 所以不會作弊

00:25:15.182 --> 00:25:16.850
它不會幫你把所有都設爲1

00:25:16.917 --> 00:25:20.354
它只是表示當真的需要的時候
我們會吹走一切

00:25:20.821 --> 00:25:23.357
如果你的程序在運行

00:25:23.924 --> 00:25:27.594
它會是系統最後一個清理的資源

00:25:31.398 --> 00:25:33.534
這是非常重要的

00:25:33.600 --> 00:25:35.736
不要使用臨時變量和緩存

00:25:36.570 --> 00:25:41.508
顯然若你需要一下臨時的東西或者緩存
你可以使用

00:25:42.609 --> 00:25:44.778
但是因爲我們無法知道

00:25:44.845 --> 00:25:47.581
在臨時緩存中的數據的結構

00:25:48.582 --> 00:25:53.053
系統會認爲
它們是在低優先級時 就可以被清理的

00:25:53.620 --> 00:25:55.756
它們會被清理 而當它們被清理了

00:25:55.822 --> 00:25:57.357
它們是被整體地清理了

00:26:00.093 --> 00:26:01.962
所以 最後

00:26:03.630 --> 00:26:04.665
總結一下

00:26:06.533 --> 00:26:08.168
使用按需加載資源

00:26:08.235 --> 00:26:12.573
特別是對於tvOS
按需加載資源的使用

00:26:13.307 --> 00:26:16.210
真的提供了更加優化的用戶體驗

00:26:16.677 --> 00:26:18.912
它影響了網絡連接

00:26:19.313 --> 00:26:21.682
在iOS上 事情變得更加的棘手

00:26:21.748 --> 00:26:24.685
但也有很多成功使用它的方式

00:26:27.054 --> 00:26:28.889
它會使得應用更小

00:26:29.223 --> 00:26:32.893
這會減少用戶獲取的時間

00:26:33.460 --> 00:26:39.099
從商店到你用戶玩上你的遊戲
使用你的程序

00:26:40.200 --> 00:26:42.202
用你的內容做所有的事情

00:26:45.239 --> 00:26:46.840
你有了更多的應用內容

00:26:46.907 --> 00:26:51.879
現在你有了最多到20GB的空間
放任意你想的東西

00:26:54.581 --> 00:26:58.285
而對於用戶 他們不需要考慮這個

00:26:58.352 --> 00:27:00.654
他們可以安裝任意多的應用

00:27:00.721 --> 00:27:02.523
他們沒有一個障礙

00:27:02.589 --> 00:27:04.558
他們也不需要考慮存儲

00:27:05.926 --> 00:27:09.997
這就是按需下載資源的優化

00:27:10.864 --> 00:27:12.065
更多相關的信息

00:27:13.534 --> 00:27:15.602
請參考我們的網頁

00:27:16.103 --> 00:27:19.506
在本週的早些時候也有許多相關的演講

00:27:19.806 --> 00:27:21.241
我建議大家回顧一下

00:27:21.308 --> 00:27:22.176
謝謝