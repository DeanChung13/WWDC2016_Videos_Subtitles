00:00:19.853 --> 00:00:23.857
HomeKit的新特性

00:00:30.497 --> 00:00:33.901
大家好
谢谢大家的到来 欢迎你们

00:00:34.601 --> 00:00:36.703
我是Dennis Matthews

00:00:36.770 --> 00:00:39.840
我是Apple
HomeKit工程组的一员

00:00:41.842 --> 00:00:44.945
在我们开始介绍
HomeKit的新特性之前

00:00:45.345 --> 00:00:49.483
我想花几分钟来谈一谈HomeKit

00:00:49.550 --> 00:00:52.953
我想要着重介绍一些组成
HomeKit的核心功能

00:00:55.656 --> 00:00:59.526
HomeKit是一个应用框架
它提供了非常丰富的应用程序接口

00:00:59.660 --> 00:01:01.795
这些接口能够让你的应用

00:01:01.862 --> 00:01:05.866
与各种兼容HomeKit的
家居设备进行沟通

00:01:06.533 --> 00:01:09.803
你的应用程序可以通过相同的接口

00:01:09.870 --> 00:01:14.208
访问不同厂家生产的家居设备

00:01:17.477 --> 00:01:23.951
HomeKit将用户家庭数据保存在
一个公共的数据库里

00:01:24.284 --> 00:01:28.121
这点非常重要
它让所有的应用程序

00:01:28.355 --> 00:01:35.162
都能访问同样的家庭数据
以及家居设备的配置

00:01:37.831 --> 00:01:40.667
如果这个用户有多台移动设备

00:01:40.734 --> 00:01:43.070
并且它们都登陆了
同样的iCloud账户

00:01:43.203 --> 00:01:47.007
HomeKit能让家庭数据同步于

00:01:47.074 --> 00:01:50.577
这几台不同设备间

00:01:50.644 --> 00:01:51.778
这一点非常棒

00:01:51.845 --> 00:01:57.985
因为用户不再需要做额外的设置
他只要拿起任意一台设备

00:01:58.051 --> 00:02:01.688
就可以同HomeKit家居设备沟通

00:02:04.691 --> 00:02:08.895
HomeKit同样支持
用户家庭数据共享

00:02:09.395 --> 00:02:14.268
所以一个用户可以
允许他的家人和朋友

00:02:14.334 --> 00:02:18.872
控制他配置的家居设备

00:02:19.239 --> 00:02:21.208
共享非常简单

00:02:21.275 --> 00:02:27.247
用户只需要通过iCloud账户
邀请其他的用户

00:02:27.514 --> 00:02:31.051
只要他们接受了邀请

00:02:31.118 --> 00:02:35.155
HomeKit就能
自动完成家居控制的共享

00:02:35.222 --> 00:02:36.757
添加额外的移动设备

00:02:36.823 --> 00:02:40.160
并相应地配置所有的家居设备

00:02:40.227 --> 00:02:45.432
这样新的用户就能够
访问并且控制家居设备了

00:02:46.099 --> 00:02:52.005
当然 家庭主人可以
随时撤销别人的访问权限

00:02:55.075 --> 00:03:00.314
HomeKit使用了统一的通信协议
来控制不同的家居设备

00:03:00.380 --> 00:03:04.351
确保它们和Apple设备安全地通信

00:03:05.352 --> 00:03:07.487
所有的HomeKit家居设备

00:03:07.554 --> 00:03:10.991
不管它们是通过何种媒介进行通信

00:03:11.058 --> 00:03:13.794
都使用了相同的通信协议

00:03:14.494 --> 00:03:19.499
Apple支持的协议
同时还定义了一组丰富的设备配置

00:03:20.033 --> 00:03:23.704
这些配置能够描述
大部分常用的家居设备

00:03:23.770 --> 00:03:27.741
有了它们
Siri支持也就水到渠成了

00:03:28.242 --> 00:03:32.412
Siri为用户提供了一种
自然的交流方式

00:03:32.479 --> 00:03:36.483
来访问控制他们的家居设备

00:03:40.787 --> 00:03:45.025
当用户在家时
Apple设备连接到

00:03:45.092 --> 00:03:48.061
HomeKit家居设备非常简单

00:03:48.529 --> 00:03:50.030
用户需要做的只是

00:03:50.097 --> 00:03:53.967
让HomeKit设备和
Apple设备“对话”

00:03:54.801 --> 00:03:56.203
进行通信

00:03:56.570 --> 00:04:00.774
它们的通信要么使用Wi-Fi
要么是低功耗的蓝牙连接

00:04:02.809 --> 00:04:05.379
当用户不在家时

00:04:06.313 --> 00:04:09.750
对家居设备的遥控操作

00:04:09.816 --> 00:04:15.189
是通过Apple TV完成的
就如同一个遥控网关

00:04:15.556 --> 00:04:18.692
Apple TV创建了
一个加密通信通道

00:04:18.759 --> 00:04:22.095
来连接移动设备和家居设备

00:04:25.199 --> 00:04:26.300
安全性

00:04:27.568 --> 00:04:32.339
我们从开发HomeKit的第一天起
就不断强化它的安全性

00:04:33.273 --> 00:04:37.411
所有的HomeKit通信
都是点对点加密

00:04:37.644 --> 00:04:41.515
即 所有用来进行通信加密的密钥

00:04:41.582 --> 00:04:44.952
只保存在用户自己的设备上

00:04:45.786 --> 00:04:50.457
所以即使通信流经了
中间设备或者中介服务

00:04:50.524 --> 00:04:52.593
他们也不能解密

00:04:52.659 --> 00:04:54.261
即使Apple也不行

00:04:59.967 --> 00:05:04.438
HomeKit采用的是
业界知名的“完全向前加密”技术

00:05:04.838 --> 00:05:10.010
也就是说 每一次的通信对话
从用户的Apple设备

00:05:10.077 --> 00:05:12.479
到他们的HomeKit设备

00:05:12.546 --> 00:05:16.750
用户的每一个会话密钥
都是为这一次通信对话新生成的

00:05:16.817 --> 00:05:20.287
当通信完成 这些密钥就会被销毁

00:05:20.554 --> 00:05:24.925
这点非常重要
因为即使在将来

00:05:24.992 --> 00:05:28.896
如果任何一个设备被攻破
一个长期密钥被泄漏

00:05:28.962 --> 00:05:31.131
它也不能够被用来

00:05:31.198 --> 00:05:35.135
解密在那之前进行的数据通信

00:05:38.338 --> 00:05:40.641
家庭数据是私密的

00:05:40.874 --> 00:05:43.544
我们对数据私密性的保护
集成在应用接口上

00:05:43.610 --> 00:05:48.749
应用程序必须明确地向用户请求权限

00:05:48.815 --> 00:05:51.451
才能访问家庭数据

00:05:53.187 --> 00:05:55.923
HomeKit支持各种不同家居设备

00:05:56.190 --> 00:05:58.392
我们和家居设备生产商一起合作

00:05:58.458 --> 00:06:01.228
在市场上推出了种类丰富的家居设备

00:06:01.428 --> 00:06:03.597
我们的合作商还在计划

00:06:03.664 --> 00:06:07.968
推出更多令人兴奋的新设备
到HomeKit生态系统

00:06:10.337 --> 00:06:14.141
以上就是一个高层次的概述
有关于HomeKit

00:06:14.208 --> 00:06:19.513
有了这些背景知识 让我们开始
介绍HomeKit的新特性

00:06:22.015 --> 00:06:25.519
我们会介绍三大项内容

00:06:26.386 --> 00:06:28.222
首先 系统平台

00:06:29.156 --> 00:06:31.892
我们扩展了HomeKit的平台支持范围

00:06:31.959 --> 00:06:37.331
涵盖Apple的系统平台
包括 iOS watchOS 以及 tvOS

00:06:40.033 --> 00:06:44.171
我们扩大了HomeKit
对家居设备的支持范围

00:06:44.238 --> 00:06:45.405
就在这次升级

00:06:49.176 --> 00:06:54.414
许多的新功能和新提升

00:06:54.481 --> 00:06:57.751
都会随着此次的应用框架升级
进入你的应用

00:06:57.818 --> 00:06:59.920
我们稍后会介绍更多细节

00:07:02.756 --> 00:07:07.361
首先 系统平台
我们非常激动

00:07:07.427 --> 00:07:11.298
在今年发布了一个HomeKit应用

00:07:12.900 --> 00:07:18.205
Home应用提供了
非常简洁的操作界面

00:07:18.272 --> 00:07:23.010
让用户能非常容易的地
操控他们的家居设备

00:07:23.277 --> 00:07:27.848
它还允许用户对家居设备
进行自动化设置

00:07:30.150 --> 00:07:35.522
Home应用支持所有iOS设备
包括iPod Touch和iPhone

00:07:36.256 --> 00:07:38.292
在iPad上看起来也非常美观

00:07:39.092 --> 00:07:45.165
是的 随着watchOS 3的发布
Home应用也支持了Apple Watch

00:07:47.234 --> 00:07:50.804
我们认为用户会得到非常棒的体验

00:07:53.273 --> 00:07:58.812
不止如此 我们还把HomeKit
深度集成到了iOS系统里

00:07:58.879 --> 00:08:03.584
HomeKit选项可以直接
在控制中心被访问

00:08:04.218 --> 00:08:07.387
用户可以配置他们常用的家居设备

00:08:07.454 --> 00:08:12.292
控制这些家居设备
以及选择场景

00:08:12.459 --> 00:08:14.194
一切都在控制中心完成

00:08:17.497 --> 00:08:19.132
关于系统平台的第二点...

00:08:19.833 --> 00:08:22.503
远程遥控和自动化

00:08:23.203 --> 00:08:29.209
随着tvOS 10的发布
我们扩展了Apple TV功能范围

00:08:29.276 --> 00:08:35.381
所以在远程遥控的基础上
Apple TV现在还负责

00:08:35.448 --> 00:08:37.583
所有家居设备的自动化运行

00:08:46.426 --> 00:08:50.230
是的 这一点非常棒
因为不管用户在哪里

00:08:50.430 --> 00:08:53.467
在这个虚拟的世界里
他们能够放心

00:08:53.534 --> 00:08:58.438
所有的家用设备自动化
都在Apple TV上进行

00:09:00.974 --> 00:09:06.613
Apple TV同样为共享用户
提供更多的操控选项

00:09:07.047 --> 00:09:12.986
它可以将管理权限
授权给共享用户

00:09:13.387 --> 00:09:15.689
拥有管理权限的共享用户

00:09:15.756 --> 00:09:18.025
也将能控制设备的配置

00:09:18.392 --> 00:09:21.061
他们可以添加或移除家居设备

00:09:21.261 --> 00:09:25.666
或者 同样的 他们也能邀请其他用户

00:09:25.732 --> 00:09:28.602
让他们也能控制所有家居设备

00:09:31.338 --> 00:09:35.142
现在 我们还能管理
每一个用户的远程访问权限

00:09:35.209 --> 00:09:39.746
我们可以授权或者移除
其他用户的远程访问

00:09:39.813 --> 00:09:42.783
防止他们连接到家居设备上

00:09:47.855 --> 00:09:52.292
同样的功能
现在也支持iPad

00:09:55.362 --> 00:09:56.330
不止如此

00:09:58.165 --> 00:10:03.537
如果用户家里有多台授权移动设备

00:10:03.971 --> 00:10:09.576
比如Apple TV和iPad
或者是任意设备的组合

00:10:09.877 --> 00:10:12.513
它们会自动地协作

00:10:12.579 --> 00:10:15.516
扩展家庭的HomeKit网络

00:10:15.582 --> 00:10:17.451
在和家居设备通信的时候

00:10:17.518 --> 00:10:20.621
它们会自动选择一个控制设备进行通信

00:10:20.854 --> 00:10:23.357
不需要额外的配置来自用户

00:10:23.423 --> 00:10:26.693
这一切都由HomeKit自动完成

00:10:28.529 --> 00:10:32.099
系统平台第三点更新
关于tvOS 10

00:10:33.500 --> 00:10:38.172
我们非常激动地
把HomeKit框架集成在了tvOS

00:10:43.510 --> 00:10:46.079
现在tvOS有了HomeKit框架

00:10:46.146 --> 00:10:49.750
你的应用就可以预览家居配置

00:10:50.450 --> 00:10:52.619
操控家居设备

00:10:52.686 --> 00:10:56.890
以及开启情景模式
直接在Apple TV上完成

00:10:58.992 --> 00:11:05.165
这同样也意味着Apple TV
现可使用Siri控制HomeKit

00:11:10.270 --> 00:11:13.607
得益于Siri操控的便捷性

00:11:13.674 --> 00:11:16.810
你能方便地控制HomeKit设备

00:11:19.012 --> 00:11:23.317
以上就是系统平台的几点重大更新

00:11:24.151 --> 00:11:25.686
我们来快速回顾一下

00:11:26.119 --> 00:11:27.955
首先 Home应用

00:11:28.622 --> 00:11:31.191
它是Apple研发设计的
HomeKit应用

00:11:31.525 --> 00:11:33.894
它能让家居设备的配置

00:11:33.961 --> 00:11:38.065
以及常用功能的操控
变得非常的简单上手

00:11:40.701 --> 00:11:42.903
第二 远程操控和自动化

00:11:42.970 --> 00:11:45.572
我们扩展了Apple TV功能范围

00:11:45.639 --> 00:11:47.207
让它来自动化运行家居设备

00:11:47.274 --> 00:11:51.411
同时它还支持了
共享用户对家居设备的控制

00:11:53.447 --> 00:11:57.117
同样的功能现在也支持iPad

00:11:58.652 --> 00:12:02.789
第三点 在tvOS内部
我们集成了HomeKit框架

00:12:03.724 --> 00:12:07.194
我们非常激动
能把这些新特性带给系统平台

00:12:10.731 --> 00:12:15.502
第二项内容
我们将会讲到新的家居设备支持

00:12:18.105 --> 00:12:21.308
第一类新设备
今年我们将会支持

00:12:21.375 --> 00:12:25.812
常用的空气处理类设备

00:12:26.547 --> 00:12:30.918
所以现在 HomeKit能支持
空调和暖气设备

00:12:31.585 --> 00:12:36.023
空气过滤器 以及空气加湿器

00:12:36.523 --> 00:12:39.760
这非常棒
因为我们的用户现在可以

00:12:39.826 --> 00:12:43.664
把这些全新的家居设备

00:12:44.164 --> 00:12:49.503
加入到HomeKit生态系统
使它们实现自动化

00:12:52.573 --> 00:12:56.777
第二类 我们非常开心地

00:12:56.844 --> 00:13:01.281
将相机类设备加入了
HomeKit支持范围

00:13:08.188 --> 00:13:11.592
有了相机类设备
你的应用程序将能够

00:13:11.658 --> 00:13:14.962
显示相机拍摄的实时视频

00:13:15.662 --> 00:13:18.398
显示相机拍摄的静态照片

00:13:19.433 --> 00:13:22.102
控制相机的所有配置

00:13:22.469 --> 00:13:26.273
以及控制扬声器和麦克风配置

00:13:30.110 --> 00:13:32.079
第三类 门铃

00:13:32.880 --> 00:13:35.682
门铃是一种非常简单的家居设备

00:13:36.083 --> 00:13:39.620
当门铃被按下
它能触发相应的程序

00:13:41.088 --> 00:13:44.191
同时门铃设备能够控制

00:13:44.258 --> 00:13:46.460
铃声的音量

00:13:46.593 --> 00:13:49.696
如果门铃设备还带有
视觉指示器

00:13:49.763 --> 00:13:53.734
它们也能被门铃设备所控制

00:13:54.635 --> 00:14:00.407
我们常见的门铃
也常常和其它的设备集成在一起

00:14:00.841 --> 00:14:03.577
门铃摄像头是一个热门的类型

00:14:03.944 --> 00:14:07.514
现在它们的配置
也同样被HomeKit支持

00:14:10.317 --> 00:14:15.355
这些功能强大的设备
不仅能被HomeKit控制

00:14:15.422 --> 00:14:20.527
它们的使用体验
也和系统高度统一

00:14:22.496 --> 00:14:25.199
举个例子

00:14:25.465 --> 00:14:27.234
如果你有一个门铃

00:14:28.135 --> 00:14:29.336
一个门锁

00:14:30.704 --> 00:14:32.573
以及摄像头

00:14:32.639 --> 00:14:36.443
它们都被用户配置
作为房间的一部分

00:14:36.510 --> 00:14:39.246
也许用户称这个房间为“入口”

00:14:40.013 --> 00:14:46.186
HomeKit会自动关联
这些设备的不同功能

00:14:46.520 --> 00:14:51.658
用户能对它们进行触控感应设置

00:14:52.426 --> 00:14:57.731
这也让一些神奇的用户体验
比如丰富通知成为了可能

00:14:59.433 --> 00:15:03.670
比如说 现在门铃声响起

00:15:03.837 --> 00:15:07.608
HomeKit会自动拍摄一张照片

00:15:07.674 --> 00:15:11.411
用户就会收到一条丰富通知

00:15:13.213 --> 00:15:17.584
同时 在通知栏里
用户还能直接进行控制

00:15:17.651 --> 00:15:18.986
他能按下按钮

00:15:19.052 --> 00:15:22.789
打开对讲机
同来人进行对话

00:15:22.856 --> 00:15:25.792
或者 用户也可以选择解锁大门

00:15:26.260 --> 00:15:31.365
通知栏可以实时显示监控视频

00:15:33.734 --> 00:15:39.139
是的 同样的功能也支持
Apple Watch

00:15:39.540 --> 00:15:41.175
只要点击

00:15:41.575 --> 00:15:44.645
表面的图片
就可以开启视频流

00:15:44.711 --> 00:15:48.048
从你的HomeKit摄像头
到你的Apple Watch

00:15:49.816 --> 00:15:55.189
当然 你可以选择解锁
直接在Apple Watch上完成

00:15:56.023 --> 00:16:00.060
接下来 我们来看看
HomeKit框架都有哪些更新

00:16:01.828 --> 00:16:05.799
我们想先介绍一些简单

00:16:05.866 --> 00:16:09.136
却强大的应用功能升级

00:16:09.203 --> 00:16:14.007
现在 设备的使用情境
将会被反馈给你的应用程序

00:16:14.875 --> 00:16:16.977
首先是主要功能

00:16:17.911 --> 00:16:22.216
假如有这样一台设备
它提供两种功能

00:16:22.282 --> 00:16:24.885
风扇功能和灯光功能

00:16:24.952 --> 00:16:27.554
这就是你的应用程序显示的结果

00:16:27.621 --> 00:16:31.124
仅仅看着这些功能的名字
你完全不能了解

00:16:31.191 --> 00:16:34.428
用户使用的是什么设备

00:16:35.195 --> 00:16:37.631
这是一个带排气扇的灯具？

00:16:37.965 --> 00:16:41.435
或者是一台带照明灯的风扇？

00:16:42.569 --> 00:16:45.439
现在 随着HomeKit协议的更新

00:16:45.639 --> 00:16:49.042
家居设备能够标注出
它的主要功能

00:16:49.309 --> 00:16:52.479
这个信息会被反馈给你的应用程序

00:16:52.546 --> 00:16:56.783
通过HMService类的
isPrimaryService属性

00:16:57.017 --> 00:16:58.886
它会对你大有裨益

00:16:58.952 --> 00:17:01.822
因为现在你能

00:17:01.889 --> 00:17:05.025
对设备进行内容感应设置

00:17:08.095 --> 00:17:11.064
第二个例子是关于关联功能

00:17:11.665 --> 00:17:15.402
在这个例子中
假设一台设备拥有

00:17:15.469 --> 00:17:18.605
三个电源插口
和一个开关

00:17:19.239 --> 00:17:24.344
现在 如果仅仅是看着它们的名字
你不会明白这个开关功能具体是什么

00:17:24.478 --> 00:17:29.550
这个开关只控制了一个插座？
或者它控制了所有的插座？

00:17:30.450 --> 00:17:33.220
当用户看到这台设备

00:17:33.287 --> 00:17:37.958
他就能知道这个开关
同时控制了其它三个插座

00:17:38.225 --> 00:17:42.196
如今有了关联功能
所有功能都能够相互关联

00:17:43.664 --> 00:17:47.067
然后把它们之间的关系
反馈给HomeKit

00:17:47.501 --> 00:17:50.170
接着这个信息也会被反馈给你

00:17:50.237 --> 00:17:53.774
所以在这个例子中
开关是和三个插座口关联的

00:17:53.841 --> 00:17:56.877
它们之间的逻辑关系是

00:17:56.944 --> 00:17:58.879
开关控制着三个插座

00:17:59.246 --> 00:18:03.884
现在 对于用户
当他们看着用户界面时

00:18:04.318 --> 00:18:07.654
不但能看到插座设备
还可以看到它们相应的状态

00:18:07.721 --> 00:18:09.790
它们的电源是开启或关闭

00:18:09.923 --> 00:18:12.926
根据和它们关联的开关状态来判定

00:18:16.163 --> 00:18:17.931
第三点是有效的参数

00:18:18.265 --> 00:18:21.068
要解释有效参数的概念
我们来看一个例子

00:18:21.134 --> 00:18:22.870
如果我们想要建造一台设备

00:18:23.270 --> 00:18:25.772
假如说这台设备是一台空调

00:18:26.473 --> 00:18:27.841
在我们建造的过程中

00:18:27.908 --> 00:18:32.713
我们想要把Apple定义的参数
内置到这台设备里

00:18:32.880 --> 00:18:36.884
我们要为设备选择一个
制冷状态的目标参数

00:18:37.084 --> 00:18:40.921
它是这样被定义在参数表里面的

00:18:41.922 --> 00:18:46.960
但是我们建造的空调
不支持加热

00:18:47.728 --> 00:18:52.499
所以这里的heat以及auto状态
对我都是无效的参数

00:18:54.935 --> 00:18:59.606
现在 设备可以把参数标注为“无效”

00:19:00.207 --> 00:19:04.811
如果Apple定义的参数表
与设备的实际功能配置不符合的话

00:19:04.878 --> 00:19:09.583
在这个实例中 这台设备将heat
和auto标注为“不支持”

00:19:10.050 --> 00:19:14.254
这条信息会被反馈给应用程序

00:19:14.321 --> 00:19:19.026
通过HMCharacteristicMetadata类的
Valid Values属性

00:19:19.860 --> 00:19:23.430
应用界面上只会显示出
有效的控制选项

00:19:23.497 --> 00:19:26.433
这样就能和你的设备功能完全匹配

00:19:28.769 --> 00:19:31.772
接下来 配置HomeKit设备

00:19:32.739 --> 00:19:36.143
配置HomeKit设备

00:19:36.210 --> 00:19:39.546
大概是你的用户要做的第一步了

00:19:39.813 --> 00:19:42.216
它包括了几个步骤

00:19:42.983 --> 00:19:46.954
首先 你需要检索已有的家居设备

00:19:47.688 --> 00:19:51.458
一旦发现了一台新设备

00:19:51.525 --> 00:19:53.427
并且它属于Wi-Fi网络的一部分

00:19:53.493 --> 00:19:55.996
或者是一台蓝牙设备
并且在有效范围内

00:19:56.063 --> 00:19:57.764
你会收到这样的代码信息

00:19:57.831 --> 00:20:02.903
在accessoryBrowser的委托回调函数下
出现了didFindNewAccessory变量

00:20:04.204 --> 00:20:07.407
一旦你拥有了这台设备信息
你就可以调用

00:20:07.474 --> 00:20:12.713
HMHome下的addAccessory函数
来添加这台设备

00:20:15.182 --> 00:20:18.519
但是对于一些Wi-Fi设备

00:20:18.585 --> 00:20:21.655
若它还没注册在用户Wi-Fi网络里

00:20:22.289 --> 00:20:25.192
现在你还需要额外的步骤

00:20:25.259 --> 00:20:29.563
把这些设备加入用户的Wi-Fi网络

00:20:29.863 --> 00:20:32.699
你可以使用EA框架来实现

00:20:32.966 --> 00:20:35.602
然后完成这些额外的步骤

00:20:36.670 --> 00:20:38.572
我们认为这不是最好的用户体验

00:20:39.006 --> 00:20:39.840
所以现在

00:20:42.476 --> 00:20:46.180
在iOS 10中
我们提供了一个简单的应用接口

00:20:46.246 --> 00:20:50.951
用来添加和配置新设备
它能完全照顾到

00:20:51.018 --> 00:20:52.753
所有需要的步骤

00:20:52.819 --> 00:20:56.323
来配置家居设备
然后添加到用户的网络里

00:20:56.857 --> 00:21:00.327
在调用addAndSetupAccessories函数时

00:21:00.527 --> 00:21:06.133
应用界面会引导用户选择相应的设备

00:21:06.200 --> 00:21:10.804
所以在这个例子中
界面会显示出所有的设备

00:21:10.871 --> 00:21:14.174
包括Wi-Fi网络下的新设备

00:21:14.308 --> 00:21:16.877
用户可以选择他们想要添加的设备

00:21:17.144 --> 00:21:19.546
一旦他们选择了一台设备

00:21:19.613 --> 00:21:22.082
若它并没被注册到用户Wi-Fi网络

00:21:22.149 --> 00:21:24.551
它会被安全地添加进Wi-Fi网络里

00:21:25.085 --> 00:21:28.155
接着HomeKit安全码会被扫描

00:21:28.956 --> 00:21:32.025
设备的HomeKit配对就完成了

00:21:33.627 --> 00:21:38.298
然后用户会被提示
给设备命名

00:21:38.365 --> 00:21:40.567
为设备选择一个房间

00:21:40.634 --> 00:21:45.305
在这个例子中 因为这是一个电源插座
它属于一个特殊的设备分类

00:21:45.539 --> 00:21:48.075
所以用户还会被提示

00:21:48.141 --> 00:21:50.777
标注出与它关联的其他设备

00:21:50.844 --> 00:21:55.282
在我们的这个实例中
假如这个插座与风扇关联

00:21:55.349 --> 00:21:59.186
所以我们选择风扇
作为它的关联设备

00:21:59.253 --> 00:22:03.357
最后 用户也可以把这个设备设置为

00:22:03.423 --> 00:22:06.760
他们常用设备的其中之一
如此一来

00:22:06.827 --> 00:22:11.632
这个设备的控制选项
就会出现在手机的控制中心里面

00:22:12.432 --> 00:22:13.267
就是这样

00:22:13.433 --> 00:22:18.405
只需要一个简单的应用接口
手机就能引导用户完成整个设置流程

00:22:18.472 --> 00:22:24.111
今后所有的应用程序都会拥有
同样一致的体验

00:22:24.178 --> 00:22:26.213
我们认为这能极大提升用户的使用体验

00:22:26.280 --> 00:22:29.550
所以我们强烈建议大家
开始使用这个应用接口

00:22:40.060 --> 00:22:43.096
接下来 我们来谈一谈相机设备

00:22:48.569 --> 00:22:53.607
相机是一种功能丰富
但是操作复杂的设备

00:22:53.874 --> 00:22:56.877
它拥有种类繁多的控制选项

00:22:57.611 --> 00:23:01.615
相较于把这些复杂的原生功能
提供给你的应用

00:23:01.949 --> 00:23:04.051
我们提供了一种非常简洁的方法

00:23:04.117 --> 00:23:07.120
让用户使用这一功能强大的设备

00:23:07.354 --> 00:23:09.790
使用cameraProfile对象

00:23:10.490 --> 00:23:14.361
一个profile通常是
许多关联服务的合集

00:23:14.428 --> 00:23:17.497
这个合集描述了一台设备的常用功能

00:23:17.931 --> 00:23:23.370
所以cameraProfile
提供了全部的接口

00:23:23.437 --> 00:23:25.939
让你得以控制相机设备

00:23:27.975 --> 00:23:31.612
一台设备的
cameraProfile变量

00:23:31.678 --> 00:23:37.184
将从HMAccessory类
cameraProfile属性得到

00:23:37.651 --> 00:23:42.723
一台设备可以拥有多个摄像头
它同样能被HomeKit控制

00:23:42.789 --> 00:23:46.026
每个摄像头都是cameraProfile
数组里众多元素中的一个

00:23:48.762 --> 00:23:51.598
让我们看看
cameraProfile具体功能

00:23:51.832 --> 00:23:55.836
cameraProfile
提供了额外的接口 它们能帮助你控制

00:23:55.903 --> 00:23:57.671
相机的不同功能

00:23:58.005 --> 00:24:00.674
你可以控制相机
拍摄和显示实时视频

00:24:00.741 --> 00:24:03.477
包括音频流和视频流

00:24:03.977 --> 00:24:07.114
让相机拍摄和显示静态照片

00:24:07.848 --> 00:24:10.083
控制相机所有的设置

00:24:10.350 --> 00:24:14.354
以及控制相机的扬声器和麦克风设置

00:24:15.322 --> 00:24:19.526
我们来看看HMCameraProfile类
所提供的接口

00:24:20.060 --> 00:24:22.696
首先是视频流控制

00:24:23.397 --> 00:24:25.766
先看HMStreamControl

00:24:25.832 --> 00:24:29.536
HMStreamControl
提供了一些简单的函数

00:24:29.603 --> 00:24:33.774
它们允许你启动或者停止视频流拍摄

00:24:34.641 --> 00:24:38.512
在HMCameraStream下
调用startStream函数

00:24:38.579 --> 00:24:41.849
就能开启相机的视频流拍摄

00:24:42.015 --> 00:24:46.787
一旦视频流被开启
它的运行状态会被反馈给你

00:24:46.854 --> 00:24:48.989
使用StreamControl
委托回调函数

00:24:51.758 --> 00:24:53.026
一旦视频流开启

00:24:53.093 --> 00:24:56.997
cameraStreamControl
DidStartStream函数就会告知你

00:24:57.064 --> 00:24:58.465
视频流已经被开启

00:24:58.765 --> 00:25:02.536
同样的 要停止视频流拍摄
只需要调用stopStream函数

00:25:02.603 --> 00:25:06.974
相机的运行状态
会通过同样的机制被反馈回来

00:25:07.040 --> 00:25:12.145
通过cameraStreamControl内部的
didStopStreamWithError委托回调函数

00:25:13.680 --> 00:25:15.616
当视频流被开启时

00:25:16.817 --> 00:25:19.486
你的应用程序能够引用这个视频流

00:25:19.553 --> 00:25:22.656
使用它的
cameraStream属性

00:25:23.257 --> 00:25:25.759
我们来看看
cameraStream包含了什么

00:25:26.593 --> 00:25:32.833
cameraStream
包含了音频流和视频流

00:25:33.233 --> 00:25:35.502
所以在cameraStream类中

00:25:35.569 --> 00:25:38.438
你能够进一步地控制

00:25:38.505 --> 00:25:41.542
相机的音频设置

00:25:42.209 --> 00:25:45.612
有了它 你既可以让视频流静音

00:25:45.679 --> 00:25:51.552
或者只允许视频流输入声音
或者允许双向的语音传递

00:25:53.887 --> 00:25:56.456
所以现在你拥有了视频流
你想用它来干什么？

00:25:56.790 --> 00:25:59.693
是的 你想要把它显示在应用界面上

00:26:00.360 --> 00:26:01.395
怎么做到呢？

00:26:03.463 --> 00:26:06.567
非常简单
在iOS 10和tvOS 10中

00:26:06.633 --> 00:26:10.804
你只需要创建一个HMCameraView

00:26:11.271 --> 00:26:14.441
在这view类里...

00:26:14.942 --> 00:26:17.544
有一个名为
cameraSource的单一属性

00:26:17.711 --> 00:26:20.814
你只需要指定你的视频流

00:26:20.981 --> 00:26:23.750
关联到这个属性
就是这样

00:26:24.451 --> 00:26:29.022
做完这些你的应用
就能够显示实时的视频流

00:26:31.358 --> 00:26:33.160
在watch OS上也非常相似

00:26:33.227 --> 00:26:36.630
你只用创建一个
WKInterfaceCamera

00:26:36.897 --> 00:26:40.100
然后调用
setCameraSource函数

00:26:40.300 --> 00:26:43.937
你的Apple Watch
就能显示实时视频流了

00:26:45.672 --> 00:26:50.711
所以...以上就是一些不同的对象
你需要了解它们

00:26:51.478 --> 00:26:53.814
来控制你的相机设备

00:26:53.881 --> 00:26:57.885
事实上这非常简单
让我们看一看这个实例

00:27:00.153 --> 00:27:03.757
首先 我们访问设备的
cameraProfile

00:27:03.824 --> 00:27:07.628
在这个例子中 选择第一个
cameraProfile

00:27:08.295 --> 00:27:11.298
在cameraProfile的
streamControl类里

00:27:11.365 --> 00:27:14.468
调用了startStream函数
它会开启相机的视频流拍摄

00:27:14.835 --> 00:27:17.871
如果要显示视频流
我们将创建一个

00:27:18.438 --> 00:27:20.207
HMCameraView

00:27:20.908 --> 00:27:23.410
一旦我们的视频流被开启

00:27:23.677 --> 00:27:24.978
它的状态会被反馈回来

00:27:25.045 --> 00:27:28.849
通过这个委托回调函数

00:27:29.082 --> 00:27:33.554
我们所需要做的只是
把这个视频流指向

00:27:33.620 --> 00:27:36.056
View里的
cameraSource属性

00:27:36.123 --> 00:27:36.957
就这样

00:27:37.024 --> 00:27:41.528
现在你的应用界面
就可以显示来自相机的视频流了

00:27:45.098 --> 00:27:47.568
接下来 我们来看看
snapshotControl

00:27:47.634 --> 00:27:52.239
snapshotControl接口
同streamControl很相似

00:27:53.340 --> 00:27:57.644
snapshotControl类
定义了takeSnapshot函数

00:27:57.711 --> 00:28:01.882
每当一张照片被拍摄
你会被相应地告知

00:28:01.949 --> 00:28:07.221
通过cameraSnapshotControl函数下的
didTake snapshot委托回调函数

00:28:07.588 --> 00:28:12.259
要引用最近的拍摄照片

00:28:12.326 --> 00:28:14.895
你需要用到mostRecentSnapshot属性

00:28:16.163 --> 00:28:22.302
让我们看看SnapshotControl
它还有一个额外的变量

00:28:22.369 --> 00:28:27.007
能够告诉你相片的拍摄日期

00:28:27.074 --> 00:28:28.909
它同时包括时间和日期

00:28:29.910 --> 00:28:36.783
同样 若你想把照片显示在应用界面上

00:28:36.850 --> 00:28:41.188
你只需要创建一个View界面
然后把它指向这张照片

00:28:42.956 --> 00:28:46.393
这里有一个使用相机
拍摄并显示一张照片的例子

00:28:46.460 --> 00:28:49.162
（与视频流处理）非常相似
它们的核心组件都大同小异

00:28:49.463 --> 00:28:51.832
首先我们需要访问
cameraProfile

00:28:52.833 --> 00:28:55.669
在这个cameraProfile的
snapshotControl类里

00:28:55.736 --> 00:28:57.971
我们需要调用takeSnapshot函数

00:28:58.205 --> 00:29:01.441
创建一个应用界面View...
来显示拍摄的照片

00:29:01.742 --> 00:29:04.178
一旦这个委托函数被回调

00:29:04.811 --> 00:29:07.614
照片的引用变量也同时被返回

00:29:07.681 --> 00:29:11.885
我们只需要使用这个变量并把它传递给
相机的source属性

00:29:11.952 --> 00:29:12.853
就是这样

00:29:12.920 --> 00:29:16.757
完成这些过后
相机拍摄的照片就能被显示出来

00:29:19.760 --> 00:29:21.395
接着 我们来看看settingsControl

00:29:21.461 --> 00:29:24.731
settingsControl包括了
HMCharacteristics对象

00:29:24.798 --> 00:29:29.036
HMCharacteristics允许你控制
相机支持的所有设置

00:29:31.572 --> 00:29:34.741
通过接口 你将能控制相机的夜视

00:29:34.942 --> 00:29:40.047
倾斜调整 变焦 旋转
以及镜面翻转功能

00:29:40.113 --> 00:29:43.383
如果cameraSupport属性
不支持其中任何一项

00:29:43.450 --> 00:29:45.219
这个属性就会变成nil

00:29:45.285 --> 00:29:48.288
如果支持 你将得到全部的权限
来控制相机的设置

00:29:48.355 --> 00:29:50.390
使用你的应用程序

00:29:54.461 --> 00:29:58.031
最后 我们来看看相机音频控制

00:29:58.098 --> 00:30:00.501
它允许你同时控制
摄像头内置的扬声器

00:30:00.567 --> 00:30:02.603
以及麦克风

00:30:03.670 --> 00:30:06.373
同样 我们拥有这些
HMCharacteristics对象

00:30:06.440 --> 00:30:09.910
它允许你更改麦克风的静音设置

00:30:10.210 --> 00:30:12.212
更改扬声器的静音设置

00:30:12.446 --> 00:30:17.150
控制麦克风的增益
或者控制扬声器的音量

00:30:17.651 --> 00:30:21.622
所有这些关键的应用接口
都将开放给你

00:30:21.688 --> 00:30:24.791
用来控制这种功能强大的设备

00:30:27.961 --> 00:30:29.329
让我们总结一下

00:30:29.563 --> 00:30:32.432
我们今天讲到了三大主题

00:30:32.833 --> 00:30:34.902
首先 系统平台

00:30:36.470 --> 00:30:40.607
推出Home应用 一个Apple为
HomeKit开发设计的应用程序

00:30:41.942 --> 00:30:43.644
远程访问和自动化

00:30:43.710 --> 00:30:47.314
扩展了Apple TV的功能范围
同时还增加了对iPad的支持

00:30:47.381 --> 00:30:51.552
以此实现了对家居设备的
远程访问和自动化控制

00:30:53.053 --> 00:30:56.890
我们还将HomeKit框架
集成到了tvOS

00:30:58.759 --> 00:31:00.961
下一个主题是关于家居设备

00:31:01.995 --> 00:31:05.899
我们增加了对
热门的空气处理类设备的支持

00:31:07.000 --> 00:31:11.205
我们还将功能强大的摄像设备
加入了HomeKit的生态系统

00:31:12.139 --> 00:31:15.876
我们还支持了门铃
以及它相关的组合设备

00:31:15.943 --> 00:31:17.711
也就是门铃摄像头

00:31:19.880 --> 00:31:21.415
有关HomeKit框架更新

00:31:21.849 --> 00:31:25.519
我们谈到了一些简单
却又强大的功能提升

00:31:25.586 --> 00:31:29.456
来帮助我们得到家居设备的使用情境

00:31:29.523 --> 00:31:33.727
因此我们可以提供内容感应界面给用户

00:31:34.895 --> 00:31:37.631
我们极大地简化了新设备的配置流程

00:31:37.698 --> 00:31:39.800
只需要调用一个应用接口

00:31:39.867 --> 00:31:42.836
就能使用一致的系统体验
来引导用户

00:31:42.903 --> 00:31:46.507
完成HomeKit新设备的配置

00:31:47.975 --> 00:31:50.511
我们还介绍了
cameraProfile对象

00:31:50.577 --> 00:31:56.917
它将允许我们的应用程序
更高效地使用诸多的家居设备

00:31:59.987 --> 00:32:04.324
在我结束之前
我想请大家思考一下

00:32:05.792 --> 00:32:09.363
HomeKit设备和你的应用程序

00:32:09.429 --> 00:32:13.800
正在改变我们的用户和家的互动方式

00:32:15.869 --> 00:32:21.608
得益于Siri这样的系统功能
自动化 通知功能

00:32:22.576 --> 00:32:28.248
再结合Apple平台上
丰富的辅助类功能

00:32:28.849 --> 00:32:30.517
比如Voiceover等等

00:32:31.118 --> 00:32:36.223
我们第一次使这些家用设备

00:32:36.290 --> 00:32:39.393
让患有各种残疾的用户 无障碍地使用

00:32:39.960 --> 00:32:41.562
它的意义巨大

00:32:41.962 --> 00:32:45.766
对很多用户来说
这都将是改变人生的全新体验

00:32:46.400 --> 00:32:50.204
所以我希望大家能够了解
这些不同的功能

00:32:50.270 --> 00:32:52.773
它们将在Apple平台上向大家开放

00:32:52.840 --> 00:32:57.978
请充分利用它们
来开发你的家居设备和应用程序

00:32:58.045 --> 00:33:00.080
让所有人从中受益

00:33:02.950 --> 00:33:05.219
对于我们的MFi项目成员

00:33:06.119 --> 00:33:11.491
一份更新的参数预览
将会很快开放给你们

00:33:12.759 --> 00:33:16.830
对于新的设备制造商
如果希望加入这个项目

00:33:17.231 --> 00:33:22.169
这个链接会给你提供更多的信息
或者请直接和我们的工作人员交谈

00:33:24.905 --> 00:33:29.409
更多关于这次HomeKit
发布的信息以及相关的参考信息

00:33:29.476 --> 00:33:31.678
可以在这个链接里被找到

00:33:33.747 --> 00:33:38.085
这些是一些相关的演讲
我建议你们观看其视频

00:33:38.151 --> 00:33:39.353
若你们已经错过了

00:33:39.753 --> 00:33:41.522
第一个尤其令人鼓舞

00:33:44.658 --> 00:33:47.027
非常感谢大家
祝会议圆满