00:00:19.987 --> 00:00:23.690
发挥HealthKit最大价值

00:00:28.195 --> 00:00:31.398
早上好 欢迎来到
“发挥HealthKit最大价值”

00:00:31.899 --> 00:00:34.635
我是Matt
HealthKit团队软件工程师

00:00:34.768 --> 00:00:37.304
稍后这个舞台
会交给我的同事Jeff

00:00:38.138 --> 00:00:41.475
本场演讲 我们会讲一些
很棒的新功能

00:00:41.542 --> 00:00:44.511
是iOS 10和watchOS 3中
HealthKit API的新拓展

00:00:45.412 --> 00:00:48.715
与此同时
我们也会讲到一些主要的新特性

00:00:48.782 --> 00:00:51.685
核心概念和重要的工作流程
以确保

00:00:51.752 --> 00:00:54.621
你真正可以
充分利用HealthKit的价值

00:00:55.889 --> 00:00:57.791
希望你已经
对HealthKit有所了解

00:00:57.858 --> 00:00:59.393
若你在此观看这场演讲

00:00:59.459 --> 00:01:01.228
如果不是
我们会列出之前的演讲

00:01:01.295 --> 00:01:02.262
在这场演讲最后

00:01:02.329 --> 00:01:04.397
供你日后参考
来快速了解这些内容

00:01:05.065 --> 00:01:06.834
但是现在
我们开始讲今天的内容

00:01:09.837 --> 00:01:13.240
在座的都知道
Apple的健康与健身生态系统

00:01:13.307 --> 00:01:15.375
在我们的用户中
大受好评

00:01:16.043 --> 00:01:18.145
人们越来越健美
也越来越健康

00:01:18.212 --> 00:01:20.214
这归功于我们将
HealthKit

00:01:20.280 --> 00:01:22.482
ResearchKit
和CareKit

00:01:22.549 --> 00:01:25.319
在iPhone和Apple Watch上
与你的应用和设备结合在一起

00:01:26.353 --> 00:01:28.288
我们想保证
你们可以

00:01:28.355 --> 00:01:31.458
一直创造这些很棒的
有关健康和健美的用户体验

00:01:31.525 --> 00:01:33.827
让我们的用户
有所期待并享受其中

00:01:35.195 --> 00:01:38.565
那么今天我们就来看看
你都要做哪些事情

00:01:38.632 --> 00:01:40.467
来确保这些体验
正确而且理想

00:01:41.835 --> 00:01:43.637
首先来讲授权

00:01:43.704 --> 00:01:46.240
这是HealthKit
所有其他功能的基础

00:01:47.040 --> 00:01:51.512
然后是Activity Rings API
在iOS 9.3下引入的

00:01:51.879 --> 00:01:54.381
还有健康记录
今年在iOS 10系统下发布的

00:01:54.848 --> 00:01:57.317
这两个都会产生
一些重要的影响

00:01:57.384 --> 00:01:58.685
与授权相关

00:02:00.587 --> 00:02:02.389
最后
在剩下的时间里

00:02:02.456 --> 00:02:05.559
我们会讲解各种
处理数据的好方法

00:02:05.692 --> 00:02:07.561
在你与HealthKit互动时

00:02:10.864 --> 00:02:11.698
现在就开始讲吧

00:02:12.165 --> 00:02:13.901
首先就是授权

00:02:14.468 --> 00:02:16.370
若你使用HealthKit
一段时间

00:02:16.436 --> 00:02:18.939
那么这里大部分内容
对你来说可能就是回顾

00:02:19.239 --> 00:02:21.909
但我们建议你
重点关注一些细节

00:02:21.975 --> 00:02:25.045
因为它们很重要
对我们过会儿要讲的内容而言

00:02:25.212 --> 00:02:28.382
我们也会讲到一些最佳操作
所以竖起耳朵听

00:02:31.084 --> 00:02:34.388
iOS让用户
能完全掌握他们的健康数据

00:02:34.488 --> 00:02:37.124
以及哪个应用可以访问
哪一部分数据

00:02:38.258 --> 00:02:39.893
在与HealthKit互动前

00:02:40.093 --> 00:02:43.797
你的应用需要请求许可
通过HK Health Store访问正确的类型

00:02:44.364 --> 00:02:46.266
Health Store反过来会显示

00:02:46.333 --> 00:02:49.203
一个正确的授权UI给用户
如果有必要的话

00:02:51.038 --> 00:02:54.341
注意 用户可以随时更改
给你应用的权限

00:02:54.408 --> 00:02:56.777
在开发应用的时候
一定要记住这一点

00:02:57.811 --> 00:03:01.348
同样重要的是
读授权和写授权

00:03:01.415 --> 00:03:02.783
完全独立不相干

00:03:03.383 --> 00:03:05.152
最后这点
是有点复杂

00:03:05.219 --> 00:03:07.254
所以
我们来讲的更细一点

00:03:11.191 --> 00:03:13.293
这里看到的是
读和写的授权如何运行

00:03:14.094 --> 00:03:15.362
如果用户同时授权你

00:03:15.429 --> 00:03:17.998
读和写的许可
给一个指定的HealthKit类型

00:03:18.298 --> 00:03:20.133
那么你的应用
可以如你所愿地查询并保存

00:03:20.200 --> 00:03:22.302
这个HealthKit类型的数据

00:03:23.337 --> 00:03:26.173
如果用户只给你
读某个类型的权限

00:03:26.340 --> 00:03:27.174
那么你的应用可读

00:03:27.241 --> 00:03:29.076
但是不可改写
这个HealthKit类型的数据

00:03:29.142 --> 00:03:30.010
到目前一切都好

00:03:31.778 --> 00:03:34.581
现在 如果用户给你
改写某个类型的权限

00:03:35.048 --> 00:03:37.417
那么你的应用可以改写
HealthKit中这个类型的数据

00:03:37.484 --> 00:03:39.653
但不能从HealthKit
回读这个类型

00:03:40.120 --> 00:03:43.023
有写的权限
不意味有读的权限

00:03:43.390 --> 00:03:45.959
但是
这有一个很重要的例外

00:03:46.326 --> 00:03:48.629
如果你的应用
可改写HealthKit类型

00:03:48.695 --> 00:03:51.698
那么你可以回读
你的应用所写的内容

00:03:51.765 --> 00:03:53.400
只是不能读
其他来源的数据

00:03:55.369 --> 00:03:57.104
最后 如果用户拒绝

00:03:57.171 --> 00:03:59.339
对某个类型
所有读和写的权限

00:03:59.406 --> 00:04:01.909
那你就既不能查询
也不能保存这个类型

00:04:02.709 --> 00:04:05.279
最后这一点
会产生重要的影响

00:04:05.412 --> 00:04:09.183
如果用户拒绝了
之前授权给应用的许可

00:04:09.583 --> 00:04:11.752
那么你的应用
就无法再读取任何

00:04:11.818 --> 00:04:13.220
这个HealthKit类型的数据

00:04:13.387 --> 00:04:17.024
即便是你的应用之前写的数据
一定要牢记这一点

00:04:21.195 --> 00:04:22.863
以上就是所有的技术回顾

00:04:22.930 --> 00:04:26.667
但是这里iOS X的授权
有个重要的变化

00:04:26.733 --> 00:04:28.769
它与使用说明相关

00:04:30.070 --> 00:04:34.174
iOS X及以后版本的应用
必须为用户提供一个说明

00:04:34.241 --> 00:04:36.210
说明他们为什么要
访问健康数据

00:04:36.643 --> 00:04:39.546
这也是再次强调了我们的原则
就是用户控制数据

00:04:41.348 --> 00:04:45.118
使用说明应当在
应用的info.plist文件中声明

00:04:45.185 --> 00:04:48.488
为NSHealthShareUsageDescription验证码

00:04:48.555 --> 00:04:49.590
这是读取数据的时候

00:04:50.324 --> 00:04:53.460
或者声明为NSHealthUpdateUsageDescription
在改写数据的时候

00:04:56.129 --> 00:04:58.799
换个画面
来看看你如何请求授权

00:04:59.766 --> 00:05:02.402
第一件事
是保证HealthKit

00:05:02.469 --> 00:05:04.071
可用于当前设备

00:05:04.137 --> 00:05:07.107
比如说
iPad上的应用就不行

00:05:07.875 --> 00:05:09.243
建好这个之后

00:05:09.409 --> 00:05:12.179
我们列举一些类型
是我们想要读取和改写的

00:05:12.813 --> 00:05:14.781
最后
调出requestAuthorization

00:05:14.848 --> 00:05:17.718
在HK Health Store里
传递我们感兴趣的类型

00:05:17.784 --> 00:05:19.686
然后处理反馈
并回调

00:05:23.123 --> 00:05:24.458
watchOS应用怎么办？

00:05:25.125 --> 00:05:27.594
授权可以共享于
你的iOS应用

00:05:27.661 --> 00:05:29.129
和匹配的watchOS应用

00:05:29.463 --> 00:05:31.665
请求授权
可以随时进行

00:05:31.732 --> 00:05:33.634
通过iOS代码
或者watchOS代码

00:05:34.434 --> 00:05:36.503
但是 系统授权UI

00:05:36.570 --> 00:05:38.772
只能显示于
用户的手机上

00:05:39.039 --> 00:05:41.441
因此这就造成了
重要的可用性问题

00:05:42.609 --> 00:05:45.412
比如
用户准备开始锻炼

00:05:45.479 --> 00:05:47.714
他们可能已经
把手机绑在了臂带上

00:05:47.781 --> 00:05:48.782
如果是这样

00:05:49.183 --> 00:05:52.152
他们很难允许
你的应用发出的授权请求

00:05:52.219 --> 00:05:55.322
所以这就不是
请求初始授权的好时机

00:05:57.457 --> 00:05:59.259
但是还有一个更麻烦的情况

00:05:59.860 --> 00:06:02.996
如果用户使用Watch应用
手机可能根本不在身边

00:06:03.063 --> 00:06:03.931
这样的话

00:06:04.031 --> 00:06:06.266
请求表单
甚至都无法显示

00:06:06.934 --> 00:06:09.536
因此我们建议你
实际考虑一下这些问题

00:06:09.603 --> 00:06:11.371
在开发Watch应用的时候

00:06:12.439 --> 00:06:15.876
同样要记住
请求授权调令的反馈时间

00:06:15.943 --> 00:06:16.844
没有保证

00:06:16.910 --> 00:06:20.347
所以在等待反馈的时候
一定不要阻碍任何UI

00:06:24.551 --> 00:06:28.021
现在重要的是
提供给用户正确的授权体验

00:06:28.488 --> 00:06:29.523
在此之上

00:06:29.590 --> 00:06:33.861
应用可能会请求访问一些
或者很多HealthKit数据类型

00:06:34.094 --> 00:06:36.230
所以就出现了
一个很重要的问题

00:06:36.663 --> 00:06:40.100
什么时候应该请求访问
一些或者所有的数据类型？

00:06:41.435 --> 00:06:43.437
以下是我们的一些建议
针对这个问题

00:06:44.304 --> 00:06:46.707
首先我们建议你
请求访问

00:06:46.773 --> 00:06:48.642
合理的类型集合

00:06:48.709 --> 00:06:51.478
它们要对应
应用的逻辑活动

00:06:52.479 --> 00:06:55.015
比如说你的应用
允许用户监测

00:06:55.082 --> 00:06:57.985
食物摄入量和身体指标
比如BMI

00:06:58.719 --> 00:06:59.553
要是这样

00:06:59.620 --> 00:07:02.256
你要考虑请求访问
营养数据类型

00:07:02.322 --> 00:07:04.224
在第一次用户
记录食物摄入的时候

00:07:04.791 --> 00:07:07.261
然后请求访问
身体指标的数据类型

00:07:07.327 --> 00:07:09.329
在用户每次要
记录它们的时候

00:07:12.232 --> 00:07:13.400
这个规则也有一个例外

00:07:13.467 --> 00:07:15.202
就是当应用有加载流程的时候

00:07:15.602 --> 00:07:17.871
如果是这样
你实际上就要

00:07:17.938 --> 00:07:21.742
请求访问所有
应用要提前使用的数据类型

00:07:22.075 --> 00:07:25.646
因为你现在已经可以
清楚地向用户解释

00:07:25.712 --> 00:07:27.948
你的应用
要用这些类型做什么

00:07:29.383 --> 00:07:32.119
无论你选择哪个类型
我们必须要建议你

00:07:32.186 --> 00:07:34.988
在开发过程中
常常测试授权

00:07:35.556 --> 00:07:38.192
你可以简单的重设
初始授权流程

00:07:38.258 --> 00:07:41.061
通过删除应用
从你的设备或者模拟器上

00:07:41.395 --> 00:07:42.963
在建立和运行之前

00:07:43.063 --> 00:07:44.665
这样HealthKit
就显示给用户

00:07:44.731 --> 00:07:47.067
初始授权流程
从头开始

00:07:49.169 --> 00:07:51.271
这时一定要测试

00:07:51.338 --> 00:07:54.842
授权有没有延迟
或者被用户完全拒绝

00:07:55.475 --> 00:07:57.344
应用在这些情况下如何运行？

00:07:57.711 --> 00:07:59.179
还有更多能力吗？

00:08:01.215 --> 00:08:04.585
最后 如果要用一句话总结授权
那就是

00:08:05.619 --> 00:08:07.154
时刻考虑用户体验

00:08:08.055 --> 00:08:10.257
不要在不合适的时间
显示问题

00:08:10.324 --> 00:08:12.492
并保证你的流程有意义

00:08:16.330 --> 00:08:19.199
我们已经花了很多时间
了解授权

00:08:19.266 --> 00:08:20.767
现在我们来讲一些新特性

00:08:20.834 --> 00:08:23.570
是去年以后HealthKit新出的
从活动环开始吧

00:08:27.040 --> 00:08:30.077
Apple开发了一个很棒的
健康与健美的追踪体验

00:08:30.143 --> 00:08:31.144
在Apple Watch上

00:08:31.845 --> 00:08:34.948
用户喜欢它能简单地
追踪主要的活动规律

00:08:35.015 --> 00:08:36.250
改善他们的生活

00:08:36.450 --> 00:08:38.318
在iOS 10和watchOS 3

00:08:38.385 --> 00:08:41.121
用户甚至可以跟其他人
分享他们的活动环

00:08:41.188 --> 00:08:42.022
可以比赛

00:08:43.690 --> 00:08:45.292
我们提供给你一个很棒的方法

00:08:45.425 --> 00:08:47.528
来融合
这个活动环体验

00:08:47.594 --> 00:08:51.598
到你的应用里
通过iOS 9.3的Activity Rings API

00:08:54.201 --> 00:08:57.504
首先我们要开始
一个HKActivitySummary对象

00:08:59.506 --> 00:09:01.708
HKActivitySummary
代表的是

00:09:02.075 --> 00:09:05.012
在某一天的时间内
用户的活动总量

00:09:05.512 --> 00:09:10.651
这包括了他们的热量消耗
锻炼分钟数和站立小时数

00:09:10.717 --> 00:09:12.152
以及他们设定的每个目标

00:09:15.322 --> 00:09:18.792
HKActivitySummary
是授权的一种独特类型

00:09:19.293 --> 00:09:22.095
它不是HKObject
更像是一个特殊的只读类型

00:09:22.162 --> 00:09:25.432
是你单独从组件类型
请求的授权

00:09:26.667 --> 00:09:28.268
最后这一部分
十分重要

00:09:29.603 --> 00:09:32.840
HKActivitySummary
包含了一些HealthKit信息

00:09:32.906 --> 00:09:35.209
与HealthKit类型相同：
活动能量

00:09:35.475 --> 00:09:37.544
锻炼分钟数
和站立小时数

00:09:38.612 --> 00:09:41.014
但这些都是以天为单位累加

00:09:41.181 --> 00:09:43.383
所以
如果你想要做得

00:09:43.450 --> 00:09:45.485
更具体些 比如...

00:09:46.987 --> 00:09:50.324
更改用户的Move ring
通过改写活动能量的数据类型

00:09:50.691 --> 00:09:52.659
或者显示精细粮食数据

00:09:52.726 --> 00:09:54.628
给这一天的活动

00:09:55.095 --> 00:09:57.030
这样的话
你就需要请求

00:09:57.097 --> 00:09:58.932
单独访问每个成分类型

00:10:00.901 --> 00:10:03.937
由于ActivitySummary
对象代表的活动

00:10:04.004 --> 00:10:05.806
是某一天内的活动

00:10:05.873 --> 00:10:09.343
它可能 或许不能
对应24小时的时间段

00:10:09.910 --> 00:10:12.546
所以我们要指定
对应活动小结的日期

00:10:12.613 --> 00:10:14.281
通过使用
DateComponents对象

00:10:15.015 --> 00:10:17.050
那要怎么做
就看下面这个例子

00:10:21.922 --> 00:10:24.992
假设我们想要获取
今天的活动小结

00:10:25.526 --> 00:10:28.328
那么就要使用
HKActivitySummaryQuery

00:10:29.863 --> 00:10:31.465
首先让日历

00:10:31.532 --> 00:10:34.468
对应今天创建
DateComponents对象

00:10:34.868 --> 00:10:39.540
使用规定的组件
时代 年 月 日

00:10:41.241 --> 00:10:44.077
接下来用这些组件
创建一个predicate对象

00:10:44.178 --> 00:10:46.880
这将我们的查询
控制在活动小结里

00:10:46.947 --> 00:10:48.415
日期与今天对应

00:10:49.783 --> 00:10:52.886
最后创建query
传递给predicate

00:10:53.153 --> 00:10:55.956
之后在这种情况下
处理单一的活动小结

00:10:56.023 --> 00:10:57.724
这会返回一个值

00:11:01.161 --> 00:11:03.363
以上就是如何
获取活动小结数据

00:11:03.430 --> 00:11:05.966
但是最有意思的部分
是显示环本身

00:11:06.033 --> 00:11:09.269
要做这个 我们要使用iOS的
HKActivityRingView

00:11:09.770 --> 00:11:13.841
或watchOS上类似的
WKInterfaceActivityRing

00:11:14.641 --> 00:11:15.742
外观是这样

00:11:15.809 --> 00:11:18.712
就像你想的那样
它们用漂亮的动画来显示

00:11:18.779 --> 00:11:21.248
调出setActivitySummary
就能动了

00:11:24.785 --> 00:11:28.856
下面讲几个使用HKActivityRingView
和WKInterfaceActivityRing的技巧

00:11:30.224 --> 00:11:33.827
首先就像iOS和watchOS上的
健康和活动的应用那样

00:11:34.561 --> 00:11:36.330
这个环在黑色背景上
最好看

00:11:36.396 --> 00:11:39.066
所以我们建议
你的应用也用类似的显示

00:11:40.968 --> 00:11:43.937
第二 如果你的应用有
分享和交流的功能

00:11:44.004 --> 00:11:47.140
可以使用
HKActivitySummary的可写属性

00:11:47.307 --> 00:11:48.775
来架构你自己的对象

00:11:49.076 --> 00:11:53.080
并提供给HKActivityRingView
或者WKInterfaceActivityRing

00:11:53.480 --> 00:11:55.449
这样就会显示
另一个用户的环形图

00:11:55.516 --> 00:11:57.784
紧挨当前用户的环形图
在你自己的应用里

00:12:00.354 --> 00:12:02.956
最后 当你使用
HKActivitySummaryQuery

00:12:03.023 --> 00:12:05.259
记住要使用
规定的DateComponents

00:12:05.325 --> 00:12:09.263
时代 年 月 日
在你的HKActivitySummaryQuery里

00:12:11.098 --> 00:12:12.766
时间映射有时十分复杂

00:12:12.833 --> 00:12:16.170
所以如果你有任何使用日历或
DateComponents的问题

00:12:16.236 --> 00:12:19.106
请参考上一次会议的精彩演讲

00:12:22.843 --> 00:12:25.579
讲了很多关于
授权和Activity Rings的信息

00:12:25.646 --> 00:12:27.514
现在来实际操作
通过快速的演示

00:12:28.448 --> 00:12:30.784
在右边
有一个越来越流行的应用

00:12:30.851 --> 00:12:32.619
是给医疗小组用的
叫做LoopHealth

00:12:33.287 --> 00:12:34.555
这个应用有不一样的功能

00:12:34.621 --> 00:12:37.424
但主界面都是dashboard
里面有些很有用的信息

00:12:37.491 --> 00:12:39.726
比如说
你的医生名字

00:12:39.793 --> 00:12:42.196
最近的预约
以及一些健康知识

00:12:43.564 --> 00:12:47.067
LoopHealth希望他们的病人
每天生活得更健康

00:12:47.134 --> 00:12:50.571
所以他们看到了一个好机会
就是能把Apple的Activity Rings

00:12:50.637 --> 00:12:51.905
带入他们的界面

00:12:52.739 --> 00:12:54.441
这里你看到
我们已经把

00:12:54.508 --> 00:12:57.945
一个HKActivityRingView
融入了应用的storyboard里

00:12:58.245 --> 00:13:00.781
但是我们还没有写一个代码
来链接到这个数据

00:13:00.981 --> 00:13:02.482
让我们看看
这有多简单

00:13:02.950 --> 00:13:06.086
在Xcode里
有个DashboardViewController

00:13:06.153 --> 00:13:08.388
这个视图控制器
是我们刚刚

00:13:08.589 --> 00:13:09.590
在LoopHealth里看到的

00:13:10.357 --> 00:13:11.491
现在这里很空

00:13:11.925 --> 00:13:13.927
但是我们的确有些
有用的信息可填

00:13:14.595 --> 00:13:16.496
你看到这里
有一个IBOutlet

00:13:16.763 --> 00:13:19.800
被设置连接到应用里已有的
activityRingView

00:13:21.134 --> 00:13:23.303
这里我们导入HealthKitUI

00:13:23.370 --> 00:13:24.838
这是一个新的框架

00:13:24.905 --> 00:13:27.741
可在iOS的
HKActivityRingView里找到

00:13:29.176 --> 00:13:30.644
最后在这个下面

00:13:30.711 --> 00:13:34.448
LoopHealth在应用代理中
设置了适用于全应用的HKHealthStore

00:13:34.515 --> 00:13:36.783
所以我们只要设置
一个简单的计算属性

00:13:36.850 --> 00:13:38.919
能方便我们检索
需要的东西

00:13:41.288 --> 00:13:44.157
好的 如果我们想要
在应用中显示活动小结

00:13:44.224 --> 00:13:46.827
第一件事就是
请求可读许可

00:13:46.894 --> 00:13:48.228
给HKActivitySummary

00:13:49.196 --> 00:13:50.664
鉴于我们在读取健康数据

00:13:50.731 --> 00:13:53.100
所以我们需要
包含一个使用说明

00:13:53.267 --> 00:13:54.968
那么就让我们去
info.plist文件

00:13:56.336 --> 00:13:57.437
添加一个新的key

00:13:58.972 --> 00:14:02.276
我们需要的这个key叫做
NSHealthShareUsageDescription

00:14:02.342 --> 00:14:05.479
这里用简易英语写着
Privacy Health Share

00:14:09.383 --> 00:14:13.754
很好 然后只要加入
一个简单的使用说明

00:14:13.820 --> 00:14:14.655
设置全部完成

00:14:15.722 --> 00:14:17.791
现在就可以回到
DashboardViewController

00:14:17.858 --> 00:14:20.661
再写代码
实际请求授权

00:14:21.828 --> 00:14:24.698
由于我们想让这个初始画面
能立刻显示给用户

00:14:24.765 --> 00:14:28.101
而每次用户转到dashboard的时候
都要更新环形图

00:14:28.168 --> 00:14:31.138
要做这个最好是在
viewDidAppear方法里

00:14:33.240 --> 00:14:34.341
那么我把它拉到这里

00:14:35.609 --> 00:14:37.411
在调出super后

00:14:37.611 --> 00:14:40.881
注意我们在HKHealthStore上调出
RequestAuthorization

00:14:41.381 --> 00:14:43.016
传递进activitySummaryType

00:14:43.684 --> 00:14:46.887
然后作为返回
调出updateActivitySummary

00:14:47.654 --> 00:14:50.157
是为了真正获取
并更新数据

00:14:50.224 --> 00:14:51.491
现在就来执行这个代码吧

00:14:55.996 --> 00:14:58.432
这就是
updateActivitySummary的基本构成

00:14:58.799 --> 00:15:00.100
我们这里要做的

00:15:00.167 --> 00:15:03.170
是创建一个
HKActivitySummaryQuery

00:15:03.770 --> 00:15:05.873
请求今天的活动小结

00:15:05.939 --> 00:15:09.409
然后把这个活动小结定义到
HKActivityRingView

00:15:09.543 --> 00:15:10.410
在收到这个小结后

00:15:11.678 --> 00:15:14.848
首先 对应今天 创建一个
DateComponents对象

00:15:16.450 --> 00:15:19.887
由于DateComponents
只作用于一个特定的日历

00:15:19.953 --> 00:15:22.089
我们就要把
需要的日历对象

00:15:22.789 --> 00:15:24.424
放回组件对象

00:15:26.393 --> 00:15:27.528
呃 好了

00:15:28.362 --> 00:15:31.398
下面来创建predicate
通过那个组件对象

00:15:33.433 --> 00:15:36.403
一旦有了这个predicate
就可以创建query

00:15:36.470 --> 00:15:39.339
传递给predicate
然后在返回中

00:15:39.406 --> 00:15:42.142
获取今天的活动小结

00:15:44.611 --> 00:15:46.146
现在只要有了这个小结

00:15:46.213 --> 00:15:49.550
我们要做的就是调度回主队列
更新UI

00:15:51.351 --> 00:15:56.156
然后调出setActivitySummary
让活动环变成动画视图

00:15:57.891 --> 00:16:01.061
现在有了query
剩下的就是去执行

00:16:03.864 --> 00:16:04.765
就这么多

00:16:05.365 --> 00:16:07.901
那么让我们来
运行看看怎么样

00:16:23.684 --> 00:16:25.352
很好
那么你看到的第一个东西

00:16:25.419 --> 00:16:28.121
是我们在请求访问
活动小结

00:16:28.388 --> 00:16:31.091
Health正请求用户
允许授权

00:16:33.493 --> 00:16:35.762
我们允许它读取
活动数据类型

00:16:35.829 --> 00:16:37.965
这个时候
注意下屏幕底部

00:16:38.031 --> 00:16:40.501
有个使用说明
是为读取健康数据时添加的

00:16:40.567 --> 00:16:42.035
现在就在这里
显示给用户了

00:16:42.536 --> 00:16:44.338
值得注意的是
在一个真正的应用里

00:16:44.404 --> 00:16:46.173
我们要确保
这个说明已经本地化

00:16:46.240 --> 00:16:49.343
所以我们要把它放进
info.plist.strings文件

00:16:51.912 --> 00:16:53.514
我要在这里允许授权

00:16:55.749 --> 00:16:57.484
就像这样
我们看到这个活动环

00:16:57.551 --> 00:16:59.086
就在合适的地方
漂亮的动起来

00:17:09.096 --> 00:17:10.063
就是这么简单

00:17:10.130 --> 00:17:12.332
就将活动环加入了
你的应用

00:17:12.398 --> 00:17:13.934
一定要检查API

00:17:14.601 --> 00:17:16.637
下面 我把舞台交给
我的同事Jeff

00:17:16.703 --> 00:17:19.573
他会为你们讲述
一个 iOS X最棒的新功能

00:17:25.979 --> 00:17:26.813
谢谢你 Matt

00:17:27.181 --> 00:17:28.281
大家早上好

00:17:28.649 --> 00:17:30.117
我是Joefrey Kibuule

00:17:30.584 --> 00:17:31.752
与Matt是同事

00:17:31.818 --> 00:17:34.054
我是iOS软件工程师
在Health团队工作

00:17:34.855 --> 00:17:37.424
今天我很感到很自豪
来为你们介绍

00:17:37.491 --> 00:17:39.393
iOS 10的一个新功能

00:17:39.626 --> 00:17:40.527
健康记录

00:17:41.328 --> 00:17:43.864
健康记录提供了
一个简单便携的方法

00:17:43.931 --> 00:17:46.500
让你的私人信息
能随你而动

00:17:47.100 --> 00:17:48.268
就在你的手机上

00:17:50.237 --> 00:17:51.939
由现在的经验来看

00:17:52.005 --> 00:17:54.842
如果用户去看医生

00:17:54.908 --> 00:17:57.644
并要健康记录的话
拿到的是这个

00:17:58.712 --> 00:18:00.981
一大叠文件
这会很麻烦

00:18:01.281 --> 00:18:03.584
如果你想从中
找一个特定的信息的话

00:18:05.319 --> 00:18:06.153
再近一点的时间

00:18:06.220 --> 00:18:09.289
健康机构
会给病人提供这个

00:18:10.224 --> 00:18:14.494
存有电子信息的光盘
使用起来不直观

00:18:17.197 --> 00:18:21.401
但现在iOS有了健康记录
我们就能解决这个问题

00:18:23.937 --> 00:18:26.106
通过我们的努力
推出的这个功能

00:18:26.273 --> 00:18:28.942
为你的应用
开启了新的可能

00:18:29.676 --> 00:18:31.979
尤其是与健康记录的
交流与互动

00:18:34.448 --> 00:18:37.751
事实上在美国
使用这些API

00:18:37.818 --> 00:18:40.988
可以帮助健康机构
遵守新的规定

00:18:41.455 --> 00:18:45.392
就是要求他们给病人更多权利
掌握他们自己的健康数据

00:18:48.161 --> 00:18:49.830
首先
做个概述

00:18:50.564 --> 00:18:53.500
iOS健康记录
是一个涵盖性术语

00:18:53.600 --> 00:18:56.036
代表的是
各种不同病人就诊信息

00:18:56.236 --> 00:18:58.172
由健康机构生成

00:18:59.873 --> 00:19:03.110
今天我们特别为
健康档案添加了支持

00:19:04.545 --> 00:19:08.849
用标准的机器可读的XML
代表特定的病人就诊信息

00:19:10.017 --> 00:19:11.151
这些包括

00:19:11.518 --> 00:19:12.719
病人就诊总结

00:19:13.453 --> 00:19:15.022
持续护理记录

00:19:15.422 --> 00:19:18.058
以及手术记录
还有很多

00:19:19.927 --> 00:19:23.030
我们支持
国际HL-7 CDA标准

00:19:23.096 --> 00:19:26.066
来完成
与大量不同提供者的互操作

00:19:28.435 --> 00:19:32.306
这些文件可以
在病人的在线健康门户里找到...

00:19:32.973 --> 00:19:37.911
并且能通过Safari和邮件导入
现在所有应用都可以导入了

00:19:39.947 --> 00:19:43.517
这些文件的保存
跟其他HealthKit数据一样

00:19:44.351 --> 00:19:47.855
安全的加密在
你的iOS设备上

00:19:49.957 --> 00:19:52.025
接下来
我们讲讲许可

00:19:53.093 --> 00:19:56.563
由于每份健康文件里
都包含着大量的信息

00:19:56.897 --> 00:20:01.568
相比于HealthKit的其他数据类型
我们给用户更多的控制力

00:20:02.903 --> 00:20:05.639
访问许可
是基于每个文件的

00:20:05.706 --> 00:20:07.808
不仅仅是
健康文件数据类型

00:20:10.210 --> 00:20:11.945
在右边你看到

00:20:12.012 --> 00:20:14.081
我们显示的这个UI
可以让用户

00:20:14.147 --> 00:20:17.885
在授权你的应用之前
浏览和选择文件

00:20:20.187 --> 00:20:22.856
这个UI会出现在
任何你想查询文件的时候

00:20:22.923 --> 00:20:24.258
以及有新文件可用的时候

00:20:25.559 --> 00:20:26.727
如果要查询文件

00:20:27.528 --> 00:20:29.162
并且没有任何更改

00:20:30.631 --> 00:20:32.699
我们就不会
显示这个UI给用户

00:20:32.766 --> 00:20:35.502
那么你的查询
就会立刻返回结果

00:20:41.508 --> 00:20:42.676
如果查询文件是在

00:20:42.743 --> 00:20:44.878
应用在后台运行的时候

00:20:45.879 --> 00:20:49.416
我们永远不会弹出UI
来授权新文件的许可

00:20:50.017 --> 00:20:52.386
HealthKit确保了
用户总是知道

00:20:52.452 --> 00:20:54.888
他们何时授予你的应用
访问文件的权限

00:20:55.289 --> 00:20:56.423
在第一次需要授权的时候

00:20:59.193 --> 00:21:01.995
下面来讲讲
如何在HealthKit创建文件

00:21:04.531 --> 00:21:07.534
要保存文件到HealthKit
你可保存一个原始XML

00:21:07.601 --> 00:21:10.971
到新的
HKCDADocumentSample类型

00:21:12.873 --> 00:21:16.243
我们会验证创建
以保证它符合标准

00:21:16.510 --> 00:21:18.779
并且会在
失败的时候报错

00:21:21.748 --> 00:21:26.954
我们会自动提取
标题 病人 监护人和作者名字

00:21:27.020 --> 00:21:29.089
无论何时文件被
保存到HealthKit

00:21:29.223 --> 00:21:32.159
以便更快的查询这些区域

00:21:32.392 --> 00:21:34.394
而不需要读取整个文件

00:21:35.996 --> 00:21:38.065
我们来看看
这个例子的代码

00:21:38.899 --> 00:21:42.135
我们要用documentData
并转换为Data对象

00:21:42.603 --> 00:21:44.371
通常这个XML的来源

00:21:44.438 --> 00:21:46.273
是一个健康机构的服务器

00:21:47.574 --> 00:21:50.677
接着就要创建一个新的
HKCDADocumentSample

00:21:50.744 --> 00:21:52.346
传递到Data对象

00:21:52.913 --> 00:21:54.581
定义合适的日期

00:21:55.048 --> 00:21:58.218
和任何附加元数据
跟其他HKSample一样

00:21:59.553 --> 00:22:02.122
之后我们要保存这个文件
到healthStore

00:22:02.823 --> 00:22:03.657
完成了

00:22:03.924 --> 00:22:06.560
现在你的健康文件
就保存到HealthKit里了

00:22:06.627 --> 00:22:08.228
并可以在其他应用上使用

00:22:08.295 --> 00:22:10.564
或者直接让用户
用Health应用浏览

00:22:13.267 --> 00:22:16.069
现在 我们来讲讲
如何在HealthKit里查询文件

00:22:17.771 --> 00:22:21.542
鉴于HKCDADocumentSample
是HKSample的子类

00:22:22.376 --> 00:22:24.912
现有的查询对象
对你来说已经很熟悉

00:22:24.978 --> 00:22:26.947
它们会继续运行
跟你想的一样

00:22:28.215 --> 00:22:30.651
但是 你要使用新的
HKDocumentQuery

00:22:30.717 --> 00:22:32.419
去获取原始的XML

00:22:32.886 --> 00:22:34.454
获取原始XML成本很高

00:22:34.521 --> 00:22:37.057
我们只在有明确要求时 才这么做

00:22:39.793 --> 00:22:41.728
我们提供predicate支持

00:22:41.795 --> 00:22:44.431
以便查询自动提取的域

00:22:47.734 --> 00:22:49.369
最后 要记住

00:22:49.903 --> 00:22:52.206
由于HKDocumentSamples
不可更改

00:22:52.272 --> 00:22:56.443
对之前样本的更改信息
被看作新的样本

00:22:58.745 --> 00:23:00.113
现在我们看个例子

00:23:00.180 --> 00:23:02.449
如何查询
HealthKit里的文件

00:23:02.783 --> 00:23:05.252
在这个例子里
我们要查询

00:23:05.319 --> 00:23:06.420
用户保存的所有文件

00:23:07.821 --> 00:23:09.690
首先我们要获得
documentType

00:23:09.790 --> 00:23:12.159
我们要传递
CDA identifier给

00:23:12.226 --> 00:23:15.796
HKObjectType上的
forIdentifier方法

00:23:18.298 --> 00:23:20.501
再创建
HKDocumentQuery

00:23:21.268 --> 00:23:24.338
你要留出额外字段
用来筛选和排列文件

00:23:24.404 --> 00:23:26.707
让它们按照你想要的顺序返回

00:23:27.908 --> 00:23:29.443
然后执行查询

00:23:29.510 --> 00:23:32.045
以便获取
HKCDADocumentSamples

00:23:32.112 --> 00:23:33.080
从HealthKit返回

00:23:35.215 --> 00:23:37.584
我要强调一点
在这个特定的例子里

00:23:37.651 --> 00:23:40.020
就是includeDocumentData定义为假

00:23:40.254 --> 00:23:41.755
要定义为真

00:23:41.822 --> 00:23:44.491
只能在你需要
完整原始XML文件数据的时候

00:23:47.594 --> 00:23:49.596
现在我们来讲一些
最佳的操作

00:23:49.663 --> 00:23:52.232
在处理HealthKit健康文件时

00:23:53.433 --> 00:23:55.235
首先 检查验证错误

00:23:55.302 --> 00:23:58.105
在每次创建KCDADocumentSample的时候

00:23:59.439 --> 00:24:01.975
这个报错告诉你
我们为何不能转换

00:24:02.042 --> 00:24:04.545
原始XML到可用样本

00:24:07.181 --> 00:24:09.149
下面 你要用Health应用验证

00:24:09.216 --> 00:24:12.619
你导入的文件是否正确保存

00:24:12.686 --> 00:24:14.955
以及自动提取的域是否存在

00:24:15.722 --> 00:24:16.723
这样你就知道

00:24:16.790 --> 00:24:19.293
基于这些自动提取域的查询

00:24:19.359 --> 00:24:21.395
所返回的正确样本
是否符合你的预期

00:24:23.330 --> 00:24:26.800
最后请求原始XML数据
只能在必要的时候

00:24:27.134 --> 00:24:30.204
不发出请求的查询
包括文件数据

00:24:30.871 --> 00:24:33.106
会返回
自动提取的域

00:24:33.173 --> 00:24:35.676
这可能是所有你
和你用户所需要的

00:24:35.742 --> 00:24:37.945
用来唯一识别
HealthKit文件的工具

00:24:40.347 --> 00:24:43.183
要了解更多
HL-7 CDA标准的信息

00:24:43.250 --> 00:24:44.618
请访问屏幕上的这个链接

00:24:48.689 --> 00:24:50.157
现在我们来换个话题

00:24:50.224 --> 00:24:52.459
给大家一些处理数据的基本指南

00:24:55.996 --> 00:24:58.665
你知道 HealthKit实际上
是个中央存储库

00:24:58.732 --> 00:25:01.702
在这里你的应用和其他应用
可以帮助用户

00:25:01.768 --> 00:25:03.570
管理他的健康记录数据

00:25:05.205 --> 00:25:06.540
你在云服务上的应用

00:25:06.607 --> 00:25:09.743
也许能直接连接到
云服务上的其他应用

00:25:10.110 --> 00:25:12.646
这时就需要一些特别的考虑

00:25:13.213 --> 00:25:16.016
这里我主要探讨三点

00:25:16.083 --> 00:25:17.618
有关数据处理的问题

00:25:18.652 --> 00:25:20.187
第一 同步数据

00:25:21.054 --> 00:25:23.123
第二 追踪更改的数据

00:25:23.891 --> 00:25:26.193
第三 数据迁移

00:25:27.427 --> 00:25:29.162
先看第一点 数据同步

00:25:30.163 --> 00:25:32.399
你要一直使用
HKAnchoredObjectQuery

00:25:32.466 --> 00:25:36.069
以便用户处理
新样本和已删除的样本

00:25:36.136 --> 00:25:38.038
从而与HealthKit更新一致

00:25:39.740 --> 00:25:41.875
Anchor像一个书签
来标记

00:25:41.942 --> 00:25:44.211
最后一次请求查询
以获取数据

00:25:44.778 --> 00:25:45.946
你可以保存这个anchor

00:25:46.013 --> 00:25:49.183
方便下一次创建
新的HKAnchoredObjectQuery

00:25:51.518 --> 00:25:53.520
你可以给每个样本类型
开放一个查询

00:25:53.587 --> 00:25:54.755
只要你感兴趣

00:25:55.822 --> 00:25:57.824
然后传递一个备选的更新处理器

00:25:57.891 --> 00:26:01.228
以便持续处理
新样本和删除的样本

00:26:01.295 --> 00:26:03.797
不需要重复查询HealthKit

00:26:05.299 --> 00:26:07.701
但是 要是为了更好的用户体验

00:26:07.868 --> 00:26:11.171
为了在应用第一次启动时
能显示新的UI

00:26:11.438 --> 00:26:13.974
或者是为了让你的云数据保持同步

00:26:14.575 --> 00:26:17.878
那么应用必须也要处理
新样本和删除的样本

00:26:17.945 --> 00:26:19.646
即使当前不在运行状态

00:26:20.447 --> 00:26:22.416
这就是
HKObserverQuery

00:26:22.482 --> 00:26:25.285
和HKAnchoredObjectQuery
一起发挥作用的地方

00:26:26.420 --> 00:26:28.322
我们来看一个图表例子

00:26:30.757 --> 00:26:32.793
那么这里有四个主要步骤

00:26:33.527 --> 00:26:35.229
来处理后台更新

00:26:35.295 --> 00:26:37.097
分为两个阶段

00:26:37.464 --> 00:26:38.966
设置和执行

00:26:39.700 --> 00:26:40.968
第一步

00:26:41.034 --> 00:26:43.203
注册后台更新

00:26:43.337 --> 00:26:46.306
这要用于
每个你要操作的样本类型

00:26:47.040 --> 00:26:50.177
第二步
打开ObserverQuery

00:26:51.078 --> 00:26:51.912
设置完成后

00:26:52.880 --> 00:26:54.381
ObserverQuery同时监测

00:26:54.448 --> 00:26:56.617
HealthKit里的
新样本和删除的样本

00:26:59.152 --> 00:27:02.222
当新样本生成时
你就要开始第三步

00:27:02.689 --> 00:27:04.691
你会从observerQuery
收到一个回调

00:27:04.758 --> 00:27:06.960
然后执行
HKAnchoredObjectQuery

00:27:07.027 --> 00:27:09.463
来获取新样本
和已删除的样本

00:27:11.298 --> 00:27:12.666
那么第四步

00:27:13.300 --> 00:27:15.402
调出observerQuery的
完成处理器

00:27:15.469 --> 00:27:16.637
以便告诉HealthKit

00:27:16.703 --> 00:27:19.406
你已经完成对
后台更新的处理和传送

00:27:20.407 --> 00:27:23.277
接着你会继续循环
第三步和第四步

00:27:23.343 --> 00:27:25.212
以便与HealthKit保持更新

00:27:28.849 --> 00:27:32.452
现在 我们来一步一步看代码

00:27:33.887 --> 00:27:37.257
第一步
要注册后台更新

00:27:37.558 --> 00:27:40.194
每次启动应用的时候
都必须这么做

00:27:40.260 --> 00:27:44.198
所以我们建议你在应用中写
didFinishLaunchingWithOptions

00:27:45.599 --> 00:27:48.702
然后你从HKObjectType
获取step的quantityType

00:27:49.703 --> 00:27:52.840
然后传递给HK Health Store的
enableBackgroundDelivery

00:27:52.906 --> 00:27:56.410
以便传递stepsType
以及你想要更新的频率

00:27:57.444 --> 00:28:00.514
请注意
后台传输时间没有保证

00:28:03.383 --> 00:28:06.954
应用要选择
它能处理的最长频率

00:28:07.120 --> 00:28:09.790
以便保护
用户的电池寿命

00:28:11.091 --> 00:28:14.061
还要注意的是
这个API是iOS特定的

00:28:14.428 --> 00:28:17.231
后台更新
在watchOS上不可用

00:28:19.766 --> 00:28:20.601
第二步

00:28:20.667 --> 00:28:22.436
传递
step的quantityType

00:28:22.503 --> 00:28:25.739
创建HKObserverQuery

00:28:27.407 --> 00:28:29.743
这里有
自定义的updateSteps方法

00:28:30.077 --> 00:28:32.412
我们可以用它来获取

00:28:32.679 --> 00:28:35.649
HealthKit检测到的
新样本和删除的样本

00:28:36.350 --> 00:28:38.218
之后就要
执行这个查询

00:28:39.052 --> 00:28:41.221
就这样
设置阶段完成了

00:28:41.288 --> 00:28:44.525
HealthKit就可以监测
HealthKit中的新样本和已删除的样本

00:28:45.425 --> 00:28:46.260
那么...

00:28:46.360 --> 00:28:49.062
在我走过舞台
生成健康样本

00:28:49.763 --> 00:28:50.764
是步数样本的时候

00:28:53.233 --> 00:28:55.669
我们深入了解一下
updateSteps方法

00:28:55.736 --> 00:28:57.171
好让我们知道要如何做

00:28:57.237 --> 00:28:59.139
才能获取新样本和删除的样本

00:28:59.573 --> 00:29:02.509
首先来创建
一个HKAnchoredObjectQuery

00:29:02.943 --> 00:29:04.144
传递给stepsType

00:29:04.478 --> 00:29:07.481
同样有一个predicate
是额外字段

00:29:07.548 --> 00:29:10.784
让你能筛选出
你想要的那个样本

00:29:13.520 --> 00:29:15.255
然后调出
handleSteps方法

00:29:15.322 --> 00:29:17.658
以处理
新样本和删除的样本

00:29:21.395 --> 00:29:22.496
更新anchor

00:29:22.563 --> 00:29:25.499
以便下一次创建
HKAnchoredObjectQuery

00:29:27.434 --> 00:29:29.703
然后调出
completionHandler

00:29:29.770 --> 00:29:32.406
宣布获取新数据进程已完成

00:29:34.741 --> 00:29:36.076
之后执行查询

00:29:37.511 --> 00:29:39.246
最后 第四步

00:29:39.313 --> 00:29:42.783
调出completionHandler
这是observerQuery给我们的

00:29:43.617 --> 00:29:45.853
是为了让HealthKit知道
我们已经收到

00:29:45.919 --> 00:29:48.088
并且处理了后台更新

00:29:48.589 --> 00:29:49.423
就是这样

00:29:49.489 --> 00:29:52.092
现在你的应用启动时
就会有新的UI

00:29:52.192 --> 00:29:53.861
然后同步云数据

00:29:54.828 --> 00:29:56.296
按照这些步骤

00:29:58.899 --> 00:30:01.201
下面来讲讲追踪更改数据

00:30:02.002 --> 00:30:03.470
你要使用UUID

00:30:03.537 --> 00:30:06.039
来追踪唯一的HKObjects

00:30:10.410 --> 00:30:13.680
独特的识别符要定义在
每次创建对象的时候

00:30:13.747 --> 00:30:15.782
而且要一直存在于
这个样本的生命周期

00:30:17.951 --> 00:30:19.853
将UUID记录到
你的个人数据库

00:30:19.920 --> 00:30:20.754
或者...

00:30:21.221 --> 00:30:24.124
同时存到本地设备
和云端

00:30:24.191 --> 00:30:26.994
这样你就能知道
哪个样本是一样的

00:30:28.662 --> 00:30:33.166
当样本被删除的时候
以Health应用的锻炼为例

00:30:33.834 --> 00:30:36.470
你要一直监测这些更改

00:30:36.570 --> 00:30:38.172
以确保那些相同样本
也会被删掉

00:30:38.238 --> 00:30:41.008
同样也是在本地设备
和远程云端

00:30:43.911 --> 00:30:48.482
还要保证以后的同步操作
不会重新添加这些已经删除的样本

00:30:50.551 --> 00:30:53.287
这可能会产生两个问题
我要重点讲一下

00:30:53.353 --> 00:30:56.723
关于如何避免重复

00:30:57.391 --> 00:30:59.526
第一个就是预填充数据

00:30:59.860 --> 00:31:02.529
预填充数据是
抱歉 加载

00:31:03.030 --> 00:31:05.732
预填充数据是一个好方法
让你在加载过程中

00:31:05.799 --> 00:31:07.935
节省用户的时间
通过拉取那些

00:31:08.001 --> 00:31:09.837
已存在HealthKit里的信息

00:31:11.471 --> 00:31:13.473
用户可以验证数据

00:31:13.540 --> 00:31:16.243
在HealthKit里
需要的话也可更改

00:31:17.911 --> 00:31:20.681
但是问题在于
如何保存未更改的值

00:31:21.782 --> 00:31:25.152
要保证再次保存数据
是用户的意愿

00:31:28.856 --> 00:31:32.826
另外一个潜在的问题
就是数据摄取

00:31:32.893 --> 00:31:34.661
无论从其他应用
还是HealthKit

00:31:35.929 --> 00:31:38.398
记住只能选择
同一个来源的信息

00:31:38.465 --> 00:31:40.701
并且最适合你的应用

00:31:41.568 --> 00:31:45.239
HealthKit有很棒的隐私性
这是我们的用户已经认可的

00:31:45.305 --> 00:31:48.542
但是只有你知道哪个来源
对你的应用最好

00:31:50.978 --> 00:31:53.747
一定不要保存
其他应用的数据

00:31:53.814 --> 00:31:54.815
以他们的名义

00:31:56.183 --> 00:31:59.786
只写一遍你自己的数据
避免重复数据

00:31:59.853 --> 00:32:03.423
通过明确
哪个应用有权编写

00:32:03.991 --> 00:32:06.326
这个规则有一个特别的例外

00:32:06.393 --> 00:32:08.262
有时候复制是有意的

00:32:09.496 --> 00:32:12.065
比如
数据来自多个来源的时候

00:32:13.734 --> 00:32:17.271
步数数据不仅
由用户的手机生成

00:32:17.337 --> 00:32:18.705
还会由Apple Watch生成

00:32:20.974 --> 00:32:25.179
你可以使用HKStatisticsQuery
和HKStatisticsCollectionQuery

00:32:25.245 --> 00:32:28.115
来自动消重

00:32:28.182 --> 00:32:32.252
按照Health应用中
首选数据来源排列

00:32:32.586 --> 00:32:35.522
这样的话
用户体验就会连贯流畅

00:32:35.656 --> 00:32:38.292
健康数据视图
在整个生态环境里都一致

00:32:39.960 --> 00:32:42.062
现在我来讲讲
数据迁移

00:32:42.563 --> 00:32:45.933
假设你发起了
一个新的Bluetooth体温计

00:32:45.999 --> 00:32:47.501
和可把数据写入HealthKit的应用

00:32:48.268 --> 00:32:50.871
你的应用上架App Store
已经几天了

00:32:50.938 --> 00:32:52.673
但是用户发现了一个问题

00:32:53.340 --> 00:32:54.241
在某些情况下

00:32:54.675 --> 00:32:57.778
本来要保存
98华氏度

00:32:58.579 --> 00:33:01.315
实际却存的是
98摄氏度

00:33:01.648 --> 00:33:03.050
这温度有点高

00:33:04.051 --> 00:33:04.885
这种情况下

00:33:04.952 --> 00:33:08.422
我们就知道如何迁移数据
来解决这个问题

00:33:08.822 --> 00:33:11.992
我们首先要
找到旧的样本

00:33:13.560 --> 00:33:14.761
写一个新样本

00:33:14.828 --> 00:33:17.197
一定要更新
存在别处的UUID

00:33:19.099 --> 00:33:20.834
然后删除旧样本

00:33:23.103 --> 00:33:25.606
现在有几个新事项
关于数据流动

00:33:25.672 --> 00:33:27.374
在iPhone和
Apple Watch之间

00:33:28.876 --> 00:33:32.880
从iOS 9.3开始
用户手机产生的数据

00:33:32.946 --> 00:33:35.382
现在会同步于所有
与之匹配的Apple Watch

00:33:35.516 --> 00:33:37.317
Apple Watch现在反映的是

00:33:37.384 --> 00:33:40.954
存在HealthKit里的
最新的健康数据

00:33:42.589 --> 00:33:43.991
为了实现这个任务

00:33:44.291 --> 00:33:46.260
样本会定期修整

00:33:46.326 --> 00:33:49.263
基于其在Apple Watch上的
结束日期

00:33:52.766 --> 00:33:54.201
所以一定要保存样本

00:33:54.268 --> 00:33:57.337
特别是HKHealthStore
最早许可之后的样本数据

00:33:57.871 --> 00:34:00.240
这是为了保证
你的样本能正确地保存

00:34:00.641 --> 00:34:03.110
并同步到用户的设备

00:34:05.279 --> 00:34:07.714
最后
同步的时间没有保证

00:34:08.916 --> 00:34:12.819
所以你的数据要保存在iPhone
或Apple Watch上

00:34:13.387 --> 00:34:14.221
不能两个都存

00:34:18.292 --> 00:34:19.927
我现在把舞台交还给Matt

00:34:19.993 --> 00:34:21.995
由他来最后
总结一下这场演讲

00:34:22.129 --> 00:34:24.498
谢谢大家
好好享受 WWDC 吧

00:34:30.337 --> 00:34:31.170
谢谢你 Jeff

00:34:32.072 --> 00:34:32.906
在总结之前

00:34:33.106 --> 00:34:36.109
我想再着重讲
一个很棒的辅助特性

00:34:36.176 --> 00:34:38.745
这是iOS 10和watchOS 3中
全新的特性

00:34:40.614 --> 00:34:41.614
轮椅辅助

00:34:43.382 --> 00:34:46.553
辅助功能是Apple
十分看重的部分

00:34:47.254 --> 00:34:50.456
所有的用户
都应当享受我们的产品

00:34:50.524 --> 00:34:52.626
和最极致的体验

00:34:53.092 --> 00:34:57.063
这样强大的活动追踪体验
在Apple Watch也不例外

00:34:58.465 --> 00:35:02.836
iOS 10和watchOS 3就
包括了这种强大的运动跟踪功能

00:35:02.903 --> 00:35:06.139
它可以自动记录数据
对轮椅使用者十分有用

00:35:06.773 --> 00:35:09.676
现在你就可以
使用并记录这些类型

00:35:09.743 --> 00:35:11.612
在与HealthKit互动的时候

00:35:14.314 --> 00:35:16.517
首先
这是个新的特性数据类型

00:35:16.683 --> 00:35:17.885
HKWheelchairUse

00:35:17.951 --> 00:35:20.354
它定义了
用户是否使用轮椅

00:35:20.754 --> 00:35:23.857
它的值可以是
是 否或不确定

00:35:25.592 --> 00:35:28.629
然后我们有一些新的数量类型
专门针对轮椅使用者

00:35:28.762 --> 00:35:31.765
其中包括
轮椅移动距离和推动次数

00:35:31.832 --> 00:35:33.567
你可想象成是步数

00:35:35.369 --> 00:35:39.106
最后我们具备对轮椅使用者十分有用的
新的锻炼类型

00:35:39.306 --> 00:35:42.943
这些包括
轮椅的步行速度和跑动速度

00:35:47.047 --> 00:35:49.183
当轮椅使用者
佩戴Apple Watch时

00:35:49.249 --> 00:35:51.618
watch会自动记录
推轮椅的次数

00:35:51.685 --> 00:35:53.220
并写入新的推动次数类型

00:35:54.354 --> 00:35:55.189
另外

00:35:55.622 --> 00:35:58.392
站立环形图中
对应站立小时数的数据类型

00:35:58.458 --> 00:36:00.360
变成了转动小时数

00:36:01.662 --> 00:36:05.332
要注意 轮椅走的距离只能在

00:36:05.399 --> 00:36:06.800
轮椅运动时 自动记录

00:36:07.434 --> 00:36:08.569
还要注意

00:36:09.069 --> 00:36:12.005
用户的轮椅状态
会随着时间改变

00:36:12.539 --> 00:36:15.442
这十分重要
尤其当你要查询历史数据的时候

00:36:15.776 --> 00:36:18.011
这种情况下
你要保证同时查询

00:36:18.111 --> 00:36:21.281
轮椅类型和非轮椅类型

00:36:21.348 --> 00:36:23.383
这样就不会遗漏大段的

00:36:23.450 --> 00:36:25.252
用户历史信息

00:36:27.054 --> 00:36:29.857
总的来说
我们一直努力保证

00:36:29.923 --> 00:36:33.060
我们所有的产品和体验
能为所有人服务

00:36:33.393 --> 00:36:34.228
你也是

00:36:34.695 --> 00:36:35.929
我们强烈建议你

00:36:35.996 --> 00:36:38.131
去考虑
这一十分重要的用户群

00:36:38.432 --> 00:36:42.302
通过在你的应用里支持并提供
这种轮椅数据类型

00:36:46.573 --> 00:36:48.208
我们今天讲了很多

00:36:48.442 --> 00:36:49.276
现在回顾一下

00:36:51.178 --> 00:36:54.748
授权十分重要
对保护用户隐私而言

00:36:54.915 --> 00:36:58.051
但是保证好的用户体验
绝对是重中之重

00:36:59.152 --> 00:37:00.521
时刻记得授权

00:37:00.587 --> 00:37:03.390
在开发应用时
而且一定要经常测试

00:37:05.225 --> 00:37:08.262
然后我们讲了如何应用
Apple的健康与健身生态系统

00:37:08.328 --> 00:37:10.931
通过把活动环
带入你的应用

00:37:10.998 --> 00:37:12.666
通过Activity Rings API

00:37:14.935 --> 00:37:18.438
不管何时与HealthKit互动
都要仔细处理所有情况

00:37:18.505 --> 00:37:22.042
正确的同步
删除 复制这些数据

00:37:22.242 --> 00:37:24.912
以保证用户的数据
始终精确

00:37:25.179 --> 00:37:26.647
并始终符合你的预期

00:37:28.815 --> 00:37:32.119
最后不要忘了
好好利用这些新出的好功能

00:37:32.186 --> 00:37:35.556
就在今年发布的
iOS 10和watchOS 3中

00:37:35.622 --> 00:37:37.291
特别是轮椅辅助

00:37:37.424 --> 00:37:39.526
这是我们认为
十分有意义的功能

00:37:42.930 --> 00:37:45.766
如果要了解更多
关于我们今天所讲的话题

00:37:45.832 --> 00:37:48.035
又或者你有任何问题
请访问这个网站

00:37:48.101 --> 00:37:50.337
这里有更多资源可用

00:37:52.506 --> 00:37:55.142
也不要忘了
了解下其他相关的演讲

00:37:55.909 --> 00:37:58.111
还有往年的精彩演讲

00:37:58.178 --> 00:38:00.047
会让你更快了解HealthKit

00:38:00.414 --> 00:38:02.115
感谢你们
创造了这些出色的应用

00:38:02.182 --> 00:38:03.951
让我们的用户
生活更加健康

00:38:04.017 --> 00:38:06.119
希望你喜欢WWDC的其他演讲