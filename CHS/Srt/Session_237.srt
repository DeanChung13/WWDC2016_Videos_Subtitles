00:00:19.419 --> 00:00:26.426
CareKit开发入门

00:00:35.502 --> 00:00:37.237
谢谢 大家下午好

00:00:37.304 --> 00:00:39.606
欢迎来到
“CareKit开发入门”演讲

00:00:39.673 --> 00:00:41.775
我叫Umer
CareKit团队工程师

00:00:43.210 --> 00:00:45.712
今天的日程包括
讲述CareKit的故事

00:00:45.779 --> 00:00:46.813
以及它的由来

00:00:47.281 --> 00:00:48.482
介绍其中一个应用

00:00:48.549 --> 00:00:51.451
分析它如何使用CareKit
来提升就医体验

00:00:52.286 --> 00:00:55.455
了解CareKit架构
并以此创建一个应用

00:00:55.923 --> 00:00:58.725
演示一个定制的CareKit应用

00:00:59.326 --> 00:01:02.629
最后 Apple和开发者社区

00:01:02.696 --> 00:01:04.565
如何同心协力
使它更上一个新的台阶

00:01:07.000 --> 00:01:09.870
在介绍CareKit之前
先看看它的由来

00:01:12.239 --> 00:01:14.408
大家可能熟悉ResearchKit

00:01:14.608 --> 00:01:16.543
它是我们去年发布的框架

00:01:16.610 --> 00:01:19.246
帮助医疗机构和研究人员

00:01:19.313 --> 00:01:22.783
在iPhone上进行大规模的研究

00:01:24.885 --> 00:01:27.888
如果有兴趣 可以参看今早的演讲

00:01:27.955 --> 00:01:29.356
ResearchKit新特性

00:01:29.423 --> 00:01:31.124
由Bunny Laden和
Yuen Xiou主持

00:01:31.491 --> 00:01:33.093
以及去年ResearchKit演讲

00:01:33.160 --> 00:01:35.495
由John Roll主持
“使用ResearchKit创建应用”

00:01:38.498 --> 00:01:39.833
在ResearchKit发布后的过去一年里

00:01:39.900 --> 00:01:42.503
我们收到了很多请求
希望对患者进行研究

00:01:42.569 --> 00:01:45.606
或者查看他们提供的医学数据

00:01:45.939 --> 00:01:48.509
我们开始头脑风暴
以病人为中心的模块

00:01:49.076 --> 00:01:52.713
随后我们发现
这些模块的应用范围

00:01:52.779 --> 00:01:54.848
远高于医学研究

00:01:55.682 --> 00:01:59.853
所以在ResearchKit基础上
进化出了新框架 CareKit

00:02:02.756 --> 00:02:06.360
CareKit是一个开源框架
协助医疗机构开发应用

00:02:06.426 --> 00:02:09.329
来帮助病人恢复治疗

00:02:09.830 --> 00:02:12.332
CareKit有益于
各种慢性和急性病治疗

00:02:13.467 --> 00:02:16.270
一个很好的慢性病的例子是精神疾病

00:02:16.537 --> 00:02:18.438
它的用药追踪极其有效

00:02:18.672 --> 00:02:21.608
对于抑郁和焦虑的评估

00:02:21.675 --> 00:02:22.643
也能做到及时反馈

00:02:23.143 --> 00:02:25.612
还能监督日常活动

00:02:25.679 --> 00:02:29.750
它能做到互助小组和入院治疗以外的
几乎一切事情

00:02:32.186 --> 00:02:34.821
另外一个例子是手术治疗

00:02:34.888 --> 00:02:38.225
其中最重要的是术后恢复

00:02:38.692 --> 00:02:40.127
我们仔细思考这个用例

00:02:40.194 --> 00:02:43.096
回想一下现有的就医体验

00:02:46.600 --> 00:02:49.136
如今 如果你离开医院或者医生

00:02:49.203 --> 00:02:51.205
可能会收到这样一张纸

00:02:51.271 --> 00:02:53.907
列举了你的术后恢复活动

00:02:54.007 --> 00:02:56.210
它包含了许多详细的指导说明

00:02:56.276 --> 00:02:57.845
随着时间推移而改变

00:02:58.645 --> 00:03:01.048
这方面的监管十分糟糕

00:03:01.114 --> 00:03:03.217
患者经常会陷入困惑

00:03:04.251 --> 00:03:05.385
由于这些计划并非动态

00:03:05.452 --> 00:03:08.188
因此它们不能根据情况主动调整

00:03:08.255 --> 00:03:10.924
最终可能导致患者再次入院

00:03:11.825 --> 00:03:14.094
CareKit的推出
就是为了解决这个问题

00:03:14.161 --> 00:03:16.330
拿起这一张纸

00:03:16.797 --> 00:03:18.832
把它变成Care Card

00:03:19.933 --> 00:03:23.337
Care Card
允许病人查看完整的治疗计划

00:03:23.504 --> 00:03:26.306
互动性强 动态更新

00:03:26.373 --> 00:03:28.642
它能实时地反馈病人的康复进展

00:03:29.810 --> 00:03:31.478
在开发这个模块的过程中

00:03:31.545 --> 00:03:33.447
我们发现了一个全新的世界

00:03:33.514 --> 00:03:35.115
因为iPhone提供了无限可能性

00:03:35.282 --> 00:03:39.386
我们又创建了另外三个模块
来提升病人的护理体验

00:03:41.421 --> 00:03:43.023
症状与测量追踪器

00:03:43.090 --> 00:03:45.292
记录了各种主观和客观的测量数据

00:03:46.560 --> 00:03:49.296
Insights概览页
显示了各种应用数据

00:03:49.363 --> 00:03:52.199
帮助病人掌握病情恢复进展

00:03:53.967 --> 00:03:55.969
以及连接模块 用来实现

00:03:56.036 --> 00:03:58.505
与家庭成员和护理团队之间的交流沟通

00:04:01.175 --> 00:04:04.478
我们来看看它们是如何协作
来提高就医体验的

00:04:04.845 --> 00:04:07.314
德克萨斯医疗中心是
CareKit早期合作伙伴

00:04:07.915 --> 00:04:09.016
他们运用了这些模块

00:04:09.082 --> 00:04:11.351
打造了一份独特的就医体验

00:04:11.418 --> 00:04:13.053
来看看这些模块的实际运行

00:04:14.154 --> 00:04:15.923
首先 你会看到一个欢迎界面

00:04:15.989 --> 00:04:18.257
你能创建登录账户

00:04:19.059 --> 00:04:21.195
我们的病人
John Appleseed已注册

00:04:21.261 --> 00:04:22.529
完成了应用配置

00:04:23.864 --> 00:04:27.434
John起床后收到一条提醒
他需要量体重

00:04:29.069 --> 00:04:31.271
他使用密码进入应用

00:04:33.140 --> 00:04:35.175
在智能秤上量完体重

00:04:35.442 --> 00:04:37.177
体重值被传入HealthKit

00:04:37.744 --> 00:04:40.914
CareKit会自动提取数据

00:04:41.715 --> 00:04:43.150
CareKit轻易完成

00:04:43.217 --> 00:04:46.119
因为它与HealthKit无缝衔接

00:04:48.722 --> 00:04:50.991
记录体重后
John进入Care Card

00:04:51.058 --> 00:04:54.461
查看今天的待办事项

00:04:55.229 --> 00:04:58.098
Care Card和
症状与测量追踪器

00:04:58.165 --> 00:04:59.333
正在自动更新内容

00:04:59.399 --> 00:05:02.336
从德克萨斯医疗中心的
ERM健康系统里提取

00:05:04.705 --> 00:05:08.141
John不太记得其活动之一 短走
的具体要求

00:05:08.208 --> 00:05:09.676
他点击进入那一栏

00:05:09.743 --> 00:05:12.079
开始浏览这项活动的说明

00:05:14.948 --> 00:05:18.385
John完成了第一项运动
接下来服用第一份药物

00:05:22.489 --> 00:05:24.191
他点击进入了评估卡

00:05:24.258 --> 00:05:26.527
查看今天需要完成的评估种类

00:05:26.894 --> 00:05:28.395
在症状与测量追踪器里

00:05:28.462 --> 00:05:30.964
他想记录下自己的术后疼痛症状

00:05:31.565 --> 00:05:33.534
以及一些感染的迹象

00:05:34.101 --> 00:05:37.871
他首先进入疼痛评估 输入了疼痛指数

00:05:41.708 --> 00:05:43.977
接着拍一张感染区域的照片

00:05:44.044 --> 00:05:45.245
上传到应用

00:05:45.312 --> 00:05:47.681
这一切直接在症状与测量追踪器内完成

00:05:47.748 --> 00:05:49.750
数据被传送到医院

00:05:56.823 --> 00:05:59.159
最后 他要完成一些起立行走

00:05:59.593 --> 00:06:01.528
当他四处走动的时候

00:06:01.595 --> 00:06:04.264
iPhone的传感器会记录步数

00:06:04.565 --> 00:06:06.433
当他完成行走后

00:06:06.500 --> 00:06:08.735
数据会被直接传给医院

00:06:13.707 --> 00:06:15.909
John想打开Insights界面

00:06:15.976 --> 00:06:17.811
看一看过去几周的数据

00:06:18.111 --> 00:06:20.347
他可以看到本周的信息提示和图表

00:06:20.647 --> 00:06:24.184
这样视觉化的数据呈现方式
更加便于用户使用

00:06:24.852 --> 00:06:26.954
接着他切换到上一周

00:06:27.454 --> 00:06:29.823
对比这两周的表现

00:06:34.795 --> 00:06:37.231
同时他依然担心可能受到感染

00:06:37.297 --> 00:06:39.166
尽管已经上报过了

00:06:39.233 --> 00:06:41.602
他还是决定给护理人员发一条信息

00:06:43.470 --> 00:06:44.938
他开始创建信息

00:06:45.005 --> 00:06:47.441
他决定发邮件给
Paul Cashman医生

00:06:48.275 --> 00:06:51.011
他不需要再上传一次照片

00:06:51.078 --> 00:06:53.280
因它已被发送给Cashman医生了

00:06:53.347 --> 00:06:54.948
通过之前的感染评估

00:06:59.553 --> 00:07:01.755
当天的晚些时候
他收到了回复邮件

00:07:01.822 --> 00:07:03.524
医疗团队成员
Paul Cashman医生

00:07:03.590 --> 00:07:04.858
他重新进入应用

00:07:04.925 --> 00:07:07.561
阅读医生的信息

00:07:09.229 --> 00:07:13.133
德克萨斯医疗中心就是这样使用
CareKit创建出一个应用

00:07:13.200 --> 00:07:16.537
打造了闭环的就医体验

00:07:23.076 --> 00:07:26.647
谢谢
我们来看看创建类似应用需要的步骤

00:07:27.814 --> 00:07:30.551
这是四种前端模块 我们已经见过了

00:07:31.218 --> 00:07:32.920
再加上两个后台的模块

00:07:32.986 --> 00:07:35.055
Care Plan Store和
Document Exporter

00:07:35.689 --> 00:07:38.959
我们先从Care Plan Store
开始介绍

00:07:40.360 --> 00:07:42.796
Care Plan Store
由活动和事件组成

00:07:43.430 --> 00:07:46.033
我们先解释活动和事件的含义

00:07:46.867 --> 00:07:49.203
然后创建一个活动
添加到store里

00:07:49.636 --> 00:07:52.005
寻找活动和事件的关系

00:07:52.072 --> 00:07:53.807
最后把它们集成到UI里面

00:07:55.509 --> 00:07:57.244
若仔细看这张Care Card

00:07:57.477 --> 00:08:00.347
我们可以想象出活动和事件的含义

00:08:01.014 --> 00:08:02.482
以ibuprofen为例

00:08:03.150 --> 00:08:05.686
Ibuprofen 200mg
是一个活动

00:08:05.752 --> 00:08:08.288
下面的圆圈代表事件

00:08:10.657 --> 00:08:13.994
活动和事件一起构成了
Care Plan Store

00:08:16.296 --> 00:08:17.464
这是一次活动

00:08:17.531 --> 00:08:19.433
我们创建这个ibuprofen活动

00:08:19.733 --> 00:08:22.002
先创建一个标识符

00:08:22.069 --> 00:08:24.238
这里使用的是
ibuprofenMedication

00:08:24.571 --> 00:08:27.541
它能独特地标识出这个活动

00:08:28.542 --> 00:08:31.111
接着创建群组标识符
来标识不同的活动

00:08:31.178 --> 00:08:33.280
方便以后在后台被调用

00:08:34.481 --> 00:08:35.982
标题是Ibuprofen

00:08:36.049 --> 00:08:37.518
内容是200 mg

00:08:37.851 --> 00:08:39.385
这些属性直接面向用户

00:08:39.453 --> 00:08:41.855
请确保它们的准确性

00:08:43.624 --> 00:08:46.660
tintColor可以是任何UI颜色
我们选择蓝色

00:08:47.027 --> 00:08:48.529
除了选择填充色

00:08:48.595 --> 00:08:51.465
CareKit还提供其它自定义选项

00:08:51.532 --> 00:08:53.133
我们稍后会讨论到

00:08:54.535 --> 00:08:57.571
我最关心两个属性
类型和时刻表

00:08:58.305 --> 00:09:01.675
类型决定了活动的类型

00:09:01.875 --> 00:09:04.211
举个例子
我们有干涉

00:09:04.278 --> 00:09:05.646
它属于Care Card模块

00:09:06.413 --> 00:09:09.249
还有评估
它显示在症状与测量追踪器下

00:09:11.185 --> 00:09:12.986
因为我们创建的是一个服药活动

00:09:13.053 --> 00:09:14.288
它属于Care Card模块

00:09:14.354 --> 00:09:16.356
所以 活动类型是
干涉

00:09:18.725 --> 00:09:20.360
接下来看一看时刻表

00:09:20.594 --> 00:09:24.498
时刻表决定了
活动发生的频率和时间

00:09:25.666 --> 00:09:29.136
有三种方法定义时刻表

00:09:29.336 --> 00:09:31.672
每天的日程
每周的日程

00:09:31.738 --> 00:09:33.473
你还可以创建自定义的日程

00:09:34.007 --> 00:09:35.275
你可以定义频率

00:09:35.342 --> 00:09:38.111
来指定每天的活动次数

00:09:38.812 --> 00:09:40.948
听起来有点麻烦
其实很简单

00:09:41.014 --> 00:09:42.082
我们来简化它

00:09:43.016 --> 00:09:45.052
我们来给活动定义一个日程

00:09:46.854 --> 00:09:47.955
这是一个周计划

00:09:48.021 --> 00:09:52.326
我们希望病人在周一 周三 周五服药

00:09:53.327 --> 00:09:55.329
再定义一个频率

00:09:55.529 --> 00:09:56.697
周一服用四次

00:09:56.763 --> 00:09:58.932
周三两次 周五四次

00:10:00.033 --> 00:10:03.370
综合起来
就组成了活动的一个日程对象

00:10:04.571 --> 00:10:07.841
现在这项完整活动可被添加给
Care Plan Store

00:10:08.876 --> 00:10:11.178
接下来我们学习如何使用代码
创建Care Plan Store

00:10:11.245 --> 00:10:12.679
在把这项活动添加进去之前

00:10:12.846 --> 00:10:15.115
我们快速学习一下事件的定义

00:10:15.582 --> 00:10:19.386
事件不是由开发者直接初始化的

00:10:19.453 --> 00:10:21.855
其实它是由Care Plan Store
自动创建的

00:10:22.222 --> 00:10:24.224
为了深入了解创建的过程

00:10:24.291 --> 00:10:26.193
我们回到刚才的日程

00:10:26.894 --> 00:10:30.397
一个日程对象会根据自定义的频率
生成不同的事件

00:10:30.464 --> 00:10:35.169
举个例子 我们有四次事件在星期一

00:10:35.235 --> 00:10:37.204
因此 有四次事件在6月20日

00:10:37.437 --> 00:10:40.574
两次事件在星期三
所以两次事件在6月22日

00:10:40.641 --> 00:10:42.376
以此类推

00:10:42.442 --> 00:10:44.645
要停止事件的继续生成

00:10:44.711 --> 00:10:46.046
需要定义截止日期

00:10:46.113 --> 00:10:47.781
一旦为活动定义了截止日期

00:10:47.848 --> 00:10:50.150
Care Plan Store
会停止生成事件

00:10:51.885 --> 00:10:53.720
即使开发者没有直接创建事件

00:10:53.787 --> 00:10:55.722
他也提供了很多有用信息

00:10:55.923 --> 00:10:58.525
从事件对象你可以得到具体日期

00:10:58.692 --> 00:11:00.928
可以看到事件的状态 比如初始状态

00:11:00.994 --> 00:11:04.498
代表用户还没有调用它
它可能被完成了 也可能没有

00:11:05.232 --> 00:11:08.035
结果对象包含了完成的状态

00:11:08.101 --> 00:11:10.204
它是什么时候被完成的

00:11:10.270 --> 00:11:12.606
以及其它相关的信息

00:11:12.973 --> 00:11:16.210
还有这个指针 它指向了这次事件

00:11:17.945 --> 00:11:20.247
在Care Plan Store里
活动生成事件

00:11:20.314 --> 00:11:23.917
组合在一起
构成Care Plan Store

00:11:23.984 --> 00:11:25.752
我们来看看具体的代码

00:11:26.920 --> 00:11:29.489
创建Care Plan Store
步骤非常简单

00:11:29.556 --> 00:11:30.691
先定义一个变量

00:11:30.757 --> 00:11:34.661
我的变量是myCarePlanStore
类型是OCKCarePlanStore

00:11:35.429 --> 00:11:37.497
再定义一个永久的URL链接

00:11:37.564 --> 00:11:40.467
在这里我使用了应用的文档目录

00:11:42.336 --> 00:11:44.371
再使用URL进行初始化

00:11:44.438 --> 00:11:46.440
就得到了可用的
Care Plan Store

00:11:48.942 --> 00:11:52.179
现在我们把刚创建的
ibuprofen活动添加进去

00:11:52.479 --> 00:11:53.981
首先创建一个日程对象

00:11:54.047 --> 00:11:57.050
设定开始日期为今年年初

00:11:57.217 --> 00:11:58.619
然后使用一个周日程

00:11:58.685 --> 00:12:00.954
我们可以用数组来记录事件的频率

00:12:01.021 --> 00:12:02.689
也就是每天发生的次数

00:12:02.956 --> 00:12:04.791
举个例子
我们的数组从周日开始

00:12:04.858 --> 00:12:08.695
周日为0 周一为4 周二为0

00:12:09.096 --> 00:12:10.364
以此类推

00:12:12.399 --> 00:12:15.435
定义好了日程对象
就可以初始化care plan活动

00:12:15.969 --> 00:12:17.671
再定义一个标识符
一个群组标识符

00:12:17.738 --> 00:12:19.573
以及其它所有的参数

00:12:19.640 --> 00:12:23.177
其中两个参数我们尚未讨论
instructions和imageURL

00:12:23.443 --> 00:12:25.646
它们被用来描述活动的细节

00:12:25.712 --> 00:12:28.415
如 当John Appleseed
点击“短走”

00:12:28.482 --> 00:12:30.417
他可以看到具体的说明

00:12:30.484 --> 00:12:33.887
我们也需额外信息描述
ibuprofen及图片说明

00:12:33.954 --> 00:12:36.456
等下在Care Card里
就能看到其具体模样

00:12:37.658 --> 00:12:39.826
要把这个活动添加到
Care Plan Store

00:12:39.893 --> 00:12:42.396
我们只需调用一个添加函数
然后传递创建好的活动

00:12:42.462 --> 00:12:45.766
最后使用completionHandler
处理异常情况

00:12:47.901 --> 00:12:51.004
以上即如何创建Care Plan Store
及如何向它添加活动

00:12:51.271 --> 00:12:54.541
我们来看看如何把它们的数据
呈现在Care Card上

00:12:56.343 --> 00:12:58.712
创建Care Plan Store
和添加活动是最难的部分

00:12:58.779 --> 00:13:01.815
呈现在Care Card上
相对简单和直接很多

00:13:03.483 --> 00:13:06.987
这就是我们添加的活动
注意它的活动类型

00:13:07.054 --> 00:13:09.456
它属于干涉
因我们已把它设置成干涉

00:13:09.523 --> 00:13:12.192
Care Plan Store自动
将它显示在Care Card上

00:13:13.193 --> 00:13:14.628
要创建一个Care Card

00:13:14.695 --> 00:13:18.065
需要先初始化CareCardViewController
使用carePlanStore对象

00:13:18.999 --> 00:13:20.934
把它内嵌到NavigationController

00:13:21.001 --> 00:13:24.371
这一步很必要 因为它能提供
barButtonItem

00:13:24.438 --> 00:13:26.073
用来操控日历

00:13:26.139 --> 00:13:29.443
以及将信息推送到导航堆栈上

00:13:30.377 --> 00:13:31.645
现在可以直接将其显示

00:13:32.045 --> 00:13:33.947
也可以把它内嵌到
tabBarController

00:13:34.114 --> 00:13:37.351
仅仅三行代码
我们就生成了一个Care Card

00:13:44.791 --> 00:13:47.160
这里你能看到
我们拥有ibuprofen活动

00:13:47.227 --> 00:13:49.162
和其它建好的一些活动

00:13:49.863 --> 00:13:52.065
我们看看这个UI的其它部分

00:13:52.132 --> 00:13:53.600
了解它们的具体作用

00:13:54.268 --> 00:13:56.737
headerView
显示了本周活动的预览

00:13:56.803 --> 00:13:59.239
你可以左右滑动切换到另一周

00:13:59.406 --> 00:14:02.109
你可以选择特定日期查看当天的细节

00:14:02.543 --> 00:14:05.179
心型图案是由程序自动计算和更新的

00:14:05.245 --> 00:14:07.347
根据Care Plan Store
现有信息

00:14:08.148 --> 00:14:10.551
心型图案和填充颜色都可以定制

00:14:10.817 --> 00:14:13.954
你可以选择更适合的图片

00:14:14.021 --> 00:14:16.690
也可以改变填充色来搭配自定义图片

00:14:16.757 --> 00:14:20.093
等会儿我们将展示一个自定义的
Care Card

00:14:22.429 --> 00:14:23.964
标头下面是治疗方案

00:14:24.031 --> 00:14:27.267
它包含了当天要完成的干预治疗

00:14:27.734 --> 00:14:31.171
每次从Care Plan Store里
添加或删除活动

00:14:31.238 --> 00:14:32.840
这个UI也会自动更新

00:14:32.906 --> 00:14:35.609
开发者不需要额外的工作

00:14:37.778 --> 00:14:39.980
这是我们刚添加的
ibuprofen活动

00:14:40.547 --> 00:14:42.015
点击这一栏

00:14:42.082 --> 00:14:45.352
你将进入详细信息页
包括具体的用法说明

00:14:45.652 --> 00:14:47.120
以及药物的图片

00:14:47.187 --> 00:14:50.257
方便用户把它和其他药物区分开来

00:14:53.827 --> 00:14:55.896
我们看一种不同的干预治疗

00:14:56.196 --> 00:14:58.665
这个项目要求病人起立行走

00:14:59.132 --> 00:15:02.269
点击进去
用户就可以自行完成病情报告

00:15:03.537 --> 00:15:07.007
也可以通过Apple Watch
的传感器自动更新

00:15:07.674 --> 00:15:09.276
这正好引出下一点

00:15:09.343 --> 00:15:10.978
我们如何更新这些事件？

00:15:11.912 --> 00:15:14.715
有多种方法
其中之一 用户自主报告

00:15:14.781 --> 00:15:16.049
比如服药追踪

00:15:16.116 --> 00:15:18.285
患者可以报告服药状态

00:15:18.819 --> 00:15:21.722
他们可以在完成任务后
将其标注为完成

00:15:21.788 --> 00:15:23.624
如ResearchKit活动任务

00:15:24.725 --> 00:15:27.761
还可以通过设备的传感器自动更新

00:15:27.828 --> 00:15:30.731
比如Apple Watch或
iPhone的HealthKit

00:15:32.766 --> 00:15:33.867
这就是Care Card

00:15:33.967 --> 00:15:35.302
它是一个互动的治疗计划

00:15:35.369 --> 00:15:38.338
使用Care Plan Store
规划活动和事件

00:15:38.405 --> 00:15:41.141
帮助用户实时监控每日病情进展

00:15:43.343 --> 00:15:44.611
就如Care Card一样

00:15:45.045 --> 00:15:47.848
“症状与测量追踪器”也使用了
Care Plan Store

00:15:47.915 --> 00:15:50.484
来记录主观和客观的病情测量数据

00:15:51.618 --> 00:15:53.320
添加评估的过程

00:15:53.387 --> 00:15:57.291
和添加ibuprofen活动的过程
十分相似

00:15:57.591 --> 00:16:01.728
如果添加一个后背的痛感调查

00:16:02.362 --> 00:16:04.598
它的代码和创建这个几乎一样

00:16:04.665 --> 00:16:07.434
假设它已被加入了
Care Plan Store

00:16:08.168 --> 00:16:10.204
我们来看看如何创建症状追踪器

00:16:10.270 --> 00:16:11.805
来展示这个评估

00:16:12.539 --> 00:16:15.442
像Care Card一样
先初始化symptomTrackerViewController

00:16:15.509 --> 00:16:16.944
使用Care Plan Store
对象

00:16:17.411 --> 00:16:20.280
这里可以使用代理函数
我等下会讲到

00:16:20.480 --> 00:16:22.816
然后把它内嵌到
NavigationController

00:16:23.283 --> 00:16:25.819
然后把它展示出来
效果就像这样

00:16:27.187 --> 00:16:28.622
如果我们分解这个UI

00:16:29.556 --> 00:16:32.559
headerView包含了
和Care Card一样的导航模式

00:16:32.626 --> 00:16:34.628
你可以左右滑动来切换至另一周

00:16:34.695 --> 00:16:36.964
选择具体日期 来显示当日详细信息

00:16:37.631 --> 00:16:39.633
当我们正在完成当天的评估时

00:16:39.700 --> 00:16:42.135
这个环形的图表 可以显示当前的进展

00:16:42.202 --> 00:16:44.471
一旦全部完成 图表会自动打勾

00:16:44.538 --> 00:16:46.907
这表示当天的评估已经全部完成

00:16:47.307 --> 00:16:50.944
图表和勾号的颜色都是可以自定义的

00:16:52.746 --> 00:16:55.916
在这下面 是今天待完成的评估列表

00:16:55.983 --> 00:16:58.719
评估多种多样
我们来看看其中一些

00:16:59.686 --> 00:17:00.754
这是一个痛感调查

00:17:00.821 --> 00:17:03.290
要实现它 我们可调用
ResearchKit的调查模块

00:17:03.357 --> 00:17:05.259
来呈现出精心设计的调查表

00:17:06.359 --> 00:17:07.528
它们也可以是活动任务

00:17:08.028 --> 00:17:10.664
你可以进行点击测验
或者创建自定义活动

00:17:10.731 --> 00:17:12.999
使用ResearchKit
如“运动范围”

00:17:14.367 --> 00:17:17.003
它也可是自主报告的
你可为客户展示viewController

00:17:17.069 --> 00:17:19.306
就像德克萨斯医疗中心应用所做的一样

00:17:19.373 --> 00:17:22.709
请求用户拍摄感染图片并传回医院

00:17:23.676 --> 00:17:26.280
传回的也可以是任何类型数据
如HealthKit或Bluetooth设备

00:17:26.346 --> 00:17:28.415
在德克萨斯医疗中心应用里

00:17:28.482 --> 00:17:30.517
John使用了智能体重计

00:17:30.584 --> 00:17:32.753
自动上传了数据
更新CareKit应用

00:17:34.788 --> 00:17:35.923
代理函数就在这里派上了用场

00:17:35.989 --> 00:17:37.658
为了更好地展示评估结果

00:17:37.724 --> 00:17:39.760
我们需要实现症状追踪器的代理功能

00:17:39.826 --> 00:17:40.994
为开发者提供回调函数

00:17:41.061 --> 00:17:43.864
每当用户点击评估栏时被调用

00:17:44.198 --> 00:17:47.067
这个回调函数会返回一个评估事件

00:17:47.134 --> 00:17:50.604
你可决定使用哪个视图控制器
呈现这个事件

00:17:53.073 --> 00:17:55.976
如果你想显示一个痛感调查事件

00:17:56.043 --> 00:17:58.979
首先你需要使用它的数据计算疼痛数值

00:18:00.414 --> 00:18:01.982
然后创建一个结果对象

00:18:02.049 --> 00:18:06.220
记下它的数值和单位

00:18:06.286 --> 00:18:10.224
如果你要添加其它额外信息
你还必须更新userInfo目录

00:18:11.225 --> 00:18:13.493
在Care Plan Store里
更新这项事件

00:18:13.560 --> 00:18:15.896
以及它的结果对象 事件的当前状态

00:18:15.963 --> 00:18:18.465
最后使用completionHandler
处理异常情况

00:18:20.167 --> 00:18:21.735
汇总所有的信息

00:18:22.035 --> 00:18:24.538
你最后看到的就是
症状与测量追踪器

00:18:30.277 --> 00:18:32.412
Insights概览页能调用
Care Plan Store数据

00:18:32.479 --> 00:18:33.680
生成信息和图表

00:18:34.248 --> 00:18:38.018
方便用户更好地理解数据

00:18:38.352 --> 00:18:41.989
为了让开发者更容易生成它们

00:18:42.055 --> 00:18:43.657
我们推出了insight部件

00:18:43.724 --> 00:18:46.193
能导入它们到Insights概览页

00:18:46.260 --> 00:18:49.129
它们包括各种信息
比如提示和警告

00:18:49.563 --> 00:18:50.664
它们也可以是图表

00:18:50.731 --> 00:18:53.133
如从CareKit引进的分组条形表

00:18:53.200 --> 00:18:54.334
以及各种自定义的图表

00:18:54.401 --> 00:18:56.403
比如 ResearchKit的图表

00:18:56.470 --> 00:18:59.006
能够轻易地被转换成
我们需要的图表对象

00:19:01.108 --> 00:19:03.343
我们看看这个概览页里
包括的insight部件

00:19:04.545 --> 00:19:06.813
这是一个用药追踪的信息部件

00:19:06.880 --> 00:19:09.349
信息部件能鼓励用户完成治疗任务

00:19:09.416 --> 00:19:11.818
通过推送重要信息的方式

00:19:12.186 --> 00:19:14.288
这个信息部件使用
Care Plan Store数据

00:19:14.354 --> 00:19:16.990
计算出上周服用ibuprofen
的遵循度

00:19:17.424 --> 00:19:19.693
这些信息也能通过远程服务器生成

00:19:19.760 --> 00:19:21.695
传递到Insights概览页

00:19:22.863 --> 00:19:25.732
我们来看看代码
如何向后台store请求数据

00:19:26.366 --> 00:19:28.936
在这里你可以指定开始日期和截止日期

00:19:29.269 --> 00:19:31.471
我使用上个星期天

00:19:31.538 --> 00:19:34.107
和之后的星期六
分别作为开始和截止日期

00:19:35.342 --> 00:19:37.277
然后调用
enumerateEvents函数

00:19:37.344 --> 00:19:38.378
在Care Plan Store上

00:19:38.445 --> 00:19:40.714
标注我们想要枚举的活动

00:19:40.781 --> 00:19:43.050
以及枚举的日期

00:19:43.417 --> 00:19:47.054
随后活动的的事件
被返回给handler

00:19:47.487 --> 00:19:50.057
我们可以枚举这些事件
查看它们的状态

00:19:50.123 --> 00:19:53.026
判定它们是否被完成
计算执行度

00:19:55.562 --> 00:19:59.333
完成了执行度计算之后
如果想要生成一个信息部件

00:20:00.367 --> 00:20:02.936
在这里你需要把计算得出的执行度

00:20:03.003 --> 00:20:04.638
变成一条易读的信息

00:20:04.705 --> 00:20:07.875
方便用户理解

00:20:08.909 --> 00:20:11.645
你需要先初始化信息 给它添加标题

00:20:11.845 --> 00:20:15.115
信息内容
颜色 以及信息类型

00:20:15.182 --> 00:20:16.650
比如说 这是一条提示

00:20:20.320 --> 00:20:21.788
接下来 我们讲讲分组条形图

00:20:21.855 --> 00:20:24.491
它能在一张图表里
显示多组信息

00:20:24.691 --> 00:20:27.828
比如说 这个图表对比了
pain和ibuprofen

00:20:27.895 --> 00:20:29.162
用户可以从这些数据中

00:20:29.229 --> 00:20:32.399
了解病情恢复进展

00:20:35.335 --> 00:20:37.371
我定义一个变量
barChartItem

00:20:37.437 --> 00:20:39.173
类型是OCKInsightItem

00:20:40.174 --> 00:20:43.043
barChartItem
包括不同的图表系列

00:20:43.110 --> 00:20:45.445
我们已见过painSeries
和ibuprofenSeries

00:20:45.679 --> 00:20:46.813
要创建这个图表

00:20:46.880 --> 00:20:50.050
首先需定义painSeries
及初始化BarSeries

00:20:50.484 --> 00:20:53.620
然后指定标题、数组以及字符串组

00:20:53.687 --> 00:20:54.655
和图表填充色

00:20:55.722 --> 00:20:58.458
数组的元素数目是不受限制的

00:20:58.525 --> 00:21:00.694
所以你的图表可以展示
每周数据、月度数据

00:21:00.761 --> 00:21:02.162
或者任意数量的数据

00:21:02.963 --> 00:21:06.166
数值决定了条形图的长度

00:21:06.233 --> 00:21:08.902
字符串会出现在条形图的右边

00:21:09.303 --> 00:21:10.838
大多数时候它们的含义都不相同

00:21:11.004 --> 00:21:12.906
举个例子
在ibuprofenSeries里

00:21:12.973 --> 00:21:15.242
数值决定了条形图的长度

00:21:15.309 --> 00:21:17.077
但它们并不代表数据本身

00:21:17.144 --> 00:21:19.746
再举个例子
这些1-5-4之类的数字

00:21:19.813 --> 00:21:23.784
会很容易被误解成药品剂量
1片药 5片药 或者4片药

00:21:24.151 --> 00:21:27.821
标签值帮助用户知道
他们遵循用药量

00:21:27.888 --> 00:21:30.157
10%、50%以及40%

00:21:31.258 --> 00:21:33.627
我们已经知道想要显示哪些系列了

00:21:33.694 --> 00:21:35.596
需先初始化
一个barChartItem

00:21:36.196 --> 00:21:38.432
然后指定它的标题、
文字内容、填充颜色

00:21:38.699 --> 00:21:41.268
我们有两组数列
分别作为坐标轴标题和副标题

00:21:41.335 --> 00:21:43.136
显示在每组条形图的左边

00:21:43.437 --> 00:21:45.739
你可以注明需要显示的系列数目

00:21:45.806 --> 00:21:47.441
可能有1组 2组 或10组

00:21:48.442 --> 00:21:50.444
还有两个可选的参数需要定义
也就是量程

00:21:50.511 --> 00:21:52.846
最小量程
和最大量程

00:21:52.913 --> 00:21:54.047
如果你不注明它们

00:21:54.114 --> 00:21:56.917
它们会被自动生成
根据你提供的数据

00:21:57.117 --> 00:21:59.453
如果你想要注明
那么请小心

00:21:59.520 --> 00:22:01.154
不要让数据出现偏差

00:22:01.588 --> 00:22:04.591
举个例子 如果数据的范围从1到10

00:22:04.658 --> 00:22:06.560
但注明的量程是从5到10

00:22:06.627 --> 00:22:09.363
那么所有低于5的数字就被隐去

00:22:09.429 --> 00:22:11.598
数据就会失真

00:22:13.467 --> 00:22:16.837
终于我们建好了信息部件和图表部件

00:22:17.204 --> 00:22:18.906
我们创建一个Insights概览页

00:22:18.972 --> 00:22:22.042
首先使用这两种部件的数组
来初始化InsightsViewController

00:22:22.109 --> 00:22:24.144
指定一个标头和一个副标题

00:22:24.478 --> 00:22:25.579
一个标题和副标题

00:22:26.246 --> 00:22:28.649
接下来直接展示它
得到这样的

00:22:35.222 --> 00:22:37.090
这是创建Insights模块方法

00:22:38.525 --> 00:22:39.860
下一项是连接模块

00:22:40.494 --> 00:22:42.262
连接允许用户分享数据

00:22:42.329 --> 00:22:44.164
给医疗组成员或者家庭成员

00:22:45.365 --> 00:22:47.501
为了简化这一操作

00:22:47.568 --> 00:22:49.503
我们创建了CareKit联系人

00:22:49.570 --> 00:22:50.838
它有两种类型

00:22:51.405 --> 00:22:54.041
医疗组联系人
包括医生或护士

00:22:54.274 --> 00:22:56.276
或者其他医疗组成员

00:22:56.643 --> 00:22:57.678
还有私人联系人

00:22:57.744 --> 00:22:59.847
可能包括密友或者家人

00:23:00.380 --> 00:23:03.383
观察连接模块时你会发现
联系人是根据类型分组的

00:23:04.151 --> 00:23:05.953
医疗组成员在上面

00:23:06.820 --> 00:23:08.789
下面是朋友和家人

00:23:09.156 --> 00:23:11.325
我们来看看代码
怎样创建联系人群组

00:23:13.160 --> 00:23:15.128
要创建一个医疗联系人
首先定义一个变量

00:23:15.195 --> 00:23:17.364
类型是OCKContact的
PhysicianContact

00:23:17.965 --> 00:23:20.334
接着初始化联系人对象

00:23:20.400 --> 00:23:22.102
然后指定careTeam的类型
姓名

00:23:22.369 --> 00:23:24.538
他和病人的关系

00:23:24.738 --> 00:23:25.639
以及填充色

00:23:25.939 --> 00:23:28.775
接着是电话号码、信息号码
是CNPhoneNumber对象

00:23:28.842 --> 00:23:30.143
方便格式统一

00:23:30.911 --> 00:23:32.446
邮箱地址是字符串

00:23:32.713 --> 00:23:34.948
定义monogram数值

00:23:35.015 --> 00:23:36.283
或者指定图片

00:23:36.350 --> 00:23:38.785
来显示医生或者医疗成员的头像

00:23:41.154 --> 00:23:44.558
当所有联系人都创建完成后 请初始化
connectViewController

00:23:44.625 --> 00:23:47.394
然后把它展示出来

00:23:47.528 --> 00:23:49.530
但是这里你依然需要编写一个代理函数

00:23:49.596 --> 00:23:51.098
我们等一下会提到

00:23:51.932 --> 00:23:53.100
在我们呈现它之前

00:23:53.166 --> 00:23:54.868
需要把它内嵌到
NavigationController

00:23:54.935 --> 00:23:57.538
因为连接模块
同时包含主页面和详请页面

00:23:59.139 --> 00:24:02.643
最后的连接模块是这样的
包含了ConnectViewController

00:24:03.410 --> 00:24:06.647
我们看看刚创建的联系人
Paul Cashman医生

00:24:07.080 --> 00:24:08.248
如果点击这一栏

00:24:08.315 --> 00:24:11.418
进入详情页
就能得到他的详细名片

00:24:11.818 --> 00:24:15.022
在名片里你能看到他所有的联系方式

00:24:15.088 --> 00:24:17.124
告诉你怎样打电话发信息

00:24:17.491 --> 00:24:19.359
发短信或者邮件

00:24:20.994 --> 00:24:23.997
还能在下面发送报告给他

00:24:24.264 --> 00:24:26.099
代理在这里产生作用

00:24:27.568 --> 00:24:31.538
连接代理让联系人之间
数据共享成为可能

00:24:31.605 --> 00:24:34.007
举个例子
当用户点击分享按钮

00:24:34.441 --> 00:24:35.542
这个函数被调用

00:24:35.976 --> 00:24:38.645
你会收到一个联系人对象

00:24:38.712 --> 00:24:42.282
你可以决定生成哪种报告
然后分享报告

00:24:43.116 --> 00:24:46.520
创建报告和分享报告的过程非常繁琐

00:24:46.587 --> 00:24:48.989
看看我们是如何简化它的

00:24:49.823 --> 00:24:54.394
为了更方便地使用
连接模块分享数据

00:24:54.461 --> 00:24:57.531
我们推出了
Document Exporter

00:24:58.599 --> 00:25:01.468
它从Care Plan Store
抓取信息

00:25:01.535 --> 00:25:05.205
甚至从其它来源
生成富文本PDF以供分享

00:25:06.640 --> 00:25:08.509
就像我们为CareKit
做的所有事一样

00:25:08.575 --> 00:25:11.278
为了简化流程
我们创建了CareKit文档元素

00:25:11.945 --> 00:25:13.380
包括页眉和页脚

00:25:13.981 --> 00:25:19.353
文字和段落
图片 图表 和表格

00:25:19.887 --> 00:25:24.157
汇总这些元素
创建一个这样的富文本PDF

00:25:30.631 --> 00:25:33.300
在这份PDF中
包含了病人的照片

00:25:33.667 --> 00:25:35.602
一份易读的病情进展报告

00:25:35.969 --> 00:25:38.572
同Insights概览页一样的图表

00:25:38.639 --> 00:25:39.940
现在医生也能看到了

00:25:40.007 --> 00:25:42.509
他们能看出病人的恢复情况

00:25:43.043 --> 00:25:45.846
还有一个表格
展示了所有的主观和客观的测量数据

00:25:45.913 --> 00:25:47.781
关于上一周的

00:25:48.515 --> 00:25:50.517
我们来看看创建这个PDF的代码

00:25:50.617 --> 00:25:54.154
首先定义一个DocumentElementParagraph
对象 只包含了文本内容

00:25:54.221 --> 00:25:56.490
这些文本内容也可以来自
Care Plan Store

00:25:56.557 --> 00:25:57.658
或者远程服务器

00:25:59.126 --> 00:26:01.428
然后定义一个
DocumentElementChart对象

00:26:01.495 --> 00:26:05.165
它几乎使用了Insights
概览页同样的图表元素

00:26:05.232 --> 00:26:08.168
所以我们不用编写任何新代码
或者生成任何新图表

00:26:09.269 --> 00:26:12.406
这个表格包含了许多的标题栏

00:26:12.673 --> 00:26:14.875
以及许多的数组

00:26:14.942 --> 00:26:17.678
每一个数组都包含了
每一行将要显示的数据

00:26:17.744 --> 00:26:19.680
比如 一个星期的疼痛值数据

00:26:19.746 --> 00:26:21.782
或者 一个星期的点击测试结果

00:26:23.450 --> 00:26:25.752
当你拥有了创建文档的全部元素

00:26:25.819 --> 00:26:28.255
先初始化一个文档对象
给它添加一个标题

00:26:28.655 --> 00:26:30.624
和一个包含所有元素的数组

00:26:31.658 --> 00:26:34.628
把这些文档元素转换成PDF
非常简单直接

00:26:34.695 --> 00:26:36.663
只要调用
createPDFData方法

00:26:36.864 --> 00:26:39.166
使用返回到completionBlock的NSData

00:26:39.233 --> 00:26:40.567
最后输出到文件URL

00:26:42.369 --> 00:26:44.771
现在 当用户点击分享按钮

00:26:45.439 --> 00:26:48.909
PDF就被生成了 使用刚创建的
Document Exporter

00:26:49.877 --> 00:26:53.046
用户可以预览PDF
他们就能知道被分享的内容

00:26:53.814 --> 00:26:56.550
他们可以点击分享按钮
进入分享页面

00:26:56.617 --> 00:26:59.052
选择不同的方式来分享PDF

00:27:00.554 --> 00:27:03.624
这就是Document Exporter
它和连接模块一同协作

00:27:03.690 --> 00:27:04.958
实现了数据分享

00:27:11.732 --> 00:27:14.701
所有的模块放在一起
构成了CareKit框架

00:27:15.302 --> 00:27:18.172
Patient PAL
最近改变他们的就医体验

00:27:18.238 --> 00:27:19.139
使用CareKit

00:27:19.540 --> 00:27:21.608
我将为大家展示
他们如何利用自定义功能

00:27:21.675 --> 00:27:23.177
来提升用户体验

00:27:23.243 --> 00:27:24.745
创建干涉活动
和评估

00:27:24.811 --> 00:27:26.613
来帮助病人恢复健康

00:27:27.748 --> 00:27:31.318
在他们的Care Card中
心型图案被锻炼的小人替换

00:27:31.785 --> 00:27:33.287
他们应用的主要功能

00:27:33.520 --> 00:27:36.123
是帮助病人进行特定的锻炼

00:27:36.990 --> 00:27:39.560
比如说 如果你专心于髋关节伸展运动

00:27:39.626 --> 00:27:40.794
粉色的这一个

00:27:41.195 --> 00:27:43.430
需要点击剩余的圆圈来完成它

00:27:43.730 --> 00:27:47.000
但是在标注它为完成之前
我们必须完成这组锻炼

00:27:49.036 --> 00:27:51.605
这组锻炼任务
包含了一则详细的描述

00:27:51.672 --> 00:27:53.507
还有一个视频

00:27:53.574 --> 00:27:55.742
保证用户使用正确的方式锻炼

00:27:56.109 --> 00:27:58.779
他们甚至还帮助患者
记录下自己的锻炼过程

00:27:58.846 --> 00:28:01.915
医疗机构也能看到这些信息

00:28:03.183 --> 00:28:06.220
点击观看视频按钮
会显示出内嵌的视频

00:28:06.286 --> 00:28:10.123
当你懂得这组锻炼后
点击开始

00:28:10.190 --> 00:28:13.160
这个过程中将会有一个活动任务
引领你做完每一组锻炼

00:28:14.561 --> 00:28:15.796
一旦完成了锻炼

00:28:15.863 --> 00:28:18.699
你能看到完成进展度
自动被更新

00:28:18.765 --> 00:28:21.668
这个小圆圈就被标注成完成

00:28:21.735 --> 00:28:26.073
在Care Card上
我们为每一组活动提供详尽的信息

00:28:26.139 --> 00:28:28.775
同时你可以编写代理函数
自主提供显示信息

00:28:28.842 --> 00:28:30.744
他们另外一项自定义

00:28:30.811 --> 00:28:34.414
当用户点击其中一个细节界面时

00:28:34.481 --> 00:28:36.083
比如说韧带拉伸页面

00:28:36.683 --> 00:28:39.186
会唤起一个视图控制器

00:28:39.253 --> 00:28:41.488
让你设置锻炼提醒

00:28:41.722 --> 00:28:44.324
我已经完成了两项

00:28:44.391 --> 00:28:47.828
第三项 我想在“晚上8点做”

00:28:48.729 --> 00:28:50.631
应用会给我推送提醒

00:28:50.697 --> 00:28:53.400
继续完成我的锻炼

00:28:54.134 --> 00:28:56.303
CareKit提供了高度的可塑性

00:28:56.370 --> 00:28:58.438
你可以定制这些模块
来满足你的需求

00:28:58.972 --> 00:29:00.307
这只是其中一部分

00:29:02.276 --> 00:29:05.179
我们来到了最后一个部分
CareKit的下一步计划是什么

00:29:06.580 --> 00:29:09.349
目前 CareKit帮助你编写
以患者为中心的应用

00:29:10.350 --> 00:29:11.952
接下来 我们将专注于

00:29:12.019 --> 00:29:14.087
创建应用程序和云服务器的连接

00:29:14.154 --> 00:29:16.023
以及把医疗信息

00:29:16.089 --> 00:29:18.058
从云端传递给医疗团队

00:29:18.725 --> 00:29:21.395
这一类架构
已经被运用到德克萨斯医疗中心应用

00:29:21.461 --> 00:29:23.063
和Patient PAL的应用上了

00:29:23.397 --> 00:29:24.665
我们由衷地希望

00:29:24.731 --> 00:29:27.734
你们在开发CareKit应用
并且连接到云服务器时

00:29:27.801 --> 00:29:29.136
你们能分享自己的经验

00:29:29.203 --> 00:29:32.739
回馈整个社区

00:29:32.806 --> 00:29:36.076
让使用类似云端解决方案的人
也能受益其中

00:29:37.978 --> 00:29:39.213
CareKit是开源项目

00:29:39.680 --> 00:29:41.448
它的未来取决于你

00:29:45.285 --> 00:29:46.520
请贡献你的力量

00:29:46.587 --> 00:29:48.155
你能在GitHub找到该项目

00:29:48.488 --> 00:29:51.391
地址是
github.com/carekit-apple/carekit

00:29:53.060 --> 00:29:55.429
如果你想帮助我们完善CareKit

00:29:56.196 --> 00:29:59.366
请浏览GitHub上的
issues部分

00:29:59.700 --> 00:30:02.002
你可建立新的issue
或者选择已经创建的

00:30:02.870 --> 00:30:03.837
进行开发

00:30:03.904 --> 00:30:05.539
请随时联系我们或者社区成员

00:30:05.606 --> 00:30:07.774
如果开发中遇到任何问题

00:30:08.642 --> 00:30:10.477
和我们一起审查代码

00:30:10.544 --> 00:30:13.647
这通常需要你、社区
和Apple工程师的参与

00:30:14.448 --> 00:30:16.617
我们的工作始于这里

00:30:16.683 --> 00:30:19.386
当我们收到开发审查过的功能后

00:30:19.453 --> 00:30:23.056
我们将接手这项功能
给予它更多的访问权限

00:30:23.724 --> 00:30:26.460
我们将使功能本地化
翻译成CareKit支持的所有语言

00:30:27.427 --> 00:30:30.130
在所有平台上
进行QA测试

00:30:30.864 --> 00:30:33.267
这个过程可能也会需要你们的帮助

00:30:33.433 --> 00:30:36.170
一旦这个功能可以使用
我们会把它并入框架

00:30:36.770 --> 00:30:39.506
有了CareKit
我们非常渴望和大家一起工作

00:30:39.573 --> 00:30:41.808
一起打造全新的医疗体验

00:30:43.243 --> 00:30:45.012
更多信息 请浏览这个URL

00:30:45.078 --> 00:30:47.748
包括我们网站和GitHub的链接

00:30:48.148 --> 00:30:49.950
以及我们的联系信息

00:30:50.017 --> 00:30:51.552
如果有任何技术问题

00:30:51.618 --> 00:30:54.087
或者有任何CareKit应用
的想法要分享

00:30:55.756 --> 00:30:59.059
请浏览这些相关演讲
帮你们创建自己的CareKit应用

00:30:59.326 --> 00:31:00.794
谢谢大家出席本场演讲