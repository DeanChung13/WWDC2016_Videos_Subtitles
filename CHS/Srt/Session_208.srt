00:00:19.820 --> 00:00:23.490
WatchOS 3的新特性

00:00:31.732 --> 00:00:32.566
好的

00:00:32.732 --> 00:00:33.667
谢谢

00:00:34.201 --> 00:00:37.938
我很激动能跟大家讲讲
watchOS 3的新特性

00:00:38.505 --> 00:00:41.942
当然我们十分关注
watchOS 3

00:00:42.242 --> 00:00:44.611
努力优化系统性能

00:00:45.012 --> 00:00:47.381
并对此做出了很多改进

00:00:47.447 --> 00:00:50.751
以确保你所有的应用
快速流畅地运行

00:00:51.919 --> 00:00:54.922
我们还投入了大量的时间
来优化导航

00:00:55.455 --> 00:00:58.492
它实际上促进了性能的优化

00:00:58.926 --> 00:01:01.361
因为我们能越快地
让用户打开应用

00:01:01.728 --> 00:01:04.531
他们就能越早开始使用
也就能越快地

00:01:04.598 --> 00:01:07.501
放下手腕
能继续做其他事情

00:01:09.336 --> 00:01:11.905
除了对系统进行提升

00:01:12.172 --> 00:01:14.041
我们也花了很多时间

00:01:14.107 --> 00:01:17.144
优化我们所有应用中不同的东西

00:01:19.179 --> 00:01:23.050
所有这些改进
实际上都围绕着三个主要方面

00:01:23.116 --> 00:01:25.953
对于手表应用
我向你保证也提醒你

00:01:26.019 --> 00:01:29.523
你会听到很多这方面的信息
在其他手表主题的演讲里

00:01:30.190 --> 00:01:33.327
那么首先要保证的
就是一目了然

00:01:34.194 --> 00:01:38.198
要想手表应用能一目了然
就需要很多不同的元素

00:01:38.265 --> 00:01:40.133
最基础的就是表盘

00:01:40.634 --> 00:01:42.936
因为表盘上的complication

00:01:43.003 --> 00:01:44.771
给你很好的机会

00:01:44.838 --> 00:01:47.574
显示最重要的信息

00:01:47.641 --> 00:01:50.377
让用户在你的应用上
扫一眼就行

00:01:52.112 --> 00:01:55.048
当然 在watchOS 2
我们也做了快捷视图

00:01:55.115 --> 00:01:58.318
在watchOS 3 这个功能
被合并进了一个新的停靠栏

00:01:58.719 --> 00:02:01.955
这是显示简单明了的信息
很好的地方

00:02:02.222 --> 00:02:05.025
因为它很快就可以被找到
无论从系统的什么地方

00:02:05.092 --> 00:02:07.995
并且能让你十分轻松地
大概了解和概览

00:02:08.195 --> 00:02:11.131
你的应用上最好和最重要的信息

00:02:11.865 --> 00:02:13.467
除了要能一目了然

00:02:13.901 --> 00:02:16.503
我们还想让所有的应用
都随时可操作

00:02:17.404 --> 00:02:20.107
随时操作性也包含了很多内容

00:02:20.741 --> 00:02:23.310
它可以指你能在手表上进行操作

00:02:23.844 --> 00:02:26.780
你看到了我们已经重新设计了
很多内置应用

00:02:26.847 --> 00:02:29.049
以保证我们最常用的功能

00:02:29.116 --> 00:02:31.718
只要点击几下
就能轻松访问

00:02:32.452 --> 00:02:34.855
比如锻炼应用
现在就能很快进入了

00:02:34.922 --> 00:02:36.557
并且只要点一下就能开始锻炼了

00:02:37.591 --> 00:02:40.260
定时应用现在改进了
常用定时器

00:02:40.327 --> 00:02:42.296
你可以把它直接设在
最顶部

00:02:42.529 --> 00:02:44.331
只要你进入应用
点一下

00:02:44.398 --> 00:02:46.466
就可以开始计时了

00:02:47.401 --> 00:02:48.969
这种方式是

00:02:49.036 --> 00:02:50.771
我们极力建议你们去考虑的

00:02:50.838 --> 00:02:53.941
就是找到应用里
最常用的操作

00:02:54.107 --> 00:02:57.377
把它们放到最顶层
让它们更容易被访问

00:02:59.112 --> 00:03:01.348
当然 可操作性
并不一定意味着

00:03:01.415 --> 00:03:04.117
你必须能对手表本身进行操作

00:03:04.351 --> 00:03:08.689
它可能就只是指
方便显示用户想要操作的内容

00:03:09.056 --> 00:03:12.125
即便是他们最终不一定
会在手表上操作

00:03:12.559 --> 00:03:16.296
我想再次强调complications
是最好的选择 新停靠栏也是

00:03:16.363 --> 00:03:19.166
它们显示了
是最要的信息给用户

00:03:19.233 --> 00:03:21.301
方便他们
在真实的情况下操作

00:03:23.136 --> 00:03:25.739
第三个方面
当然就是反应力

00:03:25.973 --> 00:03:29.042
要保证你的应用
保持更新并能及时响应

00:03:29.109 --> 00:03:30.644
每当用户有需要的时候

00:03:31.745 --> 00:03:34.147
我们对watchOS 3
做的大部分性能提升

00:03:34.214 --> 00:03:35.983
都是面向这一方面

00:03:36.049 --> 00:03:39.086
就是让所有应用
以最快的速度响应

00:03:39.453 --> 00:03:41.955
通过将它们存在内存里
这个过会儿讲

00:03:42.022 --> 00:03:44.758
并且保证
它们可以很快地恢复工作

00:03:45.125 --> 00:03:47.694
我们就能保证
它们拥有最快的反应速度

00:03:47.995 --> 00:03:48.996
你最好能

00:03:49.062 --> 00:03:50.998
确保应用的及时反应

00:03:51.064 --> 00:03:53.400
就是采用新的后台应用刷新技术

00:03:53.467 --> 00:03:54.968
这个一会儿我们细讲

00:03:55.202 --> 00:03:57.371
来保证你的应用
已经将内容准备好

00:03:57.437 --> 00:04:01.408
在用户要使用的时候
显示给他们

00:04:03.577 --> 00:04:05.812
那么想到应用
当然

00:04:05.879 --> 00:04:08.515
我们可以回到
应用的全屏视图

00:04:08.582 --> 00:04:12.252
这是大多数人
对应用的第一印象

00:04:13.020 --> 00:04:15.122
但是这也许不是最常用的地方

00:04:15.189 --> 00:04:17.558
让用户在Apple Watch上
与应用互动

00:04:18.291 --> 00:04:19.692
因为要让互动简短

00:04:19.760 --> 00:04:21.628
我们有其他很棒的界面

00:04:21.695 --> 00:04:25.299
能让我们更快捷地使用
大部分最常用的操作

00:04:25.966 --> 00:04:27.668
当然complications

00:04:27.734 --> 00:04:30.337
直接在表盘上显示
你需要的信息

00:04:30.504 --> 00:04:34.208
还有通知 会以最及时的速度
弹出信息

00:04:35.242 --> 00:04:37.477
Apple Watch通知系统很棒

00:04:37.544 --> 00:04:41.281
因为你要执行代码
来弹出通知

00:04:41.348 --> 00:04:44.885
其内容和自定义UI
都正好是你想要的界面

00:04:47.454 --> 00:04:49.690
当然 在watchOS 3上
有了新停靠栏

00:04:49.890 --> 00:04:52.926
打开应用
只要按一下侧键

00:04:53.260 --> 00:04:54.928
不管你现在系统的什么位置

00:04:56.430 --> 00:04:59.867
那么 停靠栏里的应用很棒
因为他们可以立即反应

00:04:59.967 --> 00:05:02.469
你点一下
它马上就会全屏显示

00:05:02.536 --> 00:05:05.572
你就可以立刻开始互动
完全无需等待

00:05:06.273 --> 00:05:09.276
停靠栏这么好
不仅因为它能直接与应用互动

00:05:09.343 --> 00:05:11.211
还因为它能消化信息

00:05:11.612 --> 00:05:13.180
watchOS2里的快捷视图

00:05:13.247 --> 00:05:16.083
这个功能现在被挪到了
watchOS 3的停靠栏里

00:05:16.450 --> 00:05:20.454
所以你可以快速
从你最喜爱的应用里

00:05:20.521 --> 00:05:22.789
滑动浏览视图信息

00:05:22.856 --> 00:05:25.859
因为它高度精简了
来自所有应用的信息

00:05:26.560 --> 00:05:29.396
所以停靠栏集合了
我们能提供的最好的快捷视图

00:05:29.463 --> 00:05:31.164
让你能快速地访问应用

00:05:31.365 --> 00:05:33.166
并提供了更多的功能性

00:05:33.700 --> 00:05:36.336
对于像Reminder这样的应用
两者都要具备

00:05:36.703 --> 00:05:39.873
你可以快速浏览
你需要去做的事情

00:05:40.340 --> 00:05:42.676
当你点进去的时候
它会立刻全屏

00:05:42.743 --> 00:05:44.745
并且可以互动
这样你就可以勾掉事项了

00:05:45.779 --> 00:05:49.082
对于其他类型的应用
可能就只具备功能性

00:05:49.616 --> 00:05:51.618
比如
锻炼应用

00:05:51.685 --> 00:05:53.453
我们将一些最常用的锻炼方法

00:05:53.520 --> 00:05:55.589
你最想做的锻炼
放到了最顶层

00:05:55.656 --> 00:05:58.992
那么你可以点击它们
让应用全屏

00:05:59.059 --> 00:06:01.495
再点一下
就可以开始锻炼了

00:06:03.163 --> 00:06:06.500
停靠栏 如我们所说
对于浏览信息也很有帮助

00:06:06.934 --> 00:06:09.336
例如活动应用 这类应用好处在于

00:06:09.403 --> 00:06:12.339
只概括显示
这个应用的信息

00:06:14.274 --> 00:06:15.342
在活动环里

00:06:15.409 --> 00:06:18.745
通常都是全屏显示
你可以看到高度概括的信息

00:06:18.812 --> 00:06:21.348
这真正是一目了然
很便于理解

00:06:23.050 --> 00:06:26.086
活动应用经过重新设计
如果你进入它

00:06:26.320 --> 00:06:28.021
会发现
应用的导航被简化了

00:06:28.589 --> 00:06:32.159
在watchOS 2里
它有四个水平排列的标签

00:06:32.459 --> 00:06:34.027
每个都可以垂直拉动

00:06:34.094 --> 00:06:36.930
而在watchOS 3里仅一个视图
也可以垂直拉动

00:06:36.997 --> 00:06:39.366
最顶部是活动的概括

00:06:39.433 --> 00:06:40.701
下面就是细节显示

00:06:41.001 --> 00:06:42.736
所以它又简单又快捷

00:06:42.803 --> 00:06:44.872
让你不用进入应用
就能看到你想要的信息

00:06:47.241 --> 00:06:50.978
现在我们想让
手表上的互动时间尽可能短

00:06:51.211 --> 00:06:54.548
那么这个新的导航模式
和这些改进

00:06:54.615 --> 00:06:58.218
可以让应用立刻
反应并启动

00:06:58.552 --> 00:06:59.920
它帮助我们保证

00:06:59.987 --> 00:07:02.856
那些Apple Watch上
最常用的任务

00:07:02.923 --> 00:07:05.292
可以在几秒钟之内完成

00:07:06.326 --> 00:07:07.361
在你考虑

00:07:07.427 --> 00:07:09.596
如何更新
Apple Watch的应用

00:07:09.663 --> 00:07:11.832
watchOS 3的应用
或若你还没有应用

00:07:11.899 --> 00:07:13.834
你就要考虑
要放些什么内容进去

00:07:13.934 --> 00:07:16.537
我会强烈建议你们
花些时间

00:07:16.603 --> 00:07:19.373
想想如何缩短互动时间

00:07:19.940 --> 00:07:22.142
2秒的确是个
很短的时间

00:07:22.442 --> 00:07:24.811
但是就在争取达到这一目标的过程中
你能真正找到

00:07:24.878 --> 00:07:26.914
最适合你应用的设计方法

00:07:26.980 --> 00:07:30.751
让他们在Apple Watch上
给出最完美的体验

00:07:32.619 --> 00:07:35.489
在接下来的时间里
我要讲四件事

00:07:36.256 --> 00:07:38.025
第一是后台应用刷新

00:07:38.225 --> 00:07:41.628
就像我之前说的那样
这是watchOS 3中最大的改进

00:07:41.695 --> 00:07:44.398
这十分重要
对创建反应灵敏的手表应用来说

00:07:44.464 --> 00:07:46.700
我们会用很多时间
来讲这一点

00:07:47.801 --> 00:07:50.871
接着我要讲一点
导航简化的内容

00:07:51.238 --> 00:07:54.341
因为我们做了很多努力
去简化系统的导航

00:07:54.641 --> 00:07:57.711
但是下一步就是要简化
应用里的导航

00:07:57.945 --> 00:08:01.081
我将分享一些
我们自己是如何做的想法

00:08:01.148 --> 00:08:04.218
而且我相信
你也一定能想出很多方法

00:08:04.284 --> 00:08:06.453
去简化你的应用导航

00:08:07.621 --> 00:08:10.824
之后我们再来讲一下
拓展API的可用性

00:08:11.091 --> 00:08:14.561
我们从watch SDK平台上
带来了一些很棒的框架

00:08:14.628 --> 00:08:15.963
还有了一些全新的框架

00:08:16.230 --> 00:08:19.600
而且也对现有的框架
做了很多改进

00:08:19.666 --> 00:08:22.636
所以我们会讲到
里面很多高层次的知识点

00:08:22.970 --> 00:08:24.938
还会为你推荐一些
其他精彩演讲

00:08:25.005 --> 00:08:26.340
能让你了解更多细节

00:08:27.074 --> 00:08:30.210
最后我们会讲
可发现性和配置

00:08:30.277 --> 00:08:32.712
因为创建应用只是第一步

00:08:32.913 --> 00:08:36.082
你还要把它带到用户面前
并且在手表上进行配置

00:08:37.284 --> 00:08:39.520
那么我们就从
后台应用刷新开始

00:08:40.721 --> 00:08:42.990
后台应用刷新
是很重要的一部分

00:08:43.123 --> 00:08:45.259
在创建反应灵敏的手表应用时

00:08:46.793 --> 00:08:48.829
在你开始任何工作之前

00:08:49.196 --> 00:08:51.465
后台应用刷新
就已经开始为你工作了

00:08:52.032 --> 00:08:55.836
你不需要真的去采用任何API
来获得它的帮助

00:08:56.670 --> 00:08:57.905
那么第一件事就是

00:08:58.505 --> 00:09:01.675
把所有用户喜爱的应用
都存在内存里

00:09:02.609 --> 00:09:04.344
他们在后台启动

00:09:04.411 --> 00:09:06.713
然后暂停
并一直处于待命状态

00:09:06.780 --> 00:09:08.715
这样一旦用户要用它们

00:09:08.782 --> 00:09:11.151
它就只要简单的恢复
而我们就不用等待

00:09:11.218 --> 00:09:12.653
一个完全启动的过程

00:09:13.887 --> 00:09:16.690
那么 我提到过
这适用于用户喜爱的应用

00:09:16.890 --> 00:09:19.026
但我的指向十分具体

00:09:19.459 --> 00:09:22.462
这是用户当前表盘上
所有的应用

00:09:22.529 --> 00:09:25.632
那么任何多功能表盘上的应用

00:09:25.999 --> 00:09:27.534
就是他们最喜欢的应用

00:09:27.835 --> 00:09:30.270
同样 用户放到停靠栏里的所有应用

00:09:30.337 --> 00:09:31.438
也是他们最喜欢的应用

00:09:32.072 --> 00:09:34.208
这些应用都存在内存里

00:09:34.274 --> 00:09:36.577
并随时在需要时启动

00:09:37.144 --> 00:09:39.346
这是用户最方便
访问的应用

00:09:39.413 --> 00:09:41.615
因为他们只要轻点一下表盘

00:09:41.682 --> 00:09:43.684
或者只要滑动停靠栏就好

00:09:44.017 --> 00:09:45.919
因此它们要一直在那里
随时待命

00:09:45.986 --> 00:09:47.421
反应越快越好

00:09:48.055 --> 00:09:49.923
就像我说的
你什么都不用做

00:09:49.990 --> 00:09:53.193
即使是现有watchOS 2应用
也能自动做到这一点

00:09:55.229 --> 00:09:58.732
但在使用后台应用刷新时
还是要用到一些API

00:09:58.799 --> 00:10:01.301
你可以用它们
让你的应用反应更快

00:10:01.368 --> 00:10:03.003
一旦它们成为前台

00:10:03.070 --> 00:10:05.439
就要保证它们是最新的
并随时可用

00:10:06.974 --> 00:10:09.610
你能用它做的第一件事
显然就是

00:10:09.676 --> 00:10:12.045
升级你的complication
以及升级你的应用

00:10:12.513 --> 00:10:15.015
让应用保持最新
就要一直升级

00:10:15.449 --> 00:10:17.885
另外还有一个很重要的方面

00:10:18.151 --> 00:10:19.920
这可能不会那么直观

00:10:20.153 --> 00:10:23.156
就是你还要更新快照

00:10:24.258 --> 00:10:26.493
你可能会想
快照是什么意思

00:10:26.560 --> 00:10:29.463
因为你从来没有
给快照写过代码

00:10:29.796 --> 00:10:32.633
它特别适用于
停靠栏里的应用

00:10:33.400 --> 00:10:36.670
现在 当停靠栏
第一次出现在前台时

00:10:36.737 --> 00:10:39.573
所有停靠栏里的应用
都在内存里

00:10:39.640 --> 00:10:41.642
但是他们是暂停的
当前并不运行

00:10:42.109 --> 00:10:44.344
一旦停靠栏转到前台
它显示的

00:10:44.411 --> 00:10:47.214
就是一个快照
是应用最后一次运行的状态

00:10:48.682 --> 00:10:50.918
一旦用户选定了
停靠栏里的一个应用

00:10:51.018 --> 00:10:52.586
它就会恢复工作

00:10:52.653 --> 00:10:54.655
即便它依然缩在停靠栏里

00:10:54.788 --> 00:10:56.490
但与此同时
我们还展示了一个快照

00:10:56.557 --> 00:10:58.192
表示了最近一次的状态

00:10:58.659 --> 00:11:01.128
重要的是
快照也要更新

00:11:01.195 --> 00:11:04.364
这样你就不会一直显示旧信息
直到应用重新恢复工作

00:11:05.966 --> 00:11:08.602
更重要的是
如果你快速滑动停靠栏

00:11:08.669 --> 00:11:10.470
而不停在任何一个应用上

00:11:10.971 --> 00:11:14.174
它们在滑动中不会暂停和恢复

00:11:14.241 --> 00:11:18.278
因此滑动时看到的
只是上次最后显示的快照

00:11:18.712 --> 00:11:19.913
所以你必须要确保

00:11:19.980 --> 00:11:23.217
这些快照更新到
当前的信息

00:11:23.650 --> 00:11:26.653
而后台应用刷新
就让这件事变得十分简单

00:11:27.788 --> 00:11:30.057
一开始这里有些自动的行为

00:11:30.123 --> 00:11:31.325
是系统给你的

00:11:31.491 --> 00:11:34.795
甚至在你添加任何请求更新之前

00:11:36.630 --> 00:11:38.732
第一个 应该很显然

00:11:38.799 --> 00:11:40.901
如果你已经进入应用
并使用它

00:11:41.201 --> 00:11:43.770
那么用户可能已经
看到了一些新信息

00:11:43.837 --> 00:11:47.207
或者已经进行了一些操作
想要更新这个快照

00:11:47.274 --> 00:11:48.909
以便在下次显示

00:11:49.409 --> 00:11:50.744
当用户退出应用

00:11:50.811 --> 00:11:53.480
系统会自动安排
一次快照更新

00:11:53.547 --> 00:11:55.349
代你完成这件事

00:11:56.250 --> 00:11:57.684
这处理起来其实十分简单

00:11:57.751 --> 00:12:00.187
因为有了这个
新的后台应用刷新方法

00:12:00.254 --> 00:12:02.990
这是所有后台刷新活动
要经过的路径

00:12:03.190 --> 00:12:06.627
只要在WatchKit扩展代理上
添加这个简单的方法

00:12:06.860 --> 00:12:10.097
它会被回调
在任何一个刷新活动出现的时候

00:12:10.531 --> 00:12:13.133
那么第一个就是
自动快照

00:12:13.200 --> 00:12:15.068
这发生在应用暂停的时候

00:12:16.737 --> 00:12:20.541
但用户可能也会在其他时候
从应用上浏览信息

00:12:20.908 --> 00:12:23.210
所以就要常常更新快照

00:12:23.277 --> 00:12:24.745
我们就都自动处理了

00:12:25.245 --> 00:12:27.147
另一个可能就不这么明显

00:12:27.214 --> 00:12:29.016
就是在一个通知被浏览以后

00:12:29.683 --> 00:12:32.686
如果用户看到一个长通知

00:12:32.753 --> 00:12:34.321
他们可能已经看见
一些新信息

00:12:34.388 --> 00:12:36.490
将你应用里的新动态通知他们

00:12:36.890 --> 00:12:37.991
如果他们进入停靠栏

00:12:38.058 --> 00:12:40.160
但是看到的信息
是过时的

00:12:40.227 --> 00:12:41.995
肯定会很大跌眼镜

00:12:42.596 --> 00:12:44.831
所以当你的通知关闭后

00:12:44.998 --> 00:12:47.801
系统会自动安排
一个后台快照任务

00:12:47.868 --> 00:12:49.503
跟这个例子里一样

00:12:49.570 --> 00:12:52.472
这样你就能更新快照和complication

00:12:52.539 --> 00:12:55.075
从而保证一切
都保持最新状态并且同步

00:12:55.943 --> 00:12:57.845
当然 有的时候

00:12:57.911 --> 00:13:00.247
你会想自己安排更新

00:13:00.414 --> 00:13:02.282
你了解你的用户
也清楚你的数据

00:13:02.449 --> 00:13:06.119
所以有时候你就想
自己主动更新内容

00:13:07.054 --> 00:13:09.056
那么这里有两种方法可用

00:13:09.590 --> 00:13:11.592
第一是关于complication

00:13:11.758 --> 00:13:14.394
接下来的问题就是
快照里要放什么内容？

00:13:14.528 --> 00:13:16.830
首先也是最需要
放进快照里的

00:13:16.897 --> 00:13:19.566
就是你的应用里
日常显示的内容

00:13:19.900 --> 00:13:21.268
这样看上去很实时

00:13:21.335 --> 00:13:24.471
并且用户打开应用时
能看到你想要呈现的内容

00:13:26.139 --> 00:13:27.174
但是你也可以选择

00:13:27.241 --> 00:13:29.810
提供一些不同的
自定义信息

00:13:29.877 --> 00:13:33.447
这样在停靠栏上就很好看
而且便于一目了然地理解

00:13:35.249 --> 00:13:37.951
比如
Dexcom G5手机应用

00:13:38.085 --> 00:13:40.854
在这个应用里
我最关心的

00:13:41.221 --> 00:13:42.990
是我当前的血糖水平

00:13:43.657 --> 00:13:44.858
所以在停靠栏里

00:13:45.192 --> 00:13:48.061
我会看到突出的大数字
就在屏幕中央

00:13:49.463 --> 00:13:51.164
但是当我实际进入应用

00:13:51.231 --> 00:13:54.401
我就会更关心细节
而不仅仅是个读数

00:13:55.602 --> 00:13:57.137
所以当我把应用全屏

00:13:57.204 --> 00:14:00.207
它就可以转换
并显示更多的信息

00:14:00.274 --> 00:14:02.709
当我打开应用看到的
在这个例子里

00:14:02.776 --> 00:14:05.812
是一个历史图表
显示过去时间里更多的信息

00:14:07.080 --> 00:14:08.649
你不一定非要

00:14:08.715 --> 00:14:10.250
在停靠栏快照里
显示不同信息

00:14:10.317 --> 00:14:12.186
通常不那么做

00:14:12.252 --> 00:14:14.621
只要显示
应用里的内容就好

00:14:15.155 --> 00:14:18.091
但你的确有了更多灵活性
所以如果对应用来说

00:14:18.158 --> 00:14:20.260
在停靠栏快照里
显示不一样的东西很有意义

00:14:20.327 --> 00:14:23.130
那么就要保证
进入应用的时候的转换

00:14:23.197 --> 00:14:26.033
流畅和谐
不会出现冲突

00:14:30.037 --> 00:14:32.406
除了这些自动的快照任务

00:14:32.472 --> 00:14:34.074
和保持快照更新

00:14:34.141 --> 00:14:35.876
你可能也想定期

00:14:35.943 --> 00:14:38.846
在应用后台
更新数据

00:14:38.912 --> 00:14:41.515
那么也有几种方法
让你去实现它

00:14:41.949 --> 00:14:44.251
现在 你可能只想上网

00:14:44.318 --> 00:14:46.453
获取一些数据
那你就使用

00:14:46.520 --> 00:14:49.556
NSURLSession
和Watch Connectivity

00:14:51.225 --> 00:14:53.026
但是其实还有很多其他方法

00:14:53.093 --> 00:14:56.129
首先一个就是
更新complication

00:14:56.496 --> 00:14:59.166
complications
可以直接在表盘上看到

00:14:59.466 --> 00:15:00.767
所以更重要的就是

00:15:00.834 --> 00:15:02.736
他们也要实时更新

00:15:03.036 --> 00:15:05.606
那么现在有一种更新
只针对

00:15:05.672 --> 00:15:07.207
当前表盘上的应用

00:15:07.574 --> 00:15:09.743
这就是
静默complication推送更新

00:15:10.777 --> 00:15:13.280
现在这些更新类型
都在watchOS 2系统下

00:15:13.780 --> 00:15:16.950
但是它们不太好使
因为你无法保证

00:15:17.017 --> 00:15:19.253
在一天的时间内
能更新多少

00:15:19.720 --> 00:15:21.121
所以比较难以把握

00:15:21.188 --> 00:15:23.557
你能使用多少
和什么时候发送

00:15:23.857 --> 00:15:27.861
在watchOS 3下
这个更新有了巨大的改进

00:15:27.928 --> 00:15:30.130
我们现在可以保证
在一天的时间内

00:15:30.197 --> 00:15:33.133
表盘上的每个应用
可以收到50个推送更新

00:15:34.401 --> 00:15:36.303
这很好
因为它让你有机会

00:15:36.370 --> 00:15:39.039
计划在一天的时间内
要使用多少个更新

00:15:39.706 --> 00:15:41.842
那么举个例子
假设我们有个股票的应用

00:15:42.676 --> 00:15:44.211
我们就用最天真的想法

00:15:44.278 --> 00:15:47.381
就是在一整天里
发布50个更新

00:15:47.681 --> 00:15:49.783
这样就是每30分钟更新一次

00:15:50.884 --> 00:15:53.086
这也不是太坏
但是我们可以做到更好

00:15:53.153 --> 00:15:56.456
如果我们思考一下
这里显示的数据

00:15:56.523 --> 00:15:59.293
它们的相关信息
以及我们的用户行为

00:16:00.494 --> 00:16:01.728
比如说
假设我们知道

00:16:01.795 --> 00:16:04.765
用户一般会在
12点到6点之间睡觉

00:16:06.166 --> 00:16:07.568
这样的话

00:16:07.634 --> 00:16:11.338
我们就不需要
在这个时间段更新

00:16:11.405 --> 00:16:13.407
那么我们就可以
把剩余的更新次数

00:16:13.473 --> 00:16:14.708
分布在其他时间段

00:16:15.342 --> 00:16:18.879
这样我们的更新频率
就提高到20分钟一次

00:16:19.112 --> 00:16:22.182
这是个很大的改进
却只花费了很少的力气

00:16:23.784 --> 00:16:25.385
当然 如果我们更了解

00:16:25.452 --> 00:16:28.455
数据本身
并能将其也纳入考虑

00:16:29.022 --> 00:16:31.124
那么我们还能做到更好

00:16:31.792 --> 00:16:33.594
那么假设我们知道
我们的股票

00:16:33.660 --> 00:16:35.729
只来自于
纽约证券交易所

00:16:36.096 --> 00:16:39.233
那么我们的更新只要在
9:00到16:00之间

00:16:39.299 --> 00:16:40.467
就是开盘的时候

00:16:41.134 --> 00:16:44.571
这样频率就提升到
8.5分钟一次

00:16:45.405 --> 00:16:46.240
很显然

00:16:46.306 --> 00:16:49.610
这个特定的例子
不适用于大部分应用

00:16:49.810 --> 00:16:52.112
但是这个理念是可以的

00:16:52.513 --> 00:16:55.282
考虑下你所有的额外信息

00:16:55.349 --> 00:16:56.683
比如 你用户的习惯

00:16:56.917 --> 00:16:58.886
以及你所显示的数据类型

00:16:58.986 --> 00:17:03.223
你就有很多机会
来进一步提高用户体验

00:17:03.290 --> 00:17:04.958
当他们在手表上使用应用的时候

00:17:07.461 --> 00:17:11.464
但是这些都只是当前表盘上
显示的complications

00:17:12.566 --> 00:17:15.269
如果你的应用不在当前的表盘上

00:17:15.335 --> 00:17:17.905
而是在停靠栏里
或者在当前表盘上

00:17:17.971 --> 00:17:19.640
推送更新
似乎没有多大意义

00:17:19.705 --> 00:17:22.009
还有其他方法
能让你更新数据

00:17:23.143 --> 00:17:24.744
在这些情况下 你可能会想

00:17:24.810 --> 00:17:27.513
定期在后台更新

00:17:27.580 --> 00:17:28.749
在一天的时间内

00:17:32.719 --> 00:17:34.955
那么我们还有另外一个
后台应用刷新API

00:17:35.022 --> 00:17:37.791
它可以让你设置
下一次你要运行的时间

00:17:37.858 --> 00:17:40.661
而且每次运行
都会有些不同的东西

00:17:40.727 --> 00:17:41.795
供你选择

00:17:42.229 --> 00:17:46.133
你能通过NSURLSession或
Watch Connectivity下载数据

00:17:47.201 --> 00:17:49.970
你也可以只从手表的数据库里
下载新数据

00:17:50.037 --> 00:17:52.105
前提是你已经
拥有所有信息

00:17:53.574 --> 00:17:54.408
另外

00:17:54.474 --> 00:17:57.477
你还可以设置
下次更新的时间段

00:17:57.911 --> 00:18:01.381
所以这不是个固定的周期
不需要提前都想好

00:18:01.582 --> 00:18:03.550
每次运行
你都有机会选择

00:18:03.617 --> 00:18:05.519
下一次最佳的更新时间

00:18:05.786 --> 00:18:08.789
这样你就可以
按照数据类型进行优化

00:18:08.856 --> 00:18:11.124
因为你知道什么时候会更新

00:18:12.726 --> 00:18:13.994
现在 至少

00:18:14.061 --> 00:18:17.331
你能保证应用
可以每小时运行一次

00:18:18.198 --> 00:18:20.801
但是我们还有其他工具
可以让你

00:18:20.868 --> 00:18:22.769
更频繁的更新

00:18:23.604 --> 00:18:27.908
那么第一件事就是你的应用
要支持complication

00:18:28.175 --> 00:18:30.511
如果当前表盘上
有complication

00:18:30.744 --> 00:18:31.979
那么你的应用就可以

00:18:32.045 --> 00:18:34.014
更快的更新
不止每小时一次

00:18:34.915 --> 00:18:37.050
但是即便不在当前表盘上

00:18:37.384 --> 00:18:39.853
你也能提高更新频率

00:18:41.255 --> 00:18:43.824
可用的更新总数

00:18:44.291 --> 00:18:47.127
是固定的
对所有当前停靠栏里的应用来说

00:18:47.561 --> 00:18:50.130
如果停靠栏已满
并且所有十个应用都在

00:18:50.297 --> 00:18:53.133
那么每个应用的更新
都是一小时一次

00:18:53.400 --> 00:18:56.703
但是如果用户的停靠栏没有满
里面只有几个应用

00:18:57.004 --> 00:18:59.873
那么本来用于
其他未使用的应用的更新次数

00:18:59.940 --> 00:19:01.708
可以分发给当前的应用

00:19:02.442 --> 00:19:06.813
这样的话
一小时就不止一次更新了

00:19:08.115 --> 00:19:09.950
在你设计应用的时候

00:19:10.017 --> 00:19:12.452
也许一小时一次最便于计划

00:19:12.519 --> 00:19:14.254
因为这是最低保证

00:19:14.588 --> 00:19:17.257
但是记住
你可以让运行

00:19:17.324 --> 00:19:20.227
更频繁
根据不同的情况

00:19:23.030 --> 00:19:26.433
我最后想要讲的一点
是关于complication推送

00:19:27.868 --> 00:19:29.803
complication推送
当你想到推送

00:19:29.870 --> 00:19:33.440
第一个能想到的
就是服务器发起的推送

00:19:34.041 --> 00:19:35.409
这的确是一个选择

00:19:35.475 --> 00:19:38.345
你可以从服务器发起
complication静默推送

00:19:38.912 --> 00:19:40.314
但是你可能想不到

00:19:40.380 --> 00:19:42.683
其实complication推送

00:19:42.749 --> 00:19:45.085
也可以来自
iPhone上的应用

00:19:46.053 --> 00:19:49.623
推送更新API其实是Watch
Connectivity框架一部分

00:19:49.990 --> 00:19:53.026
那么如果你iPhone上的应用
因为某些其他原因而运行

00:19:53.093 --> 00:19:54.695
比如用户直接在使用

00:19:54.761 --> 00:19:57.865
又或者它在手机上运行了
后台应用刷新API

00:19:58.198 --> 00:20:00.968
它可给手表发一个
complication推送更新

00:20:01.335 --> 00:20:03.403
来更新
complication的UI

00:20:05.005 --> 00:20:06.640
所以 即便你没有服务器

00:20:06.707 --> 00:20:08.842
也可以进行推送

00:20:09.076 --> 00:20:11.512
并且可以利用这个方法

00:20:11.578 --> 00:20:13.347
让你的表盘保持更新

00:20:13.847 --> 00:20:14.915
这就是你要记住的

00:20:14.982 --> 00:20:18.752
当你设计应用的
complications和刷新策略时

00:20:20.487 --> 00:20:23.223
那么现在来快速总结下
后台应用刷新

00:20:23.290 --> 00:20:25.025
和它的工作原理

00:20:25.092 --> 00:20:27.027
而且我要特别再强调一次

00:20:27.094 --> 00:20:30.497
它是创建反应灵敏的应用时
非常重要的部分

00:20:30.764 --> 00:20:33.400
无论你在Apple Watch上创建
什么类型的应用

00:20:33.467 --> 00:20:35.502
我强烈建议
你们去看看

00:20:35.569 --> 00:20:37.938
“让你的手表时刻更新”的演讲

00:20:38.005 --> 00:20:40.040
更多地了解后台应用刷新

00:20:40.107 --> 00:20:43.510
以及如何让你的应用
保持活跃 灵敏和更新

00:20:45.345 --> 00:20:48.448
那么下面我们来讲讲
导航优化

00:20:50.083 --> 00:20:52.686
我之前说过
我们已经做了很多工作

00:20:52.753 --> 00:20:56.089
优化Apple Watch本身的导航

00:20:56.323 --> 00:20:59.159
所以系统已经可以
很快的找到你的应用

00:20:59.393 --> 00:21:02.930
下一步就是
优化应用里的导航

00:21:03.063 --> 00:21:05.332
这就能很快找到信息

00:21:05.399 --> 00:21:06.867
和用户需要的操作

00:21:08.302 --> 00:21:11.672
那么我就以一个常用的模式
作为开头

00:21:12.506 --> 00:21:16.109
许多应用都会
对它们的数据进行分层

00:21:16.810 --> 00:21:18.612
打个比方
这里有个顶层视图

00:21:18.679 --> 00:21:22.950
上面有很多信息
列的都是优先事项

00:21:23.083 --> 00:21:25.219
这种情况下
我写了一个应用来记录

00:21:25.285 --> 00:21:27.354
我今天喝的所有饮料

00:21:28.121 --> 00:21:31.058
现在 如果你需要
任何一个指定项目的信息

00:21:31.225 --> 00:21:33.894
你就可以点击它
它就会滑到细节页面

00:21:34.061 --> 00:21:36.930
那么这里我们看到
今天目前为止我喝了三杯咖啡

00:21:38.332 --> 00:21:39.666
在watchOS 2里

00:21:39.733 --> 00:21:42.669
如果你需要看
其他项目的更多信息

00:21:42.736 --> 00:21:43.971
你就可以按一下返回键

00:21:44.037 --> 00:21:46.139
找到那个项目
然后滑动进入

00:21:47.774 --> 00:21:49.843
现在这个看上去
没有多少负载

00:21:50.310 --> 00:21:54.248
但是根据要把
互动时间缩短到多少

00:21:54.381 --> 00:21:56.517
附加时间会来回变动

00:21:56.583 --> 00:21:58.719
这样就能很快提速

00:21:59.286 --> 00:22:02.022
在watchOS 3里
你会看到很多应用

00:22:02.089 --> 00:22:03.657
使用这种模式

00:22:03.724 --> 00:22:06.493
我们现在为其引入了新的导航风格

00:22:06.560 --> 00:22:09.663
你可以只用手指
或者数码表冠

00:22:09.863 --> 00:22:12.833
来快速滑动翻页
在不同的项目之间

00:22:13.033 --> 00:22:15.903
不用来回转换导航了

00:22:16.904 --> 00:22:19.706
如果你看看 比如说
股票和天气的应用

00:22:19.773 --> 00:22:22.442
他们经过重新设计
开启这种ok互动

00:22:22.843 --> 00:22:24.444
而且我们也想让你们
能很简单地

00:22:24.511 --> 00:22:26.113
把它应用到你的应用里

00:22:26.680 --> 00:22:29.583
WatchKit的表格界面控制
现在可以选择

00:22:29.650 --> 00:22:31.552
开启垂直页模式

00:22:31.885 --> 00:22:35.222
当你要导航进一个细节视图时

00:22:35.722 --> 00:22:37.257
选择这个就会十分简单

00:22:37.324 --> 00:22:39.193
你只要做几件事

00:22:39.259 --> 00:22:41.828
首先你当然是要
在表格上启动这一选项

00:22:42.996 --> 00:22:44.331
然后你还要注意

00:22:44.398 --> 00:22:46.600
在你的storyboard上
使用segues

00:22:46.667 --> 00:22:49.937
来表达
从表格到细节视图的转换

00:22:50.470 --> 00:22:53.207
这样你就给了WatchKit
所有它需要的信息

00:22:53.273 --> 00:22:55.909
让它能预生产
上层和下层的视图

00:22:56.143 --> 00:22:58.879
并把他们放进
垂直分页界面

00:22:59.046 --> 00:23:00.480
这样就可在它们之间移动了

00:23:01.815 --> 00:23:03.884
你看这也没有多少改变
而且十分简单

00:23:03.951 --> 00:23:05.752
你唯一要记住的

00:23:05.819 --> 00:23:09.756
就是要实际去监测它

00:23:09.823 --> 00:23:12.693
你还需要保证
细节视图的设计

00:23:12.759 --> 00:23:16.029
就是能把所有细节信息
放进一个屏幕里

00:23:16.730 --> 00:23:19.867
如果细节视图本身可以滑动

00:23:20.033 --> 00:23:21.735
那么细节视图里的滑动

00:23:21.802 --> 00:23:25.506
就会优先于
外部分页界面

00:23:25.973 --> 00:23:27.841
所以你一定要将注意力集中在

00:23:27.908 --> 00:23:30.244
简化细节项目的视图

00:23:30.444 --> 00:23:32.713
你还会发现
在股票和天气应用里

00:23:32.946 --> 00:23:34.815
本来watchOS 2里的这些视图

00:23:34.882 --> 00:23:37.651
要垂直滑动
并且包含大量信息

00:23:37.718 --> 00:23:39.286
而现在就只有一页

00:23:39.353 --> 00:23:41.555
所以就能很简单地转换

00:23:44.558 --> 00:23:47.494
就这样 我们让用户
可以很快地进入应用

00:23:48.061 --> 00:23:51.164
我们优化了后台刷新
让我们的数据保持更新

00:23:51.698 --> 00:23:54.468
我们也优化了导航
在应用里面

00:23:55.169 --> 00:23:56.770
最后一部分就是要保证

00:23:56.837 --> 00:23:59.606
个人与Apple Watch
的互动要短

00:23:59.806 --> 00:24:02.543
要让用户能尽快退出应用

00:24:03.243 --> 00:24:05.679
在Apple Watch上
这就意味着用户能放心

00:24:05.746 --> 00:24:07.214
不用端着手腕一直看

00:24:08.182 --> 00:24:10.684
有几种方法
可以让你实现这一想法

00:24:10.751 --> 00:24:12.252
我们这里就只看一个例子

00:24:12.586 --> 00:24:16.089
假设我们有个应用
是用来订晚餐的

00:24:17.124 --> 00:24:18.492
当我点击Buy键

00:24:18.559 --> 00:24:21.461
我就会开启
与一个服务器的网络活动

00:24:21.528 --> 00:24:23.130
它会进行几个操作

00:24:23.197 --> 00:24:25.699
来决定我是否
可以购买

00:24:25.832 --> 00:24:27.134
这可能需要点时间

00:24:27.501 --> 00:24:29.636
那么我首先倾向于显示

00:24:29.703 --> 00:24:31.839
给用户一个未决定的进度指示器

00:24:31.905 --> 00:24:33.740
让他们知道
处理进行中

00:24:33.807 --> 00:24:35.709
但是不知道多久能完成

00:24:35.843 --> 00:24:38.378
不幸的是 这样他们只能
举着胳膊不动

00:24:38.445 --> 00:24:41.682
等到任务完成出现点什么

00:24:42.282 --> 00:24:45.452
但是我很有信心
在绝大多数情况里

00:24:45.519 --> 00:24:46.987
这些任务都是会成功的

00:24:47.387 --> 00:24:50.757
让他们坐着等这么久
实际上对我也没有好处

00:24:51.258 --> 00:24:52.726
那么 你就可以考虑

00:24:52.793 --> 00:24:55.696
显示一些确定界面

00:24:55.963 --> 00:24:58.765
让用户相信
你在处理这个任务

00:24:58.832 --> 00:25:00.567
不需要等着它完成

00:25:00.868 --> 00:25:03.937
在这种情况下 我就说
“收到！我们正在处理你的订单！”

00:25:06.340 --> 00:25:07.708
当用户看到这个
他们就可以放心地

00:25:07.774 --> 00:25:08.942
放下手腕了

00:25:10.110 --> 00:25:14.281
那么你就可以继续在后台操作
最多有30秒的时间

00:25:14.348 --> 00:25:17.351
通过在NSProcessInfo上
使用后台活动API

00:25:19.419 --> 00:25:20.587
总的来讲 一切都不错

00:25:20.654 --> 00:25:22.823
而且你不用再把用户的注意力拉回来

00:25:23.023 --> 00:25:25.826
当然
有的时候也会出问题

00:25:26.026 --> 00:25:28.929
可能是无法连接服务器
也可能有其他的问题

00:25:29.196 --> 00:25:30.163
在这种情况下

00:25:30.230 --> 00:25:34.067
watchOS 3提供了
一个全新的用户通知框架

00:25:34.134 --> 00:25:37.704
它让你能够在手表上
直接计划本地通知

00:25:38.205 --> 00:25:40.474
这是个很好的方法
能在后台的时候

00:25:40.541 --> 00:25:42.543
就把用户的注意力拉回来

00:25:42.709 --> 00:25:44.511
让他们知道这里出了点问题

00:25:44.578 --> 00:25:46.747
并让他们能简单地修复问题

00:25:47.881 --> 00:25:49.917
在这个例子里
假设 很不幸

00:25:49.983 --> 00:25:51.852
我要点的鸡肉没有了

00:25:52.152 --> 00:25:54.888
那么我就弹出一个通知
让用户知道发生了什么

00:25:55.455 --> 00:25:58.091
当然通知里
也可以包含操作

00:25:58.258 --> 00:26:01.328
我可以设置几个按键在这儿
提供解决问题的选项

00:26:01.395 --> 00:26:03.530
或者我可以让用户
快速回到应用里

00:26:04.298 --> 00:26:06.733
这样就可以在应用的全屏视图里
自己解决

00:26:07.334 --> 00:26:09.369
用户通知框架
是很好的解决方法

00:26:09.436 --> 00:26:12.940
但是它也只是
把问题告诉用户

00:26:13.407 --> 00:26:15.209
而本地通知就更强大

00:26:15.275 --> 00:26:16.743
是对很多不同应用的巨大改进

00:26:17.578 --> 00:26:20.814
watchOS 3中
用户通知框架很棒的特性

00:26:20.881 --> 00:26:23.417
就在于它可以
在手表完全独立的情况下运行

00:26:23.483 --> 00:26:26.220
因为它是在手表上
直接安排通知

00:26:27.020 --> 00:26:29.156
但是现在你可以选择如何制作通知

00:26:29.223 --> 00:26:31.592
因为既可以选择使用
通知框架

00:26:31.658 --> 00:26:34.094
直接在手表上
安排通知时间

00:26:34.261 --> 00:26:36.930
也可以继续
使用watchOS 2同样的操作

00:26:37.331 --> 00:26:39.733
就是返回信息给你的手机应用
通过Watch Connectivity

00:26:39.800 --> 00:26:41.502
在手机上定制通知

00:26:42.002 --> 00:26:44.404
这两种其实都是
行之有效的方法

00:26:44.471 --> 00:26:47.040
取决于你想要达到什么目的

00:26:48.175 --> 00:26:51.178
他们之间最重要的区别
在于通知显示的地方

00:26:51.411 --> 00:26:54.615
如果你通过Watch Connectivity
发送信息给手机应用

00:26:54.681 --> 00:26:56.383
并且在手机上定制通知

00:26:56.617 --> 00:26:59.453
那么通知会同时
出现在手机和手表上

00:26:59.553 --> 00:27:01.622
这样不管你用哪个设备
都可以收到通知

00:27:01.688 --> 00:27:05.125
如果你在使用手机
它会出现在手机上

00:27:05.359 --> 00:27:06.260
如果你使用手表

00:27:06.326 --> 00:27:07.427
就显示手表里

00:27:08.195 --> 00:27:11.632
如果你用在手表上的
用户通知框架

00:27:12.065 --> 00:27:14.835
那么通知只会在手表上出现

00:27:14.902 --> 00:27:16.737
不会返回到手机

00:27:17.704 --> 00:27:20.240
而这可能正好就是
你希望的

00:27:20.307 --> 00:27:23.177
有些情况下
你确实要使通知

00:27:23.243 --> 00:27:25.579
只出现在手表上

00:27:25.646 --> 00:27:28.982
这个现在很容易实现
只要使用新的用户通知框架

00:27:30.050 --> 00:27:31.552
但更好的是你——

00:27:33.287 --> 00:27:34.121
谢谢

00:27:36.790 --> 00:27:39.593
但还有更好的情况
就是你根本不需要做选择

00:27:39.726 --> 00:27:42.429
如果你的目标
是让通知出现在

00:27:42.496 --> 00:27:43.964
正确的地方 不管怎样

00:27:44.198 --> 00:27:46.166
即便用户把手机落在了别处

00:27:46.300 --> 00:27:48.435
那么你可以选择
同时在两个设备上设置通知

00:27:48.502 --> 00:27:50.237
使用Watch Connectivity
发送信息

00:27:50.304 --> 00:27:52.372
给手机应用
然后在手机上设置

00:27:52.439 --> 00:27:54.908
或者只是用
云服务中的数据

00:27:54.975 --> 00:27:56.877
只要按照默认
在云服务中设置

00:27:57.211 --> 00:27:58.245
但这个设置也是要

00:27:58.312 --> 00:28:00.881
在手表上
使用新的用户通知框架

00:28:01.348 --> 00:28:05.252
如果你这么做
只要你用的是同一个通知识别符

00:28:05.319 --> 00:28:06.787
在两次设置通知的时候

00:28:07.221 --> 00:28:09.289
watchOS可以消除
这些通知的重复

00:28:09.356 --> 00:28:12.492
因此它们只会
在手表上出现一次 而不是两次

00:28:13.961 --> 00:28:16.496
下面看一些用户通知框架里
很棒的新内容

00:28:19.867 --> 00:28:22.836
由于个人互动
在手表上的时间很短

00:28:23.337 --> 00:28:25.239
对于某些应用
你可能想

00:28:25.305 --> 00:28:27.307
在长期内多次使用

00:28:28.075 --> 00:28:30.077
比如 我这里有
鸡肉菜饼的菜谱

00:28:30.143 --> 00:28:32.779
那我要去商店买些
我所需要的食材

00:28:33.881 --> 00:28:36.483
现在在watchOS 3里
每当我抬起手腕

00:28:36.550 --> 00:28:39.152
手表就会显示
我最后一次使用的应用

00:28:39.520 --> 00:28:43.257
这样我就能很快的看到
我还有哪些东西要买

00:28:43.323 --> 00:28:45.459
并勾掉已经买了的东西

00:28:47.594 --> 00:28:49.196
我被带回到上一次使用的应用

00:28:49.263 --> 00:28:51.565
使用时间距离现在
不能超过8分钟

00:28:52.432 --> 00:28:54.568
这很好用
因为它能让你设计的应用

00:28:54.635 --> 00:28:56.270
具备这种互动模式类型

00:28:56.570 --> 00:28:59.039
它用于短时互动

00:28:59.106 --> 00:29:00.707
但是可以长时间运行

00:29:01.341 --> 00:29:04.611
对所有watchOS 3的用户来说
它是新用户默认设定

00:29:04.678 --> 00:29:08.515
所以它设置起来很简单
并能让你根据它来创建和设计应用

00:29:11.251 --> 00:29:12.986
这里只是几种方法

00:29:13.053 --> 00:29:16.790
是我们一直想用来改进
watchOS 3系统下的应用互动

00:29:17.591 --> 00:29:19.660
但是还有很多其他的方法

00:29:19.726 --> 00:29:20.794
我会推荐大家去听听

00:29:20.861 --> 00:29:23.397
“快速互动技巧”
watchOS演讲之一

00:29:23.463 --> 00:29:26.333
在那里你能更详细地了解
这些多种多样的想法

00:29:26.400 --> 00:29:27.868
获得更多启发

00:29:30.571 --> 00:29:31.572
以上就是导航

00:29:32.673 --> 00:29:33.807
下面我们来详细讲讲

00:29:33.874 --> 00:29:37.144
改进后的API可用性
在watchOS 3系统下

00:29:41.481 --> 00:29:42.516
就像我之前说的

00:29:42.583 --> 00:29:45.819
我们带来了很多很棒的框架
来自我们其他的平台

00:29:45.886 --> 00:29:47.354
我们有了一些特别好的新框架

00:29:47.421 --> 00:29:49.523
比如
用户通知框架

00:29:49.857 --> 00:29:53.126
我们还新添了很多API
给许多不同的框架

00:29:53.193 --> 00:29:55.062
都是Apple Watch已经安装的

00:29:56.396 --> 00:29:58.765
那么我们就从已讲过的一个开始吧

00:29:59.233 --> 00:30:00.334
后台应用刷新

00:30:00.868 --> 00:30:04.872
我又把它拿来讲是为了强调
它在我看来有多重要

00:30:06.006 --> 00:30:07.908
它能带给你的
三个最重要的影响

00:30:08.008 --> 00:30:09.910
就是设置更新的能力

00:30:10.777 --> 00:30:12.746
运行多功能推送更新

00:30:12.813 --> 00:30:15.582
并保证每天50个

00:30:16.350 --> 00:30:18.719
还有保证快照和文档的更新

00:30:18.785 --> 00:30:22.489
并且同步你的通知
和complications

00:30:23.824 --> 00:30:24.958
再说一次 强烈推荐

00:30:25.025 --> 00:30:27.294
“让手表应用保持更新”演讲

00:30:27.361 --> 00:30:29.162
里面有超多相关的信息

00:30:31.465 --> 00:30:34.801
健美应用是
特别需要保持更新的

00:30:35.169 --> 00:30:37.304
因为在锻炼中
最重要的就是

00:30:37.371 --> 00:30:39.406
要显示当前的信息

00:30:39.606 --> 00:30:41.542
而且在整个锻炼过程中都要不断更新

00:30:42.109 --> 00:30:44.578
那么今年对锻炼应用的一大改进

00:30:44.645 --> 00:30:47.381
就是watchOS 3系统下
它们将继续在后台运行

00:30:47.447 --> 00:30:50.284
并持续整个运动时间

00:30:52.019 --> 00:30:54.821
这让你能够
监测锻炼的进度

00:30:55.122 --> 00:30:58.058
观察——使用所有的传感器API

00:30:58.125 --> 00:30:59.626
来跟上进度

00:30:59.693 --> 00:31:03.297
并且提醒用户
通过通知 触动或者声音

00:31:04.731 --> 00:31:06.266
当然
我们也改进了

00:31:06.333 --> 00:31:08.468
对心率和加速计的访问

00:31:08.535 --> 00:31:12.573
现在他们可以在整个锻炼过程中
提供连续值

00:31:12.639 --> 00:31:15.309
而不用把这些值
在增量中进行批处理

00:31:15.375 --> 00:31:16.743
然后大段大段的传送

00:31:17.144 --> 00:31:19.012
这样一来就能方便追踪

00:31:19.079 --> 00:31:22.850
当前锻炼的情况
并在整个过程中保持更新

00:31:23.717 --> 00:31:26.119
由于他们在运行中
你可以同时更新你的UI

00:31:26.353 --> 00:31:28.889
它可以保证
每当用户抬起手腕

00:31:28.956 --> 00:31:30.123
他们很快就能看到

00:31:30.190 --> 00:31:33.360
当前准确的锻炼状态
而不会有额外的延迟

00:31:34.761 --> 00:31:37.464
今年是很重要的一年
真的 对运动应用来说

00:31:37.531 --> 00:31:39.499
我们有关于这个主题的一整场演讲

00:31:39.566 --> 00:31:41.802
并且讲解了很多对这类应用的其他改进

00:31:41.935 --> 00:31:44.137
所以一定要关注
“构建完美的锻炼应用”

00:31:44.204 --> 00:31:46.740
去了解如何制作你的运动应用

00:31:46.807 --> 00:31:48.375
让其在watchOS 3下大放异彩

00:31:50.177 --> 00:31:52.679
但是这里有一点
我要先重点讲一下

00:31:52.746 --> 00:31:54.414
就是后台运行时间

00:31:55.649 --> 00:31:57.751
因为这里需要做一点平衡

00:31:58.018 --> 00:32:01.455
你肯定是想要应用
在运动中时刻更新

00:32:01.922 --> 00:32:04.892
但是同时你又想保证
最佳的用户体验

00:32:04.958 --> 00:32:06.994
在其他的时间里

00:32:07.060 --> 00:32:09.263
这就要注意
节省用电量

00:32:10.831 --> 00:32:12.266
其中很重要的一点

00:32:12.332 --> 00:32:14.868
就是一定
要关注CPU

00:32:14.935 --> 00:32:16.637
在运动时间中占用了多少

00:32:17.437 --> 00:32:20.507
Xcode现在有个很棒的界面
可以让你监测这个

00:32:20.841 --> 00:32:22.676
不仅是在某刻的占用量

00:32:23.110 --> 00:32:26.647
还有在某段时间内
占用的总量

00:32:28.315 --> 00:32:30.817
在第一部分
这里有个清晰的视图

00:32:30.884 --> 00:32:32.119
就在顶部

00:32:32.186 --> 00:32:35.055
这里告诉你
你现在的CPU占用量

00:32:35.556 --> 00:32:36.490
下面靠中间

00:32:36.557 --> 00:32:39.660
是一个漂亮的图表
显示过去时间内

00:32:39.927 --> 00:32:41.762
CPU的历史使用量

00:32:43.564 --> 00:32:47.167
现在 你可以清楚地看到这里的峰值
就是我们工作量很大的地方

00:32:47.334 --> 00:32:49.102
但是在黄色部分
在中间

00:32:49.169 --> 00:32:51.905
你能看到我们提供了
一个滚动的CPU平均使用量

00:32:51.972 --> 00:32:54.208
这是后台应用所使用的量

00:32:54.274 --> 00:32:55.375
在某一段时间内

00:32:55.843 --> 00:32:57.411
这一部分
是我要重点关注的

00:32:57.477 --> 00:32:58.745
也是最重要的

00:32:58.946 --> 00:33:01.481
因为当你的运动应用
在后台运行的时候

00:33:01.548 --> 00:33:02.983
它会限制

00:33:03.050 --> 00:33:06.053
某段时间内

00:33:06.119 --> 00:33:08.088
普通CPU使用总量

00:33:08.388 --> 00:33:10.757
你要始终低于这个限制
以保证

00:33:10.991 --> 00:33:12.693
你的应用可以持续
在后台运行

00:33:12.759 --> 00:33:15.929
并为用户节省电量
以便在其他时间使用

00:33:17.531 --> 00:33:20.067
这个限制
在Xcode里明确标明

00:33:20.133 --> 00:33:21.401
用红色的虚线

00:33:21.702 --> 00:33:24.204
这样你能观察到
平均用量什么时候接近它

00:33:24.271 --> 00:33:25.806
并且一定要控制在这个值之内

00:33:26.840 --> 00:33:28.775
同样 还有很多信息

00:33:28.842 --> 00:33:32.112
关于后台运动锻炼的体验和改进

00:33:32.179 --> 00:33:33.580
请一定要去查阅更多资料

00:33:33.647 --> 00:33:35.749
但是有一件事
你要记得

00:33:35.816 --> 00:33:38.652
就是CPU用量
在你开发这些应用的时候

00:33:40.721 --> 00:33:43.323
除了传感器的改进
针对这些类型的应用

00:33:43.390 --> 00:33:46.493
通过让心率和加速计
持续可用

00:33:46.793 --> 00:33:49.997
我们还有很多新的
硬件访问API

00:33:50.564 --> 00:33:54.501
表冠中的时间让你可以
用数码表冠原始访问转换事件

00:33:55.536 --> 00:33:57.971
在watchOS 2
你的应用可以使用表冠

00:33:58.038 --> 00:34:00.174
在界面中滑动

00:34:00.541 --> 00:34:03.277
或者选择列表中的项目
使用选择控件

00:34:03.844 --> 00:34:08.081
当然 我们也看到许多
选择控件的创新用法

00:34:08.148 --> 00:34:10.384
在其他有趣的事上

00:34:10.583 --> 00:34:11.885
我们发现所有人

00:34:11.952 --> 00:34:14.321
都想对数码表冠的事件
进行原始访问

00:34:14.487 --> 00:34:15.989
现在这个已经可以用在

00:34:16.056 --> 00:34:18.559
所有应用的其他类型的互动中

00:34:19.893 --> 00:34:20.726
现在——

00:34:25.732 --> 00:34:30.771
手势识别方便了
在应用上添加接触互动

00:34:31.071 --> 00:34:34.608
这里有特别多的
单指互动手势

00:34:34.675 --> 00:34:39.847
比如按 滑 摇和长按
这些都能很简单地添加到

00:34:39.913 --> 00:34:42.315
你所有不同的
WatchKit界面元素

00:34:42.382 --> 00:34:44.952
这样你的应用
在屏幕的不同地方

00:34:45.018 --> 00:34:46.353
就会有不同的反应方式

00:34:47.254 --> 00:34:48.755
我们还做了一个陀螺仪

00:34:48.822 --> 00:34:51.058
现在可以辅助加速计

00:34:51.291 --> 00:34:54.561
那么你已经知道了这么多
设备的手势信息

00:34:54.695 --> 00:34:56.530
可用于各种有趣的实际操作

00:34:57.631 --> 00:34:58.732
然后 快速——唔

00:34:58.966 --> 00:34:59.800
来吧

00:35:02.469 --> 00:35:04.204
再说一下
“快速互动技巧”演讲

00:35:04.271 --> 00:35:07.040
提供了很多信息
关于互动和其他实用示例

00:35:07.441 --> 00:35:09.109
我想给你们
看几个例子

00:35:09.176 --> 00:35:11.411
就是它能实现的是很酷的东西

00:35:11.945 --> 00:35:15.449
首先 你看到这里
Acorns借助了crown

00:35:15.916 --> 00:35:18.752
让你能快速滑动
浏览一个图表的信息

00:35:18.819 --> 00:35:23.156
它展示的是
你的账户的历史信息

00:35:23.824 --> 00:35:25.259
所以在一个单一简单的界面

00:35:25.325 --> 00:35:27.561
你可以快速移动
浏览很多信息

00:35:27.628 --> 00:35:28.962
屏幕都能显示

00:35:31.331 --> 00:35:33.100
这个是
Sweat with Kayla

00:35:33.166 --> 00:35:37.471
它利用了滑动手势

00:35:37.538 --> 00:35:39.940
在不同的锻炼中快速浏览

00:35:40.007 --> 00:35:41.708
然后选择自己想要的一个

00:35:42.676 --> 00:35:45.279
当然 你还可以使用
数码表冠来移动

00:35:45.345 --> 00:35:48.215
只要轻轻一点
就可以启动你感兴趣的内容

00:35:48.849 --> 00:35:51.118
你会发现
这里有些有趣的视觉效果

00:35:51.185 --> 00:35:53.954
给这个界面增添了
些许生机

00:35:54.588 --> 00:35:56.690
为了让这个可以用在
你的所有应用上

00:35:56.790 --> 00:35:57.925
我们提供很多漂亮图表/b&gt;

00:35:57.991 --> 00:36:00.494
和媒体框架
Apple Watch而设计的

00:36:00.794 --> 00:36:03.397
SpriteKit和SceneKit
然你可以轻松添加

00:36:03.463 --> 00:36:06.300
2D和3D的图表
还有动画

00:36:06.500 --> 00:36:08.302
来提升应用的各个部分

00:36:08.802 --> 00:36:09.903
当然你也可以把它们

00:36:09.970 --> 00:36:13.440
用于显示
长通知界面

00:36:13.674 --> 00:36:16.677
来让你的通知
更加有趣生动

00:36:18.345 --> 00:36:21.348
关于简化导航
我们讲了很多

00:36:21.415 --> 00:36:24.117
我们也想能够
播放视频

00:36:24.184 --> 00:36:25.986
就在应用的界面上

00:36:26.787 --> 00:36:29.957
我们为 watchOS 2应用
添加了视频播放器

00:36:30.390 --> 00:36:31.525
但是要在这里使用

00:36:31.592 --> 00:36:34.127
就会进入一个
单独的全屏界面

00:36:34.194 --> 00:36:36.964
你在这里观看视频
看完了要退出

00:36:37.064 --> 00:36:38.298
有了在线视频回放

00:36:38.365 --> 00:36:41.235
你就再也不用
离开应用的主界面

00:36:41.301 --> 00:36:42.936
你可以直接在那里播放

00:36:43.270 --> 00:36:45.372
更好的是
它支持自动播放

00:36:45.572 --> 00:36:47.941
一旦视频在屏幕上出现

00:36:48.008 --> 00:36:50.377
它就会自动播放
消失的时候就会暂停

00:36:50.777 --> 00:36:53.514
如果你有很多个短视频
在一个滑动列表上

00:36:53.580 --> 00:36:55.048
任何时候出现在当前屏幕上的视频

00:36:55.115 --> 00:36:57.484
都会自动播放
而其他的就会暂停

00:36:57.751 --> 00:36:59.052
它提供了很好的方法

00:36:59.119 --> 00:37:01.488
让你在应用里
添加短视频

00:37:02.222 --> 00:37:05.092
由于停靠栏里的应用是活动的

00:37:05.526 --> 00:37:07.661
自动播放功能
甚至可以在停靠栏使用

00:37:07.961 --> 00:37:09.196
所以如果你有一个短视频

00:37:09.263 --> 00:37:12.032
需要在滑动停靠栏的时候显示出来

00:37:12.099 --> 00:37:15.536
当用户进入你的应用
这个视频就可以直接开始播放

00:37:15.602 --> 00:37:17.271
甚至都不用让应用全屏

00:37:17.804 --> 00:37:20.440
这真的是watchOS 3中
很棒的的视频改进

00:37:23.310 --> 00:37:25.579
SpriteKit和SceneKit
可以用在任何地方

00:37:25.646 --> 00:37:27.814
这里你看到的是
七分钟锻炼

00:37:27.881 --> 00:37:31.618
它很好的利用了SceneKit
来实现很多视觉效果

00:37:31.685 --> 00:37:34.488
这个可以用在iPhone应用里
也能用在Apple Watch上

00:37:35.055 --> 00:37:37.391
你能看到的运动
正是你想要去做的

00:37:37.457 --> 00:37:39.459
并且很清楚显示了
你要怎么做

00:37:41.195 --> 00:37:44.865
那么除了在应用里添加很多
有趣的视觉效果

00:37:45.232 --> 00:37:48.502
SpriteKit和SceneKit也是
短时互动游戏的好平台

00:37:50.537 --> 00:37:53.240
我们也把GameKit带入了
Apple Watch和watchOS 3系统

00:37:53.640 --> 00:37:55.008
它能让你很方便地

00:37:55.075 --> 00:37:58.111
添加回合制游戏
在你的手表应用里

00:37:59.313 --> 00:38:03.350
由于GameKit的回合制游戏API
建立在NSURLSession之上

00:38:03.417 --> 00:38:05.285
他们在没手机的情况下
甚至也能运行

00:38:05.352 --> 00:38:07.354
只要你的手表能连上
已知的无线网络

00:38:09.590 --> 00:38:12.192
GameKit成就API
也可以用于

00:38:12.259 --> 00:38:15.229
获得Apple Watch的成就
它们以后可以

00:38:15.295 --> 00:38:19.533
在安装了这个游戏的iPhone
iPad或者其他平台上看到

00:38:20.801 --> 00:38:22.169
当然 有AV foundation

00:38:22.236 --> 00:38:25.272
就能很简单的
用手表扬声器播放声音

00:38:27.508 --> 00:38:30.377
Apple Watch上的游戏
只是刚刚起步

00:38:30.444 --> 00:38:32.646
但是现在有了这么多新框架
我真的很期待

00:38:32.713 --> 00:38:34.781
想看看你们可以创造出什么样的

00:38:34.848 --> 00:38:37.017
手表短时互动游戏

00:38:37.484 --> 00:38:38.652
下面给你们一个理念

00:38:38.719 --> 00:38:41.989
关于如何
成功制造一个有趣的游戏

00:38:42.322 --> 00:38:44.892
我这里来展示一个简短的视频

00:38:44.958 --> 00:38:47.160
这是WoGa正在开发的
一个新游戏

00:38:47.227 --> 00:38:48.228
叫做垂钓时光

00:38:49.229 --> 00:38:51.665
就是让我们在手表上
在短时间内钓鱼

00:38:52.132 --> 00:38:55.135
划一下
就投出鱼线

00:38:55.569 --> 00:38:57.871
然后用数码表冠
放下鱼饵

00:38:57.938 --> 00:38:59.540
到我想要的深度

00:38:59.940 --> 00:39:02.309
现在 我可以放一会儿
等一等

00:39:02.409 --> 00:39:04.077
或者点一下
立刻开始钓鱼

00:39:04.678 --> 00:39:05.712
鱼貌似上钩了

00:39:06.079 --> 00:39:08.215
现在再次用这个表冠收线

00:39:08.615 --> 00:39:10.884
但是我实际上
没钓到

00:39:11.285 --> 00:39:13.320
这条鱼
估计很开心

00:39:13.387 --> 00:39:15.789
虽然我们的渔夫
可不怎么高兴

00:39:17.524 --> 00:39:21.562
所以这真的很酷
因为你能添加这么有趣的图表

00:39:21.628 --> 00:39:24.998
看到这么漂亮的动画
通过使用Apple Watch的SpriteKit

00:39:25.199 --> 00:39:26.533
我真的很期待

00:39:26.600 --> 00:39:28.769
能看到你们创造的东西

00:39:30.504 --> 00:39:32.539
下一部分我要讲到CloudKit

00:39:33.841 --> 00:39:35.843
我们已经把CloudKit
带入了watchOS SDK

00:39:36.043 --> 00:39:39.346
引进了新的CK Share API
极大地方便了

00:39:40.247 --> 00:39:42.549
在不同的用户之间分享数据

00:39:42.783 --> 00:39:44.985
它也建在
NSURLSession之上

00:39:45.219 --> 00:39:48.255
所以运行起来很简单
即使手机不在身边

00:39:48.789 --> 00:39:51.859
这有一整场关于CloudKit的演讲
“CloudKit的新特性”

00:39:51.925 --> 00:39:53.660
我强烈推荐你们去看

00:39:56.496 --> 00:39:58.031
最后讲讲Apple Pay

00:39:58.799 --> 00:40:01.935
Apple Watch为买东西
提供了很好的支付方式

00:40:02.002 --> 00:40:03.937
当然 当Apple Watch
开了Apple Pay功能

00:40:04.004 --> 00:40:07.140
你就可以在应用里
购买实物商品

00:40:07.407 --> 00:40:09.209
只要按两下边键

00:40:10.511 --> 00:40:13.347
你有很多种可以使用的方法

00:40:13.614 --> 00:40:15.849
比如
你可以选择

00:40:16.283 --> 00:40:18.719
提供最常见的商品

00:40:18.785 --> 00:40:20.454
就像我每天的午餐

00:40:20.521 --> 00:40:23.690
这样我每天吃午饭的时候
就可以很简单的订购

00:40:23.757 --> 00:40:24.691
直接从手表上下单

00:40:25.158 --> 00:40:27.394
你可以用很多种方法
售卖实物商品

00:40:27.461 --> 00:40:29.096
通过在手表里使用Apple Pay

00:40:31.064 --> 00:40:35.602
这就只是一些API
它们是watchOS 3 SDK的一部分

00:40:35.669 --> 00:40:38.672
这里有很多新东西
一定要去看看

00:40:39.673 --> 00:40:43.043
演讲的最后
我们讲一下发现性和配置

00:40:43.377 --> 00:40:46.213
因为 还是那样
创建一个好的手表应用只是第一步

00:40:46.280 --> 00:40:48.916
你还要保证
用户能轻松地

00:40:48.982 --> 00:40:50.751
发现它并安装它

00:40:52.386 --> 00:40:56.990
那么第一个改进
就是iOS 10 Apple Watch应用

00:40:57.658 --> 00:40:59.526
这是一个全新的表盘画廊

00:40:59.593 --> 00:41:02.930
显示了用户可以添加到手表里的
所有可用的表盘样式

00:41:03.530 --> 00:41:05.599
更好的是
就在屏幕的正上方

00:41:05.666 --> 00:41:09.403
有一整个部分
是专门为你的应用设计的

00:41:09.837 --> 00:41:13.140
打开十分简单
只要几步就可以

00:41:14.007 --> 00:41:17.711
那么首先你要使用一些
新的ClockKit API

00:41:18.779 --> 00:41:20.814
你已在watchOS 2里
有了一个API

00:41:20.881 --> 00:41:23.016
来定义
complication模板视图

00:41:24.318 --> 00:41:26.553
这个API
在watchOS 3里被改进了

00:41:26.854 --> 00:41:30.858
它不仅返回一个字符串
给你的complication数据

00:41:31.158 --> 00:41:33.193
而且返回本地化的key

00:41:33.360 --> 00:41:35.729
让你能获得适用于所有语言的
本地化的字符串

00:41:36.363 --> 00:41:38.065
这很重要
因为第二步

00:41:38.131 --> 00:41:40.300
就是创建一个
complication bundle

00:41:40.701 --> 00:41:43.136
你要用——
你要使用模拟器

00:41:43.670 --> 00:41:46.106
运行应用
创建一个complication bundle

00:41:46.173 --> 00:41:49.610
这就会生成一个静态表达式
给complication模板

00:41:49.776 --> 00:41:51.745
之后可以
放到iPhone应用里

00:41:52.880 --> 00:41:54.815
这很简单
而且通过它

00:41:54.882 --> 00:41:58.852
你你就可以进入画廊并显示出来

00:41:59.887 --> 00:42:02.556
静态表达是必须的
因为只有这样我们才能让

00:42:02.623 --> 00:42:04.958
complication的显示
能适应这个表面

00:42:05.025 --> 00:42:07.494
即使你的应用
还没有安装到手表上

00:42:08.362 --> 00:42:11.298
就这几步
却能达到不可思议的成果

00:42:11.365 --> 00:42:13.433
你的应用就直接显示在画廊里了

00:42:13.934 --> 00:42:15.068
gallery是第一个

00:42:15.135 --> 00:42:17.404
新手表用户在匹配好手表后看到的东西

00:42:17.804 --> 00:42:20.274
所以你必须要
出现在这里

00:42:21.642 --> 00:42:24.178
除了gallery
我们还简化了

00:42:24.244 --> 00:42:26.880
自定义表面
和把应用装到上面的流程

00:42:27.247 --> 00:42:30.617
你随时都可以
在Apple Watch配置表面

00:42:30.684 --> 00:42:33.587
在iOS 10里iPhone上的
Apple Watch应用

00:42:33.654 --> 00:42:36.390
现在也引入了
整个表面配置UI

00:42:36.690 --> 00:42:37.791
显然 它们是同步的

00:42:37.858 --> 00:42:41.228
所以你在一个设备上的更改
也会出现在另一个设备上

00:42:41.628 --> 00:42:44.865
现在你在手机上能很轻松地
选择所有你想要的complications

00:42:44.932 --> 00:42:48.101
显示在Apple Watch表面上

00:42:48.569 --> 00:42:50.204
有了快速表面转换

00:42:50.437 --> 00:42:53.807
就有了更多理由
去做complication

00:42:54.141 --> 00:42:56.476
因为越来越多的用户
会使用不同的表面

00:42:56.743 --> 00:42:58.412
而你的应用就可以在其中显现

00:43:00.414 --> 00:43:02.816
配置的最后一部分
就是停靠栏

00:43:03.183 --> 00:43:05.419
很明显
你可以配置停靠栏

00:43:05.485 --> 00:43:07.120
在iPhone中的
Apple Watch应用里

00:43:07.321 --> 00:43:09.957
在停靠栏添加或删除应用
很简单

00:43:10.023 --> 00:43:11.358
也可以重新排列

00:43:11.792 --> 00:43:14.561
更重要的是
这都可以在手表上完成

00:43:15.128 --> 00:43:18.465
而且这里有一个特色
让你能轻松发现

00:43:18.532 --> 00:43:20.200
你可以在停靠栏添加应用

00:43:20.934 --> 00:43:23.937
你最后运行的应用
会始终显示在停靠栏里

00:43:24.004 --> 00:43:25.839
即便你没有特意把它放在里面

00:43:26.206 --> 00:43:29.309
如果用户安装了你的应用
但却不知道

00:43:29.376 --> 00:43:30.978
他们可以直接在停靠栏里加东西

00:43:31.078 --> 00:43:33.680
他们回到主屏幕
就会发现这个图标并打开它

00:43:33.747 --> 00:43:36.283
下一次他们再回到停靠栏
就会看到你应用出现在那

00:43:36.350 --> 00:43:38.552
下面有一个大大的按键
写着“存入停靠栏”

00:43:38.886 --> 00:43:39.853
只要轻轻一点

00:43:39.920 --> 00:43:42.155
它就会被永久加入
停靠栏里了

00:43:42.689 --> 00:43:45.225
因此发现添加
真的很容易

00:43:45.292 --> 00:43:47.628
而且可以
直接从手表里添加

00:43:50.697 --> 00:43:52.399
再说一次 你会听到很多关于

00:43:52.466 --> 00:43:55.602
创建一目了然的
可操作性强的和反应灵敏的应用的信息

00:43:56.270 --> 00:43:58.472
而且我特别建议你
一直把这点记在脑子里

00:43:58.639 --> 00:44:01.008
这里还有一场设计演讲
主讲人是Michael

00:44:01.074 --> 00:44:05.879
你可以去听一听
设计奇妙Apple Watch体验

00:44:05.946 --> 00:44:07.948
他会讲解更多
跟这些主题有关的东西

00:44:08.015 --> 00:44:09.449
所以 一定去听听

00:44:11.018 --> 00:44:13.320
反应性也是很重要的一部分

00:44:13.420 --> 00:44:15.989
这里也有两场演讲
是围绕这个主题

00:44:16.089 --> 00:44:18.392
一场是
“架构watchOS 3的性能”

00:44:18.725 --> 00:44:20.427
另一场“保持手表应用更新”

00:44:20.694 --> 00:44:22.496
这两场是你
一定想去听的演讲

00:44:22.563 --> 00:44:24.831
它能让你了解
后台应用刷新的所有好处

00:44:24.998 --> 00:44:26.200
并且保证你的应用

00:44:26.266 --> 00:44:28.468
时时更新
对watchOS 3系统反应灵敏

00:44:28.802 --> 00:44:31.772
这一周还有很多其他演讲

00:44:31.839 --> 00:44:34.808
里面有大量关于
Apple Watch的信息

00:44:35.008 --> 00:44:37.711
还有很多演讲
是专门针对Apple Watch的

00:44:37.978 --> 00:44:39.379
谢谢大家的到来

00:44:39.446 --> 00:44:41.815
我已迫不及待想看你们在
Apple Watch上的精彩设计了

00:44:42.115 --> 00:44:43.317
祝你们本周其余会议中过得愉快