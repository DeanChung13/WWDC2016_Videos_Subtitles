00:00:19.786 --> 00:00:22.723 
iMessage应用和贴图
第一部分介绍信息应用和贴图

00:00:30.898 --> 00:00:32.698 
大家早上好

00:00:33.267 --> 00:00:36.003 
欢迎来到第一部分
iMessage应用和贴图

00:00:36.270 --> 00:00:40.007 
我是Bhaskar 我是一个工程师
来自苹果的信息团队

00:00:41.675 --> 00:00:43.677 
今天我们要介绍iMessage应用

00:00:43.844 --> 00:00:46.246 
它的意义是你将能编写应用

00:00:46.313 --> 00:00:49.082 
它运行在
短信应用的上下文中

00:00:51.118 --> 00:00:53.820 
iMessage应用可以提供
三种主要的内容

00:00:55.822 --> 00:00:58.559 
第一 它们可以
提供可交互的短信息

00:00:58.825 --> 00:01:02.196 
可交互的短信息是一种
你的应用生成的信息

00:01:02.262 --> 00:01:05.832 
而当你的用户点击这条信息时
它会启动你的应用

00:01:06.433 --> 00:01:09.036 
比如说 在这里展示的这个截图中

00:01:09.436 --> 00:01:12.306 
我正使用DoorDash应用
向我的朋友们发送菜单

00:01:12.372 --> 00:01:14.308 
有关我们今晚的派对

00:01:14.808 --> 00:01:17.678 
他们将可以在手机上
看到这条短信息

00:01:17.945 --> 00:01:20.247 
而如果它们已经
安装了这个应用

00:01:20.314 --> 00:01:23.417 
他们就可以点击它
而点击操作会启动DoorDash

00:01:23.650 --> 00:01:25.919 
此时他们
就可以修改菜单了

00:01:25.986 --> 00:01:28.288 
向其中添加信息
并回复给我

00:01:30.257 --> 00:01:32.125 
iMessage应用也可提供贴图

00:01:32.492 --> 00:01:35.963 
贴图是你的应用
所生成的图片

00:01:36.063 --> 00:01:38.532 
我们相信它可以创造一种很有趣的

00:01:38.599 --> 00:01:41.735 
交互性体验
在iMessage用户之间

00:01:44.505 --> 00:01:47.908 
最后 iMessage应用
可以提供任意其他种类的

00:01:47.975 --> 00:01:51.445 
短信息所能包含的内容
比如照片

00:01:51.678 --> 00:01:54.481 
视频 文本 链接等等

00:01:57.518 --> 00:02:01.154 
且在iOS X中我们会提供一个
Message App Store

00:02:01.622 --> 00:02:03.724 
这意味着
你写的应用

00:02:03.790 --> 00:02:06.460 
与你创造的应用会被
显示并展示

00:02:06.527 --> 00:02:07.728 
在Messages App Store中

00:02:08.262 --> 00:02:11.331 
用户可以通过短信息
来访问这个App Store

00:02:11.398 --> 00:02:13.967 
它们将可以
下载你的应用

00:02:15.068 --> 00:02:17.504 
你的用户
所下载的应用

00:02:17.571 --> 00:02:19.606 
将被展示在短信息的UI中

00:02:19.673 --> 00:02:21.475 
我们称之为Messages App Drawer

00:02:23.810 --> 00:02:26.914 
我们还有这个很强大的
功能 可以允许你的用户

00:02:26.980 --> 00:02:29.116 
很轻松的
发现你的应用

00:02:29.383 --> 00:02:31.718 
我们称之为内联应用归属

00:02:32.452 --> 00:02:34.922 
让我们通过一个例子
来理解其含义

00:02:35.522 --> 00:02:38.792 
在这里展示的截图中
我收到了一个贴图

00:02:38.859 --> 00:02:43.130 
来自我的朋友 但我没有
安装相关的应用

00:02:43.230 --> 00:02:44.598 
即他发送贴图所使用的应用

00:02:45.332 --> 00:02:48.302 
这种情况下
你可以看到放大的单元格

00:02:48.669 --> 00:02:51.405 
在贴图之下 我们可以看到
应用的名称

00:02:51.471 --> 00:02:53.040 
也就是发送贴图的应用

00:02:53.340 --> 00:02:56.009 
点击这段文本就会启动这个
Message App Store

00:02:56.076 --> 00:03:00.080 
并将发送贴图的应用
展示给我

00:03:00.480 --> 00:03:02.716 
然后我就可以下载
这个应用并使用它

00:03:02.783 --> 00:03:04.051 
就像我使用
任何其他iMessage应用一样

00:03:05.085 --> 00:03:10.390 
在这里展示的这个例子中
我使用了贴图作为示例

00:03:10.457 --> 00:03:12.392 
来演示内联应用归属

00:03:12.826 --> 00:03:17.064 
但它也适用于任何其他
iMessage应用所能生成的内容

00:03:20.667 --> 00:03:23.804 
并且创建一个iMessage应用
很类似于

00:03:23.871 --> 00:03:26.974 
创建任何的iOS应用
也就是你已经创建过的应用

00:03:27.374 --> 00:03:29.710 
你将可以使用
同一套技术

00:03:29.776 --> 00:03:31.912 
和框架
也就是你正在使用的

00:03:32.546 --> 00:03:35.983 
举例来说 你可以使用的
一些工具包括

00:03:38.819 --> 00:03:41.255 
集成in-app purchase到你应用中

00:03:42.222 --> 00:03:44.024 
你可以访问Apple Pay

00:03:45.392 --> 00:03:48.428 
而且你的iMessage应用
将可以使用相机

00:03:48.695 --> 00:03:53.500 
我们相信这些功能可以让你
为你的用户创造很棒的应用

00:03:55.736 --> 00:03:57.838 
现在让我们聊聊支持的平台

00:03:58.038 --> 00:04:00.807 
iMessage应用
只能运行在iOS X中

00:04:02.376 --> 00:04:05.679 
但是 你的应用所
所生成的内容将被

00:04:05.746 --> 00:04:09.917 
发送到watchOS
和macOS设备并被查看

00:04:12.586 --> 00:04:15.822 
在watchOS 3.0中
在Messages应用中

00:04:15.889 --> 00:04:18.158 
我们将提供一个新页面
叫做Recents Page

00:04:18.524 --> 00:04:22.296 
Recents Page
与其他页面不同 会展示贴图

00:04:22.396 --> 00:04:24.865 
你的用户最近通过手机
所发送的

00:04:25.532 --> 00:04:28.101 
而你的用户不止会看到
这些最近的贴图

00:04:28.168 --> 00:04:31.271 
他们还可以在手表上
发送这些贴图

00:04:31.338 --> 00:04:33.340 
就好像是在手机上发送一样

00:04:36.176 --> 00:04:38.045 
这就是有关Messages App Store

00:04:38.111 --> 00:04:39.713 
和短信息平台的内容了

00:04:39.780 --> 00:04:42.583 
现在让我们谈谈创建
iMessage应用的相关细节

00:04:43.350 --> 00:04:46.453 
这也是我们在剩下部分中
将要讲述的内容

00:04:47.754 --> 00:04:49.857 
首先我们要说到
短信息框架

00:04:50.123 --> 00:04:53.827 
短信息框架是
你必须要熟悉的框架

00:04:53.894 --> 00:04:55.362 
来创建iMessage应用

00:04:56.797 --> 00:04:59.766 
然后我们会谈到创建
Sticker Pack应用

00:05:01.435 --> 00:05:04.371 
而后我们要探索
有关贴图文件格式的细节

00:05:04.505 --> 00:05:06.607 
以及其他有关贴图的限制

00:05:08.108 --> 00:05:10.744 
最后我们会讲到创建
一个定制贴图体验

00:05:10.811 --> 00:05:12.312 
通过使用短信息框架

00:05:13.580 --> 00:05:16.049 
我们不会在今天的演讲中
讲如何

00:05:16.116 --> 00:05:18.919 
创建一个应用
来提供交互性信息

00:05:19.286 --> 00:05:22.623 
我们会在第二部分讲述
如何创建这样的应用

00:05:22.689 --> 00:05:24.925 
在我们的谈话中 我请求大家

00:05:24.992 --> 00:05:26.293 
一定要回来看第二部分

00:05:26.527 --> 00:05:29.229 
将会继续在这里进行
在周四下午1:40

00:05:31.498 --> 00:05:32.533 
短信息框架

00:05:32.833 --> 00:05:36.403 
短信息框架是一个全新的
我们要在iOS X中引入的框架

00:05:36.937 --> 00:05:38.906 
短信息框架扮演一个接口的角色

00:05:38.972 --> 00:05:41.808 
在你的iMessages应用
和短信息应用之间

00:05:42.643 --> 00:05:45.679 
当你的用户点击你的应用图标
来启动你的应用时

00:05:45.746 --> 00:05:48.482 
需要通过这个框架
让我们发现你的应用

00:05:48.849 --> 00:05:51.818 
启动你的应用 并将数据
提供给你的应用

00:05:51.885 --> 00:05:53.954 
以及其他你的应用所需要的上下文

00:05:54.021 --> 00:05:55.055 
来展示其UI

00:05:55.789 --> 00:05:59.426 
一旦你的应用
展示出UI且你的用户

00:05:59.493 --> 00:06:00.661 
准备好与之交互时

00:06:01.328 --> 00:06:04.264 
并且在与应用
交互结束之时

00:06:04.331 --> 00:06:08.569 
最好能生成一些
你的用户想要的内容

00:06:08.635 --> 00:06:14.007 
来通过短信息分享
你的应用将这个内容返回给

00:06:14.074 --> 00:06:15.843 
给短信息 通过这个框架

00:06:16.109 --> 00:06:19.513 
此时你的用户已准备好
将返回的内容通过短信息分享

00:06:19.580 --> 00:06:21.348 
给他们正在聊天的人

00:06:22.916 --> 00:06:25.986 
我需要在这里提到
短信息框架

00:06:26.153 --> 00:06:28.222 
和iMessage应用是构建在顶层

00:06:28.288 --> 00:06:30.490 
在现存的应用扩展技术中

00:06:31.291 --> 00:06:35.028 
在这个意义上
iMessage应用是一个应用扩展

00:06:35.128 --> 00:06:37.764 
而且在这种情况下
短信息应用扮演着

00:06:37.831 --> 00:06:40.767 
你的iMessage应用的
宿主应用的角色

00:06:42.736 --> 00:06:44.605 
如果你不熟悉

00:06:44.671 --> 00:06:47.875 
或者之前没有写过扩展的话
我建议

00:06:47.941 --> 00:06:50.878 
你返回去
看一看这个 WWDC 演讲

00:06:50.944 --> 00:06:55.883 
在2014年介绍了
iOS和OS X的扩展

00:06:58.452 --> 00:07:01.755 
所以就如我刚刚提到的
iMessage应用是扩展

00:07:01.822 --> 00:07:03.690 
但是有一个很重要的区别

00:07:03.757 --> 00:07:06.059 
相较于其他iOS扩展而言

00:07:06.760 --> 00:07:09.496 
不像其他的扩展点
你不需要

00:07:09.563 --> 00:07:11.298 
提供一个容器应用

00:07:11.365 --> 00:07:12.633 
为你的iMessage应用

00:07:12.699 --> 00:07:15.469 
你可以只在你想要时
装载你的iMessage应用

00:07:16.336 --> 00:07:19.706 
但如果你已经有
一个容器应用

00:07:19.773 --> 00:07:21.909 
或者你已经传送到了
App Store

00:07:21.975 --> 00:07:26.046 
你总是可以将iMessage应用
集成在容器应用中

00:07:26.113 --> 00:07:28.248 
因为 正如我之前所说
这些都是扩展

00:07:31.051 --> 00:07:33.453 
所以如果你提供一个
容器应用

00:07:33.520 --> 00:07:36.523 
那你的应用将展示在
主界面中

00:07:36.590 --> 00:07:39.326 
在你的用户的手机上
以及在Messages App Drawer

00:07:39.393 --> 00:07:40.294 
在短信息中

00:07:40.594 --> 00:07:42.663 
它同时还会展示在
主App Store

00:07:42.863 --> 00:07:44.398 
以及在Messages App Store中

00:07:45.165 --> 00:07:48.435 
但如果你不提供
一个容器应用 那么

00:07:48.502 --> 00:07:50.871 
正如你所见
你的应用不会展示在

00:07:50.938 --> 00:07:53.874 
主界面以及
主App Store中

00:07:53.974 --> 00:07:56.677 
它只会展示在
Messages App Drawer中

00:07:56.743 --> 00:07:58.312 
以及在Messages App Store中

00:07:59.680 --> 00:08:03.984 
我想提一下如果你
不提供一个容器应用的话

00:08:04.051 --> 00:08:07.554 
你依然需要提供一个图标
对应着你的容器应用

00:08:08.188 --> 00:08:11.124 
这个图标会在
系统的其他部分中使用

00:08:11.191 --> 00:08:12.492 
比如设置应用中

00:08:12.559 --> 00:08:14.695 
要展示你的应用
的相关信息

00:08:14.761 --> 00:08:16.864 
比如
它所占用的存储空间

00:08:19.499 --> 00:08:21.101 
所以现在让我们谈谈贴图

00:08:21.535 --> 00:08:24.338 
贴图是一种很有趣的
全新的交流方式

00:08:24.404 --> 00:08:25.906 
与其他iMessage用户

00:08:27.040 --> 00:08:29.776 
你的用户可以发送内联贴图

00:08:29.843 --> 00:08:32.379 
像你的用户
已发送过的其他iMessage一样

00:08:33.746 --> 00:08:36.717 
或者你的用户 不是你的贴图

00:08:36.783 --> 00:08:40.220 
或者你的用户可以拖拽贴图
到应用之外

00:08:40.287 --> 00:08:42.322 
并将它们附加到
其他短信息气泡中

00:08:42.489 --> 00:08:45.959 
我们相信这会
带来一种很具表现性的

00:08:46.026 --> 00:08:48.161 
且吸引人的短信息体验

00:08:50.864 --> 00:08:52.399 
但贴图对你而言意味着什么？

00:08:52.999 --> 00:08:56.069 
贴图根本上说是
你的应用所提供的图片

00:08:57.171 --> 00:09:00.374 
这些图片可以是动态的
也可以是静态的

00:09:01.642 --> 00:09:04.044 
我们相信贴图
是一种很好的分享

00:09:04.111 --> 00:09:06.346 
或提升你
所拥有的内容的方式

00:09:06.613 --> 00:09:09.049 
而且我们普遍认为
贴图应用将

00:09:09.116 --> 00:09:11.852 
会变得非常 非常流行
在iMessages用户中

00:09:14.354 --> 00:09:16.223 
现在让我们聊聊
创建贴图应用

00:09:16.990 --> 00:09:18.825 
有两种方式可以
创建一个贴图应用

00:09:18.992 --> 00:09:22.963 
首先你可使用Xcode创建一个
Sticker Pack应用

00:09:23.297 --> 00:09:25.866 
如果你使用这种方式
你就无需

00:09:25.933 --> 00:09:28.302 
为你的应用提供任何代码

00:09:28.468 --> 00:09:30.304 
你只需要提供资源

00:09:30.370 --> 00:09:32.406 
为了你的贴图与应用图标

00:09:33.874 --> 00:09:37.110 
但如果你想定制你的应用
你就可以通过提供代码来实现

00:09:37.177 --> 00:09:39.913 
这种情况下 你的代码
可以提供贴图通过

00:09:39.980 --> 00:09:40.948 
短信息框架

00:09:43.717 --> 00:09:45.819 
现在让我
展示一个演示

00:09:45.886 --> 00:09:48.388 
来使用Xcode创建一个
Sticker Pack应用

00:09:49.823 --> 00:09:54.094 
所以我现在要用我的电脑
我现在要启动Xcode

00:09:55.996 --> 00:09:57.764 
现在我将要

00:09:57.831 --> 00:09:59.733 
创建一个新的Xcode项目

00:10:01.535 --> 00:10:03.904 
在应用的名称中
我将要

00:10:03.971 --> 00:10:06.039 
选择Sticker Pack应用

00:10:06.807 --> 00:10:08.342 
而后我将点击Next

00:10:09.176 --> 00:10:12.212 
然后我将要命名我的项目
SFStickers作为资源文件

00:10:12.346 --> 00:10:14.281 
我将要使用这些资源文件

00:10:14.348 --> 00:10:17.985 
作为资源来描述不同的
旧金山地标

00:10:18.785 --> 00:10:19.820 
我点击Next

00:10:20.821 --> 00:10:23.223 
现在让我
创建在我的桌面上

00:10:24.024 --> 00:10:28.061 
我完成了 让我很快速的
放大我的Xcode

00:10:28.462 --> 00:10:32.499 
太棒了 所以 如你所见
在你现在获得的模板

00:10:32.566 --> 00:10:35.802 
在一个Sticker Pack
应用中没有源代码文件

00:10:36.303 --> 00:10:39.072 
这是这个模板的
慎重的设计

00:10:39.139 --> 00:10:40.874 
让我重申一点

00:10:40.941 --> 00:10:42.843 
若创建Sticker Pack应用

00:10:42.910 --> 00:10:44.478 
你不用提供任何代码

00:10:44.545 --> 00:10:47.281 
你只需提供贴图
和应用图标资源

00:10:47.881 --> 00:10:49.149 
所以让我们看看如何实现

00:10:50.050 --> 00:10:51.418 
我进入Stickers

00:10:51.585 --> 00:10:53.587 
这是一个目录
里面有两个文件

00:10:53.687 --> 00:10:56.857 
Sticker Pack
另是iMessage应用图标

00:10:57.724 --> 00:10:59.259 
点击Sticker Pack

00:10:59.927 --> 00:11:03.063 
现在 如你所见 它说
我没有任何贴图 我需要

00:11:03.130 --> 00:11:05.699 
拖放图片
来添加新的贴图

00:11:05.866 --> 00:11:06.700 
所以我照做

00:11:08.001 --> 00:11:11.705 
我进入Finder并进入桌面

00:11:12.272 --> 00:11:14.608 
我这里有一些资源
我正好使用它们

00:11:15.442 --> 00:11:18.212 
所以我要点击
第一个 我将要

00:11:18.278 --> 00:11:19.513 
将它拖拽到这里

00:11:19.680 --> 00:11:21.081 
那就是金门大桥

00:11:22.516 --> 00:11:25.018 
我将要拖拽第二张了
这是唐人街

00:11:26.320 --> 00:11:28.522 
为了更快速 我将

00:11:28.589 --> 00:11:32.326 
选择剩下的所有
图片并拖拽到这里

00:11:33.327 --> 00:11:34.828 
太棒了 我现有所有资源了

00:11:35.596 --> 00:11:37.531 
这些资源是PNG类型的

00:11:37.831 --> 00:11:41.235 
Xcode还允许你
创建一个APNG贴图

00:11:41.301 --> 00:11:43.370 
要使用PNG独立帧

00:11:43.971 --> 00:11:45.339 
让我演示一下如何完成

00:11:45.939 --> 00:11:48.442 
现在我将要点击
或者在这里右键单击

00:11:48.809 --> 00:11:50.511 
我将要添加资源

00:11:51.311 --> 00:11:53.514 
我将要选择New Sticker Sequence

00:11:54.414 --> 00:11:56.316 
当你创建一个新的
Sticker sequence时

00:11:56.383 --> 00:11:59.520 
Xcode需要你提供
独立帧画面

00:11:59.586 --> 00:12:01.522 
来构建你想创建的贴图

00:12:02.789 --> 00:12:04.525 
所以我要返回到桌面

00:12:05.225 --> 00:12:07.761 
我要点击这里
我有我需要的独立帧

00:12:09.129 --> 00:12:10.631 
我将要拖拽第一个

00:12:12.199 --> 00:12:13.734 
我将要把第二个也拖拽进去

00:12:15.302 --> 00:12:16.170 
第三个

00:12:16.970 --> 00:12:18.238 
最后是第四个

00:12:19.139 --> 00:12:21.542 
现在让我们返回Xcode
来看看它完成了什么

00:12:21.608 --> 00:12:24.344 
如你所见
我有一个放大的版本

00:12:24.411 --> 00:12:26.113 
属于这个贴图 通过点击

00:12:26.180 --> 00:12:28.682 
它的中心会真实的
将动画展示给我

00:12:28.749 --> 00:12:29.583 
看起来不错

00:12:30.417 --> 00:12:32.486 
现在让我把应用图标也拖拽进来

00:12:33.587 --> 00:12:35.389 
我进入应用图标分类

00:12:37.224 --> 00:12:38.225 
我进入这里

00:12:39.660 --> 00:12:41.728 
我选择这些东西

00:12:44.231 --> 00:12:45.165 
拖拽进这里

00:12:45.332 --> 00:12:47.868 
我可能漏了一个
让我很快再做一次

00:12:52.272 --> 00:12:54.274 
好了
现在我提供了应用图标

00:12:54.608 --> 00:12:55.909 
现在我准备好了

00:12:55.976 --> 00:12:56.910 
我的应用完成了

00:12:56.977 --> 00:12:58.712 
现在让我看看
它是什么样子

00:12:59.947 --> 00:13:01.882 
我将要进入这里
来测试我的应用

00:13:01.949 --> 00:13:03.083 
使用模拟器

00:13:03.584 --> 00:13:06.787 
我将要选择iPhone 6s
作为用于测试的设备

00:13:07.788 --> 00:13:10.190 
我将要进入“产品”
并点击“运行”

00:13:11.491 --> 00:13:14.294 
我现在只需要等待
让它出现

00:13:14.962 --> 00:13:17.998 
太棒了 短信息已显示
我在创建一个iMessage应用

00:13:18.065 --> 00:13:19.766 
我将要通过
Messages应用来测试

00:13:20.534 --> 00:13:21.568 
然后我要运行它

00:13:22.903 --> 00:13:24.404 
模拟器启动了

00:13:24.471 --> 00:13:29.076 
太棒了 如你所见
我有两段模拟对话

00:13:29.142 --> 00:13:30.811 
在模拟器Messages应用中

00:13:31.411 --> 00:13:34.147 
通过模拟对话
我想要表达的是如果你进入一个

00:13:34.214 --> 00:13:36.149 
并发送
一条短信息

00:13:36.216 --> 00:13:39.019 
它会展示一个来信
在另一个对话中

00:13:39.453 --> 00:13:42.623 
澄清一下 你将
无法发送短信息

00:13:42.689 --> 00:13:46.093 
从模拟器发送到真实设备上

00:13:46.393 --> 00:13:50.664 
所以我进入第一段对话
我输入一点东西

00:13:52.866 --> 00:13:54.835 
此时我只是在自言自语

00:13:55.402 --> 00:13:57.471 
如你所见 这是我的短信息
太棒了

00:13:58.639 --> 00:14:00.541 
现在让我看看
我的应用是什么样子

00:14:00.607 --> 00:14:03.243 
现在我进入App Drawer
你可以看到

00:14:03.410 --> 00:14:06.079 
我的应用在这里已经准备好了
等待被启动

00:14:06.647 --> 00:14:07.581 
我点击它

00:14:09.082 --> 00:14:11.285 
看 资源在这里显示了

00:14:11.351 --> 00:14:15.389 
这些正是我
刚刚添加的资源 我可以下滑

00:14:17.457 --> 00:14:18.659 
看看他们是什么样子

00:14:18.725 --> 00:14:20.961 
现在 如你所见
动态PNG也在这里

00:14:21.628 --> 00:14:24.464 
我可以点击其中一个 拖出

00:14:24.965 --> 00:14:28.669 
并拖拽到应用之外
将其固定于一个短信息气泡中

00:14:28.869 --> 00:14:31.505 
太棒了 如你所见
我可以退出

00:14:31.939 --> 00:14:34.374 
进入到另一个对话中
我在这里看到了贴图

00:14:35.275 --> 00:14:37.878 
所以这就是创建
一个Sticker Pack应用的全过程

00:14:38.111 --> 00:14:40.714 
但是 我还想
给你展示一点

00:14:40.781 --> 00:14:44.618 
那就是如何定制
这个应用的特定方面

00:14:45.085 --> 00:14:46.787 
所以现在回到资源贴图

00:14:47.254 --> 00:14:49.990 
我现在会展示

00:14:50.057 --> 00:14:54.061 
如何改变你的贴图
展示单元格的大小

00:14:54.394 --> 00:14:55.863 
在这个网格中

00:14:56.630 --> 00:14:58.832 
所以要实现这个目的
让我回到Xcode

00:14:59.733 --> 00:15:03.470 
我将要点击“去顶部”

00:15:03.804 --> 00:15:06.607 
如你所见
有一个下拉式菜单

00:15:06.673 --> 00:15:07.808 
名字是Sticker Size

00:15:08.041 --> 00:15:08.942 
我点击它

00:15:09.176 --> 00:15:11.912 
有三个选项——大中小

00:15:12.379 --> 00:15:14.381 
我要点击“大”
来看看如何

00:15:14.448 --> 00:15:15.883 
它能改变我的应用

00:15:17.084 --> 00:15:18.085 
我再次运行它

00:15:22.456 --> 00:15:23.857 
短信息应用被启动

00:15:23.924 --> 00:15:25.592 
让我回到我的应用

00:15:27.928 --> 00:15:28.929 
如你所见

00:15:29.329 --> 00:15:33.834 
贴图现在一行
只展示两个单元格更大

00:15:33.901 --> 00:15:35.369 
之间的空间也更大了

00:15:35.936 --> 00:15:39.239 
我将要深入
一些细节

00:15:39.306 --> 00:15:42.442 
来改变贴图单元格的尺寸
在这个部分的后面

00:15:43.110 --> 00:15:44.077 
在这个演示中

00:15:44.611 --> 00:15:47.347 
我展示了如何创建
一个Sticker Pack应用

00:15:47.414 --> 00:15:49.783 
使用Xcode在这个技术中
正如我所展示给你

00:15:49.850 --> 00:15:51.585 
你不需要提供任何代码

00:15:51.652 --> 00:15:55.756 
你只需要提供贴图
的资源和你的应用图标

00:15:57.090 --> 00:16:00.394 
我还展示了如何使用
Xcode内置的工具

00:16:00.460 --> 00:16:03.797 
来创建一个APNG贴图
通过使用独立帧

00:16:03.864 --> 00:16:04.898 
来组成APNG

00:16:06.166 --> 00:16:08.101 
最后 我们讲到了如何

00:16:08.168 --> 00:16:09.970 
改变贴图展示单元格的尺寸

00:16:11.438 --> 00:16:14.708 
现在让我们说说支持的
贴图文件格式

00:16:15.008 --> 00:16:16.577 
我们支持四种格式

00:16:16.677 --> 00:16:20.814 
它们是PNG APNG
JPEG和GIF

00:16:21.281 --> 00:16:23.016 
在这四种格式之外

00:16:23.083 --> 00:16:25.519 
如果你想提供动画贴图

00:16:25.586 --> 00:16:27.654 
我们还支持APNG和GIF

00:16:28.255 --> 00:16:31.658 
我还进行了特定优化来

00:16:31.825 --> 00:16:34.328 
让贴图的发送更加
快速 相较于

00:16:34.394 --> 00:16:37.497 
其他的iMessages附件
而且为了降低

00:16:37.564 --> 00:16:39.533 
贴图的磁盘存储空间

00:16:39.800 --> 00:16:42.469 
并帮助我们
实现这些优化

00:16:42.536 --> 00:16:45.606 
我们需要限制文件大小
贴图最大只能有500kb

00:16:48.008 --> 00:16:50.878 
正如我刚才所提到
我们支持四种文件格式

00:16:51.111 --> 00:16:56.083 
但是 我建议你
尽量使用PNG和APNG

00:16:56.149 --> 00:16:57.784 
若不能全部使用这两种格式

00:16:58.285 --> 00:17:00.721 
为了理解我们为何
做此推荐 我们

00:17:00.787 --> 00:17:02.656 
看一下这些截图

00:17:02.956 --> 00:17:07.027 
在这里我有两段对话
看起来几乎一样

00:17:07.094 --> 00:17:08.862 
但有一个微小的区别

00:17:09.195 --> 00:17:11.265 
让我放大
来展示区别是什么

00:17:13.534 --> 00:17:17.938  
如你所见
左边的对话中的贴图

00:17:18.005 --> 00:17:20.641  
放在照片上 是PNG格式的

00:17:21.474 --> 00:17:24.744  
右边的对话
有同样的图片

00:17:24.810 --> 00:17:29.516  
和同样的贴图
但贴图是GIF格式的

00:17:30.284 --> 00:17:33.453  
如果你仔细观察
在放大区域中

00:17:33.720 --> 00:17:35.956  
左边的那个 也就是PNG

00:17:36.190 --> 00:17:39.226  
不会显示出任何锯齿
在其边界周围

00:17:39.826 --> 00:17:42.162  
但右边的那一个 也就是GIF

00:17:42.229 --> 00:17:43.697  
显示出了一定的锯齿

00:17:43.764 --> 00:17:45.299  
在贴图的边界区域

00:17:46.033 --> 00:17:47.835  
发生这种区别的原因是PNG

00:17:47.901 --> 00:17:51.638  
和APNG可以很好地处理透明

00:17:52.005 --> 00:17:54.608 
但GIF不能那么好的
处理透明

00:17:55.275 --> 00:17:57.945 
然后如果你想要比较
透明属性

00:17:58.011 --> 00:18:02.249 
JPEG事实上
根本不处理透明

00:18:02.649 --> 00:18:06.653 
所以要记住
你的贴图可以被拖拽到

00:18:06.720 --> 00:18:09.256 
你的应用之外
并附加在短信息气泡中

00:18:09.523 --> 00:18:12.993 
所以透明
是一个很重要的因素

00:18:13.060 --> 00:18:15.395 
需要在设计贴图时加以考虑

00:18:16.163 --> 00:18:19.166 
我还建议你
亲自尝试你的贴图

00:18:19.233 --> 00:18:20.801 
在不同的背景颜色中

00:18:20.868 --> 00:18:24.671 
比如黑色 白色
甚至多色背景

00:18:24.738 --> 00:18:27.174 
因为 再说一次
你的贴图会放到图片上

00:18:29.042 --> 00:18:32.279 
在我刚刚所展示的演示用于改变尺寸

00:18:32.346 --> 00:18:35.349 
也就是贴图所展示的单元格尺寸

00:18:35.849 --> 00:18:37.951 
有三种支持的单元格尺寸

00:18:38.018 --> 00:18:40.521  
它们是——大中小

00:18:41.188 --> 00:18:44.358  
对于每一种尺寸
我们有一个推荐的最大

00:18:44.424 --> 00:18:46.527  
贴图尺寸
被支持

00:18:46.994 --> 00:18:51.732  
对于小贴图是100乘100
像素在3x比例中

00:18:52.199 --> 00:18:56.003  
对于中等是136
乘136像素在3x比例中

00:18:56.203 --> 00:18:59.139  
对于大图最大的
支持尺寸是206

00:18:59.239 --> 00:19:01.542  
乘206像素在3x比例中

00:19:02.109 --> 00:19:06.446 
如果你提供的贴图比
大于这些尺寸

00:19:06.513 --> 00:19:09.249 
也就是你选择的单元格大小
所支持的尺寸

00:19:09.416 --> 00:19:12.920 
那你的贴图将被
短信息框架压缩并展示

00:19:12.986 --> 00:19:17.958 
在这种情况下它们可能看起来
并不像你所想象的那样

00:19:18.425 --> 00:19:22.396 
但如果你的贴图是在范围之内
那么就可以正常展示

00:19:23.230 --> 00:19:26.533 
我还想澄清一点
我们总是需要你

00:19:26.600 --> 00:19:30.070 
不论如何要提供
3x比例的贴图

00:19:30.137 --> 00:19:31.805 
相对于设备的分辨率

00:19:31.872 --> 00:19:33.841 
也就是应用所运行的设备

00:19:34.474 --> 00:19:37.544 
Messages应用负责
缩小你的贴图

00:19:37.678 --> 00:19:39.546 
如果对于某设备而言需要缩小

00:19:39.613 --> 00:19:42.149 
也就是你的贴图
正在展示的设备

00:19:43.884 --> 00:19:47.788 
这就是有关短信息框架
和创建贴图应用的全部内容了

00:19:47.955 --> 00:19:50.057 
此时我将余下任务
交给Lily

00:19:50.123 --> 00:19:53.160 
她会讲解如何创建
一个定制贴图体验 谢谢大家

00:19:58.599 --> 00:19:59.633 
谢谢你 Bhaskar

00:19:59.933 --> 00:20:02.769 
我叫Lily 我是
短信息团队的一个工程师

00:20:03.003 --> 00:20:06.406 
我将为大家讲解如何创建
一个定制贴图应用

00:20:07.508 --> 00:20:10.544 
首先 为什么需要
创建一个定制贴图应用呢？

00:20:10.911 --> 00:20:13.480 
你将获得的
首要好处是

00:20:13.547 --> 00:20:16.583 
可以定制如何在你的
应用中展示贴图

00:20:16.817 --> 00:20:19.686 
在我们刚才的例子中
我们看到了展示的贴图

00:20:19.753 --> 00:20:21.121 
在一个很漂亮的网格布局中

00:20:21.255 --> 00:20:23.557 
但是如果你想
放置你的贴图

00:20:23.624 --> 00:20:26.260 
以另外一种格式
甚至是改变背景颜色

00:20:26.326 --> 00:20:28.862 
你需要创建一个
定制贴图应用

00:20:30.163 --> 00:20:32.566 
一个定制贴图应用
还将允许你

00:20:32.633 --> 00:20:34.201 
动态的创建贴图

00:20:34.434 --> 00:20:37.104 
在我们之前的例子中
我们将资源捆绑到

00:20:37.171 --> 00:20:38.939 
我们的应用中 而为了

00:20:39.006 --> 00:20:40.807 
更新这些资源我们需要

00:20:40.874 --> 00:20:42.609 
向App Store推送更新

00:20:43.076 --> 00:20:45.145 
如果你想从服务器
获取资源

00:20:45.212 --> 00:20:47.948 
或者允许你的用户
在设备上动态的创建它们

00:20:48.015 --> 00:20:51.285 
若能这样做 那么你就不需要
想App Store上传更新了

00:20:52.786 --> 00:20:56.023 
短信息扩展还
提供了相机的访问权限

00:20:56.089 --> 00:20:59.092 
来允许你的用户使用相机
创建有趣的贴图

00:21:00.460 --> 00:21:04.097 
最终你的应用还可集成
In-app purchase

00:21:04.164 --> 00:21:06.400 
来允许你的用户解锁特定贴图

00:21:06.967 --> 00:21:09.369 
我们可以创建一个定制
贴图应用 通过使用

00:21:09.436 --> 00:21:10.470 
短信息框架

00:21:10.804 --> 00:21:13.073 
短信息框架
提供了构件

00:21:13.140 --> 00:21:14.942 
来创建一个贴图应用

00:21:15.309 --> 00:21:18.512 
在通过Xcode构建的
Sticker Pack应用示例中

00:21:18.579 --> 00:21:20.848 
它们使用了同样的类
在这个框架中

00:21:20.948 --> 00:21:23.483 
所以理想情况下你可以
创建同样的应用通过使用

00:21:23.550 --> 00:21:24.518 
短信息框架

00:21:25.018 --> 00:21:27.554 
在屏幕上的截图中

00:21:27.621 --> 00:21:30.190 
我们有一个应用
正在展示贴图

00:21:30.257 --> 00:21:32.593 
你可以发现
背景颜色是粉色的

00:21:32.860 --> 00:21:36.363 
所以我将向大家展示如何定制
并创建一个这样的应用

00:21:36.496 --> 00:21:37.664 
现在让我们看一个演示

00:21:40.234 --> 00:21:41.835 
我现在要打开Xcode

00:21:43.837 --> 00:21:45.539 
我要创建一个新的项目

00:21:46.807 --> 00:21:48.909 
Bhaskar创建了一个
Sticker Pack应用

00:21:48.976 --> 00:21:51.578 
但这次我们要创建
一个短信息应用

00:21:51.945 --> 00:21:53.280 
所以我要选择这个

00:21:54.181 --> 00:21:56.917 
然后我将项目命名为
“Nature Stickies”

00:21:56.984 --> 00:21:59.319 
因为我们要使用自然资源

00:21:59.686 --> 00:22:02.256 
我们要继续
创建这个项目

00:22:02.489 --> 00:22:03.857 
我们要在桌面上打开它

00:22:04.892 --> 00:22:05.726 
很棒

00:22:07.094 --> 00:22:09.229 
如你所见
我们这里有两个文件夹

00:22:09.296 --> 00:22:11.532 
Nature Stickies
和Messages Extension

00:22:11.698 --> 00:22:13.400 
Nature Stickies
不包含任何源代码

00:22:13.467 --> 00:22:15.769 
因为它包含了
捆绑的应用

00:22:15.836 --> 00:22:19.006 
你将需要提供一个应用图标
给系统的设置

00:22:19.139 --> 00:22:22.643 
但是 我们更感兴趣的是
Messages Extension文件夹

00:22:23.076 --> 00:22:25.746 
所以现在我们要点击
MessagesViewController

00:22:26.513 --> 00:22:28.549 
然后我们可以看到
MessagesViewController

00:22:28.615 --> 00:22:30.217 
将是我们最主要的类

00:22:30.450 --> 00:22:33.520 
它是
MSMessagesAppViewController的子类

00:22:33.820 --> 00:22:37.491 
MSMessagesAppViewController
将作为控制器

00:22:37.558 --> 00:22:40.127 
来处理来自
短信息应用的回调

00:22:40.627 --> 00:22:42.596 
我们将会更多的说到
这些回调

00:22:42.663 --> 00:22:44.865 
以及你的应用
如何处理它们

00:22:44.932 --> 00:22:46.200 
在我们讲座的第二部分中

00:22:46.300 --> 00:22:49.002 
现在让我们来删掉这些函数

00:22:49.903 --> 00:22:54.875 
我将要选择他们
并点击“删除”

00:22:55.576 --> 00:22:58.579 
很棒 现在我们看看
短信息框架

00:22:59.346 --> 00:23:03.250 
如果我们点击这里就会有一个
MSStickerBrowserViewController

00:23:03.483 --> 00:23:05.219 
MSStickerBrowseViewController

00:23:05.285 --> 00:23:06.987 
将允许我们展示贴图

00:23:07.287 --> 00:23:08.655 
它有两个属性

00:23:08.956 --> 00:23:10.924 
它有一个MSStickerBrowserView

00:23:10.991 --> 00:23:13.527 
这是用于展示
贴图的视图

00:23:13.594 --> 00:23:17.664 
它还有一个MSStickerSize
来决定展示单元格的尺寸

00:23:17.731 --> 00:23:20.701 
在我们MSStickerBrowserView的网格中

00:23:21.101 --> 00:23:24.171 
我们还可以看到
MSStickerBrowserViewController

00:23:24.238 --> 00:23:27.474 
符合MSStickerBrowserView
DataSource协议

00:23:27.774 --> 00:23:30.744 
这个协议被实现时
会返回一个数字

00:23:30.811 --> 00:23:33.046 
也就是应用正在
展示的贴图的数字

00:23:33.113 --> 00:23:36.884 
和与给定数字对应的贴图
提供给MSStickerBrowserView

00:23:37.217 --> 00:23:38.685 
所以为了展示我们的贴图

00:23:38.752 --> 00:23:41.522 
我们需要创建
一个MSStickerBrowserViewController

00:23:41.588 --> 00:23:44.791 
为了实现数据源
我们将要写一个子类

00:23:45.025 --> 00:23:47.861 
所以我现在要
创建一个新文件

00:23:49.897 --> 00:23:52.432 
我要选择Swift
并点击“下一步”

00:23:52.866 --> 00:23:58.172 
我将把它命名为
NatureStickerBrowserViewController

00:24:01.341 --> 00:24:04.278 
太棒了 现在我要
导入UIKit

00:24:06.480 --> 00:24:09.216 
然后我要
导入短信息

00:24:10.217 --> 00:24:13.220 
太棒了 现在让我们创建我们的类

00:24:13.887 --> 00:24:15.889 
我将要创建

00:24:15.956 --> 00:24:18.425 
我们的NatureStickerBrowser
ViewController类

00:24:18.492 --> 00:24:21.228 
作为MSStickerBrowserViewController
的子类

00:24:21.562 --> 00:24:24.264 
如我刚才所提到的
MSStickerBrowserViewController

00:24:24.364 --> 00:24:26.767 
有两个数据源方法
我们需要实现它们

00:24:26.834 --> 00:24:29.069 
所以我要填充它们

00:24:30.504 --> 00:24:31.538 
我们需要一个方法

00:24:31.605 --> 00:24:33.373 
来创建我们的贴图并存储

00:24:33.740 --> 00:24:37.444 
我将要创建
一个队列来持有我们的贴图

00:24:38.879 --> 00:24:42.416 
然后我们将看到
我们的贴图在MSSticker中

00:24:42.482 --> 00:24:45.619 
MSSticker是一个对象
它持有一个文件URL

00:24:45.686 --> 00:24:47.321 
指向一个磁盘上的资源

00:24:47.654 --> 00:24:49.823 
它还将有一个局部的描述

00:24:49.890 --> 00:24:51.758 
用于限制可访问性

00:24:52.492 --> 00:24:54.328 
现在让我们创建一个贴图

00:24:55.229 --> 00:24:58.298 
我将直接
添加资源进bundle包

00:24:58.599 --> 00:25:02.569 
我现在要点击Add Files
并进入我的桌面

00:25:03.203 --> 00:25:06.139 
并选择这里的资源

00:25:07.407 --> 00:25:09.243 
我将它们添加到了我的应用中

00:25:09.510 --> 00:25:12.212 
在这个例子中
我们只是添加资源进了我们的应用

00:25:12.279 --> 00:25:16.183 
但你可以想象你的应用
既不能从你的服务器获取这些资源

00:25:16.250 --> 00:25:18.418 
也不能允许你的用户
在设备上创建

00:25:18.785 --> 00:25:20.787 
所以现在我们需要创建一个贴图

00:25:22.789 --> 00:25:24.892 
我们要写一个函数来实现这个目的

00:25:25.859 --> 00:25:28.929 
太棒了 现在我们使用Bundle

00:25:28.996 --> 00:25:31.932 
我们创建一个文件URL
指向磁盘上我们的资源

00:25:31.999 --> 00:25:34.034 
然后初始化我们的MSSticker

00:25:34.101 --> 00:25:36.870 
并提供一个局部化描述
然后添加到我们的数列中

00:25:37.171 --> 00:25:40.407 
所以现在让我们写一个函数
它会加载所有的贴图

00:25:43.544 --> 00:25:47.114 
酷 我们可以回到
MessagesViewController

00:25:47.981 --> 00:25:49.850 
并创建一个实例

00:25:51.585 --> 00:25:53.820 
我们将要创建一个NatureStickerBrowser

00:25:53.887 --> 00:25:57.791 
ViewController将其
实例化并调用viewDidLoad

00:26:01.061 --> 00:26:04.898  
太棒了 我们实例化了
browserViewController

00:26:04.965 --> 00:26:06.400  
并提供了一个贴图尺寸

00:26:06.466 --> 00:26:09.236  
这将允许你的应用
来显示你的贴图

00:26:09.303 --> 00:26:11.371 
在我们刚才所展示的
网格布局中

00:26:11.738 --> 00:26:16.276 
这个应用会创建一个贴图应用就像刚才
使用Xcode没写代码创建的一样

00:26:16.376 --> 00:26:18.212 
现在让我们继续定制它

00:26:18.345 --> 00:26:21.415 
我要写一个函数
它将改变背景颜色

00:26:21.481 --> 00:26:23.217 
也就是MSStickerBrowserView的背景颜色

00:26:24.451 --> 00:26:26.386 
所以我们要在这里写这个函数

00:26:26.820 --> 00:26:29.790 
我们只是要改变背景颜色

00:26:30.123 --> 00:26:32.693 
我将回到
MessagesViewController

00:26:32.759 --> 00:26:33.627 
并调用它

00:26:36.797 --> 00:26:39.766 
所以现在我们可以改变背景

00:26:39.967 --> 00:26:42.636 
让我们继续
运行一下我们的应用

00:26:44.238 --> 00:26:46.139 
我要选择iPhone 6s

00:26:46.573 --> 00:26:47.774 
我要点击“运行”

00:26:52.513 --> 00:26:56.083 
唉 我忘记了 我们没有
实现我们的数据源

00:26:56.350 --> 00:26:57.651 
所以我们现在要做这件事

00:26:58.452 --> 00:27:02.890  
我要返回
贴图的数字并

00:27:02.956 --> 00:27:07.194  
返回一个贴图
与给定数字对应

00:27:07.828 --> 00:27:09.229  
现在我们准备好运行了

00:27:11.265 --> 00:27:13.834 
我要选择Message应用
用于运行应用

00:27:20.641 --> 00:27:23.343  
太棒了 现在我们可以
打开App Drawer

00:27:25.646 --> 00:27:26.580 
然后

00:27:26.880 --> 00:27:29.449 
你看 我们没有一个图标
因为我们忘记添加了

00:27:29.516 --> 00:27:32.352 
我们也将看到
应用叫Messages Extension

00:27:32.553 --> 00:27:34.521 
为了改变
展示的名称

00:27:34.588 --> 00:27:36.356 
我们需要进入我们的项目

00:27:36.423 --> 00:27:39.960 
点击Messages Extension Target
然后可以在这里修改

00:27:42.796 --> 00:27:45.599 
现在我们只需看看
我们的应用是什么样子

00:27:49.136 --> 00:27:52.306 
你可以看到我们有
一个应用能提供贴图

00:27:52.372 --> 00:27:53.574 
在粉红背景色

00:27:54.007 --> 00:27:55.275 
这就是一个小例子了

00:27:55.342 --> 00:27:57.711 
有关你如何定制
你的贴图应用

00:27:57.911 --> 00:27:59.379 
现在让我们回到幻灯片

00:27:59.813 --> 00:28:01.481 
来重述一下我们刚才所讲的

00:28:01.982 --> 00:28:05.185 
我们介绍了
MSStickerBrowserViewController

00:28:05.252 --> 00:28:07.221 
这个ViewController
将展示贴图

00:28:07.287 --> 00:28:10.591 
在你的应用中
使用MSStickerBrowserView

00:28:10.924 --> 00:28:12.860  
这个控制器遵守

00:28:12.926 --> 00:28:15.462  
MSStickerBrowserViewDataSource协议

00:28:15.929 --> 00:28:17.698  
这个协议会返回一个数字

00:28:17.764 --> 00:28:20.067  
与你的应用将要展示
的贴图相对应

00:28:20.133 --> 00:28:21.201  
以及给定的贴图

00:28:21.268 --> 00:28:24.404  
我们还介绍了
MSMessagesAppViewController

00:28:24.705 --> 00:28:28.075  
这个ViewController
是你的主要类将要继承的类

00:28:28.375 --> 00:28:31.144  
这个MSMessagesAppViewController
处理回调

00:28:31.211 --> 00:28:32.779  
来自Messages应用

00:28:32.846 --> 00:28:34.848  
我们将分享更多的内容 在第二部分中

00:28:34.915 --> 00:28:37.217  
以及你的应用如何
能处理这些回调

00:28:37.651 --> 00:28:40.888 
这就是一个小例子
展示了如何定制一个贴图应用

00:28:40.954 --> 00:28:44.224 
它只是改变了背景颜色
如果我们还想进行更多的改变呢？

00:28:45.392 --> 00:28:49.930 
你的应用可以添加贴图
支持通过使用两个类

00:28:49.997 --> 00:28:52.232 
MSStickerView
和MSSticker

00:28:52.866 --> 00:28:55.602 
所以如果我们想创建一个应用
能展示贴图

00:28:55.669 --> 00:28:58.872 
以一种与MSStickerBrowserViewController
不同的方法

00:28:58.939 --> 00:29:02.042 
我们就可以通过
使用这两个类来完成

00:29:02.409 --> 00:29:05.479 
在这个例子中
我有一个应用

00:29:05.546 --> 00:29:09.116 
这个应用实际上就在使用
UICollectionViewController

00:29:09.183 --> 00:29:10.384 
来展示贴图

00:29:10.884 --> 00:29:14.688 
每一个UICollectionView的单元格
都有一个MSStickerView

00:29:14.755 --> 00:29:17.691 
MSStickerView这个类
将能提供

00:29:17.758 --> 00:29:19.826 
贴图的拖拽释放功能

00:29:19.893 --> 00:29:21.395 
进入短信息文本中

00:29:22.095 --> 00:29:24.431 
我们还可以看到
这里有一个Plus图标

00:29:24.498 --> 00:29:26.333 
它并没MSStickerView

00:29:26.400 --> 00:29:28.735 
点击它就会扩展我们的应用

00:29:28.902 --> 00:29:31.905 
允许我们选择一个贴图
并添加到我们的收藏中

00:29:33.740 --> 00:29:35.209  
还有要注意我们可以

00:29:35.275 --> 00:29:37.744  
改变我们的贴图的展示形式

00:29:37.811 --> 00:29:39.580  
你的应用可以由

00:29:39.646 --> 00:29:42.049  
紧凑模式进入到扩展模式

00:29:42.316 --> 00:29:44.117  
你的用户可以切换

00:29:44.184 --> 00:29:46.520  
通过点击
底部的人字形图案

00:29:46.587 --> 00:29:49.022  
所以你的应用将
需要能处理

00:29:49.089 --> 00:29:51.258  
处在紧凑模式
和扩展模式

00:29:51.491 --> 00:29:53.627  
我将展示给大家
如何处理这些回调

00:29:53.694 --> 00:29:55.462  
并创建一个这样的应用

00:29:55.629 --> 00:29:57.097  
现在让我们进入另一个演示

00:29:59.566 --> 00:30:01.935 
我将打开一个
我已经准备好的应用

00:30:02.669 --> 00:30:04.171 
它叫Sticker Picker

00:30:07.875 --> 00:30:09.376 
我们把它放大

00:30:09.743 --> 00:30:12.412 
太棒了 我们现回到了
MessagesViewController

00:30:12.546 --> 00:30:14.381 
再一次 这是我们的主要类

00:30:14.448 --> 00:30:17.317 
它继承了
MSMessagesAppViewController

00:30:17.885 --> 00:30:19.820 
我们展示了两个视图

00:30:19.887 --> 00:30:22.422 
UICollectionView
它持有MSStickerViews

00:30:22.489 --> 00:30:26.193 
我们还有一个视图
来添加贴图进入我们的应用

00:30:26.260 --> 00:30:28.161 
这两个视图
将表现在

00:30:28.228 --> 00:30:30.430 
一个StickerPickerCollection
ViewController中

00:30:30.564 --> 00:30:32.499 
以及在一个AddStickersViewController中

00:30:33.133 --> 00:30:36.336 
现在让我们看一看
StickerPickerCollectionViewController

00:30:37.271 --> 00:30:39.439 
StickerPickerCollectionViewController

00:30:40.007 --> 00:30:42.910 
继承了UICollectionViewController

00:30:43.143 --> 00:30:45.479 
我们将操作的Item称作
CollectionViewItem

00:30:45.712 --> 00:30:48.649 
它还可以是
AddSticker Item

00:30:48.715 --> 00:30:49.983 
或者可以是一个贴图

00:30:50.117 --> 00:30:52.219 
现在让我们继续
看看贴图单元格

00:30:53.053 --> 00:30:55.422 
贴图单元格中有一个
MSStickerView

00:30:55.789 --> 00:30:58.759 
MSStickerView
将有一个贴图

00:30:59.693 --> 00:31:03.363 
并且 为了处理你的
动态贴图的动画

00:31:03.430 --> 00:31:06.800 
我们需要调用
startAnimating和stopAnimating

00:31:06.867 --> 00:31:09.036 
在我们展示
MSStickerView的时候

00:31:09.870 --> 00:31:12.906 
所以我们回到
StickerPickerCollectionViewController

00:31:14.808 --> 00:31:19.479 
很棒 当我们创建
ViewController时

00:31:19.546 --> 00:31:21.348 
创建我们所有的Item

00:31:21.782 --> 00:31:23.650 
我们将创建一个
AddStickerItem

00:31:23.717 --> 00:31:26.753 
然后我们将加载所有的贴图
就像我们刚才所做的一样

00:31:27.120 --> 00:31:29.590 
返回collectionView
中Item的数量

00:31:29.957 --> 00:31:32.993 
然后我们要创建贴图单元格
或Add Sticker 单元格

00:31:33.060 --> 00:31:34.995 
给一个Item与给定数字路径对应

00:31:36.396 --> 00:31:38.799 
当创建贴图单元格时
我们想要

00:31:38.866 --> 00:31:41.668 
赋予stickerView的贴图值

00:31:41.735 --> 00:31:43.136 
我们就这样做了

00:31:48.509 --> 00:31:51.211 
我们已经将一个贴图
放到了stickerView中

00:31:51.712 --> 00:31:54.281 
并且 如我所提到的
我们的贴图可以是动态的

00:31:54.381 --> 00:31:57.484 
我们将需要调用
启动动画和终止动画

00:31:57.551 --> 00:31:59.253 
来控制这些动画

00:31:59.353 --> 00:32:01.955 
当我们要展示
我们的贴图时我们想要

00:32:02.022 --> 00:32:05.158 
调用startAnimating
我们再展示我们的贴图时

00:32:05.225 --> 00:32:07.194 
我们将要调用
stopAnimating

00:32:07.461 --> 00:32:08.929 
我们可以写一个函数来检查

00:32:08.996 --> 00:32:10.931 
贴图是否是可动的

00:32:11.098 --> 00:32:15.369 
通过加载图片文件URL
并通过CG图片源

00:32:15.435 --> 00:32:17.137 
统计帧数

00:32:17.204 --> 00:32:18.672 
如果有多于一帧

00:32:18.739 --> 00:32:20.607 
那么我们就知道
这是一个动态贴图

00:32:21.308 --> 00:32:23.610 
所以我们就要
实现这个方法

00:32:24.778 --> 00:32:26.146 
我们将检查来看看

00:32:26.213 --> 00:32:28.615 
我们的贴图单元格中的贴图是否动态

00:32:28.682 --> 00:32:31.451 
如果是 那么我们
就调用startAnimating

00:32:32.619 --> 00:32:34.555 
当我们结束展示单元格时

00:32:36.423 --> 00:32:40.961 
我们就要检查
贴图是否在动 如果是

00:32:41.028 --> 00:32:42.596 
我们就调用
stopAnimating

00:32:43.497 --> 00:32:46.600 
太棒了 让我们回到
MessagesViewController

00:32:47.668 --> 00:32:50.571 
我们将实例化
StickerPickerViewController

00:32:50.637 --> 00:32:54.441 
因为我们需要在启动应用
时加载这个视图

00:32:54.608 --> 00:32:57.377 
在viewDidLoad完成
这个操作 然后展示

00:32:57.911 --> 00:33:00.180 
当用户点击Add图标时

00:33:00.848 --> 00:33:03.283 
我们需要创建
AddStickersViewController

00:33:03.584 --> 00:33:06.420 
然后我们就需要
转换到扩展模式

00:33:06.486 --> 00:33:09.389 
我们可以通过调用
requestPresentationStyle来完成

00:33:09.456 --> 00:33:11.391 
这会告诉Messages应用

00:33:11.458 --> 00:33:13.760 
你的应用需要被扩展

00:33:14.094 --> 00:33:16.396 
你会收到一个来自
Messages应用回调

00:33:16.463 --> 00:33:18.165 
一旦你完成转换

00:33:18.298 --> 00:33:22.135 
在didTransitiontopresentationStyle
中我们将收到回调

00:33:22.336 --> 00:33:23.704 
我们需要先检查

00:33:23.770 --> 00:33:25.806 
我们是否有AddStickersViewController

00:33:25.873 --> 00:33:29.009 
如果是的话
我们的展示风格是扩展的

00:33:29.076 --> 00:33:30.677 
我们就展示这个视图

00:33:30.744 --> 00:33:34.047 
不然我们就展示另一个视图
用在紧凑模式下

00:33:34.114 --> 00:33:37.084 
在我们选择一个贴图后
我们需要返回到紧凑模式

00:33:37.150 --> 00:33:40.020 
所以我们要再一次调用
requestPresentationStyle

00:33:40.087 --> 00:33:40.954 
.compact

00:33:41.421 --> 00:33:44.625 
所以如果我们运行应用我们就可以
看到真实情况

00:33:46.193 --> 00:33:48.295 
所以我现在要
选择Messages应用

00:33:48.362 --> 00:33:50.030 
作为运行的应用

00:33:53.333 --> 00:33:55.402  
然后我们要启动

00:33:56.303 --> 00:33:58.238 
我将要点击App Drawer

00:33:59.740 --> 00:34:02.075 
我们将要
点击Sticker Picker

00:34:04.645 --> 00:34:05.812 
等待它加载好

00:34:09.449 --> 00:34:13.085 
太棒了 现在我们可以
添加一个贴图

00:34:14.655 --> 00:34:16.556 
我要选择这个很可爱的大熊猫

00:34:17.558 --> 00:34:19.226 
我们可以看到它是动态的

00:34:19.293 --> 00:34:20.761 
然后我们就可以发送贴图

00:34:22.896 --> 00:34:25.899 
重述一下我们刚才
所讲的 我们首先介绍了

00:34:25.966 --> 00:34:30.137 
展示了如何创建一个贴图应用
使用UICollectionView

00:34:30.204 --> 00:34:32.639 
然后在每一个单元格中
UICollectionView中

00:34:32.706 --> 00:34:34.507 
我们有个MSStickerView

00:34:34.608 --> 00:34:37.643  
MSStickerView允许
我们拖拽释放贴图

00:34:37.710 --> 00:34:40.514  
进入编辑文本中
它也有一个MSSticker

00:34:41.614 --> 00:34:44.217  
我们还展示了如何你
可以从紧凑模式转换到

00:34:44.284 --> 00:34:46.053  
扩展展示模式

00:34:46.253 --> 00:34:48.856  
我们还展示了你如何
可以处理这些回调

00:34:48.922 --> 00:34:50.357  
来自Messages 应用

00:34:50.489 --> 00:34:54.527  
要记住你的用户可以通过
点击人字形图案来切换

00:34:54.594 --> 00:34:57.231  
所以在设计应用时
记住这一点

00:34:59.099 --> 00:35:01.768 
Bhaskar讲了我们使用的
贴图文件格式

00:35:01.835 --> 00:35:03.971 
创建Sticker Pack应用时

00:35:04.104 --> 00:35:07.941 
这些同样的文件格式
适用于创建一个定制贴图应用

00:35:08.208 --> 00:35:10.010 
所以总结一下我们今天所讲的

00:35:10.244 --> 00:35:14.147 
我们介绍了iMessage应用
作为一个平台提供给各位开发者

00:35:14.648 --> 00:35:18.018 
这是一种新的与短信息
交互的方法 很有趣且令人激动

00:35:18.485 --> 00:35:22.556 
我们还介绍了短信息框架以及如何创建
Sticker Pack应用

00:35:22.623 --> 00:35:23.991 
通过短信息框架

00:35:25.058 --> 00:35:27.461 
展示如何创建
Sticker Pack应用

00:35:27.528 --> 00:35:29.296 
使用Xcode 不用写代码

00:35:29.863 --> 00:35:33.834 
以及如何通过写程序
创建一个定制贴图应用

00:35:34.434 --> 00:35:35.736 
在我们讲话的第二部分中

00:35:35.802 --> 00:35:37.704 
我们将向大家展示如何创建一个应用

00:35:37.771 --> 00:35:40.974 
能允许你的应用
发送可交互的短信息

00:35:41.441 --> 00:35:43.710 
如需更多信息
请访问网站

00:35:44.278 --> 00:35:46.880 
我们会有一个相关会话
依旧在Presidio

00:35:46.947 --> 00:35:48.649 
周四下午1:40

00:35:48.916 --> 00:35:49.950 
很感谢大家

00:35:50.217 --> 00:35:53.320 
我们等不及看到你们的创造
请一定要来我们的实验室

00:35:53.387 --> 00:35:54.521 
接下来的会议过得愉快