00:00:19.319 --> 00:00:20.153 
tvOS有什么新内容

00:00:21.922 --> 00:00:23.991 
欢迎来到tvOS有何新内容这一会话

00:00:26.727 --> 00:00:29.396 
我是Hans
我是tvOS团队中的一名工程师

00:00:31.131 --> 00:00:34.201 
今年我们非常高兴
欢迎你

00:00:34.635 --> 00:00:37.538 
参加tvOS第一次的全球开发者大会

00:00:44.011 --> 00:00:47.981 
那么我想通过对tvOS简要概述
来作为今天下午的开始

00:00:49.316 --> 00:00:52.386 
我们会引导大家认识
tvOS 10的一些新功能

00:00:53.320 --> 00:00:56.924 
然后我们将就其中的几个
深入讨论更多细节

00:00:57.457 --> 00:00:59.092 
我们甚至有一个很好的案例示范

00:01:00.561 --> 00:01:01.395 
现在开始

00:01:03.730 --> 00:01:06.600 
仅仅九个月前
我们发布了新的Apple TV

00:01:07.334 --> 00:01:09.369 
伴随它还发布了tvOS

00:01:10.571 --> 00:01:15.142 
tvOS是一个现代操作系统
专为现代硬件所设计

00:01:16.009 --> 00:01:19.680 
而其仅是64位的
没有32位的运行时间

00:01:20.614 --> 00:01:24.351 
因此它会为你节省
很多的时间

00:01:25.185 --> 00:01:30.157 
来测试32位兼容性
或为32位片段进行配置

00:01:32.593 --> 00:01:34.194 
与你的iPhone

00:01:36.563 --> 00:01:38.498 
iPad甚至Mac都不同

00:01:39.366 --> 00:01:42.135 
Apple TV一直连接到
高速网络

00:01:42.836 --> 00:01:46.039 
这使得tvOS成为这样一个理想平台

00:01:46.306 --> 00:01:51.445 
在那里你可以卸载一些任务
比如管理你的应用的资源

00:01:52.012 --> 00:01:52.880 
用户数据

00:01:53.614 --> 00:01:58.051 
甚至是你的应用内容将其放到
某些技术中去 如CloudKit等

00:01:58.819 --> 00:02:00.120 
以及按需资源

00:02:02.256 --> 00:02:04.625 
CloudKit是你

00:02:04.858 --> 00:02:07.861 
在icloud中通往几乎无限的
存储空间的界面

00:02:09.263 --> 00:02:12.099 
它为你的资源提供了一个结构存储

00:02:13.033 --> 00:02:16.937 
它也为用户数据提供了一个公共的
和私人的数据库

00:02:17.938 --> 00:02:19.940 
正如你在前一会话中所听到的

00:02:20.407 --> 00:02:24.578 
可以跨iOS Mac OS和
tvOS平台来将其使用

00:02:25.312 --> 00:02:26.647 
并且也可以被分享

00:02:28.949 --> 00:02:31.351 
并且由于到iCloud认证

00:02:31.952 --> 00:02:33.720 
你再也不必问你的客户

00:02:34.188 --> 00:02:35.656 
要一个单独的登录账号了

00:02:37.824 --> 00:02:42.896 
即使你的应用碰巧在其他
没有CloudKit的平台上运行

00:02:43.297 --> 00:02:44.631 
这也依然成立

00:02:45.766 --> 00:02:49.236 
而通过使用CloudKit JS
以及其网络服务API

00:02:49.837 --> 00:02:52.339 
你就不必去推出自己的解决方案了

00:02:52.406 --> 00:02:55.209 
而仍然可利用
安全性和效率方面的优势

00:02:58.378 --> 00:03:02.983 
目前 如果按照传统做法
客户不得不下载整个应用

00:03:03.350 --> 00:03:05.219 
这样才能将其发布并开始使用

00:03:06.320 --> 00:03:10.023 
而只要应用体积增大
这就成为一个痛点

00:03:11.692 --> 00:03:15.095 
因为我们等着下800兆的文件
不是要为了找乐子的

00:03:17.231 --> 00:03:19.399 
这不仅令用户沮丧

00:03:19.466 --> 00:03:21.401 
同时对我们开发者来说也是一个挑战

00:03:21.902 --> 00:03:23.070 
因为客户

00:03:23.570 --> 00:03:26.907 
甚至可能在他们能够尝试之前
就对我们的应用失去兴趣

00:03:29.009 --> 00:03:30.511 
按需资源……

00:03:31.778 --> 00:03:34.615 
利用Apple TV的
一直在线的优势

00:03:35.716 --> 00:03:38.619 
并提供一种机制
据此你的应用甚至可以

00:03:38.685 --> 00:03:40.921 
在其所有内容被下载之前
就作出发布

00:03:42.089 --> 00:03:44.958 
这意味着你的客户
他们可以更快的用上此应用

00:03:46.326 --> 00:03:48.195 
而当应用被下载时

00:03:49.263 --> 00:03:52.132 
该系统可以继续
下载更多内容

00:03:52.432 --> 00:03:55.035 
所以在需要它们的时候
它们就已经准备好了

00:03:55.736 --> 00:03:57.704 
进一步减少等待时间

00:04:00.674 --> 00:04:05.846 
而且应用的尺寸可以非常大

00:04:05.913 --> 00:04:09.883 
事实上
比传统上所能同意的大得多

00:04:10.651 --> 00:04:11.885 
让我们来看看这个

00:04:15.255 --> 00:04:20.093 
每个应用都有一个
可执行资源和基础资源的主应用包

00:04:21.128 --> 00:04:22.529 
使用ODR时

00:04:22.796 --> 00:04:26.667 
你的主应用包的尺寸
可高达200兆字节

00:04:28.001 --> 00:04:32.206 
你可以向此应用包添加第一组
待下载内容

00:04:32.639 --> 00:04:35.609 
这样当应用安装时
它们就已经准备好了

00:04:36.610 --> 00:04:39.646 
例如这可能是
你的游戏的前三关

00:04:41.481 --> 00:04:44.184 
第一组被称为
初始安装标签

00:04:45.919 --> 00:04:48.055 
而这可以最多高达两个千兆字节

00:04:50.190 --> 00:04:51.692 
如果你有更多的内容呢？

00:04:52.292 --> 00:04:55.529 
那么
你可以指定安装之后

00:04:56.530 --> 00:04:59.199 
需要立即下载的
额外的资源包

00:05:01.201 --> 00:05:03.403  
而这就被称作预取标签

00:05:04.638 --> 00:05:09.109  
预取标签用于你知道
你会尽快需要的内容

00:05:09.543 --> 00:05:13.013 
但不够快到足以解释
对你应用的首次发布的阻止

00:05:13.213 --> 00:05:15.682 
从而防止你的用户使用此应用

00:05:18.785 --> 00:05:19.620 
因此 例如

00:05:22.122 --> 00:05:23.357 
如果你的用户正在玩

00:05:24.958 --> 00:05:26.260 
你的游戏的第一关

00:05:27.327 --> 00:05:30.364 
该系统将开始下载
第四、五、六关

00:05:31.265 --> 00:05:34.968 
而当用户过了第三关时
下一关

00:05:35.903 --> 00:05:39.273 
已经下载好
就等着用户去玩了

00:05:40.407 --> 00:05:44.344 
所以这样的等待就已经
从用户被转移到该系统了

00:05:45.245 --> 00:05:48.682 
而系统不介意等待
但用户介意

00:05:50.884 --> 00:05:53.387 
预取标签使用其剩余允许量时

00:05:55.355 --> 00:05:57.057 
其尺寸可以高达四个千兆字节

00:05:58.091 --> 00:06:02.496 
所以如果你为初始安装标签
用了500兆字节

00:06:03.330 --> 00:06:06.800 
那么你为预取标签
就有3.5千兆字节

00:06:08.602 --> 00:06:12.506 
如果你已经用了
你的初始安装标签的两千兆字节

00:06:12.806 --> 00:06:16.543 
则你自然就为你的预取标签
有两千兆字节

00:06:17.744 --> 00:06:19.913 
如果你没有初始安装标签呢？

00:06:21.615 --> 00:06:24.618 
从数学上来讲你的预取标签
有四千兆字节 但是

00:06:25.853 --> 00:06:28.856 
你可能希望将一些内容
移入初始安装标签

00:06:28.922 --> 00:06:30.324 
这样它们就可被早点使用了

00:06:35.429 --> 00:06:36.496 
类似的

00:06:37.331 --> 00:06:41.168 
在应用被进一步使用时
更多的资源包可以被下载

00:06:42.736 --> 00:06:46.139 
总下载内容
可高达20千兆字节

00:06:46.640 --> 00:06:50.644 
使应用包和可下载内容的总尺寸

00:06:51.078 --> 00:06:53.046 
达到令人惊叹的20.2千兆字节

00:06:58.585 --> 00:07:00.220 
而这不仅只是一个大数字

00:07:00.821 --> 00:07:04.458 
它还是一个客户感受不到
其沉重和繁琐的大数字

00:07:04.858 --> 00:07:06.627 
因为他们可以更早开始

00:07:06.793 --> 00:07:09.897 
而且他们可以继续使用应用
而没有多少中断

00:07:12.132 --> 00:07:16.837 
晶体管是一个很棒的游戏
也是使用ODR的好例子

00:07:17.838 --> 00:07:20.674 
它的应用包有160兆字节

00:07:21.208 --> 00:07:23.710 
初始安装标签有500兆字节

00:07:23.777 --> 00:07:26.880 
所以它能快速下载并安装

00:07:28.782 --> 00:07:31.985 
但由于900兆字节的
预取标签

00:07:33.487 --> 00:07:37.357 
玩家就可以不断被
新而华丽的游戏关卡所挑战

00:07:38.358 --> 00:07:40.694 
而几乎没有任何中断

00:07:42.629 --> 00:07:44.631 
但是ODR不只用于游戏

00:07:46.934 --> 00:07:50.070 
我最喜欢的应用之一是
Earthlapse TV

00:07:51.605 --> 00:07:52.840 
Earthlapse TV

00:07:53.373 --> 00:07:57.344 
推出从国际空间站
得到的时间推移视频

00:07:58.178 --> 00:08:01.448 
并在你的客厅
创建一个虚拟窗口

00:08:02.983 --> 00:08:07.187 
它拥有超过一千兆字节的
超高品质的内容

00:08:07.654 --> 00:08:11.191 
然而它下载
和启动都很迅速

00:08:12.159 --> 00:08:15.395 
并且在内容之间跳跃时
几乎没有任何等待

00:08:18.198 --> 00:08:19.166 
所以这就是ODR

00:08:20.367 --> 00:08:23.470 
顺便提一下
那是从Cupola模块看到的加拿大

00:08:27.608 --> 00:08:30.110 
现在让我们来看看
我们如何与电视进行交互

00:08:32.111 --> 00:08:35.015 
我们每天都使用电话
而且我们已经很习惯了

00:08:36.650 --> 00:08:40.587 
但独特的是
我们的关注和行动都

00:08:41.388 --> 00:08:44.458 
就在我们面前
在触摸表面上

00:08:46.593 --> 00:08:48.395 
然而当你看电视时

00:08:49.263 --> 00:08:52.866 
我们的注意力在10英尺之外
在房间的另一侧

00:08:54.134 --> 00:08:57.804 
而我们的行动在遥控器上
就在我们手中

00:08:58.438 --> 00:09:00.674 
两者之间
没有直接的联系

00:09:02.910 --> 00:09:06.280 
tvOS提供了一个独特的机会

00:09:06.613 --> 00:09:09.783 
来使这方面的体验
更为直接和相关

00:09:11.451 --> 00:09:13.220 
首先是Siri Remote

00:09:14.154 --> 00:09:15.522 
通过其触摸表面

00:09:15.956 --> 00:09:20.060 
Siri Remote实现了
一种新的基于集中的交互

00:09:21.028 --> 00:09:23.664 
而其是专为
这样的环境所设计的

00:09:24.865 --> 00:09:30.470 
通过在触摸表面上
按下按钮和使用手势

00:09:31.772 --> 00:09:34.641 
用户可以将焦点
从一个元素移到另一个上

00:09:36.577 --> 00:09:40.681 
停留在特定的一个上
然后点击来触发操作

00:09:47.821 --> 00:09:49.857 
为了配合这一集中交互

00:09:50.123 --> 00:09:53.794 
tvOS也引入了
一种新的视差效果

00:09:55.462 --> 00:09:58.765 
这种视差效果使你感觉到
你的焦点在哪里

00:09:59.533 --> 00:10:02.503 
也让你觉得
你和屏幕相连在一起

00:10:04.705 --> 00:10:07.441 
而利用视差效果的
最好的方式

00:10:07.741 --> 00:10:09.877 
是使用分层图像

00:10:12.813 --> 00:10:15.849 
分层图像
是为tvOS所设计的一种图像类型

00:10:16.817 --> 00:10:19.353 
当元素处于对焦状态时

00:10:19.720 --> 00:10:21.154 
它会增强深度和活力

00:10:24.391 --> 00:10:26.693 
它最多可以有五层

00:10:27.828 --> 00:10:30.097 
实际上它也是应用图标所需要的

00:10:33.133 --> 00:10:37.137 
为了创建新的分层图像
你可使用Xcode的资源目录

00:10:38.105 --> 00:10:40.607 
Mac OS的Parallax
Previewer应用

00:10:41.942 --> 00:10:45.145 
以及Photoshop的
Parallax Exporter插件

00:10:45.879 --> 00:10:49.750 
当然所有这些
都可从developer.apple.com下载

00:10:52.686 --> 00:10:57.524 
现在让我们退一步
看一看主屏幕

00:10:59.092 --> 00:11:02.563 
主屏幕这里
这个10英尺的体验被最佳示出

00:11:04.865 --> 00:11:10.470 
第一行应用图标上面
是所谓的Top Shelf区域

00:11:11.872 --> 00:11:14.975 
而放在第一行的应用
能够参与其中

00:11:17.811 --> 00:11:21.715 
你的应用可呈现最相关的特性或内容

00:11:21.782 --> 00:11:25.152 
因为内容的快捷方式
深藏在你的应用的内部

00:11:25.986 --> 00:11:28.021 
所以你的客户
可以直接跳到它

00:11:28.856 --> 00:11:32.693 
而这可能是
例如你的电影的一张海报

00:11:39.199 --> 00:11:44.037 
音乐专辑封面
横幅广告

00:11:44.505 --> 00:11:46.073 
或可让应用有意义的任何东西

00:11:51.245 --> 00:11:54.915 
Top Shelf是一个把客户带回
你的应用的伟大的管道

00:11:54.982 --> 00:11:57.684 
因此我们强烈建议
你利用它

00:11:57.985 --> 00:12:00.954 
而不是仅仅让它提供一个占位符图像

00:12:04.358 --> 00:12:07.528 
现在让我们再回到
主屏幕

00:12:08.929 --> 00:12:11.632 
主屏幕上是你关心的应用的集合

00:12:12.466 --> 00:12:14.168 
如你在keynote中听到的

00:12:15.269 --> 00:12:17.271 
我们相信电视的未来是应用

00:12:18.672 --> 00:12:21.942 
这一切都被App Store所实现

00:12:24.111 --> 00:12:28.182 
App Store正如在
iOS上一样 是你去浏览

00:12:28.582 --> 00:12:30.584 
发现和下载应用的地方

00:12:31.952 --> 00:12:34.988 
而且由于它在
iOS和tvOS上都存在

00:12:36.757 --> 00:12:38.659 
所以它支持通用购买

00:12:39.826 --> 00:12:43.063 
所以如果你的客户
已在iOS上下载了此应用

00:12:43.564 --> 00:12:47.467 
他们就可免费在tvOS上享用此应用
只需按下一个按钮

00:12:49.937 --> 00:12:53.340 
由于Apple TV的持续连接

00:12:53.674 --> 00:12:57.377 
在tvOS 10中
我们要介绍的是自动下载

00:12:58.378 --> 00:13:00.581 
所以在iOS上被下载的应用

00:13:00.647 --> 00:13:02.816 
将被自动下载到电视里

00:13:04.818 --> 00:13:05.652 
就那么简单

00:13:07.154 --> 00:13:10.290 
这样会更容易让你的客户
来获取你的应用

00:13:11.758 --> 00:13:13.527 
但是你打算怎么将其建立呢？

00:13:15.495 --> 00:13:19.600 
tvOS 提供与iOS、
Mac OS和watchOS相同的

00:13:20.634 --> 00:13:23.470 
开发工具和语言

00:13:24.805 --> 00:13:27.441 
还有许多你已经知道的
相同的框架 例如

00:13:27.808 --> 00:13:32.012 
UIKit、Foundation、
Core Animation

00:13:32.079 --> 00:13:34.348 
AVFoundation、
Core Audio

00:13:34.748 --> 00:13:38.585 
等等等等 在tvOS上都可用

00:13:39.486 --> 00:13:43.757 
另外在tvOS 9.2中
我们也把MapKit带到了电视之中

00:13:45.926 --> 00:13:47.928 
但是这仍然只是整个列表中的一个部分

00:13:47.995 --> 00:13:50.264 
可供你挑选的还有很多

00:13:51.632 --> 00:13:53.800 
例如 如果你正在开发一个游戏

00:13:54.301 --> 00:13:55.936 
你会很高兴知道

00:13:56.003 --> 00:13:58.172 
你所喜爱的
所有游戏技术

00:13:58.705 --> 00:14:00.908 
在tvOS上都是可用的：

00:14:01.408 --> 00:14:04.811 
Game Center、Game
Controller、GameplayKit

00:14:05.612 --> 00:14:08.682 
Model I/O、MetalKit
Performance Traders

00:14:09.116 --> 00:14:11.852 
SpriteKit
SceneKit还有很多很多

00:14:11.919 --> 00:14:14.154 
要什么有什么

00:14:16.890 --> 00:14:21.962 
最后tvOS还引入了
一个全新的高级框架

00:14:22.362 --> 00:14:24.064 
叫做TVMLKit

00:14:25.732 --> 00:14:28.402 
TVMLKit通过为你处理

00:14:28.468 --> 00:14:30.704 
诸如布局和焦点管理之类的重活累活

00:14:31.305 --> 00:14:34.107 
来使你可以
相当方便的打造

00:14:34.608 --> 00:14:36.109 
以内容为中心的应用

00:14:37.578 --> 00:14:41.715 
而它通过为布局使用预定义模板

00:14:42.549 --> 00:14:44.685 
应用逻辑使用
JavaScript来操作

00:14:45.686 --> 00:14:48.488 
它用于快速迭代和部署 真的很棒

00:14:49.089 --> 00:14:51.558 
而且当然
它也被调整过来得到强大的性能

00:14:53.193 --> 00:14:57.598 
事实上Apple自己的一些应用
也是用TVML

00:14:59.199 --> 00:15:00.200 
那个电影应用所打造的

00:15:02.402 --> 00:15:05.739 
的确App Store本身就是
用TVMLKit打造的

00:15:08.141 --> 00:15:11.612 
而所有在iOS上帮你微调
和优化你的应用

00:15:11.979 --> 00:15:14.882 
的开发工具

00:15:15.115 --> 00:15:19.786 
例如Unit Testing
App Analytics和TestFlight

00:15:20.487 --> 00:15:22.489 
在tvOS上也都是可用的

00:15:27.361 --> 00:15:31.732 
今年tvOS继续提供
令人兴奋的新功能

00:15:32.499 --> 00:15:34.001 
如同你在主题演讲中听到一样

00:15:35.002 --> 00:15:37.171 
我们正在把HomeKit引入电视

00:15:37.304 --> 00:15:39.806 
这样就能从电视上
控制与HomeKit相兼容的

00:15:39.873 --> 00:15:40.707 
配件了

00:15:42.442 --> 00:15:44.111 
我们也正在引入PhotoKit

00:15:44.545 --> 00:15:47.781 
这样你的应用就可以利用
你客户的iCloud照片库了

00:15:50.784 --> 00:15:53.587 
使用SpriteKit
甚至变得更简单了

00:15:54.421 --> 00:15:57.624 
多亏了来自焦点引擎的
本地支持

00:15:58.792 --> 00:16:02.396 
你的运动和导航
会感觉更自然

00:16:03.664 --> 00:16:06.200 
并与OS其他部分完全集成
而这是免费的

00:16:07.868 --> 00:16:09.803 
说起运动和导航

00:16:11.138 --> 00:16:14.341 
玩游戏的一个组成部分
是你如何控制它们

00:16:17.010 --> 00:16:20.180 
你可以把Siri Remote当做
一个轻量级的游戏控制器

00:16:20.781 --> 00:16:26.053 
竖着拿
并使用像刷卡之类的手势

00:16:26.587 --> 00:16:28.555 
以及例如 点击跳跃

00:16:29.957 --> 00:16:30.858 
来控制游戏

00:16:31.992 --> 00:16:36.029 
如果你的标题要求
稍微复杂的输入

00:16:39.066 --> 00:16:41.235 
你可以把它作为
仅有基本的D-pads

00:16:41.301 --> 00:16:44.304 
和两按钮控制的
小型游戏平板电脑横着拿

00:16:46.440 --> 00:16:50.444 
如果你的游戏标题要求
甚至更为复杂的输入

00:16:51.078 --> 00:16:53.113 
你可以使用扩展游戏控制器

00:16:53.180 --> 00:16:55.215 
和你在
国情咨文演说中所听到的一样

00:16:55.282 --> 00:16:56.216 
最多可以用4个

00:16:57.885 --> 00:16:59.720 
你现在有一个选项

00:17:00.254 --> 00:17:02.990 
来要求使用
基于MFI的游戏控制器

00:17:03.857 --> 00:17:06.093 
而app store将会在必要时
根据情况

00:17:06.159 --> 00:17:07.094 
向用户弹出提示

00:17:08.896 --> 00:17:13.032 
我们也在将ReplayKit移入电视

00:17:14.468 --> 00:17:15.636 
使用ReplayKit

00:17:16.502 --> 00:17:19.940 
玩家可以在本地设备上
录制自己的gameplay

00:17:21.008 --> 00:17:23.877 
并通过AirDrop与朋友们分享

00:17:24.912 --> 00:17:25.945 
但是这还不是全部

00:17:27.114 --> 00:17:30.083 
游戏玩家现可在
诸如Mobcrush的服务上

00:17:30.517 --> 00:17:32.319 
实时广播其gameplay

00:17:35.689 --> 00:17:38.792 
在tvOS 10中我们也将和
iOS 10一道引入

00:17:41.662 --> 00:17:45.132 
一个全新的
UserNotification.framework

00:17:46.233 --> 00:17:47.067 
还有

00:17:48.368 --> 00:17:51.405 
ExternalAccessory.framework
这个用于

00:17:51.672 --> 00:17:52.673 
来自iOS的蓝牙配件

00:17:54.174 --> 00:17:57.678 
我们也在推出一个全新的
Apple TV遥控应用

00:17:58.879 --> 00:18:02.549 
最后用户可以设置
其系统外观

00:18:02.616 --> 00:18:04.151 
的明暗程度

00:18:06.687 --> 00:18:09.156 
而当你实际打造应用时

00:18:10.324 --> 00:18:11.425 
你会有很多选择

00:18:13.427 --> 00:18:15.929 
你可能需要把UIKit
用作你的基准

00:18:16.330 --> 00:18:19.233 
并利用所有可用的框架

00:18:19.733 --> 00:18:22.836 
如果你已经习惯
全天然框架

00:18:25.105 --> 00:18:26.740 
或若你有一个现有的iOS应用

00:18:27.608 --> 00:18:30.410 
我们本周会有一些伟大的会话
请你不要错过

00:18:30.978 --> 00:18:33.547  
包括在tvOS上掌握UIKit

00:18:35.282 --> 00:18:38.785  
在那里你可以把你的UIKit应用
提升一个层次

00:18:40.120 --> 00:18:42.122 
而就在tvOS上的焦点交互

00:18:43.590 --> 00:18:45.058 
我们将回顾焦点系统

00:18:45.759 --> 00:18:47.928 
讨论一些tvOS 10上的新功能

00:18:48.328 --> 00:18:49.963 
还要讨论SpriteKit

00:18:54.234 --> 00:18:56.737 
我们还建议你看看TVMLKit

00:18:58.505 --> 00:19:01.909 
TVMLKit是一个令人难以置信的
丰富的框架

00:19:03.377 --> 00:19:08.182 
若你的技能已经
包括JavaScript和XML

00:19:09.750 --> 00:19:11.785 
那么就真的很容易使用TVMLKit

00:19:11.852 --> 00:19:14.855 
来迅速开发和部署以内容为中心的应用

00:19:15.989 --> 00:19:18.825 
而由于TVMLKit是打造于
UIKit之上的

00:19:19.326 --> 00:19:22.829 
你甚至可以混合进UIKit中
来做进一步的定制

00:19:26.366 --> 00:19:29.670  
而这些会话侧重
从TVMLKit取得最大获益

00:19:29.736 --> 00:19:32.072  
所以我们强烈建议你来看看

00:19:33.473 --> 00:19:35.509  
如果你是一个游戏开发者
那么当然

00:19:35.909 --> 00:19:39.646 
所有打包成GameKit
的游戏技术

00:19:39.713 --> 00:19:40.981 
很可能也是你的选择

00:19:46.587 --> 00:19:48.889  
下面我要加速了

00:19:49.489 --> 00:19:52.926 
我们要深入研究
tvOS 10中的一些新特性

00:19:53.293 --> 00:19:56.864 
为此 现在有请
我的同事Marshall Huss

00:20:05.072 --> 00:20:07.941 
下午好我是Marshall
我是一名tvOS工程师

00:20:08.509 --> 00:20:10.777 
今天我们要深入研究如何应用

00:20:10.844 --> 00:20:14.381 
tvOS 10中的某些新特性

00:20:15.916 --> 00:20:19.052 
在主题演讲中听到新的
Apple TV Remote应用

00:20:20.087 --> 00:20:22.756 
我们来看看如何使用通知

00:20:22.956 --> 00:20:25.392 
当你有新内容时
如何通知用户

00:20:26.827 --> 00:20:29.329 
最后我们要看看如何在你的应用中

00:20:29.396 --> 00:20:31.331 
实现明/暗外观调整

00:20:34.067 --> 00:20:37.938 
因此新的Apple TV Remote应用
和Siri Remote的工作模式一模一样

00:20:38.005 --> 00:20:41.275 
所以不需要做任何更改
就能让你的应用运行起来

00:20:42.209 --> 00:20:45.212 
它还包括
一个新的游戏控制器布局

00:20:45.646 --> 00:20:47.447 
这样用户可以用它来打游戏

00:20:50.083 --> 00:20:52.352 
现在如果用户正在使用此应用

00:20:52.419 --> 00:20:55.522 
你的应用针对游戏控制器框架做了连接

00:20:55.589 --> 00:20:58.225 
则他们会在导航栏得到一个新图标

00:20:58.292 --> 00:20:59.326 
看起来是这样的

00:21:00.060 --> 00:21:03.463 
当该用户点击该图标时
他们面前会呈现

00:21:03.530 --> 00:21:06.633 
一个游戏控制器布局
可通过旋转电话来使用

00:21:08.202 --> 00:21:11.805  
要了解如何最大限度利用
游戏控制器框架

00:21:11.872 --> 00:21:13.974  
我们本周晚些时候
会有一个会话

00:21:15.008 --> 00:21:18.879  
种子今天就可用
请去下载和尝试

00:21:21.048 --> 00:21:23.951 
接下来
我们要看看通知

00:21:24.218 --> 00:21:26.186 
以及当你有新的内容可用时

00:21:26.253 --> 00:21:28.055 
如何使用它们来通知用户

00:21:28.689 --> 00:21:30.791 
你可能会习惯的
一个操作此事的好方法

00:21:30.958 --> 00:21:32.759 
是把你的应用图标做成徽章

00:21:32.826 --> 00:21:35.128 
我们已经在tvOS 10中
增加了这种支持

00:21:36.396 --> 00:21:40.067 
现在就iOS你得向用户要求权限

00:21:40.133 --> 00:21:42.069 
来把应用图标做成徽章

00:21:42.202 --> 00:21:44.438 
但在tvOS上
这看起来有点不同

00:21:44.638 --> 00:21:46.974 
他们会得到
全屏模式警报

00:21:47.608 --> 00:21:48.709 
所以一定要确保

00:21:48.775 --> 00:21:51.111 
你在适当的时间
申请许可

00:21:51.178 --> 00:21:54.181 
否则这可能是
用户使用应用的第一次体验

00:21:55.849 --> 00:21:58.886 
我们还添加了
对于远程通知的支持

00:21:58.952 --> 00:22:01.688 
这样你就可以使用
Apple的推送通知服务

00:22:01.755 --> 00:22:03.323 
来发送远程通知了

00:22:04.057 --> 00:22:06.660 
我们支持两种通知类型

00:22:06.793 --> 00:22:11.999 
那些都是我们刚才看到的徽章
而且也会有内容提供

00:22:13.400 --> 00:22:15.869 
现在如果你的应用在后台

00:22:15.936 --> 00:22:19.072 
那么这些有内容可用的应用
将不会叫醒你的应用

00:22:19.139 --> 00:22:21.275 
就像你可能在iOS中所习惯的那样

00:22:21.675 --> 00:22:23.443 
让我们来看看这是什么意思

00:22:24.044 --> 00:22:26.513 
比方说你的用户
有新的内容可用

00:22:26.580 --> 00:22:27.848 
好的通知方式是发送一个

00:22:27.915 --> 00:22:31.785 
有内容的推送通知
以及一个数值为1的徽章

00:22:32.286 --> 00:22:35.689 
如果应用未打开
tvOS将保留此通知

00:22:36.190 --> 00:22:37.624 
并更新用户的徽章

00:22:38.091 --> 00:22:40.227 
现在用户获得更多的可用内容

00:22:40.294 --> 00:22:43.864 
所以你可以发送另一个推送通知
其将更新徽章图标

00:22:45.632 --> 00:22:48.368 
tvOS将保留
最新的通知

00:22:48.602 --> 00:22:50.170 
并等待应用回来

00:22:50.237 --> 00:22:52.639 
最后
你会得到更多的可用内容

00:22:52.706 --> 00:22:54.308 
而你也可以再次更新徽章

00:22:54.641 --> 00:22:55.642 
当用户准备好之后

00:22:55.709 --> 00:22:58.045 
回到应用并看看他们有什么新内容时

00:22:58.345 --> 00:22:59.379 
他们可以打开应用

00:22:59.813 --> 00:23:02.816 
而我们提供上次通知
这样你就可以到你的服务器

00:23:02.883 --> 00:23:05.319 
并也许获得
任何可用的新内容

00:23:07.721 --> 00:23:08.956 
为了支持这一点

00:23:09.022 --> 00:23:11.592 
你必须使用
新用户通知框架

00:23:11.992 --> 00:23:15.562 
如果你之前已经
在iOS中应用过通知

00:23:15.629 --> 00:23:17.831 
你可能习惯了使用UIKit API

00:23:18.332 --> 00:23:20.734 
到现在为止那些在tvOS中
是被禁止的

00:23:20.801 --> 00:23:22.102 
而它们将被保持禁止

00:23:22.169 --> 00:23:25.005 
所以为了全力支持本地通知
和[听不清]的通知

00:23:25.072 --> 00:23:28.408 
你将需要使用
新用户通知框架

00:23:28.809 --> 00:23:30.611 
我们本周会有关于你可以如何学习

00:23:30.677 --> 00:23:33.413 
在你的应用中
完全将其应用的会话

00:23:35.148 --> 00:23:37.317 
而终于在今天
我们要去看一看

00:23:37.384 --> 00:23:39.987 
tvOS上的
新的明暗外观

00:23:41.188 --> 00:23:44.491 
我们看到这是
给用户的一个全系统的设置

00:23:45.025 --> 00:23:47.594 
用户将确定其何时
想在明暗之间

00:23:47.661 --> 00:23:48.762 
做出改变

00:23:49.296 --> 00:23:50.631 
现在要考虑的事情

00:23:50.697 --> 00:23:53.133 
是用户可能在不同的环境
有一定的空间

00:23:53.200 --> 00:23:55.135 
它可以是在一个电影厅中
那里很暗

00:23:55.202 --> 00:23:57.771 
它可能是在起居室中
里面有很多窗户

00:23:57.838 --> 00:24:00.440 
或者用户可以
根据一天中的时间改变它

00:24:00.941 --> 00:24:03.577 
所以为了尊重用户的选择
为其提供最好的

00:24:03.644 --> 00:24:05.679 
用户体验非常重要

00:24:07.581 --> 00:24:10.150 
为了充分支持这一点
我们已经

00:24:10.450 --> 00:24:12.152 
在UITraitCollection上添加了新的API

00:24:14.221 --> 00:24:17.391 
你必须真正选择加入
黑暗的外观

00:24:20.294 --> 00:24:22.129 
如果你不选择加入

00:24:22.196 --> 00:24:25.365 
你的应用将继续留在亮处
就像在tvOS 9中所做的一样

00:24:28.502 --> 00:24:30.571 
让我们一起来看看
如何才能让你的应用

00:24:30.637 --> 00:24:33.173 
采用新的明
暗系统的外观

00:24:34.942 --> 00:24:38.045 
第一步是添加一把新钥匙
到你的Info.plist

00:24:38.111 --> 00:24:41.014 
我们添加了一个叫做
UIUserInterfaceStyle

00:24:41.481 --> 00:24:44.718 
如果设置了明值
它就总是解析为明

00:24:44.985 --> 00:24:47.821 
如果设置了暗值
你的应用就总是解析为暗

00:24:48.088 --> 00:24:50.791 
或者如果你使用我们所推荐的 自动的

00:24:50.858 --> 00:24:53.060 
它尊重用户和系统设定

00:24:53.126 --> 00:24:55.162 
并通过你的应用进行传播

00:24:56.230 --> 00:24:59.900 
如果你用Xcode 8为
tvOS制作新项目

00:24:59.967 --> 00:25:02.002 
这实际上将默认为自动

00:25:03.403 --> 00:25:05.772 
有新API和
TraitCollection

00:25:05.839 --> 00:25:08.876 
我们增加了一个新属性
称为UserInterfaceStyle

00:25:09.543 --> 00:25:12.613 
这可能有不确定的值
可能是

00:25:12.679 --> 00:25:15.282 
如果你的视图尚未被插入视图层次结构

00:25:15.449 --> 00:25:17.284 
或者它可以或明或暗

00:25:17.351 --> 00:25:20.654 
具体取决于系统设置
和你的应用支持什么

00:25:24.258 --> 00:25:27.327 
为了支持开发者将其采用

00:25:27.394 --> 00:25:29.162 
我们增加了开发工具支持

00:25:29.363 --> 00:25:31.565 
到界面生成器和模拟器

00:25:32.399 --> 00:25:34.301 
如果你使用标准的UIKit控制

00:25:34.368 --> 00:25:36.870 
这些实际上会为你自动改变

00:25:37.337 --> 00:25:39.740 
如果你习惯使用外观代理

00:25:39.806 --> 00:25:42.809 
那么重构一点点
然后你就可以指定颜色了

00:25:42.876 --> 00:25:44.545 
这取决于TraitCollection

00:25:44.945 --> 00:25:46.647 
如果你想要最大程度的控制

00:25:46.713 --> 00:25:48.749 
你可以应用
TraitCollectionDidChange

00:25:48.815 --> 00:25:50.651 
在你的视图或视图控制里

00:25:53.287 --> 00:25:56.690 
现在在界面生成器
你可以指定颜色

00:25:56.757 --> 00:25:58.792 
就在检查者中规定明暗

00:26:00.827 --> 00:26:03.697 
我们向Storyboard
增加了一个明暗预览

00:26:03.764 --> 00:26:06.033 
这样你就可以迅速开发
和设计你的应用了

00:26:06.567 --> 00:26:09.069 
我们还向模拟器增加了一个快捷方式
从而能

00:26:09.136 --> 00:26:11.839 
这些系统外观之间
快速切换

00:26:15.209 --> 00:26:18.745 
我提过UIKit控制
会将其自动更新

00:26:19.146 --> 00:26:21.248 
而我们在自己的系统应用中
对其大量应用

00:26:21.481 --> 00:26:22.749 
我们看到某些视图

00:26:22.816 --> 00:26:25.619 
比如这个键盘
或文本字段或分段控制

00:26:25.686 --> 00:26:29.256 
会自动更新风格
以在电视壁纸上显示最好的效果

00:26:29.590 --> 00:26:32.092 
若你使用表格视图
像我们在设置应用中一样

00:26:32.359 --> 00:26:34.862 
它会自动调整其背景颜色

00:26:34.928 --> 00:26:37.297 
文本颜色
以及所有的参数来使其看起来好看

00:26:37.364 --> 00:26:39.867 
如果你正在使用系统内置键盘

00:26:39.967 --> 00:26:41.468 
那么那些也会自行调整

00:26:43.670 --> 00:26:46.640 
如果你正在尝试自定义你的文字

00:26:46.707 --> 00:26:49.576 
我们已添加支持到
UILabel和UITextView

00:26:49.643 --> 00:26:52.212 
这样它们也就会自动改变其颜色

00:26:52.946 --> 00:26:56.016 
为轻巧美观
文字颜色设置为黑色

00:26:56.483 --> 00:26:58.752 
外观为暗时
它将被设定为白色

00:26:59.052 --> 00:27:01.622 
但有需要注意的是
如果你设置过文本颜色

00:27:01.688 --> 00:27:04.057 
则你将自行负责
为此两种模式

00:27:04.124 --> 00:27:05.692 
更新该颜色

00:27:08.061 --> 00:27:11.298 
我们还添加了
两个新的模糊样式到API

00:27:12.366 --> 00:27:15.235 
你现在可以使用
UIBlurEffectStyleRegular

00:27:15.302 --> 00:27:17.371 
或UIBlurEffectStyleProminent了

00:27:17.771 --> 00:27:19.573 
我们称这些为自动样式

00:27:19.640 --> 00:27:22.976 
他们实际上将基于系统设置内容来调整

00:27:23.043 --> 00:27:24.912 
有效的模糊效果的风格

00:27:25.345 --> 00:27:27.981 
所以如果你使用
UIBlurEffectStyleRegular

00:27:28.048 --> 00:27:31.318 
而系统是浅色 则其将使用
UIBlurEffectStyle.light

00:27:31.485 --> 00:27:34.087 
如果使用常规和深色
你将使用深色

00:27:34.154 --> 00:27:37.591 
如果你使用突出 其将使用
.extraLight和.extraDark

00:27:38.292 --> 00:27:40.327 
.extraDark被放在
稍后种子中

00:27:44.198 --> 00:27:47.334 
现在你可以用外观代理
定制你的应用了

00:27:47.401 --> 00:27:49.837 
所以你可能有这样的代码

00:27:50.170 --> 00:27:52.806 
它设置一个按钮的标题颜色为红色

00:27:53.407 --> 00:27:55.008 
重新调整一点点

00:27:55.075 --> 00:27:57.544 
就可为明暗两色都提供
TraitCollection

00:27:57.611 --> 00:27:59.780 
而使用外观代理API

00:27:59.847 --> 00:28:03.050 
我们可以为那些具体的
TraitCollections 设置一种颜色

00:28:03.116 --> 00:28:06.687 
现在这种情况下我们的按钮
将在浅色外观下使用红色

00:28:06.954 --> 00:28:08.856 
将在深色外观下使用蓝色

00:28:10.624 --> 00:28:13.527 
最后如果你想要
在这些变化中有最多的控制

00:28:13.594 --> 00:28:15.229 
你可以直接回复他们

00:28:16.096 --> 00:28:18.298 
使用TraitCollectionDidChange
你就能在

00:28:18.365 --> 00:28:20.067 
在你的视图或视图控制器中做到

00:28:20.167 --> 00:28:22.870 
让我们来看一个对此应用会是什么样子

00:28:23.136 --> 00:28:26.640 
首先我们在视图控制器中覆写了
TraitCollectionDidChange

00:28:28.175 --> 00:28:30.711 
然后我们检查以确保
UITraitCollection

00:28:30.777 --> 00:28:33.180 
对新的
用户界面的样式属性

00:28:33.247 --> 00:28:36.683 
这使我们能够在tvOS上
为我们的用户建立这个功能

00:28:36.750 --> 00:28:39.119 
但依然支持
可能在使用tvOS 9的用户

00:28:41.021 --> 00:28:41.855 
下一个

00:28:41.922 --> 00:28:44.691 
我们检查用户界面风格
实际改变了

00:28:44.758 --> 00:28:47.294 
否则我们可能会做
比我们所需要的更多的工作

00:28:48.529 --> 00:28:51.865 
最后我们可以检查
用户界面风格

00:28:51.932 --> 00:28:53.800 
并相应地更新我们的控制

00:28:56.570 --> 00:28:58.505 
现在对此的一项高级用途是

00:28:58.572 --> 00:29:00.641 
你是否想覆写
TraitCollections

00:29:00.707 --> 00:29:03.310 
可能是这种情况
如果你希望你的应用

00:29:03.377 --> 00:29:06.180 
支持自动风格
但也可以在你的应用中

00:29:06.246 --> 00:29:07.681 
有某些视图或视图控制器

00:29:07.781 --> 00:29:10.617 
而你想要指定样式本身

00:29:11.385 --> 00:29:12.953 
我们将此用于我们的系统应用

00:29:13.187 --> 00:29:18.959 
我们的产品页面和电影
而电视节目实际使用

00:29:19.026 --> 00:29:20.894 
其艺术作品
所基于各种元素的样子

00:29:21.094 --> 00:29:23.030 
在这种情况下我们有浅色艺术作品

00:29:23.096 --> 00:29:25.532 
所以我们就按钮样式使用黑色文本

00:29:25.599 --> 00:29:27.000 
使颜色鲜活

00:29:27.634 --> 00:29:31.104 
我们也有深色网页
我们在深色风格上

00:29:31.171 --> 00:29:33.440 
用白色文本 而按钮也被相应更新

00:29:35.676 --> 00:29:37.544 
为了覆写这些
TraitCollections

00:29:37.611 --> 00:29:39.847 
我们使用API
其已经被添加进iOS 8

00:29:39.913 --> 00:29:43.183 
而这是用于ChildViewController
的setOverrideTraitCollection

00:29:43.517 --> 00:29:46.386 
为了将其使用
我们可以用小包装

00:29:47.187 --> 00:29:49.356 
让我们看这样一个例子
可能可能看起来像

00:29:50.490 --> 00:29:51.625 
首先我们创建...

00:29:54.061 --> 00:29:55.863 
一个新的类
AppearanceViewController

00:29:55.929 --> 00:29:58.131 
然后我们从UIViewController处继承

00:29:58.866 --> 00:30:00.868 
我们可添加一个属性
它有这样的一种风格

00:30:00.934 --> 00:30:03.770 
即我们可能会想设置
ChildViewControllers

00:30:03.837 --> 00:30:07.441 
然后我们可以添加另一个属性
在这里我们

00:30:07.508 --> 00:30:09.610 
实际设置视图控制器

00:30:13.814 --> 00:30:17.518 
然后我们为ChildViewController
设置了OverrideTraitCollection

00:30:17.584 --> 00:30:19.553 
用我们指定的样式

00:30:19.920 --> 00:30:23.223  
最后我们使用标准
ChildViewController包含

00:30:24.691 --> 00:30:26.493 
现在如果你想使用这个类

00:30:27.094 --> 00:30:29.830 
我们可以提供
AppearanceViewController

00:30:30.130 --> 00:30:34.735 
指定我们想要的风格
无论基于我们希望的何种属性

00:30:35.502 --> 00:30:37.204 
我们可以设置ViewController

00:30:37.838 --> 00:30:39.640 
然后我们将其转让给用户

00:30:42.409 --> 00:30:44.011 
接下来有请Brandon

00:30:44.077 --> 00:30:46.847 
来向你展示怎么样
来为tvOS 10而更新你的应用

00:31:03.597 --> 00:31:04.665 
谢谢 Marshall

00:31:04.965 --> 00:31:06.433 
大家好 我是Brandon

00:31:06.500 --> 00:31:10.070 
非常激动向你们展示
我们一直在努力做的tvOS应用

00:31:10.337 --> 00:31:12.139 
它被称为世界壁炉

00:31:12.239 --> 00:31:14.875 
壁炉爱好者们
到目前为止很喜爱它

00:31:15.209 --> 00:31:16.076 
让我们来看看

00:31:19.246 --> 00:31:22.015 
这个应用允许你把
来自世界各地的壁炉样式

00:31:22.082 --> 00:31:23.550 
直接带到你的客厅

00:31:23.817 --> 00:31:26.220 
让我们来看看
佛蒙特州的壁炉是什么模样

00:31:28.655 --> 00:31:30.657 
啊 这里感觉很舒适 不是吗？

00:31:31.258 --> 00:31:32.292 
我认为这很棒

00:31:34.895 --> 00:31:37.764 
现在尽管模拟器外观
将被设置为深色

00:31:37.831 --> 00:31:39.833 
我们的应用使用的是默认的浅色外观

00:31:39.900 --> 00:31:41.935 
因为我们没有指定偏好

00:31:42.269 --> 00:31:44.371 
我很高兴能采用
新的深色外观

00:31:44.438 --> 00:31:45.906 
让我们现在就去更新应用

00:31:49.042 --> 00:31:50.344 
我们需要做的第一件事情

00:31:50.410 --> 00:31:54.014 
是将此新用户界面风格密钥
添加到我们的Info.plist

00:32:01.688 --> 00:32:04.157 
我们会把它的值设为自动
并重新运行我们的应用

00:32:06.326 --> 00:32:08.662 
我们选择自动
因为我们希望让我们应用的外观

00:32:08.729 --> 00:32:10.731 
匹配用户的外观设置

00:32:16.303 --> 00:32:18.472 
好的
目前为止看起来很不错

00:32:19.006 --> 00:32:22.643 
所以我们所有的标准UIKit视图
都已被自动更新

00:32:22.910 --> 00:32:25.312 
因此在这种情况下标签栏
和壁纸

00:32:25.379 --> 00:32:26.713 
现在就有了一个深色的外观

00:32:27.447 --> 00:32:28.282 
对于你们某些来说

00:32:28.348 --> 00:32:30.884 
这可能就是你
更新你的应用所需要做的一切

00:32:30.951 --> 00:32:33.120 
但是我们的设计师已经决定

00:32:33.187 --> 00:32:36.290 
他们希望深色外观
有一个不同的标志颜色

00:32:36.957 --> 00:32:39.526 
而在集合视图样式中的
背景颜色

00:32:39.593 --> 00:32:41.161 
有那么一点点突兀

00:32:41.361 --> 00:32:42.863 
那么就让我们来做这些更改

00:32:44.231 --> 00:32:46.133 
让我们去我们的main.storyboard

00:32:47.935 --> 00:32:51.004 
而我们需要做的第一件事

00:32:51.071 --> 00:32:53.340 
因为这是一个现有项目

00:32:53.407 --> 00:32:57.544 
我们需要在Xcode 8中启动
性状变体功能

00:32:58.078 --> 00:33:01.048 
因此要做到这一点
我们会去文件检查器中

00:33:01.849 --> 00:33:04.451 
点击Use Trait
Variations 复选框

00:33:05.018 --> 00:33:08.956 
当我们这样做时会得到警告
即性状变化仅仅兼容

00:33:09.323 --> 00:33:10.624 
Xcode 8或更高版本

00:33:10.691 --> 00:33:12.392 
这很好 所以我们将继续

00:33:13.994 --> 00:33:17.264 
现在我们要点击我们的标志
去Attributes Inspector

00:33:17.431 --> 00:33:20.434 
在一些属性旁边
有这些新的加号按钮

00:33:20.501 --> 00:33:21.869 
所以我们会将其点击

00:33:21.935 --> 00:33:25.038 
并为我们的标志图像
添加一个深色接口

00:33:25.105 --> 00:33:26.406 
我们会将其指定为黄色

00:33:28.208 --> 00:33:29.843 
现在Xcode 8一很酷功能

00:33:29.910 --> 00:33:32.546 
可在Interface
Builder的外观间

00:33:32.613 --> 00:33:34.414 
直接切换

00:33:34.781 --> 00:33:37.217 
要做到这一点我们就下到
我们的故事板的底部

00:33:37.284 --> 00:33:39.853  
并点击View As:
Apple TV（浅色风格）.

00:33:40.587 --> 00:33:41.989  
我们在这里有两个选择

00:33:42.222 --> 00:33:43.957  
浅色和深色

00:33:45.392 --> 00:33:48.795 
当我们点击深色时
一切都将自动更新

00:33:48.862 --> 00:33:50.297 
我们的标志变了颜色

00:33:50.364 --> 00:33:54.501 
而且标签栏和墙纸
也都已经改变了颜色

00:33:55.836 --> 00:33:58.972 
看起来很不错
现在来更新我们的背景颜色

00:34:00.741 --> 00:34:02.042 
在AppDelegate中

00:34:02.242 --> 00:34:05.879 
我们使用外观代理
来设置我们CollectionViewCell的

00:34:05.946 --> 00:34:07.347 
背景颜色

00:34:07.948 --> 00:34:11.318 
现在我们要背景颜色
根据具体特性变化

00:34:11.385 --> 00:34:13.954 
因此我们需要使用
具体特性的外观代理

00:34:14.521 --> 00:34:18.458 
所以首先我们要
通过创建一个UITraitCollection来开始

00:34:18.525 --> 00:34:20.994 
因此用浅色的UserInterfaceStyle

00:34:21.594 --> 00:34:24.931 
来让浅色等于
UITraitCollection

00:34:27.134 --> 00:34:29.536 
然后我们将更换
我们的通用外观代理

00:34:29.670 --> 00:34:31.705 
用的是具体特性的外观代理

00:34:32.039 --> 00:34:36.043  
因此对于TraitCollection我们会用
刚刚创建的TraitCollection

00:34:37.978 --> 00:34:41.315 
就深色我们会同样操作
并指定一个不同的背景颜色

00:34:42.216 --> 00:34:44.351 
现在我们无法在
Interface Builder中查看

00:34:44.418 --> 00:34:45.418 
我们重新运行应用

00:34:46.652 --> 00:34:49.156 
我们增加了一个键盘快捷键
这样你就可以切换

00:34:49.456 --> 00:34:53.427 
在模拟器中的
浅色与深色外观之间快速切换

00:34:54.862 --> 00:34:56.830 
要做到这一点
点击Command Shift D

00:34:57.164 --> 00:34:58.665 
来切换浅色外观

00:34:58.966 --> 00:35:02.002 
然后Command Shift D
来切换回深色外观

00:35:02.769 --> 00:35:04.404 
到目前为止看起来都相当不错

00:35:04.471 --> 00:35:08.141 
但我注意到 现在我们已经改变了

00:35:08.208 --> 00:35:10.143 
我们的背景颜色
却很难再看到图标了

00:35:10.544 --> 00:35:12.045 
所以让我们把这个也更新一下

00:35:13.981 --> 00:35:16.683 
我们会去我们定制的
收藏ViewCell子类别

00:35:17.217 --> 00:35:21.021 
而之前我们在awakeFromNib
功能中设置着色颜色

00:35:21.855 --> 00:35:25.459 
既然我们要在我们的TraitCollection改变时
让着色颜色改变

00:35:25.526 --> 00:35:28.695 
我们将覆写
TraitCollectionDidChange功能

00:35:30.764 --> 00:35:34.168 
我们将使用与我们的浅色界面风格
相同的的颜色

00:35:34.668 --> 00:35:37.337 
而为我们的深色
我们将实际使用浅灰色

00:35:38.672 --> 00:35:42.409 
现在TraitCollectionDidChange
将在每次

00:35:42.476 --> 00:35:45.179 
你的视图被添加到
一个视图层次时被调用

00:35:45.245 --> 00:35:47.481 
我们在这里删除我们的初始化代码

00:35:47.848 --> 00:35:51.351 
但为了向下兼容
我们只是把它留在那里

00:35:52.753 --> 00:35:54.621 
让我们运行应用
看看现在效果如何

00:36:02.095 --> 00:36:03.730 
好的 看起来好多了

00:36:04.498 --> 00:36:07.401 
让我们切换到浅色外观
确保一切都没有改变

00:36:07.467 --> 00:36:08.735 
看起来仍然不错

00:36:09.102 --> 00:36:11.905 
现在回到深色外观
看起来真棒

00:36:12.439 --> 00:36:15.776 
我们刚刚更新了我们的应用
来采用新的深色外观

00:36:16.109 --> 00:36:18.345 
我们已经为tvOS 10做好准备了

00:36:18.812 --> 00:36:21.014 
现在有请Hans
回到舞台

00:36:27.521 --> 00:36:28.522 
谢谢你Brandon

00:36:29.223 --> 00:36:32.025 
非常棒的案例示范

00:36:34.828 --> 00:36:36.063 
所以和你所见的一样

00:36:36.129 --> 00:36:38.732 
采用浅色和深色外观
是相当容易的

00:36:39.266 --> 00:36:43.403 
我们希望大家都可以
在你的应用中很快采用它

00:36:47.274 --> 00:36:51.311 
今天下午我们已经看到了
tvOS中的许多功能的一小部分

00:36:52.546 --> 00:36:56.617 
tvOS提供你已知的相同的工具
服务和框架

00:36:57.084 --> 00:36:59.987 
所以它真的
很容易上手

00:37:02.022 --> 00:37:03.624 
而基于焦点的交互

00:37:04.291 --> 00:37:07.895 
结合了视差效果的分层图像
和Top Shelf

00:37:08.462 --> 00:37:10.631 
它们一起共同创造了

00:37:10.898 --> 00:37:13.400 
一个直接和相连的10英尺体验

00:37:15.369 --> 00:37:18.672 
而有了Universal Purchase
和Auto Download

00:37:19.106 --> 00:37:21.909 
你的客户将能够从未如此密切的
享受使用你的应用

00:37:23.877 --> 00:37:27.314 
我们也推出了一个全新的
Apple TV Remote应用

00:37:27.381 --> 00:37:29.583 
而且它已经被做成了一个种子
就请下载

00:37:29.983 --> 00:37:31.218 
并用它测试你的应用

00:37:33.387 --> 00:37:36.623 
而有了ReplayKit和
SpriteKit支持

00:37:36.690 --> 00:37:38.091 
且直接来自聚焦引擎

00:37:39.726 --> 00:37:42.229 
游戏体验更棒了

00:37:44.097 --> 00:37:49.002 
最后用户可以根据其喜好来设置
自己的系统外观

00:37:50.637 --> 00:37:53.307 
我们希望
你会就所见所闻而高兴

00:37:54.341 --> 00:37:55.742 
通过本周许多很棒的会话

00:37:55.976 --> 00:37:58.378 
你还可以学到更多

00:37:59.746 --> 00:38:04.585 
今年早些时候的 Apple
TV Tech Talk视频

00:38:05.018 --> 00:38:07.754 
就指导你完成基础知识学习
非常有用

00:38:09.089 --> 00:38:12.059 
也可从developer.apple.com下载

00:38:12.693 --> 00:38:16.864 
当然所有这些信息
都被放在会话链接

00:38:18.198 --> 00:38:19.032 
最后

00:38:19.466 --> 00:38:23.270 
等不及要看到
你们为电视的未来所创作的产品了

00:38:24.338 --> 00:38:27.174 
非常感谢大家的光临
请享受其余会议