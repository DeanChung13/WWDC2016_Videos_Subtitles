00:00:19.920 --> 00:00:23.557
用Safari app extensions
来扩展你的应用

00:00:28.795 --> 00:00:29.696
大家好

00:00:29.863 --> 00:00:31.064
我是Brian Weinstein

00:00:31.265 --> 00:00:33.233
我是Safari团队的一名工程师

00:00:33.467 --> 00:00:37.437
今天我将与Zach和Damian
在这给大家演示

00:00:37.504 --> 00:00:41.375
如何基于Safari app extensions
来扩展你的Mac应用

00:00:41.875 --> 00:00:45.579
在macOS Sierra El Capitan系统
的Safari 10浏览器里

00:00:45.913 --> 00:00:47.915
我们要引进一种新方法

00:00:47.981 --> 00:00:51.818
可以编写 打包
以及发布Safari Extensions

00:00:52.319 --> 00:00:53.887
这些扩展涵盖

00:00:53.954 --> 00:00:57.824
网络技术
和Swift原生技术

00:00:58.158 --> 00:01:02.696
他们与Mac应用捆绑
可以通过App Store发布

00:01:03.130 --> 00:01:08.035
这种新途径叫做Safari app extensions

00:01:08.302 --> 00:01:13.307
Safari app extensions可以
自定义网络页面的内容

00:01:13.373 --> 00:01:15.876
通过使用
JavaScript和CSS

00:01:16.343 --> 00:01:21.615
他们也可以中断加载
页面特定资源和元素

00:01:22.349 --> 00:01:25.319
他们可以添加工具类
按钮到Safari的UI

00:01:25.686 --> 00:01:27.654
这些工具类
按钮可以

00:01:27.721 --> 00:01:32.492
为使用纯原生技术展示
这些视图

00:01:33.160 --> 00:01:39.399
最后Safari app extensions可以添加
右键菜单项目到网络页面

00:01:40.200 --> 00:01:43.670
Safari app extensions
是基于app extensions的

00:01:43.737 --> 00:01:46.373
应用扩展
由代码和资源组成

00:01:46.440 --> 00:01:51.144
在你的应用里也打包了这些
提供用户访问

00:01:51.211 --> 00:01:55.516
通过macOS访问应用的功能和内容

00:01:56.416 --> 00:02:00.053
这也意味着需要使用Xcode

00:02:00.120 --> 00:02:03.156
以及其他开发工具
你们已经熟悉的工具

00:02:03.657 --> 00:02:07.561
这意味着Safari app extensions
可以运行原生应用

00:02:07.628 --> 00:02:11.098
使用Mac应用上的API

00:02:11.632 --> 00:02:16.103
另一个主要的优点
是关于这些基于app extensions

00:02:16.170 --> 00:02:18.972
发布自你的应用

00:02:19.139 --> 00:02:21.742
意味着它们可
通过Mac App Store购买

00:02:22.009 --> 00:02:26.113
这也意味着你的用户不必
单独下载你的扩展

00:02:26.346 --> 00:02:28.148
在安装了你的应用之后

00:02:29.149 --> 00:02:32.586
对于你们中需要

00:02:32.653 --> 00:02:35.255
的应用和扩展间通讯功能的人

00:02:35.322 --> 00:02:38.025
Safari app extensions
主要的一个优点是

00:02:38.091 --> 00:02:41.395
你的扩展总是和你的应用绑定

00:02:41.628 --> 00:02:43.263
因为它们是打包在一起的

00:02:43.463 --> 00:02:46.166
所以 你的用户总是会有匹配版本

00:02:46.233 --> 00:02:48.402
的应用和扩展

00:02:49.369 --> 00:02:51.939
扩展平台最厉害的部分

00:02:52.005 --> 00:02:55.275
是构建多类型扩展的能力

00:02:55.609 --> 00:02:58.245
今天我们要扩展三种扩展

00:02:58.712 --> 00:03:00.948
第一种是内容拦截器

00:03:01.248 --> 00:03:06.587
可以拦截加载页面上的
特定资源和隐藏元素带

00:03:07.154 --> 00:03:09.089
第二种是

00:03:09.156 --> 00:03:12.526
可以修改网络页面的通讯过程

00:03:12.593 --> 00:03:15.896
发生在JavaScript代码中
即你的应用

00:03:16.263 --> 00:03:18.098
代码和原生扩展之间通讯的扩展

00:03:18.899 --> 00:03:23.403
第三种类型将展示
怎么扩展Safari的UI

00:03:23.470 --> 00:03:27.975
来添加你的应用的功能
直接和Safari交互

00:03:28.609 --> 00:03:31.178
我们开始介绍内容拦截器

00:03:31.912 --> 00:03:33.780
为了构建一个内容拦截器

00:03:34.047 --> 00:03:35.682
我要邀请Zach上台

00:03:35.916 --> 00:03:36.750
Zach？

00:03:36.817 --> 00:03:39.887
讲下内容拦截器吧

00:03:40.020 --> 00:03:40.854
谢谢Ryan

00:03:43.023 --> 00:03:44.525
大家好 我是Zach Li

00:03:44.591 --> 00:03:47.628
我也是Safari团队的一名工程师

00:03:48.562 --> 00:03:52.699
去年在Safari我们引入了
新的内容拦截模型

00:03:53.133 --> 00:03:58.672
除了开发扩展的代码
来在运行时拦截加载和隐藏元素

00:03:58.739 --> 00:04:03.210
我们构建了一个模型
你可以声明提前拦截哪些内容

00:04:03.744 --> 00:04:06.580
而且WebKit优化了
这样的拦截机制

00:04:06.713 --> 00:04:08.949
来提高运行速度和内容使用率

00:04:09.583 --> 00:04:12.953
最好的一点是 这个模型保护用户隐私

00:04:13.020 --> 00:04:16.857
资源拦截时 无需过问主机应用

00:04:17.824 --> 00:04:22.129
至此 已看到了许多你们所写出色的
内容拦截器

00:04:22.196 --> 00:04:24.298
这些真正提高了浏览体验

00:04:24.765 --> 00:04:25.832
用户也喜欢

00:04:27.067 --> 00:04:29.303
我很高兴向大家宣布

00:04:29.503 --> 00:04:34.341
我们很轻松地把现有iOS
内容拦截器迁移到macOS

00:04:34.808 --> 00:04:37.978
对于之前没写过内容拦截器的开发者

00:04:38.045 --> 00:04:39.146
开发变得更加简单了

00:04:39.546 --> 00:04:44.117
你们可以看看去年WWDC演讲
developer.Apple.com上就有

00:04:44.918 --> 00:04:48.055
我们来看看内容拦截器
可以做哪些事情

00:04:48.989 --> 00:04:50.157
我很喜欢甜点

00:04:50.424 --> 00:04:51.959
我基本上一直在吃好吃的

00:04:52.826 --> 00:04:57.197
显然 我有一个美食博客
专注写我想要尝试的甜点

00:04:58.498 --> 00:05:02.236
但是不幸的是 额 确实不幸

00:05:02.402 --> 00:05:05.639
我会参加我好朋友的婚礼
在下个月以伴郎的身份参加

00:05:05.873 --> 00:05:07.040
我还得保持身材

00:05:07.474 --> 00:05:09.843
至少我需要不至于穿不下礼服

00:05:10.911 --> 00:05:13.447
因此 我开发了个iOS内容拦截器

00:05:13.547 --> 00:05:16.016
会拦截所有来自我网站的甜点

00:05:16.283 --> 00:05:20.521
即使我饿晕了 我到美食博客找东西

00:05:20.587 --> 00:05:22.289
我也不会看到一个甜点

00:05:23.924 --> 00:05:26.260
我来演示下甜点拦截器怎么工作的

00:05:31.064 --> 00:05:32.432
这是我的源代码

00:05:32.799 --> 00:05:35.536
我的甜点拦截器已经在运行了

00:05:36.770 --> 00:05:37.804
打开Safari

00:05:40.407 --> 00:05:41.808
甜点展示出来了

00:05:42.176 --> 00:05:45.412
我们重写加载页面
开启甜点阻塞器

00:05:47.381 --> 00:05:48.615
所有的甜点都消失了

00:05:49.583 --> 00:05:50.484
太棒了

00:05:50.717 --> 00:05:52.019
我还是会想念它们的

00:05:52.486 --> 00:05:56.590
我是一个iOS开发者
开发了这个内容拦截器

00:05:56.957 --> 00:06:01.128
我也很想把它迁移到Mac平台
并且通过App Store发布出去

00:06:01.995 --> 00:06:03.463
事实上这很简单

00:06:03.864 --> 00:06:07.868
因为内容拦截器的API
在这两个平台是一样的

00:06:08.869 --> 00:06:10.804
我们先打开Xcode

00:06:12.973 --> 00:06:16.276
创建一个新的
Mac应用目标

00:06:18.846 --> 00:06:20.881
叫做Mac甜点拦截器

00:06:27.020 --> 00:06:30.023
我们快速切换
到Mac应用主题

00:06:30.123 --> 00:06:33.527
因为我们现在在构建一个
Mac应用

00:06:34.294 --> 00:06:37.998
创建一新的Mac应用
扩展目标

00:06:42.836 --> 00:06:45.205
使用内容拦截器扩展模板

00:06:48.208 --> 00:06:53.213
叫做Mac拦截器扩展

00:06:56.517 --> 00:06:59.453
当用户从App Store
获取应用的时候

00:06:59.520 --> 00:07:01.388
他们不必运行应用

00:07:01.455 --> 00:07:03.891
为Safari
找到app extension就可以了

00:07:04.258 --> 00:07:06.627
但是除了App Store

00:07:06.693 --> 00:07:10.464
应用必须运行
在Safari里找扩展

00:07:10.864 --> 00:07:12.766
因此 在这种状况下我想要

00:07:12.833 --> 00:07:15.335
继续使用应用方案

00:07:15.836 --> 00:07:18.405
我只要点击取消按钮

00:07:21.008 --> 00:07:23.644
这个模板可以正确的设置
一切需要的东西

00:07:24.178 --> 00:07:26.947
这就导致了一个简单的内容拦截规则

00:07:27.848 --> 00:07:31.485
为了创建自己的内容拦截器
你只需要修改曾JSON文件

00:07:31.818 --> 00:07:33.153
这真的很方便

00:07:33.687 --> 00:07:37.791
在我们的例子里 我们可以
和iOS应用分享资源

00:07:38.425 --> 00:07:40.627
因此我们可以不管这个JSON文件

00:07:42.296 --> 00:07:43.230
和Swift文件

00:07:45.165 --> 00:07:47.835
我们可以使
我们已经有的东西

00:07:47.901 --> 00:07:51.071
对Mac应用、
Mac app extension对象可见

00:07:52.606 --> 00:07:55.776
为了实现这个功能 我们看这个实用侧边栏

00:07:56.476 --> 00:08:01.181
在对象会员资格这里
勾选Mac应用扩展目标

00:08:01.481 --> 00:08:03.450
那些我们希望分享的资源

00:08:06.119 --> 00:08:08.121
真棒 现在一切顺利

00:08:08.555 --> 00:08:12.993
在此之前 我想要我的
甜点拦截器更加文雅

00:08:13.060 --> 00:08:15.863
需要换一个更好的名字
和描述

00:08:16.029 --> 00:08:18.065
在Safari Extensions偏好里配置

00:08:18.665 --> 00:08:23.303
为了实现这个功能 我们看下
app extension信息列表

00:08:26.206 --> 00:08:28.375
不叫它Mac甜点拦截器扩展了

00:08:28.442 --> 00:08:30.511
我们勾选下 就重命名叫甜点拦截器

00:08:33.313 --> 00:08:34.982
我要提供描述的内容是

00:08:35.048 --> 00:08:39.686
该内容拦截器拦截了
我美食博客的甜点图片

00:08:41.020 --> 00:08:45.626
另外 我想要提供一个更好的
图标给我的这个扩展

00:08:46.560 --> 00:08:48.662
我们移走这个默认的资源目录

00:08:49.596 --> 00:08:55.068
然后拖动已经设计好的
冰淇淋图标到我的Xcode项目

00:08:57.704 --> 00:09:01.308
好了 我们来运行和浏览
这个Mac应用

00:09:04.478 --> 00:09:06.613
应用运行了

00:09:07.281 --> 00:09:08.615
我们转到Safari

00:09:11.585 --> 00:09:14.688
你可以看到 它显示在了
扩展偏好里了

00:09:14.755 --> 00:09:19.126
像所有其他的Safari Extensions一样
内容拦截器默认是关闭的

00:09:19.593 --> 00:09:21.361
我们开启这个甜点拦截器

00:09:23.764 --> 00:09:24.831
刷新页面

00:09:27.534 --> 00:09:29.236
真棒
所有甜点都消失了

00:09:30.270 --> 00:09:31.104
酷毙了

00:09:32.105 --> 00:09:35.275
现在我吃
甜点的欲望完全被拦截了

00:09:35.342 --> 00:09:37.477
我已经准备好做新郎了

00:09:45.619 --> 00:09:52.426
如你所见 我们不用写代码就可把
iOS内容拦截器迁移到macOS

00:09:53.293 --> 00:09:56.096
提前声明一点
我们已经收到你们的反馈

00:09:56.163 --> 00:09:59.700
可以最好让人知道
你的内容拦截器是否开启了

00:10:00.200 --> 00:10:02.903
因此我们引入一个新的API

00:10:03.203 --> 00:10:06.006
就是getStateOfContent
Blocker(identifier

00:10:08.075 --> 00:10:10.410
有了这个API 举个例子

00:10:10.477 --> 00:10:14.214
如果你回一下我
应用不怎么好的UI

00:10:14.281 --> 00:10:16.950
我可以为用户提供一个更好的体验

00:10:17.317 --> 00:10:20.888
只要通过说明怎么开启内容拦截器

00:10:21.154 --> 00:10:24.091
如果我侦测到内容拦截器是关闭的

00:10:25.092 --> 00:10:31.098
该API和其他API将由我的同事
Brian和Damian介绍

00:10:31.331 --> 00:10:37.704
如果用户安装了Safari 10
这些API已在Sierra和El Capitan里了

00:10:39.273 --> 00:10:45.679
因为El Capitan的API是
依赖于Safari 10

00:10:46.180 --> 00:10:49.483
我们提供给你了
一个方便的Swift API

00:10:49.550 --> 00:10:52.119
你们可以在运行时确认

00:10:52.186 --> 00:10:55.355
Safari Services
APIs是否可用

00:10:56.190 --> 00:10:58.525
我们来看看Swift代码的API

00:10:59.593 --> 00:11:02.596
如果SFSafari服务
可用会返回真

00:11:03.130 --> 00:11:05.399
你可以安全的使用API

00:11:05.933 --> 00:11:08.669
如果不是 转向其他处理行为

00:11:09.670 --> 00:11:12.139
这些都是内容拦截器带的新特性

00:11:12.206 --> 00:11:17.477
要讲下其他有用的特性
你可以看下Safari app extensions

00:11:17.544 --> 00:11:20.013
我要把讲台交给Brian

00:11:20.113 --> 00:11:26.053
Safari App Extensions

00:11:26.119 --> 00:11:27.054
谢谢Zach

00:11:28.121 --> 00:11:30.924
因此 下一个扩展类型
我要展示的是

00:11:30.991 --> 00:11:33.594
可以修改页面的内容

00:11:33.660 --> 00:11:38.098
也可以与原生代码通讯

00:11:38.165 --> 00:11:39.333
通过你的应用扩展

00:11:39.633 --> 00:11:41.335
我们要构建一个应用

00:11:41.401 --> 00:11:45.472
可以在网络里取代一个单词
使用另一个单词

00:11:45.906 --> 00:11:49.343
它可以获得要取代的单词
和取代的单词内容

00:11:49.409 --> 00:11:51.378
通过Swift代码的应用扩展

00:11:51.879 --> 00:11:56.250
有两种方法可以给Safari app extension
修改网络页面的内容

00:11:56.617 --> 00:12:02.189
扩展可以注入CSS样式表
和JavaScript内容脚本到页面上

00:12:02.689 --> 00:12:05.158
我们来看看怎么注入样式表

00:12:06.059 --> 00:12:08.562
样式表可以通过指定注入在

00:12:08.695 --> 00:12:12.799
应用扩展Info.plist文件里
这文件在NSExtension部分

00:12:13.200 --> 00:12:17.671
样式表通过指定使用
SFSafari样式表部分

00:12:17.971 --> 00:12:20.908
Info.plist文件
检查一个数组

00:12:20.974 --> 00:12:23.744
这个数组包含了每个样式表的字典定义

00:12:24.278 --> 00:12:28.815
每个样式表由键值对组成

00:12:28.882 --> 00:12:32.452
值是指到相关样式表的路径

00:12:32.519 --> 00:12:35.522
关于这个资源字典的扩展包

00:12:36.123 --> 00:12:38.258
你之前已经写下的任何一个样式表

00:12:38.325 --> 00:12:42.396
Safari扩展只会与Safari
app extensions工作

00:12:43.063 --> 00:12:45.199
下一步是注入脚本

00:12:45.265 --> 00:12:48.969
这几乎是一模一样的
只是有不同两个键

00:12:49.169 --> 00:12:53.807
脚本由SFSafari指定的
字典里的内容脚本键

00:12:54.374 --> 00:12:58.312
这个键表示
脚本的路径而不是样式表的

00:12:59.179 --> 00:13:03.684
你所有的扩展脚本
都在他们自己的执行环境下运行

00:13:03.784 --> 00:13:06.019
这也意味着
永远没有命名冲突

00:13:06.086 --> 00:13:08.655
不会和网络页面里的脚本变量冲突

00:13:09.122 --> 00:13:13.126
这也使得Safari可以提供
特殊的JavaScript API

00:13:13.360 --> 00:13:15.162
到应用扩展的内容脚本

00:13:15.362 --> 00:13:17.497
对于所有的网络页面不可见

00:13:17.831 --> 00:13:20.701
比如 你的扩展可能需要通信

00:13:20.767 --> 00:13:23.971
和你的应用里的原生代码通信读取偏好

00:13:24.238 --> 00:13:27.808
或者执行
只能在原生代码里做的操作

00:13:28.375 --> 00:13:31.879
为了实现这个功能 我们已经
添加了一个消息传递API

00:13:32.012 --> 00:13:34.548
所以你的应用扩展的
JavaScript代码

00:13:34.748 --> 00:13:37.518
和Swift代码可以
相互通信

00:13:38.452 --> 00:13:40.754
所以 来看看这个图

00:13:41.121 --> 00:13:45.192
你可以看到我们拥有Safari
和你的应用扩展

00:13:45.359 --> 00:13:49.897
这个盒子代表Swift代码
在你扩展的进程里运行了

00:13:49.963 --> 00:13:51.932
这当然就是沙盒啦

00:13:52.332 --> 00:13:56.370
扩展已经注入脚本
到了Apple.com

00:13:56.703 --> 00:13:59.273
脚本会问
这个应用扩展

00:13:59.339 --> 00:14:00.874
应该替换哪个单词

00:14:01.475 --> 00:14:06.647
为了实现这个 它只需要调用
Safari.extension.dispatch

00:14:06.713 --> 00:14:08.382
然后传递消息名称

00:14:08.849 --> 00:14:12.119
我们来看看Swift代码
监听这个消息的代码

00:14:12.186 --> 00:14:15.289
响应返回的
是应该替换掉的单词

00:14:16.256 --> 00:14:19.693
每个Safari app extension
有一个基类

00:14:19.927 --> 00:14:22.696
这个类会被
Safari调用方法

00:14:22.763 --> 00:14:24.698
当用户和Safari交互的时候

00:14:25.365 --> 00:14:29.436
当消息分发自
脚本到应用扩展的时候

00:14:29.503 --> 00:14:34.608
消息会收到调用的
userInfo页面的名字

00:14:35.609 --> 00:14:39.246
一旦这个方法调用了
我们的扩展的主要对象

00:14:39.680 --> 00:14:43.984
我们要确认的第一件事情是
消息名称 然后在上面操作

00:14:44.518 --> 00:14:48.255
要操作我们的扩展
会发送回去一个消息

00:14:48.322 --> 00:14:51.692
给SFSafari页面
代表Apple.com

00:14:51.959 --> 00:14:55.662
要替换的单词
及以什么单词替换

00:14:55.963 --> 00:14:58.365
我们在构造这个东西
就在字典里

00:14:58.432 --> 00:15:01.735
每个键代表
我们要替换的单词

00:15:01.969 --> 00:15:05.138
指表示
我们的替换内容

00:15:05.806 --> 00:15:10.210
所以 当应用扩展调用

00:15:10.277 --> 00:15:14.181
dispatchMessageTo
Script(withName,userInfo方法时

00:15:14.248 --> 00:15:18.785
消息从扩展进程发出回到内容脚本

00:15:18.986 --> 00:15:21.021
脚本以及注入到Apple.com

00:15:21.555 --> 00:15:23.991
我们看看脚本是怎么监听

00:15:24.057 --> 00:15:26.159
这些消息并且在上面操作

00:15:27.361 --> 00:15:30.197
为了在内容脚本里
实现监听

00:15:30.264 --> 00:15:33.834
我们先添加个事件
监听器到Safari.self

00:15:34.001 --> 00:15:38.071
因此 脚本可以监听
这个应用扩展的消息事件

00:15:38.505 --> 00:15:40.607
如果你之前写过Safari Extension

00:15:40.941 --> 00:15:42.543
这看起来是不是很熟悉

00:15:42.843 --> 00:15:46.446
接受消息的API
在这个内容脚本里

00:15:46.513 --> 00:15:48.382
几乎是一样的

00:15:49.383 --> 00:15:51.051
当我们事件监听器开启的时候

00:15:51.118 --> 00:15:53.453
因为我们获得了一个消息
来自我们的应用扩展

00:15:53.954 --> 00:15:56.857
我们首先要做的事情还是
却消息名称

00:15:56.924 --> 00:16:00.894
最佳实践是
然后才在上面操作

00:16:01.261 --> 00:16:05.365
为了操作这个消息
我们想要遍历我们的字典

00:16:05.632 --> 00:16:09.536
我们已在userInfo指定Swift代码里的消息

00:16:09.603 --> 00:16:13.073
作为event.message
暴露于JavaScript代码

00:16:13.307 --> 00:16:16.210
到这里 我们已经拿到
单词词典和替换内容

00:16:16.643 --> 00:16:18.178
我们要开始遍历它们

00:16:18.245 --> 00:16:23.517
然后在我们的脚本里调用方法
执行替换

00:16:23.851 --> 00:16:27.721
单词替换扩展
我们已经讨论了的

00:16:27.788 --> 00:16:29.690
已经可以在每个网站上工作

00:16:30.023 --> 00:16:34.194
但是一些扩展只针对
一些特点的网址起作用

00:16:34.661 --> 00:16:37.531
Safari app extensions
支持丰富的系统

00:16:37.598 --> 00:16:40.067
通过指定特定的目标网站

00:16:40.133 --> 00:16:44.438
另外Safari 10新增加了功能
用户可以看到

00:16:44.571 --> 00:16:47.774
你的Safari
扩展需要访问哪些站点

00:16:49.209 --> 00:16:52.746
像内容脚本
和样式表

00:16:53.013 --> 00:16:57.551
你的扩展的网站可以访问的在
扩展的Info.plist里有描述

00:16:57.851 --> 00:17:00.587
以SFSafariWebsiteAccess/key的形式

00:17:00.954 --> 00:17:02.789
这是一个由两部分组成的字典

00:17:03.090 --> 00:17:05.626
第一部分是
网站访问级别

00:17:06.193 --> 00:17:09.663
这个扩展指定了
所有的访问级别

00:17:09.963 --> 00:17:13.767
意思是它要访问
用户打开的每一个网页

00:17:14.167 --> 00:17:17.204
你看到了
Safari的扩展偏好

00:17:17.271 --> 00:17:20.507
警告用户相关信息当
用户打开这个扩展的时候

00:17:21.608 --> 00:17:25.679
在这个例子里
这个扩展的访问级别是some

00:17:26.313 --> 00:17:28.382
当访问级别是some的时候

00:17:28.448 --> 00:17:33.220
扩展指定了一个列表
包含了它想要访问的域名

00:17:33.287 --> 00:17:36.223
在字典的
允许访问域名部分

00:17:36.757 --> 00:17:39.826
如果一个允许访问的域名
以星标起始

00:17:39.893 --> 00:17:44.398
它被通配符标示
可以访问所有的子域名

00:17:45.332 --> 00:17:49.536
我们已经讨论了
你的扩展我们可以修改哪些页面

00:17:49.603 --> 00:17:52.072
通过注入脚本和样式表

00:17:52.372 --> 00:17:56.343
和这些脚本怎么和你的
扩展Swift代码通信

00:17:56.710 --> 00:18:00.380
你如何指定你的扩展可访问的网站

00:18:00.848 --> 00:18:02.850
我要把所有这些要点集合到一个演示里

00:18:02.916 --> 00:18:06.119
然后编写我们之前一直在讨论的
单词替换扩展

00:18:10.224 --> 00:18:14.628
Safari Extensions有趣的一点是

00:18:14.695 --> 00:18:20.000
从代码开始和基于
JavaScript的网页交互开始

00:18:20.067 --> 00:18:23.136
很容易就可以把你写的代码挪过来

00:18:23.203 --> 00:18:27.107
到一个不同的浏览器的扩展里
然后直接指向Safari

00:18:27.474 --> 00:18:31.144
我要做的事情是
举个Chrome扩展的例子

00:18:31.378 --> 00:18:33.146
这个扩展也可以实现单词替换

00:18:33.213 --> 00:18:36.450
我要基于现在的代码创建一个
Safari app extension

00:18:36.850 --> 00:18:41.321
我会扩展这个代码
以便于我们获取要替换的单词

00:18:41.388 --> 00:18:44.157
以及使用Swift代码替换内容

00:18:44.858 --> 00:18:48.128
所以我已有了一个应用带有一个图标

00:18:48.362 --> 00:18:50.597
我要新建一个Safari Extension

00:18:51.198 --> 00:18:53.901
因此 我在Xcode创建了一个目标

00:18:54.968 --> 00:18:59.907
然后选择macOS Application Extension
再选择Safari extension

00:19:01.008 --> 00:19:03.443
我们就叫它Animalify

00:19:03.510 --> 00:19:07.581
因为我们通过使用表情符号
替换动物Animalify网页

00:19:10.217 --> 00:19:13.887
Zach之前也提到了
我们要运行这个应用

00:19:13.954 --> 00:19:16.823
因此我准备激活这个扩展的方案

00:19:19.593 --> 00:19:24.331
因此我们现在的扩展
我们调到Info.plist部分

00:19:24.565 --> 00:19:26.800
然后打开NSextension部分

00:19:29.336 --> 00:19:32.773
你可以看到模板自动为我们创建了

00:19:32.840 --> 00:19:35.876
我们有了内容脚本 一个工具栏项目

00:19:35.943 --> 00:19:39.079
而要求访问网站
就是我们的扩展要求访问的

00:19:39.146 --> 00:19:42.449
我准备丢弃这个工具栏项目
因为我们的扩展不需要它

00:19:43.016 --> 00:19:45.886
然后改变访问级别为all

00:19:46.153 --> 00:19:48.155
然后丢弃运行的域名列表

00:19:48.222 --> 00:19:51.592
因为我们希望这个扩展
可以在任何一个页面上运行

00:19:53.260 --> 00:19:55.863
下一件事是打开我们的脚本

00:19:56.363 --> 00:19:58.565
然后我要引入

00:19:58.632 --> 00:20:01.502
我已大量为Chrome扩展写的脚本

00:20:03.337 --> 00:20:06.940
你可以看到
当脚本注入页面的时候

00:20:07.007 --> 00:20:11.512
它会调用我们的替换函数
然后替换熊为熊的表情符号

00:20:12.145 --> 00:20:16.884
现在 我希望我的应用可以被替代为

00:20:16.950 --> 00:20:20.521
我希望它展示一个列表
罗列了各种动物 用户可以选择

00:20:20.587 --> 00:20:22.723
他们希望替换掉的动物种类

00:20:23.090 --> 00:20:25.959
现在我准备设计一个UI

00:20:26.293 --> 00:20:30.097
为了实现这一点
我们需要一个替换列表

00:20:30.163 --> 00:20:31.331
从应用扩展获得该列表

00:20:31.832 --> 00:20:35.536
因此 我没有通过
直接的替换

00:20:36.136 --> 00:20:38.805
而是通过发送
JavaScript消息实现

00:20:38.872 --> 00:20:42.643
通过发送给app extension询问
替换的单词和要替换的内容

00:20:43.443 --> 00:20:47.414
所以有趣的一点是Safari Extensions

00:20:47.481 --> 00:20:52.319
的内容脚本
在DOM加载之前就注入了

00:20:52.386 --> 00:20:54.488
这是为了更好的弹性支持你的扩展

00:20:54.955 --> 00:20:59.226
但是 一个单词替换器什么也不会做
直到dom加载完成

00:20:59.293 --> 00:21:02.796
我们要等待dom
加载后再发送消息

00:21:03.630 --> 00:21:05.666
因此 我们来看看我们的主要类

00:21:06.633 --> 00:21:09.303
你可以看到
我们已经有了一个实现

00:21:09.369 --> 00:21:13.841
实现那些收到userInfo网页的
具名消息

00:21:14.608 --> 00:21:17.477
然而 我们准备丢弃这个

00:21:17.544 --> 00:21:22.783
然后替换为some级别 通过
我们之前幻灯片里讲过的代码

00:21:23.150 --> 00:21:25.385
它做的事情只是
检查消息名称

00:21:25.886 --> 00:21:28.388
然后发送回响应给内容脚本

00:21:28.789 --> 00:21:32.059
我们在这有两个替换
只是因为我们可以

00:21:33.260 --> 00:21:37.798
我们回到脚本
然后监听消息然后响应

00:21:43.036 --> 00:21:47.040
再次 这又是之前已讨论过了的代码

00:21:47.441 --> 00:21:51.879
我们在开始时添加一个针对
Safari.self消息事件的事件监听器

00:21:52.679 --> 00:21:56.617
当消息事件触发的时候
我们检查消息名称

00:21:57.384 --> 00:22:00.220
然后从event.message
获取替换内容

00:22:00.687 --> 00:22:03.991
我们通过遍历所有这些替换内容来操作

00:22:04.258 --> 00:22:06.226
然后调用同样的替换方法

00:22:06.293 --> 00:22:08.428
这个方法就在之前脚本的起始部分

00:22:08.862 --> 00:22:11.431
所以 现在我要创建和运行一个应用了

00:22:11.498 --> 00:22:13.700
Safari可以发现这个新的扩展

00:22:20.841 --> 00:22:23.877
你可想象这里有一长串动物名称
而我已经勾选了其中的一些

00:22:24.745 --> 00:22:29.816
这是我第一次试试该Safari
app extension

00:22:30.017 --> 00:22:31.718
我还没有注册这个应用

00:22:31.785 --> 00:22:34.288
我也没注册参加Apple
Developer Program

00:22:34.354 --> 00:22:36.557
意味着我没有开发者认证

00:22:36.890 --> 00:22:40.027
默认的Safari只会显示

00:22:40.093 --> 00:22:42.563
允许用户启用

00:22:42.629 --> 00:22:44.064
已签署开发者认证的扩展

00:22:44.398 --> 00:22:46.567
但是对于那些只是想要试用的人来说

00:22:46.867 --> 00:22:51.471
我们已经增加了一个途径可以使你
能够测试你没有注册的扩展

00:22:51.872 --> 00:22:55.909
为了实现这个
我准备打开“高级设置”

00:22:56.276 --> 00:22:58.679
然后展示你们菜单工具栏的
Develop菜单

00:22:59.112 --> 00:23:00.581
在这个菜单里

00:23:00.647 --> 00:23:03.784
我要选择
允许未签署扩展选项

00:23:04.084 --> 00:23:05.519
我要输入我的密码

00:23:06.186 --> 00:23:11.592
然后这个动物扩展就显示
在我们的扩展列表里了

00:23:11.959 --> 00:23:15.596
我要开启它
在每个人获得它之前

00:23:15.662 --> 00:23:17.497
我之前在研究灰熊的食谱

00:23:17.764 --> 00:23:21.668
我要重新加载页面
就像你看到的那样

00:23:21.802 --> 00:23:24.571
熊已经被替换
为熊的表情符号

00:23:24.638 --> 00:23:27.374
鲑鱼已经被替换为
美味的寿司表情

00:23:31.879 --> 00:23:35.249
这可以使得网页
在浏览时更加有趣

00:23:40.387 --> 00:23:44.358
这都说明了一个Safari应用
扩展如何实现修改页面内容

00:23:44.424 --> 00:23:48.262
你的扩展如何指定
允许访问的网站

00:23:49.029 --> 00:23:51.765
我们将要展示的最后一种扩展类型是

00:23:52.299 --> 00:23:55.602
一种可以扩展Safari的UI
并且增强

00:23:55.669 --> 00:23:59.806
原生代码的功能
并且可以直接引入到Safari

00:24:00.374 --> 00:24:03.744
为了给大家演示
我想邀请Damian上台

00:24:03.810 --> 00:24:04.711
Damian ？

00:24:04.778 --> 00:24:05.946
扩展Safari的UI

00:24:06.013 --> 00:24:06.847
谢谢

00:24:09.583 --> 00:24:10.551
大家好

00:24:10.951 --> 00:24:14.154
我是Damian Kaleta
是Safari团队的一个工程师

00:24:15.022 --> 00:24:18.592
Brian已告诉大家Safari
App Extensions的基础性知识

00:24:18.659 --> 00:24:20.794
现在我要在此之上构建一个应用

00:24:20.861 --> 00:24:23.230
我要告诉给怎么实现
扩展Safari的UI

00:24:23.830 --> 00:24:24.798
好 我们开始

00:24:25.832 --> 00:24:28.435
我已写好了这个简单的macOS应用

00:24:28.635 --> 00:24:29.536
这是一个笔记本应用

00:24:30.070 --> 00:24:34.308
你们可以从截图上看到
这个图标倾注了设计者的爱

00:24:34.374 --> 00:24:35.876
不幸的是应用本身没有

00:24:36.276 --> 00:24:38.912
但是没关系
这个应用可以让我添加笔记

00:24:39.079 --> 00:24:41.281
保存之后可以之后再阅读

00:24:42.883 --> 00:24:47.254
但是我想要
从网页上直接抓取笔记内容

00:24:47.321 --> 00:24:49.723
然后在Safari上修改笔记

00:24:50.424 --> 00:24:52.826
而且
有了新的Safari app extension模型

00:24:53.560 --> 00:24:57.064
我有了一整套工具
可以极大简化我构建扩展的过程

00:24:58.265 --> 00:25:00.501
我需要完全不同的两个东西

00:25:00.567 --> 00:25:05.272
我想要可以选择文本
然后可以保存它

00:25:06.240 --> 00:25:09.309
因此我需要一个上下文菜单

00:25:10.344 --> 00:25:14.915
其次 我希望可以展示我最近的笔记

00:25:15.282 --> 00:25:17.017
而且还可以修改它

00:25:17.584 --> 00:25:20.821
因此我需要一个弹出框

00:25:21.788 --> 00:25:25.125
在用户点击工具栏按钮时
弹出框会显示

00:25:25.459 --> 00:25:28.295
我们先来谈谈

00:25:28.362 --> 00:25:29.530
工具栏按钮

00:25:30.097 --> 00:25:33.800
工具栏按钮默认在智能搜索框下面

00:25:34.468 --> 00:25:37.337
这样子用户可以快速而方便找到

00:25:37.404 --> 00:25:40.707
扩展提供的功能

00:25:41.575 --> 00:25:43.310
你可能期望
如果你是一个事件用户

00:25:43.377 --> 00:25:45.379
你当然可以
简单的移动它

00:25:46.480 --> 00:25:48.882
那么我怎么添加我的按钮呢？

00:25:50.984 --> 00:25:53.120
我到了我的扩展Info.plist

00:25:53.187 --> 00:25:56.223
我添加了
SFSafariToolbarItem

00:25:56.924 --> 00:25:59.660
以及四个不同的键值对

00:26:00.494 --> 00:26:05.532
标识符 标签 图片和活动

00:26:06.800 --> 00:26:11.171
且和所有系统工具栏上面的项目在一起

00:26:11.471 --> 00:26:14.341
请注意 我在这使用的一个PDF文件

00:26:15.609 --> 00:26:18.278
好的 Safari现在展示的是
我的工具栏按钮

00:26:18.345 --> 00:26:22.916
但在用户点击这个按钮时
我的扩展会有什么反应？

00:26:24.151 --> 00:26:29.389
Safari发送窗口工具栏的
点击元素给你principal对象

00:26:30.123 --> 00:26:32.993
提醒下
你的principal对象是

00:26:33.427 --> 00:26:37.831
可以处理所有
Safari和你扩展之间通信的对象

00:26:39.166 --> 00:26:43.170
而且如果你想要
你的按钮根据加上下文的情况变灰

00:26:43.237 --> 00:26:45.772
Safari提供了验证方法

00:26:46.340 --> 00:26:49.543
并且你也可以批量设置你的按钮的文本

00:26:50.110 --> 00:26:53.380
这通常表示为一个数值类型的值
比如 红细胞计数

00:26:55.449 --> 00:26:57.584
我们已经给自己设计了一个按钮

00:26:57.651 --> 00:27:01.655
但是现在我要展示一个弹出框

00:27:01.722 --> 00:27:03.557
当用户点击按钮的时候展示

00:27:03.891 --> 00:27:07.294
这个弹出框让我在其中插入
任意的NSview

00:27:07.628 --> 00:27:12.399
这很棒 因为你之前已写了一些
macOS应用代码

00:27:12.466 --> 00:27:16.303
你会复用这些代码
而且过程很简单

00:27:16.904 --> 00:27:18.505
让我给大家看看这如何工作

00:27:20.240 --> 00:27:23.677
你现在有一个基于
principal对象的扩展

00:27:24.378 --> 00:27:28.815
然后你希望定义一个
popoverViewController方法

00:27:28.882 --> 00:27:30.817
在你的principal对象里面

00:27:31.952 --> 00:27:36.390
此方法里你希望返回自定义
视图控制器

00:27:36.456 --> 00:27:40.160
这个控制器代表一个视图
你希望在弹出框里插入的视图

00:27:41.762 --> 00:27:43.897
另一方面 还包含有Safari进程

00:27:44.598 --> 00:27:47.768
Safari进程可以调用远程视图

00:27:48.936 --> 00:27:51.538
远程视图可以简化你抓取回顾的过程

00:27:51.605 --> 00:27:55.776
以及在弹出框展示的内容

00:27:56.643 --> 00:27:59.346
如你们所期望的 我们会向你们提供

00:27:59.413 --> 00:28:01.281
所有的事件 比如点击事件

00:28:02.916 --> 00:28:06.486
有一种展示弹出框的方法是
仅仅指定弹出框行为

00:28:06.553 --> 00:28:11.358
而不是通过
SFSafariToolbarItem里的命令

00:28:11.725 --> 00:28:12.559
就是这些

00:28:12.626 --> 00:28:15.229
现在Safari知道
你们希望展示一个弹出框

00:28:15.295 --> 00:28:17.531
你们会使用自定义
视图控制器

00:28:19.833 --> 00:28:22.736
弹出框也带来了一些
方便实用的API

00:28:23.170 --> 00:28:24.671
你们看这里

00:28:24.738 --> 00:28:27.741
两个方法是popoverWillShow
和popoverWillClose

00:28:28.275 --> 00:28:30.344
他们可以帮助你做一些
启动配置和清理的工作

00:28:31.311 --> 00:28:33.113
第三个方法我们已经谈过了

00:28:33.180 --> 00:28:36.283
这个方法可返回给你自定义
视图控制器

00:28:36.984 --> 00:28:38.385
好的 我们添加了这个按钮

00:28:38.452 --> 00:28:40.721
我们可以展示一个弹出框了

00:28:41.154 --> 00:28:44.658
我们现在来讨论下上下文菜单项

00:28:47.594 --> 00:28:51.398
你们通常想要使用
上下文菜单项的场景是

00:28:51.465 --> 00:28:54.535
当你们想要操作页面的一部分内容时

00:28:54.968 --> 00:28:59.506
但在我的例子里 我要能够
选择文本然后保存它

00:29:00.440 --> 00:29:02.776
我又去修改
我扩展的Info.plist代码

00:29:03.010 --> 00:29:06.246
然后添加了
SFSafariContextMenu

00:29:07.414 --> 00:29:12.019
这是一个字典数组
保存了两个不同的键值对

00:29:12.553 --> 00:29:14.555
文本和命令

00:29:16.190 --> 00:29:20.594
然后当用户按下或者
点击你的上下文菜单项的时候

00:29:21.395 --> 00:29:24.198
Safari会发送
contextMenuItemSelected对象

00:29:24.565 --> 00:29:25.832
给我们的principal对象

00:29:27.835 --> 00:29:31.371
请注意我们也在同时发送
userInfo信息

00:29:32.039 --> 00:29:35.442
这可以简单代表任何额外信息

00:29:35.509 --> 00:29:38.946
你可能希望包括进你注入的脚本

00:29:39.446 --> 00:29:45.319
比如在我的例子里 我希望
一同发送selectedText值

00:29:45.519 --> 00:29:49.890
因此在我的注入脚本里 我添加了
上下文菜单的事件监听器

00:29:50.791 --> 00:29:56.129
然后在方法里我调用
setContextMenuEventUserInfo方法

00:29:56.196 --> 00:29:58.098
Safari扩展对象上

00:29:59.299 --> 00:30:03.070
注意 我实际上一同
发送了selectedText

00:30:04.304 --> 00:30:09.376
好 我很兴奋地给大家演示macOS
应用如何扩展到Safari

00:30:09.843 --> 00:30:11.044
我们开始

00:30:15.949 --> 00:30:17.751
在我展示代码前

00:30:17.818 --> 00:30:20.487
这是简易的macOS应用

00:30:20.554 --> 00:30:22.623
你可以看到我只有两个便签

00:30:22.990 --> 00:30:26.593
我可以在这插入我的便签
删除上一个便签等

00:30:27.361 --> 00:30:29.029
我们转到Xcode

00:30:29.096 --> 00:30:31.164
我要给大家看的是三个不同的东西

00:30:31.932 --> 00:30:34.001
第一个是Info.plist

00:30:35.836 --> 00:30:40.774
请注意我在此处添加上下文菜单项

00:30:41.441 --> 00:30:43.410
这是我的文本和命令

00:30:44.311 --> 00:30:46.213
我也添加了我的工具栏项

00:30:46.446 --> 00:30:50.617
现在我有了不同的四个字段

00:30:51.051 --> 00:30:54.488
你们可以看到我在使用PDF文件

00:30:55.656 --> 00:30:59.927
第二件 我要展示给你看的是
我的principal对象

00:31:02.462 --> 00:31:04.865
让我把它做成那样

00:31:05.332 --> 00:31:09.636
我已重载了principal对象
的两个不同方法

00:31:09.803 --> 00:31:11.738
第一个方法是
popoverViewController

00:31:12.172 --> 00:31:15.375
这个方法可以返回
我的视图控制器

00:31:15.642 --> 00:31:19.646
代表了弹出框增加
和移走的视图

00:31:20.214 --> 00:31:21.048
第二个是

00:31:21.114 --> 00:31:23.283
contextMenuItem
Selected(withCommand方法

00:31:24.051 --> 00:31:26.820
你看到
我从这里获取我的userInfo

00:31:27.955 --> 00:31:31.925
可以在这里分配便签

00:31:32.693 --> 00:31:36.864
第三个我要展示的是
我怎么复用

00:31:36.930 --> 00:31:41.702
和分享
macOS应用和我的扩展间的代码

00:31:42.803 --> 00:31:45.372
当然通常你们
不会使用简单的文件

00:31:45.439 --> 00:31:48.642
你们使用会带来启发的框架

00:31:49.443 --> 00:31:51.178
这是我的便签管理器

00:31:51.612 --> 00:31:55.716
它会读取和
保存用户的默认设置

00:31:55.983 --> 00:31:57.417
它有一些简单的方法

00:31:57.484 --> 00:32:00.821
比如removeAllNotes
removeLastNote等等

00:32:01.455 --> 00:32:04.591
请注意我的目标设定是

00:32:04.658 --> 00:32:10.397
我的笔记本应用可以设置所有的目标
即macOS应用和扩展程序

00:32:11.932 --> 00:32:17.371
好了 我们来到Safari

00:32:17.771 --> 00:32:22.342
可以看到 我的扩展就在
智能检索字段的旁边

00:32:23.410 --> 00:32:27.681
我可以单击它 然后
我最近的便签就会显示出来

00:32:28.081 --> 00:32:32.119
让我带上笔记本应用

00:32:33.020 --> 00:32:33.854
对比下

00:32:34.288 --> 00:32:39.560
比如我在浏览博客的一些帖子

00:32:41.628 --> 00:32:43.030
我们选这个

00:32:43.430 --> 00:32:47.868
我们打算要将便签保存下来

00:32:47.935 --> 00:32:49.703
所以我选择了这个

00:32:50.904 --> 00:32:54.441
我命令 CTL点击它

00:32:54.942 --> 00:32:57.644
然后我添加片段到笔记本上

00:32:58.445 --> 00:33:03.917
你看到了
我的便签也添加到这里了

00:33:05.552 --> 00:33:09.122
我可以打开扩展
就在这里

00:33:09.489 --> 00:33:11.558
我现在要修改它

00:33:11.859 --> 00:33:16.029
因为假设我不想要最后一个句子

00:33:16.129 --> 00:33:20.234
我只要简单一删
点击修改 瞧

00:33:20.400 --> 00:33:22.069
在macOS应用里也反应出来了

00:33:22.469 --> 00:33:26.373
因此 分析代码就这么简单

00:33:26.440 --> 00:33:29.810
在你的macOS应用和扩展之间

00:33:33.780 --> 00:33:36.216
我演示给大家看
怎么添加一个按钮

00:33:36.383 --> 00:33:41.188
我给你们看了怎么显示弹出框
然后添加多个上下文菜单项

00:33:42.589 --> 00:33:44.291
我现在要把讲台交给Brian

00:33:54.301 --> 00:33:55.135
感谢Damian

00:33:55.769 --> 00:33:57.571
除了把遥控器落在这了

00:33:59.306 --> 00:34:02.209
总结下 今天我们展示了三种扩展

00:34:02.276 --> 00:34:04.745
都是基于新的扩展模型而成为可能

00:34:05.512 --> 00:34:08.382
我们展示了把你的内容拦截器

00:34:08.482 --> 00:34:10.449
从iOS迁移到Mac是多简单

00:34:10.516 --> 00:34:14.288
我们引入了新的API
获取你的内容拦截器状态

00:34:14.353 --> 00:34:15.989
也是我们对大家反馈的回应

00:34:16.657 --> 00:34:19.525
同样简单的是把

00:34:19.592 --> 00:34:23.830
修改网页内容的Chrome扩展迁移到Safari
并且使其

00:34:23.897 --> 00:34:26.766
在你的应用扩展里
和原生Swift代码通信

00:34:27.400 --> 00:34:30.838
最后我们看到了它强大的功能

00:34:30.904 --> 00:34:33.340
你的应用是如何直接影响Safari

00:34:34.341 --> 00:34:38.779
记住Safari app extension
都是基于app extensions的

00:34:39.079 --> 00:34:43.016
意思是可以利用
那些原生的技术和API

00:34:43.083 --> 00:34:47.454
扩展的代码以及你的
JavaScript和CSS代码

00:34:47.521 --> 00:34:49.822
用来修改和改善网页

00:34:50.623 --> 00:34:54.795
因为Safari app extensions
和Mac应用一起发布

00:34:55.161 --> 00:34:58.498
为你们的用户提供了简单的安装体验

00:34:58.565 --> 00:35:01.702
你可在 Mac App Store
销售你的扩展了

00:35:02.703 --> 00:35:05.772
欲了解更多本场演讲和有用链接的信息

00:35:05.973 --> 00:35:07.541
请访问这个页面

00:35:07.841 --> 00:35:10.344
Safari app extensions
是大势所趋

00:35:10.410 --> 00:35:13.313
我们需要你们的帮助使它越来越完美

00:35:13.647 --> 00:35:17.784
若你们发现了任何漏洞或API缺陷
请向我们提供反馈

00:35:18.051 --> 00:35:20.687
在详情页面
你会发现有个链接

00:35:20.754 --> 00:35:24.157
可以留下反馈并且发邮件给
John Davis

00:35:24.224 --> 00:35:26.360
他是Safari和
WebKit布道者

00:35:27.060 --> 00:35:28.495
相关的演讲

00:35:28.562 --> 00:35:33.133
我推荐大家去找一下
往年的关于app extension的演讲

00:35:34.368 --> 00:35:35.502
非常感谢