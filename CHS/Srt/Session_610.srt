00:00:19.419 --> 00:00:23.257
SpriteKit的新特性

00:00:35.736 --> 00:00:36.603
各位大家好

00:00:36.870 --> 00:00:38.772
欢迎来到
“SpriteKit的新特性”

00:00:38.972 --> 00:00:42.609
我叫Ross
我是Apple游戏技术组的工程师

00:00:42.676 --> 00:00:44.244
我非常激动能向你们展示

00:00:44.311 --> 00:00:45.979
去年我们工作的进展

00:00:51.285 --> 00:00:52.686
在开始讲

00:00:52.753 --> 00:00:54.688
引进的新功能之前

00:00:54.755 --> 00:00:56.890
我想先快速回顾一下
SpriteKit是什么

00:00:56.957 --> 00:00:58.659
对于不太熟悉它的人

00:01:01.261 --> 00:01:04.230
那么 SpriteKit是给
2D游戏的图像框架

00:01:04.730 --> 00:01:07.234
它设计为高度灵活和易用

00:01:07.301 --> 00:01:10.137
同时提供优良性能

00:01:10.204 --> 00:01:11.905
所以 有极少的技术屏障

00:01:11.972 --> 00:01:14.474
置于你和你想制作的伟大游戏之间

00:01:15.909 --> 00:01:20.647
它为我们所有平台支持
包括iOS、macOS、tvOS

00:01:20.981 --> 00:01:24.184
而且今年我们可以自豪的说
它也能在watchOS上运行了

00:01:25.819 --> 00:01:27.921
任何应用 我知道 是不是很棒？

00:01:31.325 --> 00:01:33.594
任何用SpriteKit的应用
相当于自动用了

00:01:33.660 --> 00:01:35.295
现有的最新框架

00:01:35.362 --> 00:01:37.397
不需要任何重构和重新部署

00:01:37.464 --> 00:01:38.799
你们就可一直与时俱进了

00:01:39.132 --> 00:01:41.835
它和Swift自然集合
所以你能使用

00:01:41.902 --> 00:01:44.171
所有这个新语言的好功能

00:01:46.740 --> 00:01:48.775
但框架仅是
整个SpriteKit的一半

00:01:49.309 --> 00:01:52.079
另一半是Xcode集成即时编辑器

00:01:52.145 --> 00:01:54.982
可以让你直接在编辑器里预览场景

00:01:55.048 --> 00:01:56.917
视觉上展示出来

00:01:57.718 --> 00:01:59.720
它提供基于时间线的动画

00:01:59.786 --> 00:02:01.522
让你给游戏注入生命

00:02:01.588 --> 00:02:03.457
通过我们强健的粒子编辑器

00:02:04.591 --> 00:02:06.193
它完全集成于资源目录

00:02:06.260 --> 00:02:09.128
所以你可以利用功能如应用瘦身和

00:02:09.196 --> 00:02:11.765
按需加载资源 不用饱受折磨

00:02:12.432 --> 00:02:14.101
今年我们要引进图块地图编辑

00:02:14.168 --> 00:02:15.602
和GameplayKit集成

00:02:15.669 --> 00:02:17.304
这两功能我们过会儿都会讲一些

00:02:18.639 --> 00:02:21.008
最后 SpriteKit完全
由Metal框架支持

00:02:21.074 --> 00:02:22.676
在所有支持其的设备上

00:02:23.510 --> 00:02:25.712
所以你们能够自动得到它高性能福利

00:02:25.779 --> 00:02:27.648
不需要额外做什么

00:02:29.850 --> 00:02:31.919
今年我们继续引进新功能

00:02:31.985 --> 00:02:35.489
让在Apple平台上开发好游戏
比何时都简单

00:02:36.056 --> 00:02:38.225
所以不用多说什么
让我们直接开始讲新进展

00:02:39.893 --> 00:02:41.795
一般像这种演讲呢

00:02:41.862 --> 00:02:43.530
我们会把工具之类的东西放在最后

00:02:43.597 --> 00:02:45.499
但是今天我们会把这些提前一些

00:02:46.099 --> 00:02:48.368
因为编辑器至关重要

00:02:48.435 --> 00:02:50.571
对应用SpriteKit来说

00:02:50.871 --> 00:02:52.806
而且今年有些非常令人激动的新内容

00:02:52.873 --> 00:02:55.809
从场景大纲视图开始

00:02:57.144 --> 00:02:59.913
知道场景里有什么
对象之间的关系

00:02:59.980 --> 00:03:02.449
对有效场景管理极为重要

00:03:03.350 --> 00:03:05.819
Xcode 7中
完全通过Jump Bar完成

00:03:06.486 --> 00:03:09.022
Jump Bar设计了用来定位文件

00:03:09.089 --> 00:03:11.758
从工作空间更简单
但是当你在SpriteKit

00:03:11.825 --> 00:03:14.494
层级里包含所有节点

00:03:15.195 --> 00:03:17.197
帮助定位所有这些节点

00:03:17.264 --> 00:03:19.600
如果这样就好了 能看到整个层级

00:03:19.666 --> 00:03:20.767
同时看到

00:03:22.369 --> 00:03:26.106
所以现在在Xcode 8你可以
用新的场景大纲视图

00:03:26.807 --> 00:03:29.309
这是一个新面板
允许你看到场景中所有节点

00:03:29.376 --> 00:03:32.246
和节点间亲子关系
同时看到

00:03:33.213 --> 00:03:34.715
还能选择节点

00:03:34.781 --> 00:03:38.252
重命名、删除场景中的节点

00:03:39.586 --> 00:03:42.489
你还能改变节点间亲子关系

00:03:42.556 --> 00:03:43.857
通过拖拽它们

00:03:43.924 --> 00:03:47.594
很像重新整理keynote幻灯片

00:03:49.463 --> 00:03:52.466
把一个子节点放在
另一个节点下成为子节点

00:03:52.733 --> 00:03:55.035
把节点放在另一个节点下
成为那个节点的子节点

00:03:55.335 --> 00:03:58.639
或者把一个子节点
拖出父节点脱离亲子关系

00:04:00.307 --> 00:04:03.110
还能锁定 隐藏节点

00:04:03.777 --> 00:04:07.080
锁定节点就不能在
场景视图中更改、选择

00:04:07.147 --> 00:04:09.616
这让你在场景中定位简单

00:04:09.683 --> 00:04:12.986
当你有很多笔记
场景可能变得杂乱纠结

00:04:13.787 --> 00:04:14.888
隐藏也一样

00:04:14.955 --> 00:04:17.690
有很多大的对象时很方便

00:04:17.757 --> 00:04:20.527
有时你会想能控制一些
大的对象后面的节点

00:04:21.528 --> 00:04:24.097
所以所有功能让场景大纲视图很有用

00:04:24.164 --> 00:04:27.434
管理场景很方便

00:04:29.536 --> 00:04:31.238
所以接下来我想讲讲我们怎样整合

00:04:31.305 --> 00:04:33.974
GameplayKit进
SpriteKit编辑器

00:04:35.175 --> 00:04:37.110
去年我们引入GameplayKit

00:04:37.177 --> 00:04:39.713
一个全新的框架
提供即用解决方案

00:04:39.780 --> 00:04:42.416
给创造游戏时常见问题

00:04:43.217 --> 00:04:45.118
去年包含的新功能之一

00:04:45.853 --> 00:04:48.589
是实体和组件
这是一个设计模式 重点在

00:04:48.655 --> 00:04:50.490
模块化和可重用性

00:04:51.391 --> 00:04:53.694
组件封装行为

00:04:54.394 --> 00:05:01.034
指定组件到对象
或者指定实体到对象来改变对象行为

00:05:02.669 --> 00:05:04.838
你可以这样做不写任何代码

00:05:04.905 --> 00:05:06.306
给每个场景中的对象

00:05:07.241 --> 00:05:09.109
我们不打算讲太多细节

00:05:09.176 --> 00:05:12.913
这些如何工作
但这么想很有用 把组件

00:05:12.980 --> 00:05:16.416
看成代码积木
你可以用不同方式组装

00:05:16.483 --> 00:05:18.719
来创造有不同行为的对象

00:05:20.354 --> 00:05:23.090
常见有一个组件代表体力值

00:05:23.156 --> 00:05:24.825
给可以被伤害的对象

00:05:25.425 --> 00:05:27.761
或者一个有物理数据的组件

00:05:27.828 --> 00:05:29.730
给可以互相撞击的对象

00:05:29.930 --> 00:05:35.602
一个组件允许对象由玩家输入操控

00:05:37.538 --> 00:05:38.739
组件非常强大

00:05:38.805 --> 00:05:41.842
允许你操控对象行为

00:05:44.111 --> 00:05:45.979
现在把实体和组件带进

00:05:46.046 --> 00:05:47.347
SpriteKit编辑器中

00:05:48.248 --> 00:05:51.385
你可以指定创建的组件直接到节点

00:05:51.451 --> 00:05:52.886
在场景中的节点

00:05:52.953 --> 00:05:55.722
从调试器中新出的实体与组件面板

00:05:56.523 --> 00:05:58.225
另外 可以选择显示属性

00:05:58.292 --> 00:05:59.893
在自定义组件中

00:06:00.327 --> 00:06:03.830
于是属性会出现在编辑器上
你便可以微调每个节点

00:06:04.998 --> 00:06:08.001
最好的部分是
若你已在用GameplayKit

00:06:08.068 --> 00:06:10.604
实体与组件了
我们会为您完成所有那些繁重工作

00:06:10.671 --> 00:06:13.307
你只要从编辑器直接构成对象

00:06:16.109 --> 00:06:19.279
另一个GameplayKit引进的
强大的功能是路径寻找

00:06:19.680 --> 00:06:24.184
路径寻找是从A点到B点寻找最佳路径

00:06:24.251 --> 00:06:27.521
通过操控所谓的导航图像

00:06:28.622 --> 00:06:33.660
导航图像是通过链接
结合起来的节点组合

00:06:34.428 --> 00:06:38.131
它们描述了对象如何在场景中移动

00:06:38.198 --> 00:06:39.933
不会撞到任何障碍物

00:06:42.169 --> 00:06:45.105
现在加入导航图像
进SpriteKit编辑器

00:06:45.172 --> 00:06:48.008
那么你可在场景中创建并直接编辑它们

00:06:48.542 --> 00:06:50.410
你可以加入 删除导航图像中的节点

00:06:50.477 --> 00:06:53.480
或在编辑器中点击来建立连接

00:06:54.515 --> 00:06:56.884
利用图像创造相应代码

00:06:57.718 --> 00:06:59.753
这种创建图像的方式能更快速 简单

00:06:59.820 --> 00:07:01.922
地定义实体在场景中移动

00:07:01.989 --> 00:07:03.590
让路径寻找轻而易举

00:07:05.659 --> 00:07:07.394
那么现在讲讲一个特性 帮助你

00:07:07.461 --> 00:07:09.329
我知道 是不是特别棒

00:07:13.200 --> 00:07:14.468
那么现在讲讲一个特性

00:07:14.535 --> 00:07:16.570
帮助你最大化提高游戏性能

00:07:16.637 --> 00:07:18.205
每秒显示帧数性能表

00:07:19.840 --> 00:07:22.176
也许你用过Xcode 7的
每秒显示帧数报告

00:07:22.743 --> 00:07:23.744
当你运行应用

00:07:23.810 --> 00:07:26.313
会提供一个实时性能数据

00:07:26.380 --> 00:07:31.185
包括帧速率
图形处理器利用率

00:07:33.053 --> 00:07:34.521
和CPU/GPU帧时

00:07:35.422 --> 00:07:37.424
这对分析性能很有用

00:07:37.491 --> 00:07:39.359
但有更高粒度会更好

00:07:43.897 --> 00:07:47.167
现在在Xcode 8
你还能看到时间线历史

00:07:47.234 --> 00:07:51.772
有SpriteKit应用时间
CPU和GPU帧时

00:07:52.539 --> 00:07:55.209
另外它和CPU时间脱离 所以你能

00:07:55.275 --> 00:07:57.477
看到花了多久 渲染

00:07:57.544 --> 00:08:01.982
运行刷新循环
评估物理时间和闲置时间

00:08:02.816 --> 00:08:05.385
这个信息极有用 用来决定

00:08:05.452 --> 00:08:07.921
你需要关注提高哪方面

00:08:08.822 --> 00:08:12.159
每秒显示帧数性能表是设计来提高

00:08:12.226 --> 00:08:14.094
游戏在移动平台上的表现

00:08:14.161 --> 00:08:17.698
它在iOS和
watchOS应用上都有

00:08:20.968 --> 00:08:23.370
那么我们讲了一些编辑器的新增功能

00:08:23.437 --> 00:08:25.472
现在换挡 来讲讲

00:08:25.539 --> 00:08:27.407
一项新功能 出现在编辑器和

00:08:27.474 --> 00:08:29.476
框架中 图块地图

00:08:31.512 --> 00:08:34.014
对不熟悉图块地图讲一下

00:08:34.313 --> 00:08:36.817
这是网格平均分布的图像

00:08:37.751 --> 00:08:39.285
用来拼构场景

00:08:39.352 --> 00:08:42.655
从一个叫做图块的 小而重复的图像
的集合

00:08:44.124 --> 00:08:47.227
把图块看做是
图块地图看作是拼图

00:08:47.294 --> 00:08:49.396
图块看做每片拼图

00:08:49.930 --> 00:08:52.533
每片看上去没什么
但放在一块儿

00:08:52.599 --> 00:08:55.602
可以创造丰富细节的大场景

00:08:57.204 --> 00:08:58.872
那么在细细讨论功能之前

00:08:58.939 --> 00:09:01.742
先讲如何使用

00:09:02.776 --> 00:09:04.578
从小的重复图片建造场景

00:09:04.645 --> 00:09:06.146
在创造游戏时很常见

00:09:07.648 --> 00:09:09.583
没有图块地图
如果你想办到

00:09:09.650 --> 00:09:13.921
就要手动放每一个图像

00:09:16.190 --> 00:09:17.491
也完全可以

00:09:18.225 --> 00:09:21.929
用小图像集合能保持记忆负担低

00:09:22.896 --> 00:09:24.531
也能重新整理来修改

00:09:24.598 --> 00:09:25.866
场景外形

00:09:26.366 --> 00:09:27.835
可是 复制粘贴

00:09:27.901 --> 00:09:30.437
和手动排列每一个图像

00:09:30.504 --> 00:09:32.506
非常费时乏味

00:09:33.373 --> 00:09:36.076
常常导致场景被凌乱地放满节点

00:09:36.143 --> 00:09:38.645
马上变得很难管理

00:09:40.347 --> 00:09:42.482
所以相反你能用大

00:09:42.549 --> 00:09:45.986
有很多细节的图像

00:09:46.053 --> 00:09:49.022
去年发布的示例游戏DemoBots
用了这个方法

00:09:49.857 --> 00:09:52.492
所以场景中用大图像很快捷

00:09:52.559 --> 00:09:56.363
也能让场景不再杂乱

00:09:56.930 --> 00:09:58.332
如果你想改变外形

00:09:58.398 --> 00:10:00.934
就需要修改资源目录

00:10:01.902 --> 00:10:04.304
另外 大图像耗费更多容量

00:10:04.671 --> 00:10:06.640
如果你想在游戏中有更多变化

00:10:06.707 --> 00:10:08.842
需要更多大容量资源

00:10:08.909 --> 00:10:11.578
就会更加剧容量过载

00:10:13.280 --> 00:10:16.183
所以图块地图同时给你
两个问题的解决方案

00:10:16.650 --> 00:10:17.718
它们易管理

00:10:17.784 --> 00:10:20.087
而且因为每个图块地图只是场景中
一个节点

00:10:20.521 --> 00:10:21.922
可以快速修改

00:10:22.189 --> 00:10:27.060
比如想改这里的沙图块为水

00:10:27.261 --> 00:10:30.664
我只要告诉图块地图改类型就好了

00:10:31.965 --> 00:10:35.836
用小图块集合
图块地图可以构造大的、

00:10:35.903 --> 00:10:38.672
有细节的场景
最低限度的容量负担

00:10:40.507 --> 00:10:43.243
图块地图对很多不同游戏和
艺术风格也很有利

00:10:43.544 --> 00:10:46.346
你可以用来做自顶向下的RPG

00:10:46.747 --> 00:10:50.417
横向卷轴游戏
等距城市建造游戏

00:10:51.552 --> 00:10:53.020
六角形桌上游戏

00:10:53.086 --> 00:10:55.289
图块地图非常灵活

00:10:56.857 --> 00:10:59.326
所以你会发现图块地图非常可视化

00:10:59.393 --> 00:11:01.428
不用告诉你它们怎么工作

00:11:01.495 --> 00:11:03.564
我们直接进入演示部分给你看

00:11:03.630 --> 00:11:05.632
现在我们在SpriteKit编辑器

00:11:05.699 --> 00:11:08.235
场景中已经有了图块地图

00:11:09.403 --> 00:11:11.104
先选择它

00:11:11.605 --> 00:11:13.874
最快编辑图块地图的方式

00:11:13.941 --> 00:11:15.576
只是双击它

00:11:16.343 --> 00:11:19.079
显示新的图块编辑栏

00:11:19.146 --> 00:11:20.414
在这儿屏幕上方

00:11:21.215 --> 00:11:25.219
默认选择笔刷工具

00:11:25.485 --> 00:11:27.754
可以在图块地图上涂色

00:11:28.121 --> 00:11:31.091
涂色 只要点击

00:11:31.625 --> 00:11:34.595
就开始放置图块在地图上了

00:11:36.830 --> 00:11:39.266
如果你想改放置了的图块的类型

00:11:39.666 --> 00:11:43.770
只要点击这里的 选择图块 按钮

00:11:44.037 --> 00:11:47.207
就会显示所有可以放置的图块类型

00:11:48.141 --> 00:11:53.680
在这儿放边图块和角图块

00:11:55.182 --> 00:11:56.984
在放一些边图块

00:11:57.050 --> 00:11:58.952
你会发现很简单 放图块

00:11:59.019 --> 00:12:01.121
这样拼凑场景

00:12:01.755 --> 00:12:03.891
但是一个个放图像

00:12:03.957 --> 00:12:05.559
还是有点重复乏味

00:12:05.859 --> 00:12:08.061
那么展示一个更好的办法

00:12:09.530 --> 00:12:14.368
先放一片新图块地图在场景中

00:12:20.607 --> 00:12:23.243
默认下图块地图有个功能

00:12:24.678 --> 00:12:27.915
在调试器可用叫 允许自动绘制地图

00:12:30.851 --> 00:12:33.453
这个功能做的是开始编辑地图时

00:12:33.520 --> 00:12:34.888
选择图块

00:12:34.955 --> 00:12:37.391
可以看到不是放置单个图块

00:12:37.457 --> 00:12:39.793
而是一组组图块

00:12:39.860 --> 00:12:43.430
整理成不同地貌类型 草 土 石 水

00:12:43.830 --> 00:12:45.232
选择一个

00:12:45.766 --> 00:12:47.734
现在放一块图块地图时

00:12:47.801 --> 00:12:50.304
点击放置中心图块

00:12:50.370 --> 00:12:52.773
同时自动放下所有边图块

00:12:53.807 --> 00:12:57.010
对快速简单创建场景很棒

00:12:57.077 --> 00:13:00.681
不用放每个边图块角图块

00:13:00.747 --> 00:13:03.050
只要画 它会自动生成

00:13:03.717 --> 00:13:05.686
每个我们需要的图块 不用我们

00:13:05.752 --> 00:13:08.755
费多余的时间

00:13:08.822 --> 00:13:11.358
这让画图块特别快

00:13:17.831 --> 00:13:20.834
现在看看图块集合怎么被放在一块

00:13:21.835 --> 00:13:24.538
图块集合到达各自的SKS文件

00:13:24.972 --> 00:13:28.175
你可以在这儿看到
游戏带有的不同类型

00:13:28.242 --> 00:13:30.043
比如草 泥土 石头 水

00:13:30.410 --> 00:13:32.412
你可以看到它们排列好了

00:13:33.680 --> 00:13:35.582
能让你看到图块应该怎样放在一块儿

00:13:35.649 --> 00:13:39.253
这里放个新的图块组

00:13:42.556 --> 00:13:47.027
我们只要构建对自动绘制地图有用的
新图块组

00:13:47.094 --> 00:13:50.264
通过拖拽想用的符合相应位置的图块

00:13:50.330 --> 00:13:52.199
这里有显示轮廓表示

00:13:52.266 --> 00:13:54.134
大概图块长什么样

00:13:54.735 --> 00:13:59.973
只要把图块从现用的浏览器拖到这儿

00:14:01.074 --> 00:14:02.876
只要拖放进去

00:14:03.510 --> 00:14:08.148
就能快速简单设立新图块组

00:14:17.357 --> 00:14:19.560
让我们命名它

00:14:21.461 --> 00:14:23.130
叫它花园

00:14:25.032 --> 00:14:25.866
就好了

00:14:26.667 --> 00:14:28.035
现在进入场景

00:14:29.036 --> 00:14:30.470
创建一个图块地图

00:14:32.239 --> 00:14:33.440
开始编辑它

00:14:34.875 --> 00:14:38.011
看到花园图块组已经在这儿了

00:14:38.278 --> 00:14:40.614
只要抓住它放进去

00:14:40.814 --> 00:14:43.483
所以你会发现设立新图块组多么简单

00:14:43.550 --> 00:14:45.385
而且已经可以自动绘制地图.

00:14:45.452 --> 00:14:46.920
不用做任何其他的

00:14:48.055 --> 00:14:51.091
但是还有一些可以对图块组做的

00:14:51.859 --> 00:14:54.528
那么回到图块
到另一个图块集合

00:14:54.595 --> 00:14:55.929
这个我之前做好的

00:14:56.330 --> 00:14:58.131
乍一眼看上去一样

00:14:58.832 --> 00:15:02.302
但当我点击其中一块单一图块

00:15:02.369 --> 00:15:05.772
会看到这里有每个图块的很多可用变种

00:15:06.206 --> 00:15:11.278
每个不同位置的图块都一样

00:15:13.380 --> 00:15:15.849
所以当我们画图块来组成图块地图时

00:15:16.216 --> 00:15:19.219
它会随机选择图块其中一个变种

00:15:19.386 --> 00:15:21.655
所以图块地图可以有很多变化

00:15:21.722 --> 00:15:26.527
另外可以指定样式中不同重量
一些变量

00:15:26.994 --> 00:15:31.665
这里 红花放置重量为3

00:15:33.534 --> 00:15:36.270
白花放置重量为2

00:15:39.239 --> 00:15:41.308
蓝花放置重量为1

00:15:42.476 --> 00:15:43.911
所以红花非常常见

00:15:43.977 --> 00:15:47.247
相比白花 更比蓝花常见

00:15:47.648 --> 00:15:49.183
现在回到场景.

00:15:50.617 --> 00:15:52.085
创建另一个图块地图

00:15:54.988 --> 00:15:57.057
指定刚刚设好的先进图块组到这里

00:16:00.460 --> 00:16:03.096
现在刷这些图块

00:16:03.163 --> 00:16:05.299
可以看到变种出现

00:16:07.901 --> 00:16:09.703
所以你们可以看到图块组非常灵活

00:16:09.770 --> 00:16:11.505
可以画出不同的样子

00:16:11.572 --> 00:16:14.741
不用费很多力 很有用

00:16:16.310 --> 00:16:19.580
还可以做的关于图块地图的是图层

00:16:20.047 --> 00:16:22.349
在左边的图块地图里

00:16:22.416 --> 00:16:25.319
看上去只有一个图块地图

00:16:27.721 --> 00:16:29.189
但当我抓起它的时候

00:16:29.489 --> 00:16:32.392
你会看到实际上有2层在各自上面

00:16:36.997 --> 00:16:39.466
我们可以把一个图层放在另一个上

00:16:39.533 --> 00:16:40.968
来让它看上去好像

00:16:41.034 --> 00:16:45.072
有很多多样的图块图块资源

00:16:45.138 --> 00:16:48.242
看上去这些资源设计用来

00:16:48.308 --> 00:16:51.845
过渡成草图块

00:16:52.145 --> 00:16:54.314
所以有草在边缘

00:16:54.381 --> 00:16:56.149
把这个图层移过来

00:16:57.017 --> 00:17:01.154
它们自然过渡到草

00:17:02.089 --> 00:17:05.157
移到土上也是一样效果

00:17:05.224 --> 00:17:09.162
像是过渡到土

00:17:10.196 --> 00:17:12.965
这让你从图像库中获得很多额外用处

00:17:13.032 --> 00:17:16.670
如果让它们在边缘过渡成透明

00:17:16.737 --> 00:17:18.405
可以堆叠在一起 然后

00:17:18.704 --> 00:17:20.374
不管怎么样你可以伪装 让你

00:17:20.440 --> 00:17:24.178
从已有资源多出很多用处

00:17:25.512 --> 00:17:30.050
另外图块集合能做的是可以做动画

00:17:30.784 --> 00:17:34.588
这是一个有些草和水的不错的图块集合

00:17:34.655 --> 00:17:35.923
点击 动画按钮

00:17:36.490 --> 00:17:40.294
如果仔细看会看到岸线

00:17:40.360 --> 00:17:43.230
在水图块上在起伏波动

00:17:45.032 --> 00:17:49.102
看看这组地图的图块集合

00:17:50.838 --> 00:17:51.872
设置水图块

00:17:51.939 --> 00:17:55.242
直接从图块集合编辑器中预览动画

00:17:57.945 --> 00:18:00.814
选择其中一个变体
会看到

00:18:00.881 --> 00:18:03.984
一列所有动画中的帧

00:18:04.051 --> 00:18:06.453
给动画设个每帧时间

00:18:06.520 --> 00:18:08.822
基本跟如何添加动画效果给

00:18:08.889 --> 00:18:10.424
材质应用一样

00:18:10.791 --> 00:18:12.693
设置动画效果就这么简单

00:18:12.993 --> 00:18:15.495
给场景注入生机的好办法

00:18:16.830 --> 00:18:21.635
除了在图块上逐帧展示动画效果外

00:18:22.870 --> 00:18:25.172
还能给图块地图本身添加

00:18:25.906 --> 00:18:27.875
图块地图就是SK节点

00:18:27.941 --> 00:18:31.144
所以SK节点能做的它都能

00:18:31.512 --> 00:18:33.347
当然可以拖来拖去

00:18:34.982 --> 00:18:36.350
缩放它们

00:18:37.751 --> 00:18:39.086
旋转它们

00:18:39.987 --> 00:18:42.055
注意可以编辑图块地图

00:18:42.122 --> 00:18:43.957
当它们看上去这样时
尽管有点奇怪

00:18:44.024 --> 00:18:46.727
当它们呈这样奇怪角度的时候
还是可以

00:18:49.696 --> 00:18:52.933
因为SK节点
图块地图也只是节点

00:18:52.999 --> 00:18:54.701
可以在上面加事件

00:18:55.269 --> 00:18:58.405
这里我已经在图块地图加了很多事件

00:18:58.472 --> 00:19:00.240
通过缩放和旋转

00:19:00.574 --> 00:19:01.975
把它动起来

00:19:02.042 --> 00:19:05.245
可以看到能 移动 缩放 旋转

00:19:06.013 --> 00:19:07.214
然后把它放回去

00:19:09.183 --> 00:19:12.019
所以有很多方式给图块地图加动画

00:19:12.085 --> 00:19:13.353
非常有用

00:19:13.687 --> 00:19:18.258
事实上 可以利用图层化和动画

00:19:18.325 --> 00:19:19.960
来创造些有趣的效果

00:19:21.828 --> 00:19:22.896
在这个场景

00:19:23.263 --> 00:19:26.533
这里图块地图中有三个不同的图层

00:19:27.334 --> 00:19:28.769
还不想做这个

00:19:29.203 --> 00:19:33.507
如果把照相机放这儿
点击动画

00:19:34.241 --> 00:19:38.011
仅仅在以不同速率移动图块地图的图层

00:19:38.078 --> 00:19:41.481
呈现深度的效果

00:19:41.548 --> 00:19:43.817
这个效果叫做视差滚动

00:19:43.884 --> 00:19:48.121
我在做的只是移动前景图层

00:19:48.188 --> 00:19:51.758
以一种速度
中景一半速度

00:19:51.825 --> 00:19:54.127
背景又一半速度

00:19:54.628 --> 00:19:57.898
这完成了我们想要的效果
非常惊人

00:19:59.366 --> 00:20:04.571
图块地图不仅支持简单的正方形图块

00:20:04.905 --> 00:20:07.207
还支持六角形图块

00:20:07.574 --> 00:20:09.076
等距立体图块

00:20:09.142 --> 00:20:11.879
所以外貌有很大弹性

00:20:11.945 --> 00:20:13.947
来帮助你做成你的游戏

00:20:17.951 --> 00:20:20.921
说到这儿 马上看看游戏示例

00:20:26.426 --> 00:20:28.829
这是一个我做的小平台

00:20:30.898 --> 00:20:32.199
一个跑来跑去的小人

00:20:32.266 --> 00:20:34.668
你会发现有视差滚动

00:20:34.735 --> 00:20:36.103
在背景

00:20:36.403 --> 00:20:40.040
你会注意到这里我在撞击图块

00:20:40.874 --> 00:20:43.343
我做到这个效果

00:20:44.411 --> 00:20:46.747
通过利用自定义用户数据

00:20:46.813 --> 00:20:49.216
放在每个图块

00:20:50.918 --> 00:20:53.020
向你们展示 在图块集合中

00:20:57.758 --> 00:20:59.226
选择一个变体

00:20:59.293 --> 00:21:01.161
这里有一些用户数据

00:21:02.396 --> 00:21:06.099
一个值叫边图块
是个布尔值 我设为1

00:21:06.733 --> 00:21:09.336
在代码中 我检查图块地图

00:21:09.403 --> 00:21:13.240
在这个平台示例中
找寻所有这些边图块

00:21:13.307 --> 00:21:15.843
找到一个 建一些物理数据

00:21:15.909 --> 00:21:18.846
让玩家能和它撞击

00:21:25.118 --> 00:21:27.654
因为只是在图块地图中

00:21:28.355 --> 00:21:32.392
比如想跳过这面大墙

00:21:34.127 --> 00:21:36.630
一旦运行游戏 会发现

00:21:37.698 --> 00:21:40.601
我这个小人跳的不够高来翻过它

00:21:41.101 --> 00:21:43.504
他非常想做到因为那儿的红按钮
看上去非常诱人

00:21:43.570 --> 00:21:45.038
我很想按那个按钮

00:21:45.906 --> 00:21:50.677
因为我们只能从图块中生成物理数据

00:21:50.744 --> 00:21:53.280
和用户数据
可以做的是到这里

00:21:54.214 --> 00:21:55.749
擦除这些图块...

00:22:00.487 --> 00:22:01.989
再打包运行游戏

00:22:03.290 --> 00:22:06.593
图块不见了 可以移动过去了

00:22:06.660 --> 00:22:08.495
不用改变代码之类的

00:22:08.562 --> 00:22:10.931
只要用数据 来源于

00:22:10.998 --> 00:22:13.133
图块地图来设置图块就行

00:22:13.200 --> 00:22:14.334
是的 非常简单

00:22:17.738 --> 00:22:19.773
作为奖励 我可以跳到按钮上

00:22:20.440 --> 00:22:21.375
耶

00:22:29.016 --> 00:22:32.719
那么这就是图块地图
如何在编辑器中工作了

00:22:36.757 --> 00:22:39.526
展示了如何在编辑器中工作

00:22:39.593 --> 00:22:42.296
看看框架这边

00:22:43.030 --> 00:22:45.799
在编辑器中创建图块地图时

00:22:45.866 --> 00:22:48.569
你不必被这些东西困扰

00:22:48.635 --> 00:22:50.504
但大概了解它怎样工作挺好的

00:22:51.638 --> 00:22:54.608
那么图块地图由
SKTileMapNode类实现

00:22:54.675 --> 00:22:57.477
像在演示里提到的是SK节点

00:22:57.978 --> 00:23:00.814
它包含所有放置了的图块的信息

00:23:01.582 --> 00:23:04.351
但要能放置图块 首先需要图块集合

00:23:05.919 --> 00:23:08.422
图块集合由SKTileSet类定义

00:23:08.755 --> 00:23:10.724
包含所有可用图块集合

00:23:11.091 --> 00:23:13.927
另外定义可以包含的那类图块信息

00:23:13.994 --> 00:23:16.496
可以是一般方形网格图块

00:23:16.563 --> 00:23:19.233
等边立体图块或者六角形图块

00:23:21.869 --> 00:23:24.304
图块组由
SKTileGroup类定义

00:23:25.172 --> 00:23:27.774
像我们在演示里看到的
图块组是一组相关图块

00:23:27.841 --> 00:23:30.611
常见的是地形类别如草或水

00:23:31.478 --> 00:23:34.781
图块组还规定组内单个图块

00:23:34.848 --> 00:23:36.583
在地图如何放置

00:23:38.085 --> 00:23:40.921
规定由SKTileGroupRule类定义

00:23:41.455 --> 00:23:44.057
它还包含图块变体怎样工作

00:23:44.124 --> 00:23:45.893
通过描述的图案

00:23:47.761 --> 00:23:51.465
最后每个图块由SKTileDefinition描述

00:23:51.532 --> 00:23:53.467
定义了图块外形

00:23:53.934 --> 00:23:57.171
每个至少有一个图像
如你在演示中所见

00:23:57.237 --> 00:24:00.741
图块可以由多幅图像做成动画
为图块地图带来活力

00:24:01.475 --> 00:24:04.278
另外 图块可被翻转和/或旋转

00:24:04.344 --> 00:24:07.381
让你从已有资源中获得更多

00:24:09.550 --> 00:24:10.984
快速看一下代码

00:24:11.051 --> 00:24:14.588
可以看到怎样通过API创建、修改
图块地图

00:24:15.389 --> 00:24:18.091
第一步先要得到想用的图块集合

00:24:18.158 --> 00:24:20.360
你可以用编程的方式创建

00:24:20.427 --> 00:24:22.963
但过程非常复杂
所以我们高度推荐

00:24:23.030 --> 00:24:25.465
用图块集合编辑器创建

00:24:27.034 --> 00:24:28.669
要拿一个你已经做好的很简单

00:24:29.203 --> 00:24:31.171
只要调用这个方便的初始化方式

00:24:31.238 --> 00:24:33.373
用你想命名的图块集合名字

00:24:35.442 --> 00:24:37.244
然后 创建新的图块地图

00:24:37.311 --> 00:24:40.080
只要提供要用的图块集合

00:24:40.314 --> 00:24:42.316
地图中排和列的数量

00:24:42.983 --> 00:24:44.551
和每个图块的大小

00:24:46.386 --> 00:24:48.088
如果要开始放图块在地图中

00:24:48.155 --> 00:24:49.590
需要一个图块组

00:24:49.823 --> 00:24:53.060
就拿第一个在图块集合中定义的图块

00:24:55.395 --> 00:24:58.498
有了要放的图块地图图块组

00:24:58.899 --> 00:25:01.034
可以开始放单个图块了

00:25:02.069 --> 00:25:05.506
这里把图块组放到第4列
第7排的图块上

00:25:07.574 --> 00:25:10.244
也可以一下操控整个地图

00:25:10.310 --> 00:25:12.980
这里用图块组填充地图上每个图块

00:25:15.482 --> 00:25:18.819
若你用SpriteKit编辑器
创造修改图块地图

00:25:18.886 --> 00:25:21.488
你也许不会用到任何刚刚讲的API

00:25:22.089 --> 00:25:25.325
但除非你的图块地图是全静止的背景

00:25:25.392 --> 00:25:27.361
否则你也许想询问它们

00:25:27.828 --> 00:25:29.796
有很多你可以做

00:25:30.464 --> 00:25:34.268
比如说 当玩家移动过某个特定图块
时 你想检测到

00:25:34.334 --> 00:25:37.704
并且引入一些自定义用户数据到
图块定义上

00:25:39.506 --> 00:25:43.143
你可以做到这些
首先转换玩家位置

00:25:43.343 --> 00:25:45.345
成参考于图块地图画面的位置

00:25:47.481 --> 00:25:49.983
然后 可以用我这里划出的方法

00:25:50.050 --> 00:25:53.053
来得到有该位置图块的排数和列数

00:25:55.088 --> 00:25:59.193
接下来 问那个排数列数存在的
图块的定义

00:26:01.228 --> 00:26:03.830
最后 既然已经得到了图块的定义

00:26:04.198 --> 00:26:06.400
你可以把用户数据加入那个自定义值

00:26:06.466 --> 00:26:07.801
你感兴趣的

00:26:07.868 --> 00:26:10.370
然后在那则数据信息上加入
你想要的行为

00:26:10.804 --> 00:26:12.372
刚刚做的演示中

00:26:12.439 --> 00:26:15.008
我们做的非常相似 那就是
检测当玩家

00:26:15.843 --> 00:26:17.110
跳到大红按钮上

00:26:18.011 --> 00:26:21.181
当他们跳过一个带有
按钮自定义用户数据属性 的图块时

00:26:21.248 --> 00:26:22.616
我们点燃了烟花

00:26:24.985 --> 00:26:26.420
这些有很多需要理解

00:26:26.486 --> 00:26:29.590
所以快速回顾一下图块地图提供的
新功能

00:26:31.191 --> 00:26:34.661
通过从一个小 重复的图像集合
创建场景

00:26:34.728 --> 00:26:37.364
图块地图让你从艺术资源中获得更多

00:26:38.165 --> 00:26:40.367
总的来说 你会需要更少的资源

00:26:40.434 --> 00:26:43.303
还会有好处能减少容量负担

00:26:44.071 --> 00:26:47.241
它们支持动画
以动态图块图像的形式

00:26:47.307 --> 00:26:49.009
和节点上事件的形式

00:26:51.078 --> 00:26:53.347
图块地图设计用来堆叠在彼此上

00:26:53.413 --> 00:26:56.083
更增加了图像资源的多功能性

00:26:56.149 --> 00:26:58.418
使效果如视差滚动成为可能

00:26:59.453 --> 00:27:01.588
它们还非常灵活
很好针对不同

00:27:01.655 --> 00:27:04.057
美术风格和游戏类型

00:27:06.660 --> 00:27:09.062
大的图块地图自动分为

00:27:09.129 --> 00:27:13.300
小块 而且只有当前可见的部分
会画出来

00:27:13.901 --> 00:27:16.170
这提供了巨大性能提升

00:27:16.236 --> 00:27:19.873
另外 如果所有图块地图用的图像

00:27:19.940 --> 00:27:22.209
在同一个资源目录
Sprite Atlas

00:27:22.543 --> 00:27:25.379
每块会收集所有的图块在一起

00:27:25.445 --> 00:27:27.181
用一个画画命令渲染出来

00:27:28.215 --> 00:27:30.150
图块地图还有不同口味

00:27:30.417 --> 00:27:34.254
标准正方形网格 等边立体图块
和六角形图块

00:27:36.623 --> 00:27:39.826
工具这边 编辑图块地图方便简单

00:27:40.394 --> 00:27:42.696
只要点击来放置图块在地图上

00:27:43.130 --> 00:27:45.399
自动绘制地图为您完成
所有那些繁重工作

00:27:45.699 --> 00:27:49.136
你不需要单个放置每个边和角图块

00:27:50.137 --> 00:27:53.106
当然你可以关掉这个功能来
手动做这些细节部分

00:27:53.740 --> 00:27:57.177
最后 创建新图块集合非常快

00:27:57.711 --> 00:27:59.947
只要拖放想用的图像

00:28:00.013 --> 00:28:02.616
进相应的图块集合编辑器里的位置

00:28:02.783 --> 00:28:03.951
就可以了

00:28:05.419 --> 00:28:06.920
所以这些是图块集合的部分

00:28:07.554 --> 00:28:09.556
我要邀请同事
Clement来跟你们讲

00:28:09.623 --> 00:28:11.959
今年其他特别棒的新特性

00:28:20.968 --> 00:28:21.935
谢谢 Ross

00:28:23.637 --> 00:28:25.239
好的 这是些好东西是不是

00:28:27.007 --> 00:28:28.909
你们好 我是Clement

00:28:29.176 --> 00:28:32.212
我是Apple游戏技术组的
软件工程师

00:28:32.779 --> 00:28:34.581
你猜怎么着？

00:28:34.648 --> 00:28:35.782
我们其实还有很多可说

00:28:35.849 --> 00:28:37.551
看看SpriteKit还有何新特性

00:28:38.352 --> 00:28:40.687
第一个是弯曲变形

00:28:43.123 --> 00:28:47.094
现在在Sprite有很多变形方式

00:28:47.327 --> 00:28:50.597
可以缩放来让东西变大变小

00:28:51.532 --> 00:28:56.069
旋转来沿着轴转动

00:28:57.738 --> 00:29:01.375
如果像亲历亲为
还可以写个自定义着色器

00:29:03.510 --> 00:29:06.113
比如这里看到的这个低分辨率着色器

00:29:10.150 --> 00:29:13.220
今年很高兴宣布一种新的变形

00:29:13.287 --> 00:29:14.588
叫做弯曲变形

00:29:15.122 --> 00:29:16.890
弯曲变形让你定义

00:29:16.957 --> 00:29:19.326
自定制的扭曲度 用点的度数

00:29:20.127 --> 00:29:24.031
比如拿一个2x2的网格

00:29:24.097 --> 00:29:27.134
有8个点
你看到的绿色的

00:29:27.201 --> 00:29:29.970
是源位置
也叫参考位置

00:29:30.737 --> 00:29:34.074
然后得到这里第二个网格
但它意味着一次变形

00:29:34.374 --> 00:29:36.610
所以 这是我定义的位置

00:29:36.677 --> 00:29:39.680
我移动了点来创建一次变形

00:29:40.581 --> 00:29:43.483
如果我把这个方法用到之前展示的
宇宙飞船上

00:29:43.550 --> 00:29:44.585
就得到这个

00:29:48.255 --> 00:29:51.491
得到一个不错 平滑的宇宙飞船变形

00:29:51.992 --> 00:29:54.328
这个变形根据位移

00:29:54.394 --> 00:29:56.230
于源位置和终点位置

00:29:57.598 --> 00:29:59.900
让我展示一些例子

00:29:59.967 --> 00:30:01.168
用弯曲变形

00:30:01.535 --> 00:30:05.672
第一个例子是挤压效果

00:30:05.739 --> 00:30:08.976
现在我做的是把点向中间移动

00:30:09.042 --> 00:30:10.711
来创建一个不错的挤压效果

00:30:12.312 --> 00:30:14.047
接下来 拉伸效果

00:30:14.114 --> 00:30:17.718
拉飞船的突出的尖端
让它从右到左摆动

00:30:18.185 --> 00:30:19.653
它看上去有点好笑

00:30:20.888 --> 00:30:23.790
接下来重要的东西是关键帧动画

00:30:25.058 --> 00:30:27.461
在2D游戏中 往往如果艺术家

00:30:27.528 --> 00:30:30.063
为动画要做静止帧

00:30:30.631 --> 00:30:31.732
会花很长过程

00:30:31.798 --> 00:30:34.868
尤其如果你要好几次反复做新设计

00:30:35.402 --> 00:30:36.803
弯曲变形

00:30:36.870 --> 00:30:39.806
让做动画跟到处移动点那么简单

00:30:40.174 --> 00:30:43.810
如果有复杂的情况
像关键帧动画

00:30:43.877 --> 00:30:45.245
你可以提供几个度数

00:30:45.512 --> 00:30:47.481
所有一下子就做好了

00:30:47.548 --> 00:30:49.149
不再需要静止帧了

00:30:51.018 --> 00:30:53.187
现在让我给你们解释基本概念

00:30:53.253 --> 00:30:54.955
弯曲变形的背后

00:30:56.056 --> 00:30:58.325
又来了 假设这里有个2x2网格

00:30:58.392 --> 00:31:03.697
在网格分布中
一组有标号的点从0到8

00:31:05.165 --> 00:31:07.034
这个点 这个点 抱歉 这个网格

00:31:07.100 --> 00:31:10.571
和其中的单元格是有很多三角形的
四方格

00:31:11.371 --> 00:31:13.574
从电脑图像角度来说

00:31:13.640 --> 00:31:16.610
这里有一列顶点要变

00:31:17.110 --> 00:31:20.314
材质坐标也一样

00:31:21.014 --> 00:31:23.984
然后只要设置GPU插值

00:31:25.686 --> 00:31:27.788
这就好了
我们可以先停在这儿

00:31:27.955 --> 00:31:31.291
但一开始如果我用3D emoji
猫emoji会怎样

00:31:31.358 --> 00:31:34.461
我限制它为1个四方格
也就是1x1网格

00:31:35.162 --> 00:31:36.964
那么来吧 给我看看变形

00:31:37.831 --> 00:31:39.032
好 做吧

00:31:40.901 --> 00:31:42.936
恩 这看上去不太对

00:31:43.470 --> 00:31:46.707
原因是我们只是在移动一个点

00:31:46.773 --> 00:31:48.742
所以只有一个三角形在扭曲

00:31:49.109 --> 00:31:50.878
那么 我们能怎么办呢

00:31:51.245 --> 00:31:54.581
我们把网格更密实
上载更多四方格

00:31:54.982 --> 00:31:56.383
但是这就有点乏味了

00:31:56.450 --> 00:31:58.252
因为有更多点要操控

00:31:58.585 --> 00:32:00.554
尤其因为Sprite很大

00:32:00.821 --> 00:32:03.690
几乎就像是必须 你知道的
到处移动像素是不是

00:32:04.791 --> 00:32:08.095
所以不是的 正如你猜到的
我们有个小技巧

00:32:08.428 --> 00:32:10.030
SpriteKit中要这么做

00:32:10.697 --> 00:32:12.199
再一次 2x2网格

00:32:13.133 --> 00:32:15.469
你只要操作8点

00:32:15.769 --> 00:32:18.138
当你在移动点来变形时

00:32:18.205 --> 00:32:19.306
发生了这些

00:32:24.645 --> 00:32:25.512
那么好了

00:32:26.246 --> 00:32:28.749
所以我们帮你做了自动四方格细分

00:32:29.449 --> 00:32:31.852
这很棒因为给了你权衡

00:32:31.919 --> 00:32:33.987
在高强度细节

00:32:34.054 --> 00:32:36.757
和尽量少的四方格之间
使用变形

00:32:37.558 --> 00:32:39.626
再说一次 你只要操控8个点

00:32:39.693 --> 00:32:42.296
这里 当我移动左上角的点时

00:32:42.496 --> 00:32:46.200
会看到我拖得有点远
所以变形程度有点高

00:32:46.466 --> 00:32:47.935
那么做细分

00:32:48.268 --> 00:32:50.504
在右下角
有点微变形

00:32:50.571 --> 00:32:52.506
所以我们只细分了两次

00:32:53.941 --> 00:32:56.610
因为想给你更多控制

00:32:56.677 --> 00:32:59.813
事实上我们允许你指定最大数目的细分

00:33:00.247 --> 00:33:02.416
如果我拿之前的宇宙飞船

00:33:02.482 --> 00:33:04.651
像那样扭曲一点儿

00:33:05.052 --> 00:33:06.653
你会看到一些变形 抱歉

00:33:06.720 --> 00:33:09.489
一些走样出现
比如这个在底部的隆起

00:33:09.957 --> 00:33:13.093
所以 如果我只细分一次
你会看到走样

00:33:13.460 --> 00:33:15.162
如果我设为4 比如说

00:33:15.495 --> 00:33:17.231
就明显看不到那些走样了

00:33:17.297 --> 00:33:20.133
宇宙飞船底部呈现平滑的线

00:33:20.934 --> 00:33:22.603
所以这对你来说很棒

00:33:22.669 --> 00:33:26.206
如果你想细调视觉效果和/或表现

00:33:26.273 --> 00:33:28.008
因为当然 四方格越少

00:33:28.075 --> 00:33:30.143
表现越好

00:33:31.245 --> 00:33:33.447
好了 这个不错
但怎样在Swift里做到

00:33:33.814 --> 00:33:35.115
好 第一件事

00:33:35.282 --> 00:33:36.850
记住我们这是网格分布

00:33:36.917 --> 00:33:39.353
所以 8个点从0标到8

00:33:39.753 --> 00:33:42.189
我要提供一列源位置

00:33:42.256 --> 00:33:44.791
一列目标位置
都是2位浮点数

00:33:45.459 --> 00:33:47.828
我可以创建我的弯曲几何网格

00:33:47.895 --> 00:33:50.898
通过提供排数、列数、目标位置

00:33:50.964 --> 00:33:53.967
源位置
然后保存进Sprite

00:33:54.768 --> 00:33:56.069
然后就扭曲变形了

00:33:56.136 --> 00:33:58.972
可选的你可以设置细分度

00:33:59.039 --> 00:34:01.475
设为任何你要的
默认为2

00:34:03.277 --> 00:34:07.314
因为这是SpriteKit
我有一堆新SKAction可用

00:34:07.648 --> 00:34:09.516
所以 变形简单到

00:34:09.583 --> 00:34:13.487
只要说SKActionWarp到
然后提供网格和时间

00:34:14.221 --> 00:34:18.091
或者 如果你想要复杂点
比如关键帧动画

00:34:18.158 --> 00:34:20.726
可以提供一列网格和一列时间

00:34:21.527 --> 00:34:22.462
好的

00:34:22.529 --> 00:34:26.800
那么好 让我给你快速演示
弯曲变形如何运作

00:34:36.043 --> 00:34:36.976
好的

00:34:37.244 --> 00:34:39.646
我要用跟Ross一样的演示项目了

00:34:40.246 --> 00:34:41.281
但这次

00:34:42.616 --> 00:34:46.786
我要用左边因为那儿才是好东西

00:34:47.788 --> 00:34:50.791
好的 小人在这儿
去稍微探索一点

00:34:51.123 --> 00:34:52.693
哇 看那儿

00:34:53.427 --> 00:34:56.129
好的 这里有2组动画

00:34:56.429 --> 00:34:59.433
一个让树从左到右摆动

00:34:59.800 --> 00:35:02.269
另一个让蘑菇挤压 你懂的

00:35:02.336 --> 00:35:03.837
从大到小

00:35:04.204 --> 00:35:07.541
我们还加入一些随机性让东西
在不同时间旋转

00:35:08.075 --> 00:35:10.911
这就让你的场景非常生动有趣

00:35:11.545 --> 00:35:13.247
好让我们继续探索

00:35:13.680 --> 00:35:16.116
好看看这个
这儿有个人

00:35:16.617 --> 00:35:18.752
好 在横版游戏中
说“你好”的最佳的方式是？

00:35:18.819 --> 00:35:20.254
我觉得跳到它们上 是吗？

00:35:21.522 --> 00:35:22.389
就这么走吧

00:35:23.190 --> 00:35:25.259
我做的是 当跳到这个人上时

00:35:25.325 --> 00:35:27.327
碰撞身体和物理身体

00:35:27.628 --> 00:35:30.364
我就运行SKAction让它挤压
你知道的

00:35:30.964 --> 00:35:32.366
好的 非常棒

00:35:33.600 --> 00:35:34.935
让我们回到幻灯片

00:35:39.006 --> 00:35:40.974
所以弯曲变形非常强大

00:35:41.041 --> 00:35:43.810
给游戏中带来广阔的可能性

00:35:43.877 --> 00:35:46.280
所以我非常希望你能用它们
并且喜欢用它们

00:35:47.214 --> 00:35:50.817
接下来讲讲自定义着色的
每个节点的特性

00:35:53.086 --> 00:35:55.455
着色器很棒
我非常喜欢

00:35:56.056 --> 00:36:00.294
有个最佳办法给你的游戏
做精确数码外形

00:36:00.994 --> 00:36:03.830
在SpriteKit
我们开始就支持自定义着色器

00:36:03.897 --> 00:36:07.167
用SKShader类
它基本上是个片段着色器

00:36:07.234 --> 00:36:08.869
用在节点上

00:36:10.370 --> 00:36:13.740
它自带一些内置符号 比如时间

00:36:13.807 --> 00:36:16.210
材质 材质坐标 还有很多

00:36:16.844 --> 00:36:21.481
如果有什么特别需求 你也可以在
SKUniform上特定

00:36:21.548 --> 00:36:24.251
给你特殊的变量

00:36:25.285 --> 00:36:27.855
好 要不我们用着色器打包游戏怎么样

00:36:27.921 --> 00:36:29.523
好 我真的很喜欢横版游戏

00:36:29.590 --> 00:36:32.359
要不来一些横版游戏
好就这样 挺好的

00:36:32.793 --> 00:36:37.297
好 我想要一些可爱的
要不然来一只...兔子

00:36:37.364 --> 00:36:40.300
好的 太棒了
我很喜欢这家伙 它很可爱是不是

00:36:40.767 --> 00:36:43.737
你猜怎么着 我准备给这游戏
取名暗黑兔子

00:36:43.937 --> 00:36:48.108
让我们放些坏蛋和长钉和危险
像这样

00:36:48.175 --> 00:36:49.376
好 这样好些

00:36:50.210 --> 00:36:52.646
不幸的是我们的兔子要被撞到好几次

00:36:53.313 --> 00:36:55.549
因为我不想让我的游戏变太难

00:36:55.616 --> 00:36:58.652
我要有一个帮助系统和健康条
像这样

00:36:59.119 --> 00:37:01.688
猜怎么着
健康条会是着色器

00:37:03.090 --> 00:37:04.958
你猜到它会出现了对吧？好的

00:37:05.592 --> 00:37:09.796
所以 在SpriteKit怎样
做一个血条呢？

00:37:10.097 --> 00:37:12.466
为血条加一个Sprite

00:37:12.733 --> 00:37:16.570
用着色器控制视觉效果
比如闪烁的样式 颜色

00:37:16.937 --> 00:37:18.038
和填充度

00:37:18.105 --> 00:37:21.909
这里兔子只有一半生命了
所以只填充一半

00:37:22.509 --> 00:37:25.646
控制这些视效
我有个一致值叫health

00:37:25.913 --> 00:37:27.781
它会是个浮动值

00:37:27.848 --> 00:37:31.385
从1满血到0几乎丧命

00:37:33.453 --> 00:37:35.289
好 但因为游戏往往更有趣

00:37:35.355 --> 00:37:37.925
当你有多个玩家时
放些家伙在这儿

00:37:37.991 --> 00:37:39.493
可以有最多三个玩家

00:37:39.726 --> 00:37:41.094
这意味着任何时候

00:37:41.161 --> 00:37:44.131
可以有一些满血的 一些半条命的

00:37:44.198 --> 00:37:46.433
和一些几乎没命的

00:37:47.301 --> 00:37:49.603
好 SpriteKit比较简单

00:37:49.670 --> 00:37:52.372
我有Sprite 着色器 一致值

00:37:52.873 --> 00:37:54.875
但现在怎样把它

00:37:54.942 --> 00:37:56.310
变成多玩家呢？

00:37:56.710 --> 00:37:58.145
好我必须做这个

00:37:59.012 --> 00:38:02.382
我必须赋值着色器
但这完全没道理是不是？

00:38:02.449 --> 00:38:04.484
为什么必须做这个？
这太糟了

00:38:04.885 --> 00:38:07.354
这很糟因为
这是同一个着色器啊是不是？

00:38:07.421 --> 00:38:09.156
这会打破批处理机制的

00:38:09.223 --> 00:38:10.457
意味着调用多次

00:38:11.058 --> 00:38:12.259
这太复杂了是不是？

00:38:12.326 --> 00:38:14.027
好 如果你要用别的办法做到这个

00:38:14.728 --> 00:38:19.399
我只要一个着色器
为Sprite间共用

00:38:20.167 --> 00:38:22.970
而且 从今年开始
你只要...

00:38:25.205 --> 00:38:26.306
使用特性

00:38:27.007 --> 00:38:29.676
用自定义特性
你只要创建一个特性

00:38:29.743 --> 00:38:32.846
把它依附于着色器
然后直接设置值

00:38:32.913 --> 00:38:34.081
在节点本身上

00:38:34.314 --> 00:38:36.717
这里我有个自定义特性名健康值

00:38:37.317 --> 00:38:39.686
我在Sprite上设置健康值

00:38:39.887 --> 00:38:40.787
非常简单

00:38:42.523 --> 00:38:44.124
Swift里看上去是这样的

00:38:44.191 --> 00:38:46.727
用SKAttribute类创建特性

00:38:46.894 --> 00:38:49.763
给它名字 这里是健康值
类型 浮点数

00:38:50.430 --> 00:38:51.765
依附于着色器

00:38:52.032 --> 00:38:54.234
因为我的着色器只有一个特性

00:38:54.301 --> 00:38:55.903
我给它一列的单一特性

00:38:56.403 --> 00:38:59.139
最后直接设置Sprite的值

00:38:59.439 --> 00:39:03.544
这里玩家一只剩下0.2％生命

00:39:03.610 --> 00:39:07.714
所以我在给健康值特性设置值

00:39:08.749 --> 00:39:10.350
所以这非常简单方便

00:39:10.417 --> 00:39:13.353
若你在处理每个节点的自定义和着色器

00:39:14.888 --> 00:39:15.756
好了

00:39:16.523 --> 00:39:19.526
现在讲讲特定于平台的内容

00:39:19.593 --> 00:39:22.362
第一个Apple TV上的焦点交互

00:39:23.964 --> 00:39:26.934
对于已经给Apple TV
做过应用的人来说

00:39:27.000 --> 00:39:29.102
你们已经明白焦点交互是什么了

00:39:29.169 --> 00:39:32.105
但对于没有做过的
让我回顾去年发生了什么

00:39:32.940 --> 00:39:36.176
去年我们介绍新Apple TV

00:39:36.710 --> 00:39:38.779
tvOS和些新的用户界面

00:39:38.846 --> 00:39:41.181
还有Siri Remote和
其触摸板

00:39:42.149 --> 00:39:44.685
最主要不同之一在iPhone和

00:39:44.751 --> 00:39:46.887
Apple TV之间是交互方式

00:39:47.621 --> 00:39:49.890
在iPhone上 用户可以直接交互

00:39:49.957 --> 00:39:51.592
通过在手机上用触摸屏幕

00:39:52.159 --> 00:39:53.627
而在Apple TV上

00:39:54.094 --> 00:39:58.432
用户永远有遥控器在手介于
他和界面之间

00:39:58.866 --> 00:40:01.869
我们称这种交互为焦点交互模型

00:40:02.369 --> 00:40:05.239
让我展示当我移动光标时会发生什么

00:40:05.305 --> 00:40:08.742
在Apple TV主菜单上集中

00:40:16.083 --> 00:40:18.919
像你看到的 一次只能集中一个元素

00:40:18.986 --> 00:40:21.655
而且滚动调试成自适应

00:40:21.922 --> 00:40:23.924
对指尖反应很好

00:40:24.925 --> 00:40:27.094
事实上这非常重要

00:40:27.160 --> 00:40:29.129
很重要的是在构建系统

00:40:29.196 --> 00:40:31.865
和框架时在脑内用焦点交互

00:40:32.232 --> 00:40:35.002
意味着如果正好要用UIKit做应用

00:40:35.302 --> 00:40:38.071
不用重建焦点交互模型了

00:40:38.505 --> 00:40:40.841
你只要摊开视图

00:40:41.074 --> 00:40:43.277
说哪些是可聚焦的 就好了

00:40:44.545 --> 00:40:45.679
很易用

00:40:45.746 --> 00:40:48.382
提供了一致的用户体验 不管你在

00:40:48.448 --> 00:40:51.151
Apple TV主菜单还是在应用内

00:40:52.052 --> 00:40:54.988
加分的是
我们还支持Siri Remote

00:40:55.055 --> 00:40:58.225
游戏控制器和很多Bluetooth
控制器和很多很多其他的

00:40:59.026 --> 00:41:01.428
若你想了解更多Apple TV上
的焦点交互

00:41:01.495 --> 00:41:02.763
这周有个演讲

00:41:02.829 --> 00:41:04.665
你会在网上发现很多资源

00:41:05.999 --> 00:41:07.401
好 那么大新闻是

00:41:07.467 --> 00:41:10.137
SpriteKit支持焦点交互

00:41:10.704 --> 00:41:12.372
是 这很棒
是的 谢谢

00:41:16.343 --> 00:41:17.377
这很棒

00:41:17.444 --> 00:41:20.447
对于游戏中任何用户界面
比如游戏菜单

00:41:20.814 --> 00:41:23.183
或者子建造工具在游戏中 用聚焦

00:41:23.283 --> 00:41:26.753
比如象棋游戏
或者很多其他的

00:41:28.322 --> 00:41:31.792
好事是它还简单了很多

00:41:32.359 --> 00:41:33.794
这里看到的DemoBot

00:41:33.861 --> 00:41:35.596
去年一段示例代码

00:41:35.963 --> 00:41:38.732
以前给iOS和macOS用

00:41:38.799 --> 00:41:42.636
我们做了个给tvOS
感觉好多了

00:41:42.703 --> 00:41:45.906
移除那些用作交互和定位的代码后

00:41:45.973 --> 00:41:47.674
感觉干净多了 简单多了

00:41:48.642 --> 00:41:50.744
说到DemoBot 看看怎样

00:41:50.811 --> 00:41:53.180
创建这个菜单 用SpriteKit

00:41:53.247 --> 00:41:54.448
和焦点交互

00:41:56.216 --> 00:41:57.417
第一件事你要知道的是

00:41:57.484 --> 00:42:00.787
UIKit引入新协议
叫做UIFocusItem

00:42:00.854 --> 00:42:02.990
遵照UIFocusEnvironment

00:42:03.190 --> 00:42:06.360
它延伸焦点系统到没有视图的条目

00:42:06.927 --> 00:42:07.995
像你猜到的

00:42:08.061 --> 00:42:10.964
现在SKNode也遵照了

00:42:12.065 --> 00:42:15.435
第一件事要做的是做一个子类

00:42:15.502 --> 00:42:18.205
这里对于菜单元素 要用一些长方形

00:42:18.272 --> 00:42:19.806
我要用SKSpriteNode

00:42:19.873 --> 00:42:21.475
第一 做个子类

00:42:21.875 --> 00:42:25.379
第二 重写canBecomeFocused方法

00:42:25.445 --> 00:42:27.314
返回真 这样节点就变成可聚焦了

00:42:29.516 --> 00:42:32.753
接下来 获取节点到聚焦系统

00:42:32.819 --> 00:42:36.390
要做这个 只需设置
isUserInteractionEnabled为真

00:42:37.558 --> 00:42:38.759
最后一件事

00:42:39.026 --> 00:42:41.728
重写didUpdateFocus（in context:函数

00:42:41.795 --> 00:42:44.231
这会给你在焦点更新时给你更新

00:42:44.298 --> 00:42:45.866
所以 只需要重写这些在视图

00:42:45.933 --> 00:42:48.869
场景和任何在应用中说得通该改的节点

00:42:49.469 --> 00:42:52.606
所以这里上下文对象给我
下一个焦点条目

00:42:52.673 --> 00:42:55.342
前一个焦点条目
这个情况下我要找

00:42:55.409 --> 00:42:58.478
一个菜单元素
如果按这个

00:42:58.545 --> 00:43:00.047
就要运行些SKAction

00:43:01.181 --> 00:43:02.716
这就是事件看上去怎样的

00:43:02.783 --> 00:43:05.419
如果我玩完游戏
会出现这个菜单

00:43:05.485 --> 00:43:07.187
我只要用Siri Remote

00:43:07.521 --> 00:43:10.224
滚动下来
或者用游戏遥控器也一样可以用

00:43:10.290 --> 00:43:13.861
我和在Apple TV主菜单时
有相同使用感受

00:43:14.261 --> 00:43:16.330
再说一次 非常简单 非常强大

00:43:16.396 --> 00:43:18.298
非常推荐你用这个

00:43:20.367 --> 00:43:22.369
好的 一件大事

00:43:22.970 --> 00:43:24.438
Apple Watch上的
SpriteKit

00:43:24.505 --> 00:43:26.940
如你所见 给watchOS 3.0

00:43:27.007 --> 00:43:29.309
我们为Apple Watch
带来一些框架

00:43:30.010 --> 00:43:31.812
是的 SpriteKit可用

00:43:32.279 --> 00:43:35.249
这意味着现在你能做些很多交互的应用

00:43:35.315 --> 00:43:38.185
用这个高性能2D图像平台

00:43:38.485 --> 00:43:40.420
当然我们带了所有你爱的东西

00:43:40.487 --> 00:43:43.357
比如粒子 动画 物理 事件

00:43:43.757 --> 00:43:46.660
所有编辑器都兼容
所以你能使用场景编辑器.

00:43:46.727 --> 00:43:48.195
你能使用粒子编辑器

00:43:48.762 --> 00:43:51.231
有所有的编辑工具 比如新的性能表

00:43:51.298 --> 00:43:52.533
Ross刚刚讲的

00:43:53.033 --> 00:43:54.368
所有这些都能工作

00:43:55.402 --> 00:43:58.172
所以一个典型的SpriteKit
游戏看上去这样

00:43:58.505 --> 00:44:02.643
有一个SKView
包含SKScene

00:44:03.243 --> 00:44:05.179
SKScene自己包含多个节点

00:44:06.246 --> 00:44:09.082
比如SKSprite节点
SKShapeNode各种

00:44:10.184 --> 00:44:13.420
然而Apple Watch上
没有视图指示

00:44:13.487 --> 00:44:16.690
你通过WatchKit界面展示内容

00:44:16.757 --> 00:44:18.992
这就是主要区别

00:44:19.326 --> 00:44:20.994
替代使用SKView

00:44:21.061 --> 00:44:24.498
我将使用WKInterfaceSKScene

00:44:24.898 --> 00:44:26.233
大概就这些

00:44:27.034 --> 00:44:30.504
好看看我们怎样从iOS上现存游戏

00:44:30.737 --> 00:44:33.373
到让它支持watchOS

00:44:34.141 --> 00:44:37.077
这里有些代码
一些iOS上游戏的示例代码

00:44:37.344 --> 00:44:38.879
好 非常典型 有视图

00:44:38.946 --> 00:44:41.148
我要设置场景和各种

00:44:41.381 --> 00:44:42.216
好的

00:44:42.282 --> 00:44:46.486
我现在要做的是点击文件 新的 目标

00:44:47.621 --> 00:44:48.822
选择要的模板

00:44:48.889 --> 00:44:53.827
这里我用了游戏应用模板给我的目标

00:44:54.261 --> 00:44:55.262
点击 下一个

00:44:55.429 --> 00:44:58.165
给它最棒的名字 我要命名它
为Apple Watch Game

00:44:59.399 --> 00:45:00.634
再点击 下一个

00:45:00.968 --> 00:45:02.936
就完了
不 真的 就完了

00:45:03.504 --> 00:45:05.205
Xcode会创建所有你需文件

00:45:05.272 --> 00:45:09.176
比如Storyboard
和界面控制器

00:45:09.643 --> 00:45:11.178
若你看storyboard

00:45:11.245 --> 00:45:13.280
我们已经接通了一切

00:45:13.680 --> 00:45:18.752
所以 这个已经连接到了接口
正如你在顶端看到的

00:45:19.486 --> 00:45:20.621
你准备好了

00:45:20.687 --> 00:45:22.890
有WKInterfaceScene

00:45:23.390 --> 00:45:25.792
还有和之前一样的东西

00:45:25.859 --> 00:45:27.060
所以 非常简单

00:45:29.463 --> 00:45:33.667
好了 解决些
Apple Watch上的兼容问题

00:45:34.067 --> 00:45:36.103
Apple Watch上
没有SKAudioNode

00:45:36.170 --> 00:45:40.174
但当然你还可用SKAction中
playSoundFileNamed事件播放声音

00:45:40.908 --> 00:45:42.843
没有SKVideoNode

00:45:43.076 --> 00:45:45.345
但可以用
WKInterfaceMovie

00:45:46.079 --> 00:45:49.616
最后如果要用CI滤镜做特效

00:45:50.017 --> 00:45:52.386
还是可以做 但需用SKShader

00:45:53.954 --> 00:45:58.225
我们对你能用SpriteKit在
Apple Watch上大伸拳脚很激动

00:45:58.292 --> 00:46:00.727
这将让它变得更交互

00:46:00.794 --> 00:46:02.429
在该平台上更多好玩的应用

00:46:05.566 --> 00:46:06.433
好的

00:46:07.501 --> 00:46:08.335
谢谢

00:46:12.539 --> 00:46:14.308
因为我们有了更多平台

00:46:14.374 --> 00:46:17.544
让我讲些SpriteKit上的
最佳实践

00:46:18.545 --> 00:46:20.180
第一个是资源目录

00:46:20.514 --> 00:46:22.916
用资源目录
它很棒

00:46:22.983 --> 00:46:24.484
它和SpriteKit合作无间

00:46:24.551 --> 00:46:26.687
给你的游戏提供了很多酷功能

00:46:26.753 --> 00:46:28.722
来让一切变得简单快捷

00:46:29.156 --> 00:46:31.124
第一个是Sprite Atlas

00:46:31.725 --> 00:46:33.994
在资源目录 你可以做一个材质图谱

00:46:34.061 --> 00:46:37.264
作为给图块地图优化的基础

00:46:37.331 --> 00:46:40.367
在这里有多件材质合成一个大的

00:46:40.701 --> 00:46:43.837
减少绘制调用到最低

00:46:45.072 --> 00:46:47.441
接下来我们支持多种尺寸像

00:46:47.508 --> 00:46:50.677
1x 2x 3x
对多平台很有用

00:46:50.744 --> 00:46:52.846
像是iPad、iPhone、
watchOS

00:46:53.747 --> 00:46:56.183
你不需要做什么限定 比如

00:46:56.250 --> 00:46:57.518
是那个平台还是这个

00:46:57.584 --> 00:47:00.153
不 你只要调用这个材质就完了

00:47:00.220 --> 00:47:01.288
我们完成其他的

00:47:02.556 --> 00:47:05.692
我们支持按需加载资源
这是tvOS的基础

00:47:07.094 --> 00:47:10.297
最后我们做应用程序切片
意味着如果你有资源

00:47:10.364 --> 00:47:13.133
特定于某个平台
我们只会用这个

00:47:13.200 --> 00:47:14.902
给这个捆绑 然后编译它们

00:47:14.968 --> 00:47:17.404
为尽量小的运行时间二进制

00:47:17.771 --> 00:47:22.042
这给你很小的资料夹
和在App Store上很小下载

00:47:23.010 --> 00:47:25.112
所以是的 资源目录很棒 用它吧

00:47:26.880 --> 00:47:29.249
接下来 关于性能和电池生命

00:47:29.850 --> 00:47:34.154
所以 今年SpriteKit
巨大改变是我们不总渲染

00:47:34.521 --> 00:47:37.057
现在 我们只有在场景脏时渲染

00:47:37.224 --> 00:47:39.726
也就是如果发生变化
会发布绘制调用

00:47:39.793 --> 00:47:42.362
但如果没改变
就不会做任何事

00:47:42.763 --> 00:47:46.700
如果你在用任何登记工具
比如性能表

00:47:47.067 --> 00:47:48.702
你会看到指针纹丝不动

00:47:48.769 --> 00:47:49.736
这实际上是件好事

00:47:49.803 --> 00:47:52.339
因为这意味着没有在渲染什么新的

00:47:53.507 --> 00:47:55.175
如果你需要控制画面权重

00:47:55.242 --> 00:47:57.511
有几个办法做到

00:47:58.045 --> 00:48:00.848
第一个是SKView偏好帧速率属性

00:48:01.915 --> 00:48:04.852
任何时候你只要设置画面速率到
你要的就可

00:48:04.918 --> 00:48:06.787
非常方便

00:48:06.854 --> 00:48:10.123
如果是菜单 只需要非常低的帧速率

00:48:10.457 --> 00:48:12.826
当回到游戏 可以调回到60

00:48:12.893 --> 00:48:15.829
或者30帧率根据性能需求

00:48:17.030 --> 00:48:18.665
第二点有点进阶

00:48:18.866 --> 00:48:20.601
是SKViewDelegate协议

00:48:20.667 --> 00:48:23.203
提供你thisShouldRenderAtTime方法

00:48:23.270 --> 00:48:25.405
用游戏的绝对时间

00:48:25.739 --> 00:48:27.708
所以这个方法任何时候可被调用

00:48:27.774 --> 00:48:30.043
你可以根据时间决定是否

00:48:30.110 --> 00:48:31.445
要渲染这个画面

00:48:31.778 --> 00:48:33.514
所以这给你非常细致的控制

00:48:33.580 --> 00:48:34.948
对你的游戏的渲染

00:48:36.550 --> 00:48:38.051
好的 就这些了

00:48:38.485 --> 00:48:41.221
SpriteKit有哪些新特性？
今年有很多

00:48:41.622 --> 00:48:43.891
第一个是场景大纲视图

00:48:43.957 --> 00:48:46.593
让你从Xcode操控场景图像

00:48:47.794 --> 00:48:49.196
GameplayKit集成

00:48:49.263 --> 00:48:53.600
若你已用GameplayKit组件
现在只要用Xcode直接设置节点

00:48:54.701 --> 00:48:57.704
每秒帧数高性能表给你实时分解

00:48:57.771 --> 00:49:00.274
场景的性能
非常 非常有用

00:49:01.575 --> 00:49:04.845
复杂但高性能的图块地图

00:49:06.580 --> 00:49:08.415
弯曲变形给你的游戏带来更多乐趣

00:49:08.482 --> 00:49:11.251
只要用网格栅格点创建复杂动画

00:49:13.287 --> 00:49:15.122
每个节点特性来自定义着色器

00:49:15.189 --> 00:49:19.459
如果你要自定义节点 构建着色器
很方便

00:49:20.460 --> 00:49:24.798
当然还有Apple TV上焦点交互
和Apple Watch上SpriteKit

00:49:24.898 --> 00:49:26.533
是今年的重头戏

00:49:27.968 --> 00:49:29.069
如果想了解更多

00:49:29.136 --> 00:49:31.638
可以到developer.apple.com 网站

00:49:32.506 --> 00:49:34.641
今年有很多关于游戏的演讲

00:49:34.708 --> 00:49:35.976
但大部分已经讲完了

00:49:36.043 --> 00:49:39.179
你还是可以在我早些时候放的网站
上看到它们

00:49:39.980 --> 00:49:42.282
明天可以去“Game Center
新特性”的演讲

00:49:42.349 --> 00:49:44.484
还有Apple Watch上
的游戏技术

00:49:44.551 --> 00:49:47.454
如果你想学到更多关于这些平台和框架

00:49:48.522 --> 00:49:49.389
好了