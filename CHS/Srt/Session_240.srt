00:00:19.319 --> 00:00:23.790
通过主动建议增加应用使用

00:00:28.462 --> 00:00:29.563
大家好

00:00:29.997 --> 00:00:33.901
感谢大家到场
与我们共度周五的下午

00:00:34.268 --> 00:00:38.372
希望你在WWDC度过精彩的一周

00:00:39.406 --> 00:00:42.242
我现在对这次演讲
感到十分兴奋

00:00:42.309 --> 00:00:47.247
因为我们将讨论的东西
我认为是大家都想要的

00:00:48.248 --> 00:00:50.517
从根本讲
大家都在这里

00:00:50.584 --> 00:00:54.221
是因为你们喜欢
打造优质的应用

00:00:54.288 --> 00:00:58.492
而且你可能想有更多的用户
使用那些优质的应用

00:00:59.126 --> 00:01:04.498
好消息是
我们想研究出机会

00:01:04.565 --> 00:01:07.835
让你的应用在恰当的时候
提供给我们的客户

00:01:07.901 --> 00:01:10.270
这样你会得到更多的参与

00:01:11.171 --> 00:01:14.875
我们将在这整场的演讲中讨论

00:01:14.942 --> 00:01:17.978
你可以那么做的不同方法

00:01:19.279 --> 00:01:23.817
现今我们在整个操作系统上
以各种形式推荐应用

00:01:23.884 --> 00:01:25.586
在许多不同地方

00:01:26.386 --> 00:01:29.623
我们的客户可以使用
Siri应用建议

00:01:29.690 --> 00:01:33.727
当他们从主屏幕向左滑动
以及调用搜索的时候

00:01:35.128 --> 00:01:36.897
甚至在输入查询之后

00:01:37.064 --> 00:01:41.401
你可以在其他
第三方应用内部得到结果

00:01:43.670 --> 00:01:48.942
Handoff是我们宣传第三方
应用和你的应用的另一种方式

00:01:49.009 --> 00:01:53.247
随着你从一个设备上开始活动
然后转移到下一个

00:01:53.313 --> 00:01:56.216
我们试着预测
你将要做的事情

00:01:56.283 --> 00:01:59.953
然后在屏幕的左下角
提供那个应用的图标

00:02:01.822 --> 00:02:05.125
在某些情况下
当我们认为你非常想做的

00:02:05.192 --> 00:02:06.894
是播放一种媒体

00:02:06.960 --> 00:02:10.964
我们会将你的应用内容
推荐到设备的锁屏上

00:02:11.198 --> 00:02:15.836
比如在你插入耳机
或者Bluetooth配对

00:02:15.903 --> 00:02:18.472
到你的车或者音响之后

00:02:18.539 --> 00:02:21.875
如果有一款应用是你
在那种情况下经常使用的

00:02:21.942 --> 00:02:23.377
系统会得知

00:02:23.443 --> 00:02:26.413
而且不仅提供那款应用
还有应用的内容

00:02:26.480 --> 00:02:30.017
我们今天将谈谈
如何能够构建精彩的体验

00:02:30.083 --> 00:02:31.218
为那种环境

00:02:33.353 --> 00:02:37.391
在你使用操作系统时
例如阅读新闻文章

00:02:37.558 --> 00:02:39.326
你可以创建提醒

00:02:39.426 --> 00:02:42.462
与你所看的内容
有前后关联

00:02:42.896 --> 00:02:45.065
例如 如果你在读一篇文章

00:02:45.132 --> 00:02:49.269
然后你想再看一眼
或回家再读

00:02:49.336 --> 00:02:52.906
因为你正在观看WWDC展示

00:02:53.373 --> 00:02:54.575
你可以调出Siri

00:02:55.075 --> 00:03:00.914
当你说“提醒我这件事”时
Siri会理解你的意思

00:03:00.981 --> 00:03:04.952
它会有当前
在屏幕显示的前后关联

00:03:05.619 --> 00:03:08.655
这会在任何应用上奏效
只要采用一些API

00:03:08.755 --> 00:03:10.824
今天晚些时候我们会讨论

00:03:10.924 --> 00:03:14.061
大家会对此感到尤为兴奋
因为这意味着

00:03:14.127 --> 00:03:17.331
当客户打开
Reminders应用时

00:03:17.431 --> 00:03:21.235
他们可以瞬间
回到你的内容上

00:03:22.769 --> 00:03:27.908
iOS 10上新出现的是
整个系统上的地点推荐

00:03:27.975 --> 00:03:30.978
当我们认为客户有某种意图

00:03:31.411 --> 00:03:34.181
想去某个地方
或者使用一个地点时

00:03:34.248 --> 00:03:36.083
是他们最近看过的

00:03:36.149 --> 00:03:40.988
我们过会将谈谈
如何让你应用的数据

00:03:41.154 --> 00:03:42.523
在整个系统中流动

00:03:44.958 --> 00:03:47.794
Multitasking
也是另一种界面

00:03:47.961 --> 00:03:52.399
我们会将我们认为客户会
感兴趣的地点推荐给他们

00:03:52.766 --> 00:03:56.803
你可以将你的应用
图标推荐在上面

00:03:56.870 --> 00:04:00.474
在多任务UI
的醒目位置上

00:04:02.276 --> 00:04:06.046
同样是iOS 10中的新功能
就是我们将

00:04:06.146 --> 00:04:13.020
你应用的联系方式推荐到
原生联系人应用的内部

00:04:14.621 --> 00:04:19.660
这里你会注意到在
WhatsApp中发现了一个句柄

00:04:20.093 --> 00:04:23.697
我们过会将谈谈
如果能够让你的应用内容

00:04:23.764 --> 00:04:25.098
进入那个界面

00:04:27.501 --> 00:04:28.335
所以...

00:04:29.002 --> 00:04:34.741
要得知何时推荐
操作系统需要学习

00:04:34.808 --> 00:04:36.977
你的数据和应用

00:04:37.711 --> 00:04:43.183
好消息是
几个简单的API就会将

00:04:43.250 --> 00:04:46.119
更大价值提供给你
比我之前说的要更多

00:04:47.054 --> 00:04:50.224
除了将你的应用在各种时刻推荐

00:04:50.290 --> 00:04:53.961
你还会得到更深的Siri整合
就像我说的

00:04:54.361 --> 00:04:56.597
前后关联提醒那样

00:04:57.865 --> 00:05:01.368
所以今天我们要做的是
谈谈这些API

00:05:01.602 --> 00:05:05.272
并且我们会讲解
如何恰当采用它们

00:05:05.506 --> 00:05:10.143
这样你们都会得到
用户更多的参与

00:05:10.544 --> 00:05:12.646
借助在整个OS上的推荐

00:05:12.946 --> 00:05:17.184
首先我们将谈谈
NSUserActivity和schema.org

00:05:17.484 --> 00:05:22.289
NSUserActivity
这种API相当于操作系统的眼睛

00:05:22.356 --> 00:05:27.928
它帮助我们了解客户当前
在屏幕上所看的内容

00:05:27.995 --> 00:05:31.999
而schema.org在
网页上有相同的作用

00:05:33.467 --> 00:05:35.969
接下来 我们将谈谈
一些新的改进

00:05:36.036 --> 00:05:39.606
和新的API
围绕那些处理地点的应用

00:05:39.773 --> 00:05:42.876
如果你的应用像Yelp
那是一个目录

00:05:43.043 --> 00:05:46.747
提供很多不同地点
或者相反 如果你的应用像Uber

00:05:46.813 --> 00:05:50.083
要接收地点
那这就与你非常相关了

00:05:51.285 --> 00:05:53.720
之后我们会谈谈
构建精彩的体验

00:05:53.787 --> 00:05:55.856
围绕媒体应用建议

00:05:55.923 --> 00:06:00.093
我之前展示了一个例子
是一类内容推荐

00:06:00.160 --> 00:06:03.697
在客户插入耳机之后就会发生

00:06:03.797 --> 00:06:06.099
我们会谈谈如何让你的内容

00:06:06.166 --> 00:06:08.068
在界面最突出位置显示

00:06:08.602 --> 00:06:12.372
之后我们会概述
今天会学到的所有内容

00:06:14.241 --> 00:06:17.778
先从NSUserActivity
和schema.org开始

00:06:17.845 --> 00:06:21.014
我想邀请Sofiane上台
Sofiane？

00:06:27.120 --> 00:06:29.756
谢了 Daniel
大家下午好

00:06:29.923 --> 00:06:33.227
我叫Sofiane 今天我非常
激动地在这里跟大家谈谈

00:06:33.293 --> 00:06:35.963
我们最近在研究的一些功能

00:06:36.964 --> 00:06:39.933
我们刚听过Daniel说过的
在整个系统中

00:06:40.000 --> 00:06:42.669
推荐应用内容的
好方法

00:06:43.103 --> 00:06:47.374
现在我们来谈谈一些API
你能采用它们来实现这一目的

00:06:47.975 --> 00:06:50.244
在整个展示中
我们会谈谈功能

00:06:50.644 --> 00:06:53.247
一些你可能已经熟悉了
像是Handoff

00:06:53.313 --> 00:06:57.384
或者Spotlight搜索还有
一些在iOS 10中推出的新功能

00:06:57.518 --> 00:06:59.520
例如 地点建议

00:07:00.187 --> 00:07:02.322
你在这里看到的所有功能

00:07:02.389 --> 00:07:03.524
都有共同点

00:07:03.957 --> 00:07:07.027
那就是单个API
叫做NSUserActivity

00:07:07.995 --> 00:07:08.996
首先 一些背景知识

00:07:09.897 --> 00:07:13.534
NSUserActivity是iOS 8中推出的
支持Handoff

00:07:13.934 --> 00:07:16.470
这是非常神奇的功能
允许你在一个设备上

00:07:16.570 --> 00:07:20.107
开始一项活动 然后转到
另一个设备上继续你之前的活动

00:07:21.375 --> 00:07:26.380
去年在iOS 9中 我们支持
将内容直接从

00:07:26.446 --> 00:07:29.650
NSUserActivity推荐到
Spotlight搜索结果里

00:07:30.784 --> 00:07:34.588
在iOS 10中我们进一步增强了
NSUserActivities

00:07:34.655 --> 00:07:38.125
它可以捕捉在你应用
内部查看过的地点

00:07:38.192 --> 00:07:40.827
并在整个系统中的
多个位置推荐它们

00:07:40.928 --> 00:07:42.429
甚至在其他应用中

00:07:43.764 --> 00:07:46.934
现在NSUserActivity
还将前后关联信息提供给Siri

00:07:47.034 --> 00:07:50.604
这样Siri能帮助你获取方向
或者呼叫

00:07:50.671 --> 00:07:52.606
你在应用中查看的地点

00:07:53.774 --> 00:07:54.942
同样新出现于iOS 10

00:07:55.542 --> 00:07:58.579
NSUserActivity
允许你的通信应用

00:07:58.645 --> 00:08:00.948
直接从联系人卡片中推荐

00:08:01.048 --> 00:08:02.850
作为替代通信方式

00:08:04.117 --> 00:08:07.654
我知道大家在想什么
“这太酷了” 但愿吧

00:08:08.455 --> 00:08:10.390
“但工作原理是什么？”

00:08:10.824 --> 00:08:12.793
我来告诉大家
这是非常简单明了的

00:08:12.860 --> 00:08:16.263
我们有很多精彩内容要说
所以直入主题吧

00:08:17.197 --> 00:08:20.300
我们将谈谈
NSUserActivity和schema.org

00:08:20.701 --> 00:08:24.571
这些API允许你
无缝地与系统整合

00:08:24.738 --> 00:08:28.642
NSUserActivity用于原生应用
而schema.org是用于网页的

00:08:29.243 --> 00:08:30.777
我们首先专注于
NSUserActivity

00:08:32.111 --> 00:08:36.750
NSUserActivity是
轻量级界面 能捕获应用程序的状态

00:08:36.850 --> 00:08:41.288
在用户浏览你应用的过程中
这还可以在之后还原

00:08:41.755 --> 00:08:43.924
所以例如 这里
我们有Yelp应用

00:08:44.358 --> 00:08:47.995
这是一款本地搜索应用
随着用户浏览应用

00:08:48.262 --> 00:08:51.532
创建NSUserActivity
捕获我们需要的信息

00:08:51.598 --> 00:08:53.333
之后重现这个状态

00:08:54.001 --> 00:08:56.703
例如 当我触发餐厅搜索时

00:08:56.770 --> 00:08:59.406
我们遵循创建活动的相同模式

00:08:59.740 --> 00:09:03.477
当我从那个列表中查看结果时

00:09:04.144 --> 00:09:07.447
在这个特定案例中
我们在查看一个地点

00:09:08.048 --> 00:09:11.385
在iOS 10中
NSUserActivity现在

00:09:11.451 --> 00:09:16.023
更加了解特定概念 例如
地点或者通信互动

00:09:16.490 --> 00:09:18.692
我们很快就会讲的
不过之前我想

00:09:18.759 --> 00:09:20.460
仔细看看这个屏幕

00:09:21.695 --> 00:09:24.798
这里我们创建了活动
并用信息来描述它

00:09:24.865 --> 00:09:28.068
来之后重现这个状态
以及已提交的数据

00:09:28.402 --> 00:09:31.138
例如 地点名称或者地址

00:09:31.572 --> 00:09:34.007
之后我们通知系统
这代表了

00:09:34.074 --> 00:09:38.946
当前用户状态 我们决定
它是否会宣传用于Handoff

00:09:39.813 --> 00:09:43.350
在整个系统中
临时可用于地点建议

00:09:43.851 --> 00:09:45.953
或添加到设备索引...

00:09:46.486 --> 00:09:50.357
或添加到设备索引上的Spotlight
这样它会出现在

00:09:50.424 --> 00:09:51.658
Spotlight搜索结果中

00:09:52.860 --> 00:09:54.962
这里有一些相关会议
关于这个话题的

00:09:55.062 --> 00:09:57.764
尤其是采用
NSUserActivities

00:09:57.831 --> 00:09:59.166
用于Handoff和应用搜索

00:09:59.633 --> 00:10:02.669
我推荐大家去看一下
那里的内容十分精彩

00:10:04.104 --> 00:10:05.939
现在我们深入到代码 好吧？

00:10:06.473 --> 00:10:09.142
我将给你展示如何
创建这些活动

00:10:09.743 --> 00:10:12.513
我们在此简化
NSUserActivity的实例

00:10:12.846 --> 00:10:14.548
并提供一个活动类型

00:10:14.748 --> 00:10:16.583
那是你提供的字符串

00:10:16.650 --> 00:10:19.786
这和你在info.plist中
指定的字符串相同

00:10:20.687 --> 00:10:23.357
我们推荐使用
反向DNS样式符号

00:10:23.423 --> 00:10:24.825
保持字符串的特殊性

00:10:26.059 --> 00:10:28.962
接下来 我们的活动需要标题
而且我们使用的标题

00:10:29.029 --> 00:10:31.932
会描述我们在这里看的内容

00:10:32.032 --> 00:10:33.567
这里我们看到了餐厅

00:10:33.634 --> 00:10:35.402
要记住的事情是

00:10:35.536 --> 00:10:37.938
这是你的用户活动的公众形象

00:10:38.005 --> 00:10:39.106
例如 这就是

00:10:39.173 --> 00:10:41.441
其在Spotlight搜索
结果中的样子

00:10:41.542 --> 00:10:45.045
你要确保你使用的标题
有说明性并且有含义

00:10:46.046 --> 00:10:49.383
下面 我们启用Handoff
应用搜索以及公共索引

00:10:49.650 --> 00:10:51.685
因为我们查看的内容是公开的

00:10:52.719 --> 00:10:56.790
之后我们在userInfo
属性上设置一个字典

00:10:56.857 --> 00:10:59.826
捕获我们需要
用来重现状态的信息

00:11:00.027 --> 00:11:01.528
当活动还原时

00:11:01.862 --> 00:11:05.999
那种情况下 我们使用
刚才所查看的地点的唯一ID

00:11:06.400 --> 00:11:09.002
通常
当活动被还原时

00:11:09.069 --> 00:11:11.505
例如 当传递给了另一个设备

00:11:11.672 --> 00:11:16.109
你可以从服务器取回那个ID
然后还原那个地点

00:11:16.243 --> 00:11:17.411
如用户期待那样

00:11:19.179 --> 00:11:22.683
为了全面地描述你的活动
并得出更丰富的搜索结果

00:11:22.850 --> 00:11:24.051
你可以使用这个类

00:11:24.117 --> 00:11:27.754
我们在iOS 9中推出
叫做CSSearchableItemAttributeSet

00:11:28.989 --> 00:11:33.093
它在你的应用和系统之间
提供了共同语言

00:11:33.160 --> 00:11:34.761
来更好地描述你的内容

00:11:36.029 --> 00:11:39.166
如果你的网站映射的内容

00:11:39.333 --> 00:11:41.301
是你在应用内查看的

00:11:41.401 --> 00:11:45.873
可以提供网页URL
这样当你的活动

00:11:45.939 --> 00:11:49.376
例如被传递给一个
未安装有你应用的设备上

00:11:49.576 --> 00:11:53.947
这会顺着那个链接
在Safari中恰当启动

00:11:54.748 --> 00:11:57.851
最后我们在活动上
调用becomeCurrent

00:11:58.018 --> 00:11:59.019
告诉系统

00:11:59.086 --> 00:12:01.221
这代表了当前用户状态

00:12:01.321 --> 00:12:03.590
这是用户在屏幕上看到的东西

00:12:04.892 --> 00:12:07.361
当你的应用
启动后会发生什么？

00:12:07.427 --> 00:12:09.696
例如 当你的活动被还原了

00:12:09.796 --> 00:12:12.266
或者传递给另一个设备

00:12:13.433 --> 00:12:15.836
你的应用程序启动了
这很好

00:12:16.203 --> 00:12:18.739
然后调用
UIApplication委托方法

00:12:18.939 --> 00:12:21.708
叫做continueUserActivity
restorationHandler

00:12:22.576 --> 00:12:25.078
我们首先要做的是
检查活动类型

00:12:25.279 --> 00:12:27.681
然后确保它匹配
我们所预料的那个

00:12:27.881 --> 00:12:30.751
那个案例与我们
之前使用的那个匹配

00:12:31.051 --> 00:12:32.653
之后我们可以使用
用户输入字典

00:12:32.719 --> 00:12:34.188
来开始还原状态

00:12:34.454 --> 00:12:38.125
之前 我们放入了
那个地点的唯一ID

00:12:38.258 --> 00:12:41.562
通常在这里我们
能将其从服务器取回来

00:12:41.662 --> 00:12:44.464
然后还原它
并显示正确的控制器

00:12:44.531 --> 00:12:45.933
如用户所期待那样

00:12:47.167 --> 00:12:48.769
所以使用最少的代码

00:12:49.002 --> 00:12:51.205
我们能够从三大功能中获益

00:12:51.271 --> 00:12:54.541
Handoff Spotlight
搜索及前后关联Siri提醒

00:12:55.943 --> 00:12:58.378
现在我们谈谈下面
列出的其他功能

00:12:59.112 --> 00:13:00.514
不过我先问大家一下

00:13:00.881 --> 00:13:03.450
你是否遇到这样情况
你肚子饿了

00:13:03.517 --> 00:13:05.986
想找到好的餐厅就餐？

00:13:06.386 --> 00:13:08.956
所以你从Yelp开始
然后找到完美的地点

00:13:09.489 --> 00:13:11.825
之后你要跟朋友发消息
让他们在那里见你

00:13:12.059 --> 00:13:15.796
所以你切换到消息 开始输入
“伙计们 我找到地儿了”

00:13:15.863 --> 00:13:18.398
不过你发现
你没有那个地方的地址

00:13:18.465 --> 00:13:19.867
所以你切换到Yelp

00:13:20.100 --> 00:13:22.569
你复制地址
之后切换回消息

00:13:22.636 --> 00:13:25.472
粘贴进入
之后你终于完成了

00:13:26.139 --> 00:13:29.376
然而并不是 因为你还
需要在某个时刻到达那里

00:13:29.443 --> 00:13:31.078
你切换出地图

00:13:31.345 --> 00:13:33.213
这可能来来回回很多次

00:13:33.280 --> 00:13:35.716
你懂我的意思
非常不好的体验

00:13:38.886 --> 00:13:42.289
所以在iOS 10 我们尝试
将这个体验变得更加容易

00:13:43.223 --> 00:13:44.658
你的起点还是一样

00:13:44.725 --> 00:13:47.895
你在应用中查看一个地点
比如说一家餐厅

00:13:48.395 --> 00:13:50.430
通过采用
NSUserActivity

00:13:50.764 --> 00:13:52.999
你的应用可以将那个相同地点

00:13:53.066 --> 00:13:55.469
推荐到整个系统上的
许多不同位置

00:13:56.003 --> 00:14:00.507
当你从应用中切换走
多任务UI会使其非常简单

00:14:00.574 --> 00:14:03.510
并在底部提供
这个精致的主动建议

00:14:03.777 --> 00:14:06.947
使用你最喜爱的
路径规划应用来提供方向

00:14:07.214 --> 00:14:08.982
到你刚才查看的地点

00:14:09.683 --> 00:14:11.952
如果你进入Messages
不需要来回操作

00:14:12.252 --> 00:14:15.055
你可以开始写
像是“见面地点是...”

00:14:15.322 --> 00:14:18.792
然后QuickType UI
会自动将那个位置

00:14:18.859 --> 00:14:22.095
直接推荐到QuickType
来自你刚才提供的内容

00:14:23.297 --> 00:14:24.364
在Maps上亦然

00:14:24.464 --> 00:14:27.901
Maps在Maps应用中
直接推荐这些地点

00:14:28.101 --> 00:14:29.069
不仅是在Maps应用中

00:14:29.136 --> 00:14:31.505
还在新的Today View
地图小部件中

00:14:31.672 --> 00:14:34.508
以及CarPlay中
这是我最喜欢的功能

00:14:34.575 --> 00:14:35.409
想象一下

00:14:35.475 --> 00:14:38.312
查看应用 进入车中
点击屏幕

00:14:38.512 --> 00:14:40.581
就好了 完成了
你可以出发了

00:14:42.449 --> 00:14:45.252
这些地点甚至可以
推荐到其他应用中

00:14:45.319 --> 00:14:49.790
所以我们在这里看的是
由Yelp提供的一个地点

00:14:49.857 --> 00:14:53.126
通过NSUserActivity
显示在Uber应用内部

00:14:53.360 --> 00:14:56.196
随着用户点入目的地文本域

00:14:58.432 --> 00:15:02.536
这还给Siri提供前后关联
所以你可以查看你的应用

00:15:02.603 --> 00:15:05.672
然后询问Siri来获取方向
或者给

00:15:05.739 --> 00:15:07.307
你查看的地点打电话

00:15:08.141 --> 00:15:12.713
采用NSUserActivity
会得到所有这些功能

00:15:13.680 --> 00:15:16.183
而且所有这些功能都有共同点

00:15:16.950 --> 00:15:18.218
就是它们都表示

00:15:18.352 --> 00:15:21.121
建议最初是源自哪里

00:15:21.421 --> 00:15:22.623
这个案例中是Yelp

00:15:23.590 --> 00:15:26.627
想象一下如果这是你的应用
那不就太好了吗？

00:15:27.528 --> 00:15:28.896
现在这是可能的

00:15:29.329 --> 00:15:33.600
NSUserActivity允许你
这样做 通过捕获在你的

00:15:33.667 --> 00:15:35.335
应用中查看过的地点

00:15:35.569 --> 00:15:37.838
我们推出新的简单API

00:15:38.539 --> 00:15:41.208
在MapKit和CoreSpotlight上
允许你那样做

00:15:41.441 --> 00:15:44.311
并整合到我刚谈过的所有位置

00:15:45.112 --> 00:15:48.348
在代码方面 我们将创建
一个NSUserActivity

00:15:48.415 --> 00:15:50.350
并且重新使用相同的

00:15:50.417 --> 00:15:53.120
我们之前定义的活动
直接添加在上面

00:15:53.187 --> 00:15:55.355
我们不需要创建
单独活动

00:15:55.856 --> 00:15:58.825
对于使用MapKit的应用
其简单程度

00:15:58.892 --> 00:16:02.829
相当于将MKMapItem设置到
这个新的MapItem属性

00:16:02.896 --> 00:16:04.264
定义为NSUserActivity

00:16:05.199 --> 00:16:06.400
这基本上就行了

00:16:08.268 --> 00:16:11.071
这还有很好的附加作用

00:16:11.171 --> 00:16:16.243
自动填充内容属性集
所以你不用...

00:16:16.310 --> 00:16:18.779
所以如果你想采用应用搜索

00:16:18.979 --> 00:16:22.182
你要做的就是指定
你想选择性加入应用搜索

00:16:22.249 --> 00:16:24.284
然后这些网站也会编入索引

00:16:25.485 --> 00:16:28.789
这里还有另一种方式
那就是通过采用应用搜索

00:16:29.189 --> 00:16:31.391
对于那些已经熟悉它的人

00:16:31.458 --> 00:16:35.362
你能使用CSSearchableItemAttributeSet
并描述地点

00:16:35.929 --> 00:16:37.631
我们将它分解一下

00:16:37.798 --> 00:16:40.467
我们首先做的是
设置地点的名称

00:16:40.734 --> 00:16:42.536
这与我们查看的相匹配

00:16:42.769 --> 00:16:45.739
这是我们之前讲的
全部UI所需要的

00:16:46.840 --> 00:16:49.710
接下来 我们指定
地址的文本表示

00:16:49.843 --> 00:16:52.145
这是全部基于文本UI所需要的

00:16:52.212 --> 00:16:53.881
例如像是键盘

00:16:55.382 --> 00:16:57.651
接下来 我们指定
维度和经度

00:16:57.751 --> 00:17:02.155
这是可选的 但这会保证
将你的用户精确地指引到

00:17:02.322 --> 00:17:04.391
你想将他们指引到的位置

00:17:04.525 --> 00:17:06.627
经度和纬度
是最精确的表示

00:17:06.693 --> 00:17:08.962
供你使用
如果你有这个信息的话

00:17:10.230 --> 00:17:14.334
接下来 我们设置电话号码
这允许我们访问Siri

00:17:14.501 --> 00:17:16.936
这样我们可以说
比如“呼叫这个地方”

00:17:17.671 --> 00:17:19.473
最后 我们表明

00:17:19.540 --> 00:17:22.809
这个内容支持
导航和电话呼叫

00:17:23.109 --> 00:17:26.480
这样结果将会
呈现在Spotlight UI中

00:17:27.013 --> 00:17:29.416
在Spotlight搜索结果UI中

00:17:29.550 --> 00:17:33.120
有一个快速行动图标
进行电话呼叫

00:17:33.187 --> 00:17:35.088
或者例如获取方向

00:17:35.956 --> 00:17:38.458
这就是如何得到地点建议的
就是这么简单

00:17:38.525 --> 00:17:42.029
你的应用将会推荐到
所有这些不同地方

00:17:42.596 --> 00:17:46.066
我们认为这会提供
更加饱满的体验

00:17:46.133 --> 00:17:48.435
在你应用的内外都是如此

00:17:49.136 --> 00:17:52.372
你的品牌可以进一步
在整个系统中推荐

00:17:52.539 --> 00:17:54.741
不仅限于你的应用之内

00:17:56.343 --> 00:17:58.178
我们来谈谈联系人交互

00:17:59.613 --> 00:18:03.684
IOS 10 DP
从联系人卡片

00:18:03.750 --> 00:18:04.718
直接整合通信应用

00:18:05.219 --> 00:18:07.788
你在这里看到的是
一个联系人卡片

00:18:07.855 --> 00:18:10.657
这里获知了WhatsApp
的句柄并显示出来

00:18:10.891 --> 00:18:14.428
当我去点击顶部的
快速行动按钮

00:18:14.528 --> 00:18:18.498
来发送消息 我要选择
我想使用的联系方式

00:18:19.199 --> 00:18:23.537
如果我这么做了 这个选择
会被记住并持久保留

00:18:23.637 --> 00:18:25.405
为默认的通信方式

00:18:25.772 --> 00:18:29.610
这样你的应用会在推荐到那里
作为默认的通道

00:18:29.710 --> 00:18:31.712
给那特定的联系人发消息

00:18:33.013 --> 00:18:37.117
这也由NSUserActivity
所支持 还有新的密集框架

00:18:37.284 --> 00:18:40.654
这与为得到深层Siri整合
所使用的框架相同

00:18:41.288 --> 00:18:43.790
本周前几天有两场
关于这个话题的精彩演讲

00:18:43.924 --> 00:18:45.859
我非常推荐大家去看看

00:18:47.761 --> 00:18:50.030
这里显示的是
WhatsApp应用

00:18:50.197 --> 00:18:53.534
在发送文本消息
我们将探讨它的工作原理

00:18:54.401 --> 00:18:56.970
首先我们创建
INInteraction对象

00:18:57.037 --> 00:19:00.440
这是我们在密集API中
定义的新对象

00:19:01.909 --> 00:19:04.077
这包含了关于意图的信息

00:19:04.545 --> 00:19:08.315
例如 这代表用户行动

00:19:08.382 --> 00:19:11.451
比如发送文本消息
或者进行视频通话

00:19:12.286 --> 00:19:15.355
以及其他一些关于
接收方和发送方的信息

00:19:15.422 --> 00:19:17.324
还有创建内容的元数据

00:19:17.391 --> 00:19:20.160
例如像是通信是否成功

00:19:21.061 --> 00:19:24.898
接下来 你在交互上
调用Donate Method

00:19:25.132 --> 00:19:27.501
这样系统会得知这次交互

00:19:27.568 --> 00:19:30.804
并将你的应用直接
在联系人卡片内部推荐

00:19:31.939 --> 00:19:36.176
当用户通过联系人卡片
与你的应用进行交互

00:19:36.343 --> 00:19:37.477
我们也遵循相同的模式

00:19:37.544 --> 00:19:40.848
创建INInteraction
表示用户尝试做的事情

00:19:41.081 --> 00:19:45.385
包在NSUserActivity内
之后你的应用会用它来启动

00:19:46.253 --> 00:19:48.322
我们看看这是如何
转换到代码中的

00:19:48.889 --> 00:19:51.992
首先在这里
我们创建发送方和接收方

00:19:52.226 --> 00:19:54.828
要注意的是
如果你的应用可以访问

00:19:54.895 --> 00:19:56.530
用户的通讯簿

00:19:56.964 --> 00:20:01.869
你可以指定你在这里
使用的联系人标识符

00:20:02.102 --> 00:20:04.972
这样系统能够更好地找出

00:20:05.172 --> 00:20:06.874
需要扩增的正确联系人

00:20:08.542 --> 00:20:09.743
接下来 我们创建意图

00:20:10.143 --> 00:20:11.879
这里我们使用
INSendMessageIntent

00:20:11.945 --> 00:20:13.380
因为我们发送文本消息

00:20:14.281 --> 00:20:16.817
这里你可以使用三种通信意图

00:20:16.884 --> 00:20:19.987
用于发送文本消息
进行音频和视频通话

00:20:21.121 --> 00:20:24.925
要重点注意的是
你还要保证你指定出

00:20:24.992 --> 00:20:27.861
你的应用在info.plist中
能够处理的意图

00:20:28.161 --> 00:20:31.098
这与活动类型相比几乎一样

00:20:31.164 --> 00:20:32.432
我们之前谈过了

00:20:34.134 --> 00:20:35.769
接着提供我们所使用的服务名称

00:20:35.836 --> 00:20:37.037
这里我们在使用WhatsApp

00:20:37.104 --> 00:20:41.074
如果你的应用处理多个协议
那这会特别有用

00:20:41.208 --> 00:20:44.912
例如
如果你有多客户端聊天应用

00:20:46.079 --> 00:20:48.782
比如说与Jabber
和ICQ有关

00:20:49.116 --> 00:20:51.418
你要确保你使用
正确的服务名称

00:20:53.554 --> 00:20:55.255
接下来 我们创建
INInteraction对象

00:20:55.389 --> 00:20:58.559
这会捕获我们之前
创建的所有信息

00:20:58.959 --> 00:21:02.796
以及一些元数据
包括通信的方向性等等

00:21:03.397 --> 00:21:05.232
因为我们在这里
发送文本消息

00:21:05.299 --> 00:21:06.967
我们使用外送方向

00:21:07.734 --> 00:21:11.338
这是唯一支持的
交互捐送方向

00:21:12.306 --> 00:21:14.942
最后 我们将
这个交互捐送给系统

00:21:15.475 --> 00:21:18.779
这样它会...
系统能够

00:21:18.846 --> 00:21:23.250
增强与你通信的联系人

00:21:24.818 --> 00:21:28.355
我说过了
当用户从联系人卡片

00:21:28.422 --> 00:21:30.824
与你的应用交互
我们遵循相同的模式

00:21:31.124 --> 00:21:34.661
并使用相同的UI应用程序
委托方法来启动你的应用

00:21:35.262 --> 00:21:37.331
我们首先在这里做的是
从NSUserActivity

00:21:37.397 --> 00:21:40.968
检查意图和交互

00:21:41.468 --> 00:21:44.438
之后我们可以开始与
预期接收方进行通信

00:21:46.306 --> 00:21:47.975
这就是如何得到
联系人交互

00:21:48.375 --> 00:21:51.144
你的应用可以在
联系人卡片上直接推荐

00:21:51.512 --> 00:21:53.380
这是最自然的通信方式

00:21:54.515 --> 00:21:56.383
成功了
我们讲完了列表中的一切

00:21:56.850 --> 00:21:59.219
但还没完
我们还要讲点别的

00:21:59.686 --> 00:22:02.422
我们来谈谈一些最佳实践
你要牢记在心

00:22:02.489 --> 00:22:04.157
使用NSUserActivity时

00:22:05.025 --> 00:22:08.295
首先就是要懒
对 这才是重点

00:22:09.096 --> 00:22:11.598
假设你在研发
一款邮件客户端

00:22:11.665 --> 00:22:15.369
你想采用Handoff
这样你的用户能够

00:22:15.435 --> 00:22:19.173
先在Mac上面开始写邮件
然后在手机上

00:22:19.239 --> 00:22:22.543
外出时 接着在iPhone上
之前的地方继续写下去

00:22:23.277 --> 00:22:25.179
这里我们做的是
我们有一个方法

00:22:25.412 --> 00:22:28.982
在每次按下键盘上的按键时
就调用这个方法

00:22:29.550 --> 00:22:33.320
而且每次我们都计算
并更新userInfo字典

00:22:34.354 --> 00:22:36.290
这会消耗巨大
并且效率低下

00:22:36.757 --> 00:22:40.060
相反你应该做的是
使用needsSave属性

00:22:40.327 --> 00:22:43.397
告诉系统这个活动是脏的

00:22:43.630 --> 00:22:47.067
这样系统能够在适合时间

00:22:47.134 --> 00:22:50.070
呼叫你来更新你的
userInfo目录

00:22:51.071 --> 00:22:55.008
例如将活动传递到
另一个设备之前

00:22:56.009 --> 00:22:58.879
这里我们是这样做的
我们在实施

00:22:59.046 --> 00:23:01.882
updateUserActivityState
委托方法

00:23:02.049 --> 00:23:05.085
这是我们更新
userInfo字典的机会

00:23:05.719 --> 00:23:09.456
这样我们可以只做一次
而且效率更加的高

00:23:10.891 --> 00:23:13.861
接下来 确定你保留
当前活动的强引用

00:23:14.595 --> 00:23:17.731
我们在这里做的是
减轻NSUserActivity

00:23:18.065 --> 00:23:21.568
在上面做一些东西
调用becomeCurrent

00:23:21.668 --> 00:23:23.403
这很好 不过之后

00:23:23.470 --> 00:23:26.006
我们没有保留强引用
并推出了函数

00:23:26.306 --> 00:23:29.042
因此 活动被释放了
因为走出范围了

00:23:30.611 --> 00:23:32.946
活动释放不会是当前的
因为它不存在

00:23:33.514 --> 00:23:36.216
相反 你应该做的是
保留当前

00:23:36.316 --> 00:23:37.584
活动的强引用

00:23:38.352 --> 00:23:39.887
若这涉及到
UIViewControllers

00:23:39.953 --> 00:23:42.823
或者任何符合
UI响应器的东西

00:23:43.123 --> 00:23:45.492
还可以使用
用户活动定义...

00:23:45.559 --> 00:23:48.395
用户活动属性
定义在UI响应器上

00:23:48.729 --> 00:23:50.230
这有极佳的效果

00:23:50.330 --> 00:23:53.800
让UIKit为你管理
活动的当前性

00:23:54.001 --> 00:23:56.770
你不必调用
becomeCurrent或使其无效

00:23:57.538 --> 00:23:59.506
UIKit会为你做到
当视图控制器

00:23:59.573 --> 00:24:02.142
比如说链接到了视图层级

00:24:03.343 --> 00:24:05.112
接下来
传送少量有效负载

00:24:05.179 --> 00:24:08.649
确保你只保留足够的信息

00:24:08.749 --> 00:24:12.286
在userInfo字典中
来重现状态 仅这些而已

00:24:12.619 --> 00:24:17.891
记住这些用户信息
和活动是通过

00:24:17.991 --> 00:24:21.328
Bluetooth发送的 这就是
为什么要尽可能保持轻量级

00:24:22.696 --> 00:24:26.633
例如 假设你研发的应用
要处理大型照片

00:24:26.867 --> 00:24:28.168
从网络上下载的

00:24:28.635 --> 00:24:31.572
所以我们在这里做的是
下载这些照片

00:24:31.672 --> 00:24:34.708
将其序列化为数据 然后
将它们放入userInfo字典

00:24:35.042 --> 00:24:38.445
这很容易就会达到几MB
效率低下

00:24:39.246 --> 00:24:43.784
相反 你可以做的是
保留独特标识符

00:24:43.884 --> 00:24:48.255
指向你所从事的内容
例如 网页URL

00:24:48.488 --> 00:24:50.757
这样当你还原活动时

00:24:50.824 --> 00:24:54.528
你可以将其从服务器取回
或者通过其他方法获取

00:24:55.629 --> 00:24:57.331
如果你真的要
处理大量有效负载

00:24:57.397 --> 00:24:59.299
你可以使用延续流

00:24:59.366 --> 00:25:01.735
它们专门设计用于该目的

00:25:01.802 --> 00:25:05.138
在开发者资料中
有大量相关的信息

00:25:06.039 --> 00:25:06.907
好了 还有一个

00:25:08.208 --> 00:25:11.645
一定要保持你的活动类型
唯一并且有描述性

00:25:11.912 --> 00:25:13.247
这是为了避免冲突

00:25:13.480 --> 00:25:16.884
但重要的是
它们还要代表当前用户活动

00:25:16.950 --> 00:25:18.452
或者当前用户行动

00:25:19.553 --> 00:25:21.922
所以这里不使用
单个活动类型

00:25:22.022 --> 00:25:23.891
是我用在应用内部各处的

00:25:24.591 --> 00:25:28.462
更好的是使用多个活动类型
来描述应用的不同部分

00:25:28.529 --> 00:25:30.931
例如
一个是当我查看地点

00:25:31.231 --> 00:25:33.133
一个是当我搜索地点

00:25:34.067 --> 00:25:38.172
你会在这里发现
我使用反向DNS样式符号

00:25:38.539 --> 00:25:44.411
这确保了不会与
其他活动类型相冲突

00:25:44.478 --> 00:25:46.813
那些类型可能是在
其他应用内部定义的

00:25:48.048 --> 00:25:49.449
好了 现在该演示了

00:25:49.750 --> 00:25:52.152
将使用Proactive
Toolbox应用

00:25:52.219 --> 00:25:55.656
这是我们在Developer
Library中供大家使用的样例

00:25:55.989 --> 00:26:00.260
我们看看如何采用
NSUserActivity推荐地点

00:26:00.861 --> 00:26:04.298
我们还会简短讲讲
Handoff以及应用搜索

00:26:05.165 --> 00:26:06.099
我们开始吧

00:26:15.475 --> 00:26:21.315
好 我将在此启动Proactive
Toolbox应用

00:26:22.416 --> 00:26:27.454
左边是我运行iOS 10的设备
然后Xcode就在后面

00:26:28.222 --> 00:26:30.190
我先给大家快速
浏览一下这个应用

00:26:30.257 --> 00:26:31.658
让你知道它的作用

00:26:32.426 --> 00:26:34.394
这里我们有披萨店的列表

00:26:34.862 --> 00:26:37.231
这是搜索本地披萨店的应用

00:26:37.698 --> 00:26:40.801
然后使用Core Location
来获取我的当前位置

00:26:40.901 --> 00:26:45.172
以及用MapKit来获取
符合披萨条件的地点

00:26:45.739 --> 00:26:47.841
我来看看这第一个

00:26:48.242 --> 00:26:50.744
我得到更丰富的页面
有更多详细信息

00:26:50.811 --> 00:26:55.949
像是名称 电话号码 地址
网站 以及该地点的地图

00:26:56.884 --> 00:27:01.221
现在我们将研究
如何能实施位置推荐

00:27:02.155 --> 00:27:05.092
这样相同的位置
会推荐到很多不同地方

00:27:05.692 --> 00:27:07.294
不过之前
我们先这么做

00:27:07.361 --> 00:27:09.096
我要计时
怎么样？

00:27:09.563 --> 00:27:10.898
看看这么做要多长时间

00:27:11.665 --> 00:27:13.333
我启动计时器
这就开始

00:27:15.102 --> 00:27:16.904
好了 我现在进入Xcode

00:27:17.104 --> 00:27:20.007
这是我的地点查看控制器
这个控制

00:27:20.073 --> 00:27:23.377
是我用来显示更丰富的结果

00:27:23.443 --> 00:27:25.612
更丰富的披萨店结果

00:27:25.946 --> 00:27:29.950
每当地图项目在我的应用中
更新时 我就会调用这个方法

00:27:30.551 --> 00:27:34.221
我将这个拖放到这里

00:27:34.988 --> 00:27:37.191
我在此创建
NSUserActivity

00:27:37.958 --> 00:27:41.061
如你所见
我在创建活动 提供给它

00:27:41.128 --> 00:27:45.165
活动类型 代表着
我所做的事情的含义

00:27:45.566 --> 00:27:48.302
在这个案例中
我还使用反向DNS样式符号

00:27:48.602 --> 00:27:51.004
这确保我的活动类型是唯一的

00:27:51.905 --> 00:27:55.042
我之前已经在info.plist中
定义了这个活动类型

00:27:56.076 --> 00:27:58.045
接下来我们设置标题和关键词

00:27:58.412 --> 00:28:00.247
我这里还是使用有含义的标题

00:28:00.347 --> 00:28:03.717
因为这将是
用户活动的公开形象

00:28:04.952 --> 00:28:08.322
接下来 我设置Handoff
应用搜索以及公共索引

00:28:08.689 --> 00:28:11.325
因为我们在这里
看的内容是公开的

00:28:11.892 --> 00:28:13.760
更重要的部分是这个

00:28:14.127 --> 00:28:16.797
我在活动内部设置mapItem

00:28:17.564 --> 00:28:21.568
这个是有附加作用的
能为我们

00:28:21.635 --> 00:28:23.070
填充contentAttributeSets

00:28:23.337 --> 00:28:28.208
我在这里就那么做的
我的完成方法是通过表示

00:28:28.308 --> 00:28:31.812
这个内容支持
导航和电话呼叫

00:28:31.945 --> 00:28:35.649
这样它会有正确的图标
出现在Spotlight搜索结果中

00:28:36.884 --> 00:28:40.120
还记得要懒吗？
在这里我就是这样

00:28:40.454 --> 00:28:43.457
设置needsSave为真
以及委托方法

00:28:43.891 --> 00:28:48.195
这样就会调用
userActivity委托

00:28:48.962 --> 00:28:50.898
当我需要更新userInfo字典时

00:28:52.032 --> 00:28:56.170
最后我使用
userActivity属性

00:28:56.236 --> 00:28:58.405
它是由UIViewController内的
UI Responder所定义

00:28:58.605 --> 00:29:01.608
然后设置上活动
这样我能保留强引用

00:29:01.708 --> 00:29:04.344
而且UIKit会替我自动管理它

00:29:05.445 --> 00:29:10.951
接下来 我将实施这个UI...
这个用户活动委托方法

00:29:11.251 --> 00:29:12.619
updateUserActivityState

00:29:13.020 --> 00:29:16.323
在这里我将
更新我的userInfo字典

00:29:16.690 --> 00:29:19.193
通过我在下面
这个方法内定义的内容

00:29:19.259 --> 00:29:22.296
这会返回字典的信息

00:29:22.362 --> 00:29:25.332
相关的信息
我之后要用它们重现这个状态

00:29:26.233 --> 00:29:27.935
我们继续 构建并运行

00:29:33.907 --> 00:29:37.578
好了 这就是相同的地点

00:29:37.678 --> 00:29:39.646
我没有破坏什么东西
没有出现变化

00:29:40.380 --> 00:29:42.983
我将双击Home键

00:29:43.483 --> 00:29:47.788
现在你能看到
这在底部出现了

00:29:47.855 --> 00:29:51.124
这个横幅 来获取到
我刚才所看地点的方向

00:29:51.191 --> 00:29:52.826
非常简单 超级方便

00:29:53.994 --> 00:29:56.129
打开Maps也是一样

00:29:57.965 --> 00:30:01.802
我直接在这里看到相同位置
甚至显示我的应用程序图标

00:30:04.238 --> 00:30:05.372
谢谢

00:30:09.176 --> 00:30:11.178
好了 我们缩放回来

00:30:11.778 --> 00:30:14.114
当我打开Messages
也是一样

00:30:15.382 --> 00:30:18.652
比如说“见面地点是...”

00:30:19.086 --> 00:30:21.588
你看到这里有相同的位置

00:30:21.655 --> 00:30:24.858
直接推荐到
QuickType UI内部

00:30:25.492 --> 00:30:27.494
由我的应用提供
我可以直接点击

00:30:27.661 --> 00:30:30.998
地点的名称和地址
都插入进去了

00:30:35.869 --> 00:30:37.971
而且这还对收到的消息有效

00:30:38.038 --> 00:30:41.441
这里我得到一条文本消息
在问我他们的电话号码是什么

00:30:41.675 --> 00:30:44.611
信息从NSUserActivity
中直接提取了出来

00:30:44.678 --> 00:30:47.281
我可以点击它
然后再插入电话号码

00:30:47.814 --> 00:30:49.216
非常炫酷

00:30:51.752 --> 00:30:53.453
我们看看计时

00:30:53.887 --> 00:30:56.123
3分40秒
这还不错

00:30:56.223 --> 00:30:58.625
所有这些位置推荐功能

00:30:58.825 --> 00:31:01.161
通过单个API
由我的应用提供

00:31:01.662 --> 00:31:05.365
我投机取巧了一点
我有一些示例代码 但你懂我意思了

00:31:05.432 --> 00:31:08.168
这不需要大量的投入

00:31:08.669 --> 00:31:11.939
所以消息 QuickType
Siri 地图 多任务处理

00:31:12.005 --> 00:31:14.107
所有这些
只需一个API

00:31:15.142 --> 00:31:18.178
好了 我们也在
应用搜索上做了些工作

00:31:18.245 --> 00:31:19.746
将该内容编入索引

00:31:19.813 --> 00:31:23.550
我首先回到应用
然后还原其初始状态

00:31:23.617 --> 00:31:25.519
我将搜索披萨

00:31:26.019 --> 00:31:27.120
披萨

00:31:27.788 --> 00:31:30.791
果然
那个位置出现了

00:31:31.592 --> 00:31:35.329
但当我点击它 我的应用
就启动了 但它做得并不正确

00:31:35.395 --> 00:31:39.199
它没有将内容还原成
用户期待的那样

00:31:39.266 --> 00:31:41.568
没有显示披萨店的丰富UI

00:31:41.935 --> 00:31:44.104
我回到我的代码这里

00:31:44.304 --> 00:31:47.941
这是因为我们没实施
UIApplicationDelegate方法

00:31:48.242 --> 00:31:50.043
所以进入我的应用委托

00:31:50.477 --> 00:31:52.412
拖放那部分

00:31:53.680 --> 00:31:55.649
我在这里做的是

00:31:55.749 --> 00:31:59.019
我在实施continue
userActivity restorationHandler

00:31:59.086 --> 00:32:02.089
UIApplicationDelegate
首先检查活动类型

00:32:02.155 --> 00:32:04.625
这是我们刚才使用的那个

00:32:04.858 --> 00:32:08.729
之后调用我在下面定义的方法
这会查看userInfo

00:32:08.795 --> 00:32:11.565
并像用户预期那样还原状态

00:32:11.999 --> 00:32:13.767
我将重新构建并运行

00:32:16.270 --> 00:32:18.205
然后再看一遍

00:32:18.338 --> 00:32:20.607
我们回到Spotlight

00:32:22.042 --> 00:32:23.343
点击结果

00:32:23.510 --> 00:32:26.046
现在我们做对了
还原了内容

00:32:26.146 --> 00:32:27.581
如用户期待那样

00:32:28.081 --> 00:32:32.052
所以这快速浏览了采用
NSUserActivity的方法

00:32:32.119 --> 00:32:34.788
用于位置推荐
应用搜索和Handoff

00:32:34.988 --> 00:32:36.957
好了 我们切换回来

00:32:42.563 --> 00:32:46.066
这个样例可在Developer
Library中获取

00:32:46.200 --> 00:32:48.569
它的功能还要更多

00:32:48.702 --> 00:32:52.139
它帮助你测试与
NSUserActivity的整合

00:32:52.306 --> 00:32:55.309
这是在你工作时
放在身边使用的好工具

00:32:55.375 --> 00:32:57.477
用于这些位置推荐功能

00:32:58.445 --> 00:33:02.916
好了 我们刚才知道了采用
NSUserActivity很容易

00:33:03.050 --> 00:33:06.520
并在系统的许多不同
部分推荐你的内容

00:33:07.287 --> 00:33:09.389
我将谈谈
schema.org如何提供

00:33:09.456 --> 00:33:12.826
一些这样的好处
尤其是位置推荐

00:33:13.927 --> 00:33:17.231
当我设计这些功能
这些位置推荐功能

00:33:17.397 --> 00:33:19.366
我们希望相同的效果
也能再现于

00:33:19.633 --> 00:33:21.768
你在Safari中查看的网站上

00:33:22.703 --> 00:33:23.537
所以为此

00:33:24.204 --> 00:33:26.740
例如
当你查看yelp.com

00:33:26.807 --> 00:33:29.810
这映射了我们之前
看过的相同内容

00:33:29.977 --> 00:33:31.178
在Yelp应用中

00:33:31.612 --> 00:33:33.180
当你从Safari切换走

00:33:33.247 --> 00:33:35.315
你会得到相同的
精致便利的建议

00:33:35.382 --> 00:33:37.351
来获取这个地点的方向

00:33:37.851 --> 00:33:41.922
这因为yelp.com
采用schema.org

00:33:42.022 --> 00:33:44.057
这是我们为此使用的技术

00:33:44.992 --> 00:33:46.293
稍微讲讲背景知识

00:33:46.994 --> 00:33:49.129
schema.org
是开放网页标记标准

00:33:49.196 --> 00:33:52.232
允许你从语义上
给内容加注释

00:33:52.499 --> 00:33:54.468
通过丰富的结构化元数据

00:33:54.968 --> 00:33:59.006
这里有很多架构为
各种概念提供大量的表达

00:33:59.072 --> 00:34:00.908
而且schema.org也是旨在

00:34:01.008 --> 00:34:04.011
为用户提供丰富的搜索体验

00:34:04.077 --> 00:34:07.981
在iOS中 以及
所有主要搜索引擎

00:34:09.783 --> 00:34:12.886
这些架构都是
按照树形结构排列

00:34:12.985 --> 00:34:16.023
例如
更具体的架构 像是餐厅

00:34:16.089 --> 00:34:19.458
是源自更一般的类型
例如本地商业

00:34:20.260 --> 00:34:22.563
我们拿餐厅作为例子

00:34:22.896 --> 00:34:25.732
它是源自多个架构的
因此

00:34:25.799 --> 00:34:28.702
这继承了所有
定义它们的属性

00:34:28.835 --> 00:34:32.505
例如 名称属性
是由事物架构定义的

00:34:32.739 --> 00:34:36.543
在这个案例中
这会捕获餐厅名称

00:34:37.077 --> 00:34:41.081
地址也是一回事
那是在本地商业架构中定义的

00:34:41.215 --> 00:34:43.250
其他更针对于餐厅的事物

00:34:43.317 --> 00:34:45.619
例如是否接受预定

00:34:45.853 --> 00:34:48.589
是直接在餐厅架构内部定义的

00:34:49.456 --> 00:34:51.891
这是schema.org
实际运作的例子

00:34:51.958 --> 00:34:55.128
在左边 我们看到
之前看过的网站

00:34:55.262 --> 00:34:58.599
在右边
是在语义上描述它的内容

00:34:58.699 --> 00:35:01.869
以Safari可以理解的方法

00:35:02.402 --> 00:35:04.037
创建电话号码

00:35:04.137 --> 00:35:07.007
餐厅名称
地址 评级 网站

00:35:07.341 --> 00:35:09.209
等等 能做的可以更多

00:35:09.610 --> 00:35:11.445
我们来看看
一个简单的例子

00:35:11.578 --> 00:35:14.281
这是一个非常简单的
HTML文档

00:35:14.348 --> 00:35:16.550
描述关于餐厅的内容

00:35:16.917 --> 00:35:19.286
我们来看看
这个网页可能的样子

00:35:19.419 --> 00:35:23.290
当加入JSON-LD
schema.org标记

00:35:24.858 --> 00:35:27.928
如你所见 我们没有
改变任何实际的内容

00:35:27.995 --> 00:35:32.533
或者实际的文档结构
我们只是在旁边提供了元数据

00:35:32.966 --> 00:35:36.470
以一种机器能接受的
格式来描述内容

00:35:36.837 --> 00:35:40.507
包括简单的属性
像是电话

00:35:40.841 --> 00:35:44.912
不过还有更复杂的结构化属性
像是地址

00:35:45.045 --> 00:35:48.115
本身就是PostalAddress
类型的另一个架构

00:35:48.415 --> 00:35:52.619
如果你喜欢
你还可以给内容注释

00:35:52.719 --> 00:35:54.888
与微数据内联

00:35:54.988 --> 00:35:56.456
我们就这么做

00:35:56.523 --> 00:35:59.726
我们在改变
初始文档的实际结构

00:35:59.793 --> 00:36:03.330
并使用内联微数据标记
来增强它

00:36:04.398 --> 00:36:07.801
在iOS 10中 Safari提取
这些与位置相关的架构

00:36:08.001 --> 00:36:11.905
在NSUserActivity中
像推荐原生应用那样推荐它们

00:36:12.539 --> 00:36:14.575
这也会给你一些好处

00:36:14.641 --> 00:36:17.311
关于我们之前谈过的
位置推荐

00:36:17.811 --> 00:36:20.814
这些是Safari会
提取的一些架构

00:36:21.148 --> 00:36:25.419
任何带有PostalAddress
GeoCoordinate或电话属性

00:36:25.586 --> 00:36:29.756
而我们之前用的餐厅架构
就是绝佳的例子

00:36:29.990 --> 00:36:31.959
你有所有这些属性

00:36:32.025 --> 00:36:37.698
你可以组合或指定
你当时可用的那些属性

00:36:39.967 --> 00:36:43.203
好了 我们谈了
NSUserActivity和schema.org

00:36:43.704 --> 00:36:47.074
使用NSUserActivity


00:36:47.274 --> 00:36:49.176
将用户在应用内查看的位置

00:36:49.243 --> 00:36:52.513
在整个系统的很多地方中 毫不费力地推荐给他们

00:36:53.480 --> 00:36:55.048
还有通信应用

00:36:55.616 --> 00:36:59.820
当然 还有所有
Handoff和应用搜索的使用案例

00:37:01.288 --> 00:37:04.992
在你网站上使用schema.org
来得到这一些好处

00:37:05.192 --> 00:37:06.560
用于位置建议

00:37:06.660 --> 00:37:08.962
与NSUserActivity
几乎一回事

00:37:09.696 --> 00:37:13.634
现在我们看看你的应用
如何使用这些位置建议

00:37:13.800 --> 00:37:15.335
像我们之前看过的

00:37:15.903 --> 00:37:18.772
这里我们将谈谈
那么做的两种方式

00:37:18.839 --> 00:37:22.209
一个是通过键盘
另一个是针对路线规划应用

00:37:23.210 --> 00:37:24.811
我们从第一个开始

00:37:25.846 --> 00:37:29.783
如果你的应用处理
文本格式的地址

00:37:30.317 --> 00:37:35.355
你可在应用内部受益于位置建议
通过QuickType UI

00:37:36.089 --> 00:37:38.358
现在我们在看Uber应用

00:37:39.293 --> 00:37:42.329
如果你不知道的话
这是一款拼车应用

00:37:42.496 --> 00:37:45.032
当用户进入文本域

00:37:45.098 --> 00:37:47.801
这被注释成位置文本域

00:37:48.168 --> 00:37:52.372
那个情况下 我们从Yelp中
直接将内容推荐到Uber内部

00:37:53.140 --> 00:37:56.376
这包括最近推荐的位置

00:37:56.443 --> 00:38:00.147
由其他应用在NSUserActivities
或schema.org中推荐

00:38:01.014 --> 00:38:03.350
基于你日历上面的未来位置

00:38:04.418 --> 00:38:06.987
可能复制到
粘贴板中的位置

00:38:07.054 --> 00:38:09.823
例如 你收到附带
地址的文本消息

00:38:10.424 --> 00:38:15.095
甚至可能是你最近使用
Siri互动过的地点

00:38:15.462 --> 00:38:17.164
例如 如果你问...

00:38:17.698 --> 00:38:20.501
如果你请求Siri
给你指向附近的餐厅

00:38:20.567 --> 00:38:22.202
之后与那个结果互动

00:38:22.269 --> 00:38:25.906
你就会在那你看到它
作为位置建议的一部分

00:38:27.641 --> 00:38:30.277
我们在UIKit中
推出新的API

00:38:30.344 --> 00:38:32.546
所以你的应用可以告知系统

00:38:32.613 --> 00:38:35.549
文本域所预期的内容类型

00:38:35.949 --> 00:38:39.786
在这个案例中
我们使用的是位置

00:38:40.187 --> 00:38:42.890
基于这个线索
键盘就能够作出

00:38:42.956 --> 00:38:45.425
正确的主动建议

00:38:45.492 --> 00:38:48.629
如果此时在
前后关联中可用的话

00:38:49.530 --> 00:38:53.500
不过没有可用的主动建议

00:38:53.567 --> 00:38:57.404
这还会在自动校正方面
提供更为丰富体验

00:38:57.571 --> 00:39:02.709
因为自动校正现在能知道
应用所预期的内容

00:39:04.845 --> 00:39:08.549
我们在UITextInputTraits中
添加了新属性

00:39:08.615 --> 00:39:12.052
叫做textContentType
允许你指定这个内容

00:39:12.119 --> 00:39:16.790
这里 我们使用UITextField
这符合UITextInputTraits

00:39:16.857 --> 00:39:18.625
因此会得到这个属性

00:39:19.059 --> 00:39:23.497
我们表示这个文本域
预期完整的街道地址

00:39:24.298 --> 00:39:27.467
这里有很多的
文本内容类型供你使用

00:39:27.734 --> 00:39:31.905
范围从描述人群到位置
还有很多其他的

00:39:32.439 --> 00:39:35.509
这个完整列表可在Developer
Library中获取

00:39:35.809 --> 00:39:38.512
不过我们着重仔细看看这两个

00:39:38.712 --> 00:39:43.450
这两个都与位置相关

00:39:43.951 --> 00:39:46.153
不过它们有不同的粒度等级

00:39:46.920 --> 00:39:52.192
你要使用最能表现
你的使用案例的那个

00:39:52.626 --> 00:39:54.628
拥有正确的粒度等级

00:39:54.962 --> 00:39:55.796
例如

00:39:55.863 --> 00:40:00.033
一个导航应用通常会
预期完整的街道地址

00:40:00.100 --> 00:40:03.370
这样能准确地将用户
指引到他们的目的地

00:40:03.837 --> 00:40:09.076
而天气应用可能通常
只需要在乎州和城市

00:40:09.376 --> 00:40:12.546
因为这对天气的
使用案例就足够了

00:40:12.646 --> 00:40:13.780
如你所见

00:40:13.847 --> 00:40:16.283
基于我们指定的
不同内容类型

00:40:16.350 --> 00:40:19.553
我们得到了不同的内容
推荐到了QuickType栏内部

00:40:19.620 --> 00:40:23.624
一个是完整的街道地址
另一个只是加州旧金山

00:40:25.158 --> 00:40:28.028
在键盘中得到
建议就是这么简单

00:40:28.929 --> 00:40:31.665
现在我们看看
路线规划应用如何得益于

00:40:32.099 --> 00:40:35.302
这些底部精美的方向横幅

00:40:36.003 --> 00:40:38.772
如Daniel之前说的
路线规划应用

00:40:39.039 --> 00:40:41.775
第三方路线规划应用
也可以提升到这里

00:40:42.142 --> 00:40:44.978
让用户直接
加速进入你的应用

00:40:45.112 --> 00:40:48.115
当我们认为用户的意图
是获取方向

00:40:49.383 --> 00:40:52.819
我们利用了现有API
叫做MKDirectionsRequest

00:40:53.153 --> 00:40:57.324
这是在iOS 6中推出的
这允许你注册路线规划应用

00:40:57.391 --> 00:40:59.126
然后处理所有的方向请求

00:41:00.027 --> 00:41:02.162
iOS会随着时间学习

00:41:02.262 --> 00:41:06.166
基于各种因素判断用户
最爱的路线规划应用是什么

00:41:06.266 --> 00:41:08.068
例如像是参与

00:41:08.335 --> 00:41:11.672
然后在合适的时候
在多任务UI中建议

00:41:14.441 --> 00:41:18.512
为此你要确保
你将应用配置成

00:41:18.579 --> 00:41:19.880
能接收方向请求

00:41:19.947 --> 00:41:23.617
这很容易就能在Xcode中
通过功能面板完成

00:41:24.184 --> 00:41:27.588
在iOS 10中 我们推出了
一种新的路线规划模式

00:41:27.654 --> 00:41:29.656
专门用于拼车应用

00:41:30.591 --> 00:41:34.294
接下来 你要声明与你应用
真正相关的地图区域

00:41:34.361 --> 00:41:37.164
比如说如果
你的应用是当地的地铁应用

00:41:37.231 --> 00:41:41.201
你可以指定你的应用
只在这个区域相关

00:41:42.302 --> 00:41:43.704
最后你要确保

00:41:43.804 --> 00:41:46.273
你会采取合适的行动
当你的应用启动在

00:41:46.340 --> 00:41:47.774
MKDirectionsRequest内部

00:41:48.008 --> 00:41:50.777
那就是你的应用
应该自动开始定向

00:41:50.978 --> 00:41:53.547
或者填充UI 使得用户能

00:41:53.714 --> 00:41:55.849
容易地获取方向

00:41:56.617 --> 00:42:01.121
在代码方面 这个例子示范了
如何采用MKDirectionsRequest

00:42:02.222 --> 00:42:04.458
MKDirectionsRequest
使用一个URL方案

00:42:04.758 --> 00:42:08.161
当你的应用启动后
会附带有一个URL

00:42:08.362 --> 00:42:09.730
我们首先做的是检查

00:42:09.830 --> 00:42:13.300
我们得到的URL实际上是
有效的MKDirectionsRequest

00:42:13.901 --> 00:42:18.539
MKDirectionsRequest为此
提供isDirectionsRequestURL

00:42:19.573 --> 00:42:22.843
接下来我们减轻
MKDirectionsRequest的一个实例

00:42:23.043 --> 00:42:26.647
来自URL的内容
这包含的信息是关于

00:42:26.813 --> 00:42:30.551
出发地和用户想到达的目的地

00:42:31.618 --> 00:42:34.288
在iOS 10中 接下来
这个功能十分重要

00:42:34.354 --> 00:42:38.158
尤其对于那些已经采用了
MKDirectionsRequest的人

00:42:38.659 --> 00:42:41.028
那就是现在你可以
使用没有地理坐标的

00:42:41.094 --> 00:42:43.163
地图项目进行启动

00:42:43.764 --> 00:42:45.399
在这个案例中
你要将你得到的

00:42:45.465 --> 00:42:49.136
地址字典进行地理编码
使用CLGeocoders

00:42:49.436 --> 00:42:53.674
geocodeAddressDictionary
这会返给你一个地点标记

00:42:53.740 --> 00:42:57.544
附带正确的纬度和经度
这会之后帮助你开始定向

00:42:57.644 --> 00:43:00.414
到预定的位置
这就差不多好了

00:43:01.114 --> 00:43:03.116
这就是如何推荐
你的路线规划应用

00:43:03.383 --> 00:43:05.853
在多任务UI的醒目位置上

00:43:07.454 --> 00:43:09.623
至此 我想交给Daniel

00:43:09.723 --> 00:43:12.259
来谈谈媒体应用的建议
谢谢大家

00:43:13.493 --> 00:43:15.662
这太棒了
好了

00:43:16.830 --> 00:43:21.101
现在我们谈谈
媒体应用建议

00:43:21.635 --> 00:43:25.439
如果你的应用
处理任何形式的媒体

00:43:25.506 --> 00:43:30.611
像是播客应用
或类似Spotify的应用

00:43:30.978 --> 00:43:35.315
或甚至播放视频的应用
那你就要认真听听了

00:43:36.984 --> 00:43:41.154
现今的iOS会推荐
我们认为你会使用的应用

00:43:41.221 --> 00:43:42.890
基于你的行为

00:43:43.123 --> 00:43:45.659
我们在大量不同的UI中
推荐那个应用

00:43:45.726 --> 00:43:46.960
我之前展示过了

00:43:47.995 --> 00:43:51.732
我们特别地
在Spotlight中提供哪些建议

00:43:51.899 --> 00:43:53.634
还有Today View

00:43:54.902 --> 00:44:00.908
如果建议的动作
跟随着特定的触发

00:44:00.974 --> 00:44:04.778
例如 当你插入耳机
或者Bluetooth配对

00:44:05.379 --> 00:44:10.651
或甚至到达某个地方
而且是媒体应用

00:44:10.751 --> 00:44:12.319
我们可以进一步提升它

00:44:13.020 --> 00:44:14.521
我们看看这是什么样的

00:44:14.688 --> 00:44:17.191
这是Spotlight中
推荐的样子

00:44:17.457 --> 00:44:21.428
假如说我总是
或者经常听播客

00:44:21.495 --> 00:44:22.896
在插入耳机之后

00:44:23.463 --> 00:44:27.134
注意 在左边上部
有播客应用建议

00:44:28.468 --> 00:44:32.005
不过在某些情况下
那个推荐

00:44:32.105 --> 00:44:34.741
会提升到锁屏的上面

00:44:35.008 --> 00:44:36.543
所以你看到的是

00:44:36.610 --> 00:44:40.013
我们传统上
用于Handoff的UI

00:44:40.180 --> 00:44:43.383
现在用于推荐一款应用

00:44:43.483 --> 00:44:45.752
是我们认为我可能使用的
因为这遵循

00:44:45.853 --> 00:44:47.187
之前提到的那些触发

00:44:47.821 --> 00:44:50.991
这是非常好的体验

00:44:51.592 --> 00:44:54.595
但又不是那么的好
因为说到底

00:44:55.028 --> 00:44:56.496
你现在必须做的是

00:44:56.563 --> 00:44:58.932
你必须解锁设备

00:44:59.032 --> 00:45:02.169
向右滑动
才能获取我们

00:45:02.236 --> 00:45:04.404
所预测的
你想要消费的内容

00:45:05.672 --> 00:45:07.674
通过非常简单的API

00:45:07.875 --> 00:45:11.712
你可以为用户构建更好的体验

00:45:12.913 --> 00:45:15.482
这是它之前的样子
我刚才给你展示过了

00:45:16.717 --> 00:45:18.318
这是它之后的样子

00:45:20.754 --> 00:45:22.923
我们做到了吧？
这是之前的样子

00:45:24.024 --> 00:45:26.994
这是之后的样子
好太多了

00:45:27.661 --> 00:45:30.831
不仅用户可以
参与到内容中

00:45:31.265 --> 00:45:33.901
而且不用解锁他们的设备

00:45:34.268 --> 00:45:37.838
同时还可以将专辑封面
在突出位置展现给用户

00:45:39.273 --> 00:45:41.408
这在做完后
可能很显而易见

00:45:41.475 --> 00:45:45.779
不过这个特定的界面
还提供了更好的转化

00:45:46.013 --> 00:45:48.015
如果你看实际数字的话

00:45:48.182 --> 00:45:49.683
如果你感兴趣于

00:45:49.750 --> 00:45:52.186
让用户实际去播放你的内容

00:45:52.252 --> 00:45:55.389
你应该是感兴趣的
那这就是属于你的API

00:45:55.489 --> 00:45:56.857
我们怎么做？

00:45:57.224 --> 00:45:59.826
我会一步步地讲
非常易于采用的

00:46:01.128 --> 00:46:05.966
这都可以归结于一个类
叫做MPPlayableContentManager

00:46:07.568 --> 00:46:08.936
想象一下
你有

00:46:11.071 --> 00:46:14.274
一个有着不同属性的字典

00:46:14.341 --> 00:46:16.643
有标题 艺术家 专辑

00:46:17.377 --> 00:46:20.180
你想做的是将其提升到

00:46:20.247 --> 00:46:23.684
设备的锁屏上
当系统认为

00:46:23.917 --> 00:46:25.919
客户可能会参与其中

00:46:27.054 --> 00:46:28.655
你首先要做的就是

00:46:28.755 --> 00:46:31.925
导入Media Player
并声明你自己

00:46:32.059 --> 00:46:36.129
与那个类别中的委托一致

00:46:36.330 --> 00:46:41.668
然后你要实施一个方法
叫做playableContentManager

00:46:43.270 --> 00:46:44.137
这很简单

00:46:44.204 --> 00:46:47.307
首先 你要抓取媒体项目

00:46:47.574 --> 00:46:49.910
通过你有的任何手段

00:46:49.977 --> 00:46:51.612
很显然你要做好准备

00:46:51.712 --> 00:46:53.981
尤其是如果你要获取远程资源

00:46:54.281 --> 00:46:56.517
以防其失效
那种情况下 你要调用

00:46:56.583 --> 00:46:58.752
在下面看到的那个回调句柄

00:46:59.653 --> 00:47:04.191
因此系统会明白
不一定要给你推荐

00:47:05.325 --> 00:47:08.829
下一步 你要填充
NowPlayingInfo

00:47:09.930 --> 00:47:11.732
在设备的锁屏上

00:47:11.832 --> 00:47:16.036
这是我实施的一个方法
所以给你展示其背后的内容

00:47:16.904 --> 00:47:23.710
首先你要做的是
抓取infoCenter对象

00:47:23.977 --> 00:47:26.813
之后如果你有确实
一张特定的图像

00:47:26.880 --> 00:47:30.784
是这个媒体项目上有的
你可以将它推荐到

00:47:31.018 --> 00:47:32.386
设备的锁屏上

00:47:32.452 --> 00:47:35.022
如果你使用的是默认图像
这就是个机会

00:47:35.088 --> 00:47:37.524
让你的品牌得到提升

00:47:39.092 --> 00:47:41.361
然后你要把你的表示转化成

00:47:41.795 --> 00:47:45.465
nowPlayingInfo表示
最重要的是

00:47:45.933 --> 00:47:49.203
要在infoCenter上
设置nowPlayingInfo

00:47:50.003 --> 00:47:53.407
在完成之前所展示的回调之前

00:47:53.473 --> 00:47:57.945
所以你要在方法结束之前完成

00:47:58.478 --> 00:48:01.982
如果出于某种原因你不喜欢

00:48:02.049 --> 00:48:05.752
或你的应用在准备
回放时出现错误

00:48:05.819 --> 00:48:07.588
如果手机处于飞行模式

00:48:07.788 --> 00:48:10.490
这是另一个机会
让你提早去除错误

00:48:10.624 --> 00:48:14.494
注意 实际上你不想
在此时开始回放

00:48:14.962 --> 00:48:16.597
你插入耳机 你要等待

00:48:16.697 --> 00:48:19.333
客户点击播放按钮

00:48:19.533 --> 00:48:22.736
不过你要做好准备
加载到流文件中等等

00:48:24.271 --> 00:48:25.105
就是这样

00:48:26.273 --> 00:48:31.144
再说一遍 现今的iOS
根据你的行为推荐应用

00:48:31.545 --> 00:48:35.516
如果遵循特定的触发
并且它们是媒体应用

00:48:35.749 --> 00:48:37.484
我们把它们提升到锁屏上

00:48:38.185 --> 00:48:41.121
通过我刚才展示的
非常简单的采用

00:48:41.221 --> 00:48:44.892
你可以得到更好的体验
并且有机会

00:48:44.958 --> 00:48:46.927
去推广你的品牌

00:48:47.027 --> 00:48:49.196
以及你有的
那么华丽的专辑封面

00:48:51.365 --> 00:48:56.136
好了 总结一下
我们今天所讲的内容

00:48:58.105 --> 00:49:02.776
我们谈了几个简单的API
有助于将你的应用深度整合到

00:49:02.876 --> 00:49:04.511
操作系统中

00:49:04.912 --> 00:49:09.449
我们谈了NSUserActivity
这相当于操作系统的眼睛

00:49:09.683 --> 00:49:15.088
这帮助我们从语义上
了解客户当前所看的内容

00:49:16.423 --> 00:49:20.327
然后我们谈了schema.org
从很多方面讲

00:49:20.394 --> 00:49:22.963
对网页来说
类似于NSUserActivity

00:49:25.699 --> 00:49:29.303
我们讲了现有API中
新的使用案例

00:49:29.369 --> 00:49:32.339
以及全新的UIKit API

00:49:33.106 --> 00:49:38.178
来帮助我们让系统了解
何时提升位置

00:49:40.113 --> 00:49:43.717
之后说到了MPContent
MPPlayableContentManager

00:49:44.484 --> 00:49:47.287
如果你是媒体应用
那这就尤为相关

00:49:48.655 --> 00:49:51.825
希望今天大家都清楚地知道

00:49:51.892 --> 00:49:55.262
这些API易于采用
并且容易测试

00:49:57.764 --> 00:50:01.001
在网上可以获取更多的信息

00:50:01.902 --> 00:50:04.538
以及一些精彩的相关会议

00:50:04.938 --> 00:50:07.808
如果还没有看的话
你应该去看看

00:50:08.809 --> 00:50:11.311
这里有很多
与SiriKit相关的工作

00:50:11.879 --> 00:50:15.382
有很多与搜索API相关的工作
大家今天都看过了

00:50:16.016 --> 00:50:19.586
以及过去两年来的
一些先前的会议

00:50:19.653 --> 00:50:23.624
围绕Handoff和
上述的搜索API

00:50:24.124 --> 00:50:29.229
最后我在结尾说一下
这个领域

00:50:29.296 --> 00:50:33.033
我们公司会继续投入下去的

00:50:34.067 --> 00:50:38.138
我们需要各位开发者所做的事

00:50:38.205 --> 00:50:42.209
就是告知我们
你们应用的功能

00:50:42.976 --> 00:50:45.412
以尽可能最详细的方式

00:50:46.413 --> 00:50:49.449
因为从根本上讲
我们越了解你的应用

00:50:49.583 --> 00:50:52.553
我们就越清楚
何时是推荐的最佳时机

00:50:53.353 --> 00:50:55.322
所以今天你看到了

00:50:55.389 --> 00:51:00.627
很多不同的情况中
语义细节是不同层次的

00:51:00.694 --> 00:51:03.997
你可以将活动或
文本域注释进去

00:51:04.565 --> 00:51:06.567
我会尽可能多地鼓励你

00:51:07.267 --> 00:51:10.637
当你做的时候
要尽可能地外显出来

00:51:10.704 --> 00:51:13.540
不仅支持我们今天讨论的功能

00:51:13.607 --> 00:51:17.044
同样让你的应用处在
优势位置面向未来

00:51:21.615 --> 00:51:23.016
感谢大家今天的到来

00:51:23.083 --> 00:51:26.753
祝愿大家在WWDC和周五过得愉快

00:51:27.354 --> 00:51:28.188
再见