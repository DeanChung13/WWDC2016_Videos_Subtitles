00:00:20.053 --> 00:00:20.888 
大家好

00:00:20.954 --> 00:00:24.057 
我是Conor Hughes
我是辅助团队的一名工程师

00:00:24.124 --> 00:00:26.093 
欢迎大家来到
辅助功能中有什么新内容

00:00:26.693 --> 00:00:29.029 
今天我们要了解
我们的操作系统中的

00:00:29.096 --> 00:00:32.266 
一些很酷的新的辅助功能
并了解你需要知道什么

00:00:32.332 --> 00:00:34.768 
来确保
你的app可供所有人使用

00:00:35.169 --> 00:00:36.170 
那么就让我们开始吧

00:00:37.704 --> 00:00:40.541 
辅助功能是一个大词
许多人对它并不熟悉

00:00:40.607 --> 00:00:41.475 
它是什么意思？

00:00:41.875 --> 00:00:45.546 
对我们来说辅助功能意味着
使一个系统

00:00:45.913 --> 00:00:47.314 
可满足每个人的独特需求

00:00:48.015 --> 00:00:50.317 
这意味着两点
适应人们的不同需求来进行设计

00:00:50.384 --> 00:00:54.054 
以及小心在意
你的基本设计以避免问题

00:00:54.721 --> 00:00:57.758 
这是 WWDC 风格
我们重点放在Apple平台辅助功能

00:00:57.824 --> 00:01:01.595 
在此我们很关心
四个主要类别的能力：

00:01:01.929 --> 00:01:04.864 
运动 视觉 听觉和学习

00:01:06.500 --> 00:01:08.602 
运动能力包括
诸如帕金森症

00:01:08.669 --> 00:01:11.305 
多发性硬化症
以及影响用力按压屏幕

00:01:11.371 --> 00:01:14.641 
或
准确点击目标之类的能力

00:01:16.009 --> 00:01:19.580 
视觉能力包括
失明和部分视力丧失

00:01:21.348 --> 00:01:23.717 
听觉能力包括
各种程度的听力丧失

00:01:24.885 --> 00:01:27.688 
而学习能力包括
诵读困难症和自闭症之类的东西

00:01:28.488 --> 00:01:31.124 
我们的操作系统
可以在所有这些领域中

00:01:31.191 --> 00:01:32.359 
做很多事来提供该功能

00:01:32.693 --> 00:01:35.462 
但是应用
是我们的平台体验的一个核心部分

00:01:35.696 --> 00:01:38.365 
为了让我们的平台成为
真正的辅助环境

00:01:38.432 --> 00:01:41.201 
我们需要你确保你的
应用也是辅助性的

00:01:41.468 --> 00:01:44.872 
所以我们很高兴你在这里
来了解如何做到这一点

00:01:45.439 --> 00:01:47.207 
让我们来看一下今天所要谈的内容

00:01:47.508 --> 00:01:49.776 
首先我们在Mac OS
iOS watchOS和tvOS中

00:01:49.843 --> 00:01:53.146 
去了解一些新的辅助功能

00:01:53.380 --> 00:01:56.216 
这样你就可以看到
软件如何能为有不同需求的人

00:01:56.283 --> 00:01:58.986 
提供能力
的一些具体的例子

00:01:59.219 --> 00:02:03.123 
然后我们会用一个iOS app举例
并且就辅助功能问题对其审查

00:02:04.424 --> 00:02:08.328 
然后钻研你可以使用的API
来确保应用有辅助性

00:02:09.663 --> 00:02:11.298 
最后我们将使用这些API

00:02:11.365 --> 00:02:13.500 
来解决
我们在审查中发现的问题

00:02:13.734 --> 00:02:16.336 
包括使用一些新的
我们认为你会喜欢的API

00:02:17.004 --> 00:02:19.406 
那么我们今年要展示
什么新辅助功能呢？

00:02:19.540 --> 00:02:22.309 
相当多了
让我们看看

00:02:22.376 --> 00:02:24.745 
每个主要领域有什么新内容吧

00:02:26.547 --> 00:02:27.614 
首先要提的是运动能力

00:02:29.349 --> 00:02:32.419  
一些人士可能只能够
通过按压单个物理按钮

00:02:32.486 --> 00:02:34.354  
与他们的设备
进行交互

00:02:34.421 --> 00:02:36.890  
例如 轮椅头枕处的开关

00:02:37.491 --> 00:02:40.027  
他们可以
通过iOS丰富的触摸界面进行交互

00:02:40.093 --> 00:02:41.862  
例如通过开关控制

00:02:41.929 --> 00:02:45.432  
它会显示一个光标
在屏幕上的界面元素之间移动

00:02:46.033 --> 00:02:47.401 
当有人想与
光标下的元素

00:02:47.467 --> 00:02:50.337  
进行交互时
他们就可按下开关

00:02:50.470 --> 00:02:53.273  
开关控制让运动能力有缺陷的人士
可以做任何事

00:02:53.340 --> 00:02:55.609  
从简单的按压到复杂的手势

00:02:56.643 --> 00:02:59.546  
iOS和OS X中
开关控制已经存在好些年了

00:02:59.613 --> 00:03:00.447  
有什么新内容呢？

00:03:01.748 --> 00:03:05.319 
我们很高兴地宣布
我们正在把开关控制引入tvOS

00:03:05.652 --> 00:03:07.421 
开关控制用户现可以用它

00:03:07.487 --> 00:03:09.923 
与tvOS界面直接交互了

00:03:10.524 --> 00:03:12.759 
令人熟悉的开关界面
可与光标被一道使用

00:03:12.826 --> 00:03:14.494 
其突显着屏幕元素

00:03:15.429 --> 00:03:18.498 
或备用界面可配合
一个屏幕遥控器来使用

00:03:19.066 --> 00:03:19.967 
而更重要的是

00:03:20.033 --> 00:03:22.402 
用户可以无需修复其开关
就做到这一点

00:03:23.437 --> 00:03:26.039 
有些人在其iOS或Mac设备上
使用开关控制

00:03:26.106 --> 00:03:28.642 
他们可以立即
开始完全自主的

00:03:28.842 --> 00:03:31.512 
控制其电视
而无需任何外部帮助

00:03:31.979 --> 00:03:33.313 
这是一个巨大的进步

00:03:33.380 --> 00:03:35.182 
而我们已经等不及
让人们尝试一下了

00:03:37.150 --> 00:03:38.418 
接下来是驻留控制

00:03:39.086 --> 00:03:40.754 
有一些
辅助技术

00:03:40.821 --> 00:03:43.457 
它们可以在用户使用电脑时
追踪用户的焦点

00:03:43.524 --> 00:03:46.894 
因此其可能会采取
追踪头带上的反射点的形式

00:03:46.960 --> 00:03:48.695 
或实际
追踪眼球运动

00:03:49.429 --> 00:03:51.698 
驻留控制是Mac OS中的
一项新功能

00:03:51.765 --> 00:03:55.569 
它通过允许设备控制鼠标
来集成对这些设备的支持

00:03:55.836 --> 00:03:57.938 
当鼠标停在
某一位置时

00:03:58.472 --> 00:04:00.274 
驻留控制推出
一个定时器[听不清]

00:04:00.340 --> 00:04:03.877 
而当计时器到期时它会调用
一个动作例如鼠标点击

00:04:04.611 --> 00:04:08.382 
这使得用户可以控制其Mac
而不必操纵鼠标

00:04:08.815 --> 00:04:12.352 
当然这是可以通过定制功能定制的
比如 开关控制

00:04:13.020 --> 00:04:14.421 
那么下面让我们来看看愿景

00:04:16.055 --> 00:04:18.591 
多年来Mac OS
和iOS都支持反色和灰度

00:04:18.659 --> 00:04:20.327 
之类的功能

00:04:21.295 --> 00:04:24.531 
来帮助人们在其设备上
增加内容物的对比度

00:04:24.598 --> 00:04:27.201 
处理光线敏感度
或解决色差问题

00:04:27.801 --> 00:04:32.105 
今年我们正在跨Mac OS
iOS和tvOS平台扩大支持

00:04:32.706 --> 00:04:35.843 
我们增加了色彩调整
来帮助色盲人士

00:04:35.909 --> 00:04:38.345 
它可以帮助
显示为这样的东西

00:04:38.946 --> 00:04:40.981 
显示得更像这样

00:04:41.782 --> 00:04:45.619 
而且我们还增加了
让整个显示屏显示为

00:04:45.686 --> 00:04:48.488 
某种特定色彩的功能
这可显著增强

00:04:48.555 --> 00:04:50.724 
阅读黑白文本
有困难的人士的阅读能力

00:04:53.460 --> 00:04:56.964 
在watchOS中
VoiceOver用户得到大声报时

00:04:57.030 --> 00:04:59.333 
其只需通过抬高手腕
或敲击表盘

00:04:59.867 --> 00:05:02.202 
但是有时
他们可能要谨慎检查时间

00:05:02.269 --> 00:05:04.004 
而不影响周围的人

00:05:04.238 --> 00:05:06.907 
因此在watchOS 3中
我们要介绍Taptic Time

00:05:07.341 --> 00:05:09.042 
Taptic
Time是一种VoiceOver功能

00:05:09.109 --> 00:05:12.079 
它采用了一系列
来自Taptic引擎的 不同的敲击

00:05:12.412 --> 00:05:15.082 
来帮助用户
安静而又私密的报时

00:05:18.285 --> 00:05:21.421  
所以iOS有很多功能
来帮助视障人士

00:05:21.488 --> 00:05:23.991  
就其设备上的内容
进行探索和交互

00:05:24.291 --> 00:05:26.026  
但是其物理环境呢？

00:05:26.727 --> 00:05:29.296  
在iOS X中 我们要介绍
一个功能叫放大镜

00:05:29.730 --> 00:05:31.999 
放大镜 在iOS中到处都可以使用

00:05:32.533 --> 00:05:34.434 
它可以让用户
使用其设备上的摄像头

00:05:34.501 --> 00:05:36.803 
在其物理环境中
来放大物体

00:05:37.171 --> 00:05:38.539 
我现在就展示给你看

00:05:44.311 --> 00:05:47.614 
好了 我现在要打开放大镜进入设置

00:05:48.215 --> 00:05:49.049 
一般

00:05:49.516 --> 00:05:50.517 
辅助功能

00:05:50.918 --> 00:05:52.886 
放大镜并翻转开关

00:05:53.987 --> 00:05:56.957 
现在我可以打开放大镜了
只需三击Home键即可

00:05:58.525 --> 00:05:59.359 
搞定了

00:06:00.594 --> 00:06:03.430 
如果我想读一下药瓶上的字

00:06:03.497 --> 00:06:06.099 
我只需远远放大

00:06:06.834 --> 00:06:09.436 
我在低光环境下可以使用

00:06:09.837 --> 00:06:11.104 
相机手电筒之类的apps

00:06:11.538 --> 00:06:13.774 
我可以在某一焦距
锁定对焦

00:06:14.341 --> 00:06:17.578 
而如果我无法
很好的保持设备稳定

00:06:17.911 --> 00:06:19.346 
或者我指着远处的东西

00:06:19.413 --> 00:06:22.049 
我可以用这Center按钮
在这里采集一个冻结帧

00:06:22.716 --> 00:06:24.852 
我们是使用设备的本地相机分辨率

00:06:24.918 --> 00:06:29.289 
捕捉到这一图像的
所以我们可以缩放和平移

00:06:30.624 --> 00:06:33.327 
而放大镜也支持
各种彩色滤镜

00:06:33.460 --> 00:06:35.262 
来帮助用户提高对比度

00:06:35.629 --> 00:06:38.966 
例如 也许我觉得这是灰度

00:06:39.333 --> 00:06:42.703 
也许是倒灰度
那就增加一点对比度

00:06:43.370 --> 00:06:44.872 
这就让我很容易阅读了

00:06:45.405 --> 00:06:48.041 
好了 那么这是一个
iOS X中放大镜的例子

00:06:48.976 --> 00:06:50.344 
那么 在听觉辅助上有什么新功能？

00:06:51.812 --> 00:06:54.681 
iOS版支持硬件TTY设备
已经有一段时间了

00:06:55.315 --> 00:06:57.551  
TTY技术允许
有听力障碍的用户

00:06:57.618 --> 00:07:00.954  
在标准电话应答中
进行文本对话

00:07:01.421 --> 00:07:03.557  
这里是
一台现有TTY机器的样子

00:07:04.324 --> 00:07:07.961  
正如你所看到的
它相当大而且很可能难以携带

00:07:08.395 --> 00:07:10.764  
但它对聋哑人而言非常重要

00:07:10.831 --> 00:07:13.834  
尤其当你考虑到负责把

00:07:13.901 --> 00:07:17.070  
TTY翻译成语音的中继运营商时
这才能使本机用户

00:07:17.137 --> 00:07:20.040  
联系商家 服务以及家人和朋友

00:07:20.107 --> 00:07:21.208  
他们也许不用这机器

00:07:21.708 --> 00:07:24.044  
如果可以无需任何附加硬件
就把该设备的功能性

00:07:24.111 --> 00:07:27.047  
提供给大家 那就太棒了

00:07:27.915 --> 00:07:31.385  
iOS中的这个新功能
任何人都可以在熟悉的界面中

00:07:31.585 --> 00:07:34.821  
播放软件TTY电话
而不必使用任何额外的硬件

00:07:35.222 --> 00:07:37.457  
这些电话可在
传统TTY技术下工作

00:07:37.891 --> 00:07:42.296 
并可很容易地通过运营商中继服务
拨打非TTY号码

00:07:42.863 --> 00:07:46.400  
此外它还具有内部自带的
TTY专用速效型预测

00:07:46.834 --> 00:07:49.203  
所以它适应
现有的TTY用户文化

00:07:49.736 --> 00:07:50.804 
最后一点是学习能力

00:07:51.872 --> 00:07:54.308 
诵读困难是一个极为常见的学习障碍

00:07:54.374 --> 00:07:57.911 
它影响着世界各地
数以百万计人口的读写能力

00:07:58.178 --> 00:08:00.914 
在iOS X中我们很高兴
引入了许多增强功能

00:08:00.981 --> 00:08:02.716 
旨在帮助有诵读困难的人士

00:08:03.450 --> 00:08:06.887 
我们已经对Speak Selection
和Speak Screen实施了改进

00:08:06.954 --> 00:08:09.823 
来帮助人们更好地理解
已经输入的文本

00:08:09.890 --> 00:08:12.226 
而且我们已经为打字
而采用了新的音频反馈

00:08:12.292 --> 00:08:14.261 
来帮助人们立即发现错误

00:08:14.528 --> 00:08:15.963 
我现在就来展示

00:08:16.330 --> 00:08:19.900 
好了我已经在辅助语音设置中

00:08:19.967 --> 00:08:22.736 
打开了打字反馈功能
我现在要打开便签

00:08:23.203 --> 00:08:25.572 
我要在这里做的是
键入“欢迎”

00:08:25.639 --> 00:08:27.508 
而我准备在键入O后就暂停

00:08:28.308 --> 00:08:30.177 
我已经打开字符反馈

00:08:30.244 --> 00:08:34.248 
在这里iOS将在暂停后
读出我输入的最后一个字符

00:08:34.581 --> 00:08:37.985 
我就能肯定我没有输入
视觉上类似的字母 比如E

00:08:41.388 --> 00:08:42.222 
E

00:08:42.789 --> 00:08:45.125 
可能听起来有一点点困难

00:08:45.192 --> 00:08:47.661 
但iOS刚刚读了E给我

00:08:47.895 --> 00:08:48.962 
所以那是不正确的

00:08:50.364 --> 00:08:51.331 
-O
-太棒了

00:08:51.932 --> 00:08:54.501 
现在我要继续输入 打扰一下

00:08:54.568 --> 00:08:58.105 
而iOS将会把
每个单词都读给我

00:08:58.172 --> 00:08:59.473 
因为我已打开了单词反馈

00:08:59.540 --> 00:09:00.908 
所以我能得到即时的反馈

00:09:00.974 --> 00:09:03.477 
来知道我输入的词
是否就是我想要的词

00:09:04.711 --> 00:09:10.083 
欢迎光临我们的会话

00:09:10.551 --> 00:09:14.521 
好 这是iOS X中增强版打字反馈的
一个简单的例子

00:09:19.326 --> 00:09:21.295 
那么 希望我已经
勾起了你的胃口

00:09:21.361 --> 00:09:22.829 
此类辅助软件可以

00:09:23.397 --> 00:09:26.166 
确保整个体验对每个人都适用

00:09:26.300 --> 00:09:27.434 
若辅助功能对你较新鲜

00:09:27.501 --> 00:09:31.471 
你可能想知道如何把
类似的功能放入您的应用中去

00:09:31.972 --> 00:09:34.341 
而如果你之前已经使用过
辅助性API

00:09:34.408 --> 00:09:37.377 
也许在我们开讲一些新API之前
是时候快速复习

00:09:38.178 --> 00:09:41.815 
那如何使用辅助性API
以确保应用人人都可以访问？

00:09:42.883 --> 00:09:45.552 
第一步是
就辅助功能审查我们的应用

00:09:46.153 --> 00:09:48.488 
传统上要达到这一点
最好的方法是启动

00:09:48.555 --> 00:09:51.658 
辅助性应用如VoiceOver
或开关控制来看发生了什么

00:09:52.259 --> 00:09:55.062 
你要查一下是否
您的所有界面元素都暴露出来了

00:09:56.029 --> 00:09:58.131 
是否暴露出来的一切都有一个好的标签

00:09:58.198 --> 00:10:00.167 
这样VoiceOver用户能识别它

00:10:02.002 --> 00:10:03.871 
你要查一下是否通过
VoiceOver使用应用的人士

00:10:03.937 --> 00:10:06.006 
可以做所有其他用户都可以做到的事

00:10:07.207 --> 00:10:10.377 
最终你就在为您的应用设计
辅助功能体验了

00:10:10.444 --> 00:10:13.413 
所以例如有人通过VoiceOver
使用您的应用

00:10:13.480 --> 00:10:16.483 
则你要确保其体验将和
其他任何人一样流畅

00:10:18.018 --> 00:10:19.553 
所以今年我们也高兴

00:10:19.620 --> 00:10:21.955 
因为有了一个全新的
辅助功能检查员

00:10:22.022 --> 00:10:25.492 
它的功能要强大得多
并可以帮助你立刻找出错误

00:10:26.894 --> 00:10:28.795 
如果您想对这个检查员了解更多

00:10:28.862 --> 00:10:32.999 
来看看周三的
针对辅助功能审查你的应用功能

00:10:33.066 --> 00:10:34.635 
这个会话来更多地了解它

00:10:35.302 --> 00:10:38.105 
本次会话 我们要通过
VoiceOver注重审查因为这是

00:10:38.172 --> 00:10:40.908 
使您对应用流的辅助功能
变得非常熟悉的

00:10:40.974 --> 00:10:42.543 
最好的方法

00:10:44.878 --> 00:10:45.712 
好了让我们开始吧

00:10:45.779 --> 00:10:48.815 
来看看一个活动的应用
并找到它的辅助功能问题

00:10:49.049 --> 00:10:51.852 
就本演示
我将要使用的是iOS

00:10:52.219 --> 00:10:55.622 
但相同的基本流程
适用于我们所有的平台

00:10:59.526 --> 00:11:00.727 
好 我要做的第一件事

00:11:00.794 --> 00:11:03.630 
是通过进入辅助功能设置
来把VoiceOver添加到

00:11:04.064 --> 00:11:05.832 
我的辅助功能三击快捷方式

00:11:06.200 --> 00:11:07.301 
并一直到底

00:11:07.367 --> 00:11:09.903 
辅助功能快捷键
开启VoiceOver

00:11:10.838 --> 00:11:13.841 
好了现在让我们开启我们的应用
DogRoutePro

00:11:13.907 --> 00:11:16.176 
一个遛狗路线选择专业应用

00:11:17.244 --> 00:11:19.746 
三击Home开启VoiceOver
再点击选择

00:11:20.247 --> 00:11:21.348 
VoiceOver开启

00:11:21.582 --> 00:11:23.584 
DogRoutePro
Routes

00:11:23.650 --> 00:11:25.752 
那么有两种
对不起 有两种方法

00:11:25.819 --> 00:11:27.721 
VoiceOver开启时
浏览你的应用

00:11:28.088 --> 00:11:30.557 
你可以把一个手指
在屏幕上放好

00:11:30.624 --> 00:11:33.360 
而VoiceOver将选择并读出
你手指下面的内容

00:11:33.427 --> 00:11:36.230 
或者你可以用一个手指
向左或向右刷屏幕

00:11:36.296 --> 00:11:38.799 
来在元素列表中
前进或后退

00:11:39.166 --> 00:11:41.068 
让我们看看
这些表格的辅助性如何

00:11:41.502 --> 00:11:42.336 
大街环道

00:11:42.703 --> 00:11:44.071 
0.8英里

00:11:45.072 --> 00:11:46.907 
马上我注意到
我知道若你激活这一格

00:11:46.974 --> 00:11:49.776 
我们可以去
我们的应用上的某个地方

00:11:50.477 --> 00:11:53.146 
但没有任何东西传达给
VoiceOver用户

00:11:53.747 --> 00:11:54.581 
让我们继续

00:11:55.082 --> 00:11:56.550 
[听不清]按钮

00:11:57.017 --> 00:11:59.987 
这个按钮有一个标签
是一个从图像名派生出来的

00:12:00.053 --> 00:12:02.556 
我用其完成的初始化

00:12:03.857 --> 00:12:06.493 
那是该框架基于我给过它的
唯一信息作出的回应

00:12:06.560 --> 00:12:08.028 
我们必须给它一个更好的标签

00:12:08.829 --> 00:12:10.430 
好吧
让我们激活这个格子

00:12:10.497 --> 00:12:13.233 
要使用VoiceOver
激活一个项目 则当项目被选择时

00:12:13.300 --> 00:12:15.335 
你要用一个手指
双击屏幕

00:12:16.170 --> 00:12:17.271 
大街环道

00:12:17.404 --> 00:12:19.339 
0... 大街环道

00:12:19.439 --> 00:12:20.774 
路线 后退按钮

00:12:20.874 --> 00:12:22.309 
好的 让我完成这用户界面

00:12:22.576 --> 00:12:23.577 
大街环道

00:12:23.644 --> 00:12:25.045 
大街环道评级

00:12:25.445 --> 00:12:26.980 
前往 干扰

00:12:27.381 --> 00:12:29.650 
气味 绿茵 朋友

00:12:30.117 --> 00:12:31.251 
对于这个评级图形

00:12:31.318 --> 00:12:34.588 
Voiceover用户完全无法访问
这个图形的数值

00:12:34.955 --> 00:12:35.789 
让我们继续

00:12:36.223 --> 00:12:37.591 
大街环道路线

00:12:37.724 --> 00:12:39.927 
前往 百老汇街和里奇韦路

00:12:40.594 --> 00:12:42.896 
风险男童合唱团在里奇韦路41号

00:12:42.996 --> 00:12:44.631 
和百老汇街上

00:12:45.532 --> 00:12:49.036 
所以因为我给
这些注释起了好的标题

00:12:49.136 --> 00:12:51.371 
这些框架才能将其用作

00:12:51.438 --> 00:12:54.074 
辅助功能标签
来作为地图注释

00:12:54.608 --> 00:12:56.977 
所以这很好 下面让我们继续
来看Steps选项卡

00:12:57.477 --> 00:12:59.112 
Steps选定文本

00:12:59.713 --> 00:13:01.114 
Step 第41号

00:13:03.383 --> 00:13:04.718 
百老汇街和里奇韦路

00:13:04.818 --> 00:13:06.820 
在百老汇街和里奇韦路
右转

00:13:07.221 --> 00:13:08.889 
男童合唱团在里奇韦路上

00:13:08.956 --> 00:13:12.092 
男童合唱团在里奇韦路上
吉尔伯特和蒙哥马利之间

00:13:12.359 --> 00:13:13.994 
沿着里奇韦路继续

00:13:14.394 --> 00:13:16.263 
小心汽车和儿童

00:13:16.396 --> 00:13:19.666 
所以VoiceOver能读取
这些表格视图单元格里的所有文本

00:13:19.800 --> 00:13:22.703 
但是你会注意到
这些代表了路线上风险的格子

00:13:22.769 --> 00:13:24.404 
没为VoiceOver用户

00:13:24.738 --> 00:13:28.208 
作出区分
而视力正常的用户可以看到

00:13:28.542 --> 00:13:31.345 
风险被以红色文本
和独特的图标所标记

00:13:32.012 --> 00:13:35.382 
好吧让我们跳出幻灯片
并讨论如何解决这些问题

00:13:38.785 --> 00:13:40.287 
我们从应用中了解到了什么？

00:13:40.821 --> 00:13:42.289 
首先路线产生
并列出许多格子

00:13:42.956 --> 00:13:45.292 
收藏按钮有一个奇怪的标签
那是从

00:13:45.359 --> 00:13:46.894 
我们正使用的图像名称派生出来的

00:13:48.428 --> 00:13:50.564 
此外也不清楚这个单元格是否
可以被激活去某些地方

00:13:50.631 --> 00:13:52.232 
可以被激活去某些地方

00:13:54.401 --> 00:13:55.602 
现在对于评级图形

00:13:55.669 --> 00:13:58.972 
VoiceOver完全
无法使用这些图形值

00:14:01.141 --> 00:14:02.976 
最后在路线步骤列表中

00:14:03.744 --> 00:14:07.247 
代表风险路点的格子
没有与路线上的其他步骤

00:14:07.314 --> 00:14:08.415 
被区分开

00:14:09.683 --> 00:14:11.218 
那么如何才能解决这些问题？

00:14:12.920 --> 00:14:14.188 
要明白怎么办

00:14:14.254 --> 00:14:17.057 
我们需要了解VoiceOver如何
能够从我们的界面

00:14:17.124 --> 00:14:18.292 
访问信息并将其驱动

00:14:18.992 --> 00:14:22.462 
VoiceOver与我们的应用
通过UIAccessibility协议进行交互

00:14:23.030 --> 00:14:26.633 
因此让我们用我们刚看到的
应用中的收藏按钮举个例子

00:14:28.702 --> 00:14:30.237 
辅助应用如VoiceOver

00:14:30.304 --> 00:14:33.340 
需要向你的应用用户询问
界面项目的问题

00:14:33.574 --> 00:14:36.743 
因此例如当Voiceover
已被开启而有人触碰了该按钮

00:14:37.211 --> 00:14:39.646 
VoiceOver询问按钮
“嘿你是什么？”

00:14:40.480 --> 00:14:41.915 
按钮说“嗯我是一个按钮”

00:14:42.916 --> 00:14:45.485 
VoiceOver会要求
“你是谁？什么名字？”

00:14:45.886 --> 00:14:48.622 
该按钮应该做出回答
回答内容如“收藏”之类的

00:14:50.224 --> 00:14:52.826 
最后VoiceOver问
“你在屏幕上何处？”

00:14:52.893 --> 00:14:55.295 
按钮回复“它的屏幕空间框架上”

00:14:55.662 --> 00:14:57.898 
这是
VoiceOver需要公布的信息

00:14:58.065 --> 00:15:00.834 
“收藏 按钮”
并在该元素周围绘制一个光标

00:15:02.436 --> 00:15:04.204 
因此从辅助技术到你的应用

00:15:04.271 --> 00:15:06.607 
的这些消息采取了方法调用的形式

00:15:06.940 --> 00:15:09.643 
该方法全都是
UIAccessibility协议的一部分

00:15:09.877 --> 00:15:11.678 
通过实施
该协议的这个方法

00:15:11.745 --> 00:15:13.881 
你让你的自定义视图的
层次结构能够被访问

00:15:14.648 --> 00:15:17.751 
因此标准的UI控件
就有了辅助功能

00:15:18.151 --> 00:15:19.520 
但根据你怎么
对它们进行配置

00:15:19.586 --> 00:15:21.989 
你可能需要
设置或重写某些属性

00:15:22.189 --> 00:15:23.090 
那么什么属性呢？

00:15:23.257 --> 00:15:24.124 
让我们来看看

00:15:25.259 --> 00:15:27.828 
现在UIAccessibility
协议上有很多方法

00:15:27.895 --> 00:15:29.930 
你可以把它们用于
就你的界面项目如何

00:15:30.163 --> 00:15:33.200 
将其自己暴露给辅助功能
进行细粒度控制

00:15:33.267 --> 00:15:36.136 
但对于大多数工作
你自己只需要关心几个

00:15:36.570 --> 00:15:38.839 
让我们一个一个来看基本属性

00:15:39.106 --> 00:15:41.441  
首先是
isAccessibilityElement

00:15:42.242 --> 00:15:45.012  
此属性确定
一个界面项目到底是不是

00:15:45.112 --> 00:15:46.446  
通过辅助技术而被服务

00:15:46.980 --> 00:15:49.750  
因此举例来说如果你有一个
背景装饰的图像视图

00:15:50.017 --> 00:15:51.752  
您可以将此设为False

00:15:52.319 --> 00:15:55.789  
但是如果它代表一张
有人上传到您的服务的照片

00:15:56.056 --> 00:15:57.291  
你会想将其设为True

00:15:57.357 --> 00:15:59.459  
所以使用VoiceOver的人士
就可以发现图像

00:15:59.593 --> 00:16:01.128  
专注于它并了解它了

00:16:03.096 --> 00:16:06.166  
所以现在你的界面元素
通过VoiceOver浮出水面了

00:16:06.233 --> 00:16:08.869  
你最好给它一个名字
这样用户就可以识别它

00:16:08.936 --> 00:16:10.938  
这就是
辅助功能标签的用途

00:16:11.371 --> 00:16:13.607  
该标签
是该元素的简明标识符

00:16:13.907 --> 00:16:16.310  
比如发送消息或新警告

00:16:18.679 --> 00:16:21.481  
那么别人如何知道
他们可以激活你的元素呢？

00:16:22.249 --> 00:16:25.252  
新警告不会按照
其视觉造型所用的

00:16:25.319 --> 00:16:27.321  
同样方式来传达
该项目是一个按钮

00:16:27.888 --> 00:16:29.823  
这就是
辅助功能特性介入的地方

00:16:30.390 --> 00:16:33.360  
辅助功能特性
向辅助技术宣告

00:16:33.427 --> 00:16:35.529  
你的元素是什么
以及如何与它进行交互

00:16:35.863 --> 00:16:39.266  
例如一个按钮应有特性
UIAccessibilityTraitButton

00:16:40.200 --> 00:16:43.036  
一个如滑块的可调节的控件
应有这个特性

00:16:43.103 --> 00:16:44.771  
UIAccessibilityTraitAdjustable

00:16:45.305 --> 00:16:47.941  
特性有点被掩盖 所以
元素可能有一个以上特性

00:16:48.408 --> 00:16:50.277 
例如选定的按钮
应该兼有特性

00:16:50.477 --> 00:16:54.147 
UIAccessibilityTraitButton
和UIAccessibiltyTraitSelected

00:16:54.815 --> 00:16:57.451  
按钮特性
使VoiceOver说“按钮”

00:16:57.584 --> 00:16:59.586  
这样有人才知道他们可以
激活你的元素

00:17:01.989 --> 00:17:03.724 
接下来还有辅助功能框架

00:17:03.957 --> 00:17:06.226 
这就决定你的元素在屏幕上何处

00:17:06.292 --> 00:17:07.828 
并且既用于命中测试

00:17:07.895 --> 00:17:09.762 
也用于围绕该元素
绘制一个光标

00:17:10.364 --> 00:17:13.901 
现在就用户界面视图你通常
不必明确设置这个

00:17:14.034 --> 00:17:17.804 
因其是根据视图在视图层次结构中的
位置而为你计算的

00:17:18.805 --> 00:17:20.307 
但如果需要的话你可以修改它

00:17:20.374 --> 00:17:22.709 
不过请记住这是屏幕内坐标

00:17:24.944 --> 00:17:26.747  
最后还有辅助功能值

00:17:27.247 --> 00:17:28.982  
这对有某种概念价值

00:17:29.049 --> 00:17:30.984  
与之相关联的元素来说很有用

00:17:31.518 --> 00:17:34.288  
例如 滑块通过辅助功能值

00:17:34.354 --> 00:17:35.956  
按百分比返回其当前值

00:17:36.590 --> 00:17:38.492  
通断开关返回 开启或关闭的信息

00:17:38.659 --> 00:17:40.260  
如果你有一些
自定义控件

00:17:40.327 --> 00:17:42.629  
其可控制仪器的放大级别

00:17:42.863 --> 00:17:47.000  
你就会想通过辅助功能值水平
传达该放大倍率

00:17:49.303 --> 00:17:52.005 
好了 如果你做自定义绘图
而您界面的每个逻辑块

00:17:52.539 --> 00:17:56.076 
都不直接映射到用户界面视图
你会怎么做？

00:17:57.177 --> 00:18:00.047 
当你需要那样做时
使用UIAccessibilityElement

00:18:00.480 --> 00:18:04.952 
UIAccessibilityElement对象代表
屏幕上的逻辑可用区域

00:18:05.252 --> 00:18:09.122 
其与UIAccessibility协议交互
就像你的视图一样

00:18:09.456 --> 00:18:12.326 
你可以使用它们
例如用于暴露一个控件的

00:18:12.392 --> 00:18:14.728 
每个单一部分
其作为单一的用户界面视图而建造

00:18:15.429 --> 00:18:16.363 
如果要这样做

00:18:16.997 --> 00:18:21.235 
让你想要暴露其部分的元素
进入一个辅助功能容器

00:18:21.668 --> 00:18:24.671 
通过设置其辅助功能
元素属性到

00:18:24.738 --> 00:18:26.473 
UIAccessibilityElement
对象的一个阵列

00:18:26.540 --> 00:18:29.243 
其代表控件的每个部分

00:18:30.878 --> 00:18:35.549 
UIAccessibilityElement
是暴露那些我们之前看到的图形

00:18:35.616 --> 00:18:39.786 
的天然选择 在那里我当时在做一些
自定义层来代表图形条块

00:18:40.220 --> 00:18:43.156 
但如果你是非常精明的倾听者
你可能已经注意到

00:18:45.392 --> 00:18:47.928 
一个轻微的障碍
UIAccessibilityElement对象不是视图

00:18:47.995 --> 00:18:50.230 
所以我们需要手动设置
它们的辅助功能框架

00:18:50.464 --> 00:18:53.867 
然而这些图形条块
是在一个滚动视图内

00:18:54.034 --> 00:18:56.603 
所以它们的帧
与屏幕的坐标会变化

00:18:57.070 --> 00:18:59.239 
现在为了纠正这个我们可以再分类

00:18:59.306 --> 00:19:01.742 
或者我们可以
在每次滚动后设置辅助功能框架

00:19:02.242 --> 00:19:06.813 
或在iOS X中我们可
在容器空间内设置辅助功能框架

00:19:07.381 --> 00:19:10.684 
当您设置该属性
到一个容器相对框架上时

00:19:11.518 --> 00:19:16.223 
UIAccessibilityElement将自动
遵循屏幕上其容器的位置

00:19:18.992 --> 00:19:20.360 
这些都是在UIAccessibility协议

00:19:20.427 --> 00:19:23.096 
以及UIAccessibilityElement中
最基本的方法

00:19:23.163 --> 00:19:25.465 
仅用这些你就能完成大部分的事

00:19:25.532 --> 00:19:26.700 
那么有哪些要点呢？

00:19:27.434 --> 00:19:29.903 
首先要知道
在UIAccessibility协议中的方法

00:19:29.970 --> 00:19:32.606 
是你该如何向辅助功能暴露
你的界面项目

00:19:33.040 --> 00:19:34.608 
通过该协议方法
你的应用回答了

00:19:34.675 --> 00:19:38.812 
它的界面项目是什么
以及它们可以做什么的问题

00:19:40.280 --> 00:19:43.617 
现在许多类别都有内部支持
所以没什么需要你做

00:19:44.218 --> 00:19:47.921 
但你可能要设置或覆写
属性来得到你需要的行为

00:19:49.156 --> 00:19:50.724 
最后如果你有
不直接映射到视图

00:19:50.791 --> 00:19:54.161 
的你的部分界面
使用UIAccessibilityElement

00:19:54.895 --> 00:19:58.031 
让我们去用刚学到的方式
把应用变得可以使用

00:19:58.699 --> 00:20:00.067 
我们要的第一件事情

00:20:00.934 --> 00:20:05.172 
是我们要改正的事实
即表格视图单元格并没传达

00:20:05.239 --> 00:20:07.741 
它能够被用于
通过VoiceOver激活的信息

00:20:08.408 --> 00:20:11.445 
所以我们要做到这一点
方法在其AwakeFromNib之中

00:20:11.512 --> 00:20:15.883 
我们要做的一切 就是在特性
UIAccessibilityTraitButton中的“Or”

00:20:16.583 --> 00:20:17.417 
搞定

00:20:18.018 --> 00:20:20.687 
好了现在让我们
来为收藏按钮修复标签

00:20:23.857 --> 00:20:26.894 
我们打算在这里做的是
当我们为此单元格

00:20:26.960 --> 00:20:29.296  
设置路线时 我们要抓住收藏按钮

00:20:29.363 --> 00:20:32.666  
并设置其辅助功能
标签属性为收藏

00:20:32.733 --> 00:20:34.101  
然后是路线的名称

00:20:34.168 --> 00:20:35.469  
我把路线名放在那里

00:20:35.536 --> 00:20:39.506  
这样如果我激活该按钮
我要去哪条收藏路线就毫不含糊

00:20:40.774 --> 00:20:42.776  
好吧让我们继续并移到
看过了的那条图形

00:20:45.312 --> 00:20:49.216 
所以就像我说的
我在此使用层做了一些绘图

00:20:49.783 --> 00:20:51.752 
因此我们要使用
UIAccessibilityElement

00:20:52.319 --> 00:20:54.488 
现在我想在这里首先做的是

00:20:54.588 --> 00:20:58.492 
我要补充一些实例变量来跟踪
UIAccessibilityElement对象

00:20:58.959 --> 00:21:01.995 
那么就四个实例变量
UAAccessibiliytElements图形

00:21:02.062 --> 00:21:03.730 
中的条块每块一个

00:21:04.865 --> 00:21:07.267 
接下来我将添加
一个短的小帮手功能

00:21:07.334 --> 00:21:10.571 
来帮我把数字评分翻译
成对用户友好的字符串

00:21:10.637 --> 00:21:12.706 
那么 评分是X分 满分是5分

00:21:14.474 --> 00:21:19.580 
对didSetcallbacks中
的每一个就这些评分属性

00:21:19.713 --> 00:21:24.518 
我要将适当辅助元素的
辅助功能值设置给

00:21:25.552 --> 00:21:27.554 
一个描述此评分的
友好字符串

00:21:28.589 --> 00:21:30.791 
因此对于气味——哎呀

00:21:31.792 --> 00:21:32.893 
把干扰排第一

00:21:34.328 --> 00:21:37.531 
气味 绿茵

00:21:39.566 --> 00:21:40.400 
和朋友

00:21:41.468 --> 00:21:43.270 
再次的 只需抓取正确的元素

00:21:43.337 --> 00:21:46.907 
将其辅助功能值
设置为评分的字符串值

00:21:48.008 --> 00:21:49.977 
好了现在我们需要
实际设置实例变量

00:21:50.043 --> 00:21:51.745 
为有效辅助功能元素

00:21:52.713 --> 00:21:54.515 
所以在AwakeFromNib

00:21:56.016 --> 00:22:00.821 
对这四个实例变量我只是去设置
它等于UIAccessibilityElement

00:22:01.355 --> 00:22:03.457 
而我们自己
作为辅助功能容器

00:22:04.791 --> 00:22:07.995 
现在我们要设置标签
给这些元素仅仅作为

00:22:08.695 --> 00:22:10.731 
已经在那儿的标签的文本

00:22:10.797 --> 00:22:12.966 
我应该说用户界面标签
它已经在那儿了

00:22:15.135 --> 00:22:17.905 
最后我们将设置
我们自己的辅助功能属性

00:22:17.971 --> 00:22:19.606 
仅为那四元素
因为我们想成为

00:22:19.673 --> 00:22:21.175 
一个辅助功能容器

00:22:22.075 --> 00:22:24.912 
所以现在我们拥有有效的
辅助功能元素对象

00:22:24.978 --> 00:22:29.082 
其拥有有效标签或者好标签
和良好的辅助功能值

00:22:29.583 --> 00:22:31.118 
现在我们只需要设置其框架

00:22:32.085 --> 00:22:33.921 
我们要做的是
当我们铺设

00:22:34.121 --> 00:22:35.556  
图形条块时

00:22:39.226 --> 00:22:41.728  
我们只要抓住适当的
辅助功能元素

00:22:41.795 --> 00:22:44.231  
并在容器空间
设置其辅助功能框架即可

00:22:45.065 --> 00:22:47.568  
好的那么我们需要修复的
最后一件事

00:22:47.634 --> 00:22:51.205  
是路线列表视图中的
单元格标签

00:22:53.707 --> 00:22:56.310 
所以我会去
路线步骤表格

00:22:57.444 --> 00:22:59.413 
当我们设置单元格所代表的适当路点时

00:22:59.513 --> 00:23:00.914 
我们要做的是

00:23:01.481 --> 00:23:04.918 
添加一些代码
来手动设置辅助功能标签

00:23:04.985 --> 00:23:07.855 
为路点的名称
然后是路点的描述

00:23:08.388 --> 00:23:10.591  
若它是一个风险 我们将增加“风险”

00:23:11.024 --> 00:23:13.060  
然后是风险说明

00:23:14.194 --> 00:23:15.696 
所以在我们将此生成并运行前

00:23:16.196 --> 00:23:18.932 
让我们回到幻灯片
并想想是否有什么是

00:23:18.999 --> 00:23:20.267 
视力正常的用户极易做到

00:23:20.334 --> 00:23:22.603 
而VoiceOver用户
仍然有麻烦去做的

00:23:28.208 --> 00:23:32.779 
好吧
再次的首先是路线图

00:23:33.747 --> 00:23:36.116 
VoiceOver的用户可
在地图上找到那些步骤

00:23:36.183 --> 00:23:40.554 
然而路线次序已被丢失
因为VoiceOver会以一种

00:23:40.621 --> 00:23:43.257 
在空间中自上向下自左而右的顺序
来读这些元素

00:23:44.725 --> 00:23:48.295 
此外视力正常的人士
可以很容易地通过独特的图标

00:23:48.362 --> 00:23:49.997 
看到此图形中的风险

00:23:50.430 --> 00:23:52.766 
但VoiceOver用户
将不得不浏览

00:23:52.833 --> 00:23:55.802 
图形中所有的航点
来发现所有的风险

00:23:57.604 --> 00:24:00.340 
现在就路线步骤列表
有一个类似的问题

00:24:00.607 --> 00:24:03.143 
因为它很容易
为视力正常用户所筛选

00:24:03.210 --> 00:24:05.579 
他们可以通过
快速滚动其单元格完成

00:24:05.646 --> 00:24:08.015 
根据的是鲜明的红色文字
和独特的标签

00:24:08.282 --> 00:24:11.552 
但是对于VoiceOver用户
就没有那么容易来筛选了

00:24:11.652 --> 00:24:13.820 
他们不得不查遍
每个单独的格子

00:24:14.221 --> 00:24:15.589 
如何才能解决这些问题呢

00:24:17.724 --> 00:24:18.992 
我们将使用转子

00:24:19.126 --> 00:24:21.828 
转子是一个VoiceOver功能
它可让人通过搜索

00:24:21.895 --> 00:24:24.765 
给定类型的元素
而跨界面浏览

00:24:25.098 --> 00:24:26.600  
内置转子之一

00:24:26.667 --> 00:24:28.702  
是标题转子
它允许用户

00:24:28.769 --> 00:24:31.738  
通过在标题间跳跃
来浏览一个界面

00:24:32.372 --> 00:24:35.776  
要使用转子
你用两根手指在屏幕上扭转

00:24:35.843 --> 00:24:38.011 
就好像你
在进行物理拨号一样

00:24:38.545 --> 00:24:40.714 
这么做来选择待使用的
转子设置

00:24:40.781 --> 00:24:43.317 
然后用一根手指向上或向下刷

00:24:43.383 --> 00:24:45.519 
来用此转子搜索前一个
或后一个

00:24:47.221 --> 00:24:49.489 
所以今年我们为你推出
添加你自己的

00:24:49.556 --> 00:24:51.491 
自定义搜索转子的功能

00:24:51.925 --> 00:24:53.126 
我们希望当用户通过
VoiceOver使用你的应用时

00:24:53.193 --> 00:24:55.796 
你能利用这一优势
来给你的应用

00:24:56.063 --> 00:24:57.831 
添加全新的浏览功能

00:24:58.298 --> 00:25:00.534 
要在iOS上添加你的自定义转子

00:25:00.601 --> 00:25:03.871 
在一个包含你想用于
搜索的元素的超级视图中

00:25:03.937 --> 00:25:07.274 
或在该超级视图的
视图控制器中

00:25:07.474 --> 00:25:09.176 
设置辅助功能自定义转子属性

00:25:10.444 --> 00:25:13.947 
你会想将它设置到一个
视图辅助功能自定义转子

00:25:14.014 --> 00:25:15.616 
对象阵列中去 其以一个名称

00:25:16.250 --> 00:25:17.985 
以及一个项目搜索块初始化

00:25:18.051 --> 00:25:20.787 
该搜索块每次
在用户向上或向下刷动时

00:25:20.854 --> 00:25:23.957 
来为此转子搜索前一个
或后一个匹配时被调用

00:25:27.494 --> 00:25:29.396 
让我们切换回演示机器

00:25:29.463 --> 00:25:30.797 
看看行动中这个新的API

00:25:37.104 --> 00:25:42.576 
好的 我们先添加一个风险转子
到路线步骤视图控制器

00:25:42.743 --> 00:25:45.846 
这样用户就可以
轻松浏览到适当的

00:25:45.913 --> 00:25:47.281 
代表风险的表格单元格了

00:25:49.316 --> 00:25:54.688 
那么我来开启
路线步骤视图控制器

00:25:55.289 --> 00:25:57.824 
我把该属性设置在
AwakeFromNib内部

00:25:58.625 --> 00:26:00.394 
基本骨架在这里

00:26:00.460 --> 00:26:02.262 
我将做一个风险转子一个名为风险的

00:26:02.329 --> 00:26:05.699 
辅助功能自定义转子对象
和一个回调

00:26:06.633 --> 00:26:09.002 
我要去把
辅助功能自定义转子的属性设置为

00:26:09.069 --> 00:26:10.270 
仅为该转子

00:26:11.305 --> 00:26:14.308 
而在这里的回调里面
该搜索块里面

00:26:14.708 --> 00:26:18.245 
我只是要得到
我们这里的数据模型的参考号

00:26:18.412 --> 00:26:20.447 
一个路点阵列并通过检查我们用过的
predicate

00:26:20.514 --> 00:26:22.616 
并确定我们
是向前还是向后进行

00:26:24.151 --> 00:26:26.720 
接下来我们需要找到在哪里
开始我们的搜索

00:26:26.954 --> 00:26:31.091 
因此在默认情况下
如果现在在表视图中没有选择

00:26:31.491 --> 00:26:34.962 
我们要么在第一个项目之前
要么在最后一项之后开始

00:26:35.128 --> 00:26:37.497 
这取决于
我们向前还是向后进行

00:26:37.564 --> 00:26:40.100 
因此我们进入单元格列表

00:26:40.734 --> 00:26:45.639 
否则如果我们当前有项目
我们要使它成为单元格

00:26:45.706 --> 00:26:50.177 
然后在代表我们数据模型中的项目
的那一行开始

00:26:51.745 --> 00:26:53.580 
好的 然后我们要

00:26:56.149 --> 00:26:58.218 
用这个循环
通过我们的数据模型来搜索

00:27:00.187 --> 00:27:02.289 
而我们要搜索
直到找到一个匹配为止

00:27:03.891 --> 00:27:06.393 
而匹配就是
风险路点

00:27:06.727 --> 00:27:12.132 
因此如果我们找到一个结果
我们要为此结果

00:27:13.267 --> 00:27:15.369 
得到索引路径
在表格视图中滚动到那一排

00:27:16.103 --> 00:27:18.805  
抓取那个
我们可能已经在屏幕上

00:27:18.872 --> 00:27:21.742  
滚过了的单元格
并以目标元素单元格返回

00:27:21.808 --> 00:27:24.011  
一个UIAccessibility
自定义转子项目结果

00:27:24.845 --> 00:27:28.415  
现在在初始值设定项里
它还支持目标范围属性

00:27:29.082 --> 00:27:32.619  
如果我们顺应
用户界面的文本输入

00:27:32.686 --> 00:27:34.521  
我们可用它来转过文本的不同部分

00:27:34.788 --> 00:27:37.691 
但是我们不这样做
所以我们只会让它是零值

00:27:39.126 --> 00:27:42.329 
如果我们的While循环终止
却没有返回任何东西

00:27:42.396 --> 00:27:44.865 
我们将返回零值
来说明我们无法找到一个结果

00:27:46.500 --> 00:27:48.101 
在路线地图单元格中做类似的事

00:27:51.438 --> 00:27:53.140 
对不起 我们这里有这个帮手

00:27:53.207 --> 00:27:55.909 
它以给定的predicate
来搜索我们的注解视图

00:27:56.043 --> 00:27:59.746 
从一个注解视图
向前或向后进行

00:28:01.048 --> 00:28:03.684 
此predicate对应着

00:28:03.750 --> 00:28:07.354 
我们是否应该
基于它所代表的

00:28:07.421 --> 00:28:09.523 
数据模型项目
而返回该注解视图

00:28:10.691 --> 00:28:14.094 
因此我们要使用
这一点来做类似的事情

00:28:14.728 --> 00:28:16.263 
我们要覆写awakeFromNib

00:28:17.664 --> 00:28:21.235 
我们要作一个短的封闭
它将帮我们制作多个转子

00:28:21.301 --> 00:28:24.037 
因为我们基本上
我们为各种转子

00:28:24.204 --> 00:28:26.273 
所做的所有改变
是我们返回哪些项目

00:28:27.040 --> 00:28:30.410 
设置辅助功能自定义转子属性时
我们将用此设置

00:28:30.477 --> 00:28:34.281 
我们将有一个路线步骤转子
它只返回每个路点

00:28:35.249 --> 00:28:39.119 
以及一个风险转子
它将只返回风险

00:28:40.320 --> 00:28:41.989 
在这个事实阵列中我们会做什么？

00:28:42.055 --> 00:28:47.995 
我们要用适当名称创建一个
UIAccessibility自定义转子对象

00:28:49.763 --> 00:28:52.299 
我们将使用
我们的搜索注解视图帮手

00:28:53.800 --> 00:28:55.502 
把当前元素给它

00:28:55.869 --> 00:28:57.604 
无论我们前进还是后退

00:28:57.671 --> 00:28:59.339 
不管用的什么predicate

00:29:00.674 --> 00:29:03.744 
再者 若我们能找到一个结果
我们将只把它

00:29:03.877 --> 00:29:07.181 
包在一个
自定义转子项目结果中并将其返回

00:29:07.848 --> 00:29:09.917 
否则将返回零值
说明我们无法为此转子

00:29:09.983 --> 00:29:12.553 
找到之前
或下一个的匹配

00:29:13.687 --> 00:29:15.289 
好吧
让我们将其建立并运行

00:29:16.256 --> 00:29:17.858 
-大街-
-我们开始

00:29:17.925 --> 00:29:18.759 
前往

00:29:18.926 --> 00:29:21.662 
好吧 我们来看看
我们的改变是否生效了

00:29:21.828 --> 00:29:22.663 
大街环道

00:29:23.130 --> 00:29:25.499 
0.8英里
按钮

00:29:25.566 --> 00:29:27.701 
VoiceOver说了“按钮”
那很棒

00:29:27.768 --> 00:29:29.903 
用户可以知道
他们现在可以启动这个项目了

00:29:29.970 --> 00:29:31.438 
让我们来看看
在这个收藏按钮

00:29:31.738 --> 00:29:33.073 
收藏 大街环道

00:29:33.273 --> 00:29:34.641 
-按钮
-太棒了

00:29:35.242 --> 00:29:36.109 
选中

00:29:36.443 --> 00:29:37.778 
收藏 大街环道

00:29:38.245 --> 00:29:41.582 
因此框架已经为我们关注
选中的特性了

00:29:41.915 --> 00:29:43.317 
我想激活该单元格

00:29:43.383 --> 00:29:44.384 
大街环道

00:29:45.152 --> 00:29:48.121 
大街环道
大道环路 干扰

00:29:48.555 --> 00:29:49.957 
评分 3分 满分5分

00:29:50.157 --> 00:29:52.326 
气味 评分 2分 满分5分

00:29:52.526 --> 00:29:54.828 
绿茵 评分 5分 满分5分

00:29:55.028 --> 00:29:57.130 
朋友 评分 4分 满分5分

00:29:57.297 --> 00:29:59.466 
太好了
我们的图形条块现在是辅助性的了

00:29:59.933 --> 00:30:01.068 
大街环道路线

00:30:01.435 --> 00:30:02.936 
百老汇街和里奇韦路

00:30:03.403 --> 00:30:05.305 
好的现在让我们尝试
并使用新的转子

00:30:05.739 --> 00:30:09.076 
前往 词语 字符
风险 路线步骤

00:30:09.977 --> 00:30:11.578 
风险 风险

00:30:11.678 --> 00:30:12.880 
里奇韦路和皮埃蒙特路

00:30:12.946 --> 00:30:14.381 
皮埃蒙特路和第41号

00:30:14.481 --> 00:30:15.782 
第41号和百老汇街

00:30:15.849 --> 00:30:17.317 
太棒了 我们路线步骤转子是有效的

00:30:17.384 --> 00:30:18.819 
使用转子来访问...

00:30:18.886 --> 00:30:19.753 
对不起

00:30:21.188 --> 00:30:22.022 
风险

00:30:23.190 --> 00:30:25.192 
风险 里奇韦路和皮埃蒙特路

00:30:25.459 --> 00:30:27.494 
风险 在里奇韦路有男童合唱团

00:30:27.561 --> 00:30:28.829 
而风险转子让我们

00:30:28.896 --> 00:30:33.333 
直接跳到并通过
那儿所有风险的列表

00:30:33.567 --> 00:30:35.936 
让我们再次看看
步骤选项卡

00:30:36.003 --> 00:30:37.938 
步骤 选中

00:30:38.205 --> 00:30:41.875 
步骤 第41号和百老汇街
启动于...

00:30:42.509 --> 00:30:43.744 
-那是我
-风险

00:30:44.411 --> 00:30:46.013 
在里奇韦路有男童合唱团

00:30:48.615 --> 00:30:50.017 
在里奇韦路有男童合唱团

00:30:50.217 --> 00:30:53.287 
在里奇韦路吉尔伯特和蒙哥马利间
有男童合唱团

00:30:53.587 --> 00:30:55.022 
沿着里奇韦路继续

00:30:55.856 --> 00:30:57.157 
风险 小心....

00:30:57.958 --> 00:30:59.793 
哦对不起 那里开关被切断了

00:30:59.860 --> 00:31:01.628 
你听到它说：“风险”

00:31:01.695 --> 00:31:04.164 
因此我们对
辅助功能标签的修改生效了

00:31:04.431 --> 00:31:07.100 
现在它传达了这些单元格
的确代表风险的信息

00:31:07.401 --> 00:31:11.004 
而除此之外 我们能
直接使用风险转子跳至它们

00:31:11.772 --> 00:31:13.574 
好吧
让我们跳回到幻灯片

00:31:18.212 --> 00:31:19.713 
对tvOS做一个快速总结

00:31:20.347 --> 00:31:23.483 
tvOS apps都建有UIKit
所以我们之前所谈的一切

00:31:23.550 --> 00:31:25.886 
也都
直接适用于它们

00:31:26.320 --> 00:31:29.056 
但也有一些注意事项
你需要记住

00:31:29.122 --> 00:31:31.291 
构建你的辅助功能电视应用时

00:31:31.358 --> 00:31:34.795 
主要事实是
tvOS有一个焦点驱动界面

00:31:36.563 --> 00:31:40.100 
因此tvOS的一个常见模式
是使用页眉来分组

00:31:40.567 --> 00:31:44.671 
屏幕上的内容
并从视觉上将其与其他内容分开

00:31:45.539 --> 00:31:49.109 
你可以把类似的体验提供给
通过VoiceOver使用

00:31:49.176 --> 00:31:52.012 
辅助功能标题元素API
来使用你的应用的用户

00:31:53.046 --> 00:31:56.116 
在你的辅助性视图中
其超级视图中

00:31:56.283 --> 00:31:58.852 
或在适用的视图控制器中
将该属性设置为

00:31:59.786 --> 00:32:02.890 
与该内容相关联的标题

00:32:03.690 --> 00:32:06.159 
然后当有人
浏览到你的项目时

00:32:06.493 --> 00:32:08.629 
VoiceOver
会用一个独特的音调

00:32:08.695 --> 00:32:11.632 
为你的应用用户
读出相关的标题

00:32:11.965 --> 00:32:13.734 
来给其提供一种内容感

00:32:17.938 --> 00:32:21.942 
我录制了一个
艺术画廊应用短片在这里

00:32:22.442 --> 00:32:24.511 
当我播放它时

00:32:24.578 --> 00:32:27.714 
我要把焦点重心下移
到底部的可用作品的

00:32:27.781 --> 00:32:29.249 
收集视图

00:32:30.050 --> 00:32:33.887 
你会听到VoiceOver
用一个独特的音调说“可用作品”

00:32:35.255 --> 00:32:37.558 
那是因为我把那个标签设置为

00:32:37.758 --> 00:32:40.827 
收集视图的
辅助功能标题元素

00:32:41.328 --> 00:32:43.030 
现在你也会听到别的东西

00:32:43.096 --> 00:32:47.167 
当我暂停时
VoiceOver会开始阅读

00:32:47.401 --> 00:32:50.537 
屏幕上所有的非可聚焦的
辅助功能元素

00:32:50.938 --> 00:32:52.172 
那么现在让我们听听吧

00:32:53.207 --> 00:32:54.374 
可用作品

00:32:54.741 --> 00:32:56.076 
谷物 按钮

00:32:57.277 --> 00:32:58.745 
题目 谷物

00:32:58.946 --> 00:33:00.747 
作者 维维安李

00:33:00.948 --> 00:33:01.782 
描述

00:33:02.082 --> 00:33:03.851 
掬起一束谷物

00:33:04.251 --> 00:33:05.919 
它在晨露中闪亮

00:33:06.587 --> 00:33:09.423 
我之所以向你展示
次要的全部阅读行为

00:33:09.489 --> 00:33:12.659 
是要费尽心思让你知道
你的应用提供的所有信息

00:33:13.227 --> 00:33:15.863 
都需要通过一个
辅助功能元素被曝光

00:33:16.196 --> 00:33:20.000 
即使在它本身不可由
由tvOS聚焦引擎来聚焦

00:33:20.501 --> 00:33:25.038 
当你这样做时
当你用VoiceOver暂停浏览时

00:33:25.305 --> 00:33:29.476 
随后VoiceOver会读出
屏幕上所有的非聚焦内容

00:33:29.643 --> 00:33:33.247 
使信息将被传达给通过
VoiceOver使用该应用的人士

00:33:34.681 --> 00:33:35.849 
好的 让我们总结一下

00:33:37.017 --> 00:33:39.253 
所以当你为你的应用

00:33:39.353 --> 00:33:40.721 
着眼于辅助功能时

00:33:40.787 --> 00:33:42.256 
记住你在这里
所学到的

00:33:43.190 --> 00:33:45.225 
首先辅助功能意味着每一个人

00:33:45.692 --> 00:33:48.395 
这是关于把你的应用的非凡用户体验

00:33:48.462 --> 00:33:50.464 
尽可能多的提供给每一个人

00:33:52.566 --> 00:33:55.435 
在设计之初
就考虑辅助功能为好

00:33:55.836 --> 00:33:57.671 
在你的界面是否有对有运动能力残疾

00:33:57.738 --> 00:33:59.439 
的人士是难以使用的？

00:33:59.673 --> 00:34:01.375 
有没有什么东西对比度过低？

00:34:02.009 --> 00:34:02.843 
对不起

00:34:04.545 --> 00:34:06.446 
UIKit可以帮助你的应用

00:34:06.513 --> 00:34:08.949 
通过你采用辅助功能API
使其变得更易于使用

00:34:10.384 --> 00:34:13.487 
最后 易于使用的应用
是我们的平台非凡的原因

00:34:13.554 --> 00:34:16.322 
非常感谢大家在这里
并了解如何做到这一点

00:34:17.491 --> 00:34:19.860 
要了解更多信息
你可以在网上查询了本次会话

00:34:19.927 --> 00:34:21.228 
它的会话编号是202

00:34:23.197 --> 00:34:26.199 
本周还有一些相关会议
你也应该看看

00:34:26.567 --> 00:34:30.304 
上午10点在这个房间
有一场包容性应用设计会话

00:34:30.370 --> 00:34:31.737 
所以一定要留下来

00:34:33.239 --> 00:34:36.176 
而周三
上午10点在诺布山

00:34:36.243 --> 00:34:38.745 
有一场就辅助功能审查你的应用的会话

00:34:38.812 --> 00:34:42.382 
你可从中了解更多有关
新辅助功能检查器的东西

00:34:42.748 --> 00:34:44.751 
我确实建议你去看看

00:34:45.085 --> 00:34:46.420 
这就是我今天的全部发言

00:34:46.485 --> 00:34:48.322 
谢谢大家 祝会议愉快