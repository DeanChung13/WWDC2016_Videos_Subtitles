00:00:19.386 --> 00:00:22.389
优化应用的网页内容

00:00:22.456 --> 00:00:23.290
大家好

00:00:27.427 --> 00:00:29.763
欢迎来到“优化应用的网页内容”

00:00:29.830 --> 00:00:31.398
我是Jonathan Davis

00:00:31.465 --> 00:00:34.168
网络技术的推广人
负责Safari和WebKit

00:00:34.902 --> 00:00:37.271
现在我要先说明一些事情

00:00:38.172 --> 00:00:40.707
很多人说我长得像
Edward Snowden

00:00:40.774 --> 00:00:42.309
但我向你保证 我不是他

00:00:43.210 --> 00:00:46.947
但这么多卫星在头顶盘旋
大概都是来抓我们的

00:00:47.915 --> 00:00:50.751
除此之外 我很激动地要展示些新东西

00:00:50.817 --> 00:00:53.787
它们可以帮助你
提升应用网页内容的性能

00:00:54.288 --> 00:00:56.323
我们一直都知道

00:00:56.390 --> 00:00:59.326
性能是提供最佳用户体验的关键

00:00:59.393 --> 00:01:04.431
若你是个应用开发者并在应用里用了
WebViews和JSContext

00:01:05.364 --> 00:01:07.901
而且你很关心性能
那你就来对地方了

00:01:08.569 --> 00:01:09.970
说到性能

00:01:10.304 --> 00:01:14.074
在当今时代里
性能其实就是指电池寿命

00:01:14.141 --> 00:01:17.411
我认为电池寿命是最终的有限资源

00:01:17.845 --> 00:01:20.280
它带来很不同的结果
如果你能拨出最后一通电话

00:01:20.347 --> 00:01:23.717
或者发出最后一份重要的文件
在电池耗光之前

00:01:24.218 --> 00:01:26.420
性能对用户来说
事关重大

00:01:26.753 --> 00:01:29.389
他们所选择的应用
不会让设备变慢

00:01:29.456 --> 00:01:30.724
而且耗电量低

00:01:31.692 --> 00:01:35.596
我们的经验就是
根据用户的反馈和各自的体会

00:01:35.662 --> 00:01:38.966
性能很重要
因为电池寿命事关重大

00:01:40.400 --> 00:01:44.104
所以今年我们致力于
提供更好的工具

00:01:44.171 --> 00:01:46.640
来找到和修复
网页内容的性能问题

00:01:47.207 --> 00:01:49.510
现在我们为应用提供了工具
比如Swift

00:01:49.576 --> 00:01:51.778
还有Objective-C代码
比如Instruments

00:01:52.312 --> 00:01:56.049
我们还提供了网络检查器
帮助网页开发者创建网页和网站

00:01:57.017 --> 00:01:59.286
但不要觉得
因为你选择了

00:01:59.353 --> 00:02:02.422
在应用中用网络技术
就没有其他工具可用了

00:02:02.489 --> 00:02:05.259
实际上
我今天展示给你的所有工具

00:02:05.325 --> 00:02:07.427
就是开发给人们
既能帮助他们建设网站

00:02:07.494 --> 00:02:10.430
也能让他们在应用里
用网络技术

00:02:11.265 --> 00:02:12.566
那么我首先要
向你展示

00:02:12.633 --> 00:02:15.936
如何把网络检查器连接到
JSContext的WebViews

00:02:16.003 --> 00:02:18.505
这样在你需要它的时候
它就会立刻出现

00:02:19.540 --> 00:02:21.375
之后你会了解
一些新的功能

00:02:21.441 --> 00:02:25.479
它们能让你了解JavaScript代码
如何分配时间

00:02:25.546 --> 00:02:29.650
以及这些新功能
如何帮你迅速找到性能上的问题

00:02:30.651 --> 00:02:34.955
如果你想要看到
网络内容的内存使用情况

00:02:35.022 --> 00:02:38.392
我们也给网络检查器增添了新的时间线
我都已等不及想展示了

00:02:38.592 --> 00:02:41.562
它们会帮你节省很多时间
来找到内存过大的问题

00:02:41.995 --> 00:02:43.797
准备好了？
那就开始吧

00:02:45.032 --> 00:02:46.333
第一件
我们要做的事

00:02:46.400 --> 00:02:48.769
是把网络检查器
连接到应用里

00:02:49.469 --> 00:02:52.840
在应用里使用网络技术
有很多原因

00:02:53.574 --> 00:02:56.276
如JS context里的
一些JavaScript模块

00:02:56.343 --> 00:02:59.980
可以让你轻松交换逻辑
并无编译地添加新的模块

00:03:00.747 --> 00:03:05.419
可能有些人正在tvOS应用里
使用TVML的 JSContext

00:03:06.053 --> 00:03:09.690
另外一个使用网络技术的原因
就是你要显示的网页内容

00:03:10.157 --> 00:03:12.059
比如第三方网站的
一个网页

00:03:12.459 --> 00:03:13.727
这个网站
你不能控制

00:03:14.027 --> 00:03:16.663
可能就要用到Safari视图控制器

00:03:16.730 --> 00:03:18.398
如果不是
你也许可以去听听

00:03:18.465 --> 00:03:21.602
去年的演讲
“介绍Safari视图控制器”

00:03:22.903 --> 00:03:26.106
但如果你显示的内容
是你自己的或者你可以控制的

00:03:26.173 --> 00:03:31.912
或是可自定义的HTML CSS
或JavaScript编写的内容

00:03:31.979 --> 00:03:34.281
或者是
可以提升应用体验的内容

00:03:34.615 --> 00:03:36.350
WKWebView
是最好的选择

00:03:36.717 --> 00:03:39.786
它实际上是个矩形
把网页内容拉入应用

00:03:40.354 --> 00:03:43.690
它引入了iOS 8
和OS 10 Yosemite

00:03:44.858 --> 00:03:47.561
若你还在使用WebView
或者UIWebView

00:03:47.828 --> 00:03:51.164
那你一定要考虑
升级到WKWebView

00:03:51.565 --> 00:03:54.735
事实上 升级到WKWebView
可以让你利用

00:03:54.801 --> 00:03:58.805
Nitro JavaScript
核心引擎和四级JIT编译器

00:03:58.872 --> 00:04:00.007
这能大大提升速度

00:04:00.741 --> 00:04:02.743
若想了解更多WKWebView信息

00:04:03.010 --> 00:04:07.314
我推荐2014年的演讲
介绍了现代化的WebKit API

00:04:08.282 --> 00:04:11.418
那么去年我们给WKWebView
添加了很多优秀的功能

00:04:11.485 --> 00:04:16.589
比如 加载文件URL和自定义用户代理字符串
还有WK网站数据存储API

00:04:17.858 --> 00:04:22.296
现今有了iOS 10和macOS Sierra
我们改进了3D-touch支持

00:04:23.063 --> 00:04:25.532
现在你的应用就可以执行这些好用的

00:04:25.599 --> 00:04:27.835
Peek和Pop事件
在WKWebView里

00:04:29.336 --> 00:04:31.438
就像我之前说的
因为你选了

00:04:31.505 --> 00:04:32.906
在应用里
应用网络技术

00:04:33.807 --> 00:04:35.142
并不意味着
你没有工具可用

00:04:35.209 --> 00:04:37.811
不论哪种情况
你可连接网络检查器

00:04:37.878 --> 00:04:40.214
发掘网页内容
或JavaScript活动情况

00:04:41.081 --> 00:04:44.985
但使用网络检查器前
你必须要激活develop菜单

00:04:45.219 --> 00:04:49.156
只要上传Safari设置
然后找到“高级”标签

00:04:49.356 --> 00:04:51.558
然后在底部
你会看到这个复选框

00:04:51.625 --> 00:04:53.961
写着在菜单栏显示Develop菜单

00:04:54.995 --> 00:04:56.730
那就点击它

00:04:56.964 --> 00:04:59.766
Develop菜单就会出现在
Safari的菜单栏里

00:05:01.735 --> 00:05:04.371
为让网络检查器
连接到iOS设备

00:05:04.438 --> 00:05:06.073
你要开启一个设置

00:05:06.607 --> 00:05:10.210
在iOS的设置应用里
点击Safari

00:05:10.511 --> 00:05:16.016
然后拉到底部 点击“高级”
然后把检查器设置打开

00:05:16.884 --> 00:05:18.652
现在你就可以
把设备连到Mac上

00:05:18.719 --> 00:05:20.654
在Safari里
检查Develop菜单

00:05:22.356 --> 00:05:24.558
Develop菜单里
有些很酷炫的东西

00:05:24.625 --> 00:05:26.627
你之前可能
从未注意到过

00:05:26.693 --> 00:05:28.962
就是你能看到设备的列表

00:05:29.029 --> 00:05:32.866
这里有已连接的iPhone
MacBook Pro和模拟器

00:05:33.500 --> 00:05:36.837
要连接一个设备
并开始使用这些工具

00:05:36.904 --> 00:05:39.206
进行调试
那么只要选择Device菜单

00:05:39.473 --> 00:05:43.377
就会收到 当前设备上运行的
WebViews和JSContexts 的列表

00:05:44.411 --> 00:05:46.580
这里的Mac应用
并没有使用WebKit

00:05:46.647 --> 00:05:48.015
而用JavaScript

00:05:48.148 --> 00:05:50.651
所以我可以直接连接它
并使用工具

00:05:51.585 --> 00:05:56.190
iOS里的应用只会出现在
用Xcode创建和运行的时候

00:05:56.924 --> 00:06:00.194
但是说到Mac应用
你还要做一件事

00:06:01.261 --> 00:06:05.299
就是保持应用的完整性
我们不会让任何人下载你的应用

00:06:05.365 --> 00:06:08.168
并用网络检查器
巡查你的应用

00:06:08.669 --> 00:06:10.103
所以你要添加
这个授权

00:06:10.170 --> 00:06:12.272
到应用本地开发的
授权文件里

00:06:13.307 --> 00:06:15.542
你可能已经有了一个
授权文件

00:06:15.609 --> 00:06:17.477
如果没有
创建一个也很简单

00:06:17.544 --> 00:06:20.581
你只要创建新的plist
拓展名为.entitlements

00:06:20.914 --> 00:06:25.419
并且Xcode的创建设置里
定义一个代码签名的授权传递路径

00:06:26.753 --> 00:06:28.488
这个要在
开发的时候添加

00:06:28.555 --> 00:06:30.791
之后在
运行应用的时候删除

00:06:31.792 --> 00:06:32.893
一旦有了这个授权

00:06:33.126 --> 00:06:35.395
你的设备和应用就
出现在Develop菜单

00:06:35.462 --> 00:06:36.496
这样就可以连接了

00:06:36.830 --> 00:06:42.669
轻松把网络检查器连接到
JSContext和WebViews上了

00:06:44.805 --> 00:06:47.674
我们已正常运行了
网络检查器和应用

00:06:48.675 --> 00:06:51.078
该谈谈网络检查器里
新功能了

00:06:51.144 --> 00:06:53.814
我想首先讲讲
分析JavaScript代码

00:06:53.881 --> 00:06:54.715
分析JavaScript

00:06:54.781 --> 00:06:57.584
JavaScript的分析器
已经存在挺长时间了

00:06:57.651 --> 00:06:59.620
今年它变得更好

00:06:59.686 --> 00:07:03.156
更有效率
能帮助你迅速找到

00:07:03.223 --> 00:07:05.392
哪里调出的JavaScript
成本最高

00:07:05.459 --> 00:07:06.660
原因很简单

00:07:07.628 --> 00:07:11.965
新的分析器采用了取样技术
不会影响性能

00:07:12.032 --> 00:07:13.734
比以前好太多

00:07:14.568 --> 00:07:17.504
我们的分析器
在编译器能用之前的时代

00:07:17.571 --> 00:07:18.739
实际是个翻译器

00:07:19.206 --> 00:07:23.143
但是现在我们有了
这个强大的四级JIT编译器

00:07:23.443 --> 00:07:26.947
那么这个分析器
就真正成为样本分析器

00:07:28.048 --> 00:07:31.518
样本分析器告诉你
代码把时间都用在哪里

00:07:31.752 --> 00:07:35.622
帮你解答
哪个代码占用的时间最多？

00:07:36.590 --> 00:07:39.059
它在运行程序中的取样
以每毫秒为单位

00:07:39.126 --> 00:07:40.594
并且短暂地
停顿执行

00:07:40.661 --> 00:07:43.130
并快照
所有正在运行的代码

00:07:44.598 --> 00:07:45.966
它还可以取样

00:07:46.033 --> 00:07:48.936
在代码运行于
JIT编译器所有四级的时候

00:07:49.002 --> 00:07:52.039
所以它的取样速度
跟你代码的实际速度差不多

00:07:52.873 --> 00:07:56.443
由于断点处理
会导致代码去优化

00:07:56.510 --> 00:07:57.978
我们暂时不管它们

00:07:58.545 --> 00:08:02.583
那么当你分析的时候
你就可以了解网页应用的真实性能

00:08:03.050 --> 00:08:06.854
使用样本分析器
对性能几乎没有损害

00:08:07.120 --> 00:08:10.157
这就意味着
当你分析代码的时候

00:08:10.657 --> 00:08:13.560
速度高达以前的30倍

00:08:14.361 --> 00:08:17.931
这就让代码分析过程
更快也更简单

00:08:17.998 --> 00:08:20.434
而且收到的数据
也更准确

00:08:21.869 --> 00:08:25.939
这个进步真令人振奋 因为我们团队
和网络检查器团队

00:08:26.006 --> 00:08:29.610
能利用它来发现
可以提升速度的地方

00:08:29.676 --> 00:08:31.044
就在网络检查器本身

00:08:32.412 --> 00:08:34.515
好了
现在我们有了样本分析器

00:08:34.581 --> 00:08:37.618
看看如何利用网络检查器
帮我们找到问题

00:08:38.519 --> 00:08:41.688
这个内容很多
但是可以简单的拆分开来

00:08:41.788 --> 00:08:43.991
更方便的是
这都是你已经熟悉的代码

00:08:44.958 --> 00:08:47.160
当我们说到
分析JavaScript时

00:08:47.227 --> 00:08:50.597
意思是在Events里
为JavaScript记录时间线

00:08:50.664 --> 00:08:52.399
这就是Events视图

00:08:52.733 --> 00:08:56.270
显示了一列单独而且具体的
JavaScript事件

00:08:56.570 --> 00:09:00.073
特别的是
这里都是D3库的代码

00:09:00.140 --> 00:09:02.910
所以它能更方便
调试代码

00:09:02.976 --> 00:09:05.612
和分析代码
在你正在使用的库里

00:09:06.346 --> 00:09:09.449
而且这里的每一条
都是代码运行的事件

00:09:09.716 --> 00:09:13.187
这是代码进出
JavaScript核心引擎的情况

00:09:14.087 --> 00:09:15.856
包括了
监听事件的回调

00:09:15.923 --> 00:09:19.193
比如动画框架的条目
是在请求动画框架处理器

00:09:20.160 --> 00:09:22.596
脚本评估条目
显示JavaScript文件

00:09:22.663 --> 00:09:24.331
的上传和首次评估

00:09:25.265 --> 00:09:27.234
这里还有一些
时间信息

00:09:27.701 --> 00:09:30.971
告诉你运行的代码
所花费的时间

00:09:32.039 --> 00:09:34.708
所以如果有哪个
超过了10或15毫秒

00:09:34.775 --> 00:09:36.343
你就快要打破

00:09:36.410 --> 00:09:38.812
60帧每秒的
流畅性能底线

00:09:40.647 --> 00:09:43.217
Events视图很有用
但是还有另一个视图

00:09:43.283 --> 00:09:46.119
是我们为你添加的
叫做Call Trees视图

00:09:46.553 --> 00:09:49.790
如果你用过其他分析工具
那么对这个应该很熟悉

00:09:51.225 --> 00:09:54.161
只要点击这个菜单
然后转换到Call Trees视图

00:09:55.429 --> 00:09:59.399
现在显示了调用堆栈里
函数的累计运行时间

00:10:00.133 --> 00:10:01.768
这个叫做Top Down视图

00:10:01.835 --> 00:10:04.137
你可以用它
深入发掘Call Tree

00:10:04.204 --> 00:10:06.707
来找到
耗费大量时间的热函数

00:10:07.774 --> 00:10:10.177
但我最喜欢的视图是
Bottom Up视图

00:10:12.513 --> 00:10:14.448
它能直接让我找到
最热的函数

00:10:14.515 --> 00:10:16.650
就是取样最频繁的函数

00:10:17.551 --> 00:10:19.319
这里罗列的
是调出的函数

00:10:19.386 --> 00:10:21.622
按照用时
从大到小分类

00:10:21.688 --> 00:10:26.593
它反转了Call Tree
让你能直接对比各个函数的耗时

00:10:27.861 --> 00:10:30.731
你能准确地看到
耗时最多的地方

00:10:32.332 --> 00:10:35.169
你可以展开这一条
并按照路径返回

00:10:35.235 --> 00:10:36.837
找到耗时最多的函数

00:10:37.471 --> 00:10:41.108
你就能知道这个成本最高的代码
是何时何地调出的

00:10:42.809 --> 00:10:45.312
那么关于这部分
有请我的同事

00:10:45.379 --> 00:10:46.980
Brian Burg
上台为大家展示

00:10:55.155 --> 00:10:57.858
谢谢你 Jon
样本分析器很好用

00:10:57.925 --> 00:11:00.494
因为它可以提取
十分复杂的内容

00:11:00.561 --> 00:11:03.564
并进行分析
让你看到十分精确的信息

00:11:03.630 --> 00:11:05.132
而且你可以让它
跑的更快

00:11:05.832 --> 00:11:09.469
为了给你们展示
我要用我制作的iPad应用

00:11:09.770 --> 00:11:12.139
叫做卫星跟踪器
在这里看看

00:11:15.676 --> 00:11:19.680
卫星跟踪器
会展示给你现在或任何时间

00:11:20.080 --> 00:11:21.615
卫星所在的位置

00:11:21.882 --> 00:11:24.618
你可以选择
地球上的不同地点

00:11:25.219 --> 00:11:26.787
也可以选择不同的卫星

00:11:28.222 --> 00:11:29.223
不同的时区

00:11:30.023 --> 00:11:30.858
这很棒吧

00:11:31.725 --> 00:11:33.460
如果你担心
头上盘旋的卫星

00:11:33.527 --> 00:11:36.330
要带个锡纸帽子以防万一
这个应用就是理想之选

00:11:37.064 --> 00:11:39.633
但是这里有个小问题

00:11:39.700 --> 00:11:44.071
如果很多卫星
或者很多卫星组件

00:11:44.137 --> 00:11:47.207
像这样挤爆了
那么帧率的波动会很大

00:11:47.674 --> 00:11:49.676
这肯定不是
60帧每秒

00:11:49.743 --> 00:11:50.878
它会一直波动

00:11:51.411 --> 00:11:53.981
这样就可以用
样本分析器来查找

00:11:54.047 --> 00:11:55.849
发生了什么
为什么这么慢

00:11:57.751 --> 00:12:03.257
我们要做的就是打开Safari
并进入Develop菜单

00:12:03.957 --> 00:12:06.026
找到这里的iPad
并连接上

00:12:07.594 --> 00:12:11.098
那么我要做的第一件事
就是进入Frames视图

00:12:11.164 --> 00:12:14.001
看看现在的位置
帧率如何

00:12:14.067 --> 00:12:16.069
那么开始记录

00:12:17.137 --> 00:12:18.572
我再转回iPad

00:12:19.373 --> 00:12:20.774
做点什么

00:12:22.876 --> 00:12:24.244
比如转动一下

00:12:25.746 --> 00:12:27.514
或者换一个卫星

00:12:29.383 --> 00:12:30.250
换个时区

00:12:30.884 --> 00:12:32.219
好了
现在回去看看

00:12:35.489 --> 00:12:36.723
好的
把这个缩小

00:12:37.424 --> 00:12:40.227
所有的性能
就都显示在这里了

00:12:40.294 --> 00:12:44.865
有的时候是60帧每秒
像左边这些

00:12:45.299 --> 00:12:47.367
在中间
则上下都有

00:12:47.434 --> 00:12:48.802
因为我们在
更改视图

00:12:49.136 --> 00:12:51.972
这一些
就太慢了

00:12:52.940 --> 00:12:55.042
我想知道
出了什么问题

00:12:56.710 --> 00:12:58.879
那么我就转到
Events视图

00:13:00.981 --> 00:13:03.283
点击JavaScript
和Events时间线

00:13:03.350 --> 00:13:06.019
重点看看
样本分析器的数据

00:13:07.955 --> 00:13:10.691
就像Jon之前演示的那样
这里的Events视图

00:13:10.757 --> 00:13:12.926
会显示所有
运行循环里的内容

00:13:12.993 --> 00:13:16.096
这个例子里
就是动画和模拟

00:13:16.163 --> 00:13:18.398
就是我们在
不断地渲染帧

00:13:18.465 --> 00:13:22.769
这不是很有用
因为无法找到耗时最多的地方

00:13:23.537 --> 00:13:25.939
那么我们转到
Call Trees视图

00:13:27.574 --> 00:13:30.844
这里我们看到Top Down
Call Tree

00:13:31.211 --> 00:13:35.849
集合显示了
所有的渲染帧

00:13:35.916 --> 00:13:37.484
都是最耗时的地方

00:13:38.352 --> 00:13:42.356
展开这个就能看到
D3有一个Timer函数

00:13:42.422 --> 00:13:45.893
它调出一些代码
画了一些场景

00:13:46.960 --> 00:13:49.863
这些场景包括
卫星

00:13:49.930 --> 00:13:52.099
和时间等

00:13:52.165 --> 00:13:56.303
这个很棒
能让我们了解代码在做什么

00:13:56.670 --> 00:13:59.373
但是如果要想找出
哪个函数最耗费

00:14:00.073 --> 00:14:02.376
最好还是去看
Bottom Up视图

00:14:04.044 --> 00:14:09.316
这里我们列出了所有函数
无论谁调用它们

00:14:09.917 --> 00:14:12.686
我们看到这个fillText

00:14:12.753 --> 00:14:15.322
和tangent
是最耗费的两个

00:14:15.422 --> 00:14:18.559
那为什么
会调出tangent呢？

00:14:18.792 --> 00:14:23.630
我们展开这一行
看看调令来源

00:14:23.830 --> 00:14:28.202
就在这里
是_plotSatellites

00:14:28.435 --> 00:14:33.273
好像正在计算转换
用来绘制地球

00:14:34.041 --> 00:14:35.876
好的
这些看着都很正常

00:14:36.443 --> 00:14:39.079
也许我该找出数学课本
让它算得快一点

00:14:40.314 --> 00:14:41.682
现在看看
fillText

00:14:41.748 --> 00:14:45.652
换个画面
回到这里的应用

00:14:46.320 --> 00:14:51.458
我们正在当前时间上绘制文本
也在每个数据点上绘制

00:14:52.492 --> 00:14:53.460
这说得通

00:14:53.527 --> 00:14:57.898
但是如果仔细看
我们实际上把这个时间画了两次

00:14:58.699 --> 00:15:00.000
这就有点奇怪

00:15:00.767 --> 00:15:03.403
所以我们展开这一行

00:15:04.238 --> 00:15:06.707
就能看到
调令来自哪里

00:15:07.975 --> 00:15:11.245
这里我们好像
一次画了两个不同的前景

00:15:11.778 --> 00:15:14.114
这大概
不是我们想要的

00:15:15.516 --> 00:15:17.284
那么来找找
哪儿出了问题

00:15:17.417 --> 00:15:20.120
如果像这样
画了两个前景

00:15:20.220 --> 00:15:23.290
那么我们的工作量
实际就是所需的两倍

00:15:24.858 --> 00:15:28.729
为了让你的记忆更清晰
记住我们有个平面地图

00:15:28.795 --> 00:15:31.431
然后有这个地球
它在转动

00:15:32.833 --> 00:15:36.303
那么
现在回到代码

00:15:37.771 --> 00:15:41.942
找一找是什么
控制着两个地图的切换

00:15:42.009 --> 00:15:43.010
估计哪里弄错了

00:15:46.513 --> 00:15:49.783
改变地点的时候
我们会让两个地球互换

00:15:51.051 --> 00:15:52.252
这是 updateLocation

00:15:52.819 --> 00:15:57.191
好的 因为已经有一个地图
就不再需要另一个

00:15:57.291 --> 00:16:00.494
这是有道理的
因为这里我们添加了隐藏类

00:16:00.561 --> 00:16:02.863
就为了不让它
显示出来

00:16:04.298 --> 00:16:07.701
这里在_globeMap
我们定义running值为真

00:16:07.768 --> 00:16:09.236
在整个运行中

00:16:09.603 --> 00:16:12.506
而且在place中声明
我们显示的不是_globeProjection

00:16:12.573 --> 00:16:13.407
这是对的

00:16:13.473 --> 00:16:15.042
当我们显示
平面地图

00:16:15.108 --> 00:16:17.144
我们不会显示地球
它也不会运行

00:16:18.178 --> 00:16:20.280
这个平面地图
看上去好像

00:16:20.347 --> 00:16:22.382
一直在运行
UI也在运行

00:16:22.516 --> 00:16:26.086
这也挺奇怪的

00:16:26.486 --> 00:16:28.655
那么我们回到地图
试着做点儿什么

00:16:32.192 --> 00:16:34.628
这里我们选择
这个数据组

00:16:35.762 --> 00:16:37.431
然后进入Earth

00:16:38.465 --> 00:16:43.237
它的帧率要好于
只做世界地图

00:16:43.303 --> 00:16:44.505
那么
这就很有道理

00:16:44.571 --> 00:16:47.574
我想我们在世界地图活动的时候
画了两张地图

00:16:47.641 --> 00:16:49.443
但是在平面地图的时候
只画了一个

00:16:49.510 --> 00:16:53.914
那么我们就在这里
改变这个条件

00:16:59.786 --> 00:17:01.288
糟糕
应该反过来

00:17:04.558 --> 00:17:08.996
好的 先停下
看看有没有修复

00:17:12.598 --> 00:17:14.001
回到iPad

00:17:15.502 --> 00:17:16.737
好的
这看上去很流畅

00:17:16.803 --> 00:17:17.671
来到这里

00:17:19.006 --> 00:17:19.839
恩 很好

00:17:22.041 --> 00:17:22.910
看上去不错

00:17:22.976 --> 00:17:25.913
那么我们再去检查
时间渲染

00:17:25.979 --> 00:17:29.249
看看是不是
60帧每秒

00:17:30.684 --> 00:17:32.386
那么
回到Frames视图

00:17:33.053 --> 00:17:37.024
然后开始记录
很不错

00:17:37.090 --> 00:17:40.160
我转动地球的时候
有点慢

00:17:40.227 --> 00:17:42.496
但稳定度
看上去...

00:17:42.563 --> 00:17:45.299
不错
绝对在60帧每秒以下

00:17:45.832 --> 00:17:49.736
在这里有一个条
只要低于它就是好的

00:17:52.940 --> 00:17:56.610
现在卫星跟踪器
快了很多

00:17:56.677 --> 00:17:58.779
我们就知道
什么时候带上帽子

00:17:58.946 --> 00:17:59.780
这很棒

00:18:00.247 --> 00:18:04.017
这就是个简单的例子
关于如何使用样本分析器

00:18:04.084 --> 00:18:07.788
来发现最繁忙的内容
并让它运行的更快

00:18:08.689 --> 00:18:12.893
下面Jon会跟大家讲讲
内存和分配

00:18:21.802 --> 00:18:22.636
谢谢 Brian

00:18:24.371 --> 00:18:27.074
你看到了
分析很迅速

00:18:27.274 --> 00:18:29.443
它能让你了解
代码的真实速度

00:18:29.510 --> 00:18:31.311
这样你就能
获得十分精确的数据

00:18:31.678 --> 00:18:34.448
再看看JavaScript
和Events时间线

00:18:34.948 --> 00:18:37.918
并用它们找到
缓慢的回调处理器和定时器

00:18:37.985 --> 00:18:40.454
或者在Events视图里
缓慢的脚本初始化

00:18:41.822 --> 00:18:44.157
请用新的Call Trees视图
来了解耗时

00:18:44.224 --> 00:18:47.227
因为它们会沿着
你选择的时间线堆积起来

00:18:48.228 --> 00:18:50.464
记着Bottom Up
是你的新朋友

00:18:50.531 --> 00:18:54.201
它能帮助你找到
最需要优化的地方

00:18:55.869 --> 00:18:58.071
那么现在我们已经看过了
新的样本分析器

00:18:58.138 --> 00:19:00.574
和新的JavaScript
Call Trees视图

00:19:00.908 --> 00:19:04.611
我很激动能用更好的工具
来优化CPU时间

00:19:04.678 --> 00:19:06.513
这样就能给用户
快速的体验

00:19:06.580 --> 00:19:08.282
并帮他们
节省了电池

00:19:08.782 --> 00:19:10.551
这真的不错
现在我们继续

00:19:10.617 --> 00:19:12.219
看看性能的另一方面

00:19:12.586 --> 00:19:14.254
就是了解
内存都去哪儿了

00:19:15.189 --> 00:19:17.858
你肯定想更有效率地使用
网页内容的内存

00:19:17.925 --> 00:19:19.526
因为这是有限资源

00:19:19.960 --> 00:19:24.731
有效地使用内存可以
优化网页内容的比例

00:19:24.798 --> 00:19:26.600
并能处理
大型数据组

00:19:28.335 --> 00:19:32.472
而且内存占用过多会降低性能
我们并不想这样

00:19:33.273 --> 00:19:35.175
它也会让
你的网页内容崩溃

00:19:35.242 --> 00:19:36.777
这更非我们所愿

00:19:37.311 --> 00:19:41.682
好消息是若你运行WKWebView
它会以单独的进程运行

00:19:41.982 --> 00:19:43.450
不会让
整个应用崩溃

00:19:43.517 --> 00:19:45.752
但是这仍然不是
一个好的用户体验

00:19:46.286 --> 00:19:48.755
为了帮你解决这些问题
我们添加了两个新时间线

00:19:48.822 --> 00:19:50.557
给网络检查器
和Safari 10

00:19:51.859 --> 00:19:55.295
当启动新网络检查器
新时间线就默认关闭

00:19:55.362 --> 00:19:56.730
所以要打开它们

00:19:56.797 --> 00:19:59.633
你只要点击Edit
就在时间线上面

00:20:01.134 --> 00:20:03.704
就可以配置
自己想看的时间线

00:20:03.770 --> 00:20:06.673
这样就可以只研究
自己想用的那个

00:20:06.740 --> 00:20:08.342
就和Instruments应用一样

00:20:09.543 --> 00:20:12.946
只要开启新的时间线
就可以记录新的时间线了

00:20:13.280 --> 00:20:15.983
但你可能不想
让它们同时运行

00:20:16.550 --> 00:20:19.386
JavaScript和
Events时间线样本分析器

00:20:19.453 --> 00:20:21.188
虽然负载较少
但还是有

00:20:21.722 --> 00:20:24.491
而JavaScript Allocation
的时间线会添加更多进程

00:20:24.558 --> 00:20:27.761
在垃圾回收过程中
这会影响性能

00:20:28.428 --> 00:20:31.965
那我们就一直开着
Memory时间线

00:20:32.032 --> 00:20:35.002
那么在记录一个时间线的时候
你会看到这个

00:20:35.936 --> 00:20:39.907
这个新的Memory时间线图表
显示了内存如何分配

00:20:39.973 --> 00:20:42.342
到不同的目录里
在不同的时间

00:20:43.076 --> 00:20:44.878
这里有一系列图表

00:20:44.945 --> 00:20:48.515
帮你了解
内存的使用和划分

00:20:49.750 --> 00:20:52.319
Breakdown表显示了
内存如何分配给

00:20:52.386 --> 00:20:56.356
JavaScript和图画
和构成页面的分层

00:20:56.423 --> 00:20:58.825
以及其他
引擎相关的网页

00:21:00.060 --> 00:21:03.463
Max Comparison图
帮你研究内存高峰

00:21:03.530 --> 00:21:04.831
这里有一个高的水印

00:21:04.898 --> 00:21:07.401
帮你观察
过去的内存问题

00:21:07.467 --> 00:21:10.437
你甚至可以分离各个峰
通过选择一个特定的部分

00:21:10.504 --> 00:21:14.041
或者在一个峰值周围
选择一个特定的时间段

00:21:14.541 --> 00:21:17.945
然后你就可以使用
下面的目录分类

00:21:18.011 --> 00:21:20.180
来看看是什么
造成了大部分高峰

00:21:20.781 --> 00:21:23.784
这里的每个图表
都是独立测量的

00:21:23.851 --> 00:21:26.653
所以你可以清楚地看到
不同时间的变化

00:21:28.021 --> 00:21:30.591
JavaScript里的峰值
显示的是

00:21:30.657 --> 00:21:33.527
大量新对象
被创建和引用的地方

00:21:33.660 --> 00:21:36.763
其中包括的对象
有字符串对象和函数

00:21:37.164 --> 00:21:41.201
以及所有支持它们的引擎数据
比如结构数据和编译代码

00:21:41.902 --> 00:21:44.605
当你看到
JavaScript的用量下降

00:21:44.671 --> 00:21:47.241
就是说垃圾回收
在回收内存

00:21:48.308 --> 00:21:50.811
图片显示了
分配给图片的内存

00:21:50.878 --> 00:21:52.713
这些图片都
通过解码显示

00:21:52.980 --> 00:21:54.815
这里的图片数据
比较大

00:21:54.882 --> 00:21:57.551
通常用于
可以在视口显示的图片

00:21:59.052 --> 00:22:01.722
层显示的是
图层内存

00:22:01.788 --> 00:22:04.858
分配在WebKits
tileGrid复合层

00:22:04.925 --> 00:22:06.093
和其他引擎层

00:22:07.227 --> 00:22:08.896
页面就囊括了
所有其他的东西

00:22:08.962 --> 00:22:10.931
引擎所追踪的
所有内容

00:22:10.998 --> 00:22:14.234
比如DOM和页面风格
以及字体渲染数据

00:22:14.301 --> 00:22:16.470
内存缓存和系统分配

00:22:17.271 --> 00:22:19.306
所以这个分类
能让你很好的保证

00:22:19.373 --> 00:22:22.242
内存用量
符合你的预期

00:22:22.943 --> 00:22:26.446
若你有很多JavaScript内容
你要明白

00:22:26.513 --> 00:22:30.150
JavaScript会是分类图表里
用量最多的一类

00:22:30.217 --> 00:22:33.086
在时间线图表里
你可能会随着时间看到更多变化

00:22:33.954 --> 00:22:38.125
但是对于多图片的页面
比如画廊

00:22:38.192 --> 00:22:41.428
那么分层和图片目录
就可能是最大的

00:22:41.495 --> 00:22:42.896
随着时间
变化也更多

00:22:43.830 --> 00:22:47.501
这就是Safari 10里
最新的Memory时间线

00:22:49.203 --> 00:22:53.540
Memory时间线的补充就是
新的JavaScript Allocations时间线

00:22:54.074 --> 00:22:56.343
你不仅能看到
不同时间里内存的变化

00:22:56.510 --> 00:22:58.111
还能更细的探究

00:22:58.178 --> 00:23:00.781
JavaScript Allocations
的真实情况

00:23:00.948 --> 00:23:06.553
对此我们有个强大的工具
JavaScript Allocation Snapshots

00:23:07.321 --> 00:23:08.889
快照的强大之处

00:23:08.956 --> 00:23:12.426
是你可在JavaScripts堆里
对一个时刻进行快照

00:23:12.726 --> 00:23:15.696
然后你就可以深入看到
所有被分配的东西

00:23:16.129 --> 00:23:18.765
但是更强大的是
你有两个快照的时候

00:23:19.466 --> 00:23:22.436
你就可以回头再看
并进行对比

00:23:22.503 --> 00:23:25.639
对比快照
是我们最强大的工具之一

00:23:25.706 --> 00:23:29.243
它可以解答
我是不是做了不必要的分配？

00:23:30.110 --> 00:23:32.579
一定要利用它
因为你需要多个快照

00:23:32.646 --> 00:23:36.783
这也就是为什么
默认每10秒照一次

00:23:37.217 --> 00:23:39.753
不仅要在记录开始
还要在结束

00:23:40.153 --> 00:23:42.923
快照是在时间线上设计的
所以它们能连到

00:23:42.990 --> 00:23:44.825
其他时间线上
发生的事情

00:23:44.892 --> 00:23:46.894
在这里
其他的都被我关了

00:23:48.128 --> 00:23:50.330
这些快照在下面列出
并附了一些细节

00:23:50.397 --> 00:23:51.899
比如堆的
时间和大小

00:23:52.766 --> 00:23:54.501
要了解一个特定的问题

00:23:54.568 --> 00:23:56.870
就通常需要
在开始和结束的时候快照

00:23:56.937 --> 00:23:58.739
围绕你认为
内存会出问题的地方

00:23:59.173 --> 00:24:00.541
这里有三个技巧

00:24:01.074 --> 00:24:03.710
你可以依赖自动快照
每10秒一次

00:24:04.478 --> 00:24:07.247
或者可以亲自快照
就按快照键

00:24:08.282 --> 00:24:09.750
或者用代码执行

00:24:10.551 --> 00:24:14.254
最简单的找到问题的方法
还是改代码

00:24:14.555 --> 00:24:16.623
调出
takeHeapSnapshot API

00:24:16.690 --> 00:24:19.526
传递一个自定义的标签参数
它可以是任何

00:24:19.593 --> 00:24:21.261
之后能帮你识别它的东西

00:24:21.695 --> 00:24:24.198
还有你要做
一对快照

00:24:24.264 --> 00:24:27.100
在你认为导致问题的代码
的前后

00:24:28.035 --> 00:24:30.537
你还可以通过快照
来使用这个代码

00:24:30.604 --> 00:24:32.940
在一个循环内的
工作之间

00:24:33.340 --> 00:24:34.308
分析内存

00:24:34.374 --> 00:24:38.846
下面讲讲要时刻牢记的几点
关于takeHeapSnapshot API

00:24:39.179 --> 00:24:43.050
要记住快照会增添一些额外的进程
在垃圾回收进程中

00:24:43.116 --> 00:24:45.552
这会影响性能
所以你一定要注意

00:24:45.619 --> 00:24:48.088
你的代码是否
频繁的发射快照

00:24:49.189 --> 00:24:52.726
你也要捕捉到
前后不同的信息

00:24:52.793 --> 00:24:55.462
当代码在一个循环之间的
某个时刻运行时

00:24:56.630 --> 00:24:57.698
不要留下这个

00:24:57.764 --> 00:25:00.734
如果你把它留下
对大部分用户来说没问题

00:25:00.801 --> 00:25:04.204
但一旦有人运行网络检查器
它们就会使用所有的快照

00:25:04.271 --> 00:25:05.506
你大概也不想这样

00:25:05.572 --> 00:25:08.876
所以要记住
在启动前一定把它们删除

00:25:09.776 --> 00:25:11.411
那么这些快照
都显示了什么？

00:25:13.146 --> 00:25:14.181
让我们来看一看

00:25:14.848 --> 00:25:18.619
你只要点击时间线上的
快照图标

00:25:18.685 --> 00:25:21.555
或者在快照列表条目里
点击Arrow按键

00:25:22.422 --> 00:25:25.225
你看到的这一列对象
都是之前分配在堆里的

00:25:25.292 --> 00:25:27.294
快照有两个视图

00:25:27.694 --> 00:25:29.129
这是Instances视图

00:25:29.196 --> 00:25:33.033
展示了堆里的对象列表
按照类来分组

00:25:33.634 --> 00:25:35.736
另一个是
对象图像视图

00:25:35.802 --> 00:25:37.871
这实际上
概括了所有东西

00:25:37.938 --> 00:25:40.073
所有的所有

00:25:40.507 --> 00:25:42.109
如果你很熟悉这个代码

00:25:42.176 --> 00:25:45.946
它就能很好地帮助你
确认事情或者找到相应的位置

00:25:46.947 --> 00:25:49.183
但是实际上
更有用的视图

00:25:49.249 --> 00:25:51.785
是在Instances视图里

00:25:51.852 --> 00:25:54.221
它的强大在于
你可以轻松地找到对象

00:25:54.288 --> 00:25:57.057
不论他们在属性路径里
藏得多深

00:25:57.958 --> 00:26:00.494
这里的Count可以帮你
意识到潜在的问题

00:26:00.561 --> 00:26:02.162
就是它们
无法达到预期的时候

00:26:02.229 --> 00:26:05.199
比如我能否实现
4000多个字符串对象？

00:26:06.733 --> 00:26:10.470
你可以展开这个Classes
来看看所有分配到这里的对象

00:26:11.238 --> 00:26:14.942
然后判断什么是什么
通过这么多不同的线索

00:26:15.008 --> 00:26:16.076
Class是一线索

00:26:16.944 --> 00:26:19.379
另外就是
对象的实际属性

00:26:19.713 --> 00:26:21.648
这能让我们很快了解
什么是什么

00:26:22.516 --> 00:26:24.785
但是最简单的
了解对象的方法

00:26:24.852 --> 00:26:29.323
就是悬停在这个对象识别器上
你就会看到这个

00:26:30.924 --> 00:26:34.795
这里实际上显示的是
到对象的最短路径

00:26:35.362 --> 00:26:38.098
它告诉了你究竟是什么
让这个对象保持活动

00:26:38.732 --> 00:26:40.868
它基本上总会给你
你需要的答案

00:26:41.768 --> 00:26:45.572
特别是在JavaScript的
垃圾回收里

00:26:45.639 --> 00:26:48.509
这就是能
立刻解开疑惑的方法

00:26:49.643 --> 00:26:53.013
但是它最重要的功能
和最关键的要点

00:26:53.080 --> 00:26:55.048
在于它能
比较两个快照

00:26:55.349 --> 00:26:57.551
看看这个
当你已经收集了一些快照

00:26:58.218 --> 00:27:00.521
只要点击此处“比较快照”按键

00:27:01.321 --> 00:27:04.992
然后选择Baseline快照
再选一个对比

00:27:05.792 --> 00:27:06.627
一下子

00:27:07.027 --> 00:27:09.263
你就有了一个
新的对比快照可以研究

00:27:09.796 --> 00:27:11.131
这个十分有意义

00:27:11.498 --> 00:27:13.467
因为现在只能看到
新的对象

00:27:13.534 --> 00:27:16.637
在两个点之间
在两个快照之间

00:27:18.172 --> 00:27:21.475
展开对象类分组
可以看到所有的对象分配

00:27:21.542 --> 00:27:24.945
预览中显示了它们的名字
和类似遥测数据的东西

00:27:25.646 --> 00:27:27.848
这里就说明
它是卫星对象

00:27:28.348 --> 00:27:31.151
这里的弹窗显示
_Satellites Array属性

00:27:32.319 --> 00:27:34.054
由于这是
一个快照对比

00:27:34.121 --> 00:27:36.857
卫星的对象
都是新分配的

00:27:36.924 --> 00:27:39.359
这是个很重要的线索
显示代码在做什么

00:27:39.893 --> 00:27:42.296
那么为了让你们实际看到
这些新的存储功能

00:27:42.362 --> 00:27:44.798
我要有请Brian回到台上
来做另一个演示

00:27:51.171 --> 00:27:52.005
谢谢 Jon

00:27:52.606 --> 00:27:55.742
我把卫星跟踪器
给了我的朋友Ed

00:27:55.809 --> 00:27:58.545
他熬了一夜
在玩这个

00:28:00.113 --> 00:28:04.251
他很开心
因为他从来没有被卫星跟踪过

00:28:04.351 --> 00:28:05.452
但是这就有个问题

00:28:05.519 --> 00:28:09.122
它运行时间越长
最终会变得越来越慢

00:28:09.790 --> 00:28:13.026
这在我看来
很像传统的内存

00:28:13.093 --> 00:28:15.262
打开时间越久
就越慢

00:28:15.929 --> 00:28:20.601
我想在卫星跟踪器里
用这些新存储工具来看看

00:28:20.667 --> 00:28:22.369
我们是否泄漏了
一些内存

00:28:23.637 --> 00:28:26.173
那么第一件事

00:28:26.240 --> 00:28:28.575
我的iPad在这儿

00:28:29.309 --> 00:28:31.545
我要回到
网络检查器...

00:28:34.381 --> 00:28:35.782
并且检查这个应用

00:28:36.717 --> 00:28:38.418
我要做的第一件事

00:28:39.286 --> 00:28:43.857
在我不知道问题在哪儿的时候
就是要使用Memory时间线

00:28:43.924 --> 00:28:48.595
它会告诉我
页面上大概发生了什么

00:28:48.662 --> 00:28:50.030
那么我们开始记录

00:28:51.131 --> 00:28:52.766
转回来

00:28:52.833 --> 00:28:57.604
我在两个卫星之间
来回切换

00:28:58.138 --> 00:29:00.741
也许我会在这里
添加一些效果

00:29:02.142 --> 00:29:04.611
好的
我在来回切换

00:29:06.613 --> 00:29:08.048
好了
现在去时间线看看

00:29:11.351 --> 00:29:15.422
在时间线概览中
你看到一个堆积线形图

00:29:15.489 --> 00:29:17.624
显示了所有不同的部分
和相关的大小

00:29:17.858 --> 00:29:21.128
如果你点击这里
会看到更多的细节

00:29:22.563 --> 00:29:24.831
那么这个页面上
没有图片

00:29:24.898 --> 00:29:25.766
都是画布

00:29:26.400 --> 00:29:27.801
分层也很平面

00:29:28.268 --> 00:29:30.804
页面有些波动
有些内容在垃圾回收

00:29:30.871 --> 00:29:31.705
没有问题

00:29:32.306 --> 00:29:35.175
如果你仔细看看JavaScript
你会看到...

00:29:35.776 --> 00:29:37.444
虽然有些东西
被垃圾回收

00:29:37.511 --> 00:29:40.280
但是整体来说
它还是在随着时间堆积

00:29:40.614 --> 00:29:44.318
如果我们运行一整晚
那估计会堆积更多

00:29:44.952 --> 00:29:51.358
下一步就是启用heap快照
或allocation快照

00:29:51.425 --> 00:29:54.194
这样我们就能找到
随着时间而分配的内容

00:29:56.630 --> 00:30:00.667
为了实现这个
我们要开始新的记录

00:30:03.103 --> 00:30:06.139
这有个快捷键
Shift 点击或Shift 空格

00:30:06.206 --> 00:30:08.942
这样就会启动新的记录
而不是继续之前那个

00:30:09.510 --> 00:30:11.778
等等
我忘了改时间线

00:30:11.845 --> 00:30:13.046
去掉Memory

00:30:14.314 --> 00:30:15.916
选上Allocations

00:30:18.252 --> 00:30:19.520
好了
开始记录

00:30:20.387 --> 00:30:21.288
回到iPad

00:30:23.190 --> 00:30:25.759
添加了小小的
takeHeapSnapshot键

00:30:25.826 --> 00:30:29.229
我已给控制台添加了
一些takeHeapSnapshot的调令

00:30:29.296 --> 00:30:32.633
用于切换两个卫星小组
和其他操作

00:30:33.800 --> 00:30:38.038
对这个记录
我要转动地图

00:30:38.105 --> 00:30:41.942
然后不断在
两个卫星中切换

00:30:46.580 --> 00:30:49.416
我们还要看看Spy Satellites
看上去也有关联

00:30:52.419 --> 00:30:54.254
好了 你会发现
开始有点卡了

00:30:54.321 --> 00:30:57.591
因为我们给JavaScript堆里的
所有东西拍了快照

00:30:57.658 --> 00:31:00.060
因此
产生了很多对象

00:31:00.127 --> 00:31:01.795
这会大幅降低
应用的速度

00:31:01.862 --> 00:31:05.265
所以一定不要
拍很多快照

00:31:05.332 --> 00:31:08.435
只在重要的时候拍

00:31:08.802 --> 00:31:13.974
这里你可以看到方块里的S
就是我们拍的快照

00:31:16.043 --> 00:31:18.812
放大一下能看到

00:31:18.879 --> 00:31:20.814
随着时间过去
内存十分稳定的增长

00:31:20.881 --> 00:31:23.584
当我们开始在
两个卫星之间切换的时候

00:31:26.753 --> 00:31:29.056
如果我们要研究这个
像Jon说的那样

00:31:29.122 --> 00:31:35.829
我们就要启动对比
来看看是什么被拦住了

00:31:35.896 --> 00:31:40.167
那么我们就对比
快照9和11

00:31:41.602 --> 00:31:45.072
立刻
我们就看到很多东西

00:31:45.138 --> 00:31:49.443
被分配在9和11之间
并且仍然在活动中

00:31:49.943 --> 00:31:52.412
这就清楚地说明了
它们被留存了

00:31:52.479 --> 00:31:54.648
虽然我们
并不想这么做

00:31:55.649 --> 00:31:57.551
那么我们来看看
这些都是什么

00:31:58.752 --> 00:31:59.620
这是些阵列

00:32:00.454 --> 00:32:03.423
看上去这个阵列里
全是坐标

00:32:04.858 --> 00:32:07.728
你知道在应用的不同部分
我们会用大量的坐标

00:32:07.794 --> 00:32:11.164
但是如果我们停在这里
就会看到它的路径

00:32:11.265 --> 00:32:14.701
它们好像是被保存于
trajectoryHistory

00:32:14.768 --> 00:32:18.572
这是我们用来制作
追踪卫星的东西

00:32:19.973 --> 00:32:21.375
好的
这样不错

00:32:21.441 --> 00:32:23.710
但是我想不应该

00:32:25.112 --> 00:32:27.714
再在已不显示的卫星里用
trajectoryHistory

00:32:27.781 --> 00:32:29.416
这好像是个bug

00:32:31.985 --> 00:32:33.620
我们也分配了
一些对象

00:32:35.055 --> 00:32:39.526
但奇怪的是
在快照9和11之间

00:32:39.593 --> 00:32:41.795
我们之前已经看到
这些卫星

00:32:41.862 --> 00:32:45.065
那么我就不想
再给每个卫星创建新的对象

00:32:45.132 --> 00:32:48.735
我们只要直接使用它们
只要我们已经为他们获取了资源

00:32:48.802 --> 00:32:53.140
然后这里有了很多
坐标和遥测

00:32:53.207 --> 00:32:56.476
好像正在
重新解析什么

00:32:58.045 --> 00:32:59.646
我不太确定
那么...

00:33:00.113 --> 00:33:03.851
在这个视图里
我们有很多对象

00:33:03.917 --> 00:33:05.085
你不能读取所有

00:33:05.152 --> 00:33:08.355
所以我想做的
就是找出很特别的那一个

00:33:08.856 --> 00:33:10.357
那么在这个快照里

00:33:11.825 --> 00:33:13.861
我们有很多字符串
阵列和对象

00:33:13.927 --> 00:33:15.395
但只有一个Promise

00:33:15.829 --> 00:33:17.831
它停留在
两个快照之间

00:33:17.898 --> 00:33:19.900
所以我认为
应该调试这个

00:33:19.967 --> 00:33:24.071
那么我就找到代码
看看是哪里在用Promises

00:33:24.371 --> 00:33:27.274
因为好像它与别的什么
一起被泄露了

00:33:27.441 --> 00:33:29.576
于是
搜索Promise

00:33:30.077 --> 00:33:34.882
好了 这是D3库
这是使用它的代码

00:33:37.251 --> 00:33:39.052
好的
来看看这个

00:33:39.887 --> 00:33:44.892
好了 在［听不清］里
我们常常在卫星之间切换

00:33:44.958 --> 00:33:46.593
代码是loadDataset

00:33:46.793 --> 00:33:50.631
有人写了评论
太好了

00:33:51.665 --> 00:33:56.103
这里看上去好像
有人请求我们改变卫星

00:33:57.271 --> 00:34:03.710
那么这里就可以
异步从URL下载数据

00:34:03.777 --> 00:34:06.046
当它返回
我们就要解析

00:34:07.414 --> 00:34:10.918
然后使用卫星绘图库 
做更多的解析

00:34:11.784 --> 00:34:13.887
然后我们把它存到
卫星列表上

00:34:15.389 --> 00:34:18.525
这都很不错
但是回到检查器

00:34:18.592 --> 00:34:20.527
我们好像每次都泄露该Promise

00:34:20.594 --> 00:34:22.929
如果你更仔细的想想

00:34:22.996 --> 00:34:25.732
如果切换到
已经下载的数据组会怎样？

00:34:26.967 --> 00:34:29.235
我们甚至都没有
检查过这个事情

00:34:30.237 --> 00:34:33.373
你仔细的看看这里

00:34:34.107 --> 00:34:36.577
每次在两个卫星之间转换

00:34:37.277 --> 00:34:38.812
我们就发出
一个新的网络请求

00:34:38.879 --> 00:34:40.179
如果我们进入这个时间线

00:34:41.014 --> 00:34:44.618
就会看到我们在不断请求
同样的垃圾数据

00:34:46.018 --> 00:34:49.523
这是正常的
如果回到代码 发出请求

00:34:49.590 --> 00:34:51.859
解析的时候
会产生大量的对象

00:34:52.492 --> 00:34:54.293
然后我们把它推入
卫星阵列

00:34:54.360 --> 00:34:56.697
就目前来看
它怎么都不清楚

00:34:56.763 --> 00:35:02.202
我们好像一直在做无用功
然后不断泄露

00:35:02.269 --> 00:35:04.838
所以这里
我们要做的

00:35:04.905 --> 00:35:08.475
是检查我们是否已经
解析了这个卫星对象

00:35:08.742 --> 00:35:10.043
因为这是Promise

00:35:10.344 --> 00:35:14.081
如果它确实存在
我们可以调出.then

00:35:14.848 --> 00:35:18.886
由于这已解决
下一次评估Promise的反应时

00:35:18.952 --> 00:35:22.556
它就会进行检查
并将卫星放到地图上

00:35:23.657 --> 00:35:26.960
那么在这里
添加代码

00:35:30.664 --> 00:35:33.734
如果不存在
我们就创建一个

00:35:42.242 --> 00:35:47.314
好了 现在停下来看看
有没有效果

00:35:50.117 --> 00:35:52.352
我们就要回去
重新连接

00:35:55.923 --> 00:35:59.993
这是我们的应用
开始记录吧

00:36:02.329 --> 00:36:05.132
当我们回到应用
我就打开快照

00:36:05.632 --> 00:36:06.700
打开一些效果

00:36:06.800 --> 00:36:10.237
然后往南走

00:36:10.804 --> 00:36:13.240
好的 间谍卫星

00:36:14.274 --> 00:36:16.777
卫星的科学实验

00:36:17.811 --> 00:36:18.779
科学实验

00:36:20.480 --> 00:36:21.315
好了

00:36:24.885 --> 00:36:28.455
如果我们回到这里
我们看到内存的增长大大降低

00:36:28.522 --> 00:36:31.959
大概在1兆
而不是四五兆

00:36:32.025 --> 00:36:34.228
那么这里可能有
更多的泄露

00:36:34.294 --> 00:36:38.665
但是在快照结束的时候
我们的内存

00:36:38.732 --> 00:36:41.168
跟刚开始渲染的时候
一样大

00:36:41.235 --> 00:36:43.537
这样我们就修复了
这个特殊的泄露

00:36:44.805 --> 00:36:49.710
这就展示了我们如何使用
Allocations和Memory时间线

00:36:49.776 --> 00:36:53.547
来解决像这样的
应用的内存泄露问题

00:36:54.114 --> 00:36:58.585
这很不错
因为应用可以用更多的操作

00:36:58.652 --> 00:37:00.954
有了diffing功能

00:37:01.021 --> 00:37:04.825
我们就可以深入观察
我们所关心的卫星里的变化

00:37:06.660 --> 00:37:09.062
好了
卫星跟踪器就讲到这

00:37:10.197 --> 00:37:11.031
你回来吧 Jon

00:37:16.670 --> 00:37:17.504
谢谢 Brian

00:37:17.738 --> 00:37:21.241
你看到了
真是不可思议的迅速和简单

00:37:21.308 --> 00:37:24.845
这些新的时间线
让内存零问题

00:37:25.512 --> 00:37:27.748
所以请记住
Memory时间线是了解

00:37:27.814 --> 00:37:30.317
内存的使用情况
和造成内存高峰的原因

00:37:30.384 --> 00:37:32.119
这样你就知道
该去哪里找问题

00:37:33.020 --> 00:37:37.291
然后使用多个Heap快照
在JavaScript Allocations时间线里

00:37:37.357 --> 00:37:39.826
以便单独放大
造成内存增长的代码

00:37:40.761 --> 00:37:43.363
还有不要忘了删除
takeHeapSnapshot

00:37:43.430 --> 00:37:44.932
在代码运行之前

00:37:46.066 --> 00:37:48.101
要记住性能所受的影响

00:37:48.168 --> 00:37:51.505
是JavaScript Allocations
时间线记录时产生的

00:37:53.607 --> 00:37:56.577
那么以上就是
新的时间线工具

00:37:56.643 --> 00:37:58.445
可用在Safari 10的
网络检查器上

00:37:58.979 --> 00:38:00.747
我想你一定会
爱上它们

00:38:01.982 --> 00:38:04.852
在结束之前
我还想再说几点

00:38:05.586 --> 00:38:08.355
我要建议你们
重新考虑下WKWebView

00:38:08.422 --> 00:38:09.623
如果你还没有换掉它

00:38:11.358 --> 00:38:13.493
在Safari设置里
打开Develop菜单

00:38:13.560 --> 00:38:15.262
连接网络检查器
到你的应用

00:38:15.329 --> 00:38:17.631
然后开始利用
这些新功能

00:38:18.031 --> 00:38:21.468
节省大量时间
Bottom Up视图和Call Trees用于

00:38:21.535 --> 00:38:23.504
找到最需要优化的地方

00:38:23.570 --> 00:38:26.974
Memory时间线可以
快速看到内存高峰的情况

00:38:27.140 --> 00:38:31.111
Heap快照可以
轻松查找和比较对象分配

00:38:32.379 --> 00:38:33.881
时刻关注
新功能的更新

00:38:33.947 --> 00:38:36.550
今年网络检查器
和WebKit有更多内容

00:38:36.617 --> 00:38:39.486
可以让你利用
应用的网页内容

00:38:39.620 --> 00:38:41.722
来创造绝佳的
应用内的用户体验

00:38:42.789 --> 00:38:45.225
除了Brian和我
今天为你们展示的功能

00:38:45.292 --> 00:38:48.562
我们团队过去一年也为
网络检查器添加了很多内容

00:38:49.396 --> 00:38:53.500
Quick Open会让你直接跳到
页面加载的资源

00:38:53.867 --> 00:38:58.739
尾调用堆栈
现在可显示调试器里的尾调用优化函数

00:38:59.339 --> 00:39:02.809
初春的时候在OS 10系统下
我们引进了Safari 9.1

00:39:03.277 --> 00:39:05.245
并更新了
网络检查器

00:39:05.913 --> 00:39:09.416
它显示了Elements标签下
DOM Tree里的Pseudo Elements

00:39:09.883 --> 00:39:12.319
这里还有一个
新的视觉风格边栏

00:39:13.787 --> 00:39:15.489
可能你还没注意到

00:39:15.756 --> 00:39:17.991
网络检查器
是一个开发者工具

00:39:18.058 --> 00:39:20.527
作为WebKit开源项目的一部分

00:39:21.962 --> 00:39:25.199
WebKit是网页浏览器引擎
用来支持你的应用

00:39:25.265 --> 00:39:27.668
驱动WebViews
和JSContext

00:39:28.068 --> 00:39:30.137
当然它也是Safari
背后的动力

00:39:31.004 --> 00:39:34.508
在过去一年里
我们为WebKit添加了好多新功能

00:39:34.575 --> 00:39:36.910
我们对ES6
100％支持

00:39:37.678 --> 00:39:40.714
我们改进了对IndexedDB
Standard的支持

00:39:41.215 --> 00:39:45.219
还添加了Shadow DOM支持
WebDriver和CSS变量

00:39:45.619 --> 00:39:46.753
以及Picture Element

00:39:47.688 --> 00:39:50.224
所以真的是很多内容
而且作为开源项目

00:39:50.290 --> 00:39:52.559
一旦有新的出现
你就能知道

00:39:53.060 --> 00:39:55.329
你们在座大部分人
肯定都想能利用它工作

00:39:55.395 --> 00:39:58.365
如果你们想
对这些内容作出改进

00:39:58.432 --> 00:39:59.433
完全有机会

00:39:59.499 --> 00:40:01.702
因为WebKit
是开放资源

00:40:02.669 --> 00:40:05.906
你可在WebKit.org上
找到更多WebKit项目信息

00:40:05.973 --> 00:40:09.710
WebKit团队及其背后的
工程师们会在博客上写他们的开发工作

00:40:09.776 --> 00:40:11.778
实际上
我们现在有两个博客

00:40:11.845 --> 00:40:14.648
关于Memory时间线
和样本分析器

00:40:14.715 --> 00:40:15.716
就是今天讲的内容

00:40:15.782 --> 00:40:18.151
所以如果你想了解更多
可以去那里看看

00:40:18.552 --> 00:40:21.355
我们还有一个功能状态页
一目了然的列出了所有更新

00:40:21.421 --> 00:40:22.789
针对网页标准进程

00:40:23.357 --> 00:40:26.260
这里还有链接
可以下载WebKit夜间建构

00:40:26.727 --> 00:40:29.930
和最新的浏览器
Safari技术概览

00:40:30.797 --> 00:40:34.201
每几周更新一次
附带更新的WebKit引擎

00:40:34.668 --> 00:40:37.871
所以你可以在WebKit上
尝试这些新的实验性功能

00:40:37.938 --> 00:40:39.606
它们每两周改进一次

00:40:40.474 --> 00:40:44.411
我们团队投入了大量精力给Safari
WebKit和网络检查器

00:40:44.478 --> 00:40:47.581
网络检查器团队
可以使用这些新性能特性

00:40:47.648 --> 00:40:50.918
就像我们今天展示的那样
去查询问题并提高性能

00:40:50.984 --> 00:40:52.419
对网络检查器本身

00:40:52.619 --> 00:40:54.555
我已经迫不及待
想看看你们会做些什么

00:40:54.855 --> 00:40:56.590
想了解更多信息
请观看这个演讲

00:40:56.657 --> 00:40:59.259
在developer.apple.com
下载幻灯片

00:41:00.093 --> 00:41:03.163
这周的前几天有很多场相关演讲

00:41:03.230 --> 00:41:04.831
过去几年也有不少

00:41:05.098 --> 00:41:07.835
这些都能在
developer.apple.com上找到

00:41:08.769 --> 00:41:12.606
那么代表Brian 我自己
和Safari与WebKit团队

00:41:12.673 --> 00:41:15.442
感谢你们的到来
祝大家在接下来的WWDC中过得愉快