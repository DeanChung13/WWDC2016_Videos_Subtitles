00:00:20.187 --> 00:00:21.021
早上好

00:00:21.522 --> 00:00:23.757
欢迎各位出席
“用ReplayKit直播”

00:00:24.324 --> 00:00:26.026
在这次演讲中
我们将告诉你关于

00:00:26.093 --> 00:00:28.529
我们加入到这个框架中的所有新特性

00:00:28.996 --> 00:00:30.063
我是Ben Harry

00:00:30.130 --> 00:00:32.999
Apple游戏技术组的软件工程师

00:00:33.400 --> 00:00:35.802
稍后你们会听到
Edwin Iskander的演讲

00:00:37.137 --> 00:00:39.773
现在我们知道人们喜欢录制他们
的游戏

00:00:40.073 --> 00:00:42.042
并在社交媒体上分享那些录像

00:00:43.210 --> 00:00:45.379
ReplayKit给
我们的用户提供这些功能

00:00:45.546 --> 00:00:47.915
而只需要你 开发者 做很少量的
工作

00:00:49.716 --> 00:00:50.918
今天的开始

00:00:50.984 --> 00:00:51.985
我会花几分钟

00:00:52.052 --> 00:00:55.122
谈谈ReplayKit已提供的功能

00:00:57.691 --> 00:01:01.195
ReplayKit提供录制应用的
音频和视觉内容的功能

00:01:01.828 --> 00:01:04.397
此外你可以启用麦克风录制

00:01:05.032 --> 00:01:08.902
通过这样做 你的用户在玩游戏时
可以提供声音说明

00:01:09.369 --> 00:01:10.904
当用户完成了一个录像

00:01:11.371 --> 00:01:13.607
他们可以在游戏中分享录像

00:01:13.674 --> 00:01:15.008
通过系统共享表

00:01:16.643 --> 00:01:19.580
ReplayKit有一个简单API
你今天会看到它

00:01:19.980 --> 00:01:23.450
将这些功能加入你的游戏
需要少量的代码

00:01:25.285 --> 00:01:28.689
以后ReplayKit将产生
HD质量的视频

00:01:29.022 --> 00:01:31.191
并且对游戏性能的影响很小

00:01:31.325 --> 00:01:34.461
并且从设备电池中使用最少的电量

00:01:35.929 --> 00:01:39.566
在Apple 用户隐私对我们很重要

00:01:40.200 --> 00:01:42.436
所以我们实现了一些隐私保护措施

00:01:42.703 --> 00:01:46.373
比如我们在用户开始录制前会
显示一个提示

00:01:46.907 --> 00:01:50.043
用户可以在录制他们的游戏前
给予许可

00:01:50.844 --> 00:01:51.678
而且

00:01:52.179 --> 00:01:55.182
录制会排除系统UI
包括通知

00:01:55.782 --> 00:01:56.617
所以

00:01:56.817 --> 00:01:59.186
当你在玩游戏时收到文字消息时

00:01:59.253 --> 00:02:01.054
这条消息不会被录下来

00:02:03.190 --> 00:02:06.460
最后 ReplayKit
在iOS 9中可用

00:02:07.160 --> 00:02:10.364
这是一个ReplayKit目前的
特性的列表

00:02:11.031 --> 00:02:13.367
现在我会花一些时间

00:02:13.433 --> 00:02:16.503
来列举ReplayKit框架中
加入的新特性

00:02:17.704 --> 00:02:20.507
首先 我们把ReplayKit
支持带到了Apple TV

00:02:21.308 --> 00:02:23.877
所以现在
你可以录制你的游戏

00:02:23.944 --> 00:02:26.246
并且直接分享它
从你的tvOS游戏中

00:02:27.114 --> 00:02:29.716
下一个我们加入的新特性是直播

00:02:30.217 --> 00:02:33.554
现在用户可以广播游戏

00:02:33.620 --> 00:02:36.323
实时地发送给第三方广播服务

00:02:37.457 --> 00:02:39.059
第三个也是最后一个特性

00:02:39.426 --> 00:02:42.396
我们增加了录制FaceTime
摄像头的支持

00:02:43.263 --> 00:02:47.134
此外 我们增强了麦克风录制API

00:02:49.570 --> 00:02:51.772
所以当我进入ReplayKit
和Apple TV之前

00:02:51.839 --> 00:02:54.708
我会给你一个ReplayKit
结构的概览

00:02:55.475 --> 00:02:56.877
我想向你们展示你们的应用如何

00:02:56.944 --> 00:02:59.813
使用这个框架来和操作系统互动

00:02:59.880 --> 00:03:00.981
来创建录像

00:03:03.684 --> 00:03:05.152
所以这里我们有你的应用

00:03:05.552 --> 00:03:07.721
你的应用通知操作系统

00:03:07.788 --> 00:03:09.256
它什么时候想要开始录制

00:03:10.324 --> 00:03:13.193
所以ReplayKit提供
RPScreenRecorder类

00:03:13.560 --> 00:03:15.529
你会告诉这个类开始录制

00:03:16.330 --> 00:03:19.066
这时
一条消息被发送给重播守护进程

00:03:19.499 --> 00:03:22.202
重播守护进程会开始写入你应用的数据

00:03:22.703 --> 00:03:24.037
到一个电影文件

00:03:25.939 --> 00:03:28.475
当你告诉RPScreenRecorder停止录像

00:03:28.842 --> 00:03:31.512
重播守护进程会结束你的电影

00:03:32.246 --> 00:03:34.081
现在我们在系统里有一个电影

00:03:34.248 --> 00:03:37.050
现在这个电影需要回到你的应用

00:03:37.117 --> 00:03:41.455
这样用户可以预览他们刚完成的
录制

00:03:42.022 --> 00:03:42.856
要这么做

00:03:43.724 --> 00:03:46.360
我们提供RPpreviewViewController

00:03:46.927 --> 00:03:48.996
你在游戏中使用这个视图控制器

00:03:49.396 --> 00:03:51.899
这样用户有一个界面来预览

00:03:51.965 --> 00:03:54.902
他们可以编辑和分享刚完成的视频

00:03:57.938 --> 00:04:00.874
就像我们刚刚看到的 我们有
RPScreenRecorder类

00:04:01.074 --> 00:04:04.778
你会用这个类来开始 停止和抛弃录制

00:04:05.312 --> 00:04:08.782
你还会用它来检查
是否能在这台设备上录像

00:04:09.716 --> 00:04:12.152
RPScreenRecorder
有一个代理属性

00:04:12.219 --> 00:04:15.856
当能否在设备上录像发生改变时
会通知你

00:04:16.523 --> 00:04:19.927
它也会在因为错误停止录制时通知你

00:04:21.928 --> 00:04:24.631
第二个类是RPPreviewController

00:04:24.998 --> 00:04:27.000
这个视图控制器出现在你的游戏中

00:04:27.167 --> 00:04:30.804
使你的用户能够预览录像

00:04:30.871 --> 00:04:32.773
在iOS上编辑和剪接录像

00:04:33.240 --> 00:04:35.676
直接从游戏里分享录像

00:04:36.643 --> 00:04:38.612
这个类还有委托方法

00:04:38.812 --> 00:04:41.181
它们会让你知道什么时候用户完成了

00:04:41.248 --> 00:04:42.716
在预览用户界面中完成了

00:04:44.518 --> 00:04:47.387
这就是你要使用的

00:04:47.454 --> 00:04:51.024
用来在iOS和tvOS上
录制和分享内容的结构和类

00:04:51.658 --> 00:04:53.961
现在让我来到ReplayKit和Apple TV

00:04:54.394 --> 00:04:56.396
我会从一个演示开始

00:05:06.073 --> 00:05:08.175
我有一个游戏叫做狐狸

00:05:08.242 --> 00:05:12.412
狐狸是为2015年的 WWDC
开发的它是用SceneKit开发的

00:05:13.614 --> 00:05:14.748
你可能认出它了

00:05:14.815 --> 00:05:17.684
因为在我们的开发者网站上它被
做为代码的例子

00:05:18.285 --> 00:05:19.953
目标是在这关走动

00:05:20.020 --> 00:05:22.022
收集这些花像我刚刚得到的这朵

00:05:22.723 --> 00:05:25.459
我会走过这一关并收集花

00:05:25.526 --> 00:05:27.594
这关有三朵花并且我得到了第一朵

00:05:28.128 --> 00:05:30.564
你可以在路上选择性的收集这些珍珠

00:05:31.031 --> 00:05:33.400
但是我会把注意力集中在花上
我得到了两朵

00:05:33.867 --> 00:05:36.770
我知道第三朵花在顶部的中间

00:05:36.837 --> 00:05:38.005
在这块石头上

00:05:40.507 --> 00:05:42.709
所以在此我要打开

00:05:42.776 --> 00:05:44.978
我要打开游戏菜单

00:05:45.979 --> 00:05:48.715
我想要录制它 前面有一个障碍

00:05:48.782 --> 00:05:51.018
我上周练习了很多

00:05:51.318 --> 00:05:54.054
所以我想要把这和我的朋友分享
来向他们表明

00:05:54.488 --> 00:05:56.523
现在大部分时间我都可以穿过这个障碍

00:05:57.357 --> 00:05:58.892
我要开始我的录制

00:05:58.959 --> 00:06:01.061
这是我提过的同意提示

00:06:01.862 --> 00:06:03.330
我会给许可

00:06:04.631 --> 00:06:05.766
所以我现在在录制

00:06:06.867 --> 00:06:09.469
请注意在屏幕顶端的录制指示器

00:06:10.838 --> 00:06:12.906
这表明录制正在进行

00:06:12.973 --> 00:06:14.274
好的 我穿过了火

00:06:14.775 --> 00:06:16.910
现在我要做的就是走到终点

00:06:17.244 --> 00:06:18.478
来得到最后一朵花

00:06:19.613 --> 00:06:20.714
这样我就能结束这关

00:06:21.148 --> 00:06:22.916
并且结束录制

00:06:26.720 --> 00:06:27.588
就是这些了

00:06:28.388 --> 00:06:29.756
我要停止录制

00:06:30.390 --> 00:06:32.559
一旦停止了 我可以选择

00:06:32.626 --> 00:06:35.963
预览或分享我刚录制的视频
所以我要开始预览

00:06:36.997 --> 00:06:38.365
所以我们有一个视频播放

00:06:38.432 --> 00:06:40.934
我们有一个进度条可以用来向前向后跳

00:06:41.535 --> 00:06:43.070
我要开始播放它

00:06:44.872 --> 00:06:48.041
请注意录制指示器不会出现在录像中

00:06:48.208 --> 00:06:50.711
我等会会向你们展示这是如何完成的

00:06:51.545 --> 00:06:54.147
我有一个视频 我对它感到满意

00:06:54.781 --> 00:06:55.849
所以想要分享它

00:06:56.650 --> 00:06:58.385
我会来到这选择分享

00:07:00.153 --> 00:07:02.422
我们会看到一个AirDrop界面

00:07:03.056 --> 00:07:04.324
我会拿到我的手机

00:07:08.562 --> 00:07:09.863
我会选择我的手机

00:07:15.202 --> 00:07:19.540
当我在手机上接受这个文件

00:07:19.606 --> 00:07:20.774
文件被传输了

00:07:21.074 --> 00:07:23.277
一旦它在我的手机上

00:07:23.343 --> 00:07:24.711
我可以预览视频

00:07:25.012 --> 00:07:27.447
如果我想我可以编辑和剪接视频

00:07:27.514 --> 00:07:30.217
我可把它分享到最喜欢的社交媒体网站

00:07:36.290 --> 00:07:38.926
这就是ReplayKit在
Apple TV上看起来的样子

00:07:39.826 --> 00:07:41.395
我现在想花一点时间

00:07:41.461 --> 00:07:43.730
来强调这个演示里的4个主要重点

00:07:44.464 --> 00:07:46.133
然后我会向你们展示代码

00:07:46.200 --> 00:07:48.836
和那些重点对应的代码

00:07:49.303 --> 00:07:51.371
让我开始 我会有游戏中的菜单

00:07:51.438 --> 00:07:52.773
在这我可以开始录制

00:07:54.474 --> 00:07:57.544
然后我们继续玩游戏
屏幕上会有录制指示器

00:07:59.213 --> 00:08:01.548
回到游戏菜单来停止录制

00:08:02.516 --> 00:08:04.551
当我停止录制时 我有不同的选项

00:08:04.618 --> 00:08:07.321
预览或者分享录制的视频

00:08:08.488 --> 00:08:10.090
我会浏览它们每一个

00:08:10.157 --> 00:08:12.092
并向你们展示相应的代码

00:08:12.593 --> 00:08:14.027
让我们从开始录制开始

00:08:14.828 --> 00:08:16.697
当我按下开始录制按钮

00:08:16.763 --> 00:08:20.267
首先我要获得共享的
RPScreeningRecorder实例

00:08:21.401 --> 00:08:23.637
我简单地告诉它开始录制

00:08:24.037 --> 00:08:26.907
一旦我在录制
我们显示指示器视图

00:08:29.676 --> 00:08:31.211
像我在视频中提到的

00:08:31.278 --> 00:08:33.447
指示器不会包含在录像中

00:08:33.714 --> 00:08:37.484
这是因为ReplayKit
只会录制应用的主窗口

00:08:37.784 --> 00:08:38.652
所以

00:08:38.919 --> 00:08:40.921
我会新建一个UI窗口

00:08:42.289 --> 00:08:43.190
这个指示器视图

00:08:43.256 --> 00:08:45.993
创建这个指示器视图是你的责任

00:08:46.360 --> 00:08:49.263
这是因为你可使它和你的游戏样式匹配

00:08:49.329 --> 00:08:50.397
一个指示器视图

00:08:50.464 --> 00:08:53.133
我会初始化一个指示器视图的实例

00:08:53.200 --> 00:08:56.036
并简单地把它做为一个子视图
加到我创建的主窗口中

00:08:56.103 --> 00:08:58.138
在我上面创建的窗口

00:08:58.572 --> 00:09:00.374
现在指示器视图出现在屏幕上

00:09:01.175 --> 00:09:02.442
我们知道我们在录制

00:09:03.644 --> 00:09:04.845
当我们完成了录制

00:09:05.445 --> 00:09:06.880
我们按下停止录制按钮

00:09:07.447 --> 00:09:10.584
再一次 我要获得共享的
RPScreenRecorder实例

00:09:11.552 --> 00:09:13.954
现在注意我们返回预览视图控制器

00:09:14.021 --> 00:09:17.324
是我早前提过的
RPPreviewController类

00:09:18.625 --> 00:09:20.227
我要隐藏我的指示器视图

00:09:20.827 --> 00:09:23.063
在这有一个重要的地方是保留一个引用

00:09:23.130 --> 00:09:24.665
预览视图控制器的引用

00:09:25.132 --> 00:09:27.467
因为我们会用它来显示下一步

00:09:27.534 --> 00:09:29.903
用来预览或分享视频

00:09:30.904 --> 00:09:32.606
最后我会设置代表

00:09:34.775 --> 00:09:36.944
这样我们看到我们有一个预览控制器

00:09:37.010 --> 00:09:39.880
但是我们有两个界面
一个用来预览 一个用来分享

00:09:41.181 --> 00:09:43.750
在Apple TV中
我们引入了一个新的模式属性

00:09:44.852 --> 00:09:47.855
当我们想要预览时
我们简单地把模式设置成预览

00:09:47.921 --> 00:09:49.656
然后显示一个视图控制器

00:09:51.191 --> 00:09:52.593
类似的 要分享

00:09:53.327 --> 00:09:54.761
我们有模式属性

00:09:55.128 --> 00:09:57.798
我们要把模式设置成分享

00:09:57.865 --> 00:09:59.600
再一次显示视图控制器

00:09:59.900 --> 00:10:02.236
现在我们会显示AirDrop界面

00:10:04.872 --> 00:10:07.641
在两种情况下 当用户完成了每个界面

00:10:07.708 --> 00:10:09.743
我们有委托方法会被调用

00:10:10.010 --> 00:10:11.645
预览控制器结束

00:10:12.679 --> 00:10:15.015
很重要的一点是它会被调用时
你刚好——

00:10:15.082 --> 00:10:16.783
你让预览控制器离开

00:10:16.850 --> 00:10:19.319
因为你的应用需要负责显示它

00:10:21.588 --> 00:10:22.589
最后

00:10:22.656 --> 00:10:25.859
当你完成了录制而且我们知道
我们不再需要它

00:10:25.926 --> 00:10:28.095
一个好的惯例是删除录像

00:10:28.395 --> 00:10:31.431
现在ReplayKit
会自动删除之前的录像

00:10:31.498 --> 00:10:32.900
当新的录像开始时

00:10:33.500 --> 00:10:36.303
这是因为一次一个应用只允许一个录像

00:10:37.337 --> 00:10:39.673
你也可以明确的删除这个录像

00:10:39.740 --> 00:10:41.975
当你知道预览不可用

00:10:42.276 --> 00:10:44.144
比如 可能在这关的最后

00:10:44.211 --> 00:10:46.880
没有机会显示预览

00:10:47.281 --> 00:10:49.149
这样你就可以明确地删除它

00:10:49.216 --> 00:10:51.985
通过调用RPScreenRecorder的
删除录像方法

00:10:54.254 --> 00:10:55.856
在最后这几张幻灯片中

00:10:55.923 --> 00:10:58.125
我向你们展示了需要的代码量

00:10:58.192 --> 00:11:00.894
来把这些功能加入你的tvOS游戏

00:11:01.828 --> 00:11:04.731
我鼓励你们都把ReplayKit
添加到你们的tvOS应用中

00:11:04.998 --> 00:11:07.501
也添加到iOS应用中
如果你们还没有这么做

00:11:10.671 --> 00:11:13.473
我们花点时间总结ReplayKit
和Apple TV

00:11:14.374 --> 00:11:15.876
现在有了ReplayKit
和Apple TV

00:11:15.943 --> 00:11:18.745
你可以录制应用的音频和视频内容

00:11:19.980 --> 00:11:23.483
在Apple TV中
麦克风被系统保留了

00:11:23.917 --> 00:11:27.054
所以你不能在这个平台上提供语音说明

00:11:27.788 --> 00:11:30.257
但是你可以允许用户预览视频

00:11:30.324 --> 00:11:32.860
而且直接在游戏中分享视频

00:11:34.962 --> 00:11:37.064
如你所见 我们有一个很简单的API

00:11:37.130 --> 00:11:40.400
其实这和我们提供给
iOS的API是相同的

00:11:41.268 --> 00:11:45.405
现在所有提供给Apple TV的
这些特性将在tvOS 10中可用

00:11:47.107 --> 00:11:48.942
这就是ReplayKit
和Apple TV

00:11:49.409 --> 00:11:52.045
现在是时间来到我们的第二个新特性

00:11:52.112 --> 00:11:54.448
我个人对它感到很兴奋

00:11:55.048 --> 00:11:58.252
现在请欢迎
Edwin Iskandar上台

00:12:02.523 --> 00:12:03.624
好的谢谢大家

00:12:05.559 --> 00:12:06.527
嘿你们好吗？

00:12:06.593 --> 00:12:08.996
我是Edwin Iskandar
软件工程师

00:12:09.062 --> 00:12:11.064
在Apple的游戏技术组

00:12:11.331 --> 00:12:13.433
和Ben一样我也非常高兴

00:12:13.500 --> 00:12:15.369
和你们谈论我们的下一个特性

00:12:15.769 --> 00:12:16.737
直播

00:12:18.672 --> 00:12:19.740
有了直播

00:12:19.806 --> 00:12:23.644
玩家可以广播他们的游戏到第三方服务

00:12:23.710 --> 00:12:26.513
直接从他们的iOS或tvOS设备

00:12:27.381 --> 00:12:28.615
这很令人兴奋

00:12:28.682 --> 00:12:31.018
因为这第一次成为可能

00:12:31.084 --> 00:12:32.553
无需额外的硬件

00:12:32.886 --> 00:12:34.188
或者第三方SDK

00:12:35.622 --> 00:12:37.124
允许用户利用

00:12:37.191 --> 00:12:40.627
他们的设备的强大的FaceTime
摄像头和麦克风

00:12:40.694 --> 00:12:42.796
来提供实时的丰富的说明

00:12:43.864 --> 00:12:45.866
最后我们所做的一切都是安全的

00:12:45.933 --> 00:12:49.603
保证所有的音频和视频都只有
系统

00:12:50.270 --> 00:12:51.471
以及广播服务可以访问

00:12:52.973 --> 00:12:54.441
那么它是怎么工作的

00:12:54.508 --> 00:12:57.578
我们和Flaregames
一起实现了广播功能

00:12:57.644 --> 00:12:59.847
及他们的旗舰游戏
Olympus Rising

00:13:00.347 --> 00:13:02.749
它现是app store中
一个很棒的游戏

00:13:03.450 --> 00:13:07.087
它独特的混合了
策略 RPG和动作元素

00:13:08.322 --> 00:13:10.390
现在我们有一个游戏作为广播源

00:13:10.724 --> 00:13:12.693
我们还需要广播目标

00:13:13.794 --> 00:13:15.963
所以我们还和
Mob Crush一起工作

00:13:16.029 --> 00:13:18.632
它是一个特别针对移动游戏的广播服务

00:13:19.867 --> 00:13:22.970
所以现在我们有了一个游戏和
一个服务 我们准备好开始了

00:13:23.237 --> 00:13:24.471
让我们看看在运行的它们

00:13:26.006 --> 00:13:27.941
在Olympus Rising中
Flare的开发者们

00:13:28.008 --> 00:13:30.978
实现了游戏中的一个按钮来开始广播

00:13:31.578 --> 00:13:33.947
要开始广播 用户点击这个按钮

00:13:34.648 --> 00:13:36.583
然后显示

00:13:36.650 --> 00:13:38.719
他们已经在设备上安装好的广播服务

00:13:39.019 --> 00:13:42.022
在这个例子中
用户安装了Mob Crush应用

00:13:42.256 --> 00:13:43.357
所以它出现在该列表中

00:13:45.225 --> 00:13:47.494
在这时用户点击
Mob Crush图标

00:13:47.928 --> 00:13:50.864
他们接着看到Mob Crush
用来设置广播的UI

00:13:52.366 --> 00:13:55.135
用户继续添加一个标题给这个广播

00:13:56.170 --> 00:13:57.137
一旦完成了

00:13:57.204 --> 00:13:59.373
他们简单的按开始广播按钮

00:14:00.541 --> 00:14:03.477
会回到游戏并显示一个倒计时

00:14:03.544 --> 00:14:04.978
所以用户可以预备

00:14:05.412 --> 00:14:06.380
并且最后开始直播

00:14:08.315 --> 00:14:10.717
现在他们在直播
当用户游玩时

00:14:10.784 --> 00:14:13.520
视频和音频数据会流入广播服务

00:14:13.820 --> 00:14:16.523
全球观众可以启动
Mob Crush应用

00:14:16.590 --> 00:14:19.960
从他们的设备并且几乎实时地观看游戏

00:14:20.494 --> 00:14:21.662
在Mob Crush应用中

00:14:21.728 --> 00:14:24.398
观众还可以在观看的同时讨论游戏

00:14:24.464 --> 00:14:28.068
更酷的是广播者甚至可以马上收到通知

00:14:28.135 --> 00:14:29.870
当这发生时 当玩他们的游戏时

00:14:30.904 --> 00:14:32.005
就像在体育中

00:14:32.072 --> 00:14:35.108
看一些直播的事件会有一些很特别的事

00:14:35.809 --> 00:14:40.581
现在iOS和tvOS游戏原生
有这些功能

00:14:43.951 --> 00:14:45.686
我们现在已经看过了整个流程

00:14:45.853 --> 00:14:47.020
做为一个游戏开发者

00:14:47.087 --> 00:14:49.790
你可能想知道怎么在你的游戏中
实现这些？

00:14:51.225 --> 00:14:52.826
这是分解了的玩家流程

00:14:53.126 --> 00:14:54.962
如你所见 有很多步

00:14:55.429 --> 00:14:56.630
初始化广播

00:14:57.564 --> 00:14:58.999
选择一个广播服务

00:14:59.333 --> 00:15:00.501
设置这个广播

00:15:02.803 --> 00:15:04.538
开始和停止广播

00:15:04.872 --> 00:15:06.773
标明一个广播正在进行中

00:15:07.207 --> 00:15:10.310
上传视频和音频数据到后台服务器

00:15:10.711 --> 00:15:12.813
这最初看起来可能让人望而却步

00:15:12.880 --> 00:15:14.982
但是对游戏开发者的好消息是

00:15:15.048 --> 00:15:18.452
其中的三步被ReplayKit
和广播服务处理

00:15:24.958 --> 00:15:27.327
所以让我们看看每一步的代码

00:15:27.694 --> 00:15:29.963
要用程序初始化一次广播

00:15:30.030 --> 00:15:33.400
我们用一个新的类名叫RP
BroadcastActivityViewController

00:15:33.467 --> 00:15:35.569
且调用它的载入方法
来获得它的一个实例

00:15:36.236 --> 00:15:39.439
然后我们简单地显示它
就像其他UI视图控制器一样

00:15:40.040 --> 00:15:42.809
会给用户显示一个广播服务的列表

00:15:42.876 --> 00:15:45.345
最终允许用户建立广播

00:15:46.213 --> 00:15:47.548
在我们开始做这些前

00:15:47.614 --> 00:15:50.450
我们还设置
ActivityViewController委托方法

00:15:51.285 --> 00:15:53.820
因为我们想要当设置完成时收到通知

00:15:55.722 --> 00:15:58.492
在这时 用户可以选择要广播到的服务

00:15:58.825 --> 00:16:00.093
建立广播

00:16:00.460 --> 00:16:01.828
一旦你完成了设置

00:16:02.095 --> 00:16:04.698
活动视图控制器的委托方法就被触发

00:16:05.232 --> 00:16:08.802
这个委托方法被另一个新类提供

00:16:08.869 --> 00:16:10.470
RPBroadcastController

00:16:10.537 --> 00:16:12.306
它允许我们开始广播

00:16:12.940 --> 00:16:15.375
但是在我们这么做之前 我们还希望

00:16:15.943 --> 00:16:19.546
抛弃ActivityViewController
因为是我们显示了它

00:16:20.214 --> 00:16:22.049
开始在游戏中显示倒计时

00:16:22.616 --> 00:16:24.184
当倒计时结束

00:16:24.918 --> 00:16:28.355
我们最终开始广播
通过调用开始广播

00:16:28.422 --> 00:16:32.359
在新的RPBroadcastController
被传入的实例

00:16:34.294 --> 00:16:35.128
现在我们在直播了

00:16:35.529 --> 00:16:37.130
因为我们在直播

00:16:37.264 --> 00:16:39.233
我们需要清楚地向用户指明这点

00:16:39.933 --> 00:16:41.969
Olympus Rising
在这点上做得很好

00:16:42.035 --> 00:16:43.637
通过给广播按钮加动画效果

00:16:44.538 --> 00:16:46.607
因为这个游戏有很复杂的操作

00:16:46.673 --> 00:16:50.310
他们重用按钮UI
来指示正在进行的广播

00:16:50.611 --> 00:16:52.412
来最大化可用的屏幕空间

00:16:53.447 --> 00:16:57.150
一些需要注意的事是指示器是
广播过程中严格要求的

00:16:57.217 --> 00:16:58.986
会在应用审核时强制实行

00:17:00.287 --> 00:17:01.755
在你把它加入游戏前

00:17:02.723 --> 00:17:05.392
所以用程序检查是否在进行广播

00:17:05.459 --> 00:17:08.929
简单地查询broadcastController
的isBroadcasting属性

00:17:09.396 --> 00:17:11.397
你可以使用这个属性的值

00:17:11.464 --> 00:17:14.334
来开始或停止你的指示UI动画

00:17:16.869 --> 00:17:20.174
要允许用户结束广播
Flare的开发者实现了

00:17:20.240 --> 00:17:23.844
一个弹出式UI来显示一个包含
停止按钮的子菜单

00:17:24.678 --> 00:17:26.579
当用户按下停止按钮

00:17:27.146 --> 00:17:30.417
我们简单地在控制器上调用
结束广播

00:17:31.385 --> 00:17:34.021
当广播结束时 我们更新UI

00:17:35.088 --> 00:17:36.924
现在我们覆盖了基本的流程

00:17:36.990 --> 00:17:39.860
让我们看看更多细节 比如错误处理

00:17:41.862 --> 00:17:44.031
因为这个功能有很多部分

00:17:44.097 --> 00:17:45.966
有可能事情出错

00:17:46.266 --> 00:17:48.268
所以优美的处理它很重要

00:17:49.002 --> 00:17:51.605
让我们看看在广播中我们怎么做

00:17:52.773 --> 00:17:55.943
要处理错误 简单地在广播控制器中
设置代表

00:17:57.411 --> 00:18:00.881
一旦设定好 你的代表会有
它的didFinishWithError方法

00:18:00.948 --> 00:18:02.316
当错误发生时被调用

00:18:02.983 --> 00:18:04.184
当这被触发时

00:18:04.251 --> 00:18:07.354
你应该让用户知道它并且
对UI做任何需要的更新

00:18:09.456 --> 00:18:12.159
现在另一个细节要考虑是当用户
把应用放入后台

00:18:12.226 --> 00:18:14.862
或者应用在广播过程中被打断了

00:18:14.928 --> 00:18:16.730
比如说接到来电

00:18:17.698 --> 00:18:19.499
应用进入后台

00:18:19.566 --> 00:18:22.169
ReplayKit会自动暂停广播

00:18:23.170 --> 00:18:25.105
在这个例子中 当应用

00:18:25.172 --> 00:18:27.508
被重新激活并回到前台

00:18:27.574 --> 00:18:30.677
我们提示用户并询问他们
是否想要继续广播

00:18:31.078 --> 00:18:32.412
如果用户想要继续

00:18:32.913 --> 00:18:34.915
调用继续广播的方法

00:18:35.215 --> 00:18:38.185
如果他们不想继续
调用结束广播的方法

00:18:39.653 --> 00:18:40.754
这样就行了

00:18:40.821 --> 00:18:43.223
对这整个流程 游戏开发者需要

00:18:43.290 --> 00:18:45.659
和两个类及它们的代表互动

00:18:45.726 --> 00:18:49.296
RPBroadcastActivityView
Controller代表广播服务

00:18:49.363 --> 00:18:51.031
允许用户建立一个广播

00:18:51.565 --> 00:18:56.236
RPBroadcastController用来开始
暂停 继续和结束一个广播

00:18:57.137 --> 00:19:00.807
如你所见 把广播添加到你的游戏
中不能更容易了

00:19:00.874 --> 00:19:03.410
我催促你这么做 因为好处很大

00:19:04.011 --> 00:19:06.113
没有更好的方法来传播口碑

00:19:06.446 --> 00:19:07.948
增加玩家的参与

00:19:08.248 --> 00:19:10.517
甚至围绕你的游戏创建一个社区

00:19:12.953 --> 00:19:14.588
所以这些覆盖了游戏的实现

00:19:14.755 --> 00:19:17.858
但是关于玩家广播去的
那些广播服务呢？

00:19:17.958 --> 00:19:19.059
比如Mob Crush？

00:19:20.227 --> 00:19:23.697
让我们花点时间简短地谈谈这些
服务的职责是什么

00:19:24.164 --> 00:19:27.367
对所有在座及在网上观看的开发者们

00:19:27.434 --> 00:19:28.836
我想使它很清楚

00:19:28.902 --> 00:19:31.038
在下一部分讨论的话题

00:19:31.104 --> 00:19:33.640
不是你要负责在你的游戏中实现的

00:19:35.809 --> 00:19:37.444
让我们回到那个流程图

00:19:37.978 --> 00:19:41.281
我们看到玩家有责任开始一次广播

00:19:41.882 --> 00:19:44.184
并控制什么时候开始和结束广播

00:19:44.785 --> 00:19:47.287
我们还看到用来选择广播的UI是

00:19:47.354 --> 00:19:50.757
ReplayKit的BroadcastActivity
ViewController负责

00:19:51.258 --> 00:19:53.160
这留给我们两个任务

00:19:53.961 --> 00:19:55.095
建立广播

00:19:55.963 --> 00:19:58.665
上传视频和音频数据给后台服务器

00:20:00.167 --> 00:20:02.503
使广播服务能完成它们的步骤

00:20:02.569 --> 00:20:04.705
我们引入了一对新的应用扩展

00:20:04.771 --> 00:20:06.073
特别针对这个功能

00:20:07.574 --> 00:20:10.711
一个UI扩展允许用户建立一个广播

00:20:11.879 --> 00:20:13.780
一个非UI扩展为了处理

00:20:13.847 --> 00:20:16.149
和上传音频和视频数据

00:20:18.385 --> 00:20:20.387
对那些不熟悉扩展的人

00:20:20.621 --> 00:20:23.991
它们会嵌入你的母应用
并且是一种方法

00:20:24.057 --> 00:20:26.960
来扩展你的应用这样你可以和
别的应用一起运行

00:20:28.161 --> 00:20:30.664
它们在一个来自你的母应用的
一个分开的进程中运行

00:20:30.864 --> 00:20:32.933
但是可以和你的母应用共享数据

00:20:32.999 --> 00:20:36.403
可以很方便地用来共享东西
比如授权数据

00:20:37.437 --> 00:20:39.039
一件要记住的事

00:20:39.173 --> 00:20:42.342
是和应用相比扩展的资源受限

00:20:42.709 --> 00:20:46.213
所以避免在它们中进行需要大量
资源的任务

00:20:47.447 --> 00:20:50.884
我们使得通过Xcode模板来建立
这些扩展变得难以置信的容易

00:20:51.685 --> 00:20:55.088
这些是iOS和tvOS中新的目标

00:20:56.623 --> 00:20:59.459
如果从这些模板中创建
扩展将会预先设置好

00:20:59.526 --> 00:21:02.796
所以他们会出现在广播活动控制
列表中 你看到的那个

00:21:04.231 --> 00:21:06.400
让我们看看这两个新扩展

00:21:06.466 --> 00:21:08.468
一个广播服务需要实现

00:21:08.769 --> 00:21:10.704
从广播UI扩展开始

00:21:12.472 --> 00:21:14.842
UI扩展有一些关键职责

00:21:15.209 --> 00:21:17.544
它负责授权用户

00:21:17.611 --> 00:21:20.047
并且提供注册
如果用户还没有注册

00:21:20.647 --> 00:21:23.016
理想地 这些都应该在扩展中完成

00:21:23.083 --> 00:21:25.319
这样用户体验就没有被打断

00:21:25.919 --> 00:21:27.654
但是完全可以接受

00:21:27.721 --> 00:21:29.556
和母应用连接

00:21:29.623 --> 00:21:32.626
只要用户有办法回到游戏

00:21:34.494 --> 00:21:36.797
在注册过程中要求显示给用户

00:21:36.864 --> 00:21:38.699
使用这个服务的条款和条件

00:21:39.132 --> 00:21:42.536
并且可以接受或拒绝这些条款和条件

00:21:44.037 --> 00:21:45.105
我们早前看到

00:21:45.172 --> 00:21:47.441
UI扩展负责允许用户

00:21:47.508 --> 00:21:49.843
设置他们的广播
比如添加标题

00:21:50.878 --> 00:21:52.846
它还允许用户

00:21:52.913 --> 00:21:56.450
通过社交媒体通知其他人
广播将要开始

00:21:58.352 --> 00:22:01.121
其最终职责是通知ReplayKit

00:22:01.188 --> 00:22:02.789
以及最终这个游戏

00:22:03.090 --> 00:22:04.758
广播已经完成设置

00:22:07.227 --> 00:22:11.031
现在我们看过了UI扩展
让我们转到上传扩展

00:22:11.732 --> 00:22:15.035
它负责接收和处理视频和音频数据

00:22:15.903 --> 00:22:18.071
并且上传数据给后端服务器

00:22:19.373 --> 00:22:21.608
我们知道有很多实现

00:22:21.675 --> 00:22:24.378
关于数据处理和上传到直播流

00:22:24.845 --> 00:22:27.181
所以我不会进入到

00:22:27.247 --> 00:22:28.215
这个会话中的特定实现

00:22:28.615 --> 00:22:29.449
反而

00:22:29.783 --> 00:22:31.151
如果你是广播服务

00:22:31.251 --> 00:22:34.321
请联系我们 这样我们可以直接
和你合作

00:22:34.888 --> 00:22:36.323
这样我们可以实现一个方案

00:22:36.390 --> 00:22:38.792
将最好的体验带给我们的客户

00:22:41.328 --> 00:22:42.930
回到我们的流程图

00:22:43.230 --> 00:22:45.832
我们看过了广播的建立和上传

00:22:47.234 --> 00:22:49.336
我们已经看过了整个广播流程

00:22:50.504 --> 00:22:53.373
而且我们清楚地划分了职责给游戏

00:22:54.274 --> 00:22:56.643
ReplayKit和广播服务

00:22:58.145 --> 00:22:59.580
这就是直播的全部内容

00:23:00.214 --> 00:23:02.683
我们真的觉得这是一个
改变游戏规则的功能

00:23:03.283 --> 00:23:04.985
你的玩家会爱上它

00:23:05.352 --> 00:23:07.554
对开发者 这会带来一个新方式

00:23:07.621 --> 00:23:10.757
为你的粉丝体验你的游戏
不仅仅是玩它们

00:23:10.824 --> 00:23:12.192
还可以观看它们

00:23:14.595 --> 00:23:15.495
在我们结束前

00:23:15.562 --> 00:23:18.398
我想要以我们对API做的一些增强
做为结尾

00:23:18.465 --> 00:23:20.234
关于iOS上的注释

00:23:20.300 --> 00:23:22.369
也就是支持前置摄像头

00:23:22.469 --> 00:23:24.638
和新的麦克风功能

00:23:26.206 --> 00:23:28.542
首先 我们加入了
FaceTime摄像头支持

00:23:28.775 --> 00:23:31.612
使你可以方便添加
picture in picture

00:23:31.678 --> 00:23:33.113
视频注释到你的游戏中

00:23:33.747 --> 00:23:35.349
玩家的反应是无价的

00:23:35.682 --> 00:23:38.852
永远把这种独特的风味添加到
录像和广播中

00:23:39.586 --> 00:23:41.388
要在Olympus Rising中
启用它

00:23:41.455 --> 00:23:42.990
Flare开发者添加了一个按钮

00:23:43.056 --> 00:23:44.758
在弹出菜单中切换摄像头

00:23:45.459 --> 00:23:47.261
按这个按钮启用摄像头

00:23:47.327 --> 00:23:48.962
在左上角显示一个预览

00:23:50.831 --> 00:23:53.033
让我们看看他们做到这使用的API

00:23:55.035 --> 00:23:56.103
要打开摄像头

00:23:56.170 --> 00:23:59.673
我们简单地设置IsCameraEnabled
属性为真 在RPScreenRecorder中

00:24:00.340 --> 00:24:01.875
这打开摄像头硬件

00:24:02.276 --> 00:24:04.811
并弹出一个新的
RPScreenRecorder

00:24:04.878 --> 00:24:08.115
叫做CameraPreviewView
是UIView的一个子类

00:24:08.949 --> 00:24:10.284
因为它是UIView

00:24:10.350 --> 00:24:12.586
可简单把它做为一个子视图
加到游戏视图中

00:24:12.920 --> 00:24:16.557
并且可以自由的给它设定位置来
避免妨碍游戏

00:24:17.991 --> 00:24:19.960
你还可以附加一个调整或识别它

00:24:20.027 --> 00:24:22.362
来允许你手动调整它的位置
如果你想的话

00:24:23.564 --> 00:24:25.032
来看看这的代码

00:24:25.232 --> 00:24:27.367
我们设置IsCameraEnabled属性为

00:24:27.434 --> 00:24:29.069
真 在录制广播时

00:24:29.536 --> 00:24:31.939
然后我们获得
一个CameraPreviewView实例

00:24:34.408 --> 00:24:38.111
然后设置它的几何来给它定位

00:24:38.912 --> 00:24:41.481
然后简单地把它作为子视图添加
到你的游戏视图

00:24:43.750 --> 00:24:47.154
所以现在我们有了视频注释
我们还想要添加音频

00:24:47.788 --> 00:24:51.058
麦克风录制被包括在了
去年的iOS 9中

00:24:51.391 --> 00:24:54.795
但是现在我们要添加在录制时
静音的功能

00:24:55.529 --> 00:24:56.597
我们知道广播者

00:24:56.663 --> 00:25:00.634
总是有一些有趣的事想说
但是有时他们要休息一下

00:25:01.835 --> 00:25:03.937
Olympus Rising
使得这变得简单 通过包括

00:25:04.004 --> 00:25:05.873
麦克风切换在他们的弹出菜单中

00:25:07.708 --> 00:25:10.777
实现麦克风的切换不能更简单了

00:25:11.211 --> 00:25:13.614
已有的IsMicrophoneEnabled属性

00:25:13.680 --> 00:25:15.983
RPScreenRecorder中
可以被设为真

00:25:16.116 --> 00:25:19.920
如果你想要启用麦克风
或为假如果你想将它静音

00:25:20.888 --> 00:25:24.558
这可以在广播或录制会话中进行

00:25:27.561 --> 00:25:30.731
本场演讲到此结束
我希望你们喜欢

00:25:31.064 --> 00:25:34.835
有了强大的新广播功能和新的
对Apple TV的支持

00:25:34.902 --> 00:25:36.503
我们等不及去玩

00:25:36.570 --> 00:25:40.240
和观看你的游戏直播
在iOS和tvOS上

00:25:41.375 --> 00:25:45.379
想要了解更多信息
请浏览屏幕上的网址

00:25:46.647 --> 00:25:48.749
在这周中 确保观看

00:25:48.815 --> 00:25:50.450
我们的其他游戏技术演讲

00:25:50.517 --> 00:25:54.254
GameplayKit SpriteKit和
Game Center中的新特性

00:25:55.556 --> 00:25:56.690
好的 我要说的就这么多

00:25:56.757 --> 00:25:58.458
谢谢参加这次演讲

00:25:58.525 --> 00:26:02.095
希望你们喜欢这周接下来的 WWDC

00:26:02.162 --> 00:26:03.096
谢谢