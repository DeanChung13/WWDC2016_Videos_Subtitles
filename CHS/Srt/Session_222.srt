00:00:19.553 --> 00:00:21.655 
使应用自适应 第一部分

00:00:21.722 --> 00:00:24.424 
大家早上好
至今为止你们的会议进行的怎样？

00:00:25.292 --> 00:00:27.528 
我叫Kevin
是interface builder工程师

00:00:27.594 --> 00:00:29.997 
Brent将在晚些时候加入

00:00:30.297 --> 00:00:33.600 
今天我们要谈论的话题是自适应

00:00:33.667 --> 00:00:36.336 
它使得我开发一个应用

00:00:36.403 --> 00:00:39.606 
不仅仅在我们的所有设备上过得去

00:00:39.673 --> 00:00:41.074 
而是看上去很棒

00:00:41.675 --> 00:00:44.044 
这就是我们今天要讨论的话题

00:00:44.578 --> 00:00:47.414 
我将开始我的演讲

00:00:47.481 --> 00:00:49.783 
这个是你一定要带走的

00:00:50.317 --> 00:00:52.152 
当关于自适应时

00:00:52.219 --> 00:00:57.324 
系统将会为你进行大部分工作
我们将要分析它

00:00:57.958 --> 00:01:00.294 
我将告诉你系统为你做了什么

00:01:00.360 --> 00:01:01.662 
值得知道的事

00:01:01.728 --> 00:01:05.165 
还有你们开发者应该怎么互动

00:01:05.232 --> 00:01:07.367 
和插入这个系统

00:01:08.869 --> 00:01:10.838 
但是在那之前我想退后一步

00:01:10.904 --> 00:01:12.906 
想要提供一些动机

00:01:12.973 --> 00:01:16.510 
想告诉你为什么这是好消息

00:01:17.611 --> 00:01:20.147 
Apple去年的嘴巴很大

00:01:20.214 --> 00:01:23.183 
我们卖出了第10亿台iOS设备

00:01:23.250 --> 00:01:26.587 
我不知道你们怎么想
但是这个数字让我惊呆了

00:01:27.454 --> 00:01:29.289 
现在你有一个公平的看法

00:01:29.690 --> 00:01:32.326 
关于自适应
数量并不那么重要

00:01:32.860 --> 00:01:34.161 
我承认这点

00:01:34.228 --> 00:01:36.930 
但是我们知道它们不是同样的设备

00:01:36.997 --> 00:01:39.066  
这不是10亿台最初的iPhone

00:01:39.132 --> 00:01:40.667  
所以这会是很酷的事
不是吗？

00:01:41.201 --> 00:01:43.470  
这些年Apple发布了大量设备

00:01:43.537 --> 00:01:47.207 
有不同的比例 尺寸和形状

00:01:47.274 --> 00:01:48.775 
我是说甚至颜色

00:01:49.943 --> 00:01:51.979 
在Apple我们还相信

00:01:52.379 --> 00:01:55.949 
不管你拥有什么设备
你可以按你喜欢的方式拿它们

00:01:56.016 --> 00:01:58.085 
不管是纵向还是横向

00:01:58.986 --> 00:02:00.454 
但是除了这些物理设备本身

00:02:00.521 --> 00:02:03.957 
我们还有软件特性
比如slide over

00:02:04.024 --> 00:02:06.860  
和这些多任务特性

00:02:06.927 --> 00:02:09.395  
并且增加可能的组合数

00:02:09.463 --> 00:02:10.964  
你的应用有可能面对

00:02:11.765 --> 00:02:13.500  
不要忘记其他事像是动态字体

00:02:13.567 --> 00:02:17.337  
在这用户可以设置字体
然后所有应用

00:02:17.404 --> 00:02:20.307  
会起反应 重新布局
你们现在都这样做对吗？

00:02:21.875 --> 00:02:26.380 
我们还有特性像是语言方向

00:02:26.446 --> 00:02:28.749 
它是从左到右或从右到左

00:02:29.016 --> 00:02:31.785 
我们在那些新iPad上还有显示色域

00:02:31.852 --> 00:02:33.153 
我们将在今年发布

00:02:33.220 --> 00:02:35.055  
Apple TV也有新特性

00:02:35.122 --> 00:02:37.724  
像浅色和深色界面样式

00:02:38.325 --> 00:02:41.094  
保守估计可能的组合数

00:02:41.161 --> 00:02:45.365  
在iOS你的应用可能面对超过300
种组合

00:02:46.233 --> 00:02:47.134 
这么多

00:02:47.901 --> 00:02:53.407 
这就是为什么说系统为你做了
很多工作是个好消息

00:02:54.474 --> 00:02:56.610 
这里的关键字是大部分

00:02:57.945 --> 00:03:01.315 
作为开发者有很多方法

00:03:01.381 --> 00:03:03.350 
可以插入和定制体验

00:03:03.417 --> 00:03:05.352 
因为你想要你的应用有独特外观

00:03:05.419 --> 00:03:07.521 
这就是我们想要讨论的

00:03:08.789 --> 00:03:13.060 
首先我们要讨论自适应的基础系统

00:03:13.126 --> 00:03:14.528 
我们称之为特征系统

00:03:15.295 --> 00:03:17.164 
然后Brent会来给你一个演示

00:03:17.231 --> 00:03:21.134 
我们是怎么改进用来开发
自适应应用的工具的

00:03:21.201 --> 00:03:23.704 
这就是我们在第一部分要覆盖的
内容

00:03:24.004 --> 00:03:25.239 
是今天的议题

00:03:25.839 --> 00:03:28.775 
你们绝对会想在明天回来参加
第二部分

00:03:28.842 --> 00:03:30.677 
因为我们会给你实用工具

00:03:30.744 --> 00:03:33.480 
关于新增加的技术和技巧

00:03:33.547 --> 00:03:36.416 
你们可以用来使你们的应用
自适应

00:03:36.817 --> 00:03:38.385 
然后我们会把这些放在一起

00:03:38.452 --> 00:03:42.389 
然后给你们一些很好的
演示和代码例子

00:03:43.023 --> 00:03:47.094 
让我们开始讨论自适应的基础系统

00:03:47.160 --> 00:03:48.262 
被称为特征系统

00:03:48.328 --> 00:03:51.632 
有三件事我想要提出

00:03:51.698 --> 00:03:54.101 
首先我会告诉你它是什么

00:03:54.168 --> 00:03:55.669 
这是一个很好的出发点

00:03:55.903 --> 00:03:59.206 
然后我们会讨论特征系统的一个
特定部分

00:03:59.273 --> 00:04:00.574 
我们称之为尺寸类

00:04:01.508 --> 00:04:05.579 
告诉你们这个系统是怎样工作的
背景知识是个好主意

00:04:05.646 --> 00:04:08.682 
因为这使得你怎样和它互动更
清楚

00:04:10.317 --> 00:04:11.218 
什么是特征？

00:04:11.852 --> 00:04:16.255 
特征描述你程序运行的环境

00:04:17.524 --> 00:04:20.360 
horizontalSizeClass
是一个特征的例子

00:04:20.494 --> 00:04:23.463 
它描述体验应该是怎样的

00:04:23.530 --> 00:04:26.066 
当你的应用是水平时可用的空间

00:04:26.133 --> 00:04:28.202 
无论你拥有的空间有多少

00:04:28.268 --> 00:04:33.140 
一个特征本身并没有和它相关的值

00:04:33.207 --> 00:04:35.909 
这是特征集合发挥作用的地方

00:04:36.443 --> 00:04:37.811 
你可以认为特征集合

00:04:37.878 --> 00:04:42.316 
是一个词典映射键也就是特征到值

00:04:42.883 --> 00:04:46.820 
大部分特征有枚举的可能值

00:04:46.887 --> 00:04:48.589 
所以你知道你要怎么思考

00:04:48.655 --> 00:04:50.757 
关于开发你的应用

00:04:51.792 --> 00:04:54.061 
特征集合通常包括不只一个东西

00:04:54.127 --> 00:04:55.028 
这很好

00:04:55.095 --> 00:04:56.196 
通常它们包含多个东西

00:04:56.263 --> 00:04:58.031 
即使你在屏幕上看到的3个

00:04:58.098 --> 00:05:01.335 
也小于特征集合的大小

00:05:01.401 --> 00:05:04.938 
你使你的应用自适应时将要处理

00:05:06.540 --> 00:05:09.109 
让我给你更多什么是特征的例子

00:05:09.176 --> 00:05:11.044 
我们会谈论更多尺寸类

00:05:11.144 --> 00:05:14.314 
还有动态字体大小
这是今年新增的

00:05:15.048 --> 00:05:17.985 
还有布局方向
从左到右或从右到左

00:05:18.051 --> 00:05:21.722 
这三个是布局特征的例子

00:05:22.222 --> 00:05:24.258 
特征还可以描述外观

00:05:24.591 --> 00:05:29.029 
正在运行的屏幕的色域是什么

00:05:29.096 --> 00:05:33.333 
或对Apple TV界面样式是什么
是浅色还是深色

00:05:34.368 --> 00:05:36.403 
但是特征还可以描述能力

00:05:36.470 --> 00:05:41.675 
你正在使用的设备是否
支持3D touch

00:05:42.843 --> 00:05:44.845 
如果你想要所有可能的特征的
完整列表

00:05:44.912 --> 00:05:47.381 
你可以用来使你的应用自适应

00:05:47.447 --> 00:05:49.716 
查看UITraitCollection接口

00:05:49.983 --> 00:05:53.654 
但是现在我想要讨论尺寸类

00:05:54.888 --> 00:05:58.625 
你的应用可能运行在很多不同的
尺寸上

00:05:59.193 --> 00:06:02.462 
这是所有可能的尺寸的滑稽简化

00:06:03.497 --> 00:06:06.600 
它有三种

00:06:06.667 --> 00:06:08.669 
定制特别突出

00:06:08.735 --> 00:06:10.904 
一是屏幕尺寸

00:06:10.971 --> 00:06:12.673 
二是方向

00:06:12.973 --> 00:06:15.008 
三是适配

00:06:15.075 --> 00:06:17.511 
这就像是你在多任务模式里

00:06:17.845 --> 00:06:19.947 
不使用形式系统来实现它的一个方式

00:06:20.013 --> 00:06:23.784 
是对其中的任何一个的改变进行响应

00:06:24.051 --> 00:06:25.586 
但那会带来很多工作

00:06:27.454 --> 00:06:31.124 
所以你要做的是让你的布局基于

00:06:31.191 --> 00:06:33.527 
你的应用的可用空间

00:06:33.594 --> 00:06:36.964 
而不是那三个可定制的方面

00:06:37.564 --> 00:06:39.666 
我说的和可用空间互动是什么意思？

00:06:39.733 --> 00:06:42.269 
我们有两种方式和可用空间互动

00:06:42.336 --> 00:06:44.404 
给定改变的尺寸

00:06:44.671 --> 00:06:47.374 
所以有粗粒改变比如改变

00:06:47.441 --> 00:06:50.878 
从iPhone到iPad
在尺寸上是一个大的改变

00:06:51.411 --> 00:06:54.047 
还有细粒改变比如

00:06:54.114 --> 00:06:58.519 
从iPhone 6s到SE
这是小一些的改变

00:06:58.986 --> 00:07:01.622 
对每个改变
细粒或粗粒

00:07:01.688 --> 00:07:03.023 
你需要用到不同的技术

00:07:03.090 --> 00:07:04.892 
不同的技术会帮助你处理

00:07:05.659 --> 00:07:08.362 
让我们从粗粒改变开始

00:07:10.097 --> 00:07:11.632 
这想我们都很熟悉这句引用

00:07:11.698 --> 00:07:13.267 
这是我最喜欢的引用

00:07:13.433 --> 00:07:17.704 
我们工程师喜欢创造间接的层
来帮我们解决问题

00:07:17.771 --> 00:07:20.240 
让事情变简单
诚实的说是懒

00:07:20.841 --> 00:07:23.744 
所以尺寸类
是一个间接层

00:07:24.411 --> 00:07:28.415 
间接层总是描述一些更高阶的行为

00:07:28.882 --> 00:07:30.517 
什么高阶行为

00:07:30.584 --> 00:07:34.521 
是尺寸类正在描述的
那就是体验

00:07:35.422 --> 00:07:37.357 
让我给你2个例子

00:07:37.858 --> 00:07:41.595 
第一个是我们经常看到的典型例子

00:07:41.662 --> 00:07:43.263 
iPad上我们有一个主从布局

00:07:43.330 --> 00:07:45.933 
信息被并行显示

00:07:46.233 --> 00:07:50.070 
在主栏的改变会反应在右边的详情栏

00:07:51.171 --> 00:07:53.540 
但是在iPhone没有这么大的空间

00:07:53.607 --> 00:07:56.210 
我们显示信息的方式改变了

00:07:56.643 --> 00:07:58.612 
我们用一个浏览控制器

00:07:58.679 --> 00:08:01.949 
我们会更多的用钻入的方式呈现
信息

00:08:02.850 --> 00:08:04.084 
News是另一个例子

00:08:04.151 --> 00:08:07.120 
在iPad上我们有坐标视图

00:08:07.187 --> 00:08:11.191 
坐在沙发上滚动翻阅新闻

00:08:11.625 --> 00:08:13.293 
但在iPhone上
它是一个表格视图

00:08:13.360 --> 00:08:15.796 
我只能快速用手指滚动

00:08:16.496 --> 00:08:20.300 
所以体验取决于我们怎么呈现信息

00:08:20.367 --> 00:08:22.936 
当你思考应用的粗粒改变时

00:08:23.003 --> 00:08:26.740 
思考这类体验
你呈现信息的方式

00:08:26.807 --> 00:08:30.644 
来决定是否以及怎样呈现那些信息

00:08:32.546 --> 00:08:33.480 
让我们说一些具体的

00:08:33.547 --> 00:08:36.015 
我将复习一些高阶的事情

00:08:36.383 --> 00:08:38.418 
什么是尺寸类？

00:08:38.784 --> 00:08:40.921 
这是我们带回特征系统的地方

00:08:40.988 --> 00:08:43.023 
尺寸类有2个特征

00:08:43.090 --> 00:08:46.193 
这是horizontalSizeClass
这是verticalSizeClass

00:08:46.260 --> 00:08:49.530 
有两个可能值紧凑和普通

00:08:49.930 --> 00:08:52.666 
紧凑表明你的空间受限

00:08:52.733 --> 00:08:55.869 
所以你要用紧凑的方式呈现信息

00:08:56.703 --> 00:08:58.906 
普通说明你的空间不受限

00:08:58.972 --> 00:09:01.041 
你可以自由探索

00:09:01.575 --> 00:09:04.578 
至少到你12.9英寸的
iPad Pro的边界

00:09:05.812 --> 00:09:07.981 
这表明我们有4个组合

00:09:08.248 --> 00:09:11.151 
关于特征和可能的值

00:09:12.052 --> 00:09:14.054 
现在我想快速指出一些标注

00:09:14.121 --> 00:09:15.155 
我用在这个幻灯片中

00:09:15.222 --> 00:09:16.623 
因为这些标注你会看到

00:09:16.690 --> 00:09:19.826 
在Interface Builder文档和
这个系统的一些其他地方

00:09:20.127 --> 00:09:22.296 
所以它是描述尺寸类的组合

00:09:22.362 --> 00:09:24.031 
这里有两件事需要注意

00:09:24.431 --> 00:09:27.134 
首先这里有一个W表明是宽度类

00:09:27.201 --> 00:09:30.037 
值C或者R代表紧凑和普通

00:09:30.103 --> 00:09:32.539 
H代表这是高度类或者垂直类

00:09:32.639 --> 00:09:34.341 
再一次有C或者R

00:09:34.575 --> 00:09:35.909 
我们在Interface Builder里
看到这些

00:09:35.976 --> 00:09:37.778 
你也会在文档中看到

00:09:37.845 --> 00:09:39.780 
我希望你们熟悉它

00:09:40.547 --> 00:09:43.217 
一些设备是怎么被归类到这些组合？

00:09:43.784 --> 00:09:47.054 
一个紧凑的宽度
但是高度的普通的

00:09:47.120 --> 00:09:49.890 
比如说纵向的iPhone

00:09:50.524 --> 00:09:53.560 
iPad是普通的宽度和高度

00:09:53.627 --> 00:09:56.363 
在两种方向上

00:09:57.297 --> 00:10:00.968 
你会看到横向的iPhone有紧凑
的宽度和高度

00:10:01.034 --> 00:10:03.637 
6s Plus是一个例外

00:10:03.704 --> 00:10:06.006 
在水平时有普通宽度

00:10:06.073 --> 00:10:08.942 
当它横向时
这就是为什么你看到主从布局

00:10:09.009 --> 00:10:11.778 
比如邮件 当你用6s Plus时

00:10:15.616 --> 00:10:17.117 
这会怎么帮助我？

00:10:17.384 --> 00:10:19.086 
这怎么使我的生活变容易？

00:10:19.152 --> 00:10:21.088 
一个明显的事是不需思考

00:10:21.154 --> 00:10:24.424 
300种组合
你只需要思考4种

00:10:25.025 --> 00:10:26.159 
但是等等
它变得更好

00:10:26.660 --> 00:10:28.729 
你只需要思考两种

00:10:28.996 --> 00:10:34.234 
因为宽度类是最常用的特征类

00:10:34.301 --> 00:10:35.836 
你需要处理的

00:10:36.503 --> 00:10:38.338 
如果我们考虑所有可能的特征

00:10:38.405 --> 00:10:41.308 
布局特征是最常见的类别

00:10:41.475 --> 00:10:42.709 
在我们要打交道的特征中

00:10:43.143 --> 00:10:47.147 
在布局特征中尺寸类是最常见的
布局特征

00:10:47.214 --> 00:10:48.348 
你将会打交道

00:10:48.415 --> 00:10:51.518 
特别是尺寸类和宽度类

00:10:51.752 --> 00:10:54.721 
是目前为止你最常打交道的类

00:10:55.122 --> 00:10:57.124 
也就是说你设计你的应用

00:10:57.191 --> 00:10:58.992 
考虑你想要它们如何不同

00:10:59.059 --> 00:11:00.961 
在iPad和iPhone之间

00:11:01.261 --> 00:11:04.431 
主要是思考水平的不同

00:11:05.299 --> 00:11:07.134 
当然你们会有定制的应用

00:11:07.201 --> 00:11:09.136 
你们会做特别的事
我们知道

00:11:09.469 --> 00:11:13.740 
但是最常见的情况是只考虑
宽度类

00:11:14.908 --> 00:11:17.110 
现在系统需要决定

00:11:17.544 --> 00:11:22.015 
设备 方向 适配怎样符合这些组合

00:11:23.116 --> 00:11:24.084 
有趣的地方是

00:11:24.151 --> 00:11:27.754 
这些组合会在相同的设备
上改变

00:11:27.821 --> 00:11:29.923 
随着用户操作你的应用

00:11:29.990 --> 00:11:32.593 
我可以带来slide over
我可以进入多任务

00:11:32.759 --> 00:11:34.761 
我可以改变设备的方向

00:11:35.229 --> 00:11:37.598 
所以如果你使用尺寸类

00:11:37.664 --> 00:11:40.100 
要表现你的数据

00:11:40.367 --> 00:11:42.236 
系统会为你做很多工作

00:11:42.302 --> 00:11:45.839 
它会在所有设备和方向间过渡

00:11:45.906 --> 00:11:47.975 
适配过去现在和未来

00:11:48.442 --> 00:11:51.411 
这很有帮助
这简化你的工作

00:11:51.478 --> 00:11:53.380 
使你的应用自适应

00:11:55.182 --> 00:11:57.251 
让我给你一些例子关于动态

00:11:57.317 --> 00:11:59.753 
改变发生在系统里的

00:12:00.521 --> 00:12:03.090 
再次回到split view控制器

00:12:03.690 --> 00:12:05.792 
当我的iPad是横向时

00:12:05.859 --> 00:12:08.195 
我们会有并排的两个视图控制器

00:12:08.262 --> 00:12:10.330 
但是在iPhone上我们折叠它

00:12:10.564 --> 00:12:11.765 
到一个浏览控制器

00:12:12.132 --> 00:12:15.536 
若你使用UI Split View控制器
你会自动得到这个行为

00:12:16.336 --> 00:12:19.973 
除了视图控制器结构
这还作用于展示

00:12:20.274 --> 00:12:23.877 
假设我有一个iPad我带来一个弹出
它将会是这种标注样式

00:12:24.311 --> 00:12:28.248 
但是在iPhone它会变成模型展示
样式

00:12:28.749 --> 00:12:31.818 
再一次 若你使用套件里的控制和展示

00:12:31.885 --> 00:12:34.087 
你就会得到很多为你预设好的行为

00:12:34.421 --> 00:12:35.856 
尺寸类会改变

00:12:35.923 --> 00:12:37.691 
而你的应用会自动适应

00:12:38.058 --> 00:12:38.926 
这很整洁

00:12:40.727 --> 00:12:42.396 
让我们来谈谈细粒改变

00:12:42.462 --> 00:12:43.664 
我只想说一点

00:12:43.730 --> 00:12:46.500 
那也是在尺寸类中

00:12:46.567 --> 00:12:51.972 
你会想要使用自动布局
来对可用空间的变化做出反应

00:12:52.306 --> 00:12:54.975 
在自动布局中你可以指定布局的关系

00:12:55.042 --> 00:12:56.443 
在一个非常有陈述性的表格中

00:12:56.710 --> 00:12:58.245 
然后系统就会自动移动元素

00:12:58.312 --> 00:13:01.915 
并且改变元素的大小
当可用的空间改变时

00:13:02.049 --> 00:13:03.350 
在更细分的层次

00:13:04.751 --> 00:13:08.655 
除了粗粒和细粒还有一种改变

00:13:08.722 --> 00:13:11.024 
我称之为中粒改变

00:13:11.458 --> 00:13:12.960 
我不打算告诉你它是什么

00:13:13.026 --> 00:13:14.228 
我会保持悬念

00:13:14.294 --> 00:13:15.662 
这样你们就会回来看第二部分

00:13:15.729 --> 00:13:18.098 
他们会告诉你关于中粒改变的一切

00:13:19.867 --> 00:13:22.402 
我们已经谈过了什么是尺寸类

00:13:22.469 --> 00:13:25.038 
我们向你展示了特征系统

00:13:25.405 --> 00:13:26.907 
我现想告诉你们一些背景知识

00:13:26.974 --> 00:13:28.275 
关于系统怎么工作

00:13:28.442 --> 00:13:30.410 
以及作为开发者
你们怎么插入其中

00:13:32.713 --> 00:13:34.948 
用一句话简而言之

00:13:35.115 --> 00:13:36.316 
特征系统工作的方式

00:13:36.383 --> 00:13:39.186 
是它得到一个特征集合并且把它
向下传递

00:13:39.253 --> 00:13:42.589 
穿过你的视图结构
给一路上的所有停止点

00:13:42.656 --> 00:13:44.758 
一个处理特征集合的机会

00:13:45.359 --> 00:13:48.462 
这都是从屏幕层开始
屏幕会得到一个特征集合

00:13:48.795 --> 00:13:50.097 
需要注意的重点

00:13:50.163 --> 00:13:53.734 
是每个设备 方向 适配

00:13:53.800 --> 00:13:56.370 
都会有一个完整的指定的特征集合

00:13:56.670 --> 00:14:00.040 
也就是说不同的特征会有值

00:14:01.241 --> 00:14:02.943 
然后屏幕会向下传递给所有窗口

00:14:03.010 --> 00:14:06.046 
在那个屏幕上
窗口将把它传递

00:14:06.113 --> 00:14:08.348 
给它的视图的根视图控制器

00:14:08.415 --> 00:14:11.818 
然后再不停地传递给子视图控制器
和子视图

00:14:12.853 --> 00:14:18.525 
现在这一路上的每一个停止点都
符合UITraitEnvironment

00:14:18.592 --> 00:14:23.096 
UITraitEnvironment有一个被称为
traitCollectionDidChange的关键方法

00:14:23.430 --> 00:14:25.365 
在这一路上的每个停止点
这个特征集合

00:14:25.432 --> 00:14:28.802 
被向下传递都会调用
traitCollectionDidChange

00:14:29.102 --> 00:14:31.972 
这是开发者需要覆盖的方法

00:14:32.172 --> 00:14:34.074 
来使你的应用自适应

00:14:34.408 --> 00:14:36.910 
traitCollectionDidChange
是这里的关键方法

00:14:37.611 --> 00:14:40.414 
你基本上只需要覆盖它

00:14:40.547 --> 00:14:42.683 
在视图控制器和视图这层

00:14:44.184 --> 00:14:45.853 
这是一个简单的线性例子

00:14:45.919 --> 00:14:47.721 
什么是复杂一点的例子？

00:14:48.121 --> 00:14:50.424 
让我们看横向的iPad

00:14:50.490 --> 00:14:52.059 
我们有自己的屏幕
到这个窗口

00:14:52.125 --> 00:14:54.027 
向下到视图split view
控制器等等

00:14:54.094 --> 00:14:56.730 
在这里我们看到发生了变化

00:14:57.064 --> 00:15:00.000 
当特征集合向下传递时

00:15:00.067 --> 00:15:02.102 
实际上你可以改变特征集合

00:15:02.169 --> 00:15:04.438 
当向子视图控制器传递时

00:15:04.872 --> 00:15:06.907 
split view控制器
将会为你这样做

00:15:06.974 --> 00:15:07.908 
它将要做的是

00:15:07.975 --> 00:15:12.412 
改变它要传递给特征集合主视图
控制器的特征集合

00:15:12.479 --> 00:15:14.882 
它要改变
horizontalSizeClass

00:15:14.948 --> 00:15:17.017 
为一个紧凑尺寸类

00:15:17.084 --> 00:15:19.653 
而向细节视图传递一个普通的

00:15:19.920 --> 00:15:21.021 
你们也可以这样做

00:15:21.088 --> 00:15:24.258 
当你们开发你们自己的视图
控制器容器时

00:15:24.558 --> 00:15:27.160 
但是一般你们不需要这样做

00:15:28.595 --> 00:15:31.231 
这是traitCollectionDidChange
是什么样子的例子

00:15:31.298 --> 00:15:33.734 
我会带你看一些关键点

00:15:34.034 --> 00:15:35.969 
首先为了让系统帮你完成一系列
工作

00:15:36.036 --> 00:15:37.371 
你需确保调用super函数

00:15:38.071 --> 00:15:40.974 
接下来你希望工作只在特征

00:15:41.041 --> 00:15:42.910 
你感兴趣的特征改变了

00:15:43.510 --> 00:15:45.045 
我听到了你的问题

00:15:45.345 --> 00:15:47.314 
traitCollectionDidChange
被调用了

00:15:47.381 --> 00:15:48.682 
这难道不表明特征改变了？

00:15:48.749 --> 00:15:50.050 
这是对的

00:15:50.117 --> 00:15:53.654 
特征集合在任何特征改变时被调用

00:15:54.188 --> 00:15:56.290 
通常你的应用只想知道少量的特征

00:15:56.356 --> 00:16:01.195 
大多数情况下只是水平尺寸类

00:16:01.395 --> 00:16:04.031 
所以你想要确保你没有做额外的工作

00:16:04.097 --> 00:16:07.100 
如果你感兴趣的特征没有改变

00:16:08.535 --> 00:16:11.271 
接下来我要改变可能的值

00:16:11.338 --> 00:16:13.340 
对horizontalSizeClass

00:16:13.407 --> 00:16:14.641 
作为一个边注

00:16:14.975 --> 00:16:17.578 
我倾向于使用switch语句

00:16:17.644 --> 00:16:20.914 
当我在Swift和Objective-C里
处理枚举类型时

00:16:20.981 --> 00:16:24.451 
因为这表明枚举的申明改变时

00:16:24.518 --> 00:16:28.021 
如果有一个新的类型
我会在构建时得到警告

00:16:28.355 --> 00:16:30.157 
若我在使用详尽的switch语句

00:16:30.490 --> 00:16:32.559 
我鼓励你们也这样做

00:16:32.626 --> 00:16:34.194 
这节省了我大量时间

00:16:35.329 --> 00:16:37.197 
比如说它的值是紧凑

00:16:37.264 --> 00:16:39.399 
我会离开来设置我的约束条件

00:16:39.800 --> 00:16:43.737 
所以对所有要自适应的视图
和视图控制器

00:16:43.804 --> 00:16:47.007 
traitCollectionDidChange
需要被覆盖

00:16:48.041 --> 00:16:50.077 
再一次这会调用所有符合

00:16:50.143 --> 00:16:51.712 
UITraitEnvironment的方法

00:16:51.879 --> 00:16:54.548 
这是你进行自适应的地方

00:16:55.315 --> 00:16:57.351 
看起来要做很多工作

00:16:57.417 --> 00:16:59.319 
实现
traitCollectionDidChange

00:16:59.386 --> 00:17:01.421 
对每一个视图和视图控制器

00:17:01.488 --> 00:17:03.724 
对你应用所有可能的改变

00:17:04.223 --> 00:17:05.526 
很多事有可能改变

00:17:05.992 --> 00:17:08.962 
所以有很多系统会为你处理

00:17:09.029 --> 00:17:11.431 
traitCollectionDidChange

00:17:12.098 --> 00:17:14.734 
比如一个系统是
Interface Builder

00:17:14.800 --> 00:17:17.671 
若你使用Interface 
Builder 来构造你的界面

00:17:17.738 --> 00:17:21.275 
你在Interface Builder里
使用自适应性和尺寸类

00:17:21.340 --> 00:17:23.676 
系统知道怎样自动应用

00:17:23.743 --> 00:17:25.244 
当特征集合改变时

00:17:26.046 --> 00:17:28.048 
另一个例子是资产类别

00:17:28.115 --> 00:17:30.184 
你可以针对不同的色域指定不同的图像

00:17:30.250 --> 00:17:32.686 
不同的尺寸类
不同的比例

00:17:32.753 --> 00:17:36.356 
都会在traitCollectionDidChange
里被应用

00:17:37.024 --> 00:17:41.828 
最后UIAppearance
可以为了特征集合被定制

00:17:41.895 --> 00:17:44.498 
所以你可以用不同的颜色方案

00:17:44.565 --> 00:17:46.934 
针对Apple TV的
浅色和深色模式

00:17:47.000 --> 00:17:49.536 
这些改变都会自动被应用

00:17:49.603 --> 00:17:51.572 
在traitCollectionDidChange中

00:17:51.638 --> 00:17:53.307 
你会想借助这些系统

00:17:53.373 --> 00:17:54.808 
为你处理这些

00:17:54.875 --> 00:17:56.977 
这让你很清楚地表明

00:17:57.044 --> 00:17:59.880 
关于你想要你的界面怎么应对和
适应

00:17:59.947 --> 00:18:02.282 
这使得遵守和维护都变得非常简单

00:18:03.817 --> 00:18:07.387 
回顾一下我们这么久所看到的

00:18:07.754 --> 00:18:11.925 
特征描述你的应用运行的环境

00:18:11.992 --> 00:18:14.494 
特征集合是一系列的特征

00:18:14.561 --> 00:18:16.096 
有它们相关联的值

00:18:16.230 --> 00:18:20.434 
可能是布局特征
外观特征

00:18:20.501 --> 00:18:21.935 
也可以是性能特征

00:18:23.003 --> 00:18:24.805 
要覆盖
traitCollectionDidChange

00:18:24.872 --> 00:18:26.840 
来使你的应用自适应

00:18:27.007 --> 00:18:29.009 
你想要借助系统来响应

00:18:29.076 --> 00:18:30.878 
traitCollectionDidChange

00:18:31.912 --> 00:18:34.982 
尺寸类描述你的应用的体验

00:18:35.215 --> 00:18:37.217 
你的信息是怎么编排的

00:18:38.051 --> 00:18:40.053 
然后回来

00:18:40.120 --> 00:18:42.356 
系统可以为你做如此多的工作

00:18:42.422 --> 00:18:44.958 
如果你借助我们给你的这些工具

00:18:46.460 --> 00:18:51.331 
我再用20分钟来展示自适应的
强大之处

00:18:51.765 --> 00:18:54.635 
要看它有多酷
你需要在活动中看到它

00:18:55.135 --> 00:18:58.238 
所以我想请Brent来演示那些改变

00:18:58.305 --> 00:19:01.642 
我们一直对工具所做的
来改进自适应的工作流程

00:19:01.708 --> 00:19:03.177 
有请Brent Shank

00:19:09.283 --> 00:19:10.184 
谢谢你Kevin

00:19:10.350 --> 00:19:12.452 
现在你们知道了基本的构造组件

00:19:12.519 --> 00:19:14.588 
用来增加应用的自适应性

00:19:14.788 --> 00:19:17.925 
那就是特征 特征集合和尺寸类

00:19:17.991 --> 00:19:19.493 
我们演示Xcode怎样

00:19:19.560 --> 00:19:22.296 
还有Interface
Builder编辑器 使这变得容易

00:19:22.729 --> 00:19:23.931 
让我去演示电脑

00:19:25.766 --> 00:19:27.267 
离这挺远

00:19:31.905 --> 00:19:36.410 
我认为构建一个简单的视图很有
帮助

00:19:36.810 --> 00:19:40.113 
来聚焦到特征集合系统的根本

00:19:40.447 --> 00:19:41.949 
来添加一点自适应性

00:19:42.449 --> 00:19:43.684 
这就是我们要构建的

00:19:43.750 --> 00:19:45.252 
这很简单

00:19:45.319 --> 00:19:47.554 
这描述一个位置
我选择Tenaya湖

00:19:47.621 --> 00:19:49.056 
你应该把它加进列表

00:19:49.122 --> 00:19:51.191 
这是个很棒的地方
在Yosemite

00:19:51.391 --> 00:19:53.393 
这个视图在顶部显示一个标签

00:19:53.460 --> 00:19:55.662 
在底部是这个地方的图像

00:19:56.063 --> 00:19:58.899 
请注意在iPad上有一些改变

00:19:58.966 --> 00:20:01.435 
一些元素在iPhone上没有出现

00:20:01.735 --> 00:20:02.636 
你看到在顶部

00:20:03.303 --> 00:20:04.805 
标签看起来不同

00:20:04.872 --> 00:20:08.041 
那只出现在iPad上

00:20:08.275 --> 00:20:09.877 
我们现在要构建这些

00:20:09.943 --> 00:20:13.113 
你会看到这在Xcode 8里使用
工具来做多么简单

00:20:13.914 --> 00:20:16.216 
我已经创建了这个项目
我会转到

00:20:16.984 --> 00:20:20.020 
这个标签页
我已有载入好的storyboard

00:20:20.621 --> 00:20:22.890 
有一些东西值得看一下

00:20:22.956 --> 00:20:26.226 
在Xcode 8 Interface
Builder 画布里

00:20:26.760 --> 00:20:28.662 
首先请看视图是怎么被渲染的

00:20:29.296 --> 00:20:31.365 
看起来就像纵向的iPhone 6s

00:20:31.431 --> 00:20:32.933 
因为它确实就是

00:20:32.999 --> 00:20:35.702 
我们用模拟器来渲染这些内容

00:20:35.969 --> 00:20:39.306 
你在设计画布里得到像素完美渲染

00:20:39.406 --> 00:20:42.242 
我们认为这对你的工作流程
有巨大的帮助

00:20:42.476 --> 00:20:44.011 
当你尝试将这些美丽的设计

00:20:44.077 --> 00:20:46.880 
从设计者那带入你的应用时

00:20:47.981 --> 00:20:49.683 
另一个值得注意的事是那个

00:20:50.083 --> 00:20:50.984 
谢谢

00:20:55.088 --> 00:20:57.925 
另一个大的改变是现在
在Interface Builder画布里的场景

00:20:57.991 --> 00:21:01.528 
总是被按照真实设备的尺寸来渲染

00:21:01.595 --> 00:21:03.030 
或者它们的一个配置

00:21:03.597 --> 00:21:05.799 
相比前个版本的Xcode
这是一个大的改变

00:21:06.300 --> 00:21:09.136 
让我们看看其他新特性

00:21:09.203 --> 00:21:11.738 
我在底部这条这里放大

00:21:11.805 --> 00:21:13.640 
你可以看到所有东西

00:21:13.907 --> 00:21:16.543 
这是Interface Builder
画布的底部按钮条

00:21:16.677 --> 00:21:17.978 
它存在有一段时间了

00:21:18.045 --> 00:21:20.514 
在右手边你可以看到控制

00:21:20.581 --> 00:21:21.882 
用来添加布局限制条件

00:21:22.082 --> 00:21:23.217 
我希望你对它们熟悉

00:21:23.584 --> 00:21:27.120 
在中间是Xcode 8的
新的放大控制

00:21:27.187 --> 00:21:29.723 
如果你还没有安装和试用beta版

00:21:29.790 --> 00:21:31.692 
很吸引人的一点是可以编辑你的
场景

00:21:31.859 --> 00:21:33.627 
在任何缩放级别中

00:21:33.694 --> 00:21:35.195 
请一定试用一下
它很棒

00:21:40.300 --> 00:21:43.103 
但是今天我想谈的是这里的这个
按钮

00:21:43.704 --> 00:21:45.439 
它说视图作为iPhone 6s

00:21:45.506 --> 00:21:48.008 
在括号里有标注说

00:21:48.075 --> 00:21:49.376 
如果你坐在后面看不到

00:21:50.210 --> 00:21:51.645 
它说wC hR

00:21:51.845 --> 00:21:53.547 
这是告诉我尺寸类

00:21:53.614 --> 00:21:56.116 
我正在查看的设备配置的尺寸类

00:21:56.350 --> 00:21:57.818 
这是一纵向iPhone 6s

00:21:57.985 --> 00:22:01.255 
也就是说它是有紧凑宽度和
正常长度的设备

00:22:01.321 --> 00:22:03.323 
这是一些Kevin谈过的术语

00:22:03.390 --> 00:22:06.460 
我会展示怎么用它们来添加适应性

00:22:07.661 --> 00:22:10.931 
场景被渲染在
纵向的iPhone 6s上

00:22:10.998 --> 00:22:12.366 
如果我想要改变它呢？

00:22:12.432 --> 00:22:15.402 
你只需要点击查看作为按扭

00:22:15.469 --> 00:22:17.671  
它会打开新的设备配置条

00:22:17.738 --> 00:22:20.040  
它是Xcode 8中全新的
很酷

00:22:25.045 --> 00:22:27.447 
我放大了让你看清楚

00:22:27.514 --> 00:22:29.816 
这里有很多堆叠的图标

00:22:29.883 --> 00:22:31.618 
最左边的一堆表示

00:22:31.685 --> 00:22:34.821 
Apple目前推出的不同的设备尺寸

00:22:34.888 --> 00:22:37.057 
我们在左边有最大的iPad

00:22:37.291 --> 00:22:39.493 
在右边有最小的iPhone

00:22:39.860 --> 00:22:42.029 
紧邻它的是一堆按钮

00:22:42.095 --> 00:22:45.098 
让你选择想要查看场景的方向

00:22:45.165 --> 00:22:46.500 
我现在就要这么做

00:22:46.800 --> 00:22:48.135 
我要转到横向

00:22:48.202 --> 00:22:51.538 
在设计画布中你可以在所有设备
中循环

00:22:51.605 --> 00:22:55.442 
还可以循环所有方向
来查看你的内容会被怎样显示

00:22:55.509 --> 00:22:56.643 
和渲染
这很酷

00:22:57.845 --> 00:22:58.745 
谢谢

00:23:01.815 --> 00:23:06.019 
所以iPhone很有趣
但是iPad更有趣

00:23:06.086 --> 00:23:07.321  
我现在选择一个

00:23:07.754 --> 00:23:10.424  
你可以看到那有一系列其他的按钮

00:23:10.490 --> 00:23:12.626  
出现
它代表适配

00:23:12.759 --> 00:23:16.763 
iPhone对每个方向只有一个适配
就是全屏

00:23:17.397 --> 00:23:20.100 
iPad有趣一些
因为你的应用

00:23:20.400 --> 00:23:24.004 
你的用户可以选择在slide over
或split view中运行你的应用

00:23:24.071 --> 00:23:25.572 
这就是在这里适配是什么

00:23:25.739 --> 00:23:29.309 
如果你选择这个你会看到
屏幕现在渲染

00:23:29.376 --> 00:23:33.914 
这个应用就好像用户在iPad
中的slide over中运行它一样

00:23:33.981 --> 00:23:35.883 
所以在设计画布中就考虑这些

00:23:35.949 --> 00:23:38.418  
你可以在所有配置中循环

00:23:38.619 --> 00:23:40.587 
所有的方向 设备

00:23:41.088 --> 00:23:42.789 
来查看你的内容会被如何编排

00:23:42.856 --> 00:23:44.625 
这是一个很强大的新工作流程

00:23:44.925 --> 00:23:46.260 
会节约你大量时间

00:23:52.332 --> 00:23:55.202 
这就是Xcode 8
中Interface Builder的新功能

00:23:55.269 --> 00:23:57.971 
现在我们来看看构建这个视图
要进行的工作

00:23:58.438 --> 00:24:00.040 
这是我们首先要做的

00:24:00.107 --> 00:24:01.008 
我们要添加这个标签

00:24:01.308 --> 00:24:05.212 
我们要这样添加它
它就会在所有设备配置中生效

00:24:05.546 --> 00:24:08.882 
这可能是你在Interface
Builder中做的最多的

00:24:09.149 --> 00:24:13.253 
你通常不太基于尺寸类来定制化

00:24:13.820 --> 00:24:14.988 
让我们现在这样做

00:24:15.589 --> 00:24:20.494 
我有设备定制条
iPads被选中了

00:24:20.561 --> 00:24:22.196 
什么被选中并不重要

00:24:22.262 --> 00:24:25.332 
因为我将要做的是使它作用于
每一个

00:24:26.233 --> 00:24:29.203 
我在Interface
Builder库里 找到标签

00:24:29.269 --> 00:24:30.304 
我把它拖出来

00:24:30.938 --> 00:24:33.740 
我现在要添加一些自动布局
约束条件

00:24:33.807 --> 00:24:36.376 
就像Kevin说过的
这是系统的一个功能

00:24:36.443 --> 00:24:40.714 
我们提供它使得

00:24:40.781 --> 00:24:43.517 
你的UI适应所有不同的设备配置

00:24:43.951 --> 00:24:45.152 
我要添加一些约束条件

00:24:45.652 --> 00:24:50.190 
我要把它固定到顶部
做为垂直间距

00:24:50.557 --> 00:24:53.060 
我把这个在容器里水平居中

00:24:53.393 --> 00:24:55.762 
我在它们间加入垂直间距的约束

00:24:56.196 --> 00:24:58.765 
垂直间距下的图像视图

00:24:59.399 --> 00:25:03.971 
我有一些内容我要粘贴到这
看起来不错

00:25:04.037 --> 00:25:06.974 
我有一个约束
在这个图像视图

00:25:07.040 --> 00:25:09.042 
和顶部的布局之间
我不再需要它了

00:25:09.142 --> 00:25:10.377 
因为我添加了标签

00:25:11.578 --> 00:25:12.613 
我要删除它

00:25:12.980 --> 00:25:15.716 
我如何知道做的是正确的
并且添加了正确的约束条件？

00:25:15.782 --> 00:25:18.085 
这就是设备配置条发挥作用的地方

00:25:18.151 --> 00:25:21.255 
因为看它在iPhone中是怎样显示
的很容易

00:25:21.321 --> 00:25:23.090  
你可以看到它停留在正确的位置

00:25:23.156 --> 00:25:27.394 
我遍历所有的设备甚至不同的方向

00:25:27.528 --> 00:25:28.362 
好的

00:25:28.428 --> 00:25:30.964 
这是你常用的操作

00:25:31.231 --> 00:25:34.001 
每天都在Interface
Builder中做 很容易

00:25:34.801 --> 00:25:37.204 
让我们来添加一些适应性

00:25:37.271 --> 00:25:39.973 
一些利用特征集合系统的定制化

00:25:40.707 --> 00:25:41.775 
我们现在要做什么？

00:25:42.276 --> 00:25:45.646 
我们要修改这个标签
顶部这个标签的字体

00:25:46.113 --> 00:25:50.717 
设计师想用System Semibold 36
但是只针对iPad

00:25:51.585 --> 00:25:53.020 
让我们回到storyboard

00:25:54.154 --> 00:25:57.858 
当你考虑为一个设备添加定制化

00:25:58.058 --> 00:26:00.627 
你应该考虑的是添加定制

00:26:00.694 --> 00:26:04.097 
给一个特定的特征集合
在这个例子中是一个尺寸类

00:26:04.498 --> 00:26:08.168 
我们为所有的iPad
和iPhone进行设计

00:26:08.502 --> 00:26:11.138 
但是作为一个开发者
你应该能够转化

00:26:11.205 --> 00:26:13.907 
它成为尺寸类
你想要针对的

00:26:14.274 --> 00:26:15.409 
我们使这变得很容易

00:26:15.576 --> 00:26:21.215 
比如我有一个iPad和尺寸类
在设备条被选定了

00:26:21.281 --> 00:26:23.016 
我会放大这样你可以看到

00:26:23.550 --> 00:26:26.019  
它显示普通宽度 普通高度

00:26:26.186 --> 00:26:27.187  
所以你不需要猜测

00:26:27.254 --> 00:26:30.257  
一个特定设备配置的尺寸类是什么

00:26:30.324 --> 00:26:32.459  
你只需要在设备条中选择配置

00:26:32.526 --> 00:26:34.461  
Interface Builder
会告诉你尺寸类是什么

00:26:34.661 --> 00:26:36.196  
我们认为这是另一个优秀的改进

00:26:36.797 --> 00:26:39.967  
现在让我们介绍

00:26:40.133 --> 00:26:43.770 
让我们看看这个标签在不同尺寸类
中看起来是怎样的

00:26:44.571 --> 00:26:46.173 
我在画布中选中它

00:26:47.140 --> 00:26:48.842 
然后来到属性查看器

00:26:48.909 --> 00:26:50.477 
我已经选择了它

00:26:50.844 --> 00:26:52.012 
我会再放大

00:26:52.079 --> 00:26:54.414 
所以你可以看清楚这个查看器

00:26:56.149 --> 00:26:59.586 
你看到那有很多属性

00:26:59.720 --> 00:27:00.787 
这个光标真大

00:27:00.854 --> 00:27:02.389 
边上有一个+按钮

00:27:02.823 --> 00:27:05.692 
这个+按钮表明那个属性

00:27:05.759 --> 00:27:08.462 
可以用特征集合系统来定制

00:27:09.296 --> 00:27:10.364 
让我们现在就这么做

00:27:10.631 --> 00:27:12.533 
我想要改变字体所以我点击这里

00:27:12.599 --> 00:27:15.702 
出现菜单允许我添加定制化

00:27:15.769 --> 00:27:17.538 
为普通宽度 普通高度

00:27:18.205 --> 00:27:19.306 
它为什么这么做？

00:27:19.373 --> 00:27:21.642 
因为我有普通宽度

00:27:21.742 --> 00:27:23.944 
普通高度的设备配置被选中了

00:27:24.011 --> 00:27:25.012 
这是有意义的

00:27:25.879 --> 00:27:28.315 
我们将这么做
会发生的事是

00:27:28.382 --> 00:27:32.019 
那个属性查看器现在为字体
显示另一行

00:27:32.119 --> 00:27:33.654 
再次 它有同样的标注

00:27:33.954 --> 00:27:37.424 
和我在设备条中看到的属性查看器

00:27:37.491 --> 00:27:39.259 
这就是为什么它很重要

00:27:39.326 --> 00:27:41.628 
在这里你知道发生了什么

00:27:45.432 --> 00:27:47.801 
让我们来改变
我会调出字体编辑器

00:27:48.001 --> 00:27:51.705 
我选择Semibold
因为我总是照着设计师说的做

00:27:51.805 --> 00:27:52.639 
36

00:27:53.040 --> 00:27:54.474 
然后点击完成

00:27:54.775 --> 00:27:58.145 
你可以看到在画布上渲染的更新

00:27:58.212 --> 00:27:59.479 
如果我选择iPhone

00:28:01.114 --> 00:28:02.416 
我可以预期会发生的是

00:28:02.516 --> 00:28:04.484 
字体会和刚才改变之前一样

00:28:04.585 --> 00:28:07.921 
因为我只针对普通宽度 普通高度
的设备

00:28:07.988 --> 00:28:09.122 
在那次编辑中

00:28:09.790 --> 00:28:13.026 
这就是使用属性查看器的例子

00:28:13.093 --> 00:28:15.762 
添加基于尺寸类的定制化

00:28:16.129 --> 00:28:17.598 
这是第一个定制

00:28:18.031 --> 00:28:19.800 
让我们添加另一个

00:28:19.867 --> 00:28:22.636 
这次我想要添加这个标签

00:28:22.703 --> 00:28:24.771 
我想只针对iPad

00:28:25.439 --> 00:28:26.940 
我回到storyboard

00:28:27.441 --> 00:28:29.409 
因为我想对iPad添加这个定制

00:28:29.476 --> 00:28:31.144 
我需要在设备条中选择它

00:28:31.478 --> 00:28:35.015 
请注意设备条上的这个按钮

00:28:35.082 --> 00:28:36.850 
上面写的是为特征改变

00:28:37.384 --> 00:28:40.087 
当你点击这个按钮时会出现一个
弹出窗口

00:28:40.153 --> 00:28:43.390 
问你我们想要怎样介绍这个特征

00:28:43.457 --> 00:28:44.491 
什么样的特征

00:28:44.558 --> 00:28:46.360 
你想要针对的特征集合

00:28:47.461 --> 00:28:48.328 
这是什么意思？

00:28:48.395 --> 00:28:49.596 
我有一个普通宽度

00:28:49.663 --> 00:28:54.001 
普通高度尺寸类设备配置

00:28:54.268 --> 00:28:56.670 
我可以选择对普通宽度普通高度
进行定制

00:28:56.737 --> 00:28:58.705 
如果我点击这两个复选框

00:28:59.173 --> 00:29:02.342 
但我也可以选择定制普通宽度

00:29:02.442 --> 00:29:05.646 
任意高度
或任意高度普通宽度

00:29:05.712 --> 00:29:06.613 
好的

00:29:06.680 --> 00:29:10.317 
我想要定制普通宽度而已

00:29:10.784 --> 00:29:11.718  
所以我这样做

00:29:11.785 --> 00:29:14.087  
这个工具条显示蓝色阴影来告诉我

00:29:14.488 --> 00:29:17.491  
我将做基于尺寸类的定制

00:29:17.925 --> 00:29:21.128  
让我们看看这个工具条的内容

00:29:22.029 --> 00:29:23.030  
我会在这放大

00:29:24.498 --> 00:29:28.335 
你可以看到它说我将改变8个
普通宽度的设备

00:29:28.402 --> 00:29:29.736 
设备配置

00:29:29.803 --> 00:29:31.939 
我看到横向和纵向的iPad

00:29:32.339 --> 00:29:36.143 
以及一些slide over配置

00:29:36.210 --> 00:29:37.177 
这是有意义的

00:29:37.244 --> 00:29:39.513 
但是我还在这看到iPhone
这是为什么？

00:29:40.280 --> 00:29:42.616 
如果我把鼠标放在上面我看到

00:29:42.683 --> 00:29:44.985 
这是横向的
iPhone 6s Plus

00:29:45.052 --> 00:29:47.054 
Kevin说过因为这个设备很大

00:29:47.120 --> 00:29:50.557 
它在横向时使用普通宽度尺寸类

00:29:50.624 --> 00:29:53.193 
这很好
你会经常想要

00:29:53.527 --> 00:29:57.464 
提供不同的体验给不同的设备配置

00:29:57.564 --> 00:29:58.799 
但在这例子里我不想那样做

00:29:58.866 --> 00:30:01.502 
我只想针对iPad定制

00:30:02.035 --> 00:30:02.870 
我要怎么做？

00:30:02.936 --> 00:30:04.671 
我回到为特征改变

00:30:04.805 --> 00:30:08.375 
这一次我要对普通宽度和普通高度
进行改变

00:30:08.442 --> 00:30:12.179 
当我这样做时注意iPhone
从工具条里消失

00:30:12.880 --> 00:30:16.884 
我将要进行的编辑只会对这些配置
生效

00:30:17.084 --> 00:30:17.918 
好的

00:30:18.285 --> 00:30:20.254 
让我们做那些

00:30:20.320 --> 00:30:23.991 
我会拖出一个标签
把它放在这

00:30:25.292 --> 00:30:27.294 
我会添加一些约束条件

00:30:27.628 --> 00:30:29.863 
来保证它待在正确的位置

00:30:30.497 --> 00:30:31.498 
好了

00:30:31.565 --> 00:30:32.733 
我会点击完成改变

00:30:33.333 --> 00:30:34.768 
让我们回到属性查看器

00:30:34.835 --> 00:30:37.504 
因为我想要聚焦在一些复选框上

00:30:37.571 --> 00:30:38.872 
你之前看到过的

00:30:39.173 --> 00:30:42.042 
我想你了解为什么这么做

00:30:42.709 --> 00:30:45.979 
我为了特征进行改变
我选择了宽度和高度

00:30:46.580 --> 00:30:49.016 
表明我设置了这个工具条来进行
定制化

00:30:49.082 --> 00:30:50.717 
为普通宽度 普通高度

00:30:50.884 --> 00:30:51.952 
当我做这些时

00:30:52.519 --> 00:30:53.453 
我拖出来一个视图

00:30:53.520 --> 00:30:56.557 
我把它加入视图层级

00:30:56.857 --> 00:30:59.459 
针对普通宽度普通高度

00:30:59.793 --> 00:31:01.828 
这就是这个复选框向我显示的

00:31:02.095 --> 00:31:03.897 
大部分时候你添加视图

00:31:04.031 --> 00:31:06.366 
到你的场景
它们会被安装到全局

00:31:06.466 --> 00:31:08.168 
所以它们会出现在所有设备配置

00:31:08.235 --> 00:31:09.603 
不管是什么尺寸类

00:31:10.270 --> 00:31:13.373 
但是当我在这个模式下
当工具条是蓝色时我添加视图

00:31:13.440 --> 00:31:15.209 
或者添加自动布局约束条件

00:31:15.442 --> 00:31:18.145 
它们只会安装到特定的尺寸类中

00:31:18.212 --> 00:31:19.613 
那些我针对它们进行编辑的尺寸类

00:31:20.047 --> 00:31:22.049 
理解这些很重要

00:31:23.383 --> 00:31:24.418 
再一次要证明这些

00:31:24.484 --> 00:31:27.688 
可以在设备配置条中遍历iPhone

00:31:27.754 --> 00:31:28.989 
这个标签不在那

00:31:29.056 --> 00:31:31.825 
所以我做对了
我添加了视图只出现在

00:31:31.892 --> 00:31:34.494 
普通宽度普通高度的设备中

00:31:34.761 --> 00:31:35.662 
好的

00:31:36.430 --> 00:31:38.332 
我们要做的下件事

00:31:38.398 --> 00:31:42.336 
是我们要用设备条进行更多编辑

00:31:43.003 --> 00:31:44.438 
如你所见

00:31:44.905 --> 00:31:48.509 
当我来到一个iPhone
那有太多空间

00:31:48.575 --> 00:31:51.111 
在顶部标签和图像视图之间

00:31:51.178 --> 00:31:53.213 
现在我回到设计

00:31:53.280 --> 00:31:54.915 
我的设计师希望它们紧凑

00:31:55.449 --> 00:31:56.450 
我要怎么实现它？

00:31:56.583 --> 00:31:58.485 
非常酷的事是

00:31:58.552 --> 00:32:02.623 
你实际上可以定制自动布局约束
条件的常量

00:32:02.789 --> 00:32:07.694 
用一个变种
像我们已经针对尺寸类做过的那样

00:32:08.428 --> 00:32:09.696 
让我们现在这么做

00:32:09.763 --> 00:32:11.365 
你看到如果我选择这个图像视图

00:32:11.431 --> 00:32:15.536 
记住我在它们之间添加了垂直间隔

00:32:15.602 --> 00:32:19.740 
好了

00:32:20.107 --> 00:32:24.611 
我点击了这个约束
我看到这个自动布局约束条件

00:32:24.678 --> 00:32:26.413 
我看到它的很多属性

00:32:27.047 --> 00:32:29.149 
你可以看到常量的值是61

00:32:29.216 --> 00:32:31.185 
问题就出在这个值太大

00:32:31.652 --> 00:32:35.222 
我可以编辑它而且我可以只
针对iPhone编辑它

00:32:35.289 --> 00:32:37.624 
为了使纵向的普通高度的设备
紧凑

00:32:37.858 --> 00:32:42.029 
再次 我可以点击为特征改变
我会针对宽度和高度定制

00:32:42.496 --> 00:32:47.234 
你可以看到这个工具条的内容显示
iPhone

00:32:49.069 --> 00:32:51.205 
但是为什么这些iPad配置会出现
在这？

00:32:51.271 --> 00:32:56.009 
请记住当iPad在slide over
或split view模式中时

00:32:56.076 --> 00:32:57.177 
没有那么多空间

00:32:57.244 --> 00:32:58.879 
你应用的空间受限

00:32:58.946 --> 00:33:02.382 
你希望把iPhone的体验也带到
这种情况下的iPad

00:33:02.850 --> 00:33:03.684 
这是有意义的

00:33:03.750 --> 00:33:06.453 
所有你在这看到的iPad配置

00:33:06.520 --> 00:33:09.656 
有普通高度配置也会变紧凑

00:33:09.723 --> 00:33:11.491 
这很好
这就是我想要的

00:33:12.125 --> 00:33:16.029 
我进入了为特征改变
这个工具条变蓝了

00:33:16.663 --> 00:33:18.732 
我可以再次选择这个约束

00:33:23.070 --> 00:33:23.971 
好了

00:33:25.205 --> 00:33:27.875 
请注意我将把这个值改成45

00:33:27.941 --> 00:33:30.811 
请注意属性查看器

00:33:31.311 --> 00:33:32.980 
我提交这次编辑会发生什么

00:33:33.247 --> 00:33:35.916 
就像我们定制字体时一样

00:33:35.983 --> 00:33:38.752 
Interface Builder
添了另一行约束

00:33:38.986 --> 00:33:41.688 
你可以看到这是使用相同的尺寸类

00:33:41.755 --> 00:33:43.023 
我在这个工具栏里配置的

00:33:43.423 --> 00:33:45.092 
我已经改变了这个

00:33:45.259 --> 00:33:48.295 
我为这个约束常量添加了一个
定制化

00:33:48.695 --> 00:33:52.999 
通过在设备条里开始一次编辑

00:33:53.066 --> 00:33:54.868 
但是我使这次编辑直接反映
在画布中

00:33:54.935 --> 00:33:56.937 
这很酷

00:33:57.504 --> 00:33:59.907 
我遍历这些设备
看起来都不错

00:33:59.973 --> 00:34:02.276 
但还不够接近

00:34:02.843 --> 00:34:03.844 
我如何解决该问题？

00:34:04.311 --> 00:34:07.981 
你可能以为我要回去使这个
工具条变蓝

00:34:08.047 --> 00:34:09.783 
然后试着编辑

00:34:09.850 --> 00:34:11.685 
这不是正确的做法

00:34:11.752 --> 00:34:13.219 
需要理解的重点是

00:34:13.286 --> 00:34:14.454 
当你为特征改变时

00:34:14.521 --> 00:34:17.357 
你引入基于尺寸类的变种

00:34:17.791 --> 00:34:20.159 
但是你不用这个流程来编辑它们

00:34:20.226 --> 00:34:23.362 
更好的难道不是你可以直接编辑

00:34:23.597 --> 00:34:25.866 
那些定制化 在画布中
是的你可以

00:34:26.333 --> 00:34:30.036 
我选择了一个iPhone
Interface Builder知道这点

00:34:30.103 --> 00:34:33.739 
它还知道我有一个针对它的定制

00:34:34.842 --> 00:34:36.543 
所以当我去编辑它时

00:34:36.610 --> 00:34:38.277 
它知道我想要数据去到哪

00:34:38.411 --> 00:34:40.781 
如果我把45改成30

00:34:40.848 --> 00:34:43.350 
请注意属性查看器发生的变化

00:34:43.417 --> 00:34:45.252 
它会为尺寸类更新

00:34:45.319 --> 00:34:48.021 
因为它知道我有基于尺寸类的定制

00:34:48.288 --> 00:34:50.324 
我们认为这是强大的新流程

00:34:50.389 --> 00:34:53.126 
它让你通过设备条引入变种

00:34:53.360 --> 00:34:56.630 
然后你可以继续直接在画布里
编辑那些变种

00:34:57.264 --> 00:34:59.399 
就这么多
我想交还给Kevin

00:35:07.074 --> 00:35:07.941 
谢谢你Brent

00:35:08.008 --> 00:35:08.976 
谢谢

00:35:10.010 --> 00:35:11.845 
我想要回顾一些事情

00:35:11.945 --> 00:35:14.715 
Brent在它的演示里提到的

00:35:15.048 --> 00:35:17.551 
首先我们介绍了新的设备配置条

00:35:17.618 --> 00:35:19.920 
在这你可以看到设备

00:35:20.320 --> 00:35:23.223 
你可以看到你的应用在它们中
以及在它们中移动

00:35:23.290 --> 00:35:25.993 
我们还有一个新的流程用来引入
定制化

00:35:26.059 --> 00:35:27.694 
在不同的特征间

00:35:28.161 --> 00:35:32.132 
你可以用属性查看器进行精细的
编辑

00:35:32.499 --> 00:35:34.134 
属性查看器还让你

00:35:34.201 --> 00:35:36.637 
查看所有你做出的改变

00:35:36.703 --> 00:35:39.406 
如果你还有疑问要怎么设置这些

00:35:39.473 --> 00:35:43.143 
你永远可以进入查看器来看你
做了哪些定制化

00:35:43.510 --> 00:35:45.179 
还有一个为特征改变的模式

00:35:45.245 --> 00:35:48.649 
在这你可以做一些大的样式改变

00:35:49.216 --> 00:35:51.084 
像Brett提到的这很重要

00:35:51.151 --> 00:35:54.821 
这个模式是为了引入新的定制化

00:35:55.422 --> 00:35:57.024 
一旦你离开这个模式

00:35:57.090 --> 00:36:00.527 
Interface Builder会知道怎么
更新这些定制化

00:36:00.594 --> 00:36:04.431 
你基于你当前看到的设备做出的

00:36:04.498 --> 00:36:06.200 
这工作的很好

00:36:07.201 --> 00:36:09.670 
现在这些改变不仅对iOS有效

00:36:09.736 --> 00:36:13.941 
这些流程改变也对tvOS
和watchOS有效

00:36:14.007 --> 00:36:15.676 
还有Interface
Builder

00:36:17.311 --> 00:36:19.479 
总之

00:36:19.713 --> 00:36:22.182 
我谈论了特征系统的基本

00:36:22.249 --> 00:36:24.518 
我们谈论了特征怎么描述环境

00:36:24.785 --> 00:36:27.087 
traitCollectionDidChange
要怎么被覆盖

00:36:27.154 --> 00:36:30.791 
来进行你的所有适应性
在系统的帮助下

00:36:31.425 --> 00:36:32.392 
还有尺寸类

00:36:32.459 --> 00:36:36.463 
描述你怎样显示信息的检验

00:36:37.397 --> 00:36:39.733 
Brett像你们演示了新流程和工具

00:36:39.800 --> 00:36:42.102 
Interface Builder
现在如何允许你

00:36:42.169 --> 00:36:47.074 
在设备中查看你的界面

00:36:47.140 --> 00:36:49.943 
同时能够编辑底层的数据

00:36:50.010 --> 00:36:51.745 
针对特征集合和特征

00:36:51.812 --> 00:36:54.181 
你想要你的应用自适应的

00:36:55.315 --> 00:36:58.986 
这就是第一部分
它的重点

00:36:59.052 --> 00:37:02.222 
是系统会为你做大部分工作

00:37:02.589 --> 00:37:04.525 
你有很多种方法插入

00:37:04.591 --> 00:37:07.094 
做为开发者借助那些

00:37:07.160 --> 00:37:10.264 
我为看到你们的自适应性应用
感到兴奋

00:37:10.731 --> 00:37:14.034 
请在明天回来
因为我们会讨论更多

00:37:14.101 --> 00:37:16.937 
会给你们更多技术

00:37:17.004 --> 00:37:18.705 
使应用自适应

00:37:18.772 --> 00:37:21.675 
我们会用一些演示把它们整合

00:37:22.242 --> 00:37:26.313 
除了明天的演讲还有自动布局

00:37:26.380 --> 00:37:27.481 
你们也会想看

00:37:27.548 --> 00:37:30.083 
来看我们在自动布局上做的改进

00:37:30.150 --> 00:37:31.885 
包括一些更精细的改变

00:37:31.952 --> 00:37:33.587 
会有一个优秀的演讲

00:37:33.787 --> 00:37:36.156 
祝你们接下来的一周度过美好的时光
午餐享用愉快！