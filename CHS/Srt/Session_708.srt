00:00:19.553 --> 00:00:22.689
高级通知推送 演讲708

00:00:31.231 --> 00:00:32.131
早上好

00:00:32.399 --> 00:00:34.701
欢迎来到“高级通知推送”

00:00:35.435 --> 00:00:39.540
我是Michele
今天我们的话题

00:00:39.606 --> 00:00:41.742
包括在iOS X系统上的新通知

00:00:42.910 --> 00:00:45.779
我们会从新通知的用户界面开始

00:00:45.846 --> 00:00:49.850
我们会先介绍一下本次演讲的大致内容
然后会讲iOS X系统中的改动

00:00:51.218 --> 00:00:53.654
之后我们会介绍如何把媒体附件

00:00:53.720 --> 00:00:56.857
插入新通知
我们会给大家介绍

00:00:56.990 --> 00:01:01.295
如何在新的iOS X系统通知中
定制用户界面

00:01:03.163 --> 00:01:05.899
我们先来聊一聊
用户界面的概况

00:01:07.901 --> 00:01:11.572
iOS X的用户通知设计十分精美

00:01:11.805 --> 00:01:13.740
大家可以看到这个锁屏界面

00:01:14.007 --> 00:01:16.410
看这动画制作以及抬起唤醒

00:01:17.945 --> 00:01:19.546
这个是横幅

00:01:19.713 --> 00:01:22.015
可以看出相比以往版本可读性更高了

00:01:22.082 --> 00:01:23.317
里面的内容量也更大了

00:01:23.383 --> 00:01:27.888
上面显示了标题 副标题
这个是Notification Center

00:01:28.088 --> 00:01:31.425
在这三个不同模块里
每一条通知样式相同

00:01:37.297 --> 00:01:41.001
在iOS 8中 我们引入了
动作通知

00:01:41.201 --> 00:01:43.837
你可以给通知添加动作

00:01:43.904 --> 00:01:45.272
互动性也因此变得更高

00:01:45.339 --> 00:01:47.975
也让用户处理推送消息
更快捷方便

00:01:49.543 --> 00:01:55.315
我们在iOS 9引入了快速回复
来增强可操作通知

00:01:55.382 --> 00:01:58.318
这项功能使用户
通过在推送消息中输入

00:01:58.385 --> 00:02:00.621
用文字来回复

00:02:01.154 --> 00:02:04.725
在iOS X推送功能比以往更加强大

00:02:04.791 --> 00:02:07.928
因为现在推送功能
对我们的设备而言更加重要

00:02:07.995 --> 00:02:09.395
因为我们每时每刻都在使用推送

00:02:09.463 --> 00:02:12.799
它是我们与设备互动的重要方式

00:02:12.866 --> 00:02:16.236
同时也是用户与你的应用
互动的重要方式

00:02:16.603 --> 00:02:21.475
所以在iOS X系统中
你可以点击一条推送消息

00:02:21.575 --> 00:02:23.310
消息栏会展开

00:02:23.377 --> 00:02:26.980
显示更具体且有针对性的用户界面

00:02:27.047 --> 00:02:30.317
针对你的应用
为你的内容服务

00:02:30.551 --> 00:02:34.121
它显示更多细节
对用户来说更实用

00:02:35.756 --> 00:02:38.158
用户可以点击不同操作

00:02:38.258 --> 00:02:41.795
用户界面会更新且显示出变化

00:02:41.862 --> 00:02:44.665
以及操作的结果

00:02:49.636 --> 00:02:51.538
日历就是一个简单的例子

00:02:51.805 --> 00:02:54.541
还有“找朋友”

00:02:54.608 --> 00:02:57.444
当你的朋友跟你共享位置

00:02:57.711 --> 00:03:00.781
你可以立即在推送中
看到他们的位置

00:03:00.848 --> 00:03:03.450
你就可以估计这次会面
他们会迟到多久

00:03:04.885 --> 00:03:08.155
还有用于“照片分享”的通知

00:03:08.288 --> 00:03:12.025
当你在iCloud上分享一张照片时
你可以直接看到这张照片

00:03:12.092 --> 00:03:14.328
在推送栏中 而不用打开应用

00:03:14.661 --> 00:03:17.631
你还可以点赞或者回复
而不用打开应用

00:03:17.698 --> 00:03:19.566
专门查看那张照片

00:03:19.867 --> 00:03:21.201
最后 消息

00:03:21.301 --> 00:03:22.436
这还不是所有的

00:03:23.303 --> 00:03:26.373
从iOS 8起 消息开始支持快速回复

00:03:26.874 --> 00:03:31.545
但每次只能看到一条消息
而且也只能回复一条

00:03:32.212 --> 00:03:34.314
现在你可以看到整个对话

00:03:34.381 --> 00:03:36.917
当你打开通知回复

00:03:36.984 --> 00:03:41.221
你可以等待朋友的回复
也可以发送更多消息

00:03:41.288 --> 00:03:43.991
这就是新版的
iOS X中通知的力量

00:03:46.059 --> 00:03:50.297
但是如果这就完了的话

00:03:50.364 --> 00:03:52.766
我就不用在这里站半个小时了

00:03:52.833 --> 00:03:55.335
并给你演示iOS X里所有新通知了

00:03:55.802 --> 00:03:59.506
所以我今天想介绍给大家
最重要的功能是

00:03:59.573 --> 00:04:02.476
刚才我演示的所有那些

00:04:02.543 --> 00:04:06.480
都是用iOS X中我们扩展的
新的API实现的

00:04:06.747 --> 00:04:09.583
你也同样可以像我们这样做到这些

00:04:09.716 --> 00:04:14.254
并把所有这些功能添加到你自己的
应用和通知中

00:04:16.023 --> 00:04:19.560
第一个可以做的是媒体附件

00:04:19.625 --> 00:04:20.827
媒体附件

00:04:22.229 --> 00:04:26.500
我从朋友那里最经常收到的通知

00:04:27.134 --> 00:04:29.736
是他们分享的照片或视频

00:04:30.037 --> 00:04:33.574
所以很重要的是把这些内容

00:04:33.640 --> 00:04:35.409
这些已经分享的内容
放到通知中

00:04:35.475 --> 00:04:37.077
以便能更快看到

00:04:37.144 --> 00:04:39.213
而不用打开应用下载

00:04:41.481 --> 00:04:44.184
不过这样做的问题是 你也知道

00:04:44.751 --> 00:04:48.388
推送通知是通过推送负载消息来传送的

00:04:49.056 --> 00:04:52.693
尽管我们去年将大小增到了4KB

00:04:53.026 --> 00:04:56.530
这依然远不够发送一整张照片

00:04:56.597 --> 00:04:59.566
即使添加到通知的是很小的一张照片

00:05:00.434 --> 00:05:01.768
我们该如何解决呢？

00:05:03.003 --> 00:05:04.938
我们使用新的服务扩展

00:05:05.005 --> 00:05:07.875
在今天早些时候的演讲中介绍过

00:05:10.077 --> 00:05:14.948
从服务扩展下载附件时

00:05:15.382 --> 00:05:18.118
你需要先将通知设为可变的

00:05:18.585 --> 00:05:21.288
就像这里的消息负载

00:05:21.355 --> 00:05:26.093
我发送一个可变的内容标注
然后添加一个引用

00:05:26.159 --> 00:05:28.862
指向需要推送的附件

00:05:29.363 --> 00:05:31.331
在这个例子里我用了一个简单的链接

00:05:31.865 --> 00:05:33.500
你也可以使用一个标识符

00:05:33.567 --> 00:05:36.603
只要你的程序知道如何从
你的服务器中下载即可

00:05:38.172 --> 00:05:39.306
做完这些后

00:05:39.373 --> 00:05:41.775
推送成功发送到设备

00:05:42.242 --> 00:05:44.311
系统会自动运行你的服务扩展

00:05:44.912 --> 00:05:46.113
在服务扩展中

00:05:46.180 --> 00:05:48.615
你可以通过各种方式下载附件

00:05:49.082 --> 00:05:51.385
比如你可以使用URL会话

00:05:51.451 --> 00:05:54.021
这样系统就可以帮你管理资源

00:05:55.556 --> 00:05:59.626
随后通知就会和附件一起被推送到设备

00:06:02.129 --> 00:06:04.298
我们来看看
一小段关于如何实现的代码

00:06:06.567 --> 00:06:10.070
这只是服务扩展最基本的一个例子

00:06:11.605 --> 00:06:15.108
在最上方 我实现了
didReceive请求

00:06:15.342 --> 00:06:16.710
withContentHandler

00:06:17.377 --> 00:06:20.013
它会在收到通知时被调用

00:06:20.080 --> 00:06:22.416
然后就要下载附件了

00:06:24.051 --> 00:06:28.222
我可以使用URL会话下载附件

00:06:28.288 --> 00:06:30.624
或其它你喜欢的技术

00:06:31.225 --> 00:06:33.527
当文件下载到本地时

00:06:34.094 --> 00:06:36.763
我可以创建一个通知附件对象

00:06:38.432 --> 00:06:42.035
创建完成后
把它添加到通知的内容里

00:06:42.870 --> 00:06:45.739
然后传给系统 准备发送给用户

00:06:47.841 --> 00:06:50.978
完成这些之后 这就是我的通知

00:06:52.145 --> 00:06:55.449
附带精美的图片
用户可以直接看到

00:06:55.516 --> 00:06:58.886
而不需等待下载或者打开应用

00:07:00.220 --> 00:07:02.789
而且你可以看到 通知附件

00:07:03.357 --> 00:07:05.392
同样支持可操作通知

00:07:05.459 --> 00:07:09.663
你可以直接在这里点赞或评论

00:07:12.566 --> 00:07:15.269
媒体附件 简单回顾一下

00:07:15.802 --> 00:07:18.505
它支持本地或远程通知

00:07:19.306 --> 00:07:20.874
我们只谈到了本地的

00:07:20.941 --> 00:07:24.311
我们只谈了远程的 因为本地的简单

00:07:24.378 --> 00:07:27.080
你只需创建通知附件对象

00:07:27.347 --> 00:07:29.983
在安排通知时创建 就可以了

00:07:32.319 --> 00:07:35.956
附件支持图片 音频 或者视频

00:07:36.623 --> 00:07:41.795
系统会为这三种类型
提供可自定义的UI

00:07:44.298 --> 00:07:47.067
你需要在服务扩展中下载附件

00:07:47.301 --> 00:07:48.635
但是一定要记住

00:07:48.836 --> 00:07:52.206
服务扩展的运行时间是有限制的

00:07:52.272 --> 00:07:57.444
附件大小也是有限制的

00:07:57.511 --> 00:08:00.581
因为它们的目的是和通知一起发送

00:08:00.647 --> 00:08:03.617
而不是为了把完整内容发送给用户

00:08:03.951 --> 00:08:07.521
你可能希望发送一个缩小版的图片

00:08:07.921 --> 00:08:11.058
然后让用户打开应用下载高清图片

00:08:11.625 --> 00:08:14.294
或者你也可以发送一个短的视频剪辑

00:08:14.361 --> 00:08:15.529
如果发送的是视频内容

00:08:15.729 --> 00:08:18.298
然后让用户打开程序来下载完整视频

00:08:21.101 --> 00:08:24.838
当你下载它时 把它添加到通知

00:08:25.539 --> 00:08:28.742
这时系统会接管

00:08:29.009 --> 00:08:31.011
帮你管理这个文件

00:08:31.378 --> 00:08:33.847
你不用操心这个文件

00:08:33.914 --> 00:08:37.317
系统会把它放到一个单独的区域

00:08:37.650 --> 00:08:38.818
处理所有数据

00:08:42.022 --> 00:08:43.524
哦对 我差点忘记了

00:08:43.991 --> 00:08:45.792
当然了 我们支持GIF格式

00:08:55.435 --> 00:08:57.237
附件功能非常棒

00:08:57.304 --> 00:09:00.874
并且为通知提供了丰富的界面

00:09:01.341 --> 00:09:04.745
最开始的时候我说过
你可以实现所有的

00:09:04.811 --> 00:09:07.781
所有我演示过的新的通知功能

00:09:07.848 --> 00:09:10.117
以及日历 消息

00:09:10.184 --> 00:09:13.453
它们肯定不用附件

00:09:13.687 --> 00:09:15.756
它们用的是自定义用户界面

00:09:16.757 --> 00:09:18.792
这就是我们现在要说的

00:09:20.160 --> 00:09:21.995
创建自定义用户操作界面时

00:09:24.531 --> 00:09:28.869
你要用到我们给标准通知添加的
第二个扩展点

00:09:29.102 --> 00:09:31.071
它就是
NotificationContentExtension

00:09:33.240 --> 00:09:35.342
NotificationContentExtension
允许你

00:09:35.409 --> 00:09:38.111
添加自己的自定义视图

00:09:38.178 --> 00:09:39.780
你可以随心所欲地设计

00:09:40.581 --> 00:09:43.050
但是最重要的限制在于

00:09:43.116 --> 00:09:45.352
你的视图是不可交互的

00:09:45.419 --> 00:09:47.955
它不接受点击事件 用户不能点击

00:09:48.922 --> 00:09:53.327
但是通知依然是可交互的
因为你可以使用通知动作

00:09:53.627 --> 00:09:55.696
扩展可以处理这些动作

00:09:55.762 --> 00:09:57.731
我们一会儿会演示如何做到

00:09:57.798 --> 00:09:58.999
自定义用户界面

00:10:01.435 --> 00:10:04.838
我说过我们可以实现

00:10:04.905 --> 00:10:06.240
和系统相同的功能

00:10:06.340 --> 00:10:08.709
我们先看看日历的行为

00:10:08.775 --> 00:10:10.644
然后再来看我们如何模仿

00:10:11.945 --> 00:10:13.213
这是一个日历通知

00:10:13.280 --> 00:10:15.883
在最上方有一个页眉

00:10:15.949 --> 00:10:19.119
页眉上有通知图标
点击它会打开应用

00:10:19.653 --> 00:10:22.322
应用名和关闭按钮

00:10:22.422 --> 00:10:25.893
这是系统为所有类型通知
提供的标准UI

00:10:27.361 --> 00:10:29.930
页眉下方是自定义内容

00:10:30.364 --> 00:10:33.066
这是你的通知扩展存在的地方

00:10:33.133 --> 00:10:35.002
是你绘制内容的地方

00:10:35.202 --> 00:10:38.005
显示所有你希望用户看到的细节

00:10:39.640 --> 00:10:40.807
在它们下面

00:10:43.510 --> 00:10:45.913
是系统显示的默认内容

00:10:47.047 --> 00:10:49.783
和负载一起发送的内容

00:10:49.850 --> 00:10:54.555
它是iOS 9之前版本通知里的可见信息

00:10:56.490 --> 00:10:58.358
在最下方

00:11:01.195 --> 00:11:05.832
是通知中用户可点击和交互的动作

00:11:06.166 --> 00:11:10.671
用户点击后 用户界面会更新

00:11:10.904 --> 00:11:12.072
显示操作结果

00:11:13.974 --> 00:11:16.343
来看看我们自己怎么实现

00:11:16.410 --> 00:11:17.878
通知内容扩展

00:11:17.945 --> 00:11:21.682
首先以派对邀请为例

00:11:22.349 --> 00:11:24.685
派对很有趣 我们周四就有对吧？

00:11:25.686 --> 00:11:28.689
这是要展示的基本通知

00:11:28.755 --> 00:11:31.291
当你推送通知
用户就会看到它

00:11:31.592 --> 00:11:34.061
和你期待的很像

00:11:34.661 --> 00:11:36.396
咱们看看如何扩展

00:11:36.597 --> 00:11:39.299
让它显示我们想要的自定义界面

00:11:40.367 --> 00:11:41.702
首先要做的是

00:11:41.768 --> 00:11:44.505
在你的应用里添加新的目标

00:11:44.838 --> 00:11:48.175
通过使用Xcode提供的模板

00:11:48.542 --> 00:11:50.644
NotificationContentExtension
模板

00:11:51.778 --> 00:11:55.549
这个模板会在新目标里
创建三个文件

00:11:56.250 --> 00:11:59.853
一个视图控制器
主界面的StoryBoard

00:12:00.387 --> 00:12:04.491
以及info.plist
你可以在它里面自定义扩展

00:12:08.362 --> 00:12:11.698
这是NotificationContentExtension
的视图控制器

00:12:12.332 --> 00:12:16.403
如你所见
它不过是一个UI视图控制器的子类

00:12:16.904 --> 00:12:19.439
就是你熟悉的普通视图控制器

00:12:21.041 --> 00:12:24.378
它还实现了
NotificationContentExtension协议

00:12:24.711 --> 00:12:26.313
通过它系统就会知道

00:12:26.380 --> 00:12:29.516
你想把这个视图控制器应用于通知

00:12:31.785 --> 00:12:34.821
这个协议只有一个强制方法

00:12:35.189 --> 00:12:37.391
这个强制方法是
didReceive notification

00:12:37.457 --> 00:12:38.492
如你所见

00:12:38.892 --> 00:12:40.827
这个方法

00:12:41.361 --> 00:12:45.699
会和视图控制器的生命周期方法
一起被调用

00:12:45.766 --> 00:12:48.402
在通知被发送出去

00:12:48.836 --> 00:12:49.970
发送到扩展的时候

00:12:51.638 --> 00:12:54.474
所以当用户展开通知

00:12:55.375 --> 00:12:57.578
你会接收到所有视图控制器的调用

00:12:57.644 --> 00:12:58.812
以及额外的这个方法

00:12:58.879 --> 00:13:00.981
所以你可以接收通知对象

00:13:01.148 --> 00:13:03.750
更新UI 显示不同的东西

00:13:07.187 --> 00:13:10.724
下一步是告诉系统

00:13:10.791 --> 00:13:12.626
如何找到你的内容扩展

00:13:13.894 --> 00:13:17.764
内容扩展使用的通知类别

00:13:17.831 --> 00:13:20.367
和你用来注册通知动作的相同

00:13:21.134 --> 00:13:22.936
在这个例子里
我使用的是event-invite

00:13:23.370 --> 00:13:25.305
为我的派对邀请函

00:13:27.040 --> 00:13:29.176
扩展也可以关联

00:13:29.243 --> 00:13:31.912
多个类型 以便你想把同样的UI

00:13:31.979 --> 00:13:35.015
应用到类型不同但界面类似的通知

00:13:35.616 --> 00:13:38.452
在这个例子里 我使用的是
event-invite或event-update

00:13:38.752 --> 00:13:40.654
它们的UI非常相似

00:13:40.721 --> 00:13:44.491
我可以使用不同的种类
因为它们的动作不同

00:13:46.493 --> 00:13:47.761
我都设置好了

00:13:49.029 --> 00:13:50.297
我有了视图控制器

00:13:50.564 --> 00:13:54.268
现在我想添加些自定义视图
绘制我自己的UI

00:13:54.735 --> 00:13:58.739
这是个视图控制器
我在Storyboard里加入了一些标签

00:13:58.805 --> 00:14:00.140
我在此没把标签显示出来

00:14:02.242 --> 00:14:06.380
收到通知时 我从内容中抽取信息

00:14:07.414 --> 00:14:11.785
获取我需要的信息 然后设置内容

00:14:12.186 --> 00:14:14.021
设置我刚刚创建的标签

00:14:15.088 --> 00:14:18.692
你可以看到 我还有些自定义信息

00:14:18.759 --> 00:14:21.228
而不只有随负载传递的标准信息

00:14:21.628 --> 00:14:26.366
因为我想展示些
负载的标准信息之外的内容

00:14:26.533 --> 00:14:28.202
在这个例子里 我展示了位置

00:14:28.268 --> 00:14:30.838
因为知道派对在哪儿至关重要

00:14:33.240 --> 00:14:35.709
这就是我的通知了

00:14:37.110 --> 00:14:39.746
可以看到 有一些自定义内容

00:14:40.147 --> 00:14:44.117
我用不同风格的自定义标签
绘制了自己的UI

00:14:45.118 --> 00:14:47.821
但这个通知有两个问题

00:14:49.456 --> 00:14:52.659
第一个是内容区域太大

00:14:53.527 --> 00:14:56.396
我不需要那么多空间 全都是空的

00:14:56.663 --> 00:14:58.932
我需要展示的内容小得多

00:14:59.833 --> 00:15:03.871
第二个问题就是默认内容重复了

00:15:04.338 --> 00:15:06.707
我并不需要它
因为已经展示过了

00:15:06.974 --> 00:15:09.543
同样的信息
在我自定义样式的最上方

00:15:11.245 --> 00:15:13.213
这两个问题都可以解决

00:15:13.814 --> 00:15:16.817
我们先解决第二个
因为它更简单

00:15:17.751 --> 00:15:20.754
这是你info.plist里
一个附加属性

00:15:20.954 --> 00:15:23.357
你可以把隐藏默认信息

00:15:23.457 --> 00:15:25.993
设置为“是”
这样就看不到默认信息了

00:15:26.093 --> 00:15:27.995
系统不会再添加

00:15:30.130 --> 00:15:33.300
第二个问题是我的通知尺寸

00:15:34.034 --> 00:15:36.103
但因为这只是视图控制器的问题

00:15:36.370 --> 00:15:39.907
我可以像重设视图控制器尺寸一样
重设通知尺寸

00:15:40.374 --> 00:15:43.343
在这个例子中 我重设内容大小

00:15:43.510 --> 00:15:47.347
你也可以抛开布局设置约束

00:15:47.414 --> 00:15:52.019
你也可以用Storyboard
两个方法都可行

00:15:52.753 --> 00:15:54.888
处理完这两个问题之后

00:15:55.756 --> 00:15:57.257
我的推送就是这个样子

00:15:58.325 --> 00:15:59.326
看起来好了不少

00:16:00.260 --> 00:16:01.895
大小正合适

00:16:02.095 --> 00:16:03.864
没有重复内容

00:16:04.498 --> 00:16:07.100
但你发现新问题了吗？

00:16:07.868 --> 00:16:11.371
通知刚出现时尺寸不对

00:16:11.505 --> 00:16:16.043
所以系统不得不显示动画
并重设通知大小

00:16:16.109 --> 00:16:17.444
让它达到合适的尺寸

00:16:17.878 --> 00:16:19.046
我再来演示一遍

00:16:21.415 --> 00:16:24.184
看到了吗？我们可以改进它

00:16:25.252 --> 00:16:29.122
发生这个的原因在于
系统需要知道

00:16:29.189 --> 00:16:32.726
最终展示的通知尺寸
在一开始显示时就要知道

00:16:33.794 --> 00:16:35.596
这样动画才会正常

00:16:36.196 --> 00:16:39.099
但你的扩展还没有加载

00:16:39.233 --> 00:16:41.668
当系统开始显示通知的时候

00:16:41.935 --> 00:16:44.004
所以你需要提前告诉系统

00:16:44.071 --> 00:16:47.808
你最终想要的尺寸
在你的代码运行之前

00:16:49.376 --> 00:16:51.712
问题在于这些通知

00:16:51.778 --> 00:16:55.115
运行在不同设备上
环境不同尺寸不同

00:16:55.749 --> 00:17:00.921
所以我们的解决方法就是
设定内容尺寸比例

00:17:02.055 --> 00:17:05.858
这里定义了长宽比

00:17:06.593 --> 00:17:08.494
你希望把它应用于内容部分

00:17:09.762 --> 00:17:12.432
但是 当然了
这个办法并不一定可行

00:17:12.532 --> 00:17:14.935
因为不同内容的尺寸不同

00:17:15.135 --> 00:17:16.637
你不知道接收的内容会是什么

00:17:16.703 --> 00:17:18.305
但你依然需要显示所有内容

00:17:18.372 --> 00:17:20.674
所以有的时候这个方法不可行

00:17:20.741 --> 00:17:24.578
但是如果你可以找到
适用于你的通知的尺寸的话

00:17:24.845 --> 00:17:26.480
用这个方法足矣

00:17:27.748 --> 00:17:29.516
使用这个方法后的结果

00:17:30.617 --> 00:17:33.053
就是现在这个新的通知

00:17:33.153 --> 00:17:36.156
它从展示最初就是合适的尺寸

00:17:36.456 --> 00:17:38.325
回顾一下刚才的内容

00:17:39.359 --> 00:17:41.595
我们想创建自定义通知UI

00:17:42.095 --> 00:17:45.032
我们从自定义UI开始

00:17:45.098 --> 00:17:48.602
非常基础
但包括了我所有的自定义内容

00:17:48.836 --> 00:17:51.572
还包括了负载以外的附加信息

00:17:52.072 --> 00:17:53.407
但是尺寸不对

00:17:53.540 --> 00:17:57.711
所以我们修改了显示尺寸
通过设置初始长宽比

00:17:58.779 --> 00:18:01.014
然后我们解决了重复内容

00:18:01.448 --> 00:18:04.017
通过设置隐藏默认信息标志

00:18:05.085 --> 00:18:07.988
从最初到现在这个样子

00:18:09.623 --> 00:18:11.592
这看起来比最初好得多

00:18:11.992 --> 00:18:14.595
仍然不算完美
但是我今天确实打算

00:18:14.661 --> 00:18:16.563
接着改进它

00:18:21.168 --> 00:18:25.239
我还知道另一个让
通知看起来更好的技巧

00:18:25.939 --> 00:18:27.040
我们可以添加图片

00:18:27.241 --> 00:18:30.611
图片总是好的
尤其是发派对邀请函的时候

00:18:31.378 --> 00:18:34.982
同样我们使用媒体附件

00:18:35.082 --> 00:18:39.486
就是在Notification
ContentExtensions里用过的

00:18:40.921 --> 00:18:43.290
因为它们会被添加到通知内容里去

00:18:43.590 --> 00:18:46.293
你可以在内容扩展里看到它们

00:18:46.760 --> 00:18:48.862
所以当你收到通知的时候

00:18:49.196 --> 00:18:51.031
在didReceive:notification方法里

00:18:52.866 --> 00:18:55.402
你可以从内容中抽取附件

00:18:57.838 --> 00:18:59.039
我刚才说过

00:18:59.106 --> 00:19:01.275
附件是系统管理的

00:19:01.341 --> 00:19:03.210
被移动到了一个单独的区域

00:19:03.477 --> 00:19:05.679
所以你是访问不到的

00:19:05.879 --> 00:19:08.815
所以你需要告诉系统你想开始使用它

00:19:09.049 --> 00:19:10.951
并告诉系统什么时候完成

00:19:12.252 --> 00:19:15.322
当你可以访问了
就如同文件一样使用

00:19:15.656 --> 00:19:18.192
在这个例子里
我要把它加到图片视图中

00:19:19.726 --> 00:19:22.462
这就是我现在的通知

00:19:24.765 --> 00:19:26.500
你能看出这个人准备来派对了

00:19:34.241 --> 00:19:36.443
比最初的好多了

00:19:36.877 --> 00:19:38.745
而且是我们的自定义UI

00:19:38.812 --> 00:19:41.782
我们想让用户看到额外信息

00:19:41.882 --> 00:19:43.016
就添加了它们

00:19:43.083 --> 00:19:45.519
我们想添加图片
也做到了

00:19:47.321 --> 00:19:48.989
现在我们就差最后一步了

00:19:49.156 --> 00:19:50.824
我们想让它具有交互性

00:19:51.024 --> 00:19:53.126
我们想实现动作

00:19:55.395 --> 00:19:56.330
我们现在就做

00:19:56.463 --> 00:19:58.131
动作

00:20:00.534 --> 00:20:03.537
默认动作
在默认情况下的工作方式

00:20:03.604 --> 00:20:05.973
和你在iOS 8里用的一样

00:20:07.107 --> 00:20:09.877
它们会传送给应用
当用户点击按钮之后

00:20:10.244 --> 00:20:12.246
应用会接收到请求

00:20:13.213 --> 00:20:15.616
然后这条推送就立即关闭了

00:20:16.450 --> 00:20:18.852
非常方便 因为这种行为

00:20:18.919 --> 00:20:22.322
你经常会用到
实现起来也很简单

00:20:22.990 --> 00:20:26.159
但有时 你想让用户知道动作的结果

00:20:26.226 --> 00:20:29.730
就像刚才的日历邀请例子里那样

00:20:30.030 --> 00:20:31.732
就是当用户点接受之后

00:20:32.599 --> 00:20:36.069
内容里会高亮显示我接受的邀请

00:20:37.271 --> 00:20:40.374
你可以在NotificationContent
Extensions里做到

00:20:41.441 --> 00:20:45.479
你需要在通知扩展里拦截这个动作

00:20:46.346 --> 00:20:50.450
之后动作会传给扩展

00:20:51.084 --> 00:20:54.388
它可以决定延迟通知的关闭

00:20:54.454 --> 00:20:58.392
这样就有时间处理动作 更新UI

00:20:58.625 --> 00:20:59.826
结束之后再关闭

00:21:01.261 --> 00:21:03.630
这很简单

00:21:03.830 --> 00:21:07.501
你通过NotificationContentExtension
协议中的第二个方法

00:21:09.036 --> 00:21:10.370
这个办法是可选的

00:21:10.437 --> 00:21:11.772
你不必实现它

00:21:11.839 --> 00:21:13.674
如果你不需要拦截动作的话

00:21:13.740 --> 00:21:15.242
但如果你确定要实现它

00:21:15.342 --> 00:21:17.444
那你就要自己处理所有动作

00:21:17.511 --> 00:21:19.079
通知里的全部动作

00:21:19.179 --> 00:21:22.916
你不能只管其一不管别的

00:21:25.352 --> 00:21:27.821
当你收到通知时

00:21:29.223 --> 00:21:31.425
你可以给服务器发送一条回应

00:21:31.558 --> 00:21:33.527
更新服务器上的信息

00:21:33.594 --> 00:21:35.696
当收到来自服务器的回应

00:21:35.762 --> 00:21:39.867
你需要更新UI 表示用户会参加派对
这是当然的啦

00:21:40.634 --> 00:21:43.270
完成之后 你就可以关闭通知了

00:21:44.238 --> 00:21:47.975
这样界面就在关闭之前得到了更新

00:21:50.277 --> 00:21:53.480
如果你想把动作转发给应用的话

00:21:53.547 --> 00:21:55.949
也是可以的

00:21:56.550 --> 00:21:58.719
如果你需要进行额外处理

00:21:58.785 --> 00:22:01.622
或者你想要把代码集中到一起

00:22:01.688 --> 00:22:05.526
你只需使用不同参数
调用completionHandler

00:22:07.594 --> 00:22:11.331
我们这样做话 当我们收到推送

00:22:11.698 --> 00:22:13.800
点击它 然后可以更新UI

00:22:15.202 --> 00:22:16.236
然后再关闭

00:22:18.639 --> 00:22:21.742
你在我的示例代码中也看到了

00:22:22.476 --> 00:22:26.146
我们实现了接受和拒绝两个动作

00:22:27.014 --> 00:22:28.715
最下方还有第三个动作

00:22:29.316 --> 00:22:32.920
因为有时当你回复派对邀请
你想要知道

00:22:32.986 --> 00:22:35.255
我们想告诉你的朋友
能去参加有多兴奋

00:22:35.322 --> 00:22:37.758
或者不能去参加有多遗憾

00:22:38.325 --> 00:22:39.893
你可以点击评论按钮

00:22:40.627 --> 00:22:41.662
文字输入动作

00:22:41.728 --> 00:22:44.198
评论动作是文字输入动作

00:22:45.132 --> 00:22:47.000
就像我们在iOS 9引入的那个

00:22:47.401 --> 00:22:48.802
用法是一样的

00:22:49.469 --> 00:22:52.272
除了全新的非常棒的构架

00:22:54.174 --> 00:22:55.976
这一个文字输入动作

00:22:56.610 --> 00:22:58.679
它的新一点的API

00:22:58.812 --> 00:23:01.181
你可以在文本区设置占位符

00:23:02.749 --> 00:23:07.221
当你创建动作时
你可以把它加入到你的类别里

00:23:07.554 --> 00:23:09.823
这样它就会和通知一起显示了

00:23:13.427 --> 00:23:15.929
所以当用户点击评论按钮时

00:23:16.563 --> 00:23:17.698
文字会显示出来

00:23:21.034 --> 00:23:25.105
由于它是个动作 和其它一样

00:23:25.172 --> 00:23:26.874
你可以以同样方式处理

00:23:26.940 --> 00:23:29.576
你可以在你的扩展里拦截它

00:23:29.643 --> 00:23:30.744
在那里进行处理

00:23:32.045 --> 00:23:33.113
下面是做法

00:23:33.447 --> 00:23:34.982
你收到通知

00:23:37.217 --> 00:23:40.787
你检查看它是不是文字输入动作

00:23:43.123 --> 00:23:46.927
你抽取用户输入的文字
并发送到服务器

00:23:48.195 --> 00:23:50.797
结束之后 关闭通知

00:23:53.634 --> 00:23:54.968
流程就是这样

00:23:55.702 --> 00:23:57.371
你点击 然后打字

00:23:59.173 --> 00:24:02.109
这个通知也有个需要处理的问题

00:24:02.609 --> 00:24:06.780
我想要回复邀请
但是上面只有一个发送按钮

00:24:07.014 --> 00:24:09.816
我没法选择是接受还是拒绝

00:24:11.852 --> 00:24:15.622
我们想要保留文本区

00:24:15.689 --> 00:24:19.560
但同时增加两个按键
这样我就可以选择是接受还是拒绝

00:24:20.427 --> 00:24:21.828
比如这样

00:24:23.130 --> 00:24:23.964
可以吗？

00:24:25.732 --> 00:24:27.835
没有新的API能做到这一点

00:24:27.901 --> 00:24:30.504
没有新的API是因为
已有的就可以做到

00:24:30.771 --> 00:24:36.543
你可以使用已有的UIKit
自定义输入辅助视图API

00:24:36.844 --> 00:24:39.980
给通知中的文字区
添加自己的自定义视图

00:24:49.056 --> 00:24:52.292
为了做到这一点
首先要做的是

00:24:52.359 --> 00:24:54.595
确保你的控制器可以成为第一响应器

00:24:55.362 --> 00:24:58.532
这会让UIKit系统知道

00:24:59.066 --> 00:25:02.903
它是事件响应链中的一环
同时也让通知系统知道

00:25:02.970 --> 00:25:05.038
你不想使用默认的文字区

00:25:07.641 --> 00:25:11.979
然后你创建一个自定义的
inputAccessoryView

00:25:12.112 --> 00:25:15.549
在这个例子里
我添加了一个文本区和两个按钮

00:25:18.218 --> 00:25:22.456
然后当我接收到用户的回复
也就是动作

00:25:22.523 --> 00:25:24.191
来自用户的评论动作

00:25:24.658 --> 00:25:28.061
我可以将它设置成第一响应器
这样我的文字区

00:25:28.128 --> 00:25:29.363
以及键盘就都出现了

00:25:29.429 --> 00:25:31.265
这两个调用都要进行

00:25:31.331 --> 00:25:34.301
因为第一个把视图控制器
设置成第一响应器

00:25:34.368 --> 00:25:35.869
这样文字区就显示出来了

00:25:35.936 --> 00:25:38.205
第二个将文字区设置成第一响应器

00:25:38.272 --> 00:25:39.706
这样键盘也显示出来了

00:25:42.376 --> 00:25:45.312
你会发现在这个例子中

00:25:45.379 --> 00:25:47.848
我不关心它是否是可编辑的动作

00:25:47.915 --> 00:25:49.183
你可以使用常规操作

00:25:49.249 --> 00:25:54.721
因为我会从自己的inputAccessory
View中获取来自用户文本

00:25:54.788 --> 00:25:56.390
所以我可以访问那个UI

00:25:59.459 --> 00:26:02.563
这样做的结果就是当你点击评论之后

00:26:03.197 --> 00:26:05.165
你可以输入你的回复

00:26:05.832 --> 00:26:07.968
同时还能同意或拒绝这次邀请

00:26:12.606 --> 00:26:15.976
关于NotificationContentExtensions
今天就说这么多

00:26:16.276 --> 00:26:19.246
还有一些别的小API

00:26:19.713 --> 00:26:23.150
若有兴趣 可在这周稍后的实验室
与我们探讨

00:26:26.286 --> 00:26:31.391
我们今天讲了
如何在自定义UI中使用附件

00:26:31.458 --> 00:26:34.027
在iOS X系统中的通知内容扩展中

00:26:35.162 --> 00:26:40.200
我们学习了如何下载
以及在通知中插入附件

00:26:40.267 --> 00:26:41.768
通过使用服务扩展程序

00:26:43.136 --> 00:26:46.106
我们了解了如何自定义UI
彻底自定义UI

00:26:46.173 --> 00:26:49.176
使用内容扩展
加入你的特别内容

00:26:49.443 --> 00:26:53.580
可以使用媒体附件
也可以处理用户的交互

00:26:56.850 --> 00:27:01.221
想了解更多的话
有一个专门有关这次演讲的网页

00:27:04.157 --> 00:27:08.061
今天早些时候我们办了另一场演讲
没有参加的话建议看看

00:27:08.128 --> 00:27:10.430
了解更多新用户通知框架

00:27:10.497 --> 00:27:13.066
以及更多的有关服务扩展的细节

00:27:14.735 --> 00:27:15.602
谢谢