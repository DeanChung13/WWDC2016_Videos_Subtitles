00:00:20.320 --> 00:00:22.422
测量值和单位

00:00:34.034 --> 00:00:35.636
嗨 我是Daphne Larose

00:00:35.702 --> 00:00:37.871
我是Foundation团队
的软件工程师

00:00:38.105 --> 00:00:39.239
欢迎来到我的讲座

00:00:39.439 --> 00:00:41.341
谢谢仍然坚持在这的你们

00:00:41.408 --> 00:00:42.876
我知道现在已经晚了

00:00:45.112 --> 00:00:47.548
当我想到应用

00:00:47.614 --> 00:00:50.050
我们通常和测量值关联的

00:00:50.584 --> 00:00:52.886
我不知道你们
但是我首先想到的

00:00:52.953 --> 00:00:54.154
是转换应用

00:00:54.454 --> 00:00:56.857
讲得通 把一个单位转换成另一个

00:00:57.724 --> 00:01:00.427
但是我想知道是否有其他应用

00:01:00.494 --> 00:01:03.263
也使用测量值
但是是用不那么明显的方式

00:01:04.932 --> 00:01:09.203
我不知道 但当我思考 测量值

00:01:09.269 --> 00:01:12.706
这很有趣 对吗
因为我们一直在用它们

00:01:13.073 --> 00:01:15.309
我们只是一般不会明确地想到它们

00:01:15.709 --> 00:01:17.845
它们会以一种意料之外的方式出现

00:01:18.212 --> 00:01:21.415
其中的一种方式是
它们不以单位的形式出现

00:01:21.481 --> 00:01:24.451
这很普遍
不管环境是什么

00:01:24.918 --> 00:01:28.622
假设我在法国 我在用一个应用

00:01:28.889 --> 00:01:30.791
是计算路程长度

00:01:31.191 --> 00:01:34.895
我期待这个测量值会显示公里

00:01:35.329 --> 00:01:37.030
但是它显示英里

00:01:37.097 --> 00:01:37.931
这就像 嗯

00:01:38.332 --> 00:01:41.735
这是不和谐的
不是很好的用户体验

00:01:42.636 --> 00:01:45.038
所以在这次演讲中
我们会向你介绍

00:01:45.105 --> 00:01:50.310
一系列可以帮助你确保这不会
在你的应用中发生的API

00:01:52.713 --> 00:01:55.549
如果我们再次思考这个问题
关于其他应用

00:01:55.616 --> 00:01:57.351
我们和测量值相关联的应用

00:01:57.417 --> 00:01:59.920
我提到过转换应用
这还是真的

00:02:00.554 --> 00:02:03.023
但是其他例子可以是游戏 对吗？

00:02:05.192 --> 00:02:08.127
所以今天我们会谈谈我在工作的游戏

00:02:08.195 --> 00:02:10.531
它叫做Jammin' in the Streetz
有一个z

00:02:10.597 --> 00:02:12.799
因为z很酷
我想要我的游戏酷

00:02:13.934 --> 00:02:15.102
这个游戏的假定

00:02:15.169 --> 00:02:18.071
是让我们的玩家从一关跳舞到另一关

00:02:18.672 --> 00:02:22.142
我为这个游戏设定了一些目标

00:02:22.409 --> 00:02:24.878
一 我希望这个游戏很有趣

00:02:24.945 --> 00:02:27.080
像是有史以来最有趣的一个游戏

00:02:27.648 --> 00:02:30.984
二 大量表情符号 因为我爱表情符号

00:02:31.652 --> 00:02:35.155
三 需要在世界范围内可用
我想要它出现在每个地方

00:02:37.858 --> 00:02:40.894
当我们思考一些游戏可能包括的内容

00:02:41.428 --> 00:02:43.664
每一轮会被称为一个jam会话

00:02:44.264 --> 00:02:46.867
在jam会话里 它追踪

00:02:47.134 --> 00:02:51.438
玩家从一关到另一关所花的总时间

00:02:51.939 --> 00:02:53.774
他们移动的距离

00:02:53.841 --> 00:02:56.109
他们进行的舞蹈移动

00:02:56.410 --> 00:02:59.179
甚至像是移动的速率

00:03:01.949 --> 00:03:04.685
但是让我们想想我刚刚提到的事

00:03:05.319 --> 00:03:06.186
注意到什么吗？

00:03:06.820 --> 00:03:10.257
它们都是可测量的
它们都是可量化的 对吗？

00:03:10.457 --> 00:03:14.027
如果我们现在停止这次演讲

00:03:14.461 --> 00:03:16.396
突然拿出电脑尝试写代码

00:03:17.164 --> 00:03:18.565
我们怎么表现这？

00:03:19.299 --> 00:03:22.069
我们可以用双精度浮点来表示它们

00:03:22.669 --> 00:03:23.504
这是对的

00:03:24.071 --> 00:03:26.406
简单 这样做的问题是

00:03:26.473 --> 00:03:29.376
如果我们在这么做的时候漏掉了
一些上下文

00:03:29.977 --> 00:03:31.378
让我们看一个例子

00:03:32.746 --> 00:03:34.014
我们有我们的角色

00:03:34.081 --> 00:03:36.016
我告诉过你 很多表情符号
我很喜欢

00:03:36.950 --> 00:03:39.887
我们的角色有月球漫步
因为为什么不

00:03:40.487 --> 00:03:42.789
他们月球漫步了一段距离

00:03:43.290 --> 00:03:46.660
如果我们储存距离为5

00:03:47.327 --> 00:03:51.131
就像 嗯 好吧
但是5究竟是什么意思？

00:03:51.431 --> 00:03:53.700
这带来这个问题
5什么？

00:03:54.768 --> 00:03:57.237
但是如果我们说5英尺
这就像是 好的

00:03:57.304 --> 00:03:58.605
这是有意义的

00:03:58.739 --> 00:04:00.707
现在它在物理空间中有了语境

00:04:02.209 --> 00:04:06.480
所以
让我们谈谈

00:04:06.547 --> 00:04:08.815
Foundation引入的方法 或者说API

00:04:08.882 --> 00:04:11.485
来精确的表示整个语境

00:04:12.819 --> 00:04:13.954
你有一个新的结构

00:04:14.421 --> 00:04:16.857
叫做测量值 它在单位类型上是通用的

00:04:16.923 --> 00:04:19.192
我们会讲一下什么是单位类型

00:04:20.761 --> 00:04:24.898
包含一个单位和一个值
以及一个初始化函数

00:04:25.899 --> 00:04:29.503
它酷的地方是你可以

00:04:29.570 --> 00:04:33.340
有一个完整的语境来表达一个测量值

00:04:34.975 --> 00:04:36.710
如果我们返回到我们的角色

00:04:37.277 --> 00:04:38.345
假设在游戏中

00:04:38.412 --> 00:04:40.948
我们不只是追踪移动的距离

00:04:41.215 --> 00:04:44.685
我们还追踪角色的剩余距离

00:04:45.118 --> 00:04:47.120
我们怎么用新API这么做？

00:04:49.089 --> 00:04:53.193
现在我们可以把移动距离表达为5英尺

00:04:54.094 --> 00:04:55.929
我们还可以把剩余距离表达为

00:04:56.196 --> 00:04:58.432
一个测量值 让我们假设是6英尺

00:04:59.700 --> 00:05:02.569
等等 你可以用它做些很酷的事

00:05:02.936 --> 00:05:05.205
你可以把它们加起来得到总距离

00:05:05.606 --> 00:05:08.141
是一个11英尺的测量值

00:05:09.543 --> 00:05:13.647
你可以乘以它们得到你想要的值

00:05:14.982 --> 00:05:18.852
你可以除以他们得到一个类似的值

00:05:18.919 --> 00:05:19.786
这很好

00:05:21.355 --> 00:05:23.223
如果我们返回来思考单位

00:05:24.324 --> 00:05:27.561
什么是我们想和单位关联起来的？

00:05:29.296 --> 00:05:33.400
首先 每个单位有一个符号 容易地

00:05:35.636 --> 00:05:37.871
单位有量度

00:05:37.938 --> 00:05:42.276
一个例子是对于长度量度

00:05:43.410 --> 00:05:46.947
可以用 像是 英尺是长度单位
对吗？

00:05:49.550 --> 00:05:51.618
单位间可以互相相等

00:05:51.685 --> 00:05:55.489
1英尺大约等于0.3米

00:05:57.457 --> 00:06:00.594
我们现在有API来表示一个单位
对象

00:06:01.428 --> 00:06:03.764
如果你注意的话

00:06:03.830 --> 00:06:06.433
之前我说每个单位有一个符号

00:06:06.633 --> 00:06:10.404
在API中我们在这表示符号

00:06:10.938 --> 00:06:13.974
我们没有在这显示量度和相等

00:06:14.041 --> 00:06:17.077
因为不是每个单位都能等于另一个

00:06:17.144 --> 00:06:19.446
而且不是每个单位都是有尺寸的

00:06:19.947 --> 00:06:22.349
但是至少每个单位都有符号

00:06:22.416 --> 00:06:23.884
所以我们在这它表示它

00:06:24.551 --> 00:06:27.187
但是如果我们返回到量度的概念

00:06:27.254 --> 00:06:29.489
什么是量度？
这是什么意思？

00:06:30.123 --> 00:06:32.459
量度是单位的种类

00:06:32.659 --> 00:06:35.195
可以被不同单位表示

00:06:35.462 --> 00:06:37.598
当我们想到长度时
做为一个例子

00:06:38.232 --> 00:06:43.203
长度可以用公里 英尺 英里等表示

00:06:44.505 --> 00:06:46.507
量度还有基本单位

00:06:46.573 --> 00:06:50.210
回到长度的例子
长度的基本单位是米

00:06:51.879 --> 00:06:54.214
你还可以在量度内进行转换

00:06:54.281 --> 00:06:55.382
在单一的量度内

00:06:55.449 --> 00:06:58.352
你可以把公里转换成英尺或反过来

00:06:58.418 --> 00:07:00.254
米到英里 等等

00:07:02.456 --> 00:07:04.625
现在我们有API来表示一个量度

00:07:04.691 --> 00:07:07.361
你看到在这
量度是单位的子类

00:07:07.694 --> 00:07:11.164
这表明它通过继承获得符号属性

00:07:12.699 --> 00:07:14.268
我们有一个转换器属性

00:07:14.334 --> 00:07:17.337
我会深入地看一下单位转换器

00:07:17.404 --> 00:07:20.174
但是基本上它定义这个单位

00:07:20.240 --> 00:07:21.708
和它的基本单位之间的转换

00:07:22.709 --> 00:07:25.979
我们有初始化函数 需要符号和
转换器实例

00:07:26.547 --> 00:07:29.082
我已经提到过每个量度有一个基本单位

00:07:29.149 --> 00:07:32.219
所以我们有一个类属性会返回那个单位

00:07:32.953 --> 00:07:35.055
一件重要的事需要记得

00:07:35.122 --> 00:07:39.259
每个量度实例 属于一个单位
并且自身是一个单位

00:07:40.594 --> 00:07:42.829
有了这个我们引入的新API

00:07:42.896 --> 00:07:45.199
酷的事是

00:07:45.265 --> 00:07:49.036
我们提供170多种单位

00:07:49.102 --> 00:07:51.071
你可以立即使用

00:07:51.138 --> 00:07:52.439
你甚至无需自己定义它们

00:07:52.506 --> 00:07:53.607
你只需要使用它们

00:07:53.907 --> 00:07:55.509
像是 在这次演讲之后

00:07:57.945 --> 00:08:02.583
大部分单位是依照国际单位系统

00:08:02.649 --> 00:08:05.953
所以它们使用你已经习惯的单位
这很酷

00:08:07.321 --> 00:08:08.755
让我们看一个例子

00:08:09.223 --> 00:08:13.894
我们有长度量度
它有一系列的单位

00:08:13.961 --> 00:08:16.797
是类属性表示这些量度

00:08:17.064 --> 00:08:18.665
如果我们返回这里

00:08:18.732 --> 00:08:21.602
量度实例实际上是单位

00:08:22.302 --> 00:08:24.171
任何时候你调用这些属性

00:08:24.238 --> 00:08:26.406
你获得一个长度单位的实例

00:08:27.140 --> 00:08:29.409
这些实例的区别是

00:08:29.476 --> 00:08:31.245
第一 它们的符号不同

00:08:31.478 --> 00:08:36.683
第二 转换器的定义不同

00:08:39.620 --> 00:08:43.423
一个我们提供给你的所有类的概述

00:08:43.490 --> 00:08:44.925
所有不同的单位类型

00:08:45.325 --> 00:08:48.629
记得我说过有170多种

00:08:49.029 --> 00:08:50.831
试着用一用它们

00:08:51.231 --> 00:08:53.834
但是我们有一些很酷的
一些常用的单位类型

00:08:53.901 --> 00:08:56.270
像是面积 质量 温度 长度

00:08:56.603 --> 00:09:01.041
但是也有一些不常用的像是
光照度和电流

00:09:01.108 --> 00:09:03.744
但是听起来真的很有趣 若你玩一玩它们

00:09:04.945 --> 00:09:09.283
让我们返回到我们的移动距离和
剩余距离的测量值

00:09:09.616 --> 00:09:11.285
这是我们已经见过的代码

00:09:12.252 --> 00:09:14.021
现在我们要注释最后两行

00:09:14.087 --> 00:09:15.422
因为我们要重新定义它们

00:09:15.889 --> 00:09:17.558
我们只剩已移动距离

00:09:18.091 --> 00:09:21.328
但是我们定义剩余距离
使用相同的值6

00:09:21.395 --> 00:09:23.397
但是不是传递英尺作为单位

00:09:23.463 --> 00:09:24.865
我们传递公里

00:09:27.701 --> 00:09:29.703
现在事情开始变得危险

00:09:29.770 --> 00:09:33.674
因为我们要把已移动距离
和剩余距离加起来

00:09:33.740 --> 00:09:36.276
但是一个是英尺 一个是公里

00:09:37.010 --> 00:09:38.946
这对总距离说明什么？

00:09:39.012 --> 00:09:41.548
它的单位是英尺还是公里？

00:09:41.715 --> 00:09:43.717
讲台会在5秒内爆炸吗？

00:09:43.784 --> 00:09:44.651
我不知道

00:09:45.219 --> 00:09:46.987
但是 不 它不会

00:09:47.054 --> 00:09:50.257
其实发生的事是
结果的单位是基本单位

00:09:50.490 --> 00:09:51.391
也就是米

00:09:51.592 --> 00:09:53.560
关于测量值酷的事情

00:09:53.627 --> 00:09:56.930
是暗中为我们处理了一切

00:09:57.097 --> 00:09:58.799
你完全不需要为此担心

00:09:58.966 --> 00:10:01.935
你可以用这些操作符
就像普通的标量值一样

00:10:02.002 --> 00:10:03.737
你获得期待的结果

00:10:06.039 --> 00:10:10.944
现在让我们再次假设我想要追踪角色

00:10:11.011 --> 00:10:14.748
因为某些原因 因为是在演示

00:10:14.815 --> 00:10:19.386
我们只是打印字符串
但是我想做些更时髦的事

00:10:19.453 --> 00:10:21.154
同时更有功能性

00:10:21.221 --> 00:10:22.456
但关键是我希望能够

00:10:22.523 --> 00:10:24.925
比较这些测量值
现在你可以

00:10:24.992 --> 00:10:28.795
测量值支持比较操作符
使你能够这么做

00:10:28.862 --> 00:10:32.966
如果我们要打印
距离标记

00:10:33.734 --> 00:10:36.069
我们会得到我们想要的刚刚开始

00:10:36.136 --> 00:10:38.405
因为测量值可以正确推断

00:10:38.472 --> 00:10:41.375
已移动距离比剩余距离小

00:10:44.845 --> 00:10:47.314
让我们谈谈更多关于定义一个单位

00:10:47.381 --> 00:10:49.483
因为我们还没有深入研究它

00:10:50.651 --> 00:10:51.818
之前提过

00:10:51.885 --> 00:10:54.755
单位总是以它们的基本单位定义的

00:10:56.290 --> 00:11:00.594
有一个方法来描述这种转换

00:11:00.661 --> 00:11:03.063
和基本单位之间的转换

00:11:03.130 --> 00:11:07.401
我们会在进入单位转换器的时候
谈论更多

00:11:09.503 --> 00:11:12.072
重要的事是记得

00:11:12.139 --> 00:11:15.142
转换只能发生在单一量度中

00:11:15.375 --> 00:11:17.377
比如当你想到长度

00:11:17.611 --> 00:11:21.148
你可以把公里转换成英尺

00:11:21.215 --> 00:11:25.018
但是你会尝试把公里转换成秒吗？

00:11:25.285 --> 00:11:27.821
在概念上这并没有意义

00:11:28.021 --> 00:11:30.924
在这个情况下
如果你试着对测量值这么做

00:11:30.991 --> 00:11:31.825
会抛出

00:11:33.260 --> 00:11:35.996
一个Objective-C
或者Swift中的致命错误

00:11:39.199 --> 00:11:41.935
记得我提过我们提供

00:11:42.002 --> 00:11:44.605
170多种单位给你立即使用

00:11:44.972 --> 00:11:48.509
有可能你不需要定义你的定制单位

00:11:48.909 --> 00:11:50.777
但是如果你需要 只有在这时

00:11:50.844 --> 00:11:53.747
你需要思考如果定义它们
这很酷

00:11:53.814 --> 00:11:55.015
你实际上可以用它们

00:11:55.082 --> 00:11:57.584
那些已经提供给你的单位

00:11:57.885 --> 00:11:59.786
但是如果你创造定制的单位

00:12:00.020 --> 00:12:02.589
你要思考如何建立转换器

00:12:04.258 --> 00:12:05.926
酷的是

00:12:05.993 --> 00:12:09.997
测量值可以帮你暗中处理转换

00:12:10.063 --> 00:12:11.398
即使是你定制的单位

00:12:12.266 --> 00:12:14.468
它就是能自动地工作

00:12:16.103 --> 00:12:17.571
让我们谈谈定制单位

00:12:17.638 --> 00:12:19.540
我们要为游戏定制一些单位

00:12:21.508 --> 00:12:24.978
我们有jamz单位
因为我想

00:12:25.045 --> 00:12:27.548
计算一个jam会话中的总时间

00:12:27.614 --> 00:12:30.083
用叫做jamz的单位来计算

00:12:30.184 --> 00:12:31.852
我觉得秒太无聊了

00:12:32.619 --> 00:12:36.757
但如果你看看这里 我们有
UnitConverterLinear对象

00:12:36.857 --> 00:12:39.092
它是什么？
我们还没有说过它

00:12:39.660 --> 00:12:42.763
让我们返回来说说更多关于转换的事

00:12:44.131 --> 00:12:45.933
和基本单位之间的转换

00:12:46.900 --> 00:12:49.870
UnitConverter是根类
它定义两个方法

00:12:50.204 --> 00:12:53.040
描述这个转换

00:12:53.407 --> 00:12:57.110
baseUnitValue(fromValue)
和value(fromBaseUnitValue)

00:12:58.011 --> 00:13:01.615
UnitConverterLinear
覆盖这两个方法

00:13:01.849 --> 00:13:03.483
并线性地定义它们

00:13:03.550 --> 00:13:05.185
对这里所有懂数学的人

00:13:05.252 --> 00:13:06.887
它的形式是AX+B

00:13:06.954 --> 00:13:09.122
A是系数 B是常数

00:13:10.791 --> 00:13:12.593
如果我们返回到jamz单位

00:13:14.828 --> 00:13:19.266
我们看到系数是30 一个标量值30

00:13:19.333 --> 00:13:22.970
我们是说一个jamz单位等于30秒

00:13:23.370 --> 00:13:25.472
在我们的线性函数中

00:13:25.939 --> 00:13:28.342
无论jamz为何值
我们把它乘以30

00:13:28.408 --> 00:13:32.212
所以一次jam会话共是4个jamz
4个jamz

00:13:32.679 --> 00:13:35.015
如果我们想把它转换成秒

00:13:35.082 --> 00:13:37.484
会是4乘以30等于120秒

00:13:37.918 --> 00:13:39.186
你也可以反过来做

00:13:39.253 --> 00:13:41.722
120除以30来得到jamz值

00:13:41.788 --> 00:13:42.623
耶

00:13:44.491 --> 00:13:48.362
假设我要定义其他定制单位
比如长度

00:13:48.428 --> 00:13:51.832
因为我不想用英尺和米计算
移动距离

00:13:51.899 --> 00:13:54.535
我想用一些更有趣的东西比如hopz

00:13:55.135 --> 00:13:57.137
所以这里 相同的概念

00:13:57.638 --> 00:14:01.141
1 hopz等于0.75米

00:14:01.475 --> 00:14:05.212
我们在这定义方程

00:14:05.779 --> 00:14:09.216
其他我需要的定制单位也是一样

00:14:09.783 --> 00:14:11.785
你现在知道怎么做了

00:14:14.154 --> 00:14:18.025
如果你还记得
当我谈到jam会话

00:14:18.358 --> 00:14:20.694
我命名了一个测量值

00:14:20.761 --> 00:14:23.463
是所进行的舞蹈移动的次数

00:14:24.364 --> 00:14:28.502
不幸的是国际单位系统没有一个量度

00:14:28.569 --> 00:14:30.270
用来识别舞蹈移动

00:14:30.337 --> 00:14:31.738
我不确定为什么

00:14:31.805 --> 00:14:34.374
但是这是一个我们今天要自己
定义的东西

00:14:34.508 --> 00:14:36.176
我们有UnitDanceMove类

00:14:36.610 --> 00:14:39.012
有一个基本单位
wackyArmMovements

00:14:40.480 --> 00:14:41.682
你在这看到

00:14:41.748 --> 00:14:44.785
一个wackyArmMovement
等于另一个wackyArmMovement

00:14:44.852 --> 00:14:47.554
它的意思是另一种定义单位的方式

00:14:47.621 --> 00:14:51.625
是多少个基本单位组成一个
特定单位

00:14:51.992 --> 00:14:54.261
这里是一对一
所以系数是1

00:14:55.863 --> 00:14:58.198
假设我们想定义一个机械移动

00:14:58.732 --> 00:15:02.536
我认为它就相当于大概4个
wackyArmMovements

00:15:03.704 --> 00:15:06.740
CabbagePatch是3个
wackyArmMovements

00:15:06.807 --> 00:15:08.008
是的

00:15:08.075 --> 00:15:12.946
当然没有jazzHands的
舞蹈动作的量度是不完整的

00:15:13.013 --> 00:15:15.315
它等于2个
wackyArmMovements

00:15:15.582 --> 00:15:17.384
我认为这是精确的
我们会坚持这样

00:15:18.552 --> 00:15:22.523
现在让我们返回并创建jam会话

00:15:22.589 --> 00:15:23.991
我在早前已经概述过的

00:15:24.958 --> 00:15:27.794
移动的距离 也就是已经进行的
步数

00:15:27.861 --> 00:15:30.764
会用我们创造的单位hopz

00:15:31.265 --> 00:15:33.734
jamTime的单位自然是jamz

00:15:34.635 --> 00:15:37.104
舞蹈移动的单位将会是机械

00:15:37.171 --> 00:15:41.074
我们的角色当然会一直跳机械舞

00:15:41.942 --> 00:15:45.345
舞蹈速率实际上会是米每秒

00:15:45.412 --> 00:15:46.313
但是如果你记得

00:15:46.647 --> 00:15:49.383
我们的测量值没有用米或者秒的

00:15:49.449 --> 00:15:51.285
所以我们要怎么获得那个值？

00:15:52.152 --> 00:15:54.588
我们可以把
已移动步数转换成米

00:15:55.289 --> 00:15:58.158
我们还可以把jamTime转换成秒

00:15:59.092 --> 00:16:01.195
现在我们可以返回一个测量值

00:16:01.261 --> 00:16:03.063
是按照米每秒的

00:16:03.697 --> 00:16:07.467
酷的事是只需要几行代码

00:16:07.534 --> 00:16:11.271
我们就可以完全定义我们的jam会话

00:16:14.808 --> 00:16:17.744
现在我们知道怎样表示测量值

00:16:17.811 --> 00:16:19.713
和单位做为模型对象
这很酷

00:16:20.447 --> 00:16:22.082
但是我告诉过你

00:16:22.282 --> 00:16:24.785
我想要这个游戏在每个地方可用

00:16:25.319 --> 00:16:28.055
要这么做我们需要格式化这些
测量值

00:16:28.488 --> 00:16:30.190
事情在这变得棘手一点

00:16:31.124 --> 00:16:32.259
如果我们有我们的角色

00:16:32.326 --> 00:16:35.796
我们不说跳舞了5英尺

00:16:35.863 --> 00:16:38.265
而是说跳了5公里机械舞

00:16:38.832 --> 00:16:39.666
硬核

00:16:40.467 --> 00:16:43.504
如果我们想在全世界显示这些
那看起来会怎样？

00:16:44.538 --> 00:16:46.707
在加拿大 我们可以这么写

00:16:47.140 --> 00:16:49.910
它以前被写成5公里

00:16:51.245 --> 00:16:53.413
然而如果我们用中文显示这些

00:16:53.480 --> 00:16:55.482
我们需要翻译单位

00:16:56.683 --> 00:17:00.921
在阿拉伯语里我们需要翻译单位
并改变数字的显示

00:17:00.988 --> 00:17:03.757
来确保从右到左的正确顺序

00:17:04.223 --> 00:17:07.694
这些都是我需要手动在我的应用
里进行的逻辑

00:17:08.729 --> 00:17:11.964
最后在美国 我们会说 公里？

00:17:12.031 --> 00:17:14.367
那是什么？
那是什么东西？

00:17:14.835 --> 00:17:18.172
所以我不光需要处理转换

00:17:18.238 --> 00:17:20.040
在我的计算过程中

00:17:20.107 --> 00:17:23.242
我还需要仅仅为了格式处理转换

00:17:23.310 --> 00:17:26.313
这是我需要加进应用的额外逻辑

00:17:27.948 --> 00:17:29.283
那这里的解决方案是什么？

00:17:29.449 --> 00:17:31.685
你可以让Foundation
为你做所有的事

00:17:32.219 --> 00:17:34.821
我们有新的格式器叫做
MeasurementFormatter

00:17:35.122 --> 00:17:39.259
它格式化测量值和单位并且知道
地区

00:17:39.326 --> 00:17:41.261
所以你不需要担心

00:17:42.062 --> 00:17:43.230
让我们看一看它

00:17:43.697 --> 00:17:44.932
它是格式器的子类

00:17:44.998 --> 00:17:48.435
如果你对其他格式器熟悉
是一样的概念

00:17:49.837 --> 00:17:51.338
它有unitOptions属性

00:17:51.405 --> 00:17:54.174
我们稍后会谈到
更多unitOptions

00:17:54.708 --> 00:17:55.609
它还有unitStyle

00:17:55.676 --> 00:17:57.711
如果你熟悉其他格式器

00:17:57.778 --> 00:17:58.846
短 中 长

00:18:00.681 --> 00:18:02.115
它有一个可设置的地区

00:18:02.182 --> 00:18:05.919
现在你可能默认使用

00:18:05.986 --> 00:18:08.488
用户的当前地区

00:18:08.555 --> 00:18:11.425
这就是这个地区永远的默认值

00:18:11.825 --> 00:18:15.462
但是如果你需要明确设置它
你可以这么做

00:18:16.563 --> 00:18:18.365
它还接受一个
定制的numberFormatter

00:18:18.432 --> 00:18:21.435
假设你想要你的测量值中的值

00:18:21.502 --> 00:18:23.937
被用科学计数法显示

00:18:24.037 --> 00:18:26.907
你可以提供一个定制的
numberFormatter来为你这么做

00:18:28.876 --> 00:18:33.046
它还有方法接受一个测量值对象和
一个单位对象

00:18:34.715 --> 00:18:37.117
让我们多谈一下单位选项

00:18:37.885 --> 00:18:41.021
酷的事是它开箱可用 根据默认

00:18:41.088 --> 00:18:45.058
这个格式器使用你的用户所在
地区偏爱的单位进行格式化

00:18:45.225 --> 00:18:46.593
所以你甚至不用思考这些

00:18:46.994 --> 00:18:48.662
它还考虑其他事比如目的

00:18:48.729 --> 00:18:51.798
如果你在计算一个长度

00:18:51.865 --> 00:18:55.002
关于路程距离而不是身高

00:18:55.068 --> 00:18:58.205
你会想要根据语境用不同的单位

00:19:00.073 --> 00:19:04.211
所以我会看看一些
MeasurementFormatter提供的选项

00:19:05.412 --> 00:19:08.382
一个是providedUnit
假设我们有一个情况

00:19:08.448 --> 00:19:11.685
我们想传入5公里的测量值

00:19:11.919 --> 00:19:13.954
但是我们的地区是美国

00:19:14.021 --> 00:19:17.591
通常在美国我们会为路程

00:19:17.658 --> 00:19:20.460
把它转换成英里
因为我们通常用英里

00:19:20.894 --> 00:19:22.462
但若你设置providedUnit

00:19:22.529 --> 00:19:26.066
它会保证不论你传入什么单位

00:19:26.133 --> 00:19:28.035
都会被格式化成你设置的这个单位

00:19:29.570 --> 00:19:31.405
还有一个动作叫做自然比例尺

00:19:31.471 --> 00:19:36.009
这对UI相关的东西很有用

00:19:36.076 --> 00:19:38.478
如果你的应用是在watch上运行

00:19:38.612 --> 00:19:41.248
你很担心屏幕尺寸

00:19:41.915 --> 00:19:43.951
那么不是放1000米

00:19:44.017 --> 00:19:46.553
会需要很多你的屏幕

00:19:46.620 --> 00:19:48.989
你实际上可以把它格式化成1公里

00:19:51.191 --> 00:19:52.893
另一个是不带单位的温度

00:19:52.960 --> 00:19:56.296
假设你有个测量值显示90华氏度

00:19:56.463 --> 00:19:59.032
但是你不想要显示华氏度单位

00:19:59.266 --> 00:20:01.935
你可以这么设置
得到你想要的结果

00:20:03.670 --> 00:20:05.205
让我们用一些例子来玩一玩

00:20:05.272 --> 00:20:06.507
我们有我们的格式器

00:20:07.474 --> 00:20:09.643
我们有我们的原始距离测量值

00:20:09.710 --> 00:20:12.579
那是5公里因为这是我们的角色
跳舞的距离

00:20:13.347 --> 00:20:15.849
现在我们想从中获得一个结果字符串

00:20:17.017 --> 00:20:19.653
我们会看到结果的单位是英里

00:20:19.720 --> 00:20:22.489
最酷的事是只用了三行代码

00:20:22.656 --> 00:20:24.758
我们不但得到了想要的结果

00:20:24.992 --> 00:20:27.728
而且不需要对格式器做任何事

00:20:27.794 --> 00:20:30.597
开箱即用不需要任何设置

00:20:30.864 --> 00:20:32.232
它知道应该做什么

00:20:33.500 --> 00:20:36.203
现在假设我们给它我们的
定制单位hopz

00:20:36.637 --> 00:20:40.474
以及测量值 MeasurementFormatter
它没概念

00:20:40.541 --> 00:20:42.976
它不知道hopz实际上是一个单位

00:20:44.545 --> 00:20:46.847
但是我们创建了hopz距离

00:20:47.381 --> 00:20:49.917
我们把它传递给格式器

00:20:50.450 --> 00:20:54.321
它实际上还可以为我们暗地里进行
转换

00:20:54.755 --> 00:20:56.089
我们不需要做任何事

00:20:58.192 --> 00:21:01.061
现在让我们假设我们有定制单位

00:21:01.128 --> 00:21:04.231
我们要人们看到它
所以设置providedUnit

00:21:05.032 --> 00:21:07.701
我们会给它一个测量值
这会有我们的hopz单位

00:21:08.635 --> 00:21:11.672
现在结果会使用那个单位

00:21:13.707 --> 00:21:16.143
这个情况是个很有趣的情况

00:21:16.210 --> 00:21:19.379
因为我们不但提供一个定制单位

00:21:19.446 --> 00:21:23.050
我们还提供定制量度中的定制单位

00:21:23.250 --> 00:21:24.184
在这一点

00:21:24.918 --> 00:21:27.754
这就像 不是很确定
MeasurementFormatter会做什么？

00:21:28.388 --> 00:21:31.391
好吧 它做的正是我们期待的
这很好

00:21:33.927 --> 00:21:37.297
现在我要把讲台交给
Foundation团队的另一成员

00:21:37.497 --> 00:21:40.400
他会展示如何使用测量值

00:21:40.467 --> 00:21:43.937
并且可以在游戏的高分功能中
使用和格式化它

00:21:44.404 --> 00:21:45.272
谢谢

00:21:46.707 --> 00:21:47.641
谢谢Daphne

00:21:48.876 --> 00:21:50.677
我是Peter Hosey

00:21:50.844 --> 00:21:53.180
我也是Foundation团队
的一名工程师

00:21:53.914 --> 00:21:57.184
像Daphne说的
这是我们的高分列表

00:21:57.317 --> 00:21:59.987
我们在这显示游戏的关卡列表

00:22:00.787 --> 00:22:04.024
当你点击一个时你看到基本事实

00:22:04.091 --> 00:22:06.527
关于关卡 名字 它的一个图片

00:22:07.127 --> 00:22:10.364
你看到一些关于玩这关的重要信息

00:22:10.430 --> 00:22:11.498
你需要知道的事

00:22:12.499 --> 00:22:17.437
并且你还会看到你的统计
关于你在游戏中的表现怎样

00:22:18.605 --> 00:22:24.578
你看到一些东西 比如你的高分
做了多少wackyArmMovements

00:22:25.179 --> 00:22:27.881
你能看到你跳了多远多快

00:22:29.149 --> 00:22:32.019
但这些都只是数字

00:22:32.553 --> 00:22:34.555
他们缺少量度

00:22:35.856 --> 00:22:39.526
所以我们不知道
像是6811是多远？

00:22:42.996 --> 00:22:47.000
现在你自己可以实现一整个单位系统

00:22:47.301 --> 00:22:49.269
你最开始可以只追踪一个单位

00:22:49.336 --> 00:22:51.471
直到最后追踪所有这些数字

00:22:52.139 --> 00:22:57.845
你可以再构造更多
比如一个单位转换系统

00:22:57.911 --> 00:23:00.447
能理解不同地区

00:23:00.514 --> 00:23:02.649
并自动翻译单位名

00:23:02.716 --> 00:23:04.651
这有很多工作不是吗？

00:23:05.185 --> 00:23:07.988
像Daphne说过的
让Foundation为你工作

00:23:08.622 --> 00:23:10.691
我们现在有测量值和单位

00:23:10.757 --> 00:23:12.926
以及在Foundation中的
MeasurementFormatter类型

00:23:13.460 --> 00:23:16.096
让我们在我们的游戏里用它们

00:23:18.165 --> 00:23:21.101
我们要创建定制单位

00:23:21.235 --> 00:23:23.470
Daphne向你们展示过
像是这样

00:23:24.037 --> 00:23:27.341
我们有一些长度单位和速度单位

00:23:28.141 --> 00:23:30.978
我们有4个定制的舞蹈移动

00:23:31.044 --> 00:23:33.080
并不来自Foundation

00:23:35.148 --> 00:23:36.984
我们有我们的定制单位

00:23:37.050 --> 00:23:40.888
我们能把这些带到我们的模型中
它是这个关卡结构

00:23:41.555 --> 00:23:44.224
有我们关于这个关卡的一些基本
事实

00:23:44.892 --> 00:23:49.229
并包括角色的统计 这只是些数字

00:23:49.696 --> 00:23:51.798
让我们把它们转成测量值

00:23:52.199 --> 00:23:55.169
现在我们有舞蹈移动的测量值
一个长度的测量值

00:23:55.235 --> 00:23:56.503
还有一个速度的测量值

00:23:57.004 --> 00:24:00.607
因为我们改变了属性
我们也改变初始化函数

00:24:01.175 --> 00:24:04.044
现在可以用测量值来创造一关了

00:24:04.912 --> 00:24:08.515
我们想在列表视图控制器里做这些

00:24:08.749 --> 00:24:10.984
这里 针对这个视图的控制器
这是列表

00:24:12.252 --> 00:24:17.691
我们的列表视图控制器的请求
是一个同步的API 它返回

00:24:18.392 --> 00:24:21.595
一个JSON字典列表
每关一个

00:24:21.662 --> 00:24:23.363
包含所有信息

00:24:24.765 --> 00:24:29.169
特别是包括角色的统计
做为数字

00:24:29.770 --> 00:24:32.973
我们想要围绕这些数字创造测量值

00:24:34.007 --> 00:24:36.510
这是wackyArmMovements的数字

00:24:36.777 --> 00:24:38.145
这是Hopz的数字

00:24:38.212 --> 00:24:40.814
这是hopzPerJamz的数字

00:24:43.116 --> 00:24:45.953
现在这些信息在我们的模型中

00:24:46.019 --> 00:24:50.023
我们把它作为测量值创建在我们的
列表视图控制器中

00:24:50.858 --> 00:24:53.126
这是我们在列表视图控制器中要
做的唯一改变

00:24:54.194 --> 00:24:56.363
现在我们可以看看详情视图控制器

00:24:56.430 --> 00:24:58.999
它在这里显示这个视图

00:24:59.066 --> 00:25:01.702
并且为每一关显示这些

00:25:03.837 --> 00:25:07.374
我们还可以在这用我们的新测量值

00:25:08.275 --> 00:25:11.645
我们已经有了一个格式器

00:25:11.712 --> 00:25:14.815
这是一个NumberFormatter
它所做的是填充

00:25:14.882 --> 00:25:18.185
到6个数字 用0来填充
我们想保持它

00:25:18.252 --> 00:25:19.453
但是我们想在其上开发

00:25:19.520 --> 00:25:21.188
我们想让它显示单位

00:25:21.855 --> 00:25:24.525
所以我们要再加两个格式器

00:25:25.492 --> 00:25:27.261
我等下会解释为什么要这么做

00:25:28.295 --> 00:25:29.630
现在我们已经创建了它们

00:25:30.097 --> 00:25:33.233
我们来到同样的地方
我们已经配置了数字格式器

00:25:33.300 --> 00:25:35.135
是在我们的
viewDidLoad方法中

00:25:35.202 --> 00:25:38.372
这是从UIViewController继承的
我们在这覆盖它

00:25:39.006 --> 00:25:41.141
我们配置
highScoreNumberFormatter

00:25:41.208 --> 00:25:43.377
用我们的最少整数位数

00:25:43.777 --> 00:25:46.246
现在我们要配置
MeasurementFormatter

00:25:46.580 --> 00:25:49.216
用我们的providedUnit
它是wackyArmMovements

00:25:49.883 --> 00:25:51.451
你在这看不出来 不是吗？

00:25:52.452 --> 00:25:56.890
用我们的NumberFormatter
我们可以继续填充到6位数字

00:25:58.192 --> 00:26:00.961
我提到过我们新建了两个新的
MeasurementFormatters

00:26:01.028 --> 00:26:02.529
让我们配置另一个

00:26:02.996 --> 00:26:05.165
这一个我们想用
标准的数字格式器

00:26:05.232 --> 00:26:07.234
所以我们不设置这个
NumberFormatter

00:26:07.301 --> 00:26:09.937
但是我们仍然设置它使用
providedUnit

00:26:14.508 --> 00:26:16.276
现在如果我运行它

00:26:17.878 --> 00:26:18.979
欧

00:26:19.546 --> 00:26:22.049
我配置了格式器

00:26:22.516 --> 00:26:25.252
我现在需要使用它们给我的字符串

00:26:27.521 --> 00:26:31.758
我们已经谈过了一个格式器
我们说从这个值得到的字符串

00:26:33.093 --> 00:26:35.462
当它是一个数字时工作得很好
但现是一个测量值

00:26:35.529 --> 00:26:37.831
所以我们谈谈
MeasurementFormatter

00:26:37.898 --> 00:26:39.533
这只需要修改一个单词

00:26:40.200 --> 00:26:41.802
其他的都完全一样

00:26:42.436 --> 00:26:43.971
对任何格式器都同样工作

00:26:44.838 --> 00:26:47.608
另外两个我们直接从数字获得
字符串

00:26:47.674 --> 00:26:51.245
你可以想象这不利于你的本地化

00:26:52.312 --> 00:26:54.047
这里我们也希望用一个格式器

00:26:54.848 --> 00:26:58.952
所以我们会用我们其他的格式器
这还是一样的东西

00:26:59.019 --> 00:27:01.889
这个情况下我们从测量值得到
字符串

00:27:02.623 --> 00:27:06.460
这返回一个字符串
我们把它传递给标签

00:27:07.461 --> 00:27:08.829
现在我们可以运行应用

00:27:15.235 --> 00:27:17.371
我们看到我们的定制单位显示了出来

00:27:18.672 --> 00:27:20.140
这是一个开始

00:27:20.440 --> 00:27:24.211
但是我们还是没有
真正提供真实世界的语境

00:27:24.278 --> 00:27:25.746
这是我们开始的目标

00:27:26.146 --> 00:27:28.882
我们需要用真实世界的单位显示
这些

00:27:30.517 --> 00:27:33.220
所以我们可以进行一些我们自己
的转换逻辑

00:27:33.654 --> 00:27:36.356
但是MeasurementFormatter
可以为我们做这些

00:27:36.924 --> 00:27:39.826
我们要创建另一个
MeasurementFormatter

00:27:40.294 --> 00:27:42.963
因为我们有定制单位
MeasurementFormatter

00:27:43.030 --> 00:27:46.200
我们还要有能识别地区的
MeasurementFormatter

00:27:47.534 --> 00:27:49.503
我们创建它 和我们配置它一样

00:27:49.570 --> 00:27:52.172
除了我们实际上不需要做任何事

00:27:52.739 --> 00:27:55.008
因为MeasurementFormatter可以
立即使用

00:27:55.375 --> 00:28:01.081
自动转换成玩家想要的针对他们
地区的单位

00:28:04.218 --> 00:28:07.554
这里会变得有点棘手
请对我有点耐心

00:28:08.655 --> 00:28:12.726
我们正在调用一个格式器
要求得到一个字符串

00:28:12.793 --> 00:28:14.528
并把它直接传给标签

00:28:17.397 --> 00:28:19.333
我们要做的

00:28:20.367 --> 00:28:24.071
是我们将首先调用
customUnitsMeasurementFormatter

00:28:24.137 --> 00:28:26.273
得到距离的字符串

00:28:26.974 --> 00:28:29.943
然后调用
localeAwareMeasurementFormatter

00:28:30.010 --> 00:28:31.979
得到它的距离字符串

00:28:32.813 --> 00:28:35.249
然后用一个Swift字符串填写

00:28:35.315 --> 00:28:38.952
把这两个放一起生成一个字符串

00:28:39.019 --> 00:28:41.421
我们把这个字符串传给标签

00:28:41.622 --> 00:28:44.591
我们为距离这么做了
我们也为舞蹈速率这么做

00:28:45.726 --> 00:28:47.227
这就是我们需要做的全部工作

00:28:53.367 --> 00:28:56.670
用来显示我们的两个定制单位

00:28:56.737 --> 00:28:59.373
和玩家希望的针对他们的地区的
单位

00:29:00.440 --> 00:29:01.642
真实世界中的距离

00:29:06.747 --> 00:29:08.448
但是我们不需要停在这

00:29:08.582 --> 00:29:13.287
因为目标是让这个游戏到达全世界
的每个国家

00:29:14.021 --> 00:29:16.823
英里在美国很好
我们在美国

00:29:16.890 --> 00:29:17.791
我们看到英里

00:29:18.325 --> 00:29:20.527
但是我们想确保它在每个国家都
工作

00:29:21.161 --> 00:29:24.331
所以我要用到一个Xcode功能

00:29:24.765 --> 00:29:29.770
这是你方案的一部分
我要在这编辑我的方案

00:29:39.346 --> 00:29:41.014
我要复制方案

00:29:42.616 --> 00:29:43.750
当复制方案时

00:29:43.817 --> 00:29:45.319
会问我它的名字

00:29:45.385 --> 00:29:49.923
我会给我的方案一个有特色的名字

00:29:53.961 --> 00:29:56.763
现在给我的方案命名了

00:29:57.331 --> 00:30:00.801
我要做一个简单的改变
在运行的里面

00:30:03.003 --> 00:30:06.507
选项标签 应用地区

00:30:07.441 --> 00:30:13.280
我要把我们的测试移动到外国

00:30:13.347 --> 00:30:14.882
像是加拿大

00:30:18.118 --> 00:30:20.554
现在我要运行这个方案

00:30:21.889 --> 00:30:26.760
不需要改变应用代码
没有模拟器的配置改变

00:30:26.827 --> 00:30:28.228
只是改变方案

00:30:28.295 --> 00:30:30.931
我们看到在加拿大
它显示公里

00:30:32.900 --> 00:30:34.868
这就是我们要让它工作所需的全部
工作

00:30:34.935 --> 00:30:36.436
有了我们新的测量值和单位

00:30:36.503 --> 00:30:38.672
和在Foundation中
MeasurementFormatter类型

00:30:38.972 --> 00:30:39.840
谢谢

00:30:40.274 --> 00:30:41.275
谢谢 Daphne

00:30:42.643 --> 00:30:43.944
非常感谢 Peter

00:30:44.144 --> 00:30:46.446
显然这个游戏会很流行

00:30:46.513 --> 00:30:48.348
我很喜欢它

00:30:50.617 --> 00:30:52.085
让我们很快总结一下

00:30:52.152 --> 00:30:56.957
我们看了这整个演讲和演示

00:30:57.024 --> 00:30:59.092
测量值和单位怎么是模型对象

00:30:59.159 --> 00:31:01.628
我们可以在应用中使用
这很棒

00:31:01.695 --> 00:31:03.964
我们还看到很容易格式化它们

00:31:04.031 --> 00:31:07.768
只需要我们进行少量工作
这很酷

00:31:09.036 --> 00:31:15.742
最好的部分是我们免费得到所有的
这些强大的本地化

00:31:15.809 --> 00:31:18.946
不需要定义任何对象或选项

00:31:19.012 --> 00:31:20.314
开箱即用

00:31:21.148 --> 00:31:23.784
所以现在你不需要突然变成知道
多国语言

00:31:23.851 --> 00:31:29.056
或者改变你应用的任何逻辑和代码
来支持这些

00:31:29.122 --> 00:31:30.791
你只需要直接使用它

00:31:32.025 --> 00:31:34.795
如果你想要知道更多信息
你需要访问这个链接

00:31:35.362 --> 00:31:37.764
这些会话已是过去式了

00:31:37.831 --> 00:31:41.401
但是如果你们超感兴趣
我建议你们下载视频

00:31:42.703 --> 00:31:43.804
非常感谢