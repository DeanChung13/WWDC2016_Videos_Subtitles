00:00:19.419 --> 00:00:24.925
构建最棒的锻炼应用

00:00:29.563 --> 00:00:30.531
大家好

00:00:30.731 --> 00:00:32.533
欢迎来到“构建最棒的锻炼应用”

00:00:32.966 --> 00:00:36.303
你们来到这里是
因为你们关注构建最佳用户体验

00:00:36.370 --> 00:00:38.338
对于你的健身应用的用户

00:00:39.006 --> 00:00:40.340
有些用户很狂热

00:00:40.707 --> 00:00:42.843
他们每周花好几个小时
在健身上

00:00:43.110 --> 00:00:46.046
他们期待响应快的
易于使用的应用

00:00:46.113 --> 00:00:47.648
能提供精确的数据

00:00:47.714 --> 00:00:50.117
并能和Apple Health
无缝衔接

00:00:51.218 --> 00:00:52.219
我是Dash

00:00:52.286 --> 00:00:54.555
我是Apple Health & Fitness
团队的一个工程师

00:00:54.621 --> 00:00:57.591
一会我的同事Jorge
会来加入我

00:00:58.392 --> 00:01:01.562
今天 我们将要向大家展示
如何搭建一个很棒的锻炼应用

00:01:01.628 --> 00:01:02.863
能搏得用户的喜爱

00:01:06.967 --> 00:01:09.403
锻炼是保持身体健康
的很重要的一方面

00:01:10.204 --> 00:01:12.973
它能帮助你睡眠
与更好地进行饮食决策

00:01:13.040 --> 00:01:14.141
还能清醒大脑

00:01:20.280 --> 00:01:23.917
你们中的许多人都曾
很努力地创造iOS锻炼应用

00:01:23.984 --> 00:01:26.954
能启发用户来记录
他们的身体健康活动

00:01:27.020 --> 00:01:29.122
并追逐新的健康与健身目标

00:01:31.191 --> 00:01:33.727
借助Apple Watch
锻炼应用又提升一个层次

00:01:33.794 --> 00:01:37.531
通过瞬时心率
卡路里燃烧 以及运动探测

00:01:37.598 --> 00:01:40.501
只需一个来自手腕活动的信息

00:01:41.568 --> 00:01:43.403
今天 我们主要关注

00:01:43.470 --> 00:01:46.440
如何搭建Apple Watch
上的最棒的锻炼应用

00:01:49.510 --> 00:01:51.745
我们先介绍后台运行

00:01:51.945 --> 00:01:55.449
一个watchOS 3中的对于
锻炼应用而言颠覆性的新功能

00:01:57.618 --> 00:02:01.188
然后 我们会从头到尾
细数一遍一次锻炼的周期

00:02:03.123 --> 00:02:05.626
在这之间 我们将向大家展示
你的锻炼应用如何能

00:02:05.692 --> 00:02:07.861
对用户的活动排名做贡献

00:02:10.264 --> 00:02:14.735
然后 我们会讨论在iOS 10中
添加针对锻炼的新API

00:02:16.937 --> 00:02:19.273
最终 我们会看看一些最佳实践

00:02:20.140 --> 00:02:21.375
那我们开始吧

00:02:23.110 --> 00:02:26.246
每一个锻炼应用的核心
是一个锻炼周期

00:02:26.313 --> 00:02:27.915
用户可以开始可以结束

00:02:28.515 --> 00:02:31.151
所以我们先说说
HKWorkoutSession

00:02:32.085 --> 00:02:33.720
这个API用起来很简单

00:02:33.787 --> 00:02:36.390
为你的锻炼应用
提供了自动化的好处

00:02:37.424 --> 00:02:38.892
当一个锻炼周期开始时

00:02:38.959 --> 00:02:41.595
Apple Watch的传感器
就会通过活动类型

00:02:41.662 --> 00:02:44.865
与某锻炼周期对应
来精确计算运动和卡路里

00:02:46.233 --> 00:02:48.168
这还会允许
你的应用来贡献到

00:02:48.235 --> 00:02:49.703
用户的活动环

00:02:50.404 --> 00:02:52.306
比如说 在一次锻炼期间

00:02:52.372 --> 00:02:55.742
活动会通过锻炼类型
来奖励运动的分钟数

00:02:55.809 --> 00:02:57.277
到用户的运动环中

00:02:59.746 --> 00:03:00.914
在一次锻炼周期中

00:03:00.981 --> 00:03:04.017
一旦用户唤醒设备
你的应用就会被展示

00:03:04.484 --> 00:03:06.987
用户会很喜欢
瞬间访问你的应用

00:03:07.054 --> 00:03:08.655
在他们使用手表锻炼时

00:03:12.025 --> 00:03:15.395
最终 我们很高兴地
宣布 锻炼应用

00:03:15.462 --> 00:03:18.532
在watchOS 3中
现在可以设置在后台运行

00:03:19.633 --> 00:03:21.635
让我们多说几句后台运行

00:03:27.007 --> 00:03:30.077
后台运行会大幅提高
你的锻炼应用的使用体验

00:03:30.944 --> 00:03:34.214
你的应用可以在后台
处理来自传感器的数据

00:03:34.681 --> 00:03:38.719
比如说 你将能收到
连续的心率值

00:03:38.785 --> 00:03:40.988
即使当你的应用
没有展示在屏幕上

00:03:42.890 --> 00:03:45.459
你还可以向用户
提供即时的反馈

00:03:45.526 --> 00:03:47.761
在一次运动周期的任何时间

00:03:48.095 --> 00:03:51.431
你可以向用户发送触觉警告
来告知他们当前进度

00:03:53.867 --> 00:03:57.337
这还将允许你很快的
展示最新的数据

00:03:57.404 --> 00:03:59.806
每当用户看一眼手腕时

00:04:02.809 --> 00:04:04.745
允许后台运行很简单

00:04:05.045 --> 00:04:08.549
只需要将workout-processing
添加到BackgroundModes

00:04:08.615 --> 00:04:10.817
在你的扩展Info.plist

00:04:13.820 --> 00:04:16.656
当然 为了保持
Apple Watch的高性能

00:04:16.723 --> 00:04:18.492
你必须要限制你的后台任务

00:04:18.559 --> 00:04:20.093
只进行必要的工作

00:04:21.461 --> 00:04:24.331
如果你的应用在后台
使用过多的CPU资源

00:04:24.731 --> 00:04:26.733
watchOS可能会将其暂停

00:04:29.336 --> 00:04:31.672
我们建议你使用我们的工具

00:04:31.738 --> 00:04:34.174
来测量你的应用的
后台CPU使用情况

00:04:35.075 --> 00:04:37.744
你可以使用Xcode
内置的CPU反馈工具

00:04:38.946 --> 00:04:41.014
或是instruments
中的time profiler

00:04:42.649 --> 00:04:45.619
watchOS 3还会生成一个
内含backtrace的日志

00:04:45.686 --> 00:04:48.288
每当你的应用超过了CPU临界值

00:04:51.024 --> 00:04:52.860
现在你设置好了后台运行

00:04:52.926 --> 00:04:54.895
我们一步步讲解
如何开启一次锻炼

00:04:56.663 --> 00:04:58.665
开启一次锻炼
要进行如下三步

00:05:00.200 --> 00:05:03.770
第一 你需要请求授权
来访问HealthKit中的数据

00:05:06.473 --> 00:05:08.909
第二 你需要创建一个锻炼配置对象

00:05:08.976 --> 00:05:11.411
来表示你想要
开启的锻炼类型

00:05:12.813 --> 00:05:15.582
第三 你需要创建并
开启一次运动周期

00:05:15.649 --> 00:05:17.251
利用你的锻炼配置

00:05:17.718 --> 00:05:19.319
我们一步步来完成

00:05:22.823 --> 00:05:25.192
所有的锻炼应用都需要请求权限

00:05:25.259 --> 00:05:26.827
为将健身写入HealthKit

00:05:27.561 --> 00:05:29.429
这将允许你的应用中的锻炼

00:05:29.496 --> 00:05:32.132
展示在用户的
健康和运动应用中

00:05:33.500 --> 00:05:35.502
根据你的锻炼应用的细节

00:05:35.569 --> 00:05:38.539
你可以请求权限
来读取燃烧的能量

00:05:38.605 --> 00:05:40.007
距离以及心率

00:05:41.441 --> 00:05:44.378
如果你想了解
有关设置授权的更多信息

00:05:44.444 --> 00:05:46.713
我们建议你看看我们
先前的一次分享

00:05:46.780 --> 00:05:48.415
充分利用HealthKit

00:05:53.020 --> 00:05:56.123
锻炼周期是通过
workoutConfiguration对象创建的

00:05:57.658 --> 00:06:00.627
workoutConfiguration
包含了锻炼活动类型

00:06:00.694 --> 00:06:02.129
比如跑步或骑行

00:06:02.796 --> 00:06:05.365
以及位置类型
比如室内或室外

00:06:08.101 --> 00:06:11.305
你将要使用配置对象
来创建一个workoutSession

00:06:12.406 --> 00:06:13.974
然后为了开启这一周期

00:06:14.041 --> 00:06:17.211
只需将其传入
HK healthStore的start方法中

00:06:20.647 --> 00:06:21.982
让我们通过演示来尝试一下

00:06:22.850 --> 00:06:25.352
仅限今天 我们假装
我们都在为一家公司工作

00:06:25.786 --> 00:06:29.489
我们最新的项目是要构建一个
基于watchOS 3的锻炼应用

00:06:29.823 --> 00:06:32.092
它专门为树懒爱好者设计

00:06:33.193 --> 00:06:34.494
它叫SpeedySloth

00:06:35.095 --> 00:06:39.199
我这里有一个Xcode项目
已经构建好了锻炼应用的UI

00:06:39.633 --> 00:06:40.834
让我们一起看一眼

00:06:49.743 --> 00:06:53.113
这个事用户打开应用时
所看到的第一个视图

00:06:53.514 --> 00:06:57.951
它只有两个选择器 一个是活动类型
可以是走路 跑步或远足

00:06:58.986 --> 00:07:03.190
另一个是位置类型
可以是室外 室内或未知

00:07:04.591 --> 00:07:07.394
当我点击开始按钮时
什么反应也没有

00:07:07.461 --> 00:07:08.695
让我们一起修改它

00:07:11.832 --> 00:07:13.901
你刚刚看到的视图是被

00:07:13.967 --> 00:07:16.570
ConfigurationInterfaceContrller
类所控制

00:07:17.538 --> 00:07:20.440
我在这里写了一个方法
叫didTapStartButton

00:07:20.507 --> 00:07:22.643
其会在用户
每次点击开始按钮时调用

00:07:22.910 --> 00:07:23.977
我要在里面写代码了

00:07:28.115 --> 00:07:30.517
我要创建一个
workoutConfiguration对象

00:07:30.918 --> 00:07:34.354
我需要将活动类型
设置为当前选择的活动类型

00:07:34.421 --> 00:07:35.923
通过第一个选择器

00:07:37.124 --> 00:07:38.692
然后将位置类型

00:07:39.626 --> 00:07:42.729
设置为当前选择的第二个选择器
位置类型

00:07:44.198 --> 00:07:46.466
我要将workoutConfiguration
对象传入

00:07:46.533 --> 00:07:49.736
到一个新的界面控制器
叫做WorkoutInterface Controller

00:07:50.904 --> 00:07:52.639
WorkoutInterface
Controller负责

00:07:52.706 --> 00:07:55.108
在锻炼周期中管理UI

00:07:55.609 --> 00:07:58.946
它还负责开启与停止健身周期

00:07:59.546 --> 00:08:01.548
让我们看看这个
WorkoutInterface Controller

00:08:07.187 --> 00:08:09.957
我在WorkoutInterface
Controller的唤醒方法中

00:08:10.023 --> 00:08:12.626
我知道我将收到
我们的workoutConfiguration对象

00:08:12.693 --> 00:08:14.494
作为这个方法中的上下文对象

00:08:15.062 --> 00:08:16.830
让我们使用它来
开启一次锻炼周期

00:08:20.234 --> 00:08:22.269
首先 我要打开这个上下文对象

00:08:22.336 --> 00:08:24.771
来确保它是一个有效的
workoutConfiguration

00:08:26.573 --> 00:08:29.009
然后我要通过它
创建一次锻炼周期

00:08:29.076 --> 00:08:31.278
通过将其传入HKWorkoutSession
的初始化程序中

00:08:33.679 --> 00:08:36.216
我要将我的锻炼周期
的代理设为self

00:08:36.283 --> 00:08:39.352
而后我将收到回调
获得类似状态改变或是错误等信息

00:08:42.422 --> 00:08:45.425
然后我讲当前时间
保存为锻炼开始的时间

00:08:45.492 --> 00:08:48.562
我们在后面还将用到这个参数
当我们将锻炼样本保存到HealthKit时

00:08:51.498 --> 00:08:55.402
下面 我要将workoutSession
传入HK healthStore的开始方法

00:08:55.869 --> 00:08:56.937
我们试一试

00:09:10.717 --> 00:09:13.086
现在我们来到了配置界面控制器

00:09:13.153 --> 00:09:14.721
我就选室外步行了

00:09:14.788 --> 00:09:16.823
我要再次点击开始按钮

00:09:18.725 --> 00:09:20.861
所以这打开了
WorkoutInterface Controller

00:09:20.928 --> 00:09:23.597
我有预感我们的锻炼周期正确开始了

00:09:23.664 --> 00:09:26.633
保险起见 我们看一看
设备上的钟表界面

00:09:27.467 --> 00:09:30.170
你可以在最上面看到
那里有一个绿色的跑动小人图标

00:09:30.237 --> 00:09:33.073
这代表这个手表上的一个应用

00:09:33.140 --> 00:09:34.641
有一个活动的锻炼周期

00:09:35.175 --> 00:09:39.546
用户可以在任何时候通过点击
这个图标进入其所属的应用

00:09:41.715 --> 00:09:44.218
所以看起来我们的
周期的确正确地开始了

00:09:44.284 --> 00:09:45.619
让我们回顾一下所完成的

00:09:46.153 --> 00:09:50.190
我们使用用户信息创建了
workoutConfiguration对象

00:09:50.691 --> 00:09:53.694
然后我们使用这个configuration
创建了一个锻炼周期

00:09:54.027 --> 00:09:57.531
然后我们通过将其传入
healthStore的开始方法来启动周期

00:09:59.032 --> 00:10:01.235
现在我们有一个活跃的锻炼周期

00:10:01.301 --> 00:10:04.805
我们想要在锻炼期间
收集一些数据并展示给用户

00:10:05.439 --> 00:10:07.608
为了分享给大家
更多有关收集和控制的信息

00:10:07.674 --> 00:10:09.476
我要邀请我的同事Jorge到这里来

00:10:09.543 --> 00:10:10.511
谢谢你

00:10:15.516 --> 00:10:16.717
谢谢你Dash

00:10:18.919 --> 00:10:19.887
早上好

00:10:20.420 --> 00:10:21.255
我叫Jorge

00:10:21.321 --> 00:10:23.690
我是HealthKit
团队的一个软件工程师

00:10:24.391 --> 00:10:27.027
我的同事Dash刚刚展示了

00:10:27.094 --> 00:10:29.897
如何配置并开启一次锻炼周期

00:10:30.297 --> 00:10:34.501
现在 我们将继续
讨论你如何收集数据

00:10:34.568 --> 00:10:38.205
并在一次锻炼期间控制你的周期状态

00:10:44.945 --> 00:10:47.948
我们将要调用
数据收集以及控制

00:10:48.315 --> 00:10:51.084
这些你要进行的
不同的任务

00:10:51.151 --> 00:10:54.388
从你的锻炼周期起始点开始

00:10:54.454 --> 00:10:56.623
一直到你决定结束

00:10:57.891 --> 00:10:59.993
让我们看看
这些不同的步骤

00:11:02.896 --> 00:11:06.066
首先 我们将要
观察样本 也就是

00:11:06.133 --> 00:11:09.403
从HealthKit获取样本信息

00:11:09.469 --> 00:11:12.773
为了将其合并到
你的锻炼中

00:11:15.409 --> 00:11:17.978
然后 我们要观察事件

00:11:18.312 --> 00:11:21.648
事件可以被HealthKit生成

00:11:21.715 --> 00:11:25.052
或者你可以在用户界面
中探测事件

00:11:25.118 --> 00:11:28.822
我们一会再
更深入地讨论事件

00:11:31.592 --> 00:11:34.528
一旦你开启了这两个任务

00:11:34.595 --> 00:11:36.530
你就处在运行状态了

00:11:37.030 --> 00:11:41.134
在任何时候
你都可以选择暂停

00:11:41.502 --> 00:11:44.338
然后可以多次继续锻炼

00:11:45.606 --> 00:11:49.276
然后 你可以决定你要

00:11:49.343 --> 00:11:51.512
结束这次锻炼周期

00:11:53.046 --> 00:11:56.617
所以让我们更深入地
再研究一下这些步骤

00:11:59.753 --> 00:12:02.723
首先 我说了我们想要观察样本

00:12:02.789 --> 00:12:07.027
你将需要打开
一个锚对象查询

00:12:07.094 --> 00:12:10.097
对你所感兴趣的
所有数据标签

00:12:10.531 --> 00:12:16.170
这可能是轮椅长度
或者是活动燃烧的能量

00:12:18.405 --> 00:12:22.376
当你进行此项操作时 你还需创建
updateHandler

00:12:22.442 --> 00:12:27.481
为了能收到HealthKit的
新事件 新样本

00:12:30.117 --> 00:12:35.055
这将允许你可以
不停地计算锻炼的总体数据

00:12:35.656 --> 00:12:38.692
比如总共的累计距离

00:12:38.759 --> 00:12:41.261
或是总共的累计卡路里数

00:12:41.562 --> 00:12:45.966
这样 你就能实时更新UI了

00:12:46.600 --> 00:12:49.403
你还可以展示 比如说

00:12:49.469 --> 00:12:51.839
最新测量到的心率

00:12:55.676 --> 00:12:59.947
你可以通知用户某些目标
比如说

00:13:00.013 --> 00:13:02.783
每当他们在一次
跑步中达到一英里

00:13:02.850 --> 00:13:05.786
或是当他们燃烧掉
第一个100卡路里

00:13:05.853 --> 00:13:07.387
在他们的划船锻炼中

00:13:09.089 --> 00:13:11.291
现在让我们看点代码

00:13:13.927 --> 00:13:16.530
因为我们要使用
锚对象查询

00:13:16.597 --> 00:13:20.968
你需要做的第一件事就是为你的查询
创建一个predicate

00:13:22.736 --> 00:13:27.174
我们将使用
你的锻炼开始时间

00:13:27.674 --> 00:13:32.279
你不想要那个时间之前
所生成的样本

00:13:32.346 --> 00:13:34.848
来计算总量

00:13:37.451 --> 00:13:42.155
然后 你将需要
向本地设备索取样本

00:13:42.222 --> 00:13:43.891
也就是当前的手表

00:13:45.192 --> 00:13:47.094
你想要避免 比如说

00:13:47.561 --> 00:13:50.998
获得那些保存在
手表上的样本

00:13:51.398 --> 00:13:54.368
作为一次和iPhone
同步的结果

00:13:56.503 --> 00:13:59.139
最终 你将要构建
两个predicate

00:13:59.206 --> 00:14:03.343
来组成最终的predicate
并在查询中使用

00:14:06.313 --> 00:14:09.082
然后 你要建立一个handler

00:14:09.149 --> 00:14:12.452
为了处理HealthKit的样本

00:14:13.520 --> 00:14:17.057
你可以将这些样本
累计并计算总量

00:14:17.124 --> 00:14:21.562
而后可以展示一些
更新的用户界面

00:14:23.096 --> 00:14:26.600
现在 我们可以创建
锚对象查询了

00:14:26.834 --> 00:14:30.337
你将要使用你所
感兴趣的quantityType

00:14:30.404 --> 00:14:32.039
我们刚构建的predicate

00:14:32.105 --> 00:14:36.276
并使用我们刚刚构建的handler
作为你最初的结果处理器

00:14:38.779 --> 00:14:41.582
你还要建立
updateHandler

00:14:42.015 --> 00:14:46.286
这样你才能从HealthKit
获得锻炼期间生成的样本

00:14:48.255 --> 00:14:52.192
最终 你需要执行
锚对象查询

00:14:57.664 --> 00:15:00.868
我们还提到你可以
通知你的用户

00:15:00.934 --> 00:15:02.536
有关某些达成的目标

00:15:02.603 --> 00:15:05.105
比如说 当他们
达到了一英里

00:15:05.172 --> 00:15:07.441
或是在锻炼中消耗掉的
第一个100卡路里

00:15:07.708 --> 00:15:09.243
一般的做法是

00:15:09.309 --> 00:15:12.179
进行一次触觉提示
来告知用户当前情况

00:15:13.213 --> 00:15:17.651
与之同时 我们建议
你要同时更新用户界面

00:15:17.718 --> 00:15:21.088
这样才能展示达成了什么目标

00:15:21.154 --> 00:15:24.191
很可能当用户感受到时

00:15:24.758 --> 00:15:28.061
他们会抬起手腕
并看看屏幕

00:15:28.128 --> 00:15:29.496
这次震动是什么意思

00:15:32.933 --> 00:15:36.303
进行一次触觉反馈的方式
是调用play方法

00:15:36.370 --> 00:15:38.305
在WatchKit界面设备中

00:15:42.476 --> 00:15:44.144
现在让我们说说事件

00:15:44.912 --> 00:15:47.848
事件是你要使用的时间戳

00:15:47.915 --> 00:15:50.417
来在锻炼中突出特定点

00:15:50.751 --> 00:15:53.987
比如说 你可以使用
暂停与继续事件

00:15:54.054 --> 00:15:56.924
来突出那些锻炼状态发生改变的点

00:16:01.862 --> 00:16:04.831
有些事件将被你的应用创建

00:16:04.898 --> 00:16:06.800
并随后存入锻炼中

00:16:08.435 --> 00:16:12.406
而有些是由HealthKit
创建并发送给你的

00:16:15.375 --> 00:16:17.110
watchOS 3的新特性

00:16:17.177 --> 00:16:20.848
我们在锻炼周期delegate
中有didGenerate事件

00:16:21.915 --> 00:16:26.286
HealthKit要使用
该事件来向你的应用发送事件

00:16:28.121 --> 00:16:31.158
所以让我们看看
不同种类的事件

00:16:31.225 --> 00:16:32.793
在watchOS 3中

00:16:36.797 --> 00:16:41.168
圈数和标记是
我们刚刚介绍的两种新事件

00:16:42.669 --> 00:16:47.307
这些事件是你
需要自己创建的

00:16:47.374 --> 00:16:49.309
并存储在你的锻炼中

00:16:51.111 --> 00:16:54.114
它表示你将用到的时间戳

00:16:54.181 --> 00:16:57.451
用于将你的锻炼展示
为图标或是统计数据

00:16:58.952 --> 00:17:01.655
圈数和标记有一个区别

00:17:03.490 --> 00:17:08.996
圈数代表代表划分
你的锻炼的事件

00:17:09.061 --> 00:17:11.131
它们所占的比例相同

00:17:11.464 --> 00:17:12.299
比如说

00:17:13.267 --> 00:17:17.003
如果你是在路径中
进行跑步或骑行锻炼

00:17:17.404 --> 00:17:22.843
你需要每次在用户
完成一圈时创建圈数事件

00:17:27.247 --> 00:17:29.216
标记 与之不同

00:17:29.283 --> 00:17:32.319
可以是锻炼中的任意节点

00:17:32.819 --> 00:17:36.490
它们不需要与距离或
其他度量绑定

00:17:37.758 --> 00:17:39.526
它们可以代表 比如说

00:17:39.860 --> 00:17:43.463
你的用户达到山顶的瞬间

00:17:44.131 --> 00:17:48.435
或是你在路上
看到了一只树懒

00:17:54.975 --> 00:17:57.644
现在让我们说说
暂停与继续锻炼

00:17:59.313 --> 00:18:00.781
在一次锻炼周期中

00:18:00.848 --> 00:18:04.818
你的用户可能会决定
暂时停止活动

00:18:05.519 --> 00:18:10.023
比如说 他们正在跑步
他们可能决定暂停

00:18:10.090 --> 00:18:12.092
来买一瓶水

00:18:14.094 --> 00:18:17.564
在这种情况下
你需要在用户界面中有方法

00:18:17.631 --> 00:18:19.900
来让你用户
告知你这种情况

00:18:20.400 --> 00:18:21.502
当这种情况发生时

00:18:22.603 --> 00:18:26.373
你可以调用HealthKit
来暂停你的锻炼

00:18:27.040 --> 00:18:30.777
这将允许HealthKit
来节省手表中的电量

00:18:30.844 --> 00:18:32.646
以及数据库中的空间

00:18:34.348 --> 00:18:36.049
当然了 当这种情况发生时

00:18:36.116 --> 00:18:39.920
你也想忽略应用收到的任何新数据

00:18:40.587 --> 00:18:44.291
你不想积累样本

00:18:45.259 --> 00:18:48.862
到总量中
在周期被暂停期间

00:18:51.965 --> 00:18:55.335
HealthKit会反馈
暂停与继续调用

00:18:55.869 --> 00:18:58.505
通过生成暂停与继续事件

00:18:58.572 --> 00:19:03.377
你需要使用锻炼周期
代理获得

00:19:05.145 --> 00:19:08.682
你需要知道当你收到暂停事件时

00:19:09.249 --> 00:19:12.019
HealthKit不会再生成
新的事件了

00:19:12.085 --> 00:19:14.688
直到你继续你的周期

00:19:19.493 --> 00:19:20.894
watchOS 3的新特性

00:19:21.261 --> 00:19:24.631
你暂停与继续一次健身
所需要调用的函数

00:19:24.698 --> 00:19:26.500
是HKHealthStore的
一部分

00:19:26.567 --> 00:19:29.236
暂停workoutSession
和继续workoutSession

00:19:32.105 --> 00:19:34.775
你将要收到的事件
是暂停和继续事件

00:19:35.275 --> 00:19:39.046
你可能在之前的iOS版本
就已经知道了

00:19:43.383 --> 00:19:45.619
现在让我们聊聊运动事件

00:19:46.687 --> 00:19:48.288
这是watchOS 3新特性

00:19:48.589 --> 00:19:51.291
运动暂停与运动继续事件

00:19:52.459 --> 00:19:55.028
你的手表 在一次跑步锻炼期间

00:19:55.462 --> 00:19:59.466
可以探测到用户停止运动

00:19:59.533 --> 00:20:01.602
这意味着他们停止跑动了

00:20:02.402 --> 00:20:05.572
而一旦他们继续跑动
我们就可以立即探测到

00:20:07.007 --> 00:20:08.809
当你收到这些事件时

00:20:10.544 --> 00:20:13.914
你要停止收集数据进健身中

00:20:14.181 --> 00:20:18.385
就像用户手动暂停一样

00:20:18.752 --> 00:20:24.057
但是 你不需要暂停你的锻炼周期

00:20:26.026 --> 00:20:30.697
要注意这只是在
跑步活动类型中实现了

00:20:34.768 --> 00:20:38.338
所以让我们回到我们的
SpeedySloth演示应用

00:20:38.405 --> 00:20:41.408
看看我们如何可以
具体化这些概念

00:20:41.475 --> 00:20:42.910
我们刚刚所学到的

00:20:47.147 --> 00:20:51.251
所以我要切换到
我们的演示了

00:20:52.953 --> 00:20:54.721
为了回放一下我们刚刚看到的

00:20:56.590 --> 00:21:00.794
我们有...我们的锻炼应用

00:21:00.861 --> 00:21:03.263
它已经启动了锻炼周期

00:21:03.330 --> 00:21:07.935
但我们可以看到屏幕上
卡路里和距离都是0

00:21:08.435 --> 00:21:10.470
我们还没有累加数据

00:21:10.838 --> 00:21:14.274
所以我们进入锻炼中
来看看如何解决这个问题

00:21:16.243 --> 00:21:19.479
回到我们的锻炼界面控制器类

00:21:19.613 --> 00:21:23.317
我要找被委托的回调函数

00:21:23.383 --> 00:21:25.319
当决定改变其状态时

00:21:25.385 --> 00:21:30.624
这是workoutSession
didChangeTo toState fromState

00:21:31.291 --> 00:21:35.229
这里我有一个switch语句
所有case都是空的

00:21:35.562 --> 00:21:38.298
我现在所感兴趣的
是运行时的case

00:21:39.399 --> 00:21:41.768
每当我们从notStarted
状态进来时

00:21:42.202 --> 00:21:46.473
这意味着你的应用
刚刚启动了锻炼

00:21:48.242 --> 00:21:51.378
所以如果是在跑步
从notStarted状态进入

00:21:51.445 --> 00:21:55.649
我要调用startAccumulating
Data函数

00:21:56.550 --> 00:21:58.252
让我们看看这个函数

00:22:00.454 --> 00:22:04.191
我们想更新屏幕
上的这两个标签

00:22:04.258 --> 00:22:09.296
一个代表距离
一个代表燃烧的能量

00:22:09.363 --> 00:22:11.798
所以我们要进行两次查询

00:22:11.865 --> 00:22:14.434
针对这两种数据类型

00:22:16.069 --> 00:22:17.571
进行查询的方式

00:22:17.638 --> 00:22:20.340
和在展示中的一样

00:22:21.241 --> 00:22:25.846
首先我们要构建一个
在查询中使用的predicate

00:22:28.148 --> 00:22:30.450
然后 我们要
定义一个处理器

00:22:30.751 --> 00:22:35.389
在这里 我已经有一个
实现好的过程函数

00:22:35.455 --> 00:22:38.458
它将接收这些样本
并进行累积

00:22:38.525 --> 00:22:40.527
并更新我的用户界面

00:22:43.897 --> 00:22:47.000
现在 我准备好创建查询了

00:22:47.801 --> 00:22:50.504
建立updateHandler
并执行

00:22:53.707 --> 00:22:58.045
最终 我想要保存
这个查询留用

00:22:58.111 --> 00:23:02.616
因为由updateHandler
执行的查询

00:23:02.683 --> 00:23:04.952
我们想在某个时刻停止它

00:23:07.187 --> 00:23:08.388
让我们开始

00:23:10.257 --> 00:23:11.959
再一次运行我们的应用

00:23:14.461 --> 00:23:15.796
切换到模拟器

00:23:21.301 --> 00:23:22.669
好了

00:23:22.836 --> 00:23:25.005
所以我们要选择 比如说

00:23:25.639 --> 00:23:28.008
一个室外的跑步锻炼

00:23:30.477 --> 00:23:31.378
好了

00:23:33.213 --> 00:23:34.214
当我们开始时

00:23:35.616 --> 00:23:38.819
我们可以看到屏幕上
的数字已经开始增长了

00:23:38.886 --> 00:23:41.588
这是因为手表模拟器

00:23:41.655 --> 00:23:44.157
在为你生成
一些虚拟样本

00:23:44.224 --> 00:23:46.326
每当你开始一次锻炼周期

00:23:47.694 --> 00:23:48.529
棒

00:23:48.595 --> 00:23:51.899
如果你看看屏幕
你可以看到有几个按钮

00:23:51.965 --> 00:23:54.067
但他们现在没有任何工作

00:23:54.701 --> 00:24:00.040
我们已经说了你如何
能暂停并为应用生成标记事件

00:24:00.107 --> 00:24:02.976
所以让我们看看代码
看看我们如何完成

00:24:05.812 --> 00:24:11.585
我在这里有一个didTapPause
ResumeButton函数

00:24:11.652 --> 00:24:15.122
它与屏幕上的暂停按钮绑定

00:24:15.189 --> 00:24:17.391
所以我要在这里写代码

00:24:19.159 --> 00:24:22.229
首先我要要检查
我是否有一个锻炼周期

00:24:22.396 --> 00:24:24.831
然后我要检查它的状态

00:24:25.232 --> 00:24:26.333
看它是否在运行

00:24:27.201 --> 00:24:29.570
我要暂停这次锻炼周期

00:24:29.870 --> 00:24:32.439
如果它是暂停的
我要将其继续

00:24:34.107 --> 00:24:37.878
好的 这样的结果是
你的锻炼周期状态会改变

00:24:38.312 --> 00:24:39.780
如果我们退回到

00:24:43.584 --> 00:24:46.420
委托回调

00:24:46.486 --> 00:24:50.757
每当你的锻炼周期
变动到特定的状态

00:24:50.824 --> 00:24:54.328
你可以在这里看到
暂停状态是空的

00:24:54.561 --> 00:24:56.463
所以我们要写点代码

00:24:56.530 --> 00:25:01.001
在这里我已实现了
pauseAccumulatingData

00:25:01.268 --> 00:25:04.471
这个函数不再处理

00:25:04.538 --> 00:25:07.741
新的样本 当它们
进入到我的锻炼中时

00:25:09.176 --> 00:25:12.145
类似地 我们要在某点
继续这次锻炼

00:25:12.212 --> 00:25:17.150
所以当我们的周期
回到运行状态时

00:25:18.285 --> 00:25:21.788
我们会收到
resumeAccumulatingData

00:25:25.292 --> 00:25:31.031
屏幕上的另一个按键
是Marker按键

00:25:31.965 --> 00:25:36.937
在这里 我们想要创建
一个markerEvent

00:25:37.871 --> 00:25:41.909
我们刚刚创建了一个类型为
标记并有当前日期的锻炼事件

00:25:42.376 --> 00:25:46.046
我们要将该事件
保存到一个本地的队列里

00:25:46.346 --> 00:25:48.749
为了以后保存到锻炼中

00:25:49.116 --> 00:25:55.155
最终 我这里有一个步骤
要在用户界面通知用户

00:25:55.222 --> 00:25:57.357
这个事件刚刚发生

00:25:59.092 --> 00:26:03.497
还要记住我们已经
实现了didGenerate event

00:26:05.599 --> 00:26:08.969
这是来自
锻炼周期代理的回调

00:26:09.036 --> 00:26:14.408
在这里 我们还想保存
由HealthKit生成的事件

00:26:14.474 --> 00:26:17.177
到锻炼事件队列中

00:26:18.645 --> 00:26:20.747
所以让我们再运行一遍应用

00:26:28.155 --> 00:26:29.823
等它运行起来

00:26:33.393 --> 00:26:34.595
好了 出现了

00:26:34.661 --> 00:26:37.097
我现在要选择室外步行

00:26:38.298 --> 00:26:41.401
等几秒屏幕上出现数字

00:26:42.135 --> 00:26:46.039
你可以在屏幕最上看到
有一个活跃的锻炼

00:26:46.540 --> 00:26:50.777
每当我点击暂停按钮
它都进入暂停状态

00:26:50.844 --> 00:26:55.048
你可以看到卡路里
和距离的数字没有增长

00:26:56.049 --> 00:26:57.718
我现在可以点继续了

00:26:58.051 --> 00:27:01.855
它进入了活动状态
数字又开始增长了

00:27:04.324 --> 00:27:08.629
你也可以点击Marker按钮

00:27:09.196 --> 00:27:11.832
它会在用户界面中进行展示

00:27:12.266 --> 00:27:16.904
很可能你的用户所佩戴的
手表会生成一次抖动

00:27:19.673 --> 00:27:23.143
很好 现在我们回到展示

00:27:26.146 --> 00:27:27.614
回想一下我们所看到的

00:27:30.284 --> 00:27:33.787
我们刚刚看到你如何
使用锚对象查询

00:27:33.854 --> 00:27:38.492
来从HealthKit获得信息
并更新锻炼总量

00:27:39.226 --> 00:27:42.829
然后我们实现了
暂停与继续事件

00:27:43.730 --> 00:27:45.332
在你的锻炼应用中

00:27:45.399 --> 00:27:50.137
最后 我们展示了如何
创建一次事件并保存留用

00:27:54.208 --> 00:27:57.177
下一步是终止你的锻炼周期

00:27:57.244 --> 00:28:01.648
说到这里我要邀请
我的同事Dash回来

00:28:09.223 --> 00:28:10.090
又见面了

00:28:11.091 --> 00:28:13.026
结束并保存一次锻炼很简单

00:28:13.493 --> 00:28:17.264
只需几步 你的应用
所保存的锻炼可以无缝地集成

00:28:17.331 --> 00:28:19.800
与活动与健康应用

00:28:20.100 --> 00:28:22.202
让我们看看活动应用

00:28:25.839 --> 00:28:28.141
保存到HealthKit的
锻炼会自动展示

00:28:28.208 --> 00:28:30.244
在活动应用锻炼列表中

00:28:31.078 --> 00:28:34.882
从iOS 10开始
这包含了手机上的锻炼

00:28:35.215 --> 00:28:38.318
这意味着用户可以在
手机应用上进行锻炼

00:28:38.385 --> 00:28:40.020
当他们的手表不在身边时

00:28:40.087 --> 00:28:42.389
他们一样会在活动应用
中获得积分

00:28:47.728 --> 00:28:49.363
有能量样本的锻炼

00:28:49.429 --> 00:28:51.665
可以向用户的
运动环做贡献

00:28:51.965 --> 00:28:54.902
用户会很喜欢从
你的应用获得锻炼积分

00:28:54.968 --> 00:28:56.136
在他们的活动日中

00:28:57.838 --> 00:29:00.240
让我们一步步学习
如何结束并保存一次锻炼

00:29:00.307 --> 00:29:02.543
让它们展示在
用户的活动应用中

00:29:03.944 --> 00:29:06.180
完成一次健身有三步

00:29:07.814 --> 00:29:09.883
第一 你要结束锻炼周期

00:29:12.186 --> 00:29:14.588
第二 你要将锻炼
保存至HealthKit

00:29:15.622 --> 00:29:19.193
第三 你将关联的样本
添加到保存的锻炼中

00:29:19.259 --> 00:29:20.627
比如燃烧的热量和距离

00:29:21.795 --> 00:29:23.096
让我们一个一个解决

00:29:26.366 --> 00:29:29.670
为结束锻炼周期 只需调用
healthStore的结束方法

00:29:29.736 --> 00:29:31.505
并传入锻炼周期

00:29:31.972 --> 00:29:34.775
这将重置设备的
传感器至正常状态

00:29:37.044 --> 00:29:38.846
当HealthKit成功结束锻炼后

00:29:38.912 --> 00:29:41.081
你的锻炼周期代理
会收到回调

00:29:41.148 --> 00:29:42.449
在其状态改变方法中

00:29:43.383 --> 00:29:45.485
当你看到状态改为ended时

00:29:45.552 --> 00:29:47.221
就应该保存锻炼了

00:29:50.224 --> 00:29:53.227
你要创建一个HKWorkout样本
来保存到HealthKit

00:29:53.660 --> 00:29:55.696
你创建锻炼所使用的信息

00:29:55.762 --> 00:29:58.332
将会展示在用户的
健康与活动应用中

00:30:00.567 --> 00:30:04.104
确保你所使用的活动类型
和原先配置健身时一样

00:30:05.906 --> 00:30:08.175
为锻炼设置一个起始时间和结束时间

00:30:08.842 --> 00:30:11.078
并包含一个锻炼事件队列

00:30:11.445 --> 00:30:14.114
这个队列可以包含
诸如暂停与继续的事件

00:30:14.181 --> 00:30:16.817
以及Jorge刚才讨论过的
标记和圈数

00:30:20.053 --> 00:30:23.790
totalEnergyBurned
值是一个HK数值 代表总值

00:30:23.857 --> 00:30:26.326
在锻炼周期期间所有燃烧的能量

00:30:27.628 --> 00:30:30.397
类似地 totalDistance
值也是HK数值

00:30:30.464 --> 00:30:33.233
代表锻炼周期期间所运动的总长

00:30:36.003 --> 00:30:38.105
最后 不要忘了添加元数据

00:30:39.072 --> 00:30:40.974
给IndoorWorkout键
设一个值

00:30:41.041 --> 00:30:43.310
来为你的锻炼声明位置类型

00:30:47.047 --> 00:30:49.082
你可将该锻炼样本
存至HealthKit

00:30:49.149 --> 00:30:51.919
只需要将其传入
healthStore的保存方法

00:30:53.153 --> 00:30:55.255
当你看到它保存成功时

00:30:55.322 --> 00:30:57.424
就可以向锻炼添加样本了

00:30:57.491 --> 00:30:59.193
让我们说说添加样本

00:31:02.062 --> 00:31:03.830
当你向一次锻炼添加样本时

00:31:03.897 --> 00:31:07.701
HealthKit会在这些样本
和锻炼之间创建一个链接

00:31:09.169 --> 00:31:11.672
应用可以在其后
查询所有的样本

00:31:11.738 --> 00:31:13.740
与指定的锻炼对应

00:31:14.875 --> 00:31:16.443
这将很有用 如果你想绘图

00:31:16.510 --> 00:31:18.745
在锻炼时间线中
描述细节数据

00:31:21.782 --> 00:31:24.251
想锻炼添加能量样本很必要

00:31:24.318 --> 00:31:26.887
如果你想让用户
在活动运动环中获得积分

00:31:27.421 --> 00:31:29.990
活动会使用这些关联的能量样本

00:31:30.057 --> 00:31:31.592
来计算环中的积分

00:31:36.797 --> 00:31:40.267
最终 确保你先前保存在
锻炼样本中的总额

00:31:40.634 --> 00:31:42.970
与这些关联样本相符

00:31:45.939 --> 00:31:49.443
为了向锻炼添加样本
只需要传入一个HK样本队列

00:31:49.510 --> 00:31:52.246
到healthStore的
addSamplesToWorkout方法

00:31:55.682 --> 00:31:59.019
让我们现更新SpeedySloth
添加结束与保存锻炼功能

00:32:00.320 --> 00:32:01.722
我们上一次使用应用时

00:32:01.788 --> 00:32:04.424
Jorge展示了如何收集
数据来展示给用户

00:32:05.058 --> 00:32:07.895
以及如何通过暂停与继续
控制这个事件

00:32:08.529 --> 00:32:11.532
你可能已经发现在
WorkoutInterfaceController底部

00:32:11.598 --> 00:32:13.367
有一个叫
End Workout的按钮

00:32:13.967 --> 00:32:15.936
当我点击它时没有反应

00:32:16.003 --> 00:32:17.171
我们现在要进行修改

00:32:18.739 --> 00:32:20.641
我又回到了锻炼界面控制器

00:32:21.208 --> 00:32:23.443
我有一个方法叫
didTapEndButton

00:32:24.211 --> 00:32:25.345
让我们向里面写代码

00:32:28.982 --> 00:32:31.852
首先 我要保存当前时间
作为workoutEndDate

00:32:31.919 --> 00:32:34.555
我们稍后创建锻炼样本时
会用到它

00:32:37.224 --> 00:32:39.626
接下来 我要调用
healthStore的结束方法

00:32:39.693 --> 00:32:41.595
并传入锻炼周期

00:32:43.297 --> 00:32:45.065
当healthKit成功结束周期后

00:32:45.132 --> 00:32:47.668
我们在状态变更方法
中就会收到一个回调

00:32:48.368 --> 00:32:50.370
我现要回到
状态变更方法

00:32:53.874 --> 00:32:55.275
Jorge刚才已经展示

00:32:55.342 --> 00:32:57.444
如何处理运行与暂停状态

00:32:58.412 --> 00:33:00.480
现在我们想处理
这个终止状态

00:33:03.417 --> 00:33:05.986
我们想在锻炼周期结束时
完成两项任务

00:33:06.286 --> 00:33:08.355
第一 我想结束所有的查询

00:33:09.857 --> 00:33:11.291
这个方法已经实现了

00:33:11.358 --> 00:33:14.928
它会遍历开放查询的队列
并逐一停止

00:33:16.964 --> 00:33:19.666
然后 我们想将锻炼保存
让我们现在实现它

00:33:27.374 --> 00:33:30.143
我要创建一个锻炼样本
我要使用活动类型

00:33:30.210 --> 00:33:31.879
直接从锻炼配置获得

00:33:33.747 --> 00:33:37.284
然后我将开始时间与
结束时间设置为刚才保存的值

00:33:39.386 --> 00:33:40.988
我添加了
workoutEvents对列

00:33:41.054 --> 00:33:43.757
Jorge展示了如何
在锻炼周期期间进行构建

00:33:47.361 --> 00:33:49.296
我要使用totalEnergyBurned
的数值

00:33:49.363 --> 00:33:53.467
以及在此期间我们从数据查询
中积累的totalDistance

00:33:55.903 --> 00:33:58.338
最终 我要添加针对
描述信息的代码字典

00:33:58.405 --> 00:34:01.308
我要给室内锻炼字段赋值

00:34:01.375 --> 00:34:04.011
基于我们锻炼配置的位置类型

00:34:07.714 --> 00:34:10.617
我要将锻炼样本
传入healthStore的保存方法

00:34:10.684 --> 00:34:12.119
它会将其存到HealthKit中

00:34:13.554 --> 00:34:15.522
当我们看到它保存成功后

00:34:15.822 --> 00:34:17.424
我将要调用
addSamplesToWorkout

00:34:17.491 --> 00:34:19.893
这个函数就在这里
我们现在就实现它

00:34:24.998 --> 00:34:27.266
我想要想这次锻炼
添加两个样本

00:34:27.333 --> 00:34:30.137
一个作为totalEnergyBurned
另一个是totalDistance

00:34:33.072 --> 00:34:35.708
对于totalEnergyBurned
我创建了一个quantitySample

00:34:36.176 --> 00:34:38.879
我使用的数值类型
是activeEnergyBurned

00:34:39.947 --> 00:34:42.748
然后我要传入同一个
totalEnergyBurned数量

00:34:42.815 --> 00:34:44.551
与刚才我在锻炼样本中使用的相同

00:34:45.085 --> 00:34:48.355
这意味着将有一个
很大的能量消耗样本

00:34:48.422 --> 00:34:50.389
这跨越了锻炼的整个周期

00:34:50.991 --> 00:34:54.561
如果你想要的话 你可以
创建多个更小的能量燃烧样本

00:34:54.628 --> 00:34:56.630
只需保证它们加起来和

00:34:56.697 --> 00:34:58.532
你在HKWorkout样本中
的值相同

00:35:03.103 --> 00:35:05.272
我为totalDistanceSample
进行同样操作

00:35:06.340 --> 00:35:08.909
我要使用的数值类型是
distanceWalkingRunning

00:35:09.243 --> 00:35:11.178
HealthKit有三种距离类型

00:35:11.245 --> 00:35:13.881
我要用WalkingRunning
因为我们的锻炼应用只处理

00:35:13.947 --> 00:35:15.349
走动与跑动距离

00:35:16.016 --> 00:35:17.918
如果你要构建骑行锻炼应用

00:35:17.985 --> 00:35:20.087
你应当使用骑行距离

00:35:20.521 --> 00:35:22.723
我们刚刚添加了一种
新的距离类型

00:35:22.789 --> 00:35:25.859
轮椅距离 你可以使用它
进行基于轮椅的锻炼活动

00:35:29.296 --> 00:35:32.299
我要使用和刚才锻炼样本
一样的总距离数值

00:35:32.733 --> 00:35:35.002
我要设置同样的
锻炼开始和结束时间

00:35:35.068 --> 00:35:38.405
再一次 这是一个很大的
距离样本 跨越整个锻炼

00:35:41.275 --> 00:35:43.343
我将这两个样本添加到锻炼

00:35:43.410 --> 00:35:45.546
通过将它们放在一个
队列中并传入

00:35:45.612 --> 00:35:47.281
“添加样本至锻炼”方法
在healthStore中

00:35:49.316 --> 00:35:51.351
当我看到添加成功时

00:35:51.418 --> 00:35:54.288
我知道我这次锻炼的所有
数据都保存到HealthKit中了

00:35:54.821 --> 00:35:56.823
现在我想将锻炼展示给用户

00:36:00.027 --> 00:36:02.529
我通过传入HKWorkout
对象来完成

00:36:02.596 --> 00:36:05.699
传给一个新的界面控制器叫
SummaryInterface Controller

00:36:06.466 --> 00:36:08.402
SummaryInterface Controller
已经写好了 它知道

00:36:08.468 --> 00:36:11.805
如何在一个总览视图中
向用户展示一个HKWorkout

00:36:14.107 --> 00:36:17.411
我要再次运行应用
我们将看到如何结束锻炼

00:36:33.026 --> 00:36:34.728
我们再一次选择室外跑步

00:36:34.795 --> 00:36:35.896
我要点击Start

00:36:37.064 --> 00:36:39.399
我们稍等片刻
数据开始收集

00:36:44.638 --> 00:36:46.440
好了我将点击
结束锻炼按钮

00:36:46.507 --> 00:36:47.641
因为我们已经有些数据了

00:36:49.743 --> 00:36:53.046
我们的锻炼周期结束了
我们的样本已存到HealthKit

00:36:53.113 --> 00:36:56.016
这里是总览视图
向我们展示锻炼样本

00:36:57.050 --> 00:36:59.920
为确保它的确成功
保存到了HealthKit

00:36:59.987 --> 00:37:02.623
让我们看看iPhone
模拟器上的Health应用

00:37:05.325 --> 00:37:07.961
现在我在Health应用
的Workout视图中

00:37:08.462 --> 00:37:11.265
我要点击显示全部数据
而后会看到一个锻炼列表

00:37:13.700 --> 00:37:16.937
在顶端你可以看到
一个在11:36刚刚完成的锻炼

00:37:17.004 --> 00:37:18.005
这就是我们的锻炼

00:37:18.338 --> 00:37:20.774
我要点击它来
获得更多信息

00:37:22.643 --> 00:37:24.611
你可以看到这是
一个跑步锻炼

00:37:24.678 --> 00:37:27.948
它有近乎13秒的时长
这里有起始和结束时间

00:37:28.015 --> 00:37:30.384
这是我们锻炼样本中的所有信息了

00:37:30.484 --> 00:37:33.820
你甚至可以在这里看到元数据
说这不是室内活动

00:37:34.788 --> 00:37:36.723
在底端你可以看到两个样本

00:37:36.790 --> 00:37:38.492
我们刚才将其与锻炼关联

00:37:38.825 --> 00:37:41.128
我们几乎总共燃烧了2卡路里

00:37:41.195 --> 00:37:42.129
干得漂亮

00:37:42.663 --> 00:37:45.799
我们跑了一英里的百分之一

00:37:46.967 --> 00:37:49.736
所以看起来所有信息
都成功保存到了HealthKit

00:37:50.270 --> 00:37:51.605
让我们回看刚才做了什么

00:37:54.374 --> 00:37:57.578
我们通过对healthStore
调用end结束了锻炼周期

00:37:58.779 --> 00:38:01.882
然后我们在状态变更
代理方法中等待回调

00:38:02.316 --> 00:38:04.418
当我们看到状态
改变为end后

00:38:04.484 --> 00:38:06.920
我们创建了一个锻炼样本
并保存至HealthKit

00:38:07.754 --> 00:38:10.524
然后 我们创建了两个样本
来添加到锻炼中

00:38:10.591 --> 00:38:13.093
一个为了totalEnergyBurned
另一个作为totalDistance

00:38:13.694 --> 00:38:16.697
要记住有必要关联
燃烧能量的样本

00:38:16.763 --> 00:38:19.266
这样用户就可以在
活动环中获得积分

00:38:21.602 --> 00:38:24.571
我们刚刚构建了一整个
watchOS 3的锻炼应用

00:38:24.638 --> 00:38:25.706
就是这么简单

00:38:33.514 --> 00:38:37.384
现在watchOS中的每个应用
都有一个父应用

00:38:37.718 --> 00:38:41.889
我们在iOS 10中专门为
锻炼应用添加了一些API

00:38:42.556 --> 00:38:46.226
为了向大家介绍这些新API
我要邀请Jorge回到这里

00:38:46.426 --> 00:38:47.261
谢谢你

00:38:53.967 --> 00:38:54.801
谢谢你 Dash

00:38:58.939 --> 00:39:03.443
你们都为iPhone开发了
很棒的应用

00:39:03.810 --> 00:39:08.782
锻炼应用不只是你的手表

00:39:09.349 --> 00:39:11.185
从iOS 10开始

00:39:11.251 --> 00:39:14.721
我们提供了新的API
供大家使用

00:39:14.788 --> 00:39:18.258
来在你的iPhone应用中
实现新的功能

00:39:21.995 --> 00:39:27.935
我们提到了每一个手表
应用都有一个iPhone父应用

00:39:28.902 --> 00:39:35.209
你可以利用这一点
为你的用户提供很棒的体验

00:39:36.877 --> 00:39:39.546
你可以使用
WatchConnectivity

00:39:39.613 --> 00:39:41.949
在两个应用间通信

00:39:42.115 --> 00:39:45.052
这是实现新特性
很有效的方法

00:39:45.118 --> 00:39:47.888
当你的手表处在健身状态

00:39:48.355 --> 00:39:50.023
且应用在运行

00:39:52.426 --> 00:39:54.494
现在我们有了后台运行

00:39:54.561 --> 00:39:57.965
这样你的应用可以在任意时刻运行

00:39:58.031 --> 00:40:02.970
这允许你实现很棒的新功能

00:40:04.505 --> 00:40:07.140
但是 为了实现这一点

00:40:07.207 --> 00:40:10.611
你需要将手表调到健身状态

00:40:12.246 --> 00:40:17.017
从iOS 10开始
我们提供功能

00:40:17.084 --> 00:40:22.523
让你从iPhone中开启一次锻炼

00:40:25.092 --> 00:40:29.329
这就是 你的手表将
进入锻炼状态

00:40:29.396 --> 00:40:33.467
用户不需要干预其用户界面

00:40:34.535 --> 00:40:37.204
现在 让我们看看这怎么完成

00:40:39.740 --> 00:40:41.175
在你的iPhone应用中

00:40:41.909 --> 00:40:45.579
你可以选择活动类型和位置

00:40:45.646 --> 00:40:48.749
你需要创建一个
workoutConfiguration对象

00:40:49.917 --> 00:40:51.185
一旦完成

00:40:52.186 --> 00:40:54.621
你将workoutConfiguration对象

00:40:54.688 --> 00:40:56.156
发送到手表应用中

00:40:56.690 --> 00:40:59.760
如果手表应用没有运行

00:40:59.826 --> 00:41:01.328
就会自动运行

00:41:03.630 --> 00:41:09.002
现在 锻炼应用可以获取那个配置对象

00:41:09.069 --> 00:41:10.737
并开启一次锻炼周期

00:41:13.907 --> 00:41:15.409
为了使之正常运行

00:41:15.475 --> 00:41:18.445
你需要进入
锻炼运行后台模式

00:41:18.512 --> 00:41:20.814
我们在展示的前一段提到过

00:41:22.649 --> 00:41:24.852
现在让我们看看代码

00:41:26.753 --> 00:41:28.488
你可能对这段代码很熟悉

00:41:28.555 --> 00:41:30.958
因为我们在展示的前面看到过

00:41:31.024 --> 00:41:35.429
每当你要在手表上开启一次
锻炼时都需要这么做

00:41:37.097 --> 00:41:40.067
你先创建一个workout
Configuration对象

00:41:40.601 --> 00:41:45.172
然后使用它创建一个
workoutSession与startDate

00:41:48.175 --> 00:41:52.479
在这里 我们想将这些
代码分成两部分

00:41:53.981 --> 00:41:56.817
第一部分是创建
workoutConfiguration

00:41:56.884 --> 00:41:59.152
会在iPhone应用中执行

00:42:00.220 --> 00:42:04.758
创建workoutSession与
startDate将在手表应用上执行

00:42:07.528 --> 00:42:09.763
为了完成这一点
你需要进行通信

00:42:09.830 --> 00:42:11.431
在两个应用之间

00:42:11.732 --> 00:42:15.536
所以让我们先看看
iPhone应用中的代码

00:42:18.338 --> 00:42:21.742
首先 你需要检测
WatchConnectivity

00:42:21.808 --> 00:42:23.510
看看有没有一个
激活的会话

00:42:24.178 --> 00:42:26.813
以及手表应用是否安装

00:42:28.782 --> 00:42:32.619
完成之后 你就可以创建
workoutConfiguration了

00:42:34.922 --> 00:42:38.192
下一步 为了将
workoutConfiguration传给

00:42:38.258 --> 00:42:40.093
你的手表应用

00:42:40.160 --> 00:42:44.264
你将要调用iOS 10中的
新方法 startWatchApp

00:42:44.331 --> 00:42:45.933
使用workoutConfiguration

00:42:46.166 --> 00:42:48.635
这是HK healthStore
的新方法

00:42:49.169 --> 00:42:54.541
这会将你的workoutConfiguration
传送到手表应用中

00:42:58.712 --> 00:43:01.215
现在让我们看看
手表应用代码

00:43:01.682 --> 00:43:04.618
你需要用workoutConfiguration

00:43:05.285 --> 00:43:07.354
来创建一个锻炼周期并开始

00:43:08.755 --> 00:43:14.061
为此 你需要实现处理
workoutConfiguration

00:43:14.127 --> 00:43:16.530
这是一个新函数

00:43:16.797 --> 00:43:20.200
是WatchKit
ExtensionDelegate的一部分

00:43:20.734 --> 00:43:22.603
通过实现这个函数

00:43:22.669 --> 00:43:26.073
你可以获取你的
workouConfiguration并可以开始

00:43:27.541 --> 00:43:32.045
现在让我们回到我们的
SpeedySloth演示应用

00:43:32.279 --> 00:43:38.085
来看看我们我们如何
从iPhone开始我们的建设

00:43:44.858 --> 00:43:45.726
所以

00:43:47.761 --> 00:43:50.864
让我们看看iPhone模拟器

00:43:50.931 --> 00:43:52.466
我将要创建健康应用

00:43:53.367 --> 00:43:55.636
这里我有iPhone版本

00:43:55.702 --> 00:43:57.571
的SpeedySloth应用

00:43:58.038 --> 00:43:59.373
我要启动它

00:43:59.439 --> 00:44:01.208
你可以看到用户界面

00:44:01.275 --> 00:44:04.611
和手表上的非常相似

00:44:05.612 --> 00:44:09.650
我们的用户界面可以让你

00:44:09.716 --> 00:44:12.553
选择活动类型和位置类型

00:44:12.619 --> 00:44:16.323
我们还有一个Start按钮
现在没有任何功能

00:44:17.391 --> 00:44:20.761
所以我们看看代码

00:44:20.827 --> 00:44:24.264
来看看我们如何实现该方法

00:44:25.532 --> 00:44:30.337
我要切换到iPhone应用的代码

00:44:30.704 --> 00:44:34.808
我有一个配置视图控制器

00:44:35.075 --> 00:44:38.178
这个类负责处理我们
刚刚看到的界面

00:44:38.712 --> 00:44:40.380
在didTapStart按钮中

00:44:40.881 --> 00:44:44.618
我们要实现我们的方法

00:44:47.087 --> 00:44:51.859
首先 我们要创建
workoutConfiguration对象

00:44:52.192 --> 00:44:54.294
使用选择的
活动类型和位置类型

00:44:54.361 --> 00:44:58.999
这和在手表应用上的代码一样

00:45:00.767 --> 00:45:05.205
下一步 我们要获取
workoutViewController

00:45:05.272 --> 00:45:06.740
为了storyboard

00:45:06.807 --> 00:45:11.411
在健身持续期间
我们要展示这个UI

00:45:13.881 --> 00:45:16.583
我们要设置
workoutViewController的属性

00:45:16.650 --> 00:45:19.853
为了传入我们创建的
workoutConfiguration

00:45:20.587 --> 00:45:24.992
最终 我们要展示用户界面

00:45:26.360 --> 00:45:29.296
让我们看看
workoutViewController的代码

00:45:29.363 --> 00:45:31.932
看看它在做什么

00:45:34.201 --> 00:45:37.804
在viewDidLoad方法中
我们看到我们做的第一件事

00:45:37.871 --> 00:45:40.007
是初始化手表连接

00:45:40.073 --> 00:45:43.510
只需要获取WatchConnectivity
这个会话

00:45:43.577 --> 00:45:45.312
并确保它已经初始化

00:45:47.481 --> 00:45:51.752
然后 我们要调用
startWatchApp函数

00:45:54.221 --> 00:45:55.756
startWatchApp函数...

00:45:58.258 --> 00:46:01.595
会首先检查我们是否有有效的
workoutConfiguration

00:46:02.329 --> 00:46:05.032
当我们有有效的
WatchConnectivity会话后

00:46:05.966 --> 00:46:08.569
这是和在幻灯片中一样的代码

00:46:08.635 --> 00:46:11.371
我们首先检查连接周期

00:46:11.438 --> 00:46:14.508
被激活 以及手表应用已经安装

00:46:16.243 --> 00:46:18.212
最终 我们要调用

00:46:18.278 --> 00:46:21.148
startWatchApp
使用workoutConfiguration

00:46:22.182 --> 00:46:27.020
很棒 现在我们要进入
WatchKit扩展

00:46:27.087 --> 00:46:30.891
来确保我们能获取到
workoutConfiguration对象

00:46:31.258 --> 00:46:34.595
所以 我们要进入锻炼——

00:46:34.895 --> 00:46:37.965
进入手表应用的
ExtensionDelegate

00:46:40.400 --> 00:46:43.871
并使用同样的代码来处理
workoutConfiguration

00:46:44.638 --> 00:46:48.275
当我们进行这一操作时
我们需要封装workoutConfiguration

00:46:48.342 --> 00:46:53.747
在一个上下文对象中 并传入
Workout InterfaceController

00:46:53.814 --> 00:46:56.817
这个用户界面与

00:46:56.884 --> 00:47:00.821
我们每次在手表上启动锻炼
时所展示的一样

00:47:04.057 --> 00:47:09.830
还有一件事

00:47:12.332 --> 00:47:15.536
如果我们进入
Workout InterfaceController

00:47:16.403 --> 00:47:18.172
每当一个应用

00:47:18.972 --> 00:47:21.975
让我们看看 每当
一个活动的锻炼周期状态改变时

00:47:22.309 --> 00:47:25.646
我们要调用这个
updateState函数

00:47:25.913 --> 00:47:28.582
这个函数我们已经实现了

00:47:29.016 --> 00:47:33.287
在我们的代码中
它只是获取周期的目前状态

00:47:33.353 --> 00:47:35.789
并通过WatchConnectivity发送

00:47:35.856 --> 00:47:37.758
给iPhone应用

00:47:39.793 --> 00:47:44.031
所以 现在让我们切换到
iPhone应用中的代码

00:47:47.668 --> 00:47:48.635
并看一看

00:47:54.007 --> 00:47:54.908
在这里

00:47:54.975 --> 00:47:59.012
我们要选择室外步行锻炼

00:47:59.613 --> 00:48:03.217
当我点击Start按钮时
你可以看到锻炼周期已经开始

00:48:03.283 --> 00:48:05.052
如果你回到手表模拟器

00:48:05.118 --> 00:48:08.722
你可以看到应用启动

00:48:09.890 --> 00:48:12.059
回到iPhone应用
你可以看到现在

00:48:12.492 --> 00:48:14.361
它处在运行状态
如果你不想这样

00:48:14.428 --> 00:48:17.464
我就可以将锻炼周期暂停

00:48:18.365 --> 00:48:20.801
你就可以看到另一端
的状态已经更新

00:48:21.401 --> 00:48:23.237
而后我们就可以将其终止了

00:48:23.570 --> 00:48:28.141
现在在另一端锻炼状态也已经改变

00:48:37.818 --> 00:48:40.787
回放刚才所说
我们展示了你如何可以

00:48:42.489 --> 00:48:45.259
在iPhone应用中写点代码

00:48:45.325 --> 00:48:49.496
来让你的手表进入锻炼状态

00:48:49.563 --> 00:48:53.901
任何时候用户都不需要
操作手表

00:48:57.971 --> 00:49:00.407
现在 让我们聊聊最基本的实践

00:49:00.474 --> 00:49:05.479
我们希望你能在开发锻炼应用时
能遵守以下几点

00:49:09.016 --> 00:49:12.252
第一就是我们想让你确保

00:49:12.319 --> 00:49:16.223
你的手表应用依然可以运行

00:49:16.290 --> 00:49:21.895
当你的手表与iPhone失联时

00:49:24.031 --> 00:49:27.434
比如 一个用户可能希望

00:49:27.935 --> 00:49:30.204
启动一次锻炼周期

00:49:30.938 --> 00:49:34.575
并离开住处 出去跑步
不带着iPhone

00:49:35.676 --> 00:49:40.347
在这种情况下
我们不希望你停止锻炼

00:49:43.684 --> 00:49:50.290
所以 你要做的第一件事就是
让你的锻炼周期处于活动状态

00:49:50.958 --> 00:49:54.962
及时你与iPhone失去连接

00:49:58.398 --> 00:50:01.068
在这种情况下的另一个
很有趣的点是

00:50:01.134 --> 00:50:03.704
你可以使用HealthKit路程

00:50:03.770 --> 00:50:08.275
因为HealthKit可以生成
路程样本

00:50:08.342 --> 00:50:11.645
即使没有GPS

00:50:16.350 --> 00:50:18.752
还有 我们说过

00:50:20.487 --> 00:50:24.591
你的用户可以开始健身

00:50:24.658 --> 00:50:28.128
从他们的iPhone或
Apple Watch

00:50:29.496 --> 00:50:32.766
我建议你让用户来选择

00:50:33.166 --> 00:50:36.336
到底是想从哪个设备开始锻炼

00:50:41.074 --> 00:50:46.613
还有一些其他建议
包括展示历史锻炼

00:50:48.048 --> 00:50:51.385
如果你这么做
展示所有来源的锻炼

00:50:51.451 --> 00:50:53.487
不但会帮助你自己的应用

00:50:54.454 --> 00:50:57.357
我们还想让你展示

00:50:57.424 --> 00:50:59.393
其他应用生成的锻炼

00:51:02.462 --> 00:51:07.868
如果你这么做
不要忘了观察被删除的对象

00:51:08.836 --> 00:51:11.738
不要展示一些锻炼

00:51:11.805 --> 00:51:14.241
而它们已经从HealthKit
数据库中移除

00:51:18.345 --> 00:51:22.516
所以 总结今天的展示
我们想让你学到三件事

00:51:22.583 --> 00:51:24.685
从今天的展示中

00:51:25.953 --> 00:51:28.589
第一 我们学习了后台运行

00:51:28.655 --> 00:51:33.160
这是一个很好的方法
来让你的应用

00:51:33.460 --> 00:51:35.162
不停地更新

00:51:35.629 --> 00:51:40.801
还要让你的用户界面有反馈性

00:51:44.505 --> 00:51:47.541
第二 你学到了你可以贡献

00:51:47.608 --> 00:51:52.012
到活动环
通过向锻炼添加样本

00:51:52.913 --> 00:51:57.117
不论是在手表还是
在iPhone应用上

00:52:00.120 --> 00:52:04.625
最终 第三点
我们学到了你如何可以开始锻炼

00:52:04.691 --> 00:52:08.161
从手表或是iPhone中

00:52:10.264 --> 00:52:14.268
所以我们希望大家可以
回到家或是办公室

00:52:14.735 --> 00:52:18.205
看看你的代码
并应用上今天所学到的

00:52:18.272 --> 00:52:21.375
来实现你的应用中的很棒的功能

00:52:23.610 --> 00:52:26.313
如需更多信息
你可以访问这个网站

00:52:26.380 --> 00:52:28.715
你可以找到这次展示的视频

00:52:30.651 --> 00:52:32.052
我们还有其他关联的视频

00:52:32.119 --> 00:52:35.289
一个是HealthKit做的
另一个是Core Motion做的

00:52:35.355 --> 00:52:37.691
如果你错过这些展示
你可以上网观看

00:52:38.125 --> 00:52:43.197
还有些几年前的视频
也与今天的主题相关

00:52:45.199 --> 00:52:46.400
这就是今天的全部了

00:52:46.733 --> 00:52:47.801
感谢大家

00:52:47.868 --> 00:52:49.036
祝大家今天过得愉快