00:00:19.820 --> 00:00:23.957
Apple Watch的游戏技术

00:00:28.061 --> 00:00:31.732
下午好 欢迎来到
Apple Watch的游戏技术

00:00:32.198 --> 00:00:34.434
我希望你们有一次美妙的 WWDC

00:00:34.501 --> 00:00:37.871
而且和我一样对新技术感到兴奋

00:00:39.506 --> 00:00:43.177
iOS上的游戏抓住了用户的想象力

00:00:43.777 --> 00:00:45.546
作为一个长时间的游戏者

00:00:45.612 --> 00:00:49.650
我玩过很多游戏
是由像你们这样的开发者创造的

00:00:51.118 --> 00:00:55.689
听说Apple Watch游戏
的潜力激起了你们的兴趣

00:00:56.256 --> 00:01:00.928
所以今天我们很高兴能够
展示watchOS 3的游戏

00:01:03.430 --> 00:01:07.100
本场演讲涉及你开发一个优秀
游戏所需要的所有方面

00:01:07.167 --> 00:01:08.836
在这个最个人化的设备上

00:01:09.736 --> 00:01:13.207
我们首先会向你展示怎么使用
Apple Watch的多种输入

00:01:13.273 --> 00:01:15.108
并向用户提供反馈

00:01:16.476 --> 00:01:18.478
我们将向你介绍我们的框架

00:01:18.545 --> 00:01:21.315
允许你创造醒目的2D和3D视觉效果

00:01:22.182 --> 00:01:24.451
我们还会展示怎么集成社交游戏

00:01:24.518 --> 00:01:26.453
和多玩家进入你的应用

00:01:26.854 --> 00:01:27.788
最后

00:01:28.121 --> 00:01:31.024
我们会展示所有开发过程中可以
用到的工具

00:01:31.091 --> 00:01:33.060
和一些最佳做法

00:01:34.928 --> 00:01:38.232
watchOS提供一套丰富的工具来
帮助你开始

00:01:39.032 --> 00:01:41.235
这包括你可能熟悉的一些东西

00:01:41.301 --> 00:01:43.670
比如WatchKit和丰富通知

00:01:44.872 --> 00:01:47.674
今天我们会聚焦在新特性上

00:01:49.543 --> 00:01:52.079
在WatchKit中我们提供新界面

00:01:52.346 --> 00:01:55.482
这允许你在Xcode中
用Interface Builder创建游戏

00:01:56.083 --> 00:01:58.852
现可在Digital Crown中
使用手势识别

00:01:58.919 --> 00:02:00.821
来对游戏进行精确操作

00:02:01.822 --> 00:02:03.657
还有触真体验反馈

00:02:03.724 --> 00:02:05.626
是一个很好的方式使你的体验

00:02:05.692 --> 00:02:07.461
更个人化和拟真

00:02:09.729 --> 00:02:10.997
SpriteKit和
SceneKit

00:02:11.064 --> 00:02:14.501
是两个框架用来让你创造更丰富
的视觉效果来取悦你的用户

00:02:14.601 --> 00:02:16.637
它们提供地方来添加音频

00:02:16.703 --> 00:02:19.506
并形成一个简单的基础
你可以在之上创建你的游戏

00:02:21.175 --> 00:02:24.878
Game Center提供API
来添加社交功能

00:02:24.945 --> 00:02:29.383
给你的游戏 包括成就 排行榜和
多人游戏

00:02:30.984 --> 00:02:34.154
但是现在让我用一个例子来展示
什么是可能的

00:02:35.522 --> 00:02:39.092
这是用我们的3D框架
SceneKit创建的一个游戏

00:02:39.960 --> 00:02:42.629
最开始你有一个组合含有不同
形状的块

00:02:44.164 --> 00:02:47.501
你的目标是旋转他们直到它们
形成一个熟悉的轮廓

00:02:48.569 --> 00:02:50.137
让我们看一会

00:02:54.942 --> 00:02:58.078
现在玩家嬴了
我们会再玩一轮

00:02:58.145 --> 00:03:00.581
我会稍微说说这里发生了什么

00:03:03.450 --> 00:03:07.454
我们用平移手势来控制左右旋转

00:03:07.988 --> 00:03:11.425
当它在同一平面时我们会
使用Digital Crown

00:03:11.692 --> 00:03:13.327
来旋转它到合适的位置来获胜

00:03:17.764 --> 00:03:20.033
现我们介绍了
Apple Watch的游戏

00:03:20.100 --> 00:03:23.170
并且展示了一个样本
让我们深入看看如何使你的游戏

00:03:23.237 --> 00:03:25.639
用更自然的方式和用户互动

00:03:27.374 --> 00:03:30.644
Apple Watch
是我们最私人的设备

00:03:31.111 --> 00:03:35.449
我们通常近距离使用它
通常用一根手指触摸屏幕

00:03:35.516 --> 00:03:36.783
或者旋转表冠

00:03:37.384 --> 00:03:39.453
你可以从加速仪中读到移动

00:03:39.820 --> 00:03:42.189
或者你可以用触真体验引擎让它震动

00:03:43.090 --> 00:03:46.059
当一起使用时
这创造一种感觉

00:03:46.126 --> 00:03:48.195
你在使用一个实体设备

00:03:48.262 --> 00:03:51.665
这种操作和回应是有形的

00:03:54.034 --> 00:03:55.269
让我们从触摸开始

00:03:55.669 --> 00:03:59.106
在watchOS 3中
我们提供四种手势

00:03:59.173 --> 00:04:01.675
对游戏的不同互动工作良好

00:04:01.742 --> 00:04:03.610
我会一个个介绍它们

00:04:05.279 --> 00:04:06.713
点击是最简单的

00:04:07.281 --> 00:04:09.950
你触摸屏幕 你可以选择一个目标

00:04:10.017 --> 00:04:11.652
或者移动到一个位置

00:04:13.220 --> 00:04:18.257
平移适用于滚动和在给定方向上的
移动

00:04:21.060 --> 00:04:23.897
想要浏览到另一个屏幕可以使用
滑动

00:04:24.231 --> 00:04:28.368
比如你的装备菜单
你可以往回滑动来退出

00:04:31.104 --> 00:04:36.276
长按是访问游戏主菜单的推荐方法

00:04:36.443 --> 00:04:38.846
在这你可以提供选项比如退出

00:04:38.912 --> 00:04:41.081
继续或者显示
Game Center统计

00:04:44.184 --> 00:04:46.920
现在我们展示了四种手势的例子

00:04:46.987 --> 00:04:50.190
让我们谈谈我们提供给你来使用
它们的类

00:04:50.524 --> 00:04:54.261
对于点击 我们提供
WKTapGestureRecognizer

00:04:55.095 --> 00:04:58.098
对于平移WKPanGestureRecognizer

00:04:59.032 --> 00:05:03.670
对滑动和长按是类似的

00:05:07.508 --> 00:05:10.210
这些手势在Interface
Builder中可用

00:05:10.577 --> 00:05:12.613
当你进入对象库

00:05:12.679 --> 00:05:15.182
并且搜索手势
你会找到它们

00:05:16.216 --> 00:05:18.585
如果你选择一个
你可以把它加入你的事件

00:05:18.652 --> 00:05:22.322
在我们的例子中
我们加入了点击 滑动和平移

00:05:24.625 --> 00:05:27.361
这些手势有多种选项可以配置

00:05:27.427 --> 00:05:31.265
比如使它成为向右滑动
或向左 向上 向下

00:05:32.232 --> 00:05:34.935
这些其他选项配置多种行为

00:05:35.602 --> 00:05:40.607
如果你使用多种手势
你应该看一下最后这个选项

00:05:40.674 --> 00:05:42.976
因为指定优先级很重要

00:05:43.243 --> 00:05:45.145
因为手势可能冲突

00:05:46.480 --> 00:05:47.981
我说的冲突是什么意思？

00:05:48.048 --> 00:05:50.150
一个右滑动

00:05:51.185 --> 00:05:54.488
也可以被认为是一个点击再加
一个平移

00:05:55.722 --> 00:06:00.093
所以开发者需要决定谁有
优先级

00:06:00.761 --> 00:06:04.164
在游戏中一个点击和平移

00:06:04.231 --> 00:06:07.100
表示直接和你的游戏世界进行的互动

00:06:08.235 --> 00:06:11.238
我们应该让它们比滑动有更高的优先级

00:06:11.305 --> 00:06:13.040
这会使你进入装备

00:06:14.174 --> 00:06:18.545
回到Interface Builder
你配置这个必须首先失败域

00:06:18.946 --> 00:06:20.347
在滑动手势中

00:06:20.747 --> 00:06:24.218
你设置点击和平移
这反映优先级

00:06:27.487 --> 00:06:30.557
现在我们给storyboard
进入了手势

00:06:30.858 --> 00:06:32.960
你需要实现一个行动方法

00:06:33.560 --> 00:06:36.263
这个行动方法获得相应的类

00:06:38.065 --> 00:06:40.133
有很多可以读取的属性

00:06:40.300 --> 00:06:42.803
比如在对象中的位置和对象边界

00:06:43.203 --> 00:06:44.571
还有最后这个 状态

00:06:45.405 --> 00:06:48.842
我认为最好用一个代码来展示它

00:06:49.543 --> 00:06:54.448
所以在那个我演示了的解迷应用中
我们有一个handlePan行动

00:06:54.848 --> 00:06:58.719
我们做的第一件事是我们获得
位置和边界

00:06:59.219 --> 00:07:02.656
然后我们查看状态
如果我们已经开始了平移

00:07:03.156 --> 00:07:04.691
我们要设置旋转

00:07:05.726 --> 00:07:10.163
如果我们在一次平移中间
无论它改变 结束 取消

00:07:10.230 --> 00:07:11.098
我们都要更新它

00:07:13.934 --> 00:07:17.104
我想用一些需要考虑的事做为
手势这部分的结尾

00:07:17.971 --> 00:07:20.541
因为用户戴着Apple Watch

00:07:20.607 --> 00:07:24.978
每个手势都要用到两只手
所以最好使它们很短

00:07:26.180 --> 00:07:30.184
还有一个需要注意的重点是
和其他设备相比

00:07:30.651 --> 00:07:33.320
你的手指和屏幕相比相对较大

00:07:33.987 --> 00:07:35.689
请考虑到这点

00:07:35.756 --> 00:07:39.092
并确保当你互动时内容还是可见的

00:07:40.294 --> 00:07:44.731
最后你知道的
我们的用户界面指南

00:07:45.499 --> 00:07:48.735
它推荐我们使手势容易发现

00:07:48.936 --> 00:07:50.370
你应该遵守这些

00:07:53.607 --> 00:07:56.543
现在你们中的很多人可能对手势
熟悉

00:07:56.610 --> 00:07:59.780
但是我们谈谈一些
Apple Watch特有的东西

00:07:59.847 --> 00:08:01.448
即Digital Crown

00:08:03.250 --> 00:08:06.787
界面指南说它便于选择和滚动

00:08:07.654 --> 00:08:11.291
但是做为玩家 这使我们回到街机

00:08:11.358 --> 00:08:16.029
有一个转盘可以转动来旋转宇宙
飞船或移动一个踏板

00:08:16.897 --> 00:08:21.735
或者在这个例子中
我们可以来回移动一个球

00:08:22.870 --> 00:08:24.771
直到我们决定我们想把它放在哪

00:08:25.305 --> 00:08:28.342
当我们准备好时
我们可以点击来让它落到指定位置

00:08:30.644 --> 00:08:32.712
利用这个表冠相当容易

00:08:33.013 --> 00:08:37.017
你访问crownSequencer
它在你的主界面类中可用

00:08:37.618 --> 00:08:39.318
有一些属性你可以读取

00:08:44.591 --> 00:08:47.294
比如每秒旋转数或者我们是否空闲

00:08:47.528 --> 00:08:50.330
或者你可以定义一个委托

00:08:51.031 --> 00:08:53.133
这个委托提供两个方法

00:08:53.800 --> 00:08:56.570
CrownDidRotate
获得rotationalDelta

00:08:58.205 --> 00:09:01.341
rotationalDelta
表示表冠的改变

00:09:01.408 --> 00:09:03.110
从这个方法最后一次被调用起的改变

00:09:03.177 --> 00:09:08.048
如果它正远离你 该值为正
如果它正接近你 该值为负

00:09:08.115 --> 00:09:12.019
不论Apple Watch是在
左手还是右手都是这样

00:09:13.554 --> 00:09:18.258
当表冠停止旋转时
调用crownDidBecomeIdle

00:09:19.993 --> 00:09:23.530
扼要复述一下 我们认为
Digital Crown有利于游戏

00:09:23.764 --> 00:09:25.265
而且很容易采用

00:09:25.532 --> 00:09:28.502
我等不及看到你们能创造什么新
游戏

00:09:28.569 --> 00:09:30.304
用这种新的控制

00:09:32.940 --> 00:09:37.678
现在加速仪可以用来增加其他互动

00:09:37.744 --> 00:09:39.980
比如给弹球游戏添加倾斜

00:09:40.881 --> 00:09:43.350
或者给台球游戏添加旋转

00:09:45.452 --> 00:09:48.622
你通过CMMotionManager
访问加速仪

00:09:49.823 --> 00:09:51.825
这里有一些要考虑的

00:09:52.125 --> 00:09:54.328
你可能知道

00:09:55.229 --> 00:09:58.565
当你抬起watch屏幕是可见的

00:09:58.632 --> 00:10:01.802
但是当你放下手臂时屏幕变成空白

00:10:02.603 --> 00:10:05.639
当这发生时会把应用放入后台

00:10:06.340 --> 00:10:09.943
所以你移动手腕的话屏幕可能变
空白

00:10:10.310 --> 00:10:12.679
所以在游戏中你要考虑到这点

00:10:12.746 --> 00:10:16.350
一个建议是使用后台处理

00:10:17.217 --> 00:10:22.322
你可以调用NSProcessInfo中的
performExpiringActivityWithReason

00:10:23.724 --> 00:10:26.360
来给你的游戏循环一些时间来继续

00:10:26.426 --> 00:10:29.129
并给你的用户一个平滑的体验

00:10:31.632 --> 00:10:34.101
让我们用一个例子看看怎么在代码
中使用它

00:10:36.937 --> 00:10:40.741
我们首先要访问
CMMotionManager单例

00:10:41.175 --> 00:10:43.443
我们在这把它设为一个属性
来稍后使用它

00:10:44.278 --> 00:10:48.949
在主界面的willActivate
我们询问是否加速仪可见

00:10:51.051 --> 00:10:54.454
如果可见我们配置一些事
比如更新间隔

00:10:54.955 --> 00:10:58.525
我们要求motionManager
开始发送更新事件

00:10:58.892 --> 00:11:01.628
我们提供一块代码来接收这些
事件

00:11:02.162 --> 00:11:05.365
我们可以把它发送回我们的游戏
给用户提供反馈

00:11:06.800 --> 00:11:11.205
当我们结束时我们应该告诉
motionManager停止发送更新

00:11:11.271 --> 00:11:12.840
这样可以保存电池寿命

00:11:16.243 --> 00:11:17.344
让我们回顾一下

00:11:17.411 --> 00:11:20.814
我们觉得加速仪可以很好地
增加其他互动

00:11:21.315 --> 00:11:25.252
请注意屏幕有可能变空白
所以考虑使用后台处理

00:11:26.353 --> 00:11:29.323
并确保在需要时使用它

00:11:29.423 --> 00:11:31.491
并在完成后停止监听

00:11:33.627 --> 00:11:35.362
让我们来看看触真体验技术

00:11:36.463 --> 00:11:40.367
在iOS上你只能让你的设备震动

00:11:41.635 --> 00:11:45.005
在Apple Watch上你可以
创造更私人的体验

00:11:45.072 --> 00:11:47.341
通过使用不同的触真体验模式

00:11:48.509 --> 00:11:52.846
每种触真体验包含一个震动
和短音频

00:11:53.580 --> 00:11:55.682
通过使用触觉和听觉

00:11:56.183 --> 00:11:58.185
加上屏幕上的视觉线索

00:11:59.386 --> 00:12:04.157
你可以创造更拟真更有趣的游戏
体验

00:12:05.526 --> 00:12:07.995
我们提供九种触真体验反馈

00:12:08.161 --> 00:12:11.398
我想通过一些例子来讲解在你的
游戏中可以怎么使用它

00:12:13.967 --> 00:12:15.636
这是通知触真体验

00:12:16.603 --> 00:12:20.707
这个品红色的三角形表示触真体验
震动的时间

00:12:21.542 --> 00:12:25.646
这个波形表示和它一起播放的
音频声音

00:12:25.913 --> 00:12:27.147
让我们听听它

00:12:30.317 --> 00:12:31.618
如这个例子所示

00:12:31.685 --> 00:12:34.288
通知触真体验对警告人们很好

00:12:34.354 --> 00:12:36.089
当重要的事发生时

00:12:36.156 --> 00:12:37.658
需要他们的注意

00:12:37.858 --> 00:12:41.261
如果你采用丰富通知那么你可以免费
得到它

00:12:41.328 --> 00:12:43.897
但是如果你在游戏中探索世界

00:12:44.331 --> 00:12:48.569
你可以用它告诉你的玩家
你的村庄被攻击了

00:12:51.138 --> 00:12:53.941
方向触真体验 上和下

00:12:54.308 --> 00:12:57.077
被用来警告用户
当一个重要值增加

00:12:57.144 --> 00:12:58.579
或减少且数量显著时

00:12:59.313 --> 00:13:00.414
在这个例子中

00:13:02.449 --> 00:13:03.350
你的健康值很低

00:13:04.284 --> 00:13:05.953
或者当你喝健康药剂

00:13:08.021 --> 00:13:08.856
你感到好一些

00:13:11.825 --> 00:13:14.161
还有一个声音是开始一个行动

00:13:14.494 --> 00:13:15.963
比如开始一次竞速

00:13:19.199 --> 00:13:21.101
或者当你想暂停时

00:13:26.540 --> 00:13:29.109
成功触真体验提供确认音调

00:13:29.643 --> 00:13:31.311
这可以用在

00:13:32.579 --> 00:13:33.480
你赢了

00:13:36.049 --> 00:13:38.752
或者你失败了
请再试一次

00:13:40.687 --> 00:13:44.091
最后一个例子
有一个很微妙的点击触真体验

00:13:44.691 --> 00:13:46.193
这种触真体验有一点特殊

00:13:46.793 --> 00:13:50.364
如你所见 它比其他的更小声更短

00:13:50.831 --> 00:13:54.568
实际上 我不确定你是否能听到
音频但是让我们试试

00:13:59.473 --> 00:14:01.074
这种触真体验提供感觉

00:14:01.141 --> 00:14:04.011
在一个指定的增量或
间隔点击拨号的感觉

00:14:05.245 --> 00:14:09.049
在游戏中可以用在开一个箱子的
锁

00:14:09.183 --> 00:14:12.219
或者给用户提供反馈
他们撞上了障碍

00:14:15.689 --> 00:14:17.324
现在我已经给出了一些例子

00:14:17.524 --> 00:14:20.761
我想要指出要采用这些触真体验事件
很容易

00:14:20.827 --> 00:14:24.331
你调用play函数然后传递定量

00:14:24.398 --> 00:14:27.634
指定你想要的种类
以及你想要唤起的感觉

00:14:30.938 --> 00:14:33.574
让我用一些要注意的事
以结束触真体验的演讲

00:14:34.508 --> 00:14:37.044
Taptic Engine
和传统的音频不同

00:14:37.644 --> 00:14:39.980
传统音频中你你一次只能播放
一个触真体验

00:14:42.816 --> 00:14:47.821
还要注意这些效果是用来为重要
事件引起注意

00:14:48.522 --> 00:14:50.157
他们的有效性会减少

00:14:51.391 --> 00:14:53.894
如果你不断震动watch

00:14:54.528 --> 00:14:56.230
所以请有节制的使用它

00:14:56.530 --> 00:14:59.066
我认为你们会有很棒的体验

00:15:01.168 --> 00:15:03.837
让我们回顾一下
我们讨论了手势识别

00:15:03.904 --> 00:15:05.706
和把它们用在游戏中的一些想法

00:15:06.273 --> 00:15:08.175
我们展示了如果使用表冠

00:15:08.242 --> 00:15:09.977
来创造引人注目的游戏

00:15:10.811 --> 00:15:13.780
我们讨论了如果把加速仪包含到
你的应用中

00:15:14.214 --> 00:15:16.617
最后我们讨论了触真体验反馈

00:15:16.783 --> 00:15:18.318
使你的游戏更拟真

00:15:19.419 --> 00:15:21.588
现在我想交给Fatima

00:15:21.688 --> 00:15:23.991
来谈谈我们的图形框架
谢谢

00:15:31.698 --> 00:15:32.633
谢谢Christy

00:15:34.501 --> 00:15:36.170
嘿大家好我叫Fatima

00:15:36.236 --> 00:15:39.239
在这部分我们要谈谈我们的
图形框架

00:15:39.306 --> 00:15:40.541
SpriteKit
和SceneKit

00:15:40.807 --> 00:15:45.913
你用来在Apple Watch开发
很酷的游戏

00:15:46.547 --> 00:15:48.549
什么是SpriteKit
和SceneKit？

00:15:48.815 --> 00:15:52.186
SpriteKit和SceneKit
是Apple的2D和3D框架

00:15:52.252 --> 00:15:53.487
针对游戏和图形

00:15:54.087 --> 00:15:55.889
你可以在游戏中用任一个框架

00:15:55.956 --> 00:15:57.791
或者把它们组合到一起

00:15:58.725 --> 00:15:59.927
它们使用起来很简单

00:15:59.993 --> 00:16:03.530
在Xcode中有很好的集成工具和
编辑器

00:16:04.298 --> 00:16:08.402
它们在macOS iOS
和tvOS上可用

00:16:08.468 --> 00:16:11.138
今年它们也在watchOS上可用了

00:16:14.007 --> 00:16:15.275
在Apple Watch上

00:16:15.642 --> 00:16:18.712
SpriteKit和
SceneKit第一次来到你身边

00:16:18.779 --> 00:16:21.081
GPU加速 实时渲染

00:16:21.815 --> 00:16:25.652
这允许你创造非常动态的内容

00:16:25.752 --> 00:16:28.088
还使你的游戏很有互动性

00:16:31.825 --> 00:16:34.027
让我们来看看一些很酷的特性

00:16:34.094 --> 00:16:35.662
你可在Apple Watch上使用

00:16:37.631 --> 00:16:39.800
让我们从动画开始

00:16:41.301 --> 00:16:44.905
你可以在SpriteKit中
用SKAction创造2D动画

00:16:45.372 --> 00:16:49.176
你可以在SceneKit中
用SDNAction创造3D动画

00:16:49.243 --> 00:16:50.844
来使你的游戏互动性好

00:16:52.412 --> 00:16:56.316
你可以用动作来移动 旋转和缩放
你的物体

00:16:56.383 --> 00:17:01.088
通过添加一个或一系列动作

00:17:01.154 --> 00:17:03.156
来创造更复杂的动画

00:17:07.895 --> 00:17:09.530
接下来我们有颗粒

00:17:10.196 --> 00:17:14.167
你在SpriteKit和
SceneKit中都可创造颗粒模拟

00:17:14.233 --> 00:17:16.069
来为游戏增加有趣的效果

00:17:18.372 --> 00:17:23.676
使用颗粒模拟你可以模拟火
雪 雨

00:17:23.743 --> 00:17:26.046
和很多很多其他有趣的效果

00:17:30.450 --> 00:17:31.752
接下来我们有物理定律

00:17:32.586 --> 00:17:35.956
SpriteKit和
SceneKit都集成了物理定律

00:17:36.023 --> 00:17:37.891
来使你的游戏更有趣

00:17:39.526 --> 00:17:41.562
你可以在对象上启用物理定律

00:17:41.628 --> 00:17:45.933
然后定义属性比如质量 速度和
摩擦力

00:17:47.601 --> 00:17:50.871
这些属性会定义你的物体如何移动

00:17:51.238 --> 00:17:55.609
他们对碰撞有什么反应
对力有什么反应 在你的模拟中

00:18:00.647 --> 00:18:01.915
接下来我们有光照

00:18:01.982 --> 00:18:04.184
你可以在游戏中加入光源

00:18:05.252 --> 00:18:07.788
光只是你场景中的另一个节点

00:18:08.322 --> 00:18:11.525
所以你可以给它添加动作来到处
移动它

00:18:12.793 --> 00:18:15.462
有一个很酷的光照的特性

00:18:15.796 --> 00:18:20.701
是你可以自动用
SKTextures生成普通映射

00:18:27.140 --> 00:18:28.475
接下来我们有摄像机

00:18:28.876 --> 00:18:32.713
SpriteKit和
SceneKit都有摄像机供你使用

00:18:32.946 --> 00:18:34.815
如果你决定使用摄像机

00:18:35.015 --> 00:18:38.619
那么你将从摄像机的位置渲染
你的场景

00:18:40.053 --> 00:18:43.423
所以摄像机是你视口的中心

00:18:45.859 --> 00:18:48.962
而摄像机就像你场景中的其他
节点一样

00:18:49.329 --> 00:18:52.566
你可以到处移动它
通过给它添加动作

00:18:56.003 --> 00:18:58.005
接下来我们有形状和文本

00:18:58.872 --> 00:19:01.842
文本可以做为一个节点加入游戏

00:19:02.342 --> 00:19:05.145
所以现在显示文本

00:19:05.379 --> 00:19:07.915
以及在它之上应用动作和物理定律很容易

00:19:10.851 --> 00:19:12.419
我们还有形状节点

00:19:12.486 --> 00:19:16.823
你现在还可以在游戏中创建动态的
几何形状

00:19:19.493 --> 00:19:23.797
SpriteKit和
SceneKit中还有可编程着色器

00:19:23.864 --> 00:19:25.866
你可在SpriteKit中
创造着色器

00:19:26.200 --> 00:19:28.902
你可在SceneKit中
创建着色器修改器

00:19:29.570 --> 00:19:32.472
来让你的游戏元素
获得更加定制化的外观

00:19:36.009 --> 00:19:39.947
现在我们看了一些你可以使用的
很酷的特性

00:19:40.280 --> 00:19:44.518
让我们看看SpriteKit和SceneKit
在Apple Watch上有什么不同

00:19:47.855 --> 00:19:49.723
我会从SpriteKit开始

00:19:50.257 --> 00:19:52.926
在SpriteKit中
我们有SKView

00:19:53.827 --> 00:19:55.696
我们用来显示我们的场景

00:19:57.164 --> 00:19:59.399
我们的场景可以包括很多节点

00:20:01.735 --> 00:20:04.872
比如我们有SKSpriteNode
来添加精灵

00:20:05.472 --> 00:20:07.674
我们有SKLightNode
来添加光照

00:20:07.941 --> 00:20:11.044
我们有SKEmitterNode
来创建颗粒系统

00:20:12.513 --> 00:20:15.048
在watchOS上有些事不同

00:20:16.583 --> 00:20:20.020
首先我们没有SKView

00:20:20.187 --> 00:20:24.458
我们不得不用WKInterfaceSKScene
来显示我们的场景

00:20:28.529 --> 00:20:32.566
我们也没有CIFilters
但是我们能达到相同的效果

00:20:32.666 --> 00:20:34.268
使用SKShader

00:20:37.070 --> 00:20:39.973
我们没有可定位音频
但是我们可以播放声音

00:20:40.040 --> 00:20:44.511
就像其他平台用
SKAction playSound

00:20:47.114 --> 00:20:50.450
最后我们没有SKVideoNode

00:20:50.517 --> 00:20:55.122
但可用WKInterfaceMovie
来播放视频

00:21:00.027 --> 00:21:03.130
这张表总结了
SpriteKit的不同

00:21:03.764 --> 00:21:06.366
对SceneKit
我们几乎有一样的区别

00:21:06.633 --> 00:21:11.038
我们有WKInterfaceSCNScene
代替SCNView

00:21:12.806 --> 00:21:16.310
我们没有可定位的音频但是我们有
标准音频

00:21:17.177 --> 00:21:19.446
我们无法访问CIFilters

00:21:19.646 --> 00:21:23.483
但是我们可以用着色器修改器来
实现相同功能

00:21:25.886 --> 00:21:30.490
所以让我们用一些例子来看看
为Apple Watch开发游戏

00:21:30.757 --> 00:21:33.026
为一个已有的iOS游戏

00:21:37.464 --> 00:21:41.235
在这我用iOS上的
SpriteKit模板

00:21:43.170 --> 00:21:45.806
在左边我可以看到项目的文件

00:21:46.139 --> 00:21:48.208
我们可以看看游戏场景

00:21:49.076 --> 00:21:52.212
我们在这可以看到我们用了一个
很简单的场景

00:21:55.782 --> 00:21:58.552
还可以看看
GameViewController

00:22:01.622 --> 00:22:06.159
在这我们可以看到我们用SKView
来显示我们的场景

00:22:08.362 --> 00:22:10.697
现创建一个针对
Apple Watch的游戏

00:22:10.764 --> 00:22:13.767
我们要做的就是点击文件
新目标

00:22:16.737 --> 00:22:19.706
选择watchOS下的游戏应用模板

00:22:23.243 --> 00:22:25.312
给它一个名字然后点击完成

00:22:28.048 --> 00:22:30.717
这个模板为我们创建了两个文件夹

00:22:32.386 --> 00:22:35.222
应用文件夹包括
我们的storyboard

00:22:36.323 --> 00:22:40.127
和扩展文件夹含有
我们的InterfaceController

00:22:40.194 --> 00:22:41.328
和我们的游戏场景

00:22:44.464 --> 00:22:47.000
让我们看看storyboard

00:22:48.168 --> 00:22:50.470
这是storyboard
我们可以看到

00:22:50.604 --> 00:22:52.940
在中间我们有我们的界面对象

00:22:53.707 --> 00:22:57.144
我们的界面对象在我们的对象库
中被选择

00:22:57.978 --> 00:23:00.113
在这我们可以看到我们有选项

00:23:00.380 --> 00:23:04.218
在选择SceneKit场景
显示SceneKit内容

00:23:04.384 --> 00:23:07.588
和SpriteKit场景显示
SpriteKit内容间

00:23:10.791 --> 00:23:16.163
我们的界面对象还有一个在界面
控制器中定义的出口

00:23:16.230 --> 00:23:18.298
我们可以用它来显示我们的场景

00:23:19.132 --> 00:23:20.701
让我们来看看它

00:23:23.637 --> 00:23:25.539
这就是那个界面控制器

00:23:27.274 --> 00:23:29.576
让我们来仔细看看它的代码

00:23:31.111 --> 00:23:34.615
在这我们看到我们的界面对象

00:23:35.782 --> 00:23:39.453
在唤醒 有语境中我们可以看到
我们在载入场景

00:23:39.520 --> 00:23:41.622
和iOS中做的一样

00:23:44.024 --> 00:23:46.660
最后我们使用界面对象

00:23:46.927 --> 00:23:51.164
显示我们的场景
就像在iOS用SKView做的一样

00:23:54.601 --> 00:23:58.572
这就是你要创建一个Apple
Watch游戏所需要的全部步骤

00:23:58.639 --> 00:24:00.641
为一个已经存在的iOS游戏
在Apple Watch上创建一个游戏对象

00:24:04.778 --> 00:24:08.148
现在我将有请Christy上台
介绍社交游戏

00:24:19.793 --> 00:24:20.827
谢谢Fatima

00:24:21.662 --> 00:24:23.397
让我们谈谈Game Center

00:24:24.831 --> 00:24:28.735
如今的游戏鼓励参与

00:24:29.036 --> 00:24:30.737
和与朋友竞争

00:24:31.939 --> 00:24:35.442
Game Center
使分享成就和分数

00:24:35.576 --> 00:24:37.211
甚至是一起玩游戏变得容易

00:24:38.645 --> 00:24:43.483
关于Apple Watch多人游戏
我们会集中在回合制游戏

00:24:44.585 --> 00:24:48.722
回合制游戏和Apple Watch
非常搭配

00:24:49.389 --> 00:24:51.558
它支持短的互动

00:24:52.392 --> 00:24:55.996
我可以接受 不需要两个玩家
都在场

00:24:56.563 --> 00:25:00.701
我可以进行一轮
当我完成时我可以把它交给你

00:25:01.201 --> 00:25:02.769
你会得到一个丰富通知

00:25:03.403 --> 00:25:05.606
你可以有空时进行一轮

00:25:07.341 --> 00:25:10.143
有很多如何实现一个回合制游戏
的细节

00:25:10.210 --> 00:25:12.145
我们去年已经谈过了

00:25:13.213 --> 00:25:16.884
但是今天我们会强调什么
是Apple Watch特有的

00:25:17.751 --> 00:25:20.754
关于其他细节请看我们的资料

00:25:21.455 --> 00:25:22.956
或者观看以前的演讲

00:25:23.557 --> 00:25:26.093
我还想说一些新特性

00:25:26.159 --> 00:25:29.062
关于今早覆盖的iOS 10中的
Game Center

00:25:29.296 --> 00:25:32.733
如果你还没有看过它
我鼓励你看一下它的视频

00:25:34.902 --> 00:25:37.271
来开始创造一个回合制游戏

00:25:37.905 --> 00:25:39.373
让我们谈谈授权

00:25:40.674 --> 00:25:42.509
这比iOS简单

00:25:44.111 --> 00:25:47.881
你不需要在Apple Watch上
输入密码

00:25:48.549 --> 00:25:50.217
当你在手机上登录

00:25:50.517 --> 00:25:52.753
自动在Apple Watch上登录

00:25:54.221 --> 00:25:58.058
如果你熟悉iOS上的
Game Center

00:25:58.325 --> 00:26:01.261
你可能知道你会获得视图控制器

00:26:01.395 --> 00:26:03.630
并且在一些情况下你要显示

00:26:03.697 --> 00:26:06.667
我是说在iOS上
在Watch OS上这不是必须的

00:26:08.936 --> 00:26:10.704
让我们看看代码

00:26:12.439 --> 00:26:14.708
对你们中
不熟悉Game Center的

00:26:15.142 --> 00:26:19.279
有GKLocalPlayer单例
是我们的API的焦点

00:26:19.413 --> 00:26:22.182
在这个例子中我们发送一个授权
处理器

00:26:23.050 --> 00:26:24.284
它被调用

00:26:24.985 --> 00:26:28.722
当授权完成
无论成功失败

00:26:28.789 --> 00:26:32.860
如果你成功你可以给用户反馈他们
他们是否成功登录

00:26:33.160 --> 00:26:34.661
并且可以开始游戏

00:26:36.396 --> 00:26:40.334
现在我们授权你可以新建一个
回合制的匹配

00:26:40.968 --> 00:26:44.438
这里一个重要的决定是如何
和其他玩家匹配

00:26:45.239 --> 00:26:49.877
最简单的方法是让Game
Center为你选择其他玩家

00:26:49.943 --> 00:26:51.378
这被称为自动匹配

00:26:52.246 --> 00:26:55.649
或者你可以载入一个最近玩家列表

00:26:55.716 --> 00:26:57.384
通过程序邀请一个

00:26:58.519 --> 00:27:00.120
让我们从自动匹配开始

00:27:00.654 --> 00:27:03.190
你创建一个
GKMatchRequest

00:27:03.891 --> 00:27:05.826
你把它传递给寻找方法

00:27:06.293 --> 00:27:09.263
GKTurnBasedMatch
类的方法寻找

00:27:09.997 --> 00:27:14.701
当它返回时会给你一个新的回合制
匹配的实例

00:27:14.768 --> 00:27:17.437
你可以用来储存你的数据和玩游戏

00:27:18.105 --> 00:27:21.208
请注意这可能会是新匹配

00:27:21.441 --> 00:27:25.612
或者 若Norman创建了一个游戏
并且完成了他的回合

00:27:26.280 --> 00:27:28.749
我可能会参加他的游戏的一个空位置

00:27:28.849 --> 00:27:32.853
你的游戏需要考虑这两种情况

00:27:34.121 --> 00:27:35.322
让我们看看代码

00:27:36.957 --> 00:27:38.825
你创建你的匹配请求

00:27:39.026 --> 00:27:42.663
你设置参数像是最大玩家数量

00:27:43.096 --> 00:27:44.298
你调用查找

00:27:45.499 --> 00:27:47.501
当它成功时你可以开始游戏

00:27:48.168 --> 00:27:49.403
就是这么简单

00:27:51.338 --> 00:27:54.041
通过程序邀请几乎是一样的

00:27:54.908 --> 00:27:58.512
你只需要设置另一个参数接收者

00:27:58.579 --> 00:28:01.281
这来自你选择的玩家列表

00:28:02.950 --> 00:28:07.321
然而要这么做你需要访问你一起
玩过游戏的玩家的一份列表

00:28:08.755 --> 00:28:10.691
我会展示一些示例代码

00:28:11.725 --> 00:28:14.428
这向你展示如何访问最近玩家列表

00:28:14.561 --> 00:28:17.297
一个好的地方来
假设你有一个类

00:28:17.798 --> 00:28:20.767
有一个玩家选择器让你在列表中挑选

00:28:21.835 --> 00:28:23.370
在唤醒函数中

00:28:24.571 --> 00:28:28.509
调用localPlayer单例上的
loadRecentPlayers

00:28:29.042 --> 00:28:32.613
这假设你以前授权过你的主界面

00:28:33.447 --> 00:28:37.150
我们调用loadRecentPlayers
你得到一个玩家列表

00:28:37.217 --> 00:28:40.888
你最近和他们一起玩过

00:28:40.954 --> 00:28:45.392
在手机 平板或watch上
通过自动匹配

00:28:47.961 --> 00:28:51.565
有一件重要的需要提到的事是
一旦你转入并保存了它

00:28:51.765 --> 00:28:55.102
你需要选择你的对手

00:28:57.004 --> 00:28:59.106
为了帮助你显示玩家清单

00:28:59.173 --> 00:29:01.942
并给你开发一个回合制游戏的开始

00:29:02.676 --> 00:29:04.211
我们创建了一个应用例子

00:29:04.278 --> 00:29:07.414
HelloGameKit实现了
回合制游戏的基本功能

00:29:07.881 --> 00:29:10.317
它基于新的SpriteKit模板

00:29:10.384 --> 00:29:13.754
作为一个红利它会展示怎么使用
手势识别

00:29:14.321 --> 00:29:18.325
我想简短的介绍这个例子

00:29:19.059 --> 00:29:22.596
当你启动应用时
它显示这样一个屏幕

00:29:22.663 --> 00:29:24.231
并且说授权

00:29:25.032 --> 00:29:29.203
当授权完成时
它在顶部显示你的名字

00:29:29.469 --> 00:29:32.039
在底部给你选择对手的地方

00:29:32.773 --> 00:29:36.877
中间的计数器对你进行的各种
点击计数

00:29:36.944 --> 00:29:38.912
记录并保存到游戏模型中

00:29:38.979 --> 00:29:43.050
这是个简单的事
在回合制游戏中保存错误

00:29:43.884 --> 00:29:46.386
现在你已经点击了
在底部选择一个对手

00:29:46.787 --> 00:29:49.790
这会带来一个玩家选择器并
载入最近玩家列表

00:29:49.857 --> 00:29:50.891
让你选择其中一个

00:29:51.992 --> 00:29:55.963
它还给你选项来自动匹配
但是我想和Alan玩

00:29:57.231 --> 00:29:58.799
现在他在和我玩

00:29:59.600 --> 00:30:02.202
如果我想要访问匹配列表

00:30:02.369 --> 00:30:05.439
我可以向左滑动
我会得到匹配浏览器

00:30:05.973 --> 00:30:10.143
在这我可以创建一个新的和Alan的
匹配或者选择一个已有的游戏

00:30:10.210 --> 00:30:11.912
我将返回游戏

00:30:12.846 --> 00:30:16.617
最后我可以用长按结束我的回合

00:30:16.917 --> 00:30:19.853
会把游戏传给Alan
他可以进行他的回合

00:30:21.321 --> 00:30:23.090
这就是HelloGameKit

00:30:23.457 --> 00:30:26.593
你可以在这个网址下载它

00:30:26.894 --> 00:30:29.329
点击资源标签来找到这个例子

00:30:31.865 --> 00:30:36.904
让我们回顾一下 watchOS中的
Game Center给你授权流水线

00:30:37.905 --> 00:30:42.576
这是一个可编程API
但是我们给你了应用例子

00:30:42.643 --> 00:30:46.013
有UI包括所有你需要做的事

00:30:46.113 --> 00:30:48.182
我们希望这会给你一个好的开始

00:30:49.550 --> 00:30:50.450
有了这些

00:30:52.019 --> 00:30:55.556
我想要把讲台交给Tyler来谈谈
工具和最佳做法

00:31:00.794 --> 00:31:01.795
谢谢Christy

00:31:01.862 --> 00:31:05.098
我们已介绍了Apple Watch
可用的一些框架

00:31:05.165 --> 00:31:06.233
让我们谈谈工具

00:31:07.301 --> 00:31:09.670
你可能熟悉我们丰富的游戏工具

00:31:09.736 --> 00:31:11.471
已经存在在Xcode中

00:31:11.538 --> 00:31:14.641
我很高兴告诉你们这些工具都
对你们可用

00:31:14.708 --> 00:31:16.577
对你的Apple Watch开发

00:31:17.544 --> 00:31:20.547
这包括我们的场景编辑器
它处理在代码中设置

00:31:20.614 --> 00:31:22.749
和布局你的场景

00:31:22.816 --> 00:31:25.485
并把它移动到Xcode中
的视觉编辑器

00:31:26.186 --> 00:31:29.957
而不是不断编辑和迭代你场景
的一个位置

00:31:30.123 --> 00:31:33.427
你可以看到并控制你的节点的位置

00:31:33.994 --> 00:31:37.364
你还可以容易地控制你的场景的
层次

00:31:37.431 --> 00:31:39.366
用场景概览视图

00:31:39.600 --> 00:31:42.269
并且创建和修改节点的物理主体

00:31:42.336 --> 00:31:44.271
不需要涉及任何代码

00:31:45.672 --> 00:31:49.009
现在我们的场景编辑器还包括
一个内置的动作编辑器

00:31:49.142 --> 00:31:51.211
让你可以容易地创建 修改

00:31:51.278 --> 00:31:55.282
和预览复杂的可重用动画
就在你的关卡中

00:31:55.682 --> 00:31:59.119
所以如果你在创建一个复杂的
剧情剪辑来介绍你的关卡

00:31:59.186 --> 00:32:02.523
或者你会在你的代码中
重用的一个角色动画

00:32:02.689 --> 00:32:04.925
有了动作编辑器这都容易做到

00:32:06.493 --> 00:32:07.861
当你开发你的游戏时

00:32:07.928 --> 00:32:11.331
你会发现SpriteKit和
SceneKit强大的颗粒引擎

00:32:11.398 --> 00:32:13.934
在给你的游戏带来生命时扮演
重要的角色

00:32:14.067 --> 00:32:16.770
为你的游戏创造完美的颗粒很困难

00:32:16.837 --> 00:32:18.405
如果你无法看到它

00:32:18.472 --> 00:32:20.941
幸运的是我们提供一个灵活的工具

00:32:21.008 --> 00:32:23.076
来创建和可视化你的颗粒

00:32:23.577 --> 00:32:27.247
你被允许访问颗粒的大量属性

00:32:27.314 --> 00:32:30.450
你修改它们后就能马上看到效果

00:32:31.451 --> 00:32:34.721
我们还有工具帮你在Apple
Watch中保持优秀的性能

00:32:34.788 --> 00:32:36.456
这包括我们的纹理地图集

00:32:36.990 --> 00:32:39.359
当你把图片放入Sprite地图集

00:32:39.426 --> 00:32:41.962
我们会自动旋转并重新定位它们

00:32:42.029 --> 00:32:43.197
来形成单一的图像

00:32:43.430 --> 00:32:46.033
这减少你的游戏需要使用的绘制
调用次数

00:32:46.099 --> 00:32:49.069
还有很好的一点是不需要对你的
代码进行任何改变

00:32:49.136 --> 00:32:52.706
你还是可以在这些纹理上操作
因为它们是单独的文件

00:32:54.007 --> 00:32:55.108
当你的游戏运行时

00:32:55.175 --> 00:32:57.377
我们现在提供帧数每秒性能表

00:32:57.544 --> 00:33:00.948
在报告的顶部你获得很多实时统计

00:33:01.381 --> 00:33:03.217
包括当前的帧率

00:33:04.017 --> 00:33:07.955
以及GPU使用情况 来看看
你GPU的哪部分被使用的最多

00:33:08.856 --> 00:33:11.625
CPU和GPU的帧时间

00:33:11.859 --> 00:33:14.962
这会帮你找出性能瓶颈
是CPU或GPU

00:33:16.330 --> 00:33:20.067
除了实时统计
我们还提供时间轴历史

00:33:20.367 --> 00:33:22.669
你的CPU和GPU帧时间历史

00:33:23.170 --> 00:33:27.541
它会分解CPU帧时间到独立的
部分

00:33:27.741 --> 00:33:30.477
所以你会看到多少时间用来渲染

00:33:30.544 --> 00:33:33.614
或者运行更新循环
或者评估物理动作

00:33:33.680 --> 00:33:35.315
以及多少时间是空闲的

00:33:36.750 --> 00:33:40.120
当你的应用暂停时
你可以在历史中滚动

00:33:40.187 --> 00:33:42.823
在应用性能历史中滚动
这样你能看到它是如何

00:33:42.890 --> 00:33:44.424
随着你在游戏中的进展而发展的

00:33:45.192 --> 00:33:48.295
如果有特别感兴趣的
你可以深入

00:33:48.362 --> 00:33:51.532
并检查它的详情
并得到精确时间

00:33:54.001 --> 00:33:55.869
有一些最佳用法你可以使用

00:33:55.936 --> 00:33:58.872
来确保在Apple Watch上
获得优秀的性能

00:33:59.273 --> 00:34:02.209
一个好的减少电池使用的方法

00:34:02.276 --> 00:34:04.711
是只有需要时才更新你的场景

00:34:05.646 --> 00:34:08.549
SpriteKit和
SceneKit会自动跳过渲染

00:34:08.614 --> 00:34:10.918
如果我们侦测到你的场景中没有变化

00:34:12.085 --> 00:34:15.556
如果你有大的资源
在你场景开始时载入它们

00:34:15.621 --> 00:34:18.458
这样你就不会因为载入这些资源
经历中断

00:34:18.525 --> 00:34:20.893
你希望你的整个游戏过程流畅

00:34:21.962 --> 00:34:23.397
你需要有一个帧率的目标

00:34:23.463 --> 00:34:26.166
会提供给用户一个一致的体验

00:34:26.233 --> 00:34:30.637
通过明确设定你的界面想要的每
秒帧数来这么做

00:34:31.772 --> 00:34:34.574
如果你发现你确实面临性能问题

00:34:34.641 --> 00:34:37.043
有一些方法你可以使用来解决性能
问题

00:34:37.110 --> 00:34:41.681
首先减少任何时间你的场景显示
的颗粒数

00:34:42.549 --> 00:34:44.751
你可以试着减少资源的细节

00:34:44.818 --> 00:34:47.654
如果它们离得很远或者被大幅度
缩放了

00:34:47.721 --> 00:34:50.591
这样做的好处是你通常不会看到
任何

00:34:50.657 --> 00:34:53.460
在你的游戏视觉保真度上
因为进行这些减少而造成的改变

00:34:53.793 --> 00:34:57.030
如果你还是面临问题
减少你场景的复杂度

00:34:57.097 --> 00:35:00.434
直到你找到性能和内容的好的
平衡点

00:35:02.269 --> 00:35:04.338
你在Apple Watch上
开发游戏时

00:35:04.404 --> 00:35:06.773
你应该时刻记得一些设计考量

00:35:06.840 --> 00:35:08.108
在整个开发过程中

00:35:08.509 --> 00:35:12.880
你不应该简单地照搬iOS游戏体验

00:35:12.946 --> 00:35:15.115
我们希望你能重新思考体验

00:35:15.415 --> 00:35:18.619
Apple Watch提供的
是轻量的互动

00:35:18.685 --> 00:35:21.588
用户喜欢一眼就看到游戏的进展

00:35:21.655 --> 00:35:24.825
你应该围绕那些忙碌的人设计互动

00:35:26.026 --> 00:35:29.396
你还想要一个简明简单的界面

00:35:29.463 --> 00:35:33.500
避免显示太多信息
或者同时在屏幕上太忙

00:35:33.667 --> 00:35:36.603
你可能把互动分散到多个屏幕中

00:35:36.670 --> 00:35:38.772
这样可以最大化屏幕空间

00:35:39.673 --> 00:35:41.808
如果你有按钮或者可触摸目标

00:35:41.875 --> 00:35:45.412
让它们足够大这样你的用户可以
舒服地和它们互动

00:35:46.947 --> 00:35:50.050
你还要保持应用视觉的连续性

00:35:50.117 --> 00:35:52.819
它的意思是从一个应用进入你的

00:35:52.886 --> 00:35:54.988
应该有一致的体验

00:35:55.322 --> 00:35:58.458
它的一部分是选择一个支持
你的游戏商标的色调

00:35:58.525 --> 00:36:00.027
在整个游戏中使用

00:36:01.261 --> 00:36:05.365
我们还建议当可能时在游戏中
有一个黑色背景

00:36:05.432 --> 00:36:07.935
因为黑色会

00:36:08.001 --> 00:36:09.503
与Apple Watch面板
无缝混合

00:36:09.570 --> 00:36:12.539
创造出一个无边界的屏幕
这一美好的错觉

00:36:14.842 --> 00:36:18.512
你知道了一些Apple Watch
可用的优秀输入

00:36:18.579 --> 00:36:21.615
优秀的框架你可以用来开发游戏

00:36:21.949 --> 00:36:25.352
丰富的工具可以用在开发流程上

00:36:25.552 --> 00:36:27.921
我们等不及看到令人兴奋
和有趣的游戏

00:36:27.988 --> 00:36:30.224
你们今年将在
Apple Watch上开发

00:36:31.291 --> 00:36:33.927
想了解更多信息
请访问开发者网站

00:36:33.994 --> 00:36:36.663
你可以在演讲编号612下找到我们

00:36:37.130 --> 00:36:40.934
这周之前的演讲提供了很多有用的
信息

00:36:41.134 --> 00:36:43.203
包括“SpriteKit的新特性”

00:36:43.370 --> 00:36:46.673
Game Center中的新特性
SceneKit渲染进展

00:36:46.740 --> 00:36:48.909
watchOS快速互动技术

00:36:48.976 --> 00:36:52.446
如果你想要深入任何一个
我们今天涉及到的领域

00:36:52.513 --> 00:36:54.548
我们强烈推荐你看一看

00:36:55.182 --> 00:36:57.885
谢谢
祝各位在接下来的演讲中过得愉快