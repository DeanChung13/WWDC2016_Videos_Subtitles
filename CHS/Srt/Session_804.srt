00:00:19.453 --> 00:00:25.659 
设计出色的
Apple Watch体验

00:00:27.160 --> 00:00:28.128 
大家好

00:00:28.562 --> 00:00:29.863 
我是Mike Stern

00:00:29.930 --> 00:00:32.799 
我是Apple的用户体验推广

00:00:33.467 --> 00:00:37.871 
今天很高兴见到你们
我要谈谈Apple Watch设计

00:00:38.605 --> 00:00:42.876 
在今天的研讨会中
我们要讨论如何应用设计最佳范例

00:00:43.177 --> 00:00:46.480 
以及如何用watchOS 3新功能

00:00:46.713 --> 00:00:52.252 
来设计Apple Watch
快速、精准、愉悦的体验

00:00:53.187 --> 00:00:56.223 
但在此之前 我要先说一下基础技术

00:00:57.090 --> 00:01:01.595 
毕竟你们中有些人从来没做过
watchOS应用的设计

00:01:02.229 --> 00:01:05.364  
Apple Watch应用
有三个基本组成元素

00:01:05.766 --> 00:01:09.269  
分别是complication、
通知和应用

00:01:10.337 --> 00:01:14.842  
complication就像小工具
人们可以把它显示在表盘上

00:01:15.442 --> 00:01:18.846 
complication这个词
来自于传统的制表业

00:01:19.079 --> 00:01:24.818 
是指钟表的功能
除了显示小时和分钟以外

00:01:25.419 --> 00:01:30.390 
complication使设计、
制造 和修理手表

00:01:30.457 --> 00:01:33.360 
变得更昂贵、更复杂

00:01:33.427 --> 00:01:34.394 
可以说是名副其实

00:01:35.028 --> 00:01:38.265 
你们很幸运
complication变得简单了

00:01:38.332 --> 00:01:41.535 
在Apple Watch
的开发上也更强大了

00:01:42.603 --> 00:01:45.806 
Apple Watch上的
complication提供最快速的方法

00:01:45.873 --> 00:01:47.641 
让人们获取信息

00:01:47.708 --> 00:01:50.844 
并提供快速打开应用的方法

00:01:51.478 --> 00:01:56.650 
通知会告诉人们 重要事件
他们可能会忽视的

00:01:57.150 --> 00:01:59.086 
因为通知也是交互式的

00:01:59.152 --> 00:02:03.123 
所以它们能促进使用应用的
人们之间的交互

00:02:03.924 --> 00:02:08.961  
最后 应用可以为你的产品或
服务提供更深层次的体验

00:02:09.496 --> 00:02:14.635  
要提供complication
或创建手表专用的通知

00:02:14.701 --> 00:02:17.371  
你要先有一个应用

00:02:18.238 --> 00:02:21.675 
这三个基本组成元素是必不可少的

00:02:22.209 --> 00:02:24.678 
每个元素都起到一部分作用

00:02:24.745 --> 00:02:27.948 
在watch应用的整个用户体验中

00:02:28.448 --> 00:02:31.952 
那么 比如说
假如我用watch订了晚餐

00:02:32.452 --> 00:02:36.190 
我可能得先按一下
外卖应用的complication

00:02:36.256 --> 00:02:37.357 
打开应用

00:02:37.925 --> 00:02:40.561 
然后用应用下订单

00:02:40.627 --> 00:02:43.931 
再然后 我很可能会收到一
条通知

00:02:43.997 --> 00:02:46.867 
显示预计送达的时间

00:02:47.801 --> 00:02:49.636 
在我等待外卖送达的过程中

00:02:49.703 --> 00:02:52.239 
我会时不时查看一下
complication

00:02:52.306 --> 00:02:54.474 
看还要等多久

00:02:55.242 --> 00:02:57.578 
当订单即将送达时

00:02:58.011 --> 00:03:00.814 
我可能还会收到另一条通知

00:03:01.615 --> 00:03:05.052 
最后 如果我还没有给配送人员付小费

00:03:05.385 --> 00:03:08.689 
我可能也会收到一条通知
问我是否愿意付小费

00:03:09.590 --> 00:03:13.093  
这就是组成元素的基本功能

00:03:13.560 --> 00:03:17.865 
今天这个报告会帮助你
了解如何设计每一个组成元素

00:03:18.665 --> 00:03:20.701 
但在此之前

00:03:21.001 --> 00:03:26.974 
还有一些更基本、更根本的内容
我想和你们一起讨论

00:03:27.407 --> 00:03:29.676  
即时间的概念

00:03:30.544 --> 00:03:34.848 
Apple Watch设计巧妙
可以支持轻量级的互动

00:03:35.148 --> 00:03:37.518 
意思是人们能接收信息

00:03:37.584 --> 00:03:40.754 
并在短时间内执行

00:03:41.455 --> 00:03:43.557 
我以为这是一个显而易见的事实

00:03:43.857 --> 00:03:46.159 
但很容易被忽略

00:03:46.226 --> 00:03:50.097 
互动需要有多快 当你设计comps

00:03:50.163 --> 00:03:52.432 
或在模拟器里测试你所开发的功能时

00:03:53.066 --> 00:03:57.304 
在设计应用时 你总想

00:03:57.371 --> 00:04:01.074 
发现一种更快、更简单的用户流

00:04:01.508 --> 00:04:03.644 
总能有一种优化方法

00:04:04.244 --> 00:04:09.016  
比如 很多内嵌应用
就能很简单、很迅速地导航

00:04:09.550 --> 00:04:11.952  
以前 在你开始健身之前 你要

00:04:12.019 --> 00:04:14.588  
先进入主屏幕 找到并启动应用

00:04:14.655 --> 00:04:18.192  
选择一个健身类型
再选择一个目标或重新使用

00:04:18.257 --> 00:04:21.094  
上次的目标 然后按开始

00:04:21.827 --> 00:04:24.164  
新流程就更简单了

00:04:24.565 --> 00:04:27.234  
尤其对于使用健身
complication的人来说

00:04:27.301 --> 00:04:28.802  
只需按complication

00:04:29.136 --> 00:04:30.938  
然后点开始 就可以了

00:04:31.672 --> 00:04:35.008  
现在快速启动使人们不需要在屏幕上

00:04:35.075 --> 00:04:37.744  
选择健身目标 并且移除了

00:04:37.811 --> 00:04:39.112  
独立的开始按钮

00:04:39.780 --> 00:04:43.116  
现在 绝大多数人都采用了
这样的健身方式 日复一日

00:04:43.517 --> 00:04:47.554  
所以 对这些人来说
只需要按两次就可以开始健身了

00:04:48.055 --> 00:04:50.624  
而且在健身过程中会显示UI

00:04:50.691 --> 00:04:53.894  
这个UI也被优化了
可以更快地进行交互

00:04:54.595 --> 00:04:58.165 
以前 人们要滑动七次屏幕

00:04:58.298 --> 00:05:01.835 
一是控制 一是各种健身指标

00:05:02.102 --> 00:05:06.006  
在这些屏幕之间进行跳转要花很长时间

00:05:07.374 --> 00:05:11.912  
在watchOS 3中
只有两个屏幕控制和指标

00:05:12.579 --> 00:05:16.450 
几乎不需要跳转 除非你已经完成健身

00:05:16.517 --> 00:05:17.918 
或者你想休息一下

00:05:18.385 --> 00:05:22.022 
这就让人们有时间
关注其他更重要的东西

00:05:22.089 --> 00:05:25.192 
当跑步或骑车时

00:05:25.492 --> 00:05:29.062 
更关注你的节奏、步伐和呼吸

00:05:29.997 --> 00:05:32.332 
小心汽车和行人

00:05:32.766 --> 00:05:35.235 
可以欣赏风景 并让自己看起来更酷

00:05:36.003 --> 00:05:39.206 
Apple Watch设计和
工程师团队在watchOS 3

00:05:39.273 --> 00:05:43.243 
这个版本中共同提出了三个重要主题

00:05:43.310 --> 00:05:45.579 
我觉得跟我们每个人都息息相关

00:05:46.146 --> 00:05:51.218 
这些主题都是方便查看的、
可执行的、响应式的主题

00:05:51.985 --> 00:05:56.190 
方便查看说的是信息呈现
可以立即理解

00:05:56.657 --> 00:06:00.827 
通讯必须清晰 不能受干扰

00:06:01.428 --> 00:06:05.299 
应该只显示最相关的信息

00:06:06.066 --> 00:06:09.937 
最好应用显示的信息也是可执行的

00:06:10.304 --> 00:06:14.441 
意思是鼓励人们采取物理行动来响应

00:06:14.508 --> 00:06:18.545 
你的应用所传达的
或更方便地让人们

00:06:18.612 --> 00:06:22.516 
从应用或通知中使用功能

00:06:23.350 --> 00:06:26.053 
并且应用应该是响应式的

00:06:26.320 --> 00:06:29.990 
启动时间和屏幕加载应该尽可能短

00:06:30.457 --> 00:06:33.093 
内容和数据应该总是最新的

00:06:33.460 --> 00:06:35.963 
并且UI反馈要及时

00:06:37.130 --> 00:06:40.934 
现在要让你的应用更方便查看、
可执行力更强、响应更及时

00:06:41.268 --> 00:06:46.907 
就要对watch OS中的导航模式
和核心架构进行大幅度调整

00:06:47.641 --> 00:06:51.211 
新版Dock提供一个可浏览的集合

00:06:51.278 --> 00:06:55.816 
包含他们经常使用的
具有实效性的、情景关联的时刻

00:06:56.550 --> 00:06:58.352 
Dock中的应用仍然在内存中

00:06:58.418 --> 00:07:01.321 
可定期执行后台更新

00:07:01.388 --> 00:07:06.426 
意思是能很快
从Dock导航到应用...

00:07:07.060 --> 00:07:11.431 
且人们不用花很长时间等应用更新内容

00:07:12.165 --> 00:07:13.700 
一旦打开了应用

00:07:13.767 --> 00:07:16.370 
就可以直接在各屏幕之间跳转

00:07:16.436 --> 00:07:19.640 
很大程度上缩减了跳转时间

00:07:20.240 --> 00:07:24.878 
这些变更可以显著减少整体交互时间

00:07:25.412 --> 00:07:29.850  
事实上 在watchOS 3中
内部目标交互时间

00:07:29.917 --> 00:07:33.287  
已经从5秒缩减到了2秒

00:07:34.021 --> 00:07:37.925 
毫无疑问 当我第一次听到
这个消息时 我想

00:07:37.991 --> 00:07:39.860 
“这相当了不起”

00:07:40.294 --> 00:07:43.030 
我的意思是 我实际上还要花2秒钟

00:07:43.096 --> 00:07:45.199 
来说“2秒钟”这个词

00:07:45.966 --> 00:07:48.702 
但真相是 执行任务

00:07:48.769 --> 00:07:53.473 
如查看游戏分数、查看天气情况、

00:07:53.540 --> 00:07:58.178 
或查看股票都可以而且都应该像那么快

00:07:59.079 --> 00:08:02.382  
现在你可能不只花几秒钟来

00:08:02.449 --> 00:08:05.552  
查看天气、游戏分数或股票

00:08:05.919 --> 00:08:09.923  
但每次互动都应该只需要几
秒钟而已

00:08:10.557 --> 00:08:13.460 
而且操作也应该很快

00:08:13.994 --> 00:08:17.698 
简单的操作只需要单一的决策

00:08:17.764 --> 00:08:19.867 
就能在Apple Watch上
顺利运行了

00:08:20.100 --> 00:08:23.170 
人们应该设置一个计时器

00:08:24.671 --> 00:08:26.507 
或打开警告

00:08:28.008 --> 00:08:31.044 
或检查提醒列表上的事项

00:08:31.445 --> 00:08:33.380 
在2秒钟内或更短时间内

00:08:34.448 --> 00:08:38.284 
现在就算你不能把互动时间缩减到2秒

00:08:38.751 --> 00:08:43.289 
这种尝试也会帮你发现
工作流程中低效的地方

00:08:43.357 --> 00:08:46.159 
并找到解决方案

00:08:46.827 --> 00:08:49.997 
好了 现在让我们谈一下具体内容

00:08:50.063 --> 00:08:55.602 
关于如何开发优秀的应用、
通知和complications

00:08:56.370 --> 00:08:59.006 
依我个人所见

00:08:59.072 --> 00:09:02.643 
complication是
Apple Watch上最简单、

00:09:02.709 --> 00:09:04.978 
最方便操作的交互

00:09:05.779 --> 00:09:07.881 
查看complication跟

00:09:07.948 --> 00:09:10.551 
抬起手腕看一眼一样简单

00:09:11.018 --> 00:09:13.887 
不需要额外的交互

00:09:14.087 --> 00:09:17.691 
这种交互无疑只需要2秒或更短

00:09:18.258 --> 00:09:22.696 
我们在watchOS 3和
iOS 10中做出了重大变更

00:09:22.763 --> 00:09:25.098 
提高complication的
关注度...

00:09:26.266 --> 00:09:30.504 
使complication的安装
更简便并赋予它们更多功能

00:09:31.104 --> 00:09:35.609 
对于初学者来说 你们现可在iOS上
用Apple Watch应用

00:09:35.676 --> 00:09:38.412 
浏览和配置
complication了

00:09:38.478 --> 00:09:41.915 
这很有意义 因为很显然这种交互

00:09:41.982 --> 00:09:43.851 
至少需要2秒钟

00:09:44.484 --> 00:09:47.421 
现在配置UI会显示 精确预览

00:09:47.487 --> 00:09:50.123 
complication在表盘上的
外观

00:09:50.524 --> 00:09:53.393 
人们很容易明白
complication是做什么的

00:09:53.460 --> 00:09:55.629 
也能看到所提供的价值

00:09:56.530 --> 00:09:59.633 
Apple Watch应用
也有表盘图库

00:09:59.700 --> 00:10:02.269 
是用complication预设的

00:10:02.803 --> 00:10:06.840 
并且有一个专用的第三方
complication部分

00:10:07.241 --> 00:10:09.877 
如果你已经做好了一个
complication bundle

00:10:09.943 --> 00:10:13.747 
而且Apple Watch
也已经安装了你的iOS应用

00:10:13.814 --> 00:10:16.016 
Apple Watch用户就会在此
看到你的complication

00:10:16.250 --> 00:10:18.452 
若你的complication
看起来很有用

00:10:18.519 --> 00:10:20.787 
人们只需要按一下就能安装

00:10:21.121 --> 00:10:24.124 
将在后台安装你的watch应用

00:10:24.858 --> 00:10:27.561 
complication功能
真是一种很不错的方式

00:10:27.628 --> 00:10:30.364 
来提高对watch应用的关注

00:10:30.797 --> 00:10:33.400 
现在人们更容易了解

00:10:33.467 --> 00:10:35.936 
你的complication了

00:10:37.237 --> 00:10:41.275 
另一个重要变更是性能的变更

00:10:42.276 --> 00:10:44.711 
任何应用
只要有complication

00:10:44.778 --> 00:10:48.148 
安装在用户当前表盘上
它就将一直在内存中

00:10:48.215 --> 00:10:51.185 
并在后台定期更新

00:10:51.585 --> 00:10:54.354 
意思是 启动时间将更快

00:10:54.421 --> 00:10:57.624 
而且应用数据应该也不会那么陈旧

00:10:57.925 --> 00:11:00.394 
complication是一种很出色
的应用启动方式

00:11:00.460 --> 00:11:02.529 
而且它们所显示的信息

00:11:02.596 --> 00:11:05.332 
会经常吸引人们想要了解更多

00:11:05.399 --> 00:11:06.834 
因此 这个过程得快

00:11:07.467 --> 00:11:10.904 
也就是说 看到现在的气温
你可能会想

00:11:10.971 --> 00:11:12.639 
了解下周的天气预报

00:11:13.841 --> 00:11:16.977 
或者 看到你的原始股正在盈利

00:11:17.044 --> 00:11:20.147 
你可能会想了解整个市场的状态

00:11:20.714 --> 00:11:26.854 
complication的最后一个重大
变更是更新频率

00:11:27.387 --> 00:11:30.757 
在watchOS 3中
你的应用可实现

00:11:30.824 --> 00:11:34.294 
每天更新
50次complication

00:11:34.661 --> 00:11:38.332 
你可以控制更新的频率和时间

00:11:38.966 --> 00:11:42.202 
因此一个旅行
complication更新最频繁

00:11:42.269 --> 00:11:45.372 
在航班出发和抵达前后

00:11:45.973 --> 00:11:49.109 
而运动complication
可能会更新最频繁

00:11:49.176 --> 00:11:50.944 
在你关注的比赛进行时

00:11:51.445 --> 00:11:53.347 
通过控制更新时间

00:11:53.413 --> 00:11:57.184 
必要时你的complication
可以保持当前状态

00:11:58.018 --> 00:12:02.089 
开发complication时
请考虑到外在因素

00:12:02.155 --> 00:12:06.460 
和用户活动模式会对
实效性产生何种影响

00:12:06.527 --> 00:12:10.330 
complication更新的

00:12:11.298 --> 00:12:15.669 
所以 如果你要创建一个
Apple Watch应用

00:12:16.336 --> 00:12:18.238 
你应该做个complication

00:12:18.906 --> 00:12:21.909 
这东西 这么流行 肯定是有原因的

00:12:21.975 --> 00:12:24.678 
在手表用户和手表制造商之间

00:12:25.179 --> 00:12:28.515 
虽然很复杂 但也值得我们付出努力

00:12:29.216 --> 00:12:32.686 
我希望我说的很得体
至少是推销给你们

00:12:32.753 --> 00:12:34.655 
制作complication的想法

00:12:34.955 --> 00:12:37.024 
如果是这样的话 我想跟你们谈一下

00:12:37.090 --> 00:12:40.427 
制作优秀的complication
的必要条件

00:12:41.862 --> 00:12:45.632 
在设计complication时
最重要的是考虑

00:12:45.999 --> 00:12:48.769 
选择显示哪些信息

00:12:49.603 --> 00:12:52.005 
优秀的complication会对
那些问题作出回答

00:12:52.072 --> 00:12:54.975 
人们在日常生活中经常问自己的

00:12:55.742 --> 00:12:58.378 
几乎每天开始工作之前
我都会去跑步

00:12:58.912 --> 00:13:00.781 
所以前一天晚上 我可能会查一下

00:13:00.848 --> 00:13:03.817 
日出的时间

00:13:03.884 --> 00:13:05.485 
然后才定闹铃

00:13:06.086 --> 00:13:08.856 
起床后 我想知道户外的温度

00:13:08.922 --> 00:13:10.490 
我就知道该穿什么衣服去跑步

00:13:11.325 --> 00:13:13.660 
我还会查我第一个工作会议的时间

00:13:13.727 --> 00:13:16.463 
以便我有足够的时间用来跑步

00:13:16.864 --> 00:13:18.699 
还会查一下交通状况

00:13:18.765 --> 00:13:22.169 
确定我不用早点出发去上班

00:13:23.003 --> 00:13:28.542 
现在 这些问题的答案
会直接影响我一天的计划

00:13:29.176 --> 00:13:31.345 
如果就能得到答案

00:13:31.411 --> 00:13:32.980 
只需要抬起手腕

00:13:33.380 --> 00:13:38.185 
那么complication会对我
的生活提供真实和即时的价值

00:13:38.819 --> 00:13:42.689 
而且complications
可以作为一个很强大的动力

00:13:43.056 --> 00:13:45.826 
鼓励你行动起来

00:13:46.226 --> 00:13:47.661 
执行力更强

00:13:48.662 --> 00:13:50.797 
比如活动complication

00:13:50.864 --> 00:13:54.568 
显示我的健身进度 朝着我的目标努力

00:13:55.169 --> 00:13:58.472 
我能看到我是否一直在坚持完成目标

00:13:58.539 --> 00:14:02.609 
或是否要在下班以后带着我的狗
来一次超远距离的散步

00:14:03.243 --> 00:14:06.613 
WaterMinder的complication
显示出我的进度

00:14:06.680 --> 00:14:09.082 
朝着我制定的日常摄水量目标

00:14:09.850 --> 00:14:12.252 
看起来似乎我有点儿落后了

00:14:12.319 --> 00:14:15.489 
所以我要抓住这个机会喝点儿水

00:14:15.789 --> 00:14:16.757 
请稍等

00:14:31.271 --> 00:14:36.143 
那么 如果你只选择
一件事通过complication

00:14:36.210 --> 00:14:39.713 
与用你应用的人进行沟通

00:14:39.947 --> 00:14:41.381 
应该是什么呢？

00:14:41.915 --> 00:14:44.685 
他们最想了解什么

00:14:44.751 --> 00:14:46.220 
在日常生活中？

00:14:46.820 --> 00:14:50.791 
那个信息是否频繁更新来保持趣味性？

00:14:51.425 --> 00:14:55.295 
有时候 这个问题的答案
并不是很明确的

00:14:56.196 --> 00:15:00.300 
如果你不能完全缩减为一条信息

00:15:00.801 --> 00:15:03.036 
你可以考虑让人们自己做出选择

00:15:03.470 --> 00:15:05.906 
CARROT Weather应用就如此

00:15:06.406 --> 00:15:09.843 
它让你配置来你想看到的天气信息

00:15:10.277 --> 00:15:14.815 
气温、温湿度、风力、紫外线指数、

00:15:15.115 --> 00:15:18.685 
降水、降水概率或湿度

00:15:19.286 --> 00:15:24.391 
加利福尼亚的夏季几乎从不下雨

00:15:24.658 --> 00:15:29.129 
所以完全没必要查看降水概率

00:15:29.696 --> 00:15:33.133 
今天的概率是0％ 真是太惊人了

00:15:33.600 --> 00:15:36.270 
顺便插句 我今早看了天气预报

00:15:36.336 --> 00:15:38.238 
明天应该会下雨

00:15:38.305 --> 00:15:39.640 
所以要注意防雨

00:15:41.942 --> 00:15:42.876 
很及时

00:15:43.076 --> 00:15:47.247 
但在夏季的同一时期

00:15:47.314 --> 00:15:52.019 
紫外线指数是个非常相关的信息

00:15:52.753 --> 00:15:55.455 
让complication自定义

00:15:55.522 --> 00:15:57.191 
是个很不错的功能

00:15:57.824 --> 00:16:00.627 
CARROT Weather
还实现了一个很棒的功能

00:16:00.694 --> 00:16:03.197 
就是使它的complication
方便查看

00:16:03.864 --> 00:16:06.767 
每个元素 除当前气温之外

00:16:07.000 --> 00:16:11.505 
都使用了简单而有意义的图标
来标记所显示的值

00:16:11.772 --> 00:16:14.842 
而且并不会勉强塞入太多信息

00:16:14.908 --> 00:16:17.344 
因为会增加更多的文本和图标

00:16:17.411 --> 00:16:18.946 
文本和图标太小了 很难看清

00:16:20.047 --> 00:16:22.115 
若你从未做过
complication

00:16:22.549 --> 00:16:26.386 
你得了解一下
complication元素

00:16:26.854 --> 00:16:32.626 
圆形、小模块、大模块、
小实体和大实体

00:16:33.126 --> 00:16:37.130 
在watchOS 3中又增加了
超大模块和超大实体

00:16:38.432 --> 00:16:40.934 
我原来打算做一个音响效果
但我没时间

00:16:41.735 --> 00:16:43.737 
complication家族的
每个元素

00:16:43.804 --> 00:16:46.707 
都由一个或多个
complication模板组成

00:16:46.773 --> 00:16:49.276 
并对应指定的表盘

00:16:49.743 --> 00:16:53.547  
颜色表盘使用
圆形complication元素

00:16:54.515 --> 00:16:59.119  
模块化表盘使用大模块
complication元素

00:16:59.186 --> 00:17:01.522  
和小模块complication元素

00:17:02.489 --> 00:17:05.259  
简单实体和精密计时表盘

00:17:05.325 --> 00:17:07.794  
使用小实体complication

00:17:08.395 --> 00:17:11.265  
而实体和米奇表盘

00:17:11.330 --> 00:17:14.468  
则使用大实体complication元素

00:17:16.002 --> 00:17:20.207 
全新的超大表盘要用

00:17:20.507 --> 00:17:21.974  
有人想猜猜看吗？

00:17:22.910 --> 00:17:23.743  
对了

00:17:24.111 --> 00:17:27.481  
超大表盘用
超大complication元素

00:17:27.548 --> 00:17:28.582  
你们反应很快

00:17:29.550 --> 00:17:30.984  
我希望你能把这些记下来

00:17:31.051 --> 00:17:33.086 
因为你查不到这些信息

00:17:33.787 --> 00:17:34.888 
哦 我只是开个玩笑

00:17:34.955 --> 00:17:37.057 
所有信息都能 查到

00:17:37.124 --> 00:17:40.227 
从watchOS
Human Interface Guidelines中

00:17:40.294 --> 00:17:43.263 
这里可以找到 所有信息

00:17:43.330 --> 00:17:45.432 
手表应用设计相关的

00:17:45.499 --> 00:17:47.100 
我强烈推荐先看一下这个

00:17:48.168 --> 00:17:50.771 
重要的是你要尝试做一些东西

00:17:50.838 --> 00:17:52.739 
使用每一个complication元素

00:17:52.806 --> 00:17:57.644 
这样人们就可以在表盘上用
complication了 他们可能会很喜欢

00:17:58.345 --> 00:18:00.447  
当然 一定要用占位数据

00:18:00.514 --> 00:18:04.518  
在complication中
那是人们能看到的样子的实例

00:18:04.885 --> 00:18:07.354  
当他们实际使用
你的complication时

00:18:07.421 --> 00:18:11.358  
如果没有占位数据 人们就不
可能会期待

00:18:11.425 --> 00:18:13.527  
你的complication
有什么功能

00:18:14.695 --> 00:18:15.629 
好了

00:18:15.696 --> 00:18:18.665 
你们看到了有些complication
会提供更多空间

00:18:18.732 --> 00:18:20.334 
给更详细的信息

00:18:21.068 --> 00:18:22.369 
在模块化表盘上

00:18:22.803 --> 00:18:25.672 
如果某人把你的
complication放于中心

00:18:25.739 --> 00:18:29.076 
他们一定是经常关注你的应用
所传达的内容

00:18:30.010 --> 00:18:34.348 
你可以抓住这个机会
再多提供点儿信息

00:18:34.414 --> 00:18:35.916 
他们可能会觉得有用

00:18:36.617 --> 00:18:40.554 
事实上 你可能想
显示完全不同的信息

00:18:40.621 --> 00:18:42.389 
基于complication元素

00:18:43.023 --> 00:18:45.559 
如果天气信息对你来说真很重要的话

00:18:46.193 --> 00:18:49.296 
你没有理由不装两个

00:18:49.363 --> 00:18:52.799 
CARROT Weather complication
的实例在你的表盘上

00:18:53.467 --> 00:18:57.804 
也许你会使用大模块来显示
当前气温和天气情况

00:18:57.871 --> 00:19:00.807 
用小模块来显示降水概率

00:19:01.508 --> 00:19:04.311 
即使你还没想好要 显示什么信息

00:19:04.378 --> 00:19:06.046 
在你的complication中

00:19:06.513 --> 00:19:08.982 
你也可以做一个应用启动器

00:19:09.583 --> 00:19:12.019 
Just Press Record
这个complication

00:19:12.085 --> 00:19:16.290 
一个记录语音备忘录的应用
其实就是一个应用启动器

00:19:16.924 --> 00:19:21.361 
按它当然可以启动应用
但是还能开始新录音

00:19:21.762 --> 00:19:24.064 
超级方便和快捷

00:19:24.798 --> 00:19:30.470 
这再清楚不过了 我们喜欢
complication 很喜欢

00:19:30.938 --> 00:19:33.273 
我们认为戴Apple Watch者

00:19:33.507 --> 00:19:37.544 
越了解complication作用

00:19:37.611 --> 00:19:40.180 
越想更多的complication

00:19:40.914 --> 00:19:44.284 
为了更方便地获取这些
complication

00:19:44.718 --> 00:19:49.189 
在watchOS 3中 人们可以
很简便地切换表盘

00:19:49.756 --> 00:19:52.893 
只需要轻轻滑一下
就从工作日complication

00:19:52.960 --> 00:19:54.528 
切换到健身表盘

00:19:54.761 --> 00:19:57.931 
并从健身表盘切换到周末表盘

00:19:58.498 --> 00:20:01.034 
现在想一下

00:20:01.101 --> 00:20:02.870 
我们日常生活中的各种事儿

00:20:03.203 --> 00:20:05.072  
对吧？事情多得令人吃惊

00:20:06.039 --> 00:20:07.040  
哦 我是认真的

00:20:07.608 --> 00:20:11.278  
我们健身、我们约会、
我们运动、我们旅行、

00:20:11.345 --> 00:20:14.515  
我们做体育运动、
我们做其他各种活动

00:20:14.982 --> 00:20:17.584 
现在 更容易匹配表盘

00:20:17.651 --> 00:20:21.321 
和所安装的complication
根据你正在做的事情

00:20:21.488 --> 00:20:24.258 
这样人们应该在Apple Watch上

00:20:24.324 --> 00:20:26.760 
会使用更多的
complication

00:20:27.294 --> 00:20:30.097  
你也做一个这样的
complication吧

00:20:31.465 --> 00:20:34.234 
好了...以上说的是
complication

00:20:34.868 --> 00:20:38.705 
现在 我们继续探讨通知的
最佳范例

00:20:40.908 --> 00:20:45.379 
通知应该有用、及时

00:20:46.013 --> 00:20:48.248 
并且要精心设计

00:20:48.315 --> 00:20:52.619 
来表达精确、清晰的信息

00:20:53.120 --> 00:20:56.790 
换句话说 应该方便查看

00:20:57.524 --> 00:21:00.494 
请记住 收到通知的人

00:21:00.561 --> 00:21:03.864 
可以在任何地方 正在做任何事

00:21:04.498 --> 00:21:07.367 
他们可能正在吃饭、正跟朋友约会、

00:21:07.801 --> 00:21:10.671 
正搭乘地铁、正在喝水、

00:21:11.205 --> 00:21:15.075 
或正在开会讨论一些很重要的事

00:21:15.609 --> 00:21:18.912 
很多时候 人们正聚精会神地

00:21:18.979 --> 00:21:22.950 
忙自己手头的事儿或正全神贯
注地欣赏这个世界

00:21:23.450 --> 00:21:25.252 
所以你的通知要

00:21:25.319 --> 00:21:28.155 
表达清晰、扼要

00:21:29.056 --> 00:21:33.060 
幸运的是 使通知方便查看
并不困难

00:21:33.560 --> 00:21:36.230 
首先 你要提供一个有意义
的标题

00:21:36.530 --> 00:21:39.733 
人们看通知分两种 瞥一眼和仔细看

00:21:40.267 --> 00:21:42.336 
就像这两个词所暗示的那样
瞥一眼是

00:21:42.402 --> 00:21:45.472 
快速提供通知内容的概要

00:21:45.973 --> 00:21:48.742 
而你提供的标题将会显示
在这儿

00:21:49.176 --> 00:21:51.311 
有时候标题可能会提供所有

00:21:51.378 --> 00:21:53.547 
需要从通知中了解的信息

00:21:54.515 --> 00:21:57.684 
其次 只显示必要信息

00:21:58.051 --> 00:21:59.786 
我必须要强调这一点

00:22:00.053 --> 00:22:02.356 
通知里显示的信息越多

00:22:02.422 --> 00:22:05.959 
人们越难抓到重点

00:22:06.460 --> 00:22:09.396 
比如你正在 做一个登记入住通知

00:22:09.796 --> 00:22:10.964 
给一个旅行应用

00:22:11.398 --> 00:22:15.302  
通知可能包含 各种各样
潜在有用的信息

00:22:15.369 --> 00:22:16.803  
跟游客航班相关的

00:22:17.504 --> 00:22:23.043  
但在一条通知里 像航班号
或你自己的名字这样的

00:22:23.110 --> 00:22:26.180  
信息并没有那么重要

00:22:26.480 --> 00:22:29.750  
所以我们要去掉这样的信息

00:22:31.218 --> 00:22:34.488 
第三 先显示重要信息

00:22:34.821 --> 00:22:37.124 
可以把最重要的信息显示在顶部

00:22:37.424 --> 00:22:39.793 
人们很可能会快速读取信息

00:22:39.860 --> 00:22:41.128 
而不需要往下滚动

00:22:41.695 --> 00:22:44.464 
这非常有帮助 若某人手里正拿着东西

00:22:44.531 --> 00:22:46.900 
不能腾出手来滑动屏幕

00:22:47.367 --> 00:22:49.036 
或查看Digital Crown

00:22:49.937 --> 00:22:51.805 
所以 对于登记入住通知

00:22:52.172 --> 00:22:54.341  
我们要把航班号 这样的内容

00:22:54.408 --> 00:22:57.778  
和登记时间 挪到通知的最后

00:22:59.246 --> 00:23:02.783 
第四 改变尺寸和外观

00:23:02.850 --> 00:23:05.485 
创建清晰的视觉层次

00:23:06.053 --> 00:23:08.488 
你的通知应该让人们

00:23:08.555 --> 00:23:10.991 
首先去关注最重要的信息

00:23:11.692 --> 00:23:15.395 
这个通知的信息很全、很对

00:23:15.462 --> 00:23:16.763 
显示的顺序也对

00:23:16.830 --> 00:23:20.400 
但每一条的视觉权重都一样

00:23:21.034 --> 00:23:24.204 
Apple Watch的
通知定制性很强

00:23:24.271 --> 00:23:27.674 
你可以完全控制字形、布局、

00:23:27.741 --> 00:23:29.376 
背景和边框颜色

00:23:30.344 --> 00:23:35.148 
这个功能可以帮助人们
迅速找出最重要的通知

00:23:35.682 --> 00:23:38.352 
这个设计真正把重点放在

00:23:38.418 --> 00:23:42.389 
像几等票、座位号、
出发时间和路线这样的信息上

00:23:42.689 --> 00:23:46.460 
且这个通知的目的是让你现在办理入住

00:23:46.527 --> 00:23:47.928 
表达的很清晰

00:23:49.062 --> 00:23:50.163 
最后

00:23:50.230 --> 00:23:53.433 
精心设计的通知经常使用图标、

00:23:53.500 --> 00:23:57.604 
图形和动画来进行快速地表达

00:23:58.238 --> 00:24:01.575 
图形表达更迅速、

00:24:01.642 --> 00:24:03.744 
比文本更清晰

00:24:04.645 --> 00:24:08.115 
图标可以节省空间 让你的通知

00:24:08.182 --> 00:24:10.584 
在屏幕上全部显示出来

00:24:11.018 --> 00:24:15.956 
但需要注意的是 有些图标
并不是通用的

00:24:16.023 --> 00:24:17.491 
或可能产生误解

00:24:17.558 --> 00:24:20.227 
所以你要采用被 广泛使用的图标

00:24:20.294 --> 00:24:22.196 
各种族和文化

00:24:22.262 --> 00:24:23.730 
或你了解 图标的象征意义

00:24:23.797 --> 00:24:26.366 
使用你应用的人能明白

00:24:27.167 --> 00:24:30.070 
简短、有意义的动画是
一种优秀方式

00:24:30.137 --> 00:24:33.540 
补充文本并引起人们注意的

00:24:34.274 --> 00:24:38.111 
图形和其他可视化数据不仅能提供

00:24:38.178 --> 00:24:40.514 
更有趣的可视化体验

00:24:40.581 --> 00:24:43.750 
还能表达更多的意思

00:24:44.685 --> 00:24:49.957 
但在设计通知时还要考虑一点

00:24:52.326 --> 00:24:56.897 
你要认真思考为何以及何时发送

00:24:57.698 --> 00:25:00.033 
在错误的时间收到通知

00:25:00.100 --> 00:25:03.237 
只会分散注意力或让人讨厌

00:25:03.637 --> 00:25:07.407 
如果你现在收到了一条通知
你会觉得很恼火

00:25:07.474 --> 00:25:09.877 
除非 更重要

00:25:09.943 --> 00:25:11.211 
比现在的事

00:25:11.512 --> 00:25:13.213 
这是绝对不可能的

00:25:15.449 --> 00:25:19.319 
因为 Apple Watch会在
手腕上震动

00:25:19.386 --> 00:25:23.524 
收到通知时 所以很难错过
某个通知

00:25:23.891 --> 00:25:26.126 
如果你的应用给人们发的通知

00:25:26.193 --> 00:25:30.063 
并不那么有用 信息量也不大
而且也不及时

00:25:30.130 --> 00:25:32.933 
人们很可能会完全关闭你应用的功能

00:25:32.999 --> 00:25:35.169 
通知发送

00:25:36.170 --> 00:25:37.104 
那么...

00:25:37.938 --> 00:25:42.042 
如何了解为何以及何时发送
通知呢？

00:25:42.910 --> 00:25:46.513 
嗯 最好的方法是确定
什么是最相关的

00:25:46.580 --> 00:25:48.348 
对于使用你应用的人来说

00:25:48.415 --> 00:25:52.252 
以及他们什么时间最可能去执行

00:25:53.253 --> 00:25:56.990 
我有两个很出色的应用

00:25:57.057 --> 00:25:58.992 
我有两个很出色的例子

00:25:59.426 --> 00:26:02.696 
第一个是非常了不起的天气应用
叫Dark Sky

00:26:03.530 --> 00:26:07.701 
Dark Sky会在天气突变时通
知人们

00:26:07.968 --> 00:26:12.105 
比如要下雨了或雨要停了

00:26:13.040 --> 00:26:15.809 
在Dark Sky这个示例中
相关性是由情景因素

00:26:15.876 --> 00:26:17.244 
决定的

00:26:17.578 --> 00:26:21.715 
通知会基于用户的地理位置
或用进行发送的

00:26:21.782 --> 00:26:24.551 
距离气象系统远近获得的定位

00:26:25.285 --> 00:26:27.487 
通知要提前发送

00:26:27.554 --> 00:26:29.456 
这样 有时间去拿伞

00:26:29.523 --> 00:26:32.960 
在倾盆大雨之前

00:26:33.627 --> 00:26:37.698 
因为这些通知都是情景相关的
是及时的

00:26:37.764 --> 00:26:39.333 
所以执行力更强

00:26:40.033 --> 00:26:43.303 
如果知道雨要停了 我可能会

00:26:43.403 --> 00:26:44.838 
准备去跑步

00:26:45.439 --> 00:26:49.443 
如果知道要下雨了 我可能会

00:26:49.510 --> 00:26:51.645 
躺在沙发上打个盹儿

00:26:52.613 --> 00:26:56.083 
除了情景因素 用户偏好

00:26:56.149 --> 00:26:58.785 
和模式能提供出色的洞察力

00:26:58.852 --> 00:27:02.022 
了解人们想知道什么
以及什么时候想知道

00:27:02.589 --> 00:27:05.559 
具体地 让我们看一下另一个示例

00:27:06.560 --> 00:27:11.865 
Streaks是一个帮人们养成好
习惯的应用

00:27:11.932 --> 00:27:14.368 
刚刚获得了Apple设计大奖

00:27:15.068 --> 00:27:19.506 
人们每天最多能选择六个任务

00:27:19.940 --> 00:27:21.108 
如该应用名字所表示的

00:27:21.175 --> 00:27:24.011 
这里的目标是一条一条的

00:27:24.077 --> 00:27:27.814 
因为每天都做某事
就能变成一种日常习惯

00:27:28.549 --> 00:27:30.551 
所以 如果你想养成 的习惯

00:27:30.617 --> 00:27:33.353 
每天要做强化训练

00:27:33.754 --> 00:27:37.624 
我要做的是学吉他或弹吉他

00:27:37.691 --> 00:27:41.528 
或记得给狗盆填满水或遛狗

00:27:42.262 --> 00:27:44.298 
Streaks会提醒你去做这些事儿

00:27:45.265 --> 00:27:48.335 
我的狗从来没这么健康过
摄水量也从来没这么充足过

00:27:49.269 --> 00:27:51.805 
虽然他们并没意识到
但实际上他们很喜欢这个应用

00:27:52.472 --> 00:27:55.008 
当然 这里的重点是这些事是

00:27:55.075 --> 00:28:00.414 
人们想定时去做但可能会忘记做的

00:28:01.281 --> 00:28:05.052 
所以Streaks用通知来提醒人们

00:28:05.385 --> 00:28:09.690 
但只有在正确的时间收到提醒才有效

00:28:10.123 --> 00:28:14.094 
人们应该在最可能去做的时候收到提醒

00:28:15.195 --> 00:28:18.765 
或者 换句话说 在他们最有空的时候

00:28:18.832 --> 00:28:22.269 
但Streaks是如何知道
具体时间的？

00:28:23.770 --> 00:28:25.939 
嗯 首先 它并不知道

00:28:26.440 --> 00:28:29.877 
关于它是怎么操作的
让我们先来看个具体的例子

00:28:30.477 --> 00:28:33.113 
现在我正试着养成弹吉他的习惯

00:28:33.714 --> 00:28:36.783 
在一天结束之前的某个时间

00:28:36.850 --> 00:28:38.752 
我会收到一个弹吉他的提醒

00:28:39.453 --> 00:28:43.223 
不会太晚 那样我就没时间弹吉他了

00:28:43.457 --> 00:28:45.025 
或者我已经睡着了

00:28:45.592 --> 00:28:49.229 
但也不会太早 比如说
我还在工作时就收到了

00:28:50.397 --> 00:28:51.732 
那么 为简单起见

00:28:52.299 --> 00:28:55.002 
比如说我在晚上7:00收到通知

00:28:55.502 --> 00:28:56.637 
这稍微早点儿

00:28:56.703 --> 00:28:59.339 
那么我可以按一个30分钟的止闹按钮

00:28:59.406 --> 00:29:04.344 
一直拖 一直拖
直到我能弹吉他为止

00:29:04.978 --> 00:29:06.580 
当我弹吉他时

00:29:06.914 --> 00:29:10.050 
我会在应用中将那个任务标记为完成

00:29:12.052 --> 00:29:13.587 
Streaks会记下该时间

00:29:14.221 --> 00:29:17.658 
日复一日 我每次都会标记
完成那个任务的时间

00:29:17.724 --> 00:29:20.627 
这样 Streaks就会越来越
精确地了解

00:29:20.694 --> 00:29:23.030 
我一般在什么时间弹吉他

00:29:23.864 --> 00:29:26.967 
Streaks会用那个时间
来制定给我的提醒

00:29:27.034 --> 00:29:30.204 
并在正确的时间自动发送给我

00:29:30.671 --> 00:29:33.774 
这是个简单的启发

00:29:34.842 --> 00:29:37.845 
实际发送时间会提前30分钟

00:29:37.911 --> 00:29:40.547 
因为很明显我不会立刻放下所有事

00:29:40.614 --> 00:29:42.716 
一看到通知就开始弹吉他

00:29:43.450 --> 00:29:48.856 
然而 自动调整时间和通知
有时候并不合适

00:29:49.489 --> 00:29:53.160 
你可能想就在
一个特定的时间完成某些任务

00:29:53.227 --> 00:29:55.796 
Streaks也可以做到

00:29:56.463 --> 00:29:58.632 
或者也许你不想逐个收到通知

00:29:58.699 --> 00:30:01.201 
只想每天收到一次提醒

00:30:01.268 --> 00:30:03.136 
而Streaks也能做到

00:30:03.637 --> 00:30:07.040 
你可以禁用单一任务通知

00:30:07.908 --> 00:30:09.710 
或关闭所有通知

00:30:10.377 --> 00:30:13.247 
所以 通过明智地选择通知发送的时间

00:30:13.947 --> 00:30:18.652 
和为用户提供为什么
以及什么时候收到通知的完全控制

00:30:19.219 --> 00:30:23.190 
Streaks发送的提醒
不太可能会打扰用户、

00:30:23.991 --> 00:30:25.726 
被忽略或被嫌弃

00:30:27.060 --> 00:30:30.931 
Streaks发送的通知都在
可执行的范围内

00:30:30.998 --> 00:30:34.301 
因为它一般会提醒人们
执行一项身体力行的任务

00:30:34.735 --> 00:30:38.505 
但使通知可执行的字面意思也是

00:30:38.572 --> 00:30:40.741 
给通知添加行为

00:30:41.308 --> 00:30:46.313 
我鼓励你们探索
如何让你推送的通知执行力更强

00:30:47.014 --> 00:30:49.550 
要从手腕上迅速进行分类

00:30:49.616 --> 00:30:51.351 
是一件很厉害的事

00:30:51.885 --> 00:30:55.589 
通知可促进使用你应用的人之间的交互

00:30:55.889 --> 00:30:59.293 
而且会毫不吝啬地在日常生活中

00:30:59.359 --> 00:31:01.028 
激励人们

00:31:02.429 --> 00:31:05.999 
一条通知 最多可以执行四种动作

00:31:06.233 --> 00:31:08.735 
一定要只显示真正相关的动作

00:31:08.802 --> 00:31:10.637 
与通知内容

00:31:11.805 --> 00:31:15.776 
确保把动作标记地清晰、简洁

00:31:15.843 --> 00:31:18.011 
并使用面向动作的动词

00:31:18.512 --> 00:31:24.184 
请尝试关注那些按一下就能完成的操作
就一下

00:31:24.518 --> 00:31:28.622 
然而 有时候可能会需要
一个或两个额外的步骤

00:31:29.122 --> 00:31:32.025 
多步流程会把人们带入你的应用中

00:31:32.092 --> 00:31:34.027 
一般来说会有点儿痛苦

00:31:34.094 --> 00:31:36.697 
因为应用需要时间加载

00:31:37.364 --> 00:31:40.934 
但在watchOS 3中
当显示应用的通知时

00:31:41.001 --> 00:31:42.970 
会在后台启动你的应用

00:31:43.337 --> 00:31:47.975 
这就确保应用的数据是最新的

00:31:48.041 --> 00:31:50.777 
并且提前加载应用 方便人们查看

00:31:51.311 --> 00:31:53.714 
所以不要回避这个问题
要让人们进入你的应用

00:31:53.780 --> 00:31:55.082 
如果必要的话

00:31:55.749 --> 00:31:58.986 
现在 谈到把人们带入你的应用

00:31:59.620 --> 00:32:01.822 
我们正好可以谈谈应用

00:32:03.524 --> 00:32:07.194 
watchOS 3将完全改变人们
使用应用的

00:32:07.261 --> 00:32:08.595 
体验和互动

00:32:09.196 --> 00:32:11.632 
让我们看一下最重要的几个变更

00:32:11.698 --> 00:32:13.400 
以及这些变更产生的意义

00:32:14.334 --> 00:32:15.669 
让我们从新版Dock说起

00:32:16.603 --> 00:32:20.007 
人们最多可以在Dock中
放10个应用

00:32:20.440 --> 00:32:23.143 
并且Dock中的每个应用都在内存中

00:32:23.544 --> 00:32:28.882 
以便能从Dock快速进入应用

00:32:29.716 --> 00:32:32.853 
Dock中显示的是每个应用的快照

00:32:33.320 --> 00:32:37.324 
这些快照应该包含丰富的信息
并方便查看

00:32:37.724 --> 00:32:42.496 
应用的快照要定期更新
保证数据是最新的

00:32:43.397 --> 00:32:46.733 
Dock中的应用在后台
每小时至少启动一次

00:32:47.100 --> 00:32:49.736 
这就就能取到新数据更新应用的UI

00:32:49.803 --> 00:32:52.506 
并请求系统创建一个应用的新快照

00:32:52.573 --> 00:32:54.975 
如果必要的话

00:32:55.909 --> 00:32:59.279  
当在Dock中查看应用时会唤醒应用

00:32:59.346 --> 00:33:03.050  
如果内容有变化 会更新应用的快照

00:33:04.151 --> 00:33:06.787 
如果有人把你的应用放在Dock中

00:33:07.087 --> 00:33:08.422 
你应该为此感到高兴

00:33:08.822 --> 00:33:12.359 
因为放在Dock中就意味着
你的应用包含的信息

00:33:12.426 --> 00:33:14.995 
正是人们想随时了解的内容

00:33:15.729 --> 00:33:19.166 
正因为如此 重点是应用的快照

00:33:19.233 --> 00:33:21.935 
不仅得是最新的 还得是相关的

00:33:22.736 --> 00:33:25.906 
在某些情况下 显示人们
最后一次查看的屏幕

00:33:25.973 --> 00:33:28.175 
上次使用应用时

00:33:28.242 --> 00:33:30.410 
可能就不是很相关

00:33:30.978 --> 00:33:34.915 
幸运的是 watchOS 3
会提供一个API 可以跳转

00:33:34.982 --> 00:33:38.418 
到不同的屏幕
而非停留在最后一次浏览过的屏幕上

00:33:38.952 --> 00:33:42.189 
那么 比如说 有一个棒球应用

00:33:42.256 --> 00:33:45.759 
显示了当前比赛和即将进行比赛的列表

00:33:45.826 --> 00:33:48.862 
当然 按每个列表项都能进入

00:33:48.929 --> 00:33:51.565 
比赛相关的详情页面

00:33:51.999 --> 00:33:52.866 
好了

00:33:52.933 --> 00:33:57.037 
现在 假如你自己是这个应用的用户

00:33:57.437 --> 00:34:00.707 
你最后一次看该应用时看的是这场比赛

00:34:01.141 --> 00:34:04.344 
退出后 在Dock中看这个应用时

00:34:04.845 --> 00:34:08.581 
你很可能会希望继续
得到那场比赛的详细信息

00:34:09.248 --> 00:34:11.784 
如果比赛结束了 巨人队赢了

00:34:12.319 --> 00:34:15.455 
你很可能仍然希望在
详细视图中查看这场比赛

00:34:15.822 --> 00:34:17.456 
但是过一会儿

00:34:17.524 --> 00:34:20.427 
这场比赛的信息变得

00:34:20.494 --> 00:34:21.862 
越来越不相关

00:34:22.196 --> 00:34:23.996 
你可能 了解了最后的得分情况

00:34:24.063 --> 00:34:26.867 
从应用发送的通知中、从朋友那儿、

00:34:27.167 --> 00:34:28.735 
从Twitter上或新闻里

00:34:29.503 --> 00:34:34.007 
在某一时刻 这个内容
就变得完全不相关了

00:34:34.074 --> 00:34:36.376 
你不再对那场比赛感兴趣了

00:34:36.844 --> 00:34:40.514 
也许你正期待看到第二天的赛程

00:34:40.981 --> 00:34:44.150 
或者如果你钟爱的球队
正在打一场新的比赛

00:34:44.217 --> 00:34:48.288 
并且已经开始了 你就不想
了解那场比赛的信息吗？

00:34:49.089 --> 00:34:51.257 
这些就是你需要问的问题

00:34:51.324 --> 00:34:53.193 
关于应用的

00:34:53.994 --> 00:34:57.831 
同时 我希望你能考虑一下
以下这些最佳范例

00:34:59.499 --> 00:35:00.534 
第一 也是最重要的一点

00:35:00.834 --> 00:35:05.072 
你的目标是主动了解用户
的兴趣和需要

00:35:05.772 --> 00:35:09.042 
要站在他们的立场上思考

00:35:09.877 --> 00:35:14.548  
把事件放在一个时间轴上是
一种非常有效的技巧

00:35:15.215 --> 00:35:18.552  
及时提取重要事件 然后问自己

00:35:18.986 --> 00:35:22.289  
“这些事件会对什么人产生
什么影响？”

00:35:22.990 --> 00:35:25.759 
在我刚刚举出的棒球应用示例中

00:35:25.826 --> 00:35:30.030 
我猜测人们可能会想在比赛
开始前后 浏览比赛信息

00:35:30.097 --> 00:35:32.266 
或在比赛期间

00:35:33.233 --> 00:35:35.969 
而在其它时间 同样也是这些人
可能想要了解

00:35:36.036 --> 00:35:37.905 
整个联赛的日程表

00:35:38.772 --> 00:35:42.676 
然而 很可能是一个很简单的日程表

00:35:43.377 --> 00:35:45.812 
个人偏好可以 产生重大影响

00:35:45.879 --> 00:35:47.681 
对最相关的信息内容

00:35:48.315 --> 00:35:51.451 
比如 谁赢就支持谁的人
怎么会去关心

00:35:51.518 --> 00:35:54.922 
某一个球队 他们可能希望
看到完全不同的内容

00:35:54.988 --> 00:35:58.492 
而忠实的棒球迷则想关注
每场比赛

00:35:58.992 --> 00:36:02.462 
对于其他的应用 有其他情景因素
比如时间

00:36:02.529 --> 00:36:06.166 
和地点可能对人们想看到的
内容产生巨大影响

00:36:07.134 --> 00:36:10.137 
一般情况下 人们并不总是
喜欢看到

00:36:10.204 --> 00:36:14.074 
一个app产生出人意料的变化
而不保存当前状态

00:36:14.408 --> 00:36:16.610 
那样人们会感到困惑或迷惑

00:36:16.977 --> 00:36:19.546 
所以 如果你选择把人们跳
转到一个不同的视图

00:36:19.613 --> 00:36:22.282 
你要以一种有逻辑的、
可预见的方式来进行

00:36:23.016 --> 00:36:26.854 
最好是人们一点儿都不会
意识到有什么变化

00:36:26.920 --> 00:36:30.057 
就算他们感觉到了变化 他们也
应该能做出一些 的准确猜测

00:36:30.123 --> 00:36:34.194 
关于应用的UI状态为什么
总是在变化

00:36:35.128 --> 00:36:36.330 
我并不推荐

00:36:36.396 --> 00:36:41.101 
把应用的快照做得跟应用完全不同

00:36:41.502 --> 00:36:43.904 
这样会使应用难以识别

00:36:43.971 --> 00:36:45.172 
而且更不容易找到

00:36:45.639 --> 00:36:49.543 
只提供部分信息 完全没问题

00:36:49.610 --> 00:36:51.812 
或隐藏某些不相关的内容

00:36:51.879 --> 00:36:53.347 
当应用在Dock中显示时

00:36:53.614 --> 00:36:57.117 
但是 如果你想提高某些内容的易读性

00:36:57.184 --> 00:36:58.285 
那样也是可以的

00:36:58.685 --> 00:37:01.188 
但不要做得完全不一样

00:37:02.122 --> 00:37:04.558 
接下来是避免 显示警告、

00:37:04.625 --> 00:37:08.328 
确认对话或异常状态 在快照中

00:37:08.929 --> 00:37:10.330 
情景完成之后

00:37:10.397 --> 00:37:12.900 
这种内容可能就没什么大用了

00:37:12.966 --> 00:37:15.269 
事实上 这种内容很容易被人误解

00:37:15.335 --> 00:37:16.803 
或毫无意义

00:37:17.104 --> 00:37:18.238 
所以 根据不同的情况

00:37:18.305 --> 00:37:21.008 
可以考虑 用程序屏蔽这些内容

00:37:21.074 --> 00:37:22.543 
在一定时期之后

00:37:23.377 --> 00:37:27.381 
最后是优化应用显示界面

00:37:27.447 --> 00:37:28.849 
在微型表单中的

00:37:29.516 --> 00:37:32.619 
在Dock中 应用会等比例缩小

00:37:32.686 --> 00:37:34.354 
这就像 一个相似数值

00:37:34.421 --> 00:37:38.659 
是原UI尺寸的62.4851％

00:37:39.726 --> 00:37:41.929 
你一定希望避免文本和图形

00:37:41.995 --> 00:37:44.398 
在这么小的尺寸时变得难以辨认

00:37:44.965 --> 00:37:47.534 
正因为如此 状态栏的字体粗细

00:37:47.601 --> 00:37:51.805 
嵌入应用和大量文本
都从常规变成了加粗

00:37:52.372 --> 00:37:55.409 
小尺寸时 粗字体看起来更清楚

00:37:56.276 --> 00:37:58.345 
而且对于非常关键的信息

00:37:59.046 --> 00:38:00.881 
可以试试用大字体

00:38:01.248 --> 00:38:04.985 
这就需要从界面上去掉一些
东西来获得更多空间

00:38:05.219 --> 00:38:07.521 
但无论怎么样 都不是件坏事

00:38:08.488 --> 00:38:10.457 
现在 按照这些指南

00:38:10.524 --> 00:38:13.927 
你的应用在Dock中看起来
会尽可能地方便查看

00:38:14.928 --> 00:38:16.363 
说到方便查看

00:38:16.730 --> 00:38:19.199 
你们中有些人可能会想到快捷视图

00:38:20.267 --> 00:38:23.370 
快捷视图会 收集

00:38:23.437 --> 00:38:27.140 
及时的、情景相关的瞬间
从用户经常使用的应用中

00:38:27.808 --> 00:38:31.545 
无独有偶 实质上Dock的
目的也一样

00:38:31.612 --> 00:38:34.882 
在简化整个平台体验时

00:38:35.649 --> 00:38:38.385 
在某种程度上说 Dock是
由快捷视图演变而来的

00:38:38.752 --> 00:38:42.055 
反过来说 在Dock中
快捷视图似乎没什么用

00:38:42.122 --> 00:38:44.191 
所以就把它从watchOS中移除了

00:38:44.758 --> 00:38:50.163 
这就表示 你要投入到快捷
视图设计中去的时间和想法

00:38:50.230 --> 00:38:53.467 
完全可以应用到考虑如何设计

00:38:53.534 --> 00:38:56.236 
应用使它在Dock中看起来更出色上

00:38:57.404 --> 00:38:58.272 
好了

00:38:58.605 --> 00:39:03.443 
那么 应用在watchOS 3上的
另一个重大变更是

00:39:03.510 --> 00:39:09.216 
一个很简单 但很强大的改进
就是人们如何在应用内跳转

00:39:10.184 --> 00:39:13.587 
绝大部分现有Apple Watch
应用的结构都是分层结构

00:39:13.954 --> 00:39:17.224 
一般来说就是一份顶级列表和
一些详情页面

00:39:17.724 --> 00:39:21.562 
这一点儿都不意外
因为我们倾向于分层组织数据

00:39:22.129 --> 00:39:24.631 
遗憾的是 在这些页面之间跳转

00:39:24.698 --> 00:39:29.436 
会很慢
因为你每次都要先返回顶级视图

00:39:31.004 --> 00:39:33.607 
比如说 如果我想查看某些详情视图

00:39:33.674 --> 00:39:36.210 
我选择其中一项 打开 返回

00:39:36.276 --> 00:39:38.545 
再选择另一项 再打开 再返回

00:39:39.012 --> 00:39:40.214 
以此类推

00:39:40.814 --> 00:39:43.183 
这就像你在一栋房子的其中一间屋子里

00:39:43.250 --> 00:39:45.352 
你想进入隔壁房间

00:39:45.419 --> 00:39:48.055 
但是 要进入隔壁房间
你得上一段楼梯

00:39:48.121 --> 00:39:50.123 
然后再下另一段楼梯

00:39:50.524 --> 00:39:51.992 
应该更快捷

00:39:52.059 --> 00:39:54.928 
就像进入隔壁房间只需要
打开一扇门就可以了

00:39:55.562 --> 00:39:58.866 
那么在watchOS 3中
我猜我们现在有“门”了

00:39:59.166 --> 00:40:02.703 
现在可以 直接从一个详情视图跳转到

00:40:02.769 --> 00:40:06.573 
另一个详情视图 通过上下滑动
或使用Digital Crown

00:40:07.474 --> 00:40:10.577 
可以想象成是纵向分页
从一个详情页面到下一个详情页面

00:40:11.411 --> 00:40:14.314 
如果你的应用已经采用了分层结构

00:40:14.648 --> 00:40:17.251 
那你应该好好考虑启用这个功能

00:40:17.684 --> 00:40:21.154 
但有一点要特别指出这种行为只能

00:40:21.221 --> 00:40:24.291 
当详情页面比显示屏尺寸短时才起作用

00:40:24.958 --> 00:40:26.760  
所以在老版本的Weather中

00:40:26.827 --> 00:40:29.763  
未来10日天气预报的页面
看起来就有点儿高

00:40:29.830 --> 00:40:32.999  
从今日预报页面上向下滚动
来查看未来10日天气预报

00:40:33.600 --> 00:40:36.270 
在新版Weather中
信息被推送到

00:40:36.336 --> 00:40:39.439 
一个子视图 这样所有内容
都能一下子适应页面

00:40:40.007 --> 00:40:43.877 
所以 如果你想这样做
你可能得先重构你的设计

00:40:43.944 --> 00:40:45.379 
使一切都跟屏幕尺寸匹配

00:40:46.013 --> 00:40:48.582 
如果是分页应用

00:40:49.716 --> 00:40:52.886 
现在是时候切换到分层

00:40:52.953 --> 00:40:54.254 
或考虑切换到分层应用了

00:40:54.821 --> 00:40:57.624 
用Digital Crown导航
效率更高

00:40:57.691 --> 00:41:00.427 
比从一个页面水平地滑动到
另一个页面

00:41:00.928 --> 00:41:03.597 
而且分页应用也不支持分层

00:41:03.997 --> 00:41:06.266 
显而易见 这里并不是一个限制

00:41:06.900 --> 00:41:11.939 
包含大量详情的顶级列表视图
是很有帮助的

00:41:12.506 --> 00:41:16.076 
从分页结构变成分层结构以后

00:41:16.376 --> 00:41:18.412 
我们的Weather应用可同时显示

00:41:18.478 --> 00:41:21.248 
多个城市的温度最高值和最低值

00:41:21.682 --> 00:41:22.950 
这很方便

00:41:24.151 --> 00:41:24.985 
好了

00:41:25.052 --> 00:41:30.591 
应用在watchOS 3上的
第三个重大变更跟粘性有关

00:41:31.358 --> 00:41:33.527 
听起来很有意思

00:41:33.894 --> 00:41:37.531 
粘性描述了一个应用
能在前台停留的时间的长短

00:41:37.965 --> 00:41:41.602 
在watchOS 3中
应用可以停留约8分钟

00:41:41.902 --> 00:41:43.871 
比以前长多了

00:41:44.404 --> 00:41:46.273 
当人们在用你的Watch应用时

00:41:46.340 --> 00:41:47.541 
放下手腕

00:41:47.875 --> 00:41:51.478 
当他们再抬起手腕时
首先看到的就是你的应用

00:41:51.545 --> 00:41:54.047 
只要放下和抬起手腕的
时间不超过8分钟

00:41:54.748 --> 00:41:59.152 
事实上 每次抬起手腕
计时器都会重新设置一个8分钟

00:41:59.953 --> 00:42:03.690  
应用粘性剂真的是一个非常重要的变更

00:42:04.191 --> 00:42:07.928  
Apple Watch应用本意就是帮助

00:42:07.995 --> 00:42:11.598  
记录可以持续数分钟甚至数小时的活动

00:42:12.132 --> 00:42:17.538 
但在此期间 Watch显示屏
可能会休眠一段时间

00:42:18.272 --> 00:42:20.507 
我们可以用购物单应用来举例

00:42:20.941 --> 00:42:26.847 
购物时 你的绝大部分时间
花在看价格、读标签、查看产地、

00:42:26.914 --> 00:42:29.216 
避免扔到其他人的购物车中

00:42:29.283 --> 00:42:30.284 
及让自己看起来更酷

00:42:30.751 --> 00:42:33.420 
还有很多诸如此类的活动

00:42:33.787 --> 00:42:37.691 
我们叫做会话活动或基于会话的活动

00:42:38.192 --> 00:42:42.896 
做晚饭、做体育运动、健身、问路

00:42:43.297 --> 00:42:46.300 
这些事儿都要持续一段时间

00:42:46.366 --> 00:42:50.470 
在此期间 人们会时不时地看
一下手表 做任务

00:42:51.104 --> 00:42:54.741 
如果粘性够大
会立即把你吸引到应用中

00:42:54.808 --> 00:42:58.045 
你最后一次看的
这就节省了很多时间

00:42:59.046 --> 00:42:59.880 
好了

00:42:59.947 --> 00:43:03.584 
现在说应用在watchOS上的
第四个重大变更

00:43:03.650 --> 00:43:07.287 
包括告知用户何时可以放下手腕

00:43:08.355 --> 00:43:10.524 
当人们在你的应用中发起某个任务时

00:43:10.591 --> 00:43:13.460 
他们期待获得确认反馈

00:43:13.894 --> 00:43:17.097 
任务是否成功？

00:43:17.598 --> 00:43:21.635 
遗憾的是 到底是成功或失败

00:43:21.702 --> 00:43:25.072 
或确定成功或失败是需要时间的

00:43:25.639 --> 00:43:28.242 
网络慢、Wi-Fi信号弱、

00:43:28.308 --> 00:43:32.446 
超远程蓝牙可能会导致通讯延迟...

00:43:36.183 --> 00:43:37.684 
或远程延迟

00:43:38.085 --> 00:43:41.021 
一些允许人们控制物理设备的应用

00:43:41.088 --> 00:43:43.624 
像车库门或遮光帘

00:43:43.690 --> 00:43:46.493 
就不能提供完成反馈

00:43:46.560 --> 00:43:49.897 
除非这些设备被完全打开
或关闭

00:43:50.631 --> 00:43:53.467 
而且有些服务 比如外卖

00:43:53.534 --> 00:43:57.971 
或订车应用就涉及与他人之间的通讯

00:43:58.372 --> 00:44:02.242 
众所周知 人们并不总能立
即给你反馈

00:44:03.377 --> 00:44:06.580 
在iPhone或Mac上

00:44:07.047 --> 00:44:10.384 
通常会让人们在你的应用中等待

00:44:10.450 --> 00:44:13.687 
当试着给他们返回确认反馈时

00:44:14.288 --> 00:44:17.391 
进度指示是保留人们注意
力的一种方式

00:44:17.457 --> 00:44:19.560 
给人们提供了有希望的反馈

00:44:20.060 --> 00:44:23.063 
一般是这样 “请稍等
我马上就来”

00:44:23.497 --> 00:44:26.466 
但是 可能会等上一段时间

00:44:26.834 --> 00:44:30.037 
而正在用应用的人会一直抬着手腕等

00:44:30.404 --> 00:44:32.372 
他们的肩膀开始酸了

00:44:32.439 --> 00:44:34.775 
过一秒钟就像过一分钟那么久

00:44:34.842 --> 00:44:36.777 
时间似乎变得很漫长

00:44:37.444 --> 00:44:41.748 
那么 为了在Apple Watch
上避免发生这种情况

00:44:41.815 --> 00:44:45.519 
你可以用NSURL后台下载任务

00:44:45.586 --> 00:44:47.521 
来跟服务器进行通讯

00:44:47.955 --> 00:44:49.423 
有两个作用

00:44:49.790 --> 00:44:52.359 
第一 确保能

00:44:52.426 --> 00:44:55.429 
跟服务器通讯 在应用被挂起之前

00:44:55.696 --> 00:45:00.267 
第二 服务器响应后
Apple Watch会唤醒应用

00:45:00.868 --> 00:45:04.271 
然后 反过来 你可以在后台快速反应

00:45:04.338 --> 00:45:07.007 
采取一些行动 比如发送本地通知

00:45:07.074 --> 00:45:09.209 
这也是watchOS 3的新功能

00:45:09.276 --> 00:45:12.145 
给使用应用的人提供反馈

00:45:12.613 --> 00:45:16.383 
比如说 假如你正在做一个外卖应用

00:45:17.117 --> 00:45:20.654 
人们点餐后 应用需要确认

00:45:20.721 --> 00:45:25.526 
餐厅可以完成订单 并提供一个
预计的送达时间

00:45:26.159 --> 00:45:31.298 
你一定不希望人们在应用计算
这些时一直干等着

00:45:31.932 --> 00:45:35.536 
相反 你可以立刻给出反馈

00:45:35.602 --> 00:45:37.905 
告诉他们
餐厅已经收到他们的订单

00:45:38.372 --> 00:45:41.175 
你还可以 也应该告诉他们

00:45:41.241 --> 00:45:45.312 
一旦餐厅接受订单并给出
预计送达的时间

00:45:45.746 --> 00:45:47.648 
你就会给他们发一条最终确认的信息

00:45:47.714 --> 00:45:50.150 
这样才算顺利处理了这个订单

00:45:51.251 --> 00:45:52.920 
如果你的处理方式合适的话

00:45:53.687 --> 00:45:56.557 
人们就会觉得没必要抬着
手腕等着了

00:45:57.157 --> 00:45:59.927 
他们相信应用一定是在很努力地计算

00:45:59.993 --> 00:46:02.396 
来完成分配给它的任务

00:46:02.863 --> 00:46:04.231 
如果一切顺利

00:46:04.965 --> 00:46:07.100 
你要给人们发一个本地通知

00:46:07.167 --> 00:46:09.736 
告诉他们 订单已经收到

00:46:09.803 --> 00:46:11.071 
并且正在处理

00:46:11.872 --> 00:46:15.209 
如果有问题 要明确指出
到底是哪儿的问题

00:46:15.275 --> 00:46:19.947 
并帮助人们修正问题
尽可能少地进行额外互动

00:46:20.647 --> 00:46:24.351 
一切的关键是信任

00:46:24.918 --> 00:46:28.889 
人们要信任你的应用正在运行
而且不会崩溃

00:46:29.223 --> 00:46:31.658 
而你也要确保通知他们

00:46:31.725 --> 00:46:35.062 
任务是否成功

00:46:35.662 --> 00:46:38.665 
既然关系到信任问题
你一定不希望让人们误会

00:46:38.732 --> 00:46:41.068 
任务已经全部完成了

00:46:41.134 --> 00:46:43.303 
而实际上还在进行中

00:46:43.704 --> 00:46:47.407 
这是撒谎 这对于建立信任是很不利的

00:46:49.109 --> 00:46:52.446 
好了 这些都是应用相关的新功能

00:46:52.513 --> 00:46:54.448 
还有很多要说的

00:46:54.515 --> 00:46:57.351 
但我想先到这儿
让我们回顾一下刚才的内容

00:46:57.818 --> 00:47:02.489 
我们谈到了新Dock UI和
如何使应用

00:47:02.556 --> 00:47:05.058 
尽可能地方便可见和可执行

00:47:05.492 --> 00:47:07.427 
我们也谈了Digital Crown

00:47:07.494 --> 00:47:11.865 
如何使详情页和
分层应用间的切换更有效

00:47:12.299 --> 00:47:14.801  
我们也了解了基于会话的应用
将如何受益于

00:47:14.868 --> 00:47:16.770  
应用粘性的变化

00:47:17.237 --> 00:47:20.474 
而且我们刚才也谈了如何制定本地通知

00:47:20.541 --> 00:47:22.476 
当应用在后台运行时

00:47:22.543 --> 00:47:26.547 
能让使用应用的人们放心地放下手腕

00:47:26.613 --> 00:47:27.881 
并保持一种快速的交互

00:47:28.682 --> 00:47:31.451 
我们认为watchOS的这些改进

00:47:31.518 --> 00:47:34.721 
会激励你们创建流畅的用户流

00:47:34.788 --> 00:47:37.291 
并缩短用户交互时间

00:47:38.759 --> 00:47:41.862 
若Apple Watch团队止步于此

00:47:41.929 --> 00:47:44.498 
这将是一次意义非同寻常的发布

00:47:44.565 --> 00:47:47.134 
那我今天应该也会谈很多内容

00:47:47.501 --> 00:47:48.936 
但他们并没有止步不前

00:47:49.002 --> 00:47:50.904 
他们就像一群超凡的成功者

00:47:50.971 --> 00:47:53.941 
就是那种让我在高中时显得非常烂的人

00:47:54.341 --> 00:47:57.845 
在watchOS 3中 有一些
很酷的新API和框架

00:47:57.911 --> 00:48:00.347 
你可以用它们做出一些不错的东西

00:48:00.948 --> 00:48:04.852  
对于初学者来说 watchOS 3
现在提供SpriteKit和SceneKit

00:48:05.219 --> 00:48:07.754  
就是我们的2D和3D图形框架

00:48:08.121 --> 00:48:11.592 
SpriteKit和SceneKit可以
渲染图形并让图形动起来

00:48:12.392 --> 00:48:15.596 
可以使元素响应手势

00:48:15.662 --> 00:48:18.465 
或者用程序控制元素 让它动起来

00:48:19.233 --> 00:48:21.335 
你可以实施一些物理现象

00:48:21.401 --> 00:48:22.636 
我的意思是 这很疯狂

00:48:22.870 --> 00:48:25.973 
力场、碰撞检测等等

00:48:26.640 --> 00:48:30.277  
你可能认为这些都是游戏里
才能用到的技术

00:48:30.344 --> 00:48:32.579  
但是你仍然可以应用到应用中

00:48:33.347 --> 00:48:36.450 
而且watchOS 3也支持手势

00:48:36.717 --> 00:48:40.120 
直到现在 触摸输入的处理都是间接的

00:48:40.487 --> 00:48:43.223 
你应用上的控件和视图会响应

00:48:43.290 --> 00:48:44.892 
触摸事件 以你的名义

00:48:45.325 --> 00:48:48.395 
现在你可以完全自定义了

00:48:49.396 --> 00:48:53.133  
你可以自定义按、滑动、

00:48:53.800 --> 00:48:55.035  
摇动、

00:48:55.802 --> 00:48:57.337  
或长按

00:48:58.238 --> 00:49:01.708  
长按需要按一会儿好了

00:49:03.644 --> 00:49:07.648 
在watchOS 3中 你现在有
未经处理的Digital Crown事件权限了

00:49:08.081 --> 00:49:11.118 
你可以用这个数据改变 颜色、
尺寸

00:49:11.185 --> 00:49:13.921 
和其他可视化属性 UI元素的

00:49:14.388 --> 00:49:16.056 
你可用Digital Crown

00:49:16.123 --> 00:49:18.692 
变更选择或修改值

00:49:19.459 --> 00:49:23.063 
那么 你们能用这些做什么呢？

00:49:23.564 --> 00:49:25.632 
嗯 对于初学者 很多人都想

00:49:25.699 --> 00:49:28.569 
用一个环形或弧形将数据
可视化

00:49:29.069 --> 00:49:31.905 
你可以用SpriteKit用程序
画出这样的元素

00:49:31.972 --> 00:49:36.109 
这样你可以方便地使任何
两个任意值动起来

00:49:37.010 --> 00:49:38.779 
你可以用默认的加速曲线

00:49:38.846 --> 00:49:42.049 
是一种非常棒的加速然后
减速的效果

00:49:42.816 --> 00:49:45.586 
或者 你可以给加速曲线
做一些自定义

00:49:45.652 --> 00:49:49.890 
比如活泼的动画或
你想实现的任何动画

00:49:50.190 --> 00:49:52.159 
我们有大量的开源加速曲线

00:49:52.226 --> 00:49:55.596 
是由SpriteKit开发者团体中
很慷慨的人设计的

00:49:56.330 --> 00:49:59.867 
你甚至可以修改环形的填充颜色

00:49:59.933 --> 00:50:01.735 
来反映当前的值

00:50:02.669 --> 00:50:05.472 
数据可视化 如图表和图形

00:50:05.539 --> 00:50:07.841 
可以用动画的形式表现出来

00:50:08.275 --> 00:50:10.244 
通过用程序画这个图表

00:50:10.310 --> 00:50:13.380 
我们可以让内容动起来
增加视觉效果

00:50:14.014 --> 00:50:16.617 
或者我们可以用动画来吸引人们去关注

00:50:16.683 --> 00:50:18.552 
图表的指定部分

00:50:19.219 --> 00:50:20.954 
SpriteKit属性是可变的

00:50:21.021 --> 00:50:23.223 
所以你可很简便地把
一个图表的意图修改为

00:50:23.290 --> 00:50:26.059 
显示不同的属性 基于用户输入

00:50:26.760 --> 00:50:31.031 
或者 也许你想 来让人们
检查图表中不同的值

00:50:31.098 --> 00:50:32.199 
用一个摇动手势

00:50:32.666 --> 00:50:33.500 
就是这样

00:50:34.001 --> 00:50:37.838 
或者再好点儿
让人们用Digital Crown

00:50:37.905 --> 00:50:39.139 
来做同样的事

00:50:39.640 --> 00:50:42.476 
或者可以允许人们缩放图表

00:50:42.910 --> 00:50:45.913 
或者可以让人们滚动查看

00:50:46.980 --> 00:50:50.083 
通过Digital Crown控制所有这些

00:50:50.150 --> 00:50:55.689 
在了解图表如何响应之后
你可以控制响应式旋转的快慢

00:50:56.356 --> 00:50:57.691 
现在 我继续往下说

00:50:57.758 --> 00:51:00.427 
只要想起这个东西来
就觉得非常有意思

00:51:00.494 --> 00:51:02.996 
但它可能会剥夺你所有的乐趣

00:51:03.664 --> 00:51:07.134 
我鼓励你们学习SpriteKit
和SceneKit

00:51:07.201 --> 00:51:09.636 
并尝试使用这些技术

00:51:09.703 --> 00:51:13.073 
创建更丰富、更有意义的体验

00:51:13.574 --> 00:51:15.108 
但请记住一点

00:51:15.776 --> 00:51:18.912 
自由越多 责任越大

00:51:19.813 --> 00:51:22.482 
如果让东西动起来
只是因为看起来很酷

00:51:22.549 --> 00:51:24.251 
这真的不是一个很好的动力

00:51:24.718 --> 00:51:27.588 
如果使用得当

00:51:27.654 --> 00:51:31.491 
动画可以把意思更快地表达出来
从而缩短交互时间

00:51:31.959 --> 00:51:34.995 
同样的 图形交互

00:51:35.062 --> 00:51:39.132 
应该提供更丰富
信息量更大的用户体验

00:51:39.700 --> 00:51:44.238 
最好能减少更复杂或更稠密的UI

00:51:45.572 --> 00:51:46.507 
好了

00:51:46.573 --> 00:51:48.909 
那么 我们今天说了很多内容

00:51:48.976 --> 00:51:51.812 
最后我还想留给你们一个思考

00:51:51.879 --> 00:51:54.314 
跟设计watch应用有关

00:51:55.382 --> 00:52:00.821 
设计优秀的Apple Watch体验
需要保证流程简单化

00:52:01.622 --> 00:52:05.325 
但是保持简单 却并不是
一件简单的事儿

00:52:05.993 --> 00:52:08.262 
如果你知道怎么做
会给你的应用加不少分

00:52:09.162 --> 00:52:12.599 
保持简单涉及到要做出
一些艰难的选择

00:52:12.666 --> 00:52:14.701 
即应用要做什么

00:52:15.135 --> 00:52:19.273 
意思是 要拒绝许多听起来
很有意思的想法

00:52:19.907 --> 00:52:23.577 
但是你能做并不意味着你应该做

00:52:24.611 --> 00:52:28.282 
保持简单的另一层意思是
深入地思考

00:52:28.348 --> 00:52:31.885 
人们的日常生活

00:52:32.452 --> 00:52:35.122 
人们会在很长时间内使用你的应用

00:52:35.422 --> 00:52:39.059 
而应用的设计方式应该是
使用时间长短的真实反映

00:52:39.660 --> 00:52:44.631 
要少考虑一些静态屏幕
多考虑一些用户流

00:52:45.332 --> 00:52:48.735 
事实是这些用户流并不是连续的、

00:52:48.802 --> 00:52:50.804 
不间断的体验

00:52:51.104 --> 00:52:54.708 
人们会在任意时间使用应用

00:52:55.008 --> 00:52:59.146 
当他们用应用时
他们总是期待应用有新数据

00:52:59.479 --> 00:53:02.549 
并与他们经常变化的需求相关

00:53:03.217 --> 00:53:05.919 
你的应用应该提前假设人们想干什么

00:53:05.986 --> 00:53:07.287 
在任何一个指定的时间段

00:53:07.487 --> 00:53:10.357 
并尝试主动地提供这些信息...

00:53:11.491 --> 00:53:15.295 
和功能 这就是情景相关和实效性

00:53:15.929 --> 00:53:18.832 
要实现这个目的并没有那么简单

00:53:20.334 --> 00:53:24.404 
设计Apple Watch与
设计iPhone

00:53:24.771 --> 00:53:28.141 
iPad、Apple TV
或Mac不一样

00:53:28.876 --> 00:53:33.814 
我们了解这些设备应用的设计和开发

00:53:33.881 --> 00:53:37.918 
并且已经限定了我们 的观念
对应用的复杂程度

00:53:38.352 --> 00:53:40.053 
如何跳转

00:53:40.420 --> 00:53:44.091 
愿意花多长时间来用你的应用

00:53:44.992 --> 00:53:49.096 
试着识别和挑战你自己
根深蒂固的假想

00:53:49.663 --> 00:53:52.132 
当然我知道
说起来容易做起来难

00:53:52.533 --> 00:53:56.737 
但这是制作优秀watch应用
的至关重要的一步

00:53:57.671 --> 00:53:58.972 
关于Apple Watch

00:53:59.339 --> 00:54:02.109 
也许我能给你的最好建议

00:54:02.176 --> 00:54:05.913 
是考虑功能 而不是应用

00:54:06.613 --> 00:54:12.319 
优秀的Apple Watch应用
可能只提供一个功能

00:54:13.120 --> 00:54:16.123 
比如说Press Record实际
就只有一个功能

00:54:16.190 --> 00:54:21.228 
它的complication就是录音按钮
而应用就是录音界面和停止按钮

00:54:21.795 --> 00:54:23.130 
很好用

00:54:23.197 --> 00:54:26.834 
即使我只用了一句话来描述这个应用

00:54:27.968 --> 00:54:31.071 
刹那间就过去了两秒钟

00:54:31.605 --> 00:54:35.742 
设计这种简洁的交互绝不简单

00:54:36.143 --> 00:54:39.546 
但我希望我们今天所讨论
的概念和方法

00:54:39.613 --> 00:54:42.316 
可以激励你们去尝试

00:54:43.050 --> 00:54:45.619 
而且我很期待看到你们
取得新的成果

00:54:45.686 --> 00:54:48.388 
用watchOS 3的新功能

00:54:48.722 --> 00:54:50.858 
为该新版本
很多人都付出了非同寻常努力

00:54:50.924 --> 00:54:53.560 
而我们的努力就是为了帮助你们

00:54:53.627 --> 00:55:00.200 
打造更创新、更赏心悦目、
平台可定制性更强的体验

00:55:01.168 --> 00:55:04.238 
好了 如果想更多地了解
我们今天讨论的内容

00:55:04.304 --> 00:55:07.441 
你们可以看一下视频页
那儿有许多附加资料

00:55:07.841 --> 00:55:12.112 
再说一次 一定要看watchOS
Human Interface Guidelines

00:55:12.179 --> 00:55:14.648 
那里真的有很多非常棒的资料

00:55:14.715 --> 00:55:17.384 
我们会在这个夏季持续更新

00:55:17.451 --> 00:55:18.886 
所以请定期查看

00:55:19.353 --> 00:55:22.823 
我们还有许多很不错的
Watch工程研讨会

00:55:22.890 --> 00:55:25.559 
我强烈建议你们去参加
SpriteKit研讨会

00:55:25.626 --> 00:55:28.295 
再看一些已经实现的相关视频

00:55:28.862 --> 00:55:31.932 
今年 我们有很多不错的设计研讨会

00:55:31.999 --> 00:55:33.200 
以后还会有更多

00:55:33.500 --> 00:55:36.503 
我强烈建议你们参加
“内嵌式应用设计”研讨会

00:55:36.570 --> 00:55:38.972 
可以让你们的设计更人性化

00:55:39.039 --> 00:55:41.875 
这对于用户们来说相当实用

00:55:42.276 --> 00:55:45.913 
我还推荐今天早晨的关于
“排印与字体”的这个视频

00:55:45.979 --> 00:55:47.881 
还有一场设计研讨会

00:55:47.948 --> 00:55:50.851 
讲的是互动式UI设计
你可以总结自己的想法

00:55:50.918 --> 00:55:53.620 
提炼一些精华
然后做出一些非常出色的东西

00:55:53.687 --> 00:55:55.856 
好了
非常感谢你们来参加这场研讨会