00:00:20.153 --> 00:00:26.260
高级测试和持续集成

00:00:36.470 --> 00:00:37.804
大家下午好

00:00:38.972 --> 00:00:39.940
我叫Zoltan

00:00:40.607 --> 00:00:43.010
等下我的同事Eric也会上台

00:00:44.444 --> 00:00:46.513
我们都是Xcode组的工程师

00:00:49.516 --> 00:00:53.320
如今的软件开发
很像指挥管弦乐队

00:00:54.454 --> 00:00:57.357
你和我维护一系列测试

00:00:57.824 --> 00:01:00.460
如果它们中的一个
运行不正常

00:01:00.994 --> 00:01:04.932
我们需要快速理解和纠正它

00:01:07.334 --> 00:01:12.439
可能你是个测试大师
有成百上千个测试

00:01:13.574 --> 00:01:19.580
Xcode有工具和技术来指挥
即使是最大型的测试程序组

00:01:20.514 --> 00:01:22.516
今天我们将向你展示

00:01:24.918 --> 00:01:26.720
首先我们要介绍一些概念

00:01:26.787 --> 00:01:29.156
在之前的演讲里还没有被介绍

00:01:30.257 --> 00:01:34.728
然后我们会介绍
一些Xcode中的新特性

00:01:36.763 --> 00:01:38.632
以及Xcode Server

00:01:40.400 --> 00:01:43.504
尤其是可配置集成用户

00:01:45.305 --> 00:01:48.242
然后我们会以xcodebuild
的新特性做为结束

00:01:49.743 --> 00:01:50.878
让我们开始吧

00:01:58.151 --> 00:01:59.920
做为测试的简要重述

00:02:00.287 --> 00:02:02.756
测试有4个特征

00:02:03.957 --> 00:02:05.559
XCTest

00:02:07.728 --> 00:02:10.264
你用来测试的框架

00:02:11.298 --> 00:02:14.301
针对Objective-C
和Swift

00:02:14.935 --> 00:02:19.206
你的测试被编译成一些束

00:02:21.675 --> 00:02:25.412
Xcode是编写测试的IDE

00:02:26.013 --> 00:02:30.250
你还可以在开发时
运行单独的测试

00:02:33.287 --> 00:02:36.023
你还可以在Xcode里查看报告

00:02:36.223 --> 00:02:39.293
来自本地运行
和Xcode Server的测试

00:02:41.361 --> 00:02:43.163
关于Xcode Server

00:02:43.797 --> 00:02:47.267
是你的测试的
连续集成解决方案

00:02:48.535 --> 00:02:51.338
你设立bot来
周期性的运行测试

00:02:52.606 --> 00:02:55.142
Xcode Server
会为你生成报告

00:02:56.310 --> 00:02:59.046
如果发生错误
它会通知你

00:03:00.113 --> 00:03:03.150
这是你追踪项目的一个好方法

00:03:06.620 --> 00:03:09.590
Xcode Server是在
xcodebuild的基础上建立的

00:03:10.657 --> 00:03:13.861
可在命令行使用xcodebuild

00:03:14.161 --> 00:03:17.898
你可以在终端运行测试
并查看结果

00:03:21.602 --> 00:03:24.404
Xcodebuild是构建部件

00:03:24.471 --> 00:03:28.008
对于我们在后面会看到的
定制连续集成系统的构建部件

00:03:30.110 --> 00:03:33.647
你可以在我们之前的演讲里
了解更多关于这4个特征的信息

00:03:34.147 --> 00:03:38.785
但是今天我们想看一些
之前没有涉及的概念

00:03:39.419 --> 00:03:41.488
我们想把你带到幕后

00:03:41.889 --> 00:03:44.458
向你展示
你的测试是怎样运行的

00:03:46.460 --> 00:03:49.763
要这样做
最好想象一个时间线

00:03:51.765 --> 00:03:55.435
当你的测试被编译后
它们必须被托管

00:03:56.136 --> 00:03:59.206
这使得测试首先被运行

00:04:00.474 --> 00:04:02.276
一旦这些测试在运行

00:04:02.476 --> 00:04:04.611
你可以看到详细的测试进展

00:04:05.012 --> 00:04:08.515
用一个叫监视的技术

00:04:08.949 --> 00:04:12.452
我们来看看这2个概念
托管和监视

00:04:13.220 --> 00:04:14.655
让我们首先来看看托管

00:04:16.023 --> 00:04:18.091
根据你是否有单元测试或UI测试

00:04:18.158 --> 00:04:21.962
托管的故事不同

00:04:23.463 --> 00:04:29.203
你的测试束被直接载入到
你的应用中

00:04:29.870 --> 00:04:34.174
在这种情况下
我们称你的应用为寄主应用

00:04:36.210 --> 00:04:40.314
但是对于你的UI测试
你的测试束将被载入UI测试运行器

00:04:40.380 --> 00:04:44.952
和你的应用是分离的

00:04:46.153 --> 00:04:48.522
在这种情况下
你的应用被称为

00:04:48.589 --> 00:04:50.090
目标应用

00:04:51.258 --> 00:04:53.327
这里有一些暗示

00:04:56.630 --> 00:04:59.533
单元测试中
你可以直接访问

00:04:59.600 --> 00:05:02.269
你的应用数据结构和API

00:05:04.004 --> 00:05:06.773
但是在你的UI测试中

00:05:07.407 --> 00:05:10.811
你通过辅助功能和发送事件
来访问应用

00:05:11.144 --> 00:05:16.216
就像用户一样从外部来观察应用

00:05:20.153 --> 00:05:23.156
对于单元测试
你的所有测试都将被运行

00:05:23.824 --> 00:05:26.260
在寄主应用的同一次运行中

00:05:26.627 --> 00:05:30.964
所以在测试之中
你需要注意清理工作

00:05:33.467 --> 00:05:38.305
但是对于UI测试
你的测试可以结束并重新启动应用

00:05:38.705 --> 00:05:42.943
所以这利于测试
你的应用怎样启动

00:05:45.979 --> 00:05:47.247
这就是托管

00:05:47.548 --> 00:05:50.150
这就是你的测试
是怎样被启动的

00:05:51.919 --> 00:05:53.554
一旦你的测试在运行中

00:05:53.787 --> 00:05:55.989
你可以用被称为监视的技术

00:05:56.056 --> 00:05:59.026
查看你的测试的详细进展

00:05:59.760 --> 00:06:02.196
让我们放大这条时间线

00:06:04.464 --> 00:06:08.001
在这里你可以看到2个测试用例
一个接一个运行

00:06:08.836 --> 00:06:11.572
这些测试用例属于一个测试组

00:06:12.873 --> 00:06:15.742
一个测试组对应你写的一个测试类

00:06:17.144 --> 00:06:20.280
如果你在测试束中有多个测试组

00:06:22.549 --> 00:06:24.818
你可能想要做一些设置工作

00:06:24.885 --> 00:06:26.687
为任何会运行的测试

00:06:27.321 --> 00:06:29.256
或者也许在测试完成后

00:06:29.590 --> 00:06:31.425
做一些析构工作

00:06:32.526 --> 00:06:35.929
或者在测试中
做一些定制的记录

00:06:38.699 --> 00:06:42.269
你可以用XCTestObservation协议
来做这些

00:06:43.070 --> 00:06:45.706
你编写一个符合这个协议的对象

00:06:46.106 --> 00:06:49.209
在和一个
共享的监视中心注册它后

00:06:50.310 --> 00:06:52.346
你的对象会接收到回调

00:06:53.747 --> 00:06:56.550
比如在任何测试开始前

00:06:56.717 --> 00:07:00.087
你得到这个
束将会开始的回调

00:07:01.288 --> 00:07:03.290
那么在组开始前

00:07:03.624 --> 00:07:06.994
你会得到一个
组将会开始的回调

00:07:08.629 --> 00:07:10.998
对每一个要运行的测试用例

00:07:11.532 --> 00:07:15.202
你会得到一个
用例将会开始的回调

00:07:15.536 --> 00:07:19.506
和测试用例结束的回调

00:07:21.808 --> 00:07:23.277
如果出错了

00:07:23.443 --> 00:07:26.713
你会得到
用例失败的回调

00:07:28.148 --> 00:07:30.651
因为测试结束了

00:07:31.084 --> 00:07:33.287
你会得到
测试组结束的回调

00:07:34.087 --> 00:07:35.956
以及你进行任何工作的最后机会

00:07:36.123 --> 00:07:40.060
在这里
测试束结束的回调

00:07:43.830 --> 00:07:45.432
这是一个例子

00:07:46.333 --> 00:07:49.002
这个对象遵守
XCTestObservation协议

00:07:49.736 --> 00:07:51.538
在这个对象的初始化函数里

00:07:51.605 --> 00:07:54.374
我和共享监视中心进行注册

00:07:55.008 --> 00:07:57.544
随着测试的进行

00:07:57.778 --> 00:08:00.647
我记录事件
比如这个

00:08:02.182 --> 00:08:06.386
测试出错时 我记录这个

00:08:08.288 --> 00:08:11.091
我也会记录测试结束

00:08:13.594 --> 00:08:16.129
一个理想的
设立监视器的地方

00:08:16.496 --> 00:08:19.600
是你的测试束
的info.plist文件

00:08:20.767 --> 00:08:24.071
你通过使用Xcode的
Info.plist编辑器来这样做

00:08:24.404 --> 00:08:27.474
你添加这个NS主类入口

00:08:29.176 --> 00:08:34.581
这是你的监视器
专门针对测试的初始化

00:08:35.749 --> 00:08:38.652
它是和类载入初始器独立的

00:08:42.756 --> 00:08:45.492
这就是托管和监视

00:08:45.726 --> 00:08:47.761
他们是有用的概念
来帮助理解

00:08:47.828 --> 00:08:50.264
你的测试是怎么在幕后运行的

00:08:50.564 --> 00:08:53.233
还帮助你诊断测试中出现的问题

00:08:55.636 --> 00:08:57.638
让我们看看Xcode 8中的新特性

00:08:59.907 --> 00:09:03.110
崩溃是测试失败的一个常见原因

00:09:04.044 --> 00:09:07.814
崩溃可能发生在宿主应用

00:09:08.081 --> 00:09:09.883
和目标应用中

00:09:11.485 --> 00:09:15.489
通常Xcode会重启宿主应用

00:09:15.556 --> 00:09:17.157
来完成你的测试组

00:09:17.591 --> 00:09:23.697
这需要你自己来收集
解决崩溃所需的诊断信息

00:09:25.599 --> 00:09:28.235
我很高兴的宣布

00:09:28.569 --> 00:09:31.138
今年Xcode会帮助解决这个问题

00:09:31.538 --> 00:09:35.008
我们会在测试报告中
帮你收集崩溃记录

00:09:35.809 --> 00:09:39.012
对UI和单元测试

00:09:39.413 --> 00:09:44.418
对本地和在服务器上运行的测试

00:09:44.484 --> 00:09:47.888
崩溃记录会被收集到测试报告中

00:09:48.422 --> 00:09:52.259
你会在那看到用文本呈现的崩溃

00:09:52.926 --> 00:09:57.297
或者你选择查看崩溃的上下文

00:09:58.498 --> 00:10:00.167
我想现在向你展示

00:10:02.269 --> 00:10:03.904
Eric和我最近都在夜间活动

00:10:04.505 --> 00:10:07.841
我们在空闲时间开发tvOS应用

00:10:08.108 --> 00:10:11.278
现在我通过按运行按钮来启动它

00:10:18.418 --> 00:10:21.154
这个应用是用一些
测试的奇怪的乐队名称

00:10:21.221 --> 00:10:24.391
来寻找附近的音乐会

00:10:25.592 --> 00:10:28.762
我可以通过键盘上的键进入模拟器

00:10:31.665 --> 00:10:34.201
Eric和我为这个应用加入新特性

00:10:34.434 --> 00:10:37.504
来支持禁用了位置服务的用户

00:10:38.605 --> 00:10:41.175
让我向你演示
这对那些用户是怎样的

00:10:44.878 --> 00:10:46.713
我会进入主菜单

00:10:50.551 --> 00:10:51.852
在隐私选项里

00:10:52.519 --> 00:10:55.055
我将禁用位置服务

00:10:59.860 --> 00:11:01.495
我将进入Xcode

00:11:04.031 --> 00:11:06.834
在这我们为那些用户
添加了一个视图控制器

00:11:07.501 --> 00:11:09.203
这允许他们输入一个邮编

00:11:10.838 --> 00:11:14.908
让我为这个视图控制器再添加个测试

00:11:21.248 --> 00:11:24.518
我希望那些单元测试
在它们自己的方案中运行

00:11:26.153 --> 00:11:28.455
我会向上来到方案菜单

00:11:28.755 --> 00:11:31.825
我将复制这个已有的方案

00:11:36.296 --> 00:11:38.232
并给它取一个有意义的名称

00:11:42.503 --> 00:11:44.872
然后在这个方案的测试行动里

00:11:45.606 --> 00:11:47.574
我禁用调试器

00:11:48.075 --> 00:11:51.411
这是一个技术
它允许我运行我的测试

00:11:52.145 --> 00:11:55.048
不会有东西来打断测试组

00:11:55.115 --> 00:11:57.684
它不会进入调试器

00:11:58.285 --> 00:12:00.854
与你的测试如何在
Xcode Server上运行很类似

00:12:03.323 --> 00:12:06.460
我还会禁用和位置服务不相关的测试

00:12:09.129 --> 00:12:10.631
我将分享该方案

00:12:14.401 --> 00:12:16.303
我用Command-U运行测试

00:12:33.220 --> 00:12:37.624
这是给禁用位置服务用户的
新视图控制器

00:12:38.292 --> 00:12:40.594
他们可以选择输入邮编

00:12:42.296 --> 00:12:45.132
现在 测试是输入邮编

00:12:53.140 --> 00:12:55.509
那是出乎意料的崩溃

00:12:56.043 --> 00:12:59.379
当下 Xcode聚集了崩溃日志

00:12:59.813 --> 00:13:01.448
报告测试失败

00:13:01.515 --> 00:13:02.916
让我们看看

00:13:04.885 --> 00:13:06.753
这是失败的测试

00:13:07.287 --> 00:13:10.791
我可以点击跳到测试报告

00:13:12.559 --> 00:13:14.962
我将展示测试抄本

00:13:16.063 --> 00:13:19.299
这里是测试输入邮编时的事件

00:13:19.900 --> 00:13:22.336
此处最底部是崩溃

00:13:24.037 --> 00:13:28.108
现在我可以点击查看该崩溃的文本显示

00:13:28.175 --> 00:13:31.712
但这情况下
我想向你展示崩溃的上下文源码

00:13:32.112 --> 00:13:34.114
所以 我将点击此处的箭头

00:13:36.116 --> 00:13:39.586
这就是崩溃发生的那一行

00:13:40.287 --> 00:13:44.591
你可以在左上角看见调试导航中的栈帧

00:13:47.261 --> 00:13:52.566
现在我就能看见上下文源码中的崩溃
并且诊断问题所在

00:13:53.700 --> 00:13:57.271
我恰巧发现引用了错误的视图控制器

00:13:57.337 --> 00:14:00.874
应该是presenting ViewController
而不是parent

00:14:02.176 --> 00:14:03.677
所以 我将做个修改

00:14:04.545 --> 00:14:07.981
我将通过去测试导航来重新运行测试

00:14:08.815 --> 00:14:10.717
点击此处的图标

00:14:16.290 --> 00:14:19.860
之前我向你们展示过
本地测试运行的测试报告

00:14:20.694 --> 00:14:24.731
但那个报告将看上去与出自
Xcode Server的完全一致

00:14:28.502 --> 00:14:31.038
现在测试是重新输入邮编

00:14:40.981 --> 00:14:43.283
太棒了 这些测试通过了

00:14:43.984 --> 00:14:46.520
我们现在登记测试并...

00:14:47.120 --> 00:14:51.158
在支持禁用位置服务用户这方面
建立信心

00:14:52.326 --> 00:14:54.528
但 现在 让我们回到幻灯片

00:14:56.897 --> 00:15:01.668
你已经看过Xcode
怎样收集崩溃记录

00:15:01.969 --> 00:15:04.271
并在测试报告中包括它们

00:15:05.339 --> 00:15:08.876
你可以选择查看
那些崩溃的文本呈现

00:15:08.942 --> 00:15:14.548
或者你可以查看
崩溃的上下文源码

00:15:15.015 --> 00:15:17.618
这是诊断问题的一个好方法

00:15:18.018 --> 00:15:21.255
并且在你的源码
上下文中修正问题

00:15:24.124 --> 00:15:26.693
我们在Xcode Server中
有一些新特性

00:15:27.494 --> 00:15:32.099
为了向你们展示更多
欢迎同事Eric Dudiak上台

00:15:37.404 --> 00:15:39.206
下午好
我是Eric Dudiak

00:15:39.273 --> 00:15:41.575
我将和你们谈论
Xcode Server

00:15:41.642 --> 00:15:43.644
及Xcode 8中有哪些新特性

00:15:45.078 --> 00:15:48.382
让我们看一下概述
关于我们要谈到的

00:15:48.515 --> 00:15:50.384
Xcode 8和
Xcode Server

00:15:50.884 --> 00:15:54.588
我们有定制的环境变量
你可以设置它来集成

00:15:55.622 --> 00:15:59.660
我们有高级触发器编辑流程
我们在Xcode 8中改进了它

00:16:03.063 --> 00:16:05.999
我们还有一些
对追踪和归责的改进

00:16:06.466 --> 00:16:09.503
来确保bot中出现问题时你被通知

00:16:10.737 --> 00:16:13.340
我们还会看到那将怎样
和升级集成一起工作

00:16:13.407 --> 00:16:14.808
这是我们为你提供的一个新特性

00:16:15.943 --> 00:16:18.645
最后我们将看到
可配置的集成用户

00:16:18.712 --> 00:16:20.247
也是Xcode 8新加入的

00:16:21.114 --> 00:16:24.351
让我们开始讨论定制环境变量

00:16:24.585 --> 00:16:25.752
有点像作弊

00:16:25.819 --> 00:16:28.055
实际上它在Xcode 7.3中出现

00:16:28.355 --> 00:16:30.691
它让你配置环境

00:16:30.757 --> 00:16:32.926
这个环境在bot传递给
Xcodebuild

00:16:32.993 --> 00:16:34.895
这将控制你的集成将被怎样运行

00:16:34.962 --> 00:16:37.364
你可以配置任意多你想要的设置

00:16:37.431 --> 00:16:39.199
为你在服务器上运行的bot

00:16:39.433 --> 00:16:41.368
有可能和在本地运行的不同

00:16:41.869 --> 00:16:45.105
定制你的服务器怎样运行
你的集成是有利的

00:16:45.172 --> 00:16:48.642
不需在你的项目中新建很多方案
就可以完成这个是很好的

00:16:50.611 --> 00:16:52.613
现在来到Xcode 8的新特性

00:16:53.146 --> 00:16:56.183
我们显著改进了编辑触发器的体验

00:16:56.250 --> 00:16:59.353
我们有两种触发器
脚本和电子邮件

00:16:59.853 --> 00:17:01.755
首先让我们谈谈脚本触发器

00:17:01.822 --> 00:17:03.724
他们在你的集成前或后运行

00:17:03.790 --> 00:17:06.727
他们就是普通的shell脚本

00:17:06.792 --> 00:17:09.296
我们改进了编辑器
给你更多的空间来查看脚本

00:17:09.363 --> 00:17:12.999
并且你可以看到它们里面有什么

00:17:13.066 --> 00:17:15.435
你可以看到更多

00:17:15.969 --> 00:17:18.805
这些行还允许你给触发器命名

00:17:18.872 --> 00:17:20.641
如果你在组里工作
这些有帮助

00:17:21.008 --> 00:17:25.112
你的其他组员可以看到
每个触发器应该做什么

00:17:25.179 --> 00:17:26.946
如果你有一个很长的脚本

00:17:27.013 --> 00:17:28.949
那是你集成触发器的一部分

00:17:29.016 --> 00:17:32.119
你可以看到它是在
Xcode正在集成时被唤起的

00:17:32.186 --> 00:17:34.154
当你在状态UI里
看产品的集成过程时

00:17:34.221 --> 00:17:36.823
你实际上可以看到
哪个脚本正在运行

00:17:37.791 --> 00:17:39.893
最后如果你后来又有一个新脚本

00:17:39.960 --> 00:17:41.762
你想在其他脚本之前
运行这个新脚本

00:17:41.828 --> 00:17:46.233
你可以在这个UI里
重新对触发器排序

00:17:46.300 --> 00:17:49.536
只需要添加一个新的脚本触发器
并把它拖到顶端

00:17:49.603 --> 00:17:51.738
它会成为在bot中
第一个运行的

00:17:53.640 --> 00:17:56.276
现在让我们看看
其他各类的触发器

00:17:56.343 --> 00:17:57.945
我们有电子邮件通知

00:17:58.011 --> 00:17:59.246
在Xcode Server历史中

00:17:59.313 --> 00:18:02.783
总是一封邮件
对应一个集成设置

00:18:02.850 --> 00:18:04.685
这会造成大量垃圾邮件

00:18:05.085 --> 00:18:09.223
为了减少在你的
收件箱中的邮件数量

00:18:09.289 --> 00:18:12.626
我们把这类触发器
分成2种不同类型

00:18:12.793 --> 00:18:15.495
我们仍然有报告触发器
或者报告邮件触发器会出现

00:18:15.562 --> 00:18:17.731
在每次你运行集成

00:18:17.898 --> 00:18:20.033
虽然现在你可以调试它们

00:18:20.334 --> 00:18:23.770
每天或每周只运行一次

00:18:24.004 --> 00:18:25.706
不管你的bot运行多频繁

00:18:25.772 --> 00:18:27.708
不会产生大量的邮件

00:18:28.108 --> 00:18:29.776
你的收件箱不会被大量邮件淹没

00:18:29.843 --> 00:18:31.845
我们认为这对管理者很有利

00:18:31.912 --> 00:18:33.747
管理者希望
持续检查bot的健康状态

00:18:34.081 --> 00:18:37.084
但不想收件箱充满了邮件

00:18:39.219 --> 00:18:42.155
此外我们还允许你
定义邮件里的某些域

00:18:42.222 --> 00:18:45.759
这样你就可以配置抄送和回复域

00:18:46.226 --> 00:18:48.195
使你能更多控制

00:18:48.262 --> 00:18:50.130
你要发送的邮件类型

00:18:51.865 --> 00:18:53.534
我在之前提示过

00:18:53.600 --> 00:18:55.035
我们现在有两种
不同的电子邮件触发器

00:18:55.102 --> 00:18:56.537
另一类是问题触发器

00:18:56.870 --> 00:18:57.971
当有问题发生时

00:18:58.038 --> 00:19:02.342
我们会给你发一封电子邮件

00:19:02.409 --> 00:19:03.577
给对这个问题感兴趣的人

00:19:03.644 --> 00:19:05.746
我们会在接下来谈谈这个

00:19:05.913 --> 00:19:08.015
但是如果你有更多的提交者

00:19:08.515 --> 00:19:10.150
是你要集成的代码的参与者

00:19:10.217 --> 00:19:11.985
那你当然想要发邮件给他们

00:19:12.152 --> 00:19:13.954
我们允许你在这过滤接收者

00:19:14.021 --> 00:19:16.890
来确保你只给你想要的人发邮件

00:19:17.324 --> 00:19:18.892
让我们看看这个

00:19:20.327 --> 00:19:22.796
如果你有多个仓库
你可以选择只发邮件

00:19:22.930 --> 00:19:25.966
给来自特定仓库的提交者

00:19:26.333 --> 00:19:29.136
或者你知道哪个域名
所有你想要发送邮件的邮件地址

00:19:29.203 --> 00:19:31.104
都会来自那个域名

00:19:31.371 --> 00:19:33.040
你可以在这添加那些

00:19:35.843 --> 00:19:38.579
让我们花一些时间来谈谈问题

00:19:38.745 --> 00:19:40.581
或者构建问题

00:19:41.114 --> 00:19:44.585
没有人是完美的
也不会每次都写出完美代码

00:19:44.651 --> 00:19:46.353
这是我们有连续集成的原因

00:19:46.420 --> 00:19:48.055
这是我们有单元测试的原因

00:19:48.355 --> 00:19:51.325
我们有单元测试因为我们知道
它们不可避免的会失败

00:19:51.391 --> 00:19:53.460
所以我们首先写它们

00:19:53.994 --> 00:19:56.864
我们偶然也提交无法构建的代码

00:19:56.930 --> 00:19:59.199
我们中的一些人不会在提交前检查

00:19:59.266 --> 00:20:01.602
事情就是这样的

00:20:01.768 --> 00:20:04.071
连续集成利于捕捉

00:20:04.204 --> 00:20:07.441
在这些情况下
Xcode会给你发邮件

00:20:07.508 --> 00:20:09.443
通知你你破坏了构建

00:20:10.511 --> 00:20:12.679
但除此之外
还可能发生其他问题

00:20:13.080 --> 00:20:15.148
有时候即使你写的代码是完美的

00:20:15.215 --> 00:20:16.750
你周围的事情会改变

00:20:17.551 --> 00:20:19.286
可能是你安装新的Xcode

00:20:19.353 --> 00:20:21.021
你得到很多新特性

00:20:21.088 --> 00:20:23.724
你得到新的SDK
可能有些东西在其中被新弃用了

00:20:24.358 --> 00:20:26.760
可能因为语言的改进产生问题

00:20:27.094 --> 00:20:29.663
我们希望确保每次发布的Xcode

00:20:29.730 --> 00:20:31.532
都比以前发布的Xcode更聪明

00:20:31.598 --> 00:20:34.635
所以你可能看到
我们以前没发现的问题

00:20:34.701 --> 00:20:36.470
它们一直在那
只是Xcode现在追踪它们

00:20:36.537 --> 00:20:38.238
比如静态分析问题

00:20:40.807 --> 00:20:42.342
当你看到邮件时重要的事

00:20:42.409 --> 00:20:44.811
是我们想确保它是可操作的

00:20:44.878 --> 00:20:47.247
并让你知道你收到这封邮件
是因为出现问题

00:20:47.314 --> 00:20:49.016
一是因为出现了一些问题

00:20:49.082 --> 00:20:50.617
并且你可以处理这些问题

00:20:51.018 --> 00:20:53.620
第一类是如果你导致了一个问题

00:20:54.154 --> 00:20:55.222
是因为你损坏了它

00:20:55.289 --> 00:20:58.525
所以这会联系你
像你在邮件中看到的这样

00:20:58.592 --> 00:21:01.395
你会看到像这样的
说是你导致了这个问题

00:21:01.862 --> 00:21:04.331
我们知道这是因为
问题出现在一行或一行附近

00:21:04.398 --> 00:21:06.066
你最近修改过的一行

00:21:07.434 --> 00:21:09.703
我们还可能知道在2次集成中

00:21:09.770 --> 00:21:11.805
问题出现时只有你提交过代码

00:21:11.872 --> 00:21:16.877
这种情况下猜测你造成了损坏
是合理的猜测

00:21:18.478 --> 00:21:19.546
但情况并不总是这样

00:21:19.613 --> 00:21:23.150
比如 一个应用基于一个框架

00:21:23.350 --> 00:21:26.353
框架里的一个改变

00:21:26.420 --> 00:21:27.454
可能造成应用的损坏

00:21:27.788 --> 00:21:29.990
没有任何人对应用提交代码

00:21:30.057 --> 00:21:32.693
在这种情况下你会看到一封邮件
更像这样

00:21:32.960 --> 00:21:35.996
它会更少地谴责你的工作

00:21:36.063 --> 00:21:39.700
并且会说你可能
可以在bot里解决这个问题

00:21:40.434 --> 00:21:44.037
现在我们知道这是因为
你经常在出问题的范围内提交代码

00:21:44.104 --> 00:21:46.740
我们对各种范围赋予所有权

00:21:48.041 --> 00:21:50.444
并且考虑到这是更模糊的匹配

00:21:50.511 --> 00:21:52.546
和直接把责任归于某些人相比

00:21:52.713 --> 00:21:55.249
所以邮件会发送给更大的范围

00:21:55.315 --> 00:21:57.251
会形成一个很宽的网络

00:21:57.317 --> 00:21:59.653
当试着找出谁可能
对特定问题感兴趣

00:22:03.223 --> 00:22:05.626
这对你的代码中出现的问题有利

00:22:05.692 --> 00:22:07.661
但是有时候问题

00:22:07.728 --> 00:22:09.062
并不是代码的改变引起的

00:22:09.129 --> 00:22:13.200
最简单的重现它的方法
是重新设置你的bot

00:22:13.634 --> 00:22:18.539
所以Xcode 8或者Xcode Server
现在会追踪修改

00:22:18.605 --> 00:22:21.375
对你的bot的配置的修改
并把它们调出

00:22:21.875 --> 00:22:23.677
任何我们有可能把新出现的原因

00:22:23.810 --> 00:22:26.680
归咎于配置的改变时

00:22:26.747 --> 00:22:29.983
比如说你启用测试或静态分析

00:22:30.284 --> 00:22:32.352
也许这类问题一直
存在于你的代码中

00:22:32.419 --> 00:22:34.755
但是我们实际上把它们归咎于

00:22:34.821 --> 00:22:36.223
特定的bot配置的改变

00:22:36.423 --> 00:22:38.058
而不是代码的改变

00:22:39.059 --> 00:22:42.162
我们还在下一次的集成
包含这些信息在邮件里

00:22:42.229 --> 00:22:44.898
这样当你看到一封这样的邮件时
你知道其中的一些改变

00:22:44.965 --> 00:22:47.734
可能因为你进行了一些配置的修改

00:22:50.504 --> 00:22:52.940
让我们回到之前谈论的一些事

00:22:53.006 --> 00:22:55.442
安装新Xcode获得一系列新特性

00:22:56.143 --> 00:22:59.546
当那发生在Xcode 8
中的Xcode Server时

00:22:59.613 --> 00:23:02.049
实际上会重新集成你的整个项目

00:23:02.583 --> 00:23:04.384
我们称之为升级集成

00:23:05.219 --> 00:23:08.922
我们会用和之前集成
完全相同的版本

00:23:09.189 --> 00:23:10.691
然后重新运行所有测试

00:23:10.757 --> 00:23:12.926
重新构造所有东西
重新运行静态分析器

00:23:13.627 --> 00:23:15.462
当这发生时我们知道

00:23:15.529 --> 00:23:18.198
问题发生在你在项目里
在这个时候

00:23:18.765 --> 00:23:21.134
任何新的问题都是由升级引起的

00:23:21.201 --> 00:23:23.470
因为我们使用完全相同的代码

00:23:24.004 --> 00:23:26.173
这节省了你追踪源代码改变

00:23:26.240 --> 00:23:28.008
所需的大量时间
问题并不是

00:23:28.075 --> 00:23:31.512
由你对代码的修改引起的

00:23:33.580 --> 00:23:35.215
这就是一些新特性和问题的责任归咎

00:23:35.282 --> 00:23:37.384
我想谈谈Xcode Server
和Xcode 8中

00:23:37.451 --> 00:23:39.052
我最喜欢的新特性

00:23:39.353 --> 00:23:41.822
那就是可配置集成用户

00:23:42.890 --> 00:23:45.692
我们给你将运行你的集成

00:23:45.759 --> 00:23:47.394
的Mac OS用户完全的控制

00:23:47.528 --> 00:23:49.530
这给你很多增强的可视性

00:23:49.630 --> 00:23:51.598
关于你的集成是怎样运行的

00:23:51.932 --> 00:23:52.999
此外它还允许你配置

00:23:53.066 --> 00:23:55.435
你的集成究竟怎样运行

00:23:55.936 --> 00:23:59.339
Xcode Server中
有一个隐藏的Mac OS用户

00:23:59.406 --> 00:24:01.909
在后台运行所有的集成

00:24:01.975 --> 00:24:03.443
你无法访问密码

00:24:03.510 --> 00:24:05.579
你无法用它们登录

00:24:05.879 --> 00:24:09.016
这就是说你得到一个用户

00:24:09.082 --> 00:24:10.884
你不能进行任何修改

00:24:11.585 --> 00:24:13.887
现在你自己拥有并管理这个用户

00:24:13.954 --> 00:24:15.556
你会得到密码

00:24:15.856 --> 00:24:18.525
这个用户就是一个
普通的Mac OS用户

00:24:18.592 --> 00:24:19.960
可以是系统上的任何用户

00:24:20.027 --> 00:24:21.528
可以是你想要的任何用户

00:24:21.828 --> 00:24:23.063
我们建议用一个新用户

00:24:23.830 --> 00:24:27.100
但它在登录窗口
和快速切换用户中可用

00:24:27.167 --> 00:24:29.069
所以你可以用其他用户登录

00:24:30.304 --> 00:24:32.072
你会注意到你在使用这个用户

00:24:32.172 --> 00:24:36.410
通过一个菜单显示
Xcode Server集成图标

00:24:36.944 --> 00:24:38.178
我们会马上看到

00:24:38.245 --> 00:24:39.813
让我们看看怎么建立这个用户

00:24:39.880 --> 00:24:42.950
在这我打开服务器应用
来到Xcode服务面板

00:24:43.250 --> 00:24:45.586
为了启用Xcode Server

00:24:45.919 --> 00:24:47.354
我需要选择Xcode

00:24:47.421 --> 00:24:50.290
我会选择我已经安装的
新的Xcode 8

00:24:50.691 --> 00:24:52.659
我会看到这个对话框

00:24:52.726 --> 00:24:54.995
要求我建立我想使用的集成用户

00:24:55.062 --> 00:24:57.130
我新建一个

00:24:57.197 --> 00:24:58.699
只用来运行集成的用户

00:24:59.066 --> 00:25:00.434
给它一个名字和密码

00:25:00.501 --> 00:25:02.503
和普通用户一样的一些事情

00:25:02.970 --> 00:25:04.538
我将视其为基本用户

00:25:04.605 --> 00:25:06.473
当我按新建用户按钮

00:25:08.408 --> 00:25:10.744
Xcode将在后台做一些工作

00:25:10.811 --> 00:25:13.514
当它为运行集成做准备时

00:25:14.047 --> 00:25:16.049
一旦用户被设立好

00:25:16.149 --> 00:25:18.051
我们被要求用它们登录

00:25:18.452 --> 00:25:20.754
现在我们被要求用它们登录
因为我们要继续

00:25:20.821 --> 00:25:22.890
运行建立助手

00:25:22.956 --> 00:25:25.425
请记住这是一个真正的
普通Mac OS用户

00:25:26.159 --> 00:25:29.663
所以我可以登录
比如 登录一个测试iCloud账户

00:25:29.830 --> 00:25:33.033
我可以保存用来集成的数据

00:25:33.100 --> 00:25:34.301
任何此类

00:25:34.368 --> 00:25:35.736
当Xcode准备好运行集成时

00:25:35.802 --> 00:25:38.605
你会看到一个通知
像右上角这个

00:25:39.039 --> 00:25:40.474
以及在菜单栏的右上角

00:25:40.541 --> 00:25:42.976
你会注意到有一个锤子表明

00:25:43.210 --> 00:25:46.513
是Xcode Server集成用户

00:25:47.514 --> 00:25:51.585
当这些都完成后
我可以切换回去

00:25:52.819 --> 00:25:55.589
我会回到服务器应用
我会看到指示符

00:25:55.656 --> 00:25:58.225
提示用户已经可用

00:25:58.292 --> 00:26:00.027
登录后集成可以开始运行

00:26:00.794 --> 00:26:02.196
我们已看过怎样建立该用户

00:26:02.262 --> 00:26:04.598
让我们看看一些
我们访问集成用户

00:26:04.665 --> 00:26:06.767
可以做的事

00:26:06.867 --> 00:26:08.569
让我们来到演示的机器

00:26:08.635 --> 00:26:11.205
我们有早前看到的
那个相同的项目

00:26:11.972 --> 00:26:14.308
我们看到有一个问题
它崩溃了

00:26:15.209 --> 00:26:16.844
因为它无法访问位置

00:26:16.910 --> 00:26:18.812
我们需要手动进入模拟器

00:26:19.012 --> 00:26:21.148
并关闭位置访问
来在本地测试它

00:26:21.548 --> 00:26:23.984
但是因为我们在开发应用
我们可能不想这样做

00:26:24.051 --> 00:26:26.119
我们可能想要保持启用位置服务

00:26:26.186 --> 00:26:28.155
在我们的Apple TV和模拟器中

00:26:28.522 --> 00:26:31.258
这是我们的用户
多多少少会遇到的情况

00:26:31.325 --> 00:26:32.626
我们希望怎么看到应用

00:26:33.393 --> 00:26:35.662
但是现在我们已经解决了
早前看到的问题

00:26:35.729 --> 00:26:37.197
我们不希望它再出现

00:26:37.264 --> 00:26:39.066
如果它出现
我们希望收到通知

00:26:39.499 --> 00:26:41.869
所以碰巧我现在在用的机器

00:26:41.935 --> 00:26:43.403
是我的服务器机器

00:26:43.470 --> 00:26:45.606
要进入我的服务器

00:26:45.672 --> 00:26:48.108
我只需要来到快速用户切换菜单

00:26:48.375 --> 00:26:50.477
我看到我有一个

00:26:50.544 --> 00:26:54.081
可配置集成用户
名叫Xcode Server

00:26:54.815 --> 00:26:56.984
我选择它

00:26:57.417 --> 00:27:01.989
输入我的只有4位的密码

00:27:05.592 --> 00:27:06.960
我们就会作为这个用户登录

00:27:07.027 --> 00:27:09.229
我修改桌面背景

00:27:09.296 --> 00:27:11.465
所以我知道这是构建服务用户

00:27:11.732 --> 00:27:14.701
在这我们看到Xcode的锤子图标

00:27:14.768 --> 00:27:16.503
它表明这是Xcode Server

00:27:16.570 --> 00:27:18.739
它已经启动并在等待集成

00:27:18.805 --> 00:27:20.040
已经配置好了

00:27:20.407 --> 00:27:22.776
我想要进入Xcode

00:27:22.843 --> 00:27:26.413
我可以为这个用户在Xcode中
配置任何我想要的本地设置

00:27:26.480 --> 00:27:28.515
它们会在我的集成中被使用

00:27:29.082 --> 00:27:30.384
我会用一些小技巧

00:27:30.450 --> 00:27:32.119
如果我来到设备菜单

00:27:32.286 --> 00:27:36.123
我看到了插入这台电脑
的所有设备和模拟器

00:27:36.657 --> 00:27:40.294
现在Apple很慷慨
我们提供我们生产过的所有设备

00:27:40.627 --> 00:27:43.096
如果这还不够多

00:27:43.163 --> 00:27:46.266
你可以按这个增加按钮
来获得更多模拟器

00:27:46.867 --> 00:27:51.205
Apple TV 1080p模拟器
在我安装Xcode时就已经内置了

00:27:51.738 --> 00:27:54.942
我会新建一个
没有位置服务的Apple TV

00:27:55.709 --> 00:27:57.144
它已经启动了

00:27:57.277 --> 00:28:00.414
我双击进入

00:28:02.249 --> 00:28:04.284
它实际上已经禁用了位置服务

00:28:04.518 --> 00:28:07.621
如果我来到设置 一般隐私

00:28:08.121 --> 00:28:09.356
位置服务被关闭了

00:28:09.423 --> 00:28:11.158
所以模拟器已经配置好可以使用

00:28:11.225 --> 00:28:14.595
而另一个也可以在我想要
启用位置服务时使用

00:28:15.629 --> 00:28:17.898
让我们快速切回

00:28:19.833 --> 00:28:21.235
并登录我通常使用的用户

00:28:21.301 --> 00:28:22.736
通常我需要穿过房间

00:28:22.803 --> 00:28:25.272
到我实际用来工作的电脑
所以这快一些

00:28:25.973 --> 00:28:27.574
这里我们看到所有的UI测试

00:28:27.641 --> 00:28:30.444
现在我已经有一个bot
正照常进行集成

00:28:30.677 --> 00:28:33.514
但我想新建一个bot用来集成

00:28:33.580 --> 00:28:35.048
在没有位置数据的情况下

00:28:35.148 --> 00:28:36.984
所以我来到产品新建Bot

00:28:37.050 --> 00:28:40.220
在这个服务器上
使用无位置的方案

00:28:40.554 --> 00:28:42.990
我会给它位置 对不起
是我的仓库

00:28:43.056 --> 00:28:46.326
这样我就可以取得我的项目

00:28:48.128 --> 00:28:50.764
和我的普通bot一样
我禁用归档活动

00:28:50.831 --> 00:28:53.066
我不关心那个
但是我想要运行测试

00:28:53.233 --> 00:28:55.102
让我们保持启用静态分析

00:28:56.136 --> 00:28:57.871
我想要在我破坏它时马上收到通知

00:28:57.938 --> 00:29:00.641
但是每天一次就可以了

00:29:00.741 --> 00:29:03.644
所以如果我们又破坏了它
我会在24小时内知道

00:29:03.710 --> 00:29:05.612
UI测试会在server上捕获它

00:29:06.013 --> 00:29:07.981
我们会在每天凌晨1点运行它

00:29:08.048 --> 00:29:09.917
在这我选择设备

00:29:10.384 --> 00:29:14.021
默认情况下 每次集成在
那个操作系统的所有设备上运行

00:29:14.087 --> 00:29:15.389
这是一个tvOS项目

00:29:15.455 --> 00:29:17.891
所以它将在所有
tvOS设备和模拟器上运行

00:29:18.492 --> 00:29:20.694
但是让我们选择特定设备

00:29:20.761 --> 00:29:23.130
我将只选择Apple TV没有位置

00:29:24.831 --> 00:29:27.100
这是我们早前谈过的环境变量视图

00:29:27.167 --> 00:29:29.403
我不需要任何变量

00:29:29.536 --> 00:29:31.071
我将继续确保我收到邮件

00:29:31.138 --> 00:29:33.307
当一个问题在特定用例里出现时

00:29:33.373 --> 00:29:35.108
然后继续新建这个bot

00:29:37.544 --> 00:29:39.313
它将继续开始一次集成

00:29:39.379 --> 00:29:42.049
我们在这可以看到它在运行
它正在导出构建

00:29:42.115 --> 00:29:44.084
我们看到UI测试进行了一部分

00:29:44.151 --> 00:29:45.886
让我们来看看

00:29:45.953 --> 00:29:47.888
我早先准备好的一个集成

00:29:48.288 --> 00:29:49.122
若我们去测试

00:29:49.189 --> 00:29:52.426
我们可以看到所有测试都被运行了
包括邮编测试

00:29:53.160 --> 00:29:55.062
如果我查看一些屏幕截图

00:29:55.128 --> 00:29:56.763
它实际上运行了那个位置

00:29:56.830 --> 00:29:59.466
因为它打开了
我们早前看到的视图控制器

00:30:02.603 --> 00:30:05.506
我们可以看出我们显著提高了可视性

00:30:05.572 --> 00:30:06.740
关于你的用户怎样运行

00:30:06.807 --> 00:30:09.409
你可以登录它们看到正在发生的一切

00:30:11.011 --> 00:30:14.681
我们看到了你可以定制不同的设置
比如模拟器

00:30:14.748 --> 00:30:18.252
运行你想要在集成中运行的操作

00:30:18.619 --> 00:30:20.654
我们看到这是
普通的Mac OS用户

00:30:20.721 --> 00:30:22.823
我可以在快速用户切换中切换到它

00:30:22.890 --> 00:30:24.358
我也有密码

00:30:24.958 --> 00:30:26.260
我们看到菜单的额外图标

00:30:26.326 --> 00:30:28.462
显示集成状态的信息

00:30:28.529 --> 00:30:30.097
在集成用户中

00:30:33.233 --> 00:30:35.669
现在随着这些新特性而来的
是一些责任

00:30:35.736 --> 00:30:37.604
所以我们为你们准备了
一些最佳实践

00:30:37.938 --> 00:30:40.174
首先我们强烈推荐你新建一个用户

00:30:40.240 --> 00:30:42.709
让他尽量和你的客户有相同的体验

00:30:42.776 --> 00:30:44.878
你不想要你的设置

00:30:45.145 --> 00:30:47.714
影响你的bots

00:30:48.715 --> 00:30:51.084
我们还建议你避免使用管理员账号

00:30:51.151 --> 00:30:53.287
请记住所有能在服务器上
新建和编辑bot的人

00:30:53.353 --> 00:30:56.190
将可以通过触发器来访问那个账户

00:30:56.256 --> 00:30:58.625
对任何私有或定制数据也是这样

00:30:58.692 --> 00:31:00.694
避免在那个用户里储存这些数据

00:31:02.496 --> 00:31:04.731
如果你想在后台保持登录
那个用户的状态

00:31:04.798 --> 00:31:05.866
使用快速用户切换

00:31:05.933 --> 00:31:09.670
集成可以继续运行在后台
就像它们一直做的那样

00:31:10.003 --> 00:31:12.940
但是如果你想要
做为最前台用户运行集成

00:31:13.006 --> 00:31:14.708
确保关闭了锁屏

00:31:14.775 --> 00:31:17.878
就像iOS屏幕锁定bot测试
Mac OS屏幕锁定也会这样

00:31:19.279 --> 00:31:22.182
最后确保你对你的所有需要
都这样设置

00:31:22.249 --> 00:31:24.484
包括我们前面看到的任何模拟器

00:31:24.551 --> 00:31:26.420
如果你在集成中需要

00:31:26.486 --> 00:31:28.121
特定网络配置

00:31:28.555 --> 00:31:32.192
你想要在UI测试中使用
任何保存的用户数据和设置

00:31:32.292 --> 00:31:33.794
去配置它们

00:31:34.528 --> 00:31:36.196
最后如果你有高级供应

00:31:36.263 --> 00:31:38.966
比如你的管理员给你一个
供应配置文件

00:31:39.032 --> 00:31:40.734
然而你可以在Xcode上配置

00:31:40.801 --> 00:31:44.605
你实际上现在可以在
可配置集成用户中配置它

00:31:44.671 --> 00:31:47.074
来确保代码签署正常工作

00:31:48.108 --> 00:31:49.576
我要请回Zoltan

00:31:49.643 --> 00:31:52.846
来谈谈xcodebuild
的一些新特性

00:32:01.054 --> 00:32:01.955
谢谢你Eric

00:32:04.157 --> 00:32:07.928
你们已看过Xcode
的Xcode Server新特性

00:32:08.595 --> 00:32:11.131
现在要向你展示
xcodebuild的新特性

00:32:13.033 --> 00:32:15.068
xcodebuild有测试活动

00:32:15.135 --> 00:32:18.705
针对定制连续集成系统

00:32:19.673 --> 00:32:22.075
你给它一个工作区
一个方案和一个目标

00:32:22.476 --> 00:32:25.412
一个xcodebuild就会尽职的
构建你的源码

00:32:26.046 --> 00:32:30.017
它会在设备上安装所需的构建产品

00:32:31.785 --> 00:32:35.756
它会运行你的测试
然后在命令行向你报告结果

00:32:38.091 --> 00:32:41.862
今年我们为这一行为引入了
2个选项

00:32:42.729 --> 00:32:44.598
只测试选项

00:32:44.665 --> 00:32:47.901
让你可以有效的

00:32:48.402 --> 00:32:49.603
限制将被运行的测试

00:32:51.872 --> 00:32:57.611
你可以指定测试用例或测试组
或测试束被运行

00:32:57.678 --> 00:32:59.913
并排除其他测试

00:33:02.482 --> 00:33:04.585
你还可以使用跳过测试选项

00:33:04.651 --> 00:33:09.223
来指定测试用例
被排除在测试中

00:33:09.289 --> 00:33:10.757
而其他测试会被运行

00:33:12.926 --> 00:33:14.194
今年的大新闻是

00:33:14.261 --> 00:33:17.064
xcodebuild有两个新行为

00:33:18.432 --> 00:33:21.568
我们可以有效的把测试分成2个

00:33:22.536 --> 00:33:26.907
这些功能已经在Xcode IDE中

00:33:27.908 --> 00:33:30.143
但我们要把它们
带到xcodebuild中

00:33:30.577 --> 00:33:32.312
让我们一个个来看

00:33:34.681 --> 00:33:39.286
为测试构建是
测试活动中的构建部分

00:33:40.554 --> 00:33:44.191
你已经给了它一个工作区
一个方案和一个目标

00:33:44.258 --> 00:33:48.028
它会构建你的源码

00:33:48.762 --> 00:33:50.764
可能会使一些符号可见

00:33:51.732 --> 00:33:54.668
然后它会把构建好的产品
输出到导出数据

00:33:55.869 --> 00:33:58.405
它还产生XCTestRun文件

00:33:58.605 --> 00:34:01.642
它是一种清单
规定你测试要运行的一切

00:34:02.376 --> 00:34:04.077
我们晚点会回到这

00:34:06.446 --> 00:34:10.317
不构建测试是第2部分

00:34:11.451 --> 00:34:14.688
像之前一样给它一个工作区
一个方案和一个目标

00:34:15.789 --> 00:34:20.159
xcodebuild在输出数据里
找到已构建好的产品

00:34:20.494 --> 00:34:23.096
它会把它们安装到所需的设备上

00:34:23.697 --> 00:34:27.768
然后像之前一样运行你的测试
并报告结果

00:34:33.974 --> 00:34:38.045
但是酷的事是
你不再需要提供工作区

00:34:39.746 --> 00:34:43.550
你只需要提供XCTestRun文件

00:34:43.984 --> 00:34:47.187
Xcode会从二进制文件
运行你的测试

00:34:48.455 --> 00:34:51.123
它会使用XCTestRun文件

00:34:51.257 --> 00:34:54.261
它会找到和这个文件相关的
二进制产品

00:34:54.962 --> 00:34:57.865
它会运行测试并报告结果

00:34:58.665 --> 00:35:00.467
i和之前一样

00:35:00.534 --> 00:35:02.903
但是不需要访问你的源码

00:35:04.271 --> 00:35:07.508
这对分布式测试环境很理想

00:35:08.375 --> 00:35:13.046
你可以在为构建优化的电脑上
构建你的测试

00:35:13.714 --> 00:35:16.316
然后把构建好的产品

00:35:16.383 --> 00:35:19.052
转移到为测试优化的电脑上

00:35:20.420 --> 00:35:24.358
然后你可以并行的收集测试报告

00:35:26.894 --> 00:35:29.730
XCTestRun让这一切成为可能

00:35:30.230 --> 00:35:34.801
它是测试的清单
指定哪些测试要被运行

00:35:34.868 --> 00:35:37.070
哪些要在哪个测试电脑上被跳过

00:35:38.405 --> 00:35:42.276
它向测试提供环境变量
和命令行参数

00:35:43.243 --> 00:35:47.247
关于主页面的格式
你可以用这个命令来查看

00:35:57.157 --> 00:35:58.892
我们今天覆盖了很多

00:36:00.027 --> 00:36:03.864
我们首先回顾了测试的4个特征

00:36:05.299 --> 00:36:08.802
然后我们看了Xcode的一些新概念

00:36:09.670 --> 00:36:12.639
它们帮助你诊断测试中的问题

00:36:14.241 --> 00:36:16.443
然后我们介绍了Xcode的新特性

00:36:17.110 --> 00:36:19.680
Xcode Server
和xcodebuild

00:36:22.516 --> 00:36:24.718
我希望这些新特性的介绍

00:36:25.018 --> 00:36:27.721
能帮助你开发运行良好的测试组

00:36:28.922 --> 00:36:31.792
并最终帮助你开发优秀的应用

00:36:34.361 --> 00:36:36.597
你可以在这个网址
获得更多本场演讲的信息

00:36:37.764 --> 00:36:38.665
谢谢