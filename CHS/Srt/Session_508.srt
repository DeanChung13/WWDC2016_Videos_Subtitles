00:00:19.653 --> 00:00:23.390
用Apple News Format
创造丰富和响应性的新闻报道

00:00:25.926 --> 00:00:29.429
你好 欢迎来到
Apple News Format演讲

00:00:29.630 --> 00:00:32.366
我是Casey
今天我和同事Dan

00:00:32.432 --> 00:00:34.134
会向你们展示你如何创建

00:00:34.201 --> 00:00:39.106
一些漂亮和迷人的新闻文章
使用Apple News Format来创建

00:00:39.540 --> 00:00:42.876
在今天演讲的最后
你会有一个详尽的理解

00:00:42.943 --> 00:00:46.380
Apple News Format
的所有设计能力

00:00:47.047 --> 00:00:50.584
和理解所有用来构建那些新闻报道
的代码

00:00:51.852 --> 00:00:55.088
不管你是否相信 我们还要识别
一些效率

00:00:55.155 --> 00:00:56.790
在你的设计和标记之间

00:00:58.025 --> 00:01:01.595
Dan会覆盖一系列的特性
它们允许你创建

00:01:01.662 --> 00:01:06.967
一些漂亮的布局
它们是杂志风格的回忆录

00:01:07.034 --> 00:01:12.272
包括的特性有首字放大 侧栏
画廊和动画

00:01:13.073 --> 00:01:18.946
有了Apple News Format
你的文章在iPad上看起来会很好

00:01:19.346 --> 00:01:23.917
它们会不费力地适应所有屏幕尺寸

00:01:24.818 --> 00:01:28.622
因为Apple News Format
是内在响应的

00:01:29.122 --> 00:01:32.693
它确保你的新闻报道总是有最好的外观

00:01:33.460 --> 00:01:37.564
很明显今天有很多特性要深入的
看一看

00:01:37.631 --> 00:01:40.734
但是首先很重要的一点是我给你们
一些背景

00:01:40.801 --> 00:01:42.503
关于News应用本身

00:01:43.136 --> 00:01:47.174
因为News是
你的用户

00:01:47.241 --> 00:01:49.910
将如何发现和体验你的新闻报道的基础

00:01:51.879 --> 00:01:54.948
News是一个新闻聚合应用

00:01:55.015 --> 00:01:59.319
它在iOS上被预装
在美国、英国和澳大利亚

00:01:59.386 --> 00:02:02.356
这很乏味是吗？
新闻聚合

00:02:02.489 --> 00:02:06.894
我更愿把News想成一种媒人服务

00:02:07.761 --> 00:02:11.832
News帮助读者找到他们会喜欢的
新闻报道

00:02:12.065 --> 00:02:14.601
这对发行者是很好的消息

00:02:14.668 --> 00:02:17.204
因为这表明他们将找到新粉丝

00:02:18.172 --> 00:02:22.676
News做出它的推荐
基于频道和主题

00:02:22.743 --> 00:02:24.378
读者选择关注

00:02:24.611 --> 00:02:29.116
然后它把相关的新闻报道放入
读者的For You摘要

00:02:30.217 --> 00:02:33.153
这个For You摘要是关键

00:02:33.220 --> 00:02:36.390
对于用户和出版商的内容发现而言

00:02:37.090 --> 00:02:43.130
作为读者我可以找到任何我感兴趣的
从CNN到精酿啤酒

00:02:43.664 --> 00:02:46.233
这是Eddy's For You Feed

00:02:46.300 --> 00:02:51.271
一级方程式和超跑

00:02:52.072 --> 00:02:56.643
在任何情况下 关键在于 是否在
新闻里有这个幅度的内容

00:02:56.710 --> 00:03:01.181
这个幅度 事实上任何人都可以
发布到News应用

00:03:02.082 --> 00:03:06.086
你今天就可以发布并开始连接读者

00:03:06.153 --> 00:03:07.721
并且开始赚钱

00:03:07.788 --> 00:03:09.857
你可以用不同方法来这么做

00:03:09.923 --> 00:03:16.930
包括RSS News Publisher
创作工具和Apple News Format

00:03:17.764 --> 00:03:19.199
如果你还没有看过

00:03:19.266 --> 00:03:23.003
你应该看看
“Apple News入门”演讲

00:03:23.070 --> 00:03:25.672
是这周早些时候进行的
现在视频已经可获得了

00:03:25.906 --> 00:03:28.775
那个演讲回顾了所有三种方法

00:03:29.243 --> 00:03:32.479
这个部分只聚焦在Apple
News Format上

00:03:33.213 --> 00:03:37.117
这是因为Apple News
Format对很多事很有帮助

00:03:37.184 --> 00:03:40.754
你会想要做
包括汉字创作的文章

00:03:41.822 --> 00:03:45.259
可能在你在CMS加一个翻译层

00:03:45.325 --> 00:03:48.795
这样你可以用程序发送内容
文章和新闻报道

00:03:48.862 --> 00:03:51.598
从你的CMS到
Apple News应用

00:03:52.132 --> 00:03:56.403
甚至贡献一些平台的插件

00:03:56.470 --> 00:03:58.238
如WordPress和Drupal

00:03:59.306 --> 00:04:02.242
知道Apple News
Format真的很有帮助

00:04:02.309 --> 00:04:04.645
而且它只是JSON

00:04:06.146 --> 00:04:10.784
Apple News Format
用JSON来创造强大的设计

00:04:10.851 --> 00:04:13.353
而且会很快并且是响应式的

00:04:14.621 --> 00:04:18.325
JSON也很适合用来在不同格式间
进行转换

00:04:18.659 --> 00:04:23.363
它允许我们有可扩展的格式

00:04:23.931 --> 00:04:27.701
Apple News Format
的可扩展属性

00:04:27.935 --> 00:04:33.207
非常重要因为这允许我们快速开发特性

00:04:33.574 --> 00:04:35.442
不需要额外的依赖

00:04:36.844 --> 00:04:40.180
所以我认为我们围绕News
给了你们很好的背景

00:04:40.581 --> 00:04:45.052
我们可以深入到Apple
News Format的具体细节

00:04:45.385 --> 00:04:46.553
交给Dan了

00:04:48.088 --> 00:04:49.022
谢谢Casey

00:04:49.857 --> 00:04:53.694
现在我们对文章所在的世界
有了一定了解

00:04:53.827 --> 00:04:56.597
让我们深入具体细节来看看你
如何创建文章

00:04:56.663 --> 00:04:57.631
用
Apple News Format

00:04:57.698 --> 00:05:00.501
我们今天要做的是
我们要用这个示例文章

00:05:01.568 --> 00:05:03.337
我们要把它拆解成骨架

00:05:04.137 --> 00:05:06.707
然后我们要再把它组装加来
这样我们能了解基本知识

00:05:08.008 --> 00:05:09.343
我们要使它是响应的

00:05:10.043 --> 00:05:11.745
最后我们要添加一些动画

00:05:13.780 --> 00:05:15.315
这是我们文章的骨架

00:05:15.916 --> 00:05:17.618
让我们看一看一些属性

00:05:18.352 --> 00:05:19.686
第一个属性是标题

00:05:20.153 --> 00:05:23.390
这是一个标题它会显示给
浏览摘要的用户

00:05:25.325 --> 00:05:27.628
接下来我们有摘录
这是我们的第一个元数据

00:05:27.928 --> 00:05:31.698
这是一些文本的片断
它们也和标题一起显示在摘要中

00:05:32.399 --> 00:05:36.203
最后你要定义缩略图
使用缩略图URL

00:05:37.004 --> 00:05:40.307
现在让我们后退一下谈谈缩略图
的一些提示

00:05:40.374 --> 00:05:42.075
缩略图提示

00:05:42.142 --> 00:05:46.180
首先接受的缩略图格式是JPEG
和PNG

00:05:47.381 --> 00:05:49.917
接下来当然是发送给我们高分辨率
的图像

00:05:50.117 --> 00:05:52.653
我们会在我们的后台处理向下取样

00:05:54.388 --> 00:05:57.024
最小尺寸是300乘300像素

00:05:57.157 --> 00:05:59.693
如果小于这的话你的图片不会显示

00:05:59.760 --> 00:06:01.328
所以一定要把你最好的发送给我们

00:06:02.896 --> 00:06:05.933
我们有一些适度的关于宽度和高度
比例的要求

00:06:07.367 --> 00:06:10.971
对缩略图你的宽度至少要是1比2

00:06:11.705 --> 00:06:13.507
但是不能宽于3比1

00:06:15.809 --> 00:06:20.247
接下来我们今天要谈论的最后元数据是
cannonicalURL

00:06:20.314 --> 00:06:22.950
这只是你文章的网络版本

00:06:23.550 --> 00:06:26.386
如果你有请一定包含这个元数据

00:06:26.453 --> 00:06:30.757
这对用户分享你的文章很重要

00:06:30.824 --> 00:06:32.526
对那些无法访问
Apple News的人

00:06:32.726 --> 00:06:36.063
有这么一个版本可以后退提供
更好的体验

00:06:38.098 --> 00:06:39.733
我们谈过了元数据

00:06:40.167 --> 00:06:41.468
让我们深入看看内容

00:06:42.302 --> 00:06:46.473
内容存在于你的文章的一个顶层
数组中 叫做组件

00:06:47.074 --> 00:06:51.712
你的内容的每一个部分都是由
一个JSON对象来表示

00:06:51.778 --> 00:06:53.347
这就是组件

00:06:53.480 --> 00:06:59.653
每一个都有一个语义角色 比如
标题1、标题、介绍、署名和主体

00:07:00.988 --> 00:07:02.589
为你的内容选择最合适的角色

00:07:02.656 --> 00:07:05.025
这对无障碍性是关键的

00:07:08.462 --> 00:07:11.231
我们涉及了语义
但是如果你要给你的文本加上式样呢？

00:07:11.298 --> 00:07:13.534
这时就需要组件文本式样

00:07:14.334 --> 00:07:16.970
组件文本式样是一个顶层的字典

00:07:18.105 --> 00:07:20.407
我们会在三个不同的层定义式样

00:07:20.841 --> 00:07:23.844
我们要做的第一件事是定义默认式样

00:07:23.911 --> 00:07:26.680
这会为所有文本提供一个基本式样

00:07:27.881 --> 00:07:30.851
然后我们会定义一系列角色特定的式样

00:07:30.918 --> 00:07:32.686
它们会以默认为基础

00:07:34.054 --> 00:07:36.423
最后我们会定义非默认式样

00:07:36.490 --> 00:07:38.992
这用于当你需要一些角色的例外情况时

00:07:41.628 --> 00:07:43.564
这就是我们的默认式样

00:07:43.630 --> 00:07:45.532
让我们看看其中的属性

00:07:45.599 --> 00:07:46.733
首先我们有字体名

00:07:47.534 --> 00:07:50.003
要记住的一点是字体名不是

00:07:50.404 --> 00:07:53.240
申明你的字体和在CSS中不完全一样

00:07:53.540 --> 00:07:54.775
请记住两件事

00:07:54.842 --> 00:07:55.676
引用字体

00:07:55.742 --> 00:07:58.712
首先当引用字体时你需要调用它们

00:07:58.779 --> 00:08:01.448
通过它们的PostScript名
而不是家族名

00:08:02.649 --> 00:08:06.353
第二你使用的字体需要在iOS上可用

00:08:06.720 --> 00:08:10.457
如果你想表达那些甜蜜的90后的
设计技能

00:08:10.524 --> 00:08:12.926
你可以用黑板家族

00:08:12.993 --> 00:08:14.394
用这PostScript名

00:08:16.997 --> 00:08:18.232
接下来我们有文本颜色

00:08:18.298 --> 00:08:20.067
文本颜色使用16进制值

00:08:20.901 --> 00:08:22.669
如果你想你可以用短的格式

00:08:22.870 --> 00:08:25.639
如果你需要透明度你可以用8个
字符的版本

00:08:27.207 --> 00:08:30.010
然后我们有字体大小
字体大小是用点来申明的

00:08:30.677 --> 00:08:31.979
但我们把它简写成一整数

00:08:33.212 --> 00:08:35.916
现在因为它是点
不要把它想成一个绝对的值

00:08:36.482 --> 00:08:38.919
应用会用你的字体大小

00:08:38.986 --> 00:08:41.355
当用户在不同设备上看时

00:08:41.421 --> 00:08:45.259
它会做一些调整来优化易读性

00:08:45.893 --> 00:08:51.064
一个好的规则是尽量不要让你的
主体小于16点

00:08:53.700 --> 00:08:56.069
类似 行高也是用点定义的

00:08:56.703 --> 00:09:00.007
你想定义你的行高和你选择的字体
大小是相关的

00:09:00.073 --> 00:09:02.042
我们会在所有设备上保持这个比例

00:09:04.411 --> 00:09:05.546
最后我们有链接式样

00:09:05.612 --> 00:09:07.848
这里你需要定义一些覆盖

00:09:08.382 --> 00:09:11.151
为任何你的组件的文本中的链接

00:09:11.718 --> 00:09:13.720
这里我们有一个文本颜色

00:09:13.787 --> 00:09:16.590
但是显然没有什么会阻止我加
一个下划线

00:09:20.894 --> 00:09:24.965
所以现在我们有默认式样
让我们添加第一个角色特定的默认

00:09:26.400 --> 00:09:29.903
这一个有一个特殊的名字
就像默认 它叫默认主体

00:09:30.237 --> 00:09:33.707
它会为所有主体组件提供默认式样

00:09:34.541 --> 00:09:36.243
有两个新属性

00:09:36.443 --> 00:09:39.813
我们有段落前和后间隔

00:09:39.880 --> 00:09:42.749
你可能希望它们影响段落间隔

00:09:43.183 --> 00:09:45.919
但是在基于组件的系统中有段落
是什么意思

00:09:47.287 --> 00:09:49.790
让我们看看我们的第一个主体组件

00:09:49.857 --> 00:09:52.192
这个组件实际上有两个段落在其中

00:09:53.327 --> 00:09:54.328
这是第一个

00:09:55.596 --> 00:09:56.763
这是第二个

00:09:57.231 --> 00:10:00.400
我们用两个新行把它们分开
标记形式

00:10:01.101 --> 00:10:05.506
你可能注意到这个格式申明

00:10:06.006 --> 00:10:09.443
Apple News Format
中 你要选择纯文本或标记

00:10:09.510 --> 00:10:10.677
你的文本格式

00:10:11.378 --> 00:10:14.214
在这个例子中我们要利用它

00:10:14.281 --> 00:10:16.617
有了这个标记式样、链接和文本

00:10:19.419 --> 00:10:21.321
不论你选择纯文本还是标记

00:10:21.388 --> 00:10:23.457
你可以用这些段落间隔属性

00:10:23.790 --> 00:10:27.227
来影响组件中的段落间的间隔

00:10:30.297 --> 00:10:33.267
所以现在我们看到了怎么创建
角色特定的默认

00:10:33.700 --> 00:10:36.036
让我们快速完成剩下的

00:10:36.970 --> 00:10:39.840
对我们顶部的标题
我添加了一些字距

00:10:39.907 --> 00:10:41.842
给字母一点空间

00:10:43.210 --> 00:10:48.382
增加了标题的大小
添加了一些颜色让介绍的颜色变浅

00:10:49.483 --> 00:10:53.954
署名的一些细小改变
以及继续往下的副标题

00:10:55.822 --> 00:10:57.191
我们把这些障碍清除了

00:10:57.591 --> 00:10:58.892
让我们看些更有趣的东西

00:10:58.959 --> 00:11:00.827
让我们创建第一个非默认式样

00:11:01.094 --> 00:11:03.530
我们会用这个机会来添加首字放大

00:11:08.435 --> 00:11:15.242
一个需要记得的事是因为我们要
在三层中做这些

00:11:15.309 --> 00:11:18.312
我们已经包括了大部分
我们想要的针对主体组件的式样

00:11:18.545 --> 00:11:20.113
在默认和默认主体中

00:11:20.414 --> 00:11:23.183
所以在第三层中
有这些定制式样

00:11:23.750 --> 00:11:26.553
我们要做的是定义首字放大看起来
应该是怎样的

00:11:26.920 --> 00:11:29.623
我们要在一个特殊的首字放大属性
中这么做

00:11:30.657 --> 00:11:34.061
在那个里面你需要为首个字符
定义一些覆盖式样

00:11:34.461 --> 00:11:35.929
在组件的第一段中

00:11:37.030 --> 00:11:40.100
有趣的事是这个行数属性

00:11:40.567 --> 00:11:44.538
你要在这定义你的首字放大应该
跨越多少行文本

00:11:45.739 --> 00:11:49.209
你可以看到我只用一个很简单的
两行首字放大

00:11:50.744 --> 00:11:51.678
所以我们完成了我们的式样

00:11:51.745 --> 00:11:54.014
但是因为那没有语义关系

00:11:54.081 --> 00:11:57.017
在组件的文本式样和特定组件
之间

00:11:57.384 --> 00:11:58.452
我们需要解决它

00:11:59.286 --> 00:12:01.922
我们添加文本样式属性到组件中

00:12:02.389 --> 00:12:04.725
并且给式样命名

00:12:04.858 --> 00:12:07.160
在这个例子中它叫做主体第一个
首字放大

00:12:08.195 --> 00:12:09.263
一旦你这么做了

00:12:09.329 --> 00:12:11.765
在右边你可以看到我们得到了
两行的首字放大

00:12:14.034 --> 00:12:17.704
返回 和我们开始的原始文本倾倒相比

00:12:17.771 --> 00:12:20.274
现在我们有一些文本样式
看起来好多了

00:12:20.607 --> 00:12:21.808
但是它有一点杂乱

00:12:21.875 --> 00:12:23.510
我们显然在这需要一些边缘

00:12:23.944 --> 00:12:26.013
这是用到组件布局的地方

00:12:26.747 --> 00:12:30.217
组件布局是我们的下一个要添加的
顶层字典

00:12:30.717 --> 00:12:33.754
在其中我们可以定义布局
这允许我们添加

00:12:33.820 --> 00:12:36.089
顶部和底部边缘到我们的组件中

00:12:36.557 --> 00:12:38.659
我们还做一些其他事
我们晚点会涉及

00:12:39.860 --> 00:12:42.529
我们把组件布局应用于组件上

00:12:42.596 --> 00:12:44.097
通过添加布局属性

00:12:47.067 --> 00:12:49.703
一旦我们这么做
我们给文章加了一些留白

00:12:49.770 --> 00:12:51.905
和排版
看起来好多了

00:12:51.972 --> 00:12:55.742
但是让我们利用另一个简单的酷方法

00:12:55.809 --> 00:12:58.312
来添加更多对垂直间隔的控制

00:12:58.679 --> 00:12:59.780
让我们添加分隔符

00:13:00.247 --> 00:13:04.418
让我们把它放在标题、顶部和文章标题之间

00:13:05.652 --> 00:13:06.854
这是我们的分隔符

00:13:07.154 --> 00:13:09.890
你可以看到我们有一些对笔画的控制

00:13:09.957 --> 00:13:11.725
我们可以改变宽度和颜色

00:13:12.192 --> 00:13:14.261
但是我认为很酷的是

00:13:14.828 --> 00:13:16.363
发生在布局上的事

00:13:17.164 --> 00:13:18.365
让我们看看分隔符

00:13:18.432 --> 00:13:21.401
看它怎么延伸到屏幕右边

00:13:22.169 --> 00:13:24.271
分隔符没有内在东西

00:13:24.605 --> 00:13:27.441
是我们在组件布局中做的一些事

00:13:27.574 --> 00:13:30.744
我们用一个特殊属性叫做
ignoreDocumentMargin

00:13:31.445 --> 00:13:33.780
你可以看到我给它一个值右边

00:13:33.847 --> 00:13:39.853
这的意思是忽略边缘一直延伸到边界

00:13:42.923 --> 00:13:47.628
所以我们有组件文本样式
我们有组件布局和分隔符

00:13:47.694 --> 00:13:51.365
文章看起来很好
你知道的 从文本的角度

00:13:51.999 --> 00:13:53.567
现在是时候加一些有趣的东西了

00:13:54.401 --> 00:13:57.337
最好的开始方法是添加图片

00:13:58.438 --> 00:14:00.073
所以有我的图片组件

00:14:00.841 --> 00:14:02.676
在下面我添加标题组件

00:14:02.976 --> 00:14:08.782
但是在页脚组件中
你可以看到标题属性

00:14:08.849 --> 00:14:11.251
看起来和标题组件是重复的

00:14:11.785 --> 00:14:14.655
在这里发生的是我们定义一个标题

00:14:14.721 --> 00:14:17.257
如果用户点击图片它会出现

00:14:17.457 --> 00:14:20.027
会进入全屏视图
像你在右边看到的

00:14:21.361 --> 00:14:24.398
这出于无障碍性的原因是一个需要
包括的关键的东西

00:14:24.464 --> 00:14:28.101
因为这个标题会被
读给VoiceOver用户

00:14:31.371 --> 00:14:33.407
接下来回到我们的布局

00:14:34.408 --> 00:14:35.976
你可以看到这个图片是等屏宽的

00:14:36.043 --> 00:14:37.845
它从屏幕的左边一直到

00:14:37.911 --> 00:14:38.979
屏幕的右边

00:14:39.046 --> 00:14:42.382
这不是图片组件的内在东西

00:14:42.716 --> 00:14:45.752
我们又一次使用
ignoreDocumentMargin属性

00:14:46.253 --> 00:14:49.690
然而这次所用的值不是右而是真

00:14:49.756 --> 00:14:51.758
意思是忽略两边的边缘

00:14:54.928 --> 00:14:57.731
最后我们有我们的URL指向图像
资源

00:14:58.365 --> 00:14:59.933
我会返回去谈谈

00:15:00.334 --> 00:15:03.437
关于一些显示在文章视图里的
图片的要求

00:15:05.038 --> 00:15:09.142
图片可以被本地或远程引用
只要使用正确的计划

00:15:09.209 --> 00:15:10.811
图片要求

00:15:10.878 --> 00:15:14.681
再一次的和缩略URL一样
请一定发送给我们高分辨率的图片

00:15:14.748 --> 00:15:16.984
我们会根据设备处理向下取样

00:15:19.753 --> 00:15:23.857
对于文章视图里的图片
你可以使用JPEG、PNG和GIF

00:15:23.924 --> 00:15:25.993
我们当然支持动画GIF

00:15:29.897 --> 00:15:31.698
这是一张图片
但若你有很多张图片

00:15:31.765 --> 00:15:33.367
在主题上是一起的？

00:15:33.967 --> 00:15:36.737
这是使用画廊组件的地方

00:15:37.204 --> 00:15:39.039
要实现很简单

00:15:39.339 --> 00:15:41.108
你简单地定义一个画廊角色

00:15:41.942 --> 00:15:43.277
你提供给它一个图片数组

00:15:44.044 --> 00:15:47.047
你获得的是优秀的用户体验
用户可以使用

00:15:47.114 --> 00:15:49.550
这个文章视图中的幻灯片

00:15:49.850 --> 00:15:53.620
他们可以点击 进入全屏视图
查看图片的标题

00:15:54.555 --> 00:15:56.557
当你完成了 滑出并继续阅读

00:15:59.593 --> 00:16:02.996
现在在这的基础上我们有一个标准
画廊的替代物

00:16:03.063 --> 00:16:04.298
叫做马赛克画廊

00:16:05.065 --> 00:16:06.900
它有相同的实现

00:16:07.201 --> 00:16:09.670
除了你把角色从画廊切换成马赛克

00:16:09.970 --> 00:16:12.439
你获得的是很酷的混合的图片

00:16:13.006 --> 00:16:15.075
来自你的所有图片
你可以在右边看到

00:16:15.275 --> 00:16:19.680
最好的是用户仍然能够点击进入
画廊

00:16:19.746 --> 00:16:21.548
并获得相同的全屏体验

00:16:24.051 --> 00:16:25.686
接下来我们有社交媒体嵌入

00:16:26.186 --> 00:16:30.123
Apple News Format支持它们中一系列
包括Facebook、Vine

00:16:30.290 --> 00:16:31.692
和你能看到Twitter

00:16:32.192 --> 00:16:35.262
实现真的和知道

00:16:35.329 --> 00:16:37.030
你想要嵌入东西的URL一样简单

00:16:40.567 --> 00:16:44.605
接下来是更复杂的嵌入
我们支持Apple Maps

00:16:45.205 --> 00:16:47.708
这是来自旅行的好例子

00:16:47.774 --> 00:16:49.810
很酷使用了Apple Maps特性

00:16:51.178 --> 00:16:54.648
包括其中的一个
是当你想向用户显示一个位置

00:16:54.715 --> 00:16:57.918
但是给他们机会获得一些和他们
有关的语境

00:16:58.018 --> 00:17:01.922
所以如果你添加了所有的这些很棒
的特性和有趣的内容

00:17:01.989 --> 00:17:05.526
你可能在寻找个方法让你的付出金钱化
这时可以用到广告

00:17:05.592 --> 00:17:08.127
让我们快速的涉及一下两种方式

00:17:08.194 --> 00:17:10.964
你可以添加广告到
Apple News Format文章中

00:17:11.732 --> 00:17:15.002
首先如果你需要控制
广告组件是你要用的方法

00:17:15.536 --> 00:17:18.137
你把这些放入你的内容

00:17:18.204 --> 00:17:21.175
当你觉得在那里显示一个广告是合适的

00:17:21.241 --> 00:17:22.509
广告

00:17:22.576 --> 00:17:24.511
如果你不需要太多控制

00:17:24.912 --> 00:17:27.814
更简单的选择是使用动态广告功能

00:17:28.415 --> 00:17:31.852
有了它 你要做的仅仅是指定频率

00:17:31.919 --> 00:17:35.489
你的广告出现的频率
应用会帮你放置广告

00:17:36.223 --> 00:17:40.394
目前为止我们有针对手机的很好
的移动体验

00:17:40.460 --> 00:17:42.462
但把这些放到iPad上时
发生什么？

00:17:43.830 --> 00:17:46.567
所以我们的移动优先方法
在此时 留给我们

00:17:46.633 --> 00:17:48.635
一些设计机会

00:17:48.702 --> 00:17:50.604
我们的文章在iPad上

00:17:50.671 --> 00:17:53.240
我们当然可以更好地利用空白空间

00:17:54.408 --> 00:17:56.710
像这是一种大块无聊的文本

00:17:57.211 --> 00:17:59.713
最好加一些变化来保持对读者
的吸引

00:18:01.014 --> 00:18:03.450
我们有一个很坏的行长度问题

00:18:03.851 --> 00:18:06.787
特别是你把iPad放在横向方向时

00:18:08.121 --> 00:18:11.725
对所有这些问题的解决办法
是Apple News Format的列系统

00:18:12.392 --> 00:18:16.897
这是我们在数字时代解决经典的
问题

00:18:16.964 --> 00:18:18.599
你怎么为多个屏幕设计

00:18:18.665 --> 00:18:19.499
为多个屏幕设计

00:18:19.566 --> 00:18:22.603
当然有一些已有的方法

00:18:23.070 --> 00:18:26.640
尤其是响应式设计
你对你的屏幕大小反应

00:18:27.574 --> 00:18:30.077
有移动优先设计
你用它增强体验

00:18:30.143 --> 00:18:31.478
因为你获得更多屏幕空间

00:18:32.513 --> 00:18:34.014
这是尝试过的有效的方法

00:18:34.681 --> 00:18:38.986
但是让它们工作是不容易的

00:18:39.419 --> 00:18:41.121
有时你以重新设计告终

00:18:41.188 --> 00:18:44.625
你的文章或者内容针对不同情况

00:18:45.158 --> 00:18:46.193
有了Apple News Format

00:18:46.260 --> 00:18:48.462
我们真希望你
有那么一次只设计你的文章

00:18:49.296 --> 00:18:52.666
此外我们希望你设计最丰富的体验

00:18:53.467 --> 00:18:55.636
我们希望你聚焦在大的漂亮版本

00:18:56.203 --> 00:19:00.007
我们不希望你陷入媒体查询和断点中

00:19:00.073 --> 00:19:04.111
因为应用内在设计为你处理
这类缩放问题

00:19:07.047 --> 00:19:08.048
它是怎么工作的？

00:19:08.615 --> 00:19:11.585
它开始于一个横向的iPad

00:19:12.352 --> 00:19:16.623
我们做为内容创作者
把屏幕分成多列

00:19:17.191 --> 00:19:20.961
现在我已经分成了10列
但是作为内容创作者

00:19:21.028 --> 00:19:22.729
你可以选择你想用多少列

00:19:23.130 --> 00:19:25.232
是多少并没有固定不变的规定

00:19:25.299 --> 00:19:30.838
只要记得你加入越多列
你加入越多复杂性到你的设计中

00:19:30.904 --> 00:19:32.072
把屏幕分成列

00:19:32.139 --> 00:19:33.340
赋予列跨度

00:19:33.407 --> 00:19:36.710
一旦我们决定了我们一共要在
文章中用多少列

00:19:36.977 --> 00:19:39.947
接下来我们要赋予内容列的跨度

00:19:41.248 --> 00:19:45.752
在这个例子中我们的主体内容的
主块

00:19:45.819 --> 00:19:47.955
使用10列中的前7列

00:19:49.223 --> 00:19:51.758
右边的标题使用最后几列

00:19:54.828 --> 00:19:56.230
当我们拿到设计

00:19:56.296 --> 00:19:59.233
我们在不同方向不同设备上看它

00:19:59.299 --> 00:20:01.001
我们看到应用

00:20:01.068 --> 00:20:04.738
自动收缩可用的列数来适应屏幕
大小

00:20:05.339 --> 00:20:07.574
神奇的地方是

00:20:08.141 --> 00:20:13.780
智能的决定如何修改组件

00:20:13.847 --> 00:20:15.449
对应新的屏幕大小

00:20:16.283 --> 00:20:18.585
你可以看到当iPad是纵向时

00:20:19.152 --> 00:20:21.488
东西变得更窄
但是在手机上

00:20:21.555 --> 00:20:22.556
那并不合适

00:20:23.257 --> 00:20:24.791
所有东西返回到堆叠顺序

00:20:28.295 --> 00:20:31.832
在此时你可能有兴趣开始做一些
算术

00:20:31.899 --> 00:20:33.834
找出对这个和这个屏幕宽度

00:20:33.901 --> 00:20:38.839
有这个和这个布局
列跨度是什么？

00:20:39.072 --> 00:20:40.908
这会变得复杂和烦人

00:20:41.608 --> 00:20:44.144
Apple News Format
的精神并非如此

00:20:44.211 --> 00:20:47.414
因为我们想要你集中在你的设计
的视觉效果上

00:20:48.348 --> 00:20:51.885
为了帮助你我们开发了一个很棒
的OS X应用叫新闻预览

00:20:53.086 --> 00:20:56.523
作为设计师或开发者或两者都是

00:20:56.590 --> 00:20:58.625
你需要能够快速遍历你的设计

00:20:58.692 --> 00:21:00.127
并且知道它们会看起来很好

00:21:00.794 --> 00:21:01.929
这就是新闻预览的作用

00:21:02.896 --> 00:21:06.667
因为它允许你获得视觉更新
关于你的文章看起来会是怎样

00:21:07.301 --> 00:21:08.869
当你忙于代码时

00:21:09.803 --> 00:21:14.041
它最好的是利用Xcode模拟器
这样你可以看到多台设备

00:21:14.107 --> 00:21:18.111
多个方向 都是实时更新
在你工作的同时

00:21:19.246 --> 00:21:22.783
所有Apple开发者都可在
developer.apple.com获得它

00:21:25.018 --> 00:21:28.722
回到我们的JSON
我们谈论了列系统的概念

00:21:28.789 --> 00:21:32.793
让我们看看我们怎么让这些发生
在文章JSON中

00:21:34.261 --> 00:21:36.363
我们要返回到我们的文章骨架

00:21:36.430 --> 00:21:38.298
我们要看一个顶层属性叫做布局

00:21:38.866 --> 00:21:40.367
这是你的文档布局

00:21:40.801 --> 00:21:42.002
它有四个属性

00:21:42.803 --> 00:21:45.239
关于这些属性你在说的是

00:21:45.339 --> 00:21:49.142
对一个指定宽度 假设1024
对一个横向iPad

00:21:50.544 --> 00:21:55.182
我想把屏幕分成10列
在中间有20点的间隔

00:21:56.183 --> 00:21:59.319
对左边和右边我们有85点的边缘

00:21:59.920 --> 00:22:01.321
当然这些数字是可设置的

00:22:01.388 --> 00:22:03.490
它们为这个演示被选择

00:22:05.459 --> 00:22:07.661
接下来 一旦我们有了文档布局

00:22:08.061 --> 00:22:11.031
我们需要开始应用一些列跨度
到单独的组件上

00:22:11.565 --> 00:22:15.536
因为显然的行长度可读性问题

00:22:15.602 --> 00:22:17.905
我要聚焦在我们的主体组件上

00:22:18.739 --> 00:22:21.875
我们在我们的第一个主体组件

00:22:21.942 --> 00:22:23.977
我们要用一个叫没有边缘的布局

00:22:24.044 --> 00:22:25.779
让我们看看定义

00:22:27.714 --> 00:22:29.416
并添加两个新属性

00:22:30.784 --> 00:22:32.753
第一个新属性是开始列

00:22:32.920 --> 00:22:35.856
它简单地表示在屏幕上从左到向

00:22:36.223 --> 00:22:38.825
那个内容占据的第一列是什么

00:22:39.660 --> 00:22:41.361
我选择了0作为第一列

00:22:42.796 --> 00:22:45.766
然后我们有列跨度
不出所料

00:22:45.832 --> 00:22:49.269
你可以决定该内容总共跨过几列

00:22:50.037 --> 00:22:54.441
我把它设成10
这也是文档的总列数

00:22:55.108 --> 00:22:57.778
你可能不奇怪文章中没有东西改变了

00:22:58.512 --> 00:23:00.647
默认对所有组件

00:23:00.714 --> 00:23:03.183
是跨过它们的容器的整个宽度

00:23:04.618 --> 00:23:05.752
让我们让它更有趣

00:23:06.286 --> 00:23:09.623
让我们实现一个居中的布局
为我们的10列布局

00:23:11.291 --> 00:23:12.826
已经看起来好多了

00:23:13.060 --> 00:23:14.595
这里发生了什么？

00:23:15.662 --> 00:23:19.533
我设置了它所以我们的主体内容
占据的第一列

00:23:19.600 --> 00:23:22.135
是我们10列布局的第3列

00:23:22.769 --> 00:23:26.106
当然如果你从0开始
第3列的索引值是2

00:23:27.474 --> 00:23:29.776
那么我减少了内容的宽度

00:23:29.843 --> 00:23:32.012
现在它只占据10列中的6列

00:23:33.747 --> 00:23:34.581
这看起来很好

00:23:34.648 --> 00:23:37.551
但是我个人更喜欢不对称设计

00:23:37.618 --> 00:23:41.054
所以我要把它移到左边

00:23:41.355 --> 00:23:43.824
转而占据前7列

00:23:46.860 --> 00:23:49.463
现在如果我们把它应用到我们其他
的组件上

00:23:50.464 --> 00:23:52.633
开始看到我们的设计集合在一起

00:23:53.534 --> 00:23:55.836
我们切换方向
看起来仍然不错

00:23:56.770 --> 00:24:00.040
我们维持了从一开始就有的很好的体验

00:24:02.209 --> 00:24:05.112
我们的一个设计无缝缩放到多个设备上

00:24:05.913 --> 00:24:06.813
很容易

00:24:07.080 --> 00:24:09.683
让我们把它作为基础
在其上进行建设

00:24:11.018 --> 00:24:14.888
之前我们谈到
我们有很长的一块文本很无聊

00:24:15.355 --> 00:24:16.790
我们可以用一些视觉变化

00:24:16.857 --> 00:24:20.127
当然经典的对这个问题的解决
方法是添加抬升式引用

00:24:20.661 --> 00:24:24.498
让我们从一个主体组件中提取一些文本

00:24:24.565 --> 00:24:26.099
让我们放入一个抬升式引用

00:24:27.935 --> 00:24:32.272
接下来让我们用我们的组件布局
和抬升式引用

00:24:32.339 --> 00:24:34.541
并把它推到边缘

00:24:36.109 --> 00:24:38.812
所以我为开始列和列跨度选择一个值

00:24:40.881 --> 00:24:43.383
来允许抬升式引用清除所有主体组件

00:24:43.450 --> 00:24:46.320
你能看到它成功地做到了这些

00:24:46.386 --> 00:24:48.222
它向上浮动直到遇到障碍

00:24:48.755 --> 00:24:50.290
这不是我们想要的

00:24:50.991 --> 00:24:54.127
我们需要做的是创造一个视觉关系

00:24:54.461 --> 00:24:56.697
在抬升式引用和一些东西之间

00:24:56.930 --> 00:24:59.666
幸运的是我们有一个内在语义关系

00:24:59.933 --> 00:25:03.303
在抬升式引用和它提取自的文本间

00:25:03.837 --> 00:25:09.109
所以我们要使用叫锚的东西

00:25:09.176 --> 00:25:10.344
Apple News Format 中

00:25:10.410 --> 00:25:13.780
我们要锚定抬升式引用到主体组件

00:25:13.847 --> 00:25:16.683
并包含我们为抬升式引用提取出的文本

00:25:17.618 --> 00:25:20.254
第一步是添加一个标识符

00:25:20.320 --> 00:25:22.689
给我们的主体组件
这样我们可以调用它

00:25:23.891 --> 00:25:27.194
然后我们要添加一个锚属性
到抬升式引用组件中

00:25:28.061 --> 00:25:31.398
在里面我们会调用
刚刚创建的标识符

00:25:32.666 --> 00:25:36.003
然后我们定义我们想怎么对齐这两东西

00:25:36.670 --> 00:25:38.238
这个例子里我们的意思是

00:25:38.305 --> 00:25:41.975
我们想顶部对齐来源
也就是抬升式引用

00:25:42.910 --> 00:25:45.379
和目标、主体组件

00:25:46.947 --> 00:25:49.983
我们一旦这么做
我们得到很酷的效果

00:25:50.050 --> 00:25:51.919
我们的抬升式引用悬挂在边缘

00:25:51.985 --> 00:25:54.855
就在最相关的内容边上

00:25:55.022 --> 00:25:57.324
我们有更多空白空间的有趣用法

00:25:57.558 --> 00:26:00.794
但是因为我们有内在文本关系

00:26:00.861 --> 00:26:03.630
在抬升式引用和它提取自的文本之间

00:26:03.697 --> 00:26:05.832
我们实际上可以更进一步

00:26:06.533 --> 00:26:09.203
锚定到文本本身

00:26:11.605 --> 00:26:12.940
这是一个两步的过程

00:26:13.006 --> 00:26:16.076
首先我们要返回到抬升式引用布局

00:26:16.677 --> 00:26:18.245
更新它

00:26:18.312 --> 00:26:20.881
这样它和主体组件有1列重叠

00:26:23.083 --> 00:26:24.818
然后调用文本范围

00:26:25.118 --> 00:26:26.954
抬升式引用是从它之中提取出来的

00:26:27.855 --> 00:26:33.527
一旦我们这么做了 我们得到很酷
的把抬升式引用嵌入文本的效果

00:26:36.396 --> 00:26:37.331
跨设备

00:26:37.397 --> 00:26:40.868
当然你把它放到其他方向的设备上时

00:26:40.934 --> 00:26:44.204
它总是做正确的事
包括减少宽度

00:26:44.271 --> 00:26:47.908
或者在手机上
返回到一个逻辑的堆叠顺序上

00:26:52.012 --> 00:26:54.982
此时事情都集合在一起

00:26:55.382 --> 00:26:59.620
我们可以停止并开始把
它做为我们内容的模板来使用

00:27:00.587 --> 00:27:04.558
但是如果我们在文章中滚动看看
目前的体验

00:27:06.260 --> 00:27:07.694
看起来少了什么

00:27:08.495 --> 00:27:12.132
比如看看这篇来自Harper的文章

00:27:12.799 --> 00:27:17.471
看看主体内容是怎么向上滑动
到顶部的图片之上的

00:27:17.538 --> 00:27:21.842
当图片进入视口时会淡入

00:27:22.743 --> 00:27:23.577
这是很酷的效果

00:27:23.644 --> 00:27:25.445
我们可以从中受到启发

00:27:26.180 --> 00:27:28.515
所以让我们在文章中添加一些运动

00:27:28.582 --> 00:27:29.917
添加运动

00:27:29.983 --> 00:27:31.451
我们今天要做的

00:27:31.818 --> 00:27:34.087
是利用很酷的
Apple News Format特性

00:27:34.154 --> 00:27:35.489
叫场景动画

00:27:37.624 --> 00:27:40.928
第一步我们要得到我们的图片

00:27:41.228 --> 00:27:44.097
我们要移动它成为文章的第一个组件

00:27:45.499 --> 00:27:47.901
接下来我们做一些转化

00:27:47.968 --> 00:27:49.303
我们要得到这些图片

00:27:49.369 --> 00:27:51.638
把它从图片组件

00:27:52.072 --> 00:27:54.374
变成一个容器的背景填充

00:27:55.943 --> 00:27:57.845
要这么做我们要首先添加一个容器

00:27:57.911 --> 00:28:01.081
我们用一个语义容器组件叫做页头

00:28:01.949 --> 00:28:04.852
现在并没有任何变化
因为我们只有一个空的容器

00:28:04.918 --> 00:28:06.720
为了调试原因

00:28:07.020 --> 00:28:10.023
我会添加高度和背景色

00:28:10.090 --> 00:28:11.391
这样能看到我们的容器

00:28:12.426 --> 00:28:14.294
现在我们有可爱的灰盒子

00:28:14.928 --> 00:28:16.797
在JSON中有些事情需要注意

00:28:16.864 --> 00:28:21.168
首先我添加了背景颜色
用一个新属性叫式样

00:28:21.802 --> 00:28:23.837
这允许我们找到一个组件式样

00:28:24.538 --> 00:28:30.577
组件式样使你能访问更高层的设计元素
比如背景填充和边界

00:28:32.646 --> 00:28:35.916
下一个有趣的事是它定义了

00:28:35.983 --> 00:28:39.620
我们的内联式样
我之前没有这么做过

00:28:41.388 --> 00:28:43.257
在技术层面 这并没有区别

00:28:43.323 --> 00:28:50.063
在内联定义和放到其他地方
做为主引用

00:28:50.430 --> 00:28:53.200
这只是组织和方便方面的事

00:28:55.102 --> 00:28:56.069
然后我们有高度

00:28:56.336 --> 00:28:59.106
我控制了容器的高度

00:28:59.173 --> 00:29:03.844
通过一个属性叫最小高度
在组件布局中

00:29:04.845 --> 00:29:08.849
我给它一个值44vmax

00:29:08.916 --> 00:29:10.150
它的意思是

00:29:10.217 --> 00:29:15.455
我们希望这个容器至少有最大
视口方向的44％长

00:29:16.290 --> 00:29:19.927
vmax单位是一些特殊尺寸单位之一

00:29:19.993 --> 00:29:21.828
Apple News Format
中可用

00:29:24.198 --> 00:29:27.568
现在我们有可爱大小的灰盒子

00:29:27.634 --> 00:29:32.706
让我们继续把它
从背景颜色切换成图片填充

00:29:33.674 --> 00:29:35.042
这很简单

00:29:35.108 --> 00:29:38.312
只需要添加填充属性到式样中

00:29:40.147 --> 00:29:42.216
有了这我们可以摆脱图片

00:29:42.583 --> 00:29:43.884
我们完成了转换

00:29:44.551 --> 00:29:46.086
我们更接近我们的场景动画

00:29:46.687 --> 00:29:49.556
下一步我们需要建立一个场景

00:29:49.890 --> 00:29:54.394
我们要做的是把整个文章分成

00:29:54.461 --> 00:29:58.332
两个容器 语义容器叫章节

00:29:59.833 --> 00:30:02.836
我们的第一个章节是我们的场景

00:30:02.903 --> 00:30:04.137
动画会在这发生

00:30:04.438 --> 00:30:06.440
所以我把页头容器放在这里面

00:30:07.241 --> 00:30:10.577
文章的其他东西
我会放在第二个章节

00:30:12.846 --> 00:30:14.748
为了让我们的场景发生

00:30:14.815 --> 00:30:16.717
这很容易

00:30:16.783 --> 00:30:20.387
你简单地添加一个场景属性
到第一个章节

00:30:21.388 --> 00:30:23.390
然后你定义你想要的动画

00:30:23.891 --> 00:30:26.260
在这 我用一个叫褪色固定页头

00:30:26.727 --> 00:30:29.863
它的意思是使页头容器

00:30:29.930 --> 00:30:33.100
当用户滚动时
它会固定在视口顶部

00:30:33.433 --> 00:30:35.536
文章其他部分会向上滑动到它上面

00:30:35.736 --> 00:30:38.572
页头上的背景填充会淡出

00:30:38.972 --> 00:30:40.040
让我们看看实际演示

00:30:40.974 --> 00:30:41.975
这是我们的文章

00:30:42.042 --> 00:30:46.280
用户滚动而且文本向上移动到图片之上
图片开始淡出

00:30:47.181 --> 00:30:51.552
这是这个效果的要点
但是不完全是我想要的

00:30:52.085 --> 00:30:55.889
我们有那些无装饰的文本向上移动
变得不可阅读

00:30:56.790 --> 00:30:57.758
不是我想要的效果

00:30:58.525 --> 00:31:00.427
幸运的是解决办法非常简单

00:31:00.928 --> 00:31:04.364
我们只需要给第二个章节
添加背景颜色

00:31:04.698 --> 00:31:08.101
我们会让剩余内容保持

00:31:08.168 --> 00:31:10.337
白色背景并且整洁地向上移动

00:31:10.504 --> 00:31:12.005
让我们看看实际效果

00:31:13.574 --> 00:31:16.109
我们仍然得到一个淡出背景动画

00:31:16.643 --> 00:31:17.845
它还是可读的

00:31:17.911 --> 00:31:19.079
体验好多了

00:31:20.013 --> 00:31:22.082
现在我们加入了动画

00:31:22.816 --> 00:31:25.519
我们需要更关注一些设计元素

00:31:25.919 --> 00:31:29.022
在文章体验之上 使它看起来更好

00:31:30.691 --> 00:31:35.462
第一个我要处理的问题是
当我们移动图片时

00:31:35.996 --> 00:31:39.032
突然标题变得奇怪并且有很多东西

00:31:39.099 --> 00:31:41.134
在它和它描述的东西之间

00:31:41.735 --> 00:31:44.671
有不同方法解决这个问题

00:31:45.339 --> 00:31:47.975
我今天要用的是利用我们的锚定技能

00:31:48.575 --> 00:31:51.245
把它放到边缘去

00:31:51.545 --> 00:31:53.547
它的效果是

00:31:53.614 --> 00:31:56.683
使用一条垂直的线使关联更清晰

00:31:56.750 --> 00:32:00.020
而且它使顶部的空白空间更有趣

00:32:02.089 --> 00:32:03.891
接下来我要做的是

00:32:03.957 --> 00:32:06.560
我想利用我们在使用容器的事实

00:32:06.627 --> 00:32:08.695
顶部是一个图片填充容器
而不是一个图片

00:32:09.530 --> 00:32:11.198
关于它最酷的事

00:32:11.265 --> 00:32:13.066
是你把东西放在容器里

00:32:13.267 --> 00:32:14.201
主要是文本

00:32:14.601 --> 00:32:17.104
表明我们可以分层让文本在图片之上

00:32:17.171 --> 00:32:20.407
使我们的文章顶部看起来更有趣

00:32:22.876 --> 00:32:27.414
所以我拿出标题们

00:32:27.481 --> 00:32:30.751
把它们放到页头容器中

00:32:32.119 --> 00:32:35.155
这看起来很酷
除了它们很奇怪地浮动到顶部

00:32:35.522 --> 00:32:37.624
如果我能把它们和底部对齐就好了

00:32:37.691 --> 00:32:41.562
我可以 用锚属性的另一个功能

00:32:42.829 --> 00:32:47.267
如果你在一个容器内的对象上使用锚

00:32:47.334 --> 00:32:50.070
你可以它的调整对齐 与容器相对

00:32:50.571 --> 00:32:53.574
在这个例子中
我要用锚的目标位置是底部

00:32:53.640 --> 00:32:57.444
你可以看到文本固定在页头容器底部

00:32:58.111 --> 00:32:59.546
看起来好多了

00:33:02.749 --> 00:33:04.318
我们很接近了

00:33:04.751 --> 00:33:07.688
我们用分层把文本放在图片上方

00:33:07.754 --> 00:33:10.090
我们有漂亮的空白空间使用
我们有好的排版

00:33:10.691 --> 00:33:14.161
我想在宣布文章顶部体验完成前
做最后一件事

00:33:14.428 --> 00:33:16.430
我想添加一些内联文本式样

00:33:17.831 --> 00:33:20.634
让我们再次来到文章骨架

00:33:21.335 --> 00:33:23.837
我们要添加一个新的顶层字典
叫文本式样

00:33:24.638 --> 00:33:27.207
文本式样和组件文本式样类似

00:33:27.641 --> 00:33:30.744
除了它不是给组件中的所有文本加式样

00:33:31.078 --> 00:33:36.149
文本式样允许你只给一个范围的
文本加式样并有两个式样

00:33:36.950 --> 00:33:39.453
一个为灰色文本
一个为加粗文本

00:33:41.288 --> 00:33:42.723
要运用它们
我要利用

00:33:42.789 --> 00:33:45.993
Apple News Format
中 一个很酷的标记扩展

00:33:47.160 --> 00:33:49.630
这是我想影响的两个组件

00:33:49.696 --> 00:33:52.599
我们有标题组件和第一个主体组件

00:33:54.134 --> 00:33:56.370
要应用我的式样

00:33:56.436 --> 00:34:01.108
我要做的是用中括号包裹
我想要影响的文本

00:34:02.176 --> 00:34:05.812
紧跟着的是
我要应用的式样在大括号里

00:34:07.147 --> 00:34:10.417
一旦你这么做你可以看到这个例子标题

00:34:10.484 --> 00:34:14.121
我给了一些灰色文本颜色到一些单词上

00:34:16.190 --> 00:34:19.493
然后在第一个主体组件上看到加粗效果

00:34:21.594 --> 00:34:23.630
我很满意

00:34:23.697 --> 00:34:26.333
可以说我们的文章顶部的体验完成了

00:34:27.434 --> 00:34:31.371
只差一个调整就可以说整个文章完成了

00:34:31.438 --> 00:34:33.040
我想给一些元素加些移动

00:34:33.106 --> 00:34:34.208
在文章下面一些地方

00:34:34.608 --> 00:34:37.077
比如在右边的这个抬升式引用

00:34:37.143 --> 00:34:39.012
如果它能从右边滑入那会很酷

00:34:40.581 --> 00:34:43.283
如果画廊也能滑入那就酷了

00:34:44.083 --> 00:34:46.053
但是对马赛克和标题

00:34:46.520 --> 00:34:49.422
我想要当视口到达它们的时候
它们能淡入

00:34:51.190 --> 00:34:52.860
要实现这些很简单

00:34:53.594 --> 00:34:54.594
这是抬升式引用

00:34:55.262 --> 00:35:00.133
添加动画我要做的是添加一个动画属性

00:35:00.834 --> 00:35:02.469
在里面我申明想要的种类

00:35:02.536 --> 00:35:04.204
此时我想要移动进入动画

00:35:04.972 --> 00:35:07.374
有了移动进入我需要指明它进来的方向

00:35:07.875 --> 00:35:09.409
我要它从右边滑入

00:35:10.744 --> 00:35:13.747
现在我要把同样的事应用在画廊上

00:35:14.348 --> 00:35:18.886
然后我要添加淡入动画
到马赛克和两个标题

00:35:19.720 --> 00:35:21.021
让我们看看总体效果

00:35:21.955 --> 00:35:24.791
我们有场景动画
这是抬升式引用

00:35:26.126 --> 00:35:26.960
滑入

00:35:27.027 --> 00:35:30.397
画廊 马赛克 标题
淡入 淡入

00:35:31.398 --> 00:35:32.566
看起来好多了

00:35:33.734 --> 00:35:37.004
用一些动画
我们使在文章中滚动

00:35:37.070 --> 00:35:38.405
更有趣更动态

00:35:39.239 --> 00:35:41.742
这个地方看起来是很适合结束

00:35:41.808 --> 00:35:44.178
Apple News Format
细节的速成课

00:35:44.611 --> 00:35:46.213
我们覆盖了很多

00:35:46.480 --> 00:35:48.348
我们添加了一些文本和图片内容

00:35:50.217 --> 00:35:52.819
我们看到如何使布局跨设备运行

00:35:53.854 --> 00:35:56.023
我们用锚来创造视觉关系

00:35:57.124 --> 00:35:59.893
用几行代码
我们添加了很酷的动画

00:36:00.661 --> 00:36:02.529
当然这只是冰山一角

00:36:02.596 --> 00:36:05.966
我鼓励你们下载工具 阅读文档
自己玩一玩它们

00:36:07.601 --> 00:36:09.536
我很想看到
我们的内容创造者会做些什么

00:36:10.437 --> 00:36:11.338
交回给Casey

00:36:17.144 --> 00:36:20.314
嘿 Dan给你们一个很好的关于
Apple News Format介绍

00:36:20.380 --> 00:36:22.382
并展示了如何使用新闻预览工具

00:36:22.449 --> 00:36:26.353
来创造将在每台设备上
看起来很棒的新闻报道

00:36:26.420 --> 00:36:30.324
我希望我们今天鼓舞了你们去
注册news publisher

00:36:30.390 --> 00:36:33.961
查看资料 发布新闻报道 赚钱

00:36:34.027 --> 00:36:37.497
帮助作者曝光 为平台的插件做贡献

00:36:37.731 --> 00:36:40.400
这个链接会带你到你想去的所有地方

00:36:40.467 --> 00:36:42.402
为了得到那些材料来开始

00:36:42.469 --> 00:36:47.374
包括你的文档
和Dan今天展示的一些示例代码

00:36:48.275 --> 00:36:51.378
确保你观看那个News演讲

00:36:51.445 --> 00:36:54.581
它覆盖了你可以发布的多种方式

00:36:54.648 --> 00:36:57.117
谢谢你们本周的出席

00:36:57.317 --> 00:37:00.087
很高兴有你们在这儿
演讲至此结束