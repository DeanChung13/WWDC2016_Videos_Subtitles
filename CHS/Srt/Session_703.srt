00:00:19.486 --> 00:00:25.025 
在网页中使用Apple Pay

00:00:28.695 --> 00:00:29.897 
大家好

00:00:30.764 --> 00:00:33.600 
欢迎回来
参加去年Apple Pay会议的人

00:00:34.034 --> 00:00:34.868 
我是Nick

00:00:35.435 --> 00:00:37.738 
今天我与同事Anders会在这里

00:00:38.138 --> 00:00:40.974 
我们将会讲述一个新的特性

00:00:41.341 --> 00:00:43.510 
在网页中使用Apple Pay

00:00:44.545 --> 00:00:47.214 
首先 我想先问大家一个问题

00:00:48.382 --> 00:00:51.852 
你们当中有多少人
举起你们的手或者对着屏幕喊出来

00:00:51.919 --> 00:00:54.054 
如果你在楼下或者在线观看的话

00:00:54.121 --> 00:00:56.623 
你们当中有多少人尝试过网上购物

00:00:57.057 --> 00:00:59.993 
但是发现过程太复杂
然后放弃了购物

00:01:01.461 --> 00:01:02.596 
我看到了很多人举手了

00:01:03.297 --> 00:01:05.199 
毫无疑问 这是一个大问题

00:01:05.331 --> 00:01:09.102 
这是我昨天访问的一个网站
非常的传统

00:01:10.003 --> 00:01:12.139 
无视这名字Honest Bob
他是一个很棒的家伙

00:01:13.073 --> 00:01:15.075 
但他在结账的时候遇到了一些困扰

00:01:15.776 --> 00:01:18.745  
为了举例
我将我的名字改变一下

00:01:18.812 --> 00:01:21.014  
改成了Johnny Appleseed
避免重名

00:01:21.315 --> 00:01:22.716  
然后我开始输入卡号

00:01:22.816 --> 00:01:24.251  
获得了令人迷惑的错误信息

00:01:24.985 --> 00:01:27.654  
提示说卡号必须是一连串的数字

00:01:28.522 --> 00:01:31.758  
这样我就会心里想
我觉得没有空格是错误的

00:01:31.825 --> 00:01:34.161  
并且我的卡上就是有空格的

00:01:34.494 --> 00:01:35.696  
于是我做了修改

00:01:36.530 --> 00:01:39.666  
然后我又得到了一个错误信息
比较明显 月份不符合

00:01:39.733 --> 00:01:42.336  
而不是提示我
没有选择月份

00:01:42.903 --> 00:01:44.771  
这样很令人困扰

00:01:45.372 --> 00:01:48.542  
希望大家不会遇到像这样糟糕的场景

00:01:49.109 --> 00:01:52.012  
但是因特网支付
真的还非常的落后

00:01:52.713 --> 00:01:54.081  
且我们希望能解决这种问题

00:01:54.481 --> 00:01:56.750 
认为可通过
Apple Pay解决这种问题

00:01:58.085 --> 00:01:59.486 
并且我们今天将会讲述

00:01:59.653 --> 00:02:01.955 
如何解决这些问题

00:02:02.089 --> 00:02:05.392 
可以通过在网页中使用良好的接口

00:02:05.592 --> 00:02:07.261 
及Apple Pay带来的好处

00:02:07.928 --> 00:02:11.231 
我们将会讲到很多内容
让我们首先开始做一个介绍

00:02:11.298 --> 00:02:14.001 
我们将会通过一些事例
来讲述Apple Pay

00:02:14.067 --> 00:02:16.937 
你们可能还不熟悉它
还不了解它能做什么

00:02:17.671 --> 00:02:19.406 
然后我们会讲述一些具体的API

00:02:19.473 --> 00:02:22.843 
我们将这些新JavaScript
API添加进了Safari

00:02:23.810 --> 00:02:27.281 
然后我们会讲述支付处理的过程
以及如何获得付款

00:02:28.582 --> 00:02:30.517 
最后是关于Apple Pay的设计

00:02:30.584 --> 00:02:34.021 
如何让你的网站变的出众而且实用

00:02:34.321 --> 00:02:36.356 
及拥有比较好的
Apple Pay体验

00:02:37.658 --> 00:02:38.692 
所以 让我们开始吧

00:02:40.194 --> 00:02:41.428 
Apple Pay是什么？

00:02:42.429 --> 00:02:44.932 
希望你们大多数人
都比较熟悉Apple Pay

00:02:45.399 --> 00:02:49.303 
它是一种简单安全以及私密的支付方式

00:02:50.404 --> 00:02:54.141 
你可以在商店中使用

00:02:54.208 --> 00:02:56.176 
也可以在iOS应用中使用

00:02:57.477 --> 00:02:59.847 
也许你们已试过了
若没有 请放心的去尝试一下

00:02:59.913 --> 00:03:02.783 
有很多非常好的应用
比如Lyft Uber DoorDash

00:03:02.850 --> 00:03:05.152 
即便在参加会议 你也可以使用它们

00:03:06.386 --> 00:03:09.356 
且应用中的Apple Pay提供了

00:03:09.423 --> 00:03:10.924 
一流的商业体验

00:03:11.391 --> 00:03:13.126 
这些应用真的非常突出

00:03:14.394 --> 00:03:19.066 
现在已经有非常多的应用
采用了Apple Pay

00:03:19.533 --> 00:03:24.071 
它们在世界范围内得到了使用
在中国 英国以及美国

00:03:25.038 --> 00:03:28.041 
这些应用有着良好的发展

00:03:28.175 --> 00:03:31.278 
它们看上去有着更高的转化率

00:03:31.612 --> 00:03:32.946 
那些使用Apple Pay的用户

00:03:33.013 --> 00:03:35.382 
有着更高的消费倾向

00:03:36.216 --> 00:03:38.585 
并且再次消费的概率也更高

00:03:39.186 --> 00:03:42.356 
在消费之外 他们也会花费更多的时间

00:03:42.422 --> 00:03:43.590 
在这些应用上

00:03:44.591 --> 00:03:46.260 
最后 这些用户会感到更加快乐

00:03:47.094 --> 00:03:50.163 
Apple Pay用户满意度最高的

00:03:50.364 --> 00:03:51.932 
支付手段之一

00:03:52.833 --> 00:03:54.968 
它非常好用
所以用户喜欢它

00:03:56.503 --> 00:04:00.908 
Apple Pay在应用中表现优秀
但我觉得应该需要注意的是

00:04:02.442 --> 00:04:04.211 
大量的电子商务

00:04:04.478 --> 00:04:07.414 
没有发生在应用当中

00:04:08.248 --> 00:04:09.950 
应用是很好的
我喜欢各种应用

00:04:10.217 --> 00:04:13.353 
但是部分人仍然会在网页上进行支付

00:04:14.454 --> 00:04:17.291 
绝大部分情况下 在网页上进行的支付
是非常缓慢的

00:04:17.357 --> 00:04:18.992 
是很繁琐的
并且也不透明

00:04:19.059 --> 00:04:21.827 
每一个商户的付款流程都不一样

00:04:21.894 --> 00:04:23.664 
同样 每个网站付款流程也不一样

00:04:25.232 --> 00:04:27.067 
现在我们正在尝试解决这个问题

00:04:27.134 --> 00:04:32.039 
我们正通过向更多的场景以及更多的人
引入Apple Pay来解决这问题

00:04:33.607 --> 00:04:35.576 
我们称之为
Apple Pay Everywhere

00:04:35.943 --> 00:04:38.478 
我们现在主要在三个地方
引入Apple Pay

00:04:39.479 --> 00:04:40.714 
第一是WatchKit

00:04:40.881 --> 00:04:42.983 
你可能在昨天的主题中已经见过了

00:04:43.050 --> 00:04:46.053 
且Kevin已提到过把Apple Pay
引入到WatchKit的应用中

00:04:46.520 --> 00:04:49.623 
当然我们也会在所有的新扩展中
引入Apple Pay

00:04:49.690 --> 00:04:53.227 
就像你看过的那些：
SiriKit地图以及信息

00:04:54.061 --> 00:04:58.198 
但最大的场景
也就是你们今天来这的理由

00:04:58.265 --> 00:05:00.767 
是网络和Safari

00:05:02.102 --> 00:05:04.638 
我们稍后会讨论
WatchKit以及扩展

00:05:04.705 --> 00:05:06.139 
那将是下个会议的主题

00:05:06.273 --> 00:05:08.675 
若你喜欢我的嗓音
待会继续留在这里就好了

00:05:09.276 --> 00:05:11.912 
现在让我们关于Safari

00:05:12.713 --> 00:05:15.282 
让我们关注在网页上
使用Apple Pay

00:05:16.850 --> 00:05:20.888 
前面我已经谈论了
当今的电子商务有多么糟糕

00:05:22.422 --> 00:05:24.391 
然而非常多的商品都是通过网页销售的

00:05:24.858 --> 00:05:27.828 
但是支付流程却很冗长
它们太复杂了

00:05:27.928 --> 00:05:29.129 
以致于很难使用

00:05:29.196 --> 00:05:31.598 
手机上这个问题更严重

00:05:32.232 --> 00:05:35.536 
因为屏幕更小
但是繁琐的流程并没有减少

00:05:36.937 --> 00:05:40.007 
用户会希望在网页上
有着与应用一样的体验

00:05:40.107 --> 00:05:41.341 
使用起来非常简便

00:05:41.408 --> 00:05:43.477 
并且在安全与隐私方面也没有区别

00:05:43.577 --> 00:05:46.013 
有多少人不得不去办理一张新的卡片

00:05:46.079 --> 00:05:48.549 
因为一封邮件告诉你
你曾经在上面买过东西的网站

00:05:48.615 --> 00:05:50.384 
早在三年前就已经被黑掉了

00:05:50.651 --> 00:05:51.718 
我就有过这种经历

00:05:52.653 --> 00:05:54.888 
然而Apple Pay
可避免这种事情发生

00:05:55.756 --> 00:05:57.758 
且通过网页上使用
Apple Pay功能

00:05:57.824 --> 00:06:00.093 
已可支持任何
带Apple Pay的设备

00:06:01.028 --> 00:06:03.197 
也就是iPhone与iPad

00:06:03.864 --> 00:06:08.869 
并可通过Safari或者
SafariViewController来使用它

00:06:09.036 --> 00:06:13.073 
它与现有的Apple Pay体验
是一样的只不过形式是通过网页而已

00:06:13.273 --> 00:06:16.109 
同样的UI界面
同样的使用方式

00:06:16.376 --> 00:06:18.312 
若你熟悉应用中的Apple Pay

00:06:18.378 --> 00:06:19.513 
你会感觉有熟悉的感觉

00:06:21.715 --> 00:06:23.317 
但是需要注意的是

00:06:24.251 --> 00:06:26.086 
这些设备并没有包括台式机

00:06:27.221 --> 00:06:29.957 
现在在一些国家 比如中国
手机电子商务

00:06:30.023 --> 00:06:31.425 
已是主流的电子商务方式了

00:06:31.491 --> 00:06:34.761 
但是在美国
大部分人还是习惯于

00:06:34.828 --> 00:06:36.163 
通过台式电脑来买东西

00:06:36.230 --> 00:06:39.533 
你可能是通过Mac电脑
购买了 WWDC 门票

00:06:40.501 --> 00:06:43.537 
我们认为Apple Pay
应该可以在任何地方使用

00:06:45.506 --> 00:06:49.142 
我们在Mac OS Sierra
中引入Apple Pay

00:06:50.310 --> 00:06:53.046 
你们可在Mac电脑上
通过Apple Pay支付了

00:06:53.347 --> 00:06:55.849 
并且具有同样的安全性

00:06:56.216 --> 00:06:59.052 
与在你的iPhone或者Apple Watch
使用Apple Pay的情况相比话

00:06:59.319 --> 00:07:02.823 
你可以简单的触摸一下
就可以进行授权了

00:07:03.524 --> 00:07:06.460 
这样用起来非常的简单与直接

00:07:06.727 --> 00:07:09.463 
它支持在任何使用Handoff
的Mac上使用

00:07:09.696 --> 00:07:10.964 
并且操作系统需要是
Mac OS Sierra

00:07:11.198 --> 00:07:14.601 
这对于四年内销售的
Mac电脑都不是问题

00:07:15.302 --> 00:07:16.937 
Safari浏览器是
完全支持Apple Pay的

00:07:17.738 --> 00:07:20.107 
你可以在手机上通过授权来进行支付

00:07:20.374 --> 00:07:21.808 
在Apple Watch也是一样

00:07:22.342 --> 00:07:26.346 
因为Mac OS上
使用Apple Pay是非常快速的

00:07:26.547 --> 00:07:29.183 
可能有人之前没有看过我们昨天的演示

00:07:29.249 --> 00:07:30.651 
现在我来展示另外一个演示

00:07:30.951 --> 00:07:32.486 
不用担心
这次演示会很快

00:07:33.420 --> 00:07:34.588 
让我们转到这里来

00:07:38.025 --> 00:07:40.928 
在左边 我访问了一个网站

00:07:41.361 --> 00:07:43.764 
在右边是一部iPhone手机

00:07:43.830 --> 00:07:47.367 
现在Craig
通过网络预定了一些门票

00:07:47.434 --> 00:07:48.869 
好在周四去观看海底总动员

00:07:48.969 --> 00:07:53.173 
让我修改一下日期 改到周五
我们会和他一起去

00:07:53.440 --> 00:07:56.543 
我会和十个工程师一起去
他们是我的同事

00:07:57.344 --> 00:07:58.879 
好 向Craig打招呼

00:07:59.847 --> 00:08:01.982 
好了 让我来点击下
Apple Pay来进行支付

00:08:02.115 --> 00:08:04.318 
这一切都是即时发生的

00:08:04.718 --> 00:08:06.553 
让我们来再做一次
这次我会取消它

00:08:06.620 --> 00:08:09.656 
可以看到 当我取消了之后
在我的手机上也自动的取消了

00:08:10.824 --> 00:08:12.326 
当我点击Apple Pay
支付按钮的时候

00:08:13.927 --> 00:08:15.028 
一切都是立刻发生的

00:08:15.095 --> 00:08:16.697 
它立刻出现了

00:08:16.997 --> 00:08:18.765 
然后在我的手机上
进行了Touch ID的匹配

00:08:23.170 --> 00:08:24.204 
这样就完成了

00:08:24.271 --> 00:08:25.405 
几秒内完成了整个支付

00:08:25.639 --> 00:08:27.641 
在这两个设备之间反应都是即时的

00:08:27.708 --> 00:08:30.644 
然后我获得了一个消息
告知我完成了一次支付

00:08:30.878 --> 00:08:35.182 
在Mac OS上使用
Apple Pay就这么简单和快速

00:08:35.349 --> 00:08:36.650 
这个过程真的非常快速

00:08:40.486 --> 00:08:43.023 
希望我说服了你们
Apple Pay是那么优秀

00:08:43.490 --> 00:08:46.860 
让我们讲述一下在网页上
集成Apple Pay的细节

00:08:47.561 --> 00:08:49.963 
在我们讨论网页API之前

00:08:50.030 --> 00:08:51.565 
让我们来简单看一下
Apple Pay的基本知识

00:08:51.632 --> 00:08:54.668 
因为很多人还没将Apple Pay
集成到应用之中的经历

00:08:54.735 --> 00:08:56.537 
可能有人是一个纯粹的网页端开发者

00:08:58.105 --> 00:09:01.642 
Apple Pay提供
具有唯一性的支付token给你

00:09:03.177 --> 00:09:06.747 
你将这个token发送给网银平台
比如Stripe

00:09:06.914 --> 00:09:09.016 
比如Braintree
还有Chase Paymentech

00:09:10.217 --> 00:09:13.053 
对于一次交易来说
token是唯一的

00:09:13.153 --> 00:09:14.588 
该token只能使用一次

00:09:14.721 --> 00:09:16.323 
若需多次交易
同样需请求相应数量token

00:09:16.990 --> 00:09:20.260 
无论你在应用或者
网页上使用Apple Pay

00:09:20.327 --> 00:09:22.896 
t对商家来说token都是唯一的

00:09:23.030 --> 00:09:24.031 
token经过加密

00:09:24.431 --> 00:09:27.034 
即便token被盗取了

00:09:27.367 --> 00:09:31.071 
比如用户处于
一个不安全的Wifi连接的时候

00:09:31.305 --> 00:09:34.174 
这个token仍然是安全的

00:09:34.274 --> 00:09:37.744 
因为它使用了商户的证书
以及商户的标识符进行了加密的编码

00:09:40.080 --> 00:09:41.481 
商户的标识符

00:09:41.548 --> 00:09:44.518 
以及商户的证书能够代表你是一个商户

00:09:45.385 --> 00:09:48.255 
它们比较像标准的反向域名解析

00:09:48.322 --> 00:09:51.124 
如果你是一个iOS开发者
你会非常熟悉这种格式

00:09:51.792 --> 00:09:54.294 
它们是通过我们的开发者中心生成的

00:09:55.028 --> 00:09:56.330 
并且是唯一的

00:09:56.430 --> 00:09:58.932 
因为只有你能够解码这些tokens

00:10:00.334 --> 00:10:02.736 
只有你才能读取
用户Apple Pay的token

00:10:04.471 --> 00:10:08.575 
让我们来看一下
在实际的应用中是什么样的工作流程

00:10:09.409 --> 00:10:10.611  
在一个iOS的应用中

00:10:11.545 --> 00:10:13.847  
当Apple Pay按钮点击后
就开始了用Apple Pay的支付

00:10:15.816 --> 00:10:18.018  
当点击了Apple Pay按钮之后

00:10:19.086 --> 00:10:21.321  
iOS系统允许了这次支付

00:10:21.488 --> 00:10:23.490  
然后出现了Apple Pay
表单页面

00:10:24.491 --> 00:10:27.060  
然后用户使用
Touch ID或者密码

00:10:27.561 --> 00:10:31.331  
这样支付信息会通过手机的
安全信息单元芯片产生

00:10:31.465 --> 00:10:34.001  
这些芯片专门为
Apple Pay打造

00:10:34.101 --> 00:10:35.636  
能够安全持有你的银行卡信息

00:10:37.070 --> 00:10:40.607  
然后你的手机会做什么呢

00:10:41.175 --> 00:10:44.378  
它会把数据发送给苹果的服务器

00:10:44.478 --> 00:10:45.779  
服务端重新包装这些数据
该处理过程为Rewrap

00:10:46.046 --> 00:10:49.049  
也就到时候对于商户来说
这些数据是再次加密过的

00:10:49.616 --> 00:10:51.051  
该处理过程不会显示在手机

00:10:52.319 --> 00:10:56.156  
当应用获取再次加密的支付数据的时候
它同时可以进行一个回调操作

00:10:56.256 --> 00:10:59.826  
然后你就可以连接商户的服务器

00:11:00.627 --> 00:11:04.198  
或者网银支付的服务器

00:11:04.598 --> 00:11:07.000  
只要交易完成了 表单就会关闭

00:11:09.570 --> 00:11:11.538  
在网页上使用
Apple Pay与此非常类似

00:11:11.872 --> 00:11:13.407  
稍有几处不同

00:11:13.473 --> 00:11:16.410  
发生在与验证商户有关的地方

00:11:16.510 --> 00:11:18.478  
因为在iOS中应用都是
从App Store上获取的

00:11:18.579 --> 00:11:19.913  
它们是已签名二进制文件

00:11:20.380 --> 00:11:23.617  
在我们继续讨论这些之前
先让我们来看一下

00:11:23.750 --> 00:11:24.751  
Apple Pay的一些要求

00:11:25.953 --> 00:11:29.690 
任何网站都可使用Apple Pay

00:11:30.524 --> 00:11:33.093 
前提是需要拥有一个苹果开发者帐号

00:11:34.561 --> 00:11:37.364 
并且站点需要支持HTTPS

00:11:39.499 --> 00:11:42.836 
最后 站点需要遵守
Apple Pay的指导方针

00:11:43.003 --> 00:11:44.705 
这些指导方针都非常的明确

00:11:44.838 --> 00:11:46.874 
大多数的网银平台都有着相关的条款

00:11:47.007 --> 00:11:49.142 
关于那些商品可进行出售
那些商品禁止出售

00:11:51.678 --> 00:11:55.282 
现在已经有一些电子商务平台

00:11:55.449 --> 00:11:56.450 
已支持Apple Pay

00:11:57.751 --> 00:12:00.120 
我们还将会谈到
一些具体的电子商务平台

00:12:00.821 --> 00:12:02.789 
的网银支付处理

00:12:02.856 --> 00:12:04.791 
如果你已经加入了某个电子商务平台

00:12:04.858 --> 00:12:06.360 
你就不需要一个开发者帐户了

00:12:06.527 --> 00:12:07.995 
它可以帮你处理这些

00:12:10.130 --> 00:12:13.300 
假设你的站点符合所有的要求

00:12:14.368 --> 00:12:18.038 
那么为了使用Apple Pay
首先需要为你的站点注册

00:12:19.840 --> 00:12:21.742 
为你的站点注册是非常简单的

00:12:21.808 --> 00:12:25.479 
你只需要在开发者中心
创建一个商户标识符以及证书

00:12:27.214 --> 00:12:29.583 
然后注册你的域名

00:12:29.883 --> 00:12:31.318 
并且让它与商户标识符对应

00:12:31.518 --> 00:12:33.554 
域名需要是全称

00:12:33.620 --> 00:12:36.857 
比如store.apple.com

00:12:37.291 --> 00:12:39.493 
你想在哪站点支付
就需要填写相应的域名

00:12:40.294 --> 00:12:43.397 
当你通过域名注册之后
我们会前往该域名进行验证

00:12:44.665 --> 00:12:46.700 
然后你会获得一个证书

00:12:46.767 --> 00:12:48.969 
一个苹果公司发行的TLS证书

00:12:49.036 --> 00:12:52.105 
我们称之为Session证书
我需要重新说一下

00:12:52.172 --> 00:12:55.542 
在注册Apple Pay中
使用了三种信息

00:12:55.609 --> 00:12:58.679 
商户表识符以及商户证书

00:12:58.745 --> 00:13:00.347 
通过这两项
证明我们商户的身份

00:13:00.914 --> 00:13:03.016 
然后还有Apple Pay的
Session证书

00:13:03.083 --> 00:13:04.718 
代表了我们的域名

00:13:05.853 --> 00:13:08.522 
在开发者中心注册Apple Pay
非常简单和直接

00:13:08.589 --> 00:13:11.558 
应该现在就已经可以注册了
就像这样做

00:13:11.825 --> 00:13:12.960 
首先添加一个域名

00:13:13.393 --> 00:13:15.696 
然后我们会检查这个域名上

00:13:15.762 --> 00:13:17.931 
是否有我们要求放置的文件

00:13:18.265 --> 00:13:19.099 
这样就可以了

00:13:21.668 --> 00:13:24.338 
来看一下它为什么更适合使用

00:13:26.840 --> 00:13:28.876  
让我们来看看在网页上使用
Apple Pay的流程

00:13:29.109 --> 00:13:31.712  
就像在应用中
使用Apple Pay一样

00:13:32.179 --> 00:13:36.316  
首先需要点击进行
Apple Pay支付的按钮

00:13:38.218 --> 00:13:39.820  
在网页上有一个关键的地方不同

00:13:40.254 --> 00:13:42.256  
当你创建了一个支付请求的时候

00:13:42.689 --> 00:13:45.659  
也就是通知我们
你想对什么收费

00:13:46.793 --> 00:13:48.695  
然后有一些额外的处理

00:13:48.762 --> 00:13:52.099  
需要进行一次验证
你创建了一个商户的session

00:13:53.033 --> 00:13:55.702  
然后从你的网页服务器
发送到了Apple服务器

00:13:57.304 --> 00:13:59.840  
当Apple服务器有响应时

00:13:59.907 --> 00:14:01.275  
你再将这个支付请求
发送给Apple服务器

00:14:04.311 --> 00:14:05.512  
这就是唯一的区别了

00:14:05.579 --> 00:14:08.081  
这是与在应用中
进行Apple Pay相比

00:14:08.615 --> 00:14:10.317  
在网页中进行Apple Pay
的唯一的区别了

00:14:10.617 --> 00:14:12.252  
商户有效性验证

00:14:13.887 --> 00:14:16.023 
让我们看下商户验证的细节

00:14:16.123 --> 00:14:17.791 
让我们来谈下为什么我们要这么做

00:14:21.929 --> 00:14:24.998 
我在一分钟前提过

00:14:25.165 --> 00:14:27.568 
那就是网页与应用之间有一些不同之处

00:14:28.202 --> 00:14:32.039 
在iOS应用中

00:14:32.105 --> 00:14:35.075 
类似Apple Pay或
位置安全性被签署授权所保护着

00:14:35.209 --> 00:14:37.177 
如果你对此不是很熟悉

00:14:37.244 --> 00:14:40.380 
签署授权就是 App Store中
你应用的二进制文件部分签名信息

00:14:40.647 --> 00:14:44.184 
签署授权同时保护着用户和开发者

00:14:44.585 --> 00:14:46.854 
以及Apple Pay中的商户

00:14:47.387 --> 00:14:49.456 
我们需要注意的是
在网页上并不存在app store

00:14:49.523 --> 00:14:51.124 
所以我们并没有这些签署授权

00:14:51.225 --> 00:14:53.694 
我们使用了一个商户验证的处理
用替代签署授权

00:14:54.661 --> 00:14:58.232 
它保护了用户
也同时保护了像你一样的商户

00:14:58.332 --> 00:15:00.534 
举例来说
如果你的网站被攻破了

00:15:00.601 --> 00:15:02.669 
你可方便停掉
该站点Apple Pay

00:15:03.937 --> 00:15:06.573 
商户验证非常的简单和直接

00:15:06.640 --> 00:15:07.841 
它并不复杂

00:15:08.141 --> 00:15:10.711 
你拿到一个Apple Pay
服务器的URL

00:15:11.879 --> 00:15:13.947 
这个URL是Safari提供的

00:15:16.250 --> 00:15:18.285 
你让你的网页服务器使用这个URL

00:15:19.386 --> 00:15:21.488 
在请求商户的session中会用到

00:15:22.689 --> 00:15:25.125 
现在开始请求商户的session

00:15:25.425 --> 00:15:28.228  
你需简单提供一TLS证书
这证书是我们之前为网站域名得到的

00:15:28.362 --> 00:15:29.763  
这是个有挑战的回应

00:15:30.831 --> 00:15:33.166  
如果这个证书看上去很好
是有效的

00:15:33.300 --> 00:15:35.102  
并且它与这个域名匹配

00:15:35.502 --> 00:15:37.371  
就是你提交支付请求网站对应的域名

00:15:37.538 --> 00:15:38.739  
我们会收到一个session

00:15:41.942 --> 00:15:43.610  
这个session中的内容无法获得

00:15:43.710 --> 00:15:45.479 
你们不需要关注它的内容

00:15:45.612 --> 00:15:47.648 
它是一个具有唯一性的token

00:15:47.714 --> 00:15:49.216 
代表了一次Apple Pay的请求

00:15:50.250 --> 00:15:52.452 
它被用来确认
你的网站依然是安全的

00:15:52.786 --> 00:15:56.156 
每一次的Apple Pay
你都需要请求一次session

00:15:56.390 --> 00:15:58.125 
但是这种请求的开销比较少

00:15:58.292 --> 00:15:59.793 
且这过程不会占用太多的时间

00:16:00.727 --> 00:16:02.763 
在你会通过你的网页服务器来请求它

00:16:02.963 --> 00:16:05.098 
你并不是从你的用户那里来获得它

00:16:07.534 --> 00:16:09.870 
对于商户效验
我有一些建议

00:16:10.404 --> 00:16:13.440 
首先 让客户端发出
获得session的请求

00:16:13.507 --> 00:16:16.009 
因为请求速度可能会有比较大的差别

00:16:16.076 --> 00:16:17.244 
取决于用户所在的国家

00:16:17.377 --> 00:16:19.246 
Apple Pay有很多
服务器部署在世界各地

00:16:19.379 --> 00:16:21.548 
我们会使用

00:16:21.648 --> 00:16:23.217 
离用户当前位置最近的服务器

00:16:23.483 --> 00:16:25.886 
对于有些人来说

00:16:25.953 --> 00:16:29.523 
需要预先知道这些服务器的IP地址

00:16:29.590 --> 00:16:30.991 
用来让连接通过防火墙

00:16:31.058 --> 00:16:32.292 
我们会提供一份列表

00:16:32.459 --> 00:16:35.095 
放置在developmentalapple.com上
这样你们就能看到了

00:16:36.530 --> 00:16:38.932 
你应该只请求一次session

00:16:38.999 --> 00:16:39.967 
当用户点击Apple Pay按钮时

00:16:40.033 --> 00:16:42.169 
别在加载页面时就请求
那样是没有必要的

00:16:42.236 --> 00:16:44.471 
只需在用户点击了相应按钮后
才去请求session

00:16:44.538 --> 00:16:47.875 
当请求session时
我们会展示Apple Pay表单

00:16:48.275 --> 00:16:50.577 
用户会觉得这种情况是即时出现的

00:16:50.711 --> 00:16:52.479 
当他们点击了
Apple Pay按钮后

00:16:52.546 --> 00:16:55.048 
他们会看到这个表单
我们也会让它处于加载状态

00:16:55.182 --> 00:16:56.717 
直到效验完成

00:16:57.184 --> 00:16:59.253 
在下个部分
你们会看这些如何工作

00:16:59.319 --> 00:17:00.621 
即在我们讲述
JavaScript API时

00:17:02.089 --> 00:17:04.925 
最后一个建议 别在客户端
生成一个商户的session

00:17:05.592 --> 00:17:08.428 
这是因为你需要
提供一个session证书

00:17:08.529 --> 00:17:10.430 
而这个证书与你的域名对应

00:17:10.497 --> 00:17:12.799 
你是不想把这证书
也嵌入到你的网页页面中的

00:17:12.900 --> 00:17:14.902 
将这个证书保密是很重要的

00:17:15.502 --> 00:17:18.105 
因此你会在网页服务端来进行这种验证

00:17:19.705 --> 00:17:21.375 
好吧 让我们来概述一下

00:17:22.342 --> 00:17:23.410 
我们先需建立个网站

00:17:23.477 --> 00:17:26.813 
我们需要保证我们的网站
遵守Apple的要求

00:17:27.580 --> 00:17:30.484 
我们创建了虚拟的标识符
以及商户证书

00:17:31.118 --> 00:17:32.586 
我们将它与我们的域名相对应

00:17:34.621 --> 00:17:36.356 
然后我们了解到了如何进行验证

00:17:36.423 --> 00:17:40.027 
如何为每一个Apple Pay
支付进行效验

00:17:42.629 --> 00:17:45.165  
所以说这样覆盖了部分同样的流程

00:17:46.834 --> 00:17:47.968  
这个部分是什么？

00:17:49.069 --> 00:17:53.874  
就是我说过的与应用中
使用Apple Pay相一致的部分

00:17:54.875 --> 00:17:56.310  
但显然它们是不同的API

00:17:56.376 --> 00:17:59.646  
因为我们无法在服务端调用Swift

00:18:00.514 --> 00:18:01.882  
所以接下来我们会谈论到

00:18:01.982 --> 00:18:05.152 
如何用JavaScript API
来支持这个新特性

00:18:05.485 --> 00:18:07.354 
下面请Anders来进行介绍

00:18:07.454 --> 00:18:09.523 
他是WebKit团队中的一员

00:18:09.656 --> 00:18:10.657 
Anders

00:18:19.633 --> 00:18:20.667 
谢谢 Nick

00:18:21.668 --> 00:18:23.904 
今天在这里
我非常的兴奋

00:18:24.004 --> 00:18:28.008 
我会告诉大家使用Apple Pay
JavaScript API多简单

00:18:31.745 --> 00:18:35.349 
Nick已提到过Apple Pay
JavaScript API

00:18:35.482 --> 00:18:39.586 
已可以在iOS 10的Safari中

00:18:39.720 --> 00:18:41.388 
和那些通过SafariView
Controller的应用中使用

00:18:42.623 --> 00:18:47.327 
现通过Mac OS Sierra系统
可让你在Mac的safari中使用Apple Pay

00:18:48.028 --> 00:18:51.899 
同时需要使用Apple
Watch或者iPhone

00:18:51.999 --> 00:18:53.667 
来进行实际的授权

00:18:55.669 --> 00:18:57.671 
这些API非常的简单

00:18:57.871 --> 00:19:00.908 
它有一个单一的入口
叫做ApplePaySession

00:19:01.408 --> 00:19:06.079 
它受到了PassKit API影响
只是将场景切换到了应用中使用Apple Pay下

00:19:06.580 --> 00:19:10.651 
如果你熟悉PassKit API
那么你会发现两者很类似

00:19:12.953 --> 00:19:16.857 
在我们进行深入的了解之前

00:19:16.924 --> 00:19:18.325 
我需要介绍一个朋友先

00:19:19.626 --> 00:19:23.430 
她经营了一个商店

00:19:24.064 --> 00:19:25.799 
售卖高端的衣服

00:19:27.134 --> 00:19:28.235 
这些衣服是给狗穿的

00:19:29.803 --> 00:19:33.240 
在几个月之前
她运行了一个网站

00:19:33.307 --> 00:19:35.209 
在上面可以买衣服

00:19:35.275 --> 00:19:37.544 
你可以在网上进行支付

00:19:37.611 --> 00:19:39.179 
然后店家就会发货了

00:19:40.280 --> 00:19:44.985 
但是不幸的是
现在这个生意有个困境

00:19:48.488 --> 00:19:51.258 
有很多人访问这个网站

00:19:51.458 --> 00:19:54.461 
但是却没有多少订单

00:19:54.895 --> 00:19:57.297 
让我们来看下这个网站

00:19:57.431 --> 00:19:58.832 
找一下原因

00:20:02.002 --> 00:20:03.837 
这就是我们的网站了

00:20:04.137 --> 00:20:07.975 
比如我们想买一条可爱的围巾

00:20:09.042 --> 00:20:13.447 
首先将它添加到购物车里面

00:20:15.849 --> 00:20:17.251 
然后我需要去付款

00:20:19.152 --> 00:20:20.721 
这时候打开付款的页面

00:20:20.854 --> 00:20:22.990 
输入收货地址

00:20:25.425 --> 00:20:27.294 
这时候到信用卡这一栏了

00:20:27.394 --> 00:20:30.297 
输入信用卡号以及账单地址

00:20:32.032 --> 00:20:37.137  
然后我就可以提交订单
然后我的围巾也就会被运送了

00:20:38.739 --> 00:20:41.808 
让我们看一下应该如何使用
Apple Pay API

00:20:42.009 --> 00:20:44.978 
让这个流程变得更加简单合理

00:20:46.313 --> 00:20:50.217 
举例来说
如果我们为购物车增加一个

00:20:50.517 --> 00:20:54.555 
Apple Pay的按钮

00:20:54.855 --> 00:20:58.559 
那样在产品页面就可以下单了

00:20:59.993 --> 00:21:03.564 
现在我们想增加这个按钮

00:21:03.664 --> 00:21:06.033 
但仅限那些能够使用
Apple Pay的用户

00:21:07.367 --> 00:21:08.569 
为了做成那样

00:21:08.735 --> 00:21:12.406 
我们可以使用函数
ApplePaySession.canMakePayments

00:21:13.340 --> 00:21:15.342 
这是一个用起来非常简便的函数

00:21:15.475 --> 00:21:17.244 
在代码中
它看起来是这样的

00:21:17.644 --> 00:21:20.948 
注意 我检查了当前的
window.ApplePaySession

00:21:21.048 --> 00:21:25.052 
在使用之前
需要进行这样的检查

00:21:25.252 --> 00:21:29.857 
我不是检查WebKit或者
Safari的版本

00:21:29.957 --> 00:21:32.492 
我是在检查
window.ApplePaySession对象是否存在

00:21:33.327 --> 00:21:35.028 
如果它存在的话
我就会调用它

00:21:35.195 --> 00:21:38.232 
它会返回一个Boolean
然后我会检查这个值

00:21:38.565 --> 00:21:42.536 
如果返回true
我就调用showApplePayButtons

00:21:43.203 --> 00:21:44.404 
这样显示出相应的按钮

00:21:46.306 --> 00:21:47.674 
值得注意的是

00:21:47.741 --> 00:21:51.011 
window.ApplePaySession
只会告诉你

00:21:51.078 --> 00:21:52.513 
这设备是否支持Apple Pay

00:21:52.946 --> 00:21:55.849 
如果你使用的
是iPhone或者iPad

00:21:55.983 --> 00:21:58.252 
它会返回是否存在一个安全部件的结果

00:21:58.685 --> 00:22:00.187 
如果你在Mac上使用

00:22:00.320 --> 00:22:03.590 
它会告诉你

00:22:03.857 --> 00:22:05.392 
是否存在一个iPhone或者
Apple Watch能为这次交易授权

00:22:06.426 --> 00:22:09.663 
它不会告诉你用户是否已经
为Apple Pay添加过银行卡

00:22:10.364 --> 00:22:13.767 
如果需要检查这一点的话

00:22:13.867 --> 00:22:15.135 
我们可以使用

00:22:15.202 --> 00:22:17.571 
ApplePaySession.canMakePayments
WithActiveCard

00:22:18.739 --> 00:22:22.476 
你需要传递你的商户标识符给这个函数

00:22:23.010 --> 00:22:27.648 
然后它会向Apple Pay
服务器验证

00:22:27.748 --> 00:22:29.983 
这个商户标识符是否正确

00:22:30.450 --> 00:22:33.687 
这个函数自身的属性会关联这个域名

00:22:33.854 --> 00:22:35.255 
因为你从这个域名发送请求

00:22:36.423 --> 00:22:40.594 
鉴于此 它是异步执行的并且返回一个
JavaScript promise

00:22:41.528 --> 00:22:44.364 
如你不知道一个JavaScript
promise是什么

00:22:44.531 --> 00:22:47.167 
你可以把它当成一个功能更强的

00:22:47.267 --> 00:22:49.837 
回调处理程序

00:22:52.639 --> 00:22:56.109 
你使用这个函数的时候还有一些限制

00:22:56.210 --> 00:23:00.280 
你只能在一些情况下才能使用
如支付流程默认用Apple Pay

00:23:00.848 --> 00:23:04.318 
或者你想在产品页面上
就添加一个产品页面按钮

00:23:04.518 --> 00:23:07.221 
在我们的情况中
我们想添加一Apple Pay按钮

00:23:07.321 --> 00:23:10.057 
放在我们的产品页面上
所以我们可以使用这个函数

00:23:10.290 --> 00:23:13.794 
另外我们可能会使用
ApplePaySession.canMakePayments

00:23:15.629 --> 00:23:17.598 
我们在这里使用了这个函数

00:23:18.098 --> 00:23:21.768 
我又一次的检查了Apple Pay session
对象是否存在

00:23:22.603 --> 00:23:25.539 
然后调用canMakePayments
WithActiveCard

00:23:25.772 --> 00:23:27.708 
我输入了我的商户标识符

00:23:28.175 --> 00:23:34.214 
然后我使用了这个promise
当promise成功后就会执行相应的功能

00:23:34.381 --> 00:23:37.217 
在这个例子中promise成功后
会得到一个BOOL值

00:23:37.551 --> 00:23:40.754 
我在promise中的代码就会执行

00:23:40.821 --> 00:23:44.625 
如果canMakePayments返回true
那么就会展示ApplePay按钮

00:23:47.094 --> 00:23:51.198 
现在我们就能看到每一个产品下面
都有一个优美的按钮了

00:23:51.532 --> 00:23:54.268 
下一步就是弹出支付表单

00:23:54.501 --> 00:23:56.303 
当用户点击了这些按钮的时候

00:23:57.971 --> 00:23:59.506 
为了做成这样

00:23:59.573 --> 00:24:02.843 
我们需要创建一个新的ApplePaySession
JavaScript对象

00:24:03.810 --> 00:24:07.214 
ApplePaySession
构造器有两个参数

00:24:07.614 --> 00:24:10.284 
一个是API版本号

00:24:10.918 --> 00:24:12.319 
还有一个是我们自定义的

00:24:12.452 --> 00:24:15.255 
从而让我们可以扩展
ApplePaySession API

00:24:15.522 --> 00:24:19.359 
这样可以向下兼容而不影响当前的用户

00:24:21.128 --> 00:24:25.866 
这当前的API的版本号是1
所以就一直保持1

00:24:27.868 --> 00:24:31.371 
将支付请求当成
第二个参数传入这个请求

00:24:31.738 --> 00:24:35.943 
如果你较熟悉PassKit API

00:24:36.009 --> 00:24:37.644 
你会发现这个JavaScript和
PKPaymentRequest一样

00:24:38.412 --> 00:24:41.281 
它会拿到所有必要的信息

00:24:41.348 --> 00:24:44.885 
来在表单中展示
比如货币类型 国家

00:24:44.952 --> 00:24:48.455 
如何支付以及总金额

00:24:49.690 --> 00:24:53.894 
还有一些可选项
比如收货地址

00:24:53.961 --> 00:24:55.395 
可能会被要求

00:24:56.430 --> 00:24:59.366 
然后你就获得了新的
ApplePaySession对象

00:24:59.499 --> 00:25:02.336 
你只需调用Begin命令
然后展示表单

00:25:04.438 --> 00:25:06.440 
就像这样的JavaScript代码

00:25:06.874 --> 00:25:10.010 
首先我们声明一个
paymentRequest对象

00:25:10.644 --> 00:25:13.780 
然后指明了货币码和国家码

00:25:14.781 --> 00:25:21.288 
这里我指明了总金额和支持的卡片种类

00:25:21.421 --> 00:25:23.490 
还有商户的经营范围

00:25:23.991 --> 00:25:28.829 
最后我指明了需要一个完整的邮编

00:25:28.962 --> 00:25:30.764  
处于发货的考虑

00:25:32.432 --> 00:25:35.002  
就我创建了
新的ApplePaySession

00:25:35.169 --> 00:25:37.404  
我传入了商户号的参数
这里是1

00:25:37.604 --> 00:25:39.173  
还有支付请求

00:25:39.540 --> 00:25:42.442  
在得到返回结果之后
我仍然会再次调用sessions

00:25:45.445 --> 00:25:49.650 
现在使用任何支付的API

00:25:49.783 --> 00:25:51.952 
我们都去要确保所有的细节是正确的

00:25:52.286 --> 00:25:54.588 
正因为如此

00:25:57.090 --> 00:26:01.862 
在我们展示表单之前
我们需要进行一系列的验证

00:26:02.663 --> 00:26:05.265 
如果任何一步出现错误

00:26:05.999 --> 00:26:09.336 
我们会停止 然后抛出一个
JavaScript的异常

00:26:10.838 --> 00:26:13.707 
正由于此 创建一个
Apple Pay session

00:26:13.774 --> 00:26:15.542 
可能会抛出一个
JavaScript异常

00:26:15.976 --> 00:26:19.012 
举例来说
如果你在一个不安全的页面进行调用

00:26:19.446 --> 00:26:22.783 
比如这个页面不是基于HTTPS的

00:26:22.850 --> 00:26:25.886 
没有使用最好的编码协议

00:26:26.987 --> 00:26:30.791 
实际上每个Apple Pay
session API

00:26:30.858 --> 00:26:33.327 
都会抛出异常

00:26:33.393 --> 00:26:35.028 
如在一个不安全页面上进行调用

00:26:37.364 --> 00:26:40.100 
创建Apple Pay
session也会发生异常

00:26:40.167 --> 00:26:42.669 
在你没有传入一个有效的
支付请求的时候

00:26:43.103 --> 00:26:46.840 
举例来说
你没有指定一个支持的网络列表

00:26:47.207 --> 00:26:51.345 
或者总金额是负的

00:26:51.678 --> 00:26:56.250 
或者输入了什么错误的数据
我们无法识别

00:26:56.583 --> 00:26:58.051 
这样都会抛出异常

00:27:00.420 --> 00:27:05.025 
此外 调用Begin也可能抛出异常

00:27:05.092 --> 00:27:09.363 
若你不是在一个点击事件处理中调用它
举例来说

00:27:09.863 --> 00:27:12.199 
我们不会允许展示表单

00:27:12.566 --> 00:27:15.169 
除非用户明确的

00:27:15.235 --> 00:27:17.804 
点击了按钮

00:27:19.339 --> 00:27:23.143 
如果已经存在了表单了
然后我们又试图去调用Begin

00:27:23.243 --> 00:27:25.012 
我们也会获得
JavaScript异常

00:27:25.612 --> 00:27:28.348 
因为我们只允许
同时只能出现一个表单

00:27:29.583 --> 00:27:33.153 
如果你看到了这些错误的话

00:27:33.587 --> 00:27:37.357 
你可以使用网页检查器的错误控制台

00:27:37.758 --> 00:27:40.694 
来查看错误原因的细节

00:27:42.529 --> 00:27:47.634 
如果一切都正常

00:27:49.369 --> 00:27:50.504 
并且所有步骤也正确

00:27:50.737 --> 00:27:52.439 
那么就会显示这个表单

00:27:54.575 --> 00:27:57.878 
但是需要注意
你现在还没有完成支付

00:27:58.011 --> 00:28:00.380 
我们看到这里还在加载

00:28:00.814 --> 00:28:03.917 
因为还没有完成商户的效验

00:28:04.017 --> 00:28:05.419 
Nick之前提到过这一点

00:28:06.520 --> 00:28:09.790 
所以在表单出现后

00:28:10.324 --> 00:28:12.826 
我们会立即发送
一个验证商户的DOM事件

00:28:12.926 --> 00:28:14.661 
向ApplePaySession
对象发送

00:28:15.863 --> 00:28:18.832 
这个DOM事件有一个属性
validationURL

00:28:19.199 --> 00:28:22.369 
你需要让你的服务器
能够访问这个URL

00:28:22.469 --> 00:28:25.939 
然后加载它来获得商户session

00:28:27.307 --> 00:28:29.843 
然后当你的服务器获得
merchantsession对象后

00:28:29.977 --> 00:28:34.014 
你需要调用
completeMerchantValidation

00:28:34.248 --> 00:28:36.550 
来通过这次验证
然后就可以继续了

00:28:37.584 --> 00:28:40.587 
一次商户验证事件处理就像这样

00:28:42.322 --> 00:28:44.825 
这里我调用了这个
performValidation方法

00:28:44.925 --> 00:28:45.959 
它是我自己定义的

00:28:46.093 --> 00:28:49.263 
它返回一个promise
这个promise

00:28:49.396 --> 00:28:51.098 
来获得商户的session

00:28:51.732 --> 00:28:53.300 
所以当promise成功后

00:28:53.567 --> 00:28:55.936 
我会调用
completeMerchantValidation

00:28:56.136 --> 00:28:57.804 
传入了商户session的参数

00:28:57.938 --> 00:28:59.840 
这就是你在商户验证中所做的

00:29:01.742 --> 00:29:04.578 
现在 我们的商户验证就完成了

00:29:04.778 --> 00:29:07.614 
用户可以用手机或者
Apple Watch

00:29:07.714 --> 00:29:09.082 
对这次支付授权

00:29:09.316 --> 00:29:12.352 
当这次支付获得授权之后

00:29:12.452 --> 00:29:16.957 
我们会向Apple Pay session对象
发送一个支付授权通过的DOM事件

00:29:18.425 --> 00:29:20.894 
这个DOM事件包含了一个支付属性

00:29:21.228 --> 00:29:24.398 
这个属性含有所有必需的支付信息

00:29:24.898 --> 00:29:27.734 
它有着诸东西如收货地址

00:29:28.168 --> 00:29:32.673 
以及其他一些在这次支付会用到的信息

00:29:33.207 --> 00:29:36.343 
然后它还有加密过的支付token

00:29:36.577 --> 00:29:38.745 
网银平台会用到这个token

00:29:39.880 --> 00:29:44.618 
一旦你向网银平台发送了token
意味着这次支付就已经处理完毕了

00:29:45.385 --> 00:29:48.155 
获得网银平台的反馈数据后调用
completePayment方法

00:29:48.288 --> 00:29:51.892 
这个方法同时会让表单在界面上消失
就像这样

00:29:53.260 --> 00:29:56.029 
这里我们就会有一个授权后的事情处理

00:29:56.997 --> 00:29:58.498 
我调用
sendPaymentToken

00:29:58.599 --> 00:30:00.033 
我将token传入了

00:30:00.467 --> 00:30:04.304 
这样就会返回一个promise

00:30:04.771 --> 00:30:08.809 
会通过一个BOOL值来代表

00:30:08.876 --> 00:30:10.711 
你的支付成功还是失败

00:30:11.178 --> 00:30:13.614 
如果成功的话

00:30:13.714 --> 00:30:16.250 
我会将状态设置为
ApplePaySession.STATUS_SUCCESS

00:30:17.150 --> 00:30:20.320 
如果失败了
假定这个支付没有完成

00:30:20.521 --> 00:30:23.724 
那么将状态设置为
ApplePaySession.STATUS_FAILURE

00:30:24.958 --> 00:30:26.827 
 然后我会调用
completePayment

00:30:26.994 --> 00:30:30.163 
我传递了status参数
它会关闭sheet

00:30:30.631 --> 00:30:32.599 
然后我再调用
showConfirmation

00:30:32.666 --> 00:30:35.669 
这样会弹出一个美观的订单确认的页面

00:30:36.303 --> 00:30:40.274 
调用completePayment
传入成功的状态码

00:30:40.641 --> 00:30:43.310 
你会看一个好看的确认的标记
并且表单会从界面上消失

00:30:44.878 --> 00:30:48.148 
好了 现在让我们来看一下演示

00:30:48.515 --> 00:30:50.517 
来看一下如何办到这些

00:30:56.924 --> 00:30:57.991 
我们开始了

00:30:59.359 --> 00:31:02.729 
首先 我们进入了这个网站

00:31:04.431 --> 00:31:07.568 
同时让我们看一下源代码

00:31:09.536 --> 00:31:13.040 
在我们加入JavaScript之前
关注一下这些

00:31:13.173 --> 00:31:16.577 
这里我加了两个触摸用的图标

00:31:17.110 --> 00:31:20.547 
举例来说在Safari
Favorites视图中会用到

00:31:20.614 --> 00:31:24.952 
它们也可以在Apple Pay
授权的表单中使用

00:31:25.018 --> 00:31:26.320 
我们稍后会看到

00:31:27.487 --> 00:31:30.157 
这里我列举了所有的产品

00:31:30.290 --> 00:31:33.560 
之前我们已经为它们
增加了Apple Pay按钮

00:31:33.894 --> 00:31:36.830 
我也可以通过CSS来让它们是否显示

00:31:37.297 --> 00:31:38.665 
让我们来看一下

00:31:40.667 --> 00:31:41.668 
这是我的CSS文件

00:31:41.735 --> 00:31:44.004 
这里是关于Apple Pay
按钮的声明

00:31:44.338 --> 00:31:47.407 
这里我设置让它们不显示

00:31:47.674 --> 00:31:49.977 
对于它的图片

00:31:50.077 --> 00:31:53.680 
我使用了WebKit-named-image特效

00:31:53.780 --> 00:31:56.183 
这样我们可以使用系统自带的
Apple Pay的Logo

00:31:56.316 --> 00:31:58.452 
你并不需在你的服务器上放置这张图片

00:31:59.686 --> 00:32:03.690 
好了 现在我们需要增加一些代码

00:32:03.790 --> 00:32:07.694 
让设备支持Apple Pay情况下
显示Apple Pay按钮

00:32:09.096 --> 00:32:11.632 
这里我已经写过一些同样的代码了

00:32:11.698 --> 00:32:15.369 
我为DOMContentLoaded事件
创建了一个EventListener

00:32:15.636 --> 00:32:16.803 
这个事件会被执行

00:32:16.904 --> 00:32:19.039 
当主页被加载的时候

00:32:19.439 --> 00:32:22.943 
但是在任何图片加载之前

00:32:23.010 --> 00:32:24.645 
所以这个地方适合放置这些代码

00:32:24.778 --> 00:32:27.214 
让我们来添加一些代码来完成这个功能

00:32:27.848 --> 00:32:31.485 
我们又检查了ApplePaySession是否存在

00:32:31.652 --> 00:32:34.054 
然后我调用了
canMakePaymentsWithActiveCard

00:32:34.454 --> 00:32:37.925 
并且在我的promise函数中
我检查了返回的值

00:32:38.025 --> 00:32:40.527 
若返回true
调用showApplePayButton

00:32:40.961 --> 00:32:44.765 
现在让我们保存后再回到这里
然后我们开始加载

00:32:44.865 --> 00:32:46.867 
现在我们就获得了
Apple Pay按钮

00:32:48.135 --> 00:32:52.639 
下一个步骤是
点击按钮的时候 弹出sheet

00:32:52.706 --> 00:32:55.776 
我已经写了一个applePayButtonClicked函数

00:32:56.176 --> 00:32:59.880 
在用户点击按钮的时候会执行

00:33:00.514 --> 00:33:04.718 
所以我们想在这里让用户点击按钮之后
就显示表单

00:33:05.352 --> 00:33:08.589 
所以我又声明了
paymentRequest对象

00:33:08.922 --> 00:33:12.025 
这里的金额 我直接硬编码了
这毕竟只是个demo

00:33:12.159 --> 00:33:15.629 
但是在实际的场景中
这个数据应该从别的地方获取

00:33:16.330 --> 00:33:19.099 
我创建了一个新的
ApplePaySession对象

00:33:19.233 --> 00:33:20.367 
然后调用Begin

00:33:20.567 --> 00:33:24.538 
让我们保存后重新加载
并且展示出表单

00:33:28.175 --> 00:33:31.211 
可以看到表单并没有显示

00:33:31.345 --> 00:33:35.048 
让我们打开错误控制台
来找一下原因

00:33:37.551 --> 00:33:38.485 
好了 控制台指出

00:33:38.585 --> 00:33:41.555 
“supportednetwork”
并不是一个合法的属性名称

00:33:41.622 --> 00:33:44.358 
看起来这里是
我拼错了"supported"

00:33:44.691 --> 00:33:47.094 
所以让我们回头解决掉这个问题

00:33:49.897 --> 00:33:50.998 
然后重新加载

00:33:52.666 --> 00:33:54.301 
现在表单就可以展示出来了

00:33:54.568 --> 00:33:57.171 
但是我还不能确认这次支付

00:33:57.337 --> 00:33:59.573 
因为还没有进行商户的验证

00:33:59.840 --> 00:34:01.308 
所以让我们来进行这个步骤

00:34:03.610 --> 00:34:06.547 
我想加入
validateMerchant事情处理

00:34:06.613 --> 00:34:09.550 
我会在这里创建了
session后再加入

00:34:09.683 --> 00:34:11.351 
但是我们会先调用Begin

00:34:11.752 --> 00:34:14.154 
再一次的
调用performValidation

00:34:14.554 --> 00:34:18.091 
当这个promise获得了
处理结果的时候

00:34:18.358 --> 00:34:21.828 
它会调用completeMerchantValidation
我会传入商户的session

00:34:22.228 --> 00:34:28.068 
然后我就能够确认支付了

00:34:28.668 --> 00:34:30.637 
现在我们还需要做最后一件事情

00:34:30.737 --> 00:34:33.206 
那就是添加我们的支付授权代码

00:34:34.608 --> 00:34:40.647 
我们会向服务器发送支付token

00:34:40.880 --> 00:34:42.716 
并且完成这次支付

00:34:42.815 --> 00:34:45.752 
如果我们成功了
我会将状态设为SUCCESS

00:34:46.186 --> 00:34:47.788 
否则我将它设为FAILURE

00:34:48.121 --> 00:34:51.257 
回调completePayment
及showConfirmation

00:34:51.658 --> 00:34:56.563 
现在我想使用QuickTime

00:34:56.663 --> 00:35:00.434 
让我们来看一下
在真实手机上的表现效果

00:35:00.968 --> 00:35:03.937 
让我们重新加载
我点击了支付按钮

00:35:05.038 --> 00:35:06.306 
现在我就可以确认了

00:35:06.406 --> 00:35:09.510 
就像你们看到的那样
我还能看到这个网站的图标

00:35:09.610 --> 00:35:12.179 
那是因为我添加了链接图标的属性

00:35:12.579 --> 00:35:16.116 
现在我们可以进行支付了
然后完成支付

00:35:16.550 --> 00:35:18.485 
商家会安排发货了

00:35:28.328 --> 00:35:32.099 
所以为网页添加Apple Pay
是非常简单的

00:35:32.633 --> 00:35:35.836 
我相信如果那样做的话

00:35:36.303 --> 00:35:39.373 
Canine服饰会在狗狗中流行

00:35:40.474 --> 00:35:41.775 
该让Nick回到台上了

00:35:47.147 --> 00:35:50.017 
大家都知道Anders
他是WebKit团队中的那位

00:35:50.083 --> 00:35:53.453 
跟狗天天在一起
并且应该被丢进狗屋的人

00:35:54.087 --> 00:35:55.155 
好了 让我们继续

00:35:55.689 --> 00:35:56.990 
给我一根骨头吧

00:35:59.226 --> 00:36:00.894 
我去当软件工程师太浪费了

00:36:00.961 --> 00:36:01.929 
好了

00:36:01.995 --> 00:36:08.435 
我们已经看到了如何在网页中
支持Apple Pay

00:36:08.569 --> 00:36:11.605 
让我们来讨论一些可能对你们来说
是比较重要的事情

00:36:11.705 --> 00:36:13.240 
那就是你们如何获得付款

00:36:13.307 --> 00:36:15.375 
从Apple Pay中获得付款

00:36:16.777 --> 00:36:21.882 
Anders讲述了
获得支付数据的过程

00:36:23.283 --> 00:36:24.518  
后面会发生什么

00:36:25.652 --> 00:36:29.323  
因为拥有一个支付token
你现在有两个选择

00:36:31.024 --> 00:36:34.895 
第一个是自己对这个
token进行解码

00:36:35.128 --> 00:36:36.797 
通过你自己的服务器

00:36:38.131 --> 00:36:40.601 
这是较好的选择
对你已使用了Apple Pay

00:36:40.701 --> 00:36:42.836 
或者你有一个非常大型的电子商务后台

00:36:42.903 --> 00:36:45.072 
你会熟悉其中加密算法

00:36:45.138 --> 00:36:47.007 
在我们的开发者网站上有相关的文档

00:36:47.474 --> 00:36:49.877 
另外一个选择是

00:36:49.977 --> 00:36:52.379 
将这些加密的支付数据

00:36:52.579 --> 00:36:56.383 
发送到网银平台
然后它们会帮你解码这些支付数据

00:36:56.483 --> 00:36:58.952 
前提是你将密匙提供给了它们

00:37:00.554 --> 00:37:01.922 
这是一个比较方便的选择

00:37:02.022 --> 00:37:06.326 
非常多的网银平台
提供了应用内的SDK

00:37:06.527 --> 00:37:08.629 
我们非常相信这些平台

00:37:08.729 --> 00:37:12.065 
也会提供类似的基于
JavaScript的SDK

00:37:12.132 --> 00:37:14.635 
让你们可以直接集成到网站中

00:37:15.903 --> 00:37:17.771 
实际上在欧美

00:37:18.038 --> 00:37:21.875 
现在超过40家网银平台
支持Apple Pay

00:37:21.942 --> 00:37:23.877 
名单太多了
所以就不一一列举了

00:37:24.144 --> 00:37:26.914 
全部名单列表可在
developer.apple.com上找到

00:37:27.948 --> 00:37:30.984 
就像我说的那样 许多网银平台
现在提供了应用内的SDK

00:37:31.051 --> 00:37:34.188 
将来它们也会提供网页的SDK

00:37:36.356 --> 00:37:39.059 
这里我想强调一下
一些新的网银平台

00:37:39.126 --> 00:37:41.762 
大家都知道
Apple Pay在中国可以使用了

00:37:41.828 --> 00:37:44.364 
这项功能在中国也同样好用

00:37:44.431 --> 00:37:45.532 
像在欧洲或美国那样

00:37:45.666 --> 00:37:49.436 
在中国有四家网银平台
支持Apple Pay

00:37:49.503 --> 00:37:53.774 
它们是中国银联  连连支付
首信易支付以及易宝支付

00:37:53.974 --> 00:37:56.243 
若你在亚洲转发应用内
或者网页的请求

00:37:56.310 --> 00:37:58.779 
你同样能获得良好的支持

00:38:00.380 --> 00:38:04.651 
就像我前面提到过的电子商务平台

00:38:05.252 --> 00:38:08.021 
很多站点并没有独立的电子商务系统

00:38:08.088 --> 00:38:11.859 
它们使用着电子商务平台提供的服务

00:38:12.259 --> 00:38:15.896 
我们现已与很多电子商务平台进行合作

00:38:16.330 --> 00:38:18.365 
我们主要有三个电子平台合作方

00:38:18.732 --> 00:38:22.269  
它们是Demandware IBM
以及Shopify

00:38:22.703 --> 00:38:24.905  
如果你没有使用这三家中的一个

00:38:25.172 --> 00:38:27.741  
那么你在使用Apple Pay时

00:38:27.808 --> 00:38:30.043  
在使用Apple Pay的时候

00:38:30.110 --> 00:38:31.578  
需要一个开发者账号

00:38:32.246 --> 00:38:34.815  
使用这些平台对你来说会更方便

00:38:34.882 --> 00:38:38.852  
它们会处理与Apple Pay
深度集成的事情

00:38:43.090 --> 00:38:45.893  
现在你可能会想去试一试了

00:38:45.959 --> 00:38:47.027  
我希望你们都那么想

00:38:47.728 --> 00:38:50.197  
我想多谈一些关于测试的事情

00:38:51.265 --> 00:38:53.734  
测试你的网站:

00:38:53.901 --> 00:38:55.636  
我们来介绍一个新的测试环境

00:38:55.702 --> 00:38:58.272  
它为Apple Pay打造名叫
Apple Pay Sandbox

00:38:58.839 --> 00:39:00.340  
这是一种新的测试方式

00:39:00.607 --> 00:39:04.978  
在这个测试环境下
默认网页就是支付Apple Pay

00:39:05.612 --> 00:39:07.281  
如果你想获得更多信息的话

00:39:07.347 --> 00:39:09.249  
这个会议我们没有时间
来谈论这个问题

00:39:09.483 --> 00:39:11.852  
但是在下个会议我们会谈到

00:39:11.952 --> 00:39:13.654  
我们会为大家讲述Sandbox

00:39:13.754 --> 00:39:16.390  
如果访问我们的网站
developer.apple.com

00:39:16.623 --> 00:39:19.726  
那里会有Apple Pay
Sandbox相关的更多的信息

00:39:19.793 --> 00:39:21.929  
作为一个开始
你将会能够

00:39:22.029 --> 00:39:23.397  
测试网页上进行Apple Pay

00:39:23.497 --> 00:39:25.499  
然后我们就可以将Apple Pay
在生产环境上部署了

00:39:25.566 --> 00:39:29.636 
我们即将发布iOS X
以及Mac OS Sierra

00:39:36.577 --> 00:39:39.580 
所以当你们开始测试
Apple Pay的时候

00:39:39.646 --> 00:39:43.383 
请给我们一些反馈来帮助我们解决错误

00:39:43.650 --> 00:39:46.720 
我们非常愿意听到你们反馈问题

00:39:46.787 --> 00:39:48.255 
及其它你们所见到的事情

00:39:48.355 --> 00:39:51.225 
如果你们愿意表示祝贺之类的话
我们也非常愿意听到

00:39:52.626 --> 00:39:56.730 
好吧 让我们看看最后一个部分

00:39:57.764 --> 00:39:59.333 
Apple Pay的设计

00:39:59.933 --> 00:40:03.537 
如何为网站建立一个能收到欢迎的体验

00:40:03.937 --> 00:40:06.707 
这方面也同样的适用于应用

00:40:09.343 --> 00:40:12.012 
在最开始的部分
我提到了一点

00:40:12.613 --> 00:40:14.047 
那就是Apple Pay三个原则：

00:40:14.681 --> 00:40:18.452 
它们是简单 安全 以及私密

00:40:20.187 --> 00:40:21.855 
你的设计需要能体现哪些

00:40:22.422 --> 00:40:23.557 
而不是设计的太复杂

00:40:23.690 --> 00:40:25.659 
Apple Pay不能设计得
使用起来太复杂

00:40:27.027 --> 00:40:29.563 
Apple Pay也有三个主要阶段

00:40:29.997 --> 00:40:31.498 
它们是预支付阶段

00:40:31.965 --> 00:40:34.568 
在这一阶段
你还没有看到Apple Pay表单

00:40:34.635 --> 00:40:38.071 
这种体验发生在
Apple Pay表单出现之前

00:40:39.206 --> 00:40:42.176 
然后是支付过程
实际的支付使用

00:40:42.242 --> 00:40:44.912 
这时候表单已经出现了

00:40:45.112 --> 00:40:47.214 
你可以定制那个界面
你还需要做什么呢

00:40:47.281 --> 00:40:48.115 
让我们来看看

00:40:49.249 --> 00:40:50.817 
然后还有发送支付的过程

00:40:51.585 --> 00:40:54.555 
那是表单消失后的体验

00:40:55.355 --> 00:40:57.591 
让我们来完整的看一下这三种阶段

00:40:57.658 --> 00:41:02.729 
然后讨论一下你如何设计
Apple Pay的各个阶段

00:41:05.132 --> 00:41:07.734 
预支付开始于用户点击了
Apple Pay按钮

00:41:08.535 --> 00:41:10.871 
在Cocoa Touch中也有
同样的Apple Pay按钮

00:41:10.938 --> 00:41:13.340 
就像我刚才展示的那样

00:41:13.407 --> 00:41:16.910 
你也可在Cocoa
Touch中使用它

00:41:16.977 --> 00:41:19.079 
这种按钮有很多种风格

00:41:19.580 --> 00:41:20.948 
这里有很多种

00:41:21.348 --> 00:41:24.818 
Anders展示了使用CSS来改变
但是需要重申的是

00:41:25.953 --> 00:41:29.256 
我们提供了WebKit-image-named的属性
你们可以使用它

00:41:29.623 --> 00:41:31.024 
你可以获得一个Apple Pay的logo

00:41:31.892 --> 00:41:33.894 
就可在网页的按钮上使用了logo了

00:41:35.696 --> 00:41:37.664 
有些可以改
而有些不能改

00:41:37.731 --> 00:41:39.132 
使用Apple Pay时

00:41:40.300 --> 00:41:41.969 
使用内建的资源

00:41:43.337 --> 00:41:45.205 
即使我们修改了logo
你们也没必要知道

00:41:45.272 --> 00:41:47.040 
你可能想确保你logo是最新的

00:41:47.541 --> 00:41:50.544 
并且放置到任何用户想进行购买的地方

00:41:50.844 --> 00:41:51.912 
不用隐藏它

00:41:51.979 --> 00:41:54.248 
不要让用户对支付感到困难

00:41:54.381 --> 00:41:56.416 
但是支付操作却很简便

00:41:57.484 --> 00:41:58.852 
还有一些最好不要做的建议

00:41:59.453 --> 00:42:03.590 
不要修改按钮的外观或者它的行为

00:42:04.157 --> 00:42:06.527 
对于用户来说

00:42:06.593 --> 00:42:08.762 
他们点击了Apple Pay按钮
就让他们看到Apple Pay表单

00:42:08.829 --> 00:42:10.664 
我们希望有这样的体验

00:42:11.198 --> 00:42:12.966 
同样不要让这个按钮无效

00:42:13.033 --> 00:42:17.404 
苹果的标准规定
你不能让这个无效

00:42:17.504 --> 00:42:20.707 
你必须于其它的支付方式同等的对待它

00:42:23.343 --> 00:42:25.445 
让我们讨论一下什么地方
可以放置这个按钮

00:42:26.613 --> 00:42:28.549 
 Anders的演示已向你们展示了

00:42:28.649 --> 00:42:31.685 
再开始支付流程之前就放置好这个按钮

00:42:32.786 --> 00:42:35.656 
在产品的界面放置这个按钮
可以增加用户的支付转化率

00:42:35.722 --> 00:42:38.625 
我们从应用中看到了支持Apple
Pay后会带来良好的数据

00:42:38.725 --> 00:42:41.128 
表明了支付转换率的上升

00:42:41.195 --> 00:42:44.097 
他们只是在产品的界面放置这个按钮
就能产生这种结果

00:42:44.998 --> 00:42:48.702 
同样明显 你可将它放到常规的
支付流程以及购物车中

00:42:49.336 --> 00:42:50.537 
让我们来看一些例子

00:42:50.704 --> 00:42:54.942 
我们将Apple Pay API
向一些网站开放了

00:42:55.008 --> 00:42:57.177 
并且要求它们遵守一些设计

00:42:57.711 --> 00:42:59.513 
和使用Apple Pay的经验

00:43:00.547 --> 00:43:02.182 
其中一个是StubHub

00:43:03.450 --> 00:43:06.787 
现在StubHub决定
将Apple Pay按钮

00:43:06.887 --> 00:43:08.121 
放置在订单流程当中

00:43:08.255 --> 00:43:10.023 
你选择你需要的门票

00:43:10.123 --> 00:43:11.859 
然后使用Apple Pay

00:43:12.893 --> 00:43:14.862 
你也可以将Apple Pay提前

00:43:14.928 --> 00:43:17.397 
你可在快速支付的时候
就使用Apple Pay

00:43:17.464 --> 00:43:19.333 
Warby Parker就这么做

00:43:20.100 --> 00:43:22.069 
在你选择了一个产品之后

00:43:22.603 --> 00:43:23.670 
你会看到两个选项

00:43:23.737 --> 00:43:26.607 
W可以将它加入购物车
然后继续选购

00:43:27.007 --> 00:43:29.676 
或者直接通过
Apple Pay来购买

00:43:31.879 --> 00:43:33.413 
最后你可将Apple Pay按钮

00:43:33.480 --> 00:43:34.982 
直接放到产品的页面

00:43:35.482 --> 00:43:37.451 
Lululemon是这么做的

00:43:37.718 --> 00:43:40.587 
这里在产品页面就有一个按钮

00:43:40.721 --> 00:43:42.689 
让我们在iPad上看一下

00:43:43.590 --> 00:43:45.359 
你同样能看到
添加商品到购物车

00:43:45.425 --> 00:43:48.829 
如果我想像平常那样创建一个购物车
我可以做到

00:43:48.896 --> 00:43:51.064 
或者我可以直接购买它们

00:43:53.567 --> 00:43:56.870 
有一点在产品页面得到了增强

00:43:57.004 --> 00:43:59.206 
那就是允许未注册直接支付

00:43:59.773 --> 00:44:03.076 
要求注册是一个非常主要的用户门槛

00:44:03.143 --> 00:44:04.711 
我不知道你们如何看待

00:44:04.811 --> 00:44:07.614 
但是我不会去一个
我不知道的网站购买东西

00:44:07.681 --> 00:44:09.917 
前提是它要求我进行注册

00:44:11.285 --> 00:44:14.021 
所以Apple Pay能帮助
减少抑制消费的情况

00:44:14.087 --> 00:44:17.024 
通过让未注册用户的
支付流程变得非常简单

00:44:18.158 --> 00:44:21.161 
同时 你可以选择利用

00:44:21.228 --> 00:44:25.232 
Apple Pay表单中的信息
在用户购买后为他创建一个账户

00:44:25.866 --> 00:44:28.669 
我会来为大家在支付后的部分
来展示这一点

00:44:30.871 --> 00:44:33.707 
让我们来关注一下实际支付过程
Apple Pay表单

00:44:35.409 --> 00:44:38.712 
Apple Pay表单
为商户提供了灵活的支付流程

00:44:38.812 --> 00:44:40.414 
这是高度定制化的

00:44:40.681 --> 00:44:44.785 
但是它同样为用户提供了
一种持续性的使用经验

00:44:45.319 --> 00:44:48.222 
你可以决定显示出哪些信息

00:44:48.288 --> 00:44:50.991 
但是用户总是有着自己的期望

00:44:53.093 --> 00:44:54.761 
这里是Apple Pay表单的例子

00:44:54.895 --> 00:44:56.830 
我使用的是Mac OS sheet

00:44:57.197 --> 00:45:00.334 
但是在iOS上 条目也是一样的

00:45:00.467 --> 00:45:04.204 
若你在SafariiPhone
iPad的网页上进行支付

00:45:05.272 --> 00:45:08.342 
第一个条目是选择银行卡

00:45:08.509 --> 00:45:11.111 
账单地址也经常第一个被选

00:45:11.211 --> 00:45:12.946 
尽管账单地址不是必需的

00:45:13.046 --> 00:45:14.615 
在处理支付流程的过程中

00:45:16.383 --> 00:45:17.918 
第二个条目是收货地址

00:45:19.219 --> 00:45:21.688 
这个是你必须从用户那里获得的信息

00:45:23.223 --> 00:45:27.661 
你可请求银行卡信息 收货地址
若有需要 你还可以请求联系地址

00:45:27.995 --> 00:45:31.598 
你可以指明收货地址的方式

00:45:32.299 --> 00:45:33.600 
你可以改变那些术语

00:45:33.700 --> 00:45:37.304 
若你不想用“shipping”
你可用“delivery”或“pickup”

00:45:37.905 --> 00:45:41.074 
这对于拼车应用或者
外卖服务来说非常好

00:45:44.444 --> 00:45:46.914 
现在你可以列出快递费用的列表了

00:45:47.314 --> 00:45:50.851 
你可以用列表来描述它们
我们马上会讲到这一点

00:45:52.619 --> 00:45:54.288 
但是当你收集了这些信息之后

00:45:54.421 --> 00:45:56.657 
请确保你有一个清晰的保密协议

00:45:56.823 --> 00:45:59.459 
如果你在应用中使用了
Apple Pay

00:45:59.526 --> 00:46:00.827 
当你将应用上传App Store时
会被要求提供保密协议

00:46:00.928 --> 00:46:04.131 
现在你是在为网页做设计

00:46:04.231 --> 00:46:06.099 
很明显没那样的方式来提供保密协议

00:46:06.200 --> 00:46:09.236 
所以我们要求你提供一个保密协议

00:46:09.303 --> 00:46:11.939 
放在你的网站上

00:46:12.005 --> 00:46:13.340 
且表明你如何使用这些信息

00:46:15.776 --> 00:46:17.644 
现在既然你们能使用寄送方式了

00:46:18.612 --> 00:46:20.380 
就是选择邮寄之类的

00:46:21.481 --> 00:46:24.718 
就像选择地址那样
这也是可以定制的

00:46:25.652 --> 00:46:27.487 
用户可以从一个列表中选择

00:46:27.921 --> 00:46:30.724 
如果地址更新的话
这些方式也应该会更新

00:46:30.891 --> 00:46:33.794 
比如在你已经选择了
送到纽约的快递方式的时候

00:46:33.894 --> 00:46:35.262 
你可以很容易的想到这一点

00:46:36.496 --> 00:46:39.666 
这些方式也可以是免费的
如果你愿意的话

00:46:40.200 --> 00:46:41.468 
就像收货地址那样

00:46:41.602 --> 00:46:44.037 
收货人的姓名也可以按你的要求改变

00:46:47.541 --> 00:46:50.344 
尽管你会要求住址
邮件地址 手机号码

00:46:50.477 --> 00:46:52.312 
在同一个属性中

00:46:52.813 --> 00:46:54.615 
但是在表单中 它们是分开的

00:46:55.249 --> 00:46:56.783 
这里是联系信息的条目

00:46:56.850 --> 00:46:59.520 
是用来填写信息
而不是填写邮政编码之类的

00:46:59.820 --> 00:47:01.788 
我们现在支持收集手机号

00:47:02.089 --> 00:47:03.957 
我们也支持收集邮件地址

00:47:04.091 --> 00:47:06.126 
如果你没有要求一个送货地址

00:47:06.193 --> 00:47:08.529 
我们会允许你获得用户的名字

00:47:08.695 --> 00:47:12.266 
这对于拼车的应用或者网站会非常有用

00:47:12.366 --> 00:47:14.101 
及那些想获得姓名的应用或者网站

00:47:14.168 --> 00:47:15.836 
但是却不需要用户的送货地址

00:47:18.639 --> 00:47:21.975 
现在到了最重要的一个填写区域
它就是摘要信息

00:47:22.709 --> 00:47:25.412 
用户获得的金额会高亮

00:47:25.512 --> 00:47:27.147 
抱歉 是用户支付的金额

00:47:28.182 --> 00:47:30.017 
并且你可以使用这个摘要

00:47:30.250 --> 00:47:33.020 
来简洁的表明支付的用途

00:47:33.320 --> 00:47:36.290 
比如小记 快递费 折扣

00:47:36.790 --> 00:47:39.960 
这里并不是一个条目列表

00:47:40.060 --> 00:47:41.862 
它并不是一个销售账单

00:47:42.963 --> 00:47:44.665 
所以你需要让它很简洁

00:47:45.766 --> 00:47:48.502 
当然也需要清晰明白的表明你的收费

00:47:49.236 --> 00:47:52.072 
确保显示的总金额

00:47:52.139 --> 00:47:54.074 
与用户即将要扣除的金额保持一致

00:47:55.175 --> 00:47:57.344 
那就是说 这些情况下

00:47:57.411 --> 00:47:59.980 
你并不需要知道付出多少钱

00:48:00.581 --> 00:48:02.349 
有时候你不知道最终会支付多少钱

00:48:02.716 --> 00:48:04.952 
比如酒店预订会出现这种情况
它们是开放性的

00:48:05.185 --> 00:48:07.688 
租车或者的士服务也是如此

00:48:08.589 --> 00:48:10.824 
这时候你可以
使用pending的条目类型

00:48:10.891 --> 00:48:12.826 
在摘要信息中表明这一点

00:48:14.661 --> 00:48:16.763 
所以需要注意  保持透明的计费

00:48:17.297 --> 00:48:19.366 
为何我一直提到“作清晰预估”

00:48:19.733 --> 00:48:22.603 
你可以在刚才的演示中看到

00:48:22.669 --> 00:48:25.739 
在通过Apple Pay付款后
通常你会看到一个通知

00:48:25.873 --> 00:48:28.308 
这个通知来自银行并且告知金额的变化

00:48:28.408 --> 00:48:29.843 
所以你想确保那个金额

00:48:29.910 --> 00:48:32.913 
与表单上显示的相匹配

00:48:32.980 --> 00:48:34.348 
至少尽力让两者保持一致

00:48:34.414 --> 00:48:35.415 
你不需知道总费用时

00:48:37.251 --> 00:48:40.254 
摘要条目也支持免费或者折扣

00:48:40.921 --> 00:48:42.489 
条目上可以标记为免费

00:48:42.956 --> 00:48:46.126 
摘要条目可以是负数
但是总金额不能为负数

00:48:46.226 --> 00:48:48.662 
总金额必须是一个正数

00:48:48.729 --> 00:48:50.030 
但是在那之前

00:48:50.163 --> 00:48:52.799 
如果你想指出哪个地方有折扣
都是可以的

00:48:55.135 --> 00:48:58.672 
这里是另外一个Mac OS表单

00:49:00.340 --> 00:49:03.043 
这里是一个条目
告诉你在什么设备上确认

00:49:04.278 --> 00:49:08.849 
这让我想起了Anders讨论
网站图标的观点

00:49:09.216 --> 00:49:13.020 
这是一个在iPhone的表单
而此时你在你的Mac上进行着支付

00:49:13.353 --> 00:49:15.222 
在这里你不能定制任何东西

00:49:15.322 --> 00:49:17.424 
我们会告知你银行卡
但是你无法改变

00:49:17.491 --> 00:49:18.825 
你需要在Mac上改变它

00:49:19.193 --> 00:49:20.594 
顺便的说一下

00:49:20.661 --> 00:49:22.763 
若在Mac上改变任何选项
价格都会更新

00:49:22.896 --> 00:49:25.699 
如果你改变了邮寄方式而使得费用增加

00:49:25.799 --> 00:49:27.201 
我们会直接进行同步

00:49:28.569 --> 00:49:31.972 
但是网站的图标是从你的网站上下载的

00:49:32.105 --> 00:49:34.408 
你可以通过很多种方式来指定

00:49:35.709 --> 00:49:39.980 
它使用了Apple Touch
的图标

00:49:40.047 --> 00:49:44.518 
为了使用Apple Pay
你需提供180和120像素大小

00:49:45.018 --> 00:49:49.089 
最简单的方式是提供一个链接

00:49:49.756 --> 00:49:54.094 
但是你也可以设定是域名的根目录

00:49:55.395 --> 00:49:57.164 
选择适合你的方式吧

00:49:58.398 --> 00:50:00.467 
我还想谈谈一些别的事情

00:50:00.567 --> 00:50:02.002 
那就是关于标记语言

00:50:02.302 --> 00:50:05.072 
你们当中很多人应该使用过标记语言

00:50:05.138 --> 00:50:07.975 
用来在你们页面上指明产品类型

00:50:08.075 --> 00:50:10.110 
那样可以被搜索排名所统计

00:50:10.310 --> 00:50:13.013 
我们同样的有一个产品类型排名

00:50:13.113 --> 00:50:14.882 
在iOS的Spotlight中

00:50:15.549 --> 00:50:17.518 
你也可指明你的站点
使用了Apple Pay

00:50:17.584 --> 00:50:19.386 
只要你使用了合适的标记语言

00:50:19.453 --> 00:50:22.923 
我们觉得那样会更有利
比如说对于搜索引擎

00:50:22.990 --> 00:50:25.225 
及想知哪些地方
正用Apple Pay的人

00:50:25.292 --> 00:50:26.927 
若你想这样做
也会对你更加有利

00:50:28.996 --> 00:50:32.699 
现在让我们来看最后一个部分
确认支付

00:50:34.535 --> 00:50:37.237 
在你的确认信息中
你想反映出合适的状态

00:50:37.304 --> 00:50:38.405 
放置到Apple Pay表单中

00:50:39.706 --> 00:50:43.110 
比如说 失败的时候
就不要显示一个成功的页面了

00:50:43.177 --> 00:50:44.178 
那样是非常愚蠢的

00:50:44.545 --> 00:50:47.881 
同时你可以利用
Apple Pay收集的信息

00:50:47.948 --> 00:50:50.384 
来为用户提供一个新的账户
我前面有提到过

00:50:50.450 --> 00:50:53.387 
我想展示Lululemon的例子

00:50:54.154 --> 00:50:55.189 
这里就是例子了

00:50:55.255 --> 00:50:57.324 
当你已经做了一次支付后

00:50:57.624 --> 00:50:59.092 
你获得了一个确认信息的页面

00:50:59.259 --> 00:51:03.931 
然后你创建了一个账户

00:51:03.997 --> 00:51:05.699 
预置了从Apple Pay中
获得的邮件信息

00:51:05.766 --> 00:51:08.235 
所以同样的我也可以自己创建一个账户

00:51:08.302 --> 00:51:10.404 
我也可以将账户关联起来

00:51:10.470 --> 00:51:11.672 
这样做是非常容易的

00:51:13.874 --> 00:51:16.476 
好了 我们今天讲了很多内容

00:51:17.544 --> 00:51:18.412 
我们主要覆盖了哪些呢

00:51:19.346 --> 00:51:21.315 
我们讲述了网页上
Apply Pay的商户验证

00:51:21.381 --> 00:51:25.052 
我们学习了Apple Pay
在网页和应用的不同之处

00:51:25.786 --> 00:51:30.157 
Anders为我们讲述了Apple Pay session
以及JavaScript API

00:51:31.592 --> 00:51:35.362 
然后我们还谈到了设计者
如何利用Apple Pay优势

00:51:36.296 --> 00:51:39.466 
我们现对网页上使用Apple
Pay已经有了很多了解

00:51:39.867 --> 00:51:43.070 
你可以在这里获得
我们的开发页面以及网站

00:51:43.670 --> 00:51:45.439 
以及相关的会议

00:51:46.039 --> 00:51:47.774 
首先 不用去其它地方

00:51:47.908 --> 00:51:49.476 
留在这里
不要离开

00:51:49.543 --> 00:51:53.380 
我在三点钟会回来讲述Wallet
与Apple Pay中新的内容

00:51:53.447 --> 00:51:57.851 
我们会讲述Sandbox
WatchKit以及扩展

00:51:57.918 --> 00:51:59.620 
以及其它一些新的事物

00:51:59.686 --> 00:52:03.123 
这些在Wallet and Apple Pay中
发生并且与银行以及零售商有关

00:52:03.257 --> 00:52:06.260 
这里还有一个会议
是针对网页开发者的：

00:52:06.326 --> 00:52:08.595 
在你的应用中优化网页内容

00:52:08.729 --> 00:52:10.230 
该会议将在周五4:00开始

00:52:10.831 --> 00:52:12.199 
我们已经讲完了

00:52:12.266 --> 00:52:14.668 
欢迎各位前来

00:52:14.935 --> 00:52:17.137 
我已迫不及待想看到大家
支持网页上使用Apple Pay了

00:52:17.204 --> 00:52:19.273 
谢谢
希望大家在 WWDC 度过好时光