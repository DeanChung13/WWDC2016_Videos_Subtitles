使用TVMLKit开发应用
下午好 欢迎大家
我是Nurinder Manj目前是一名TVMLKit团队
软件开发经理
在此我和Parry Panesar一起谈论如何使用TVMLKit构建大型应用
你们中的大多数都开发过一个或者多个原生应用
在此过程中你们要痛苦的调试性能
并且不断优化用户界面
通常这些过程牺牲了新特性开发或者会导致延迟交付
你们中有人可能开发过web应用
web应用通常有很强可塑性
而且要不断的更新但是用户体验却不是很好
TVMLKit作为一个新的框架已经引入到tvOS中
作为桥梁连接web和原生应用
当你使用TVMLKit构建应用时应用将看起来
感觉起来和使用起来就和Apple应用一模一样
我们开始吧
今天 首先我准备讲一下这个框架可以为大家提供哪些东西
然后 我们为大家准备了一些应用
这些应用将为大家展示一个TVMLKit应用的全部特性
但是在此之前 我要先大致介绍下这个框架的信息
在这段视频的后半段我会讲一下
新的令人兴奋的新特性该特性将在tvOS 10中引入进来
我带大家看一下一些用户交互界面
这app store应用且是专门 为Apple TV定制
一款常规的iTunes 电影应用
借鉴了Search应用的特性
另一款应用是Apple Music
所有这些移植到Apple TV的应用都是基于TVMLKit开发的
并且如果你回过头来思考这些应用都有什么特点的时候
会发现他们都有同一个目的
他们可以让人们浏览 交互
并且都包含内容分类信息
这些内容都将以一种简单而独特的方式被呈现出来
那这个框架究竟带来了什么？
这个框架为开发者提供基于模板的原生交互界面
而且性能方面都已经过了优化和改善
为开发者节省了大量的时间和精力
这些复杂而丰富的交互界面正如大家刚才所见
是通过是用一个标记性的API来定义实现的
并且使用JavaScript驱动这些应用
这些模板的可定制性很强
你可以改变它的外观、它的行为和样式
而且 这个框架没有局限于我们提供的既有模板
你可根据现有的Apple模板进行改造
只要添加自己的视图和这些视图的控制器就可以了
甚至 你可以从头创建自己的模板
你也可以扩展JavaScript的功能性
当然是根据你的应用场景来定制
我可以向你保证这不是一个web浏览器
它是一个优化了的为tvOS定制的原生交互体验
我们开始构建应用吧
这些是主要的控件待会儿我会详细介绍
我们需要构建我们自己的应用
首先在Xcode里创建并配置客户端项目
接下来我会讲关于标记
和样式来配置项目
最后 我会讲下JavaScript API
是如何驱动这个应用的
现在在我们研究细节之前
我来给大家展示下从架构的角度来分析这个项目
典型的TVMLKit应用是基于client server架构模型
客户端应用是基于UIKit的应用
它可以运行在tvOS设备上
而server端保存有媒体文件和JavaScript文件
这框架提供了applicationcontroller API
它可以下载关键的JavaScript文件
还会搭建一个JavaScript环境
且负责控制JavaScript行为
一旦行为可控
JavaScript就负责下载任何需要的文件
来展示用户看的模板
并且JavaScript还负责处理用户所有的事件
并且正确的响应事件
第一步打开Xcode
Xcode提供了TVML类型的应用模板
这是你开发的应用的起点
这是部分代码由模板生成
这里的第一步骤是修改JavaScript URL
指向主要的JavaScript文件
下一步是创建applicationcontroller上下文
关联javaScript URL
你也可以指定启动选项
这些选项会在启动时传递给JavaScript
最后一个步骤是创建一个application controller实例
基于之前的上下文和窗口
下载你的关键JavaScript文件并执行该文件
然后控制权交给JavaScript
你也可以指定一个代表...
来监控你的controller状态
比如启动项目的时候提示是成功还是失败了
接下来我们讨论下模板
TVML是一个Markup规范
用于定义符合Apple-TV规范的模板
当Markup展示在导航栏的时候
从JavaScript编译成UI
一旦展示完成你可以继续更改XML
这些更改也会动态渲染到用户界面
外面的模板看上去还是正常的
你不必做额外的样式化工作
只需要填充内容就行然后就可以继续往下操作
但是你可以更改外观
和行为 通过使用样式化工具来适配 [inaudible]
关于标记Markup
文档是一个实体用来包装模板
这是XML结构树展示了文档结构
它有两个子元素
第一个是head元素具有自己的样式
封装了所有你定义的样式
第二个元素是templateName
以及它的内容
每个模板的名字唯一并且具有功能性
我们来看一下其中的一个模板
这是iTunes Movies应用的Top Movies页面
这个模板允许你滚动所有的内容栈
在Markup面板称之为stackTemplate
在这个例子里
它的模板使用XML展示
在模板的根节点是一个collectionList元素
封装了各种集合类型 比如carousel
shelves grids以及其他支持的类型
现在这里的top的控制器是carousel control
这支持水平的内容浏览
基于中间内容的浏览
这种控制器类型在空白状态下会自动滚动内容
而创建这个控制器Markup很简单
你只要定义一个section并且列出list可预见lockup情况
不需要进行额外的配置
在这个carousel下面是一个shelf
它也可控制水平滚动内容
而展示这个的Markup和carousel很相似
但是shelf允许你指定一个标头
且可以包含一个或多个section
每个section也可以自带一个标头
而且必须包含一个或多个lockup
那么lockup又是什么呢？
lockup是一个UI控制器
封装了图片和文字元素
这是一个[inaudible]
回到我们的例子应用
若你留意只有当前聚焦的lockup
的文档元素是可见的
这不是默认的框架行为
这是一个例子告诉你如何定制样式
我来演示下具体怎么做
我在这定义了一个类
我把它的高亮属性设置为
为选取框的值并且在高亮的时候才显示
然后设置这个类
的文字元素和lockup不匹配
然后你就可以看到这个行为了
但是 这只是一个简单的定制化例子
我再给大家演示一些其他例子
这又是一个stackTemplate
我们现在有一个banner并且指定了它的背景图片
banner就在collectionList的相邻位置
这是背景颜色为模板而设定
这个模板无缝隙的协调了背景颜色
和banner的背景图片颜色我们可以看到是这个效果
banner标题的结构
以及按钮的结构都是可以定制和配置的
另一个熟悉的例子是一个movie bundle例子
这也是一个stackTemplate
这个模板的背景图片是
有框架生成的你只要指定一个图片
设置为英雄形象图片元素
再一次的标题 shelf
以及按钮的布局也定制化了
而且还有丰富的模板可供大家选择
使用样式工具
可以创建独特的用户体验
符合大家品牌的特色
TVML Catalogue是一个资源库可以浏览模板和与模板交互
请检查一下
就像我之前所说
TVMLKit搭建了原生和web应用的关联
你会发现可以很简单的创建
丰富和复杂的用户界面只要使用简单的Markup就可以了
我给大家演示下JavaScript驱动应用的原理
它所提供的JavaScript引擎
由框架的JavaScriptCore驱动
而内置的Web Inspector
也提供给了打击调试和优化
并且从tvOS 10开始
JavaScriptCore对ES6有很好的兼容了
TVMLKit添加了基于平台的API
辅助驱动应用
现在标准的web API像XMLHttpRequest
是传输客户端和服务器端的数据
DOM是分析转换和操作[inaudible]
监听用户时间 本地存储
会话存储都是由框架提供的
另外TVMLKit也是提供了平台相关的API
比如管理导航栈
获取系统信息
播放[inaudible]图片轮播还有其他功能
除此之外
框架也为大家提供了简单的API
处理媒体文件的播放功能
现在有个重要的事情我要指出来
有一个单独的JavaScript上下文
针对每个controller都有一个
你可以你管理所有的document
这个单独的上下文中
我来讲解下一些关键类
第一个是应用对象
应用对象提供了回调方法而且是必须注册的方法
最重要的调用是onLaunch方法
指示你所有JavaScript应用的起点
另一个 API 我要提到的是关于处理错误的方法
叫做onError
你必须提供良好的回调函数
处理那些异常和失败的情况
一旦控制交给JavaScript
你第一个要做的事情是展示一个文档
为了实现这个
NavigationDocument类就需要大家好好处理了
这个类等同于和UINavigationController在TVMLKit这个框架里
里面有一个全局的预置的实例
你现在可以创建更多的实例了
现在你只要负责添加document
把他们弹出
是由Menu手势操作负责也是属于框架处理的情形
还有三个主要的API你们会经常用到
头两个是pushDocument和replaceDocument
他们是一起出现的
我来演示下推荐的操作方法
只是一个代码段创建一个模板
通常当你处理处理用户请求或者启动应用的时候
你会展现一个Spinner
以便于用户知道当前是什么情况
一旦你创建了这个loading文档
你应该使用pushDocument把它放到栈顶
当你等待获取到远程数据的时候
并且已经准备好
之后你会替换掉当前的loading文档
成期望的新内容
为做到这个 要用replaceDocument方法
这是一个常见的模式
我们鼓励你用正确的方式展示Spinner
当你准备从远端获取数据的时候
最后一个API是presentModal
是用来展示警告和错误信息的
或者以不覆盖的形式展示其他的模板
现在影响TV观看体验的关键是视频播放器功能
我们对此进行了简化
让我来演示给大家
只需要10行不到的代码
你就可以配置完成具有全部特性的视频播放器模块
我带大家看下这段代码
首先 创建一个MediaItem它的类型是video
并且设置视频流的URL
你也可以指定标题艺术家URL描述
使得其信息完整些
我们可在信息面板里看到视频播放器模块体验信息
接下来 创界一个播放列表添加一个或多个视频
最后一步是创建一个player实例
用于操作播放列表和展示播放器
完成之后 我们就实现了一个完整的视频播放器提供丰富的用户体验
另外
所有特性像 处理空隙 内容保护
章节分组 时间[inaudible]
以及其他很多API都已经提供了
在该JavaScript环境里
和之前视频播放器模块一样
我们扩展了音频播放功能
并且使用起来一样很方便
唯一变化的是需要绑定的是音频
以及音频文件的URL
这个可以提供
漂亮而功能完整的AudioNow Playing体验
就和Apple Music一样
如果你正在构建一个音乐应用程序
你还需要做一件事情
就是配置你的应用
这样你的音频文件就可以支持倒带
现在是处于休眠状态
这样很类似就和在iOS上操作一样
设置一个支持倒带的category在AV会话面板上
并且添加背景模式到info.plist
剩下的事情就由框架去完成
这样之后 我想邀请Jeff上台
来演示构建TVMLKit应用
谢谢大家
谢谢你Nurinder
大家好
我是Jeff
我在这为大家演示TVML应用
我要先强调下我们目前已经讨论的内容
你就会发现构建一个原生应用是多么简单
只要使用TVMLKit构建支持Apple TV的应用
为了这次演示 我们会演示WWDC 的一个简单版本
关于用户界面
我们有多个shelf内
每个shelf会包含会话视频
跟踪会议
所以想象下你可为每一个开发者工具提供一个shelf
还可以提供给应用框架 设计等等
我们开始吧
这是一个Xcode项目我们之前就已经准备好了
我们先从AppDelegate开始这也是我们应用的入口
在应用里didFinishLaunchingWithOptions
正如你看到的这几行代码
我们已经启动了运行这个TVML应用
我们有在这指定了JavaScriptApplicationURL
指向一个server已经运行在这个Mac上
所以如果你看下这里的目录
这就是我配置提供文件服务的服务器位置
你也看到 这里有个文件名为application.js
这个JavaScript文件驱动TVML应用
这里有一个JSON文件包含了所有数据
这次演示需要的数据
我们来看看这个application.js文件
在这个文件的顶部我们声明了一些变量
来保存我们的数据
在App.onLaunch这个方法里我们调用一个方法
当TVML启动的时候
所以我们在这主要做的事情是获取我们的JSON文件
然后创建一个用户界面并使用我们之前提到的数据
在我们继续往下之前
我们应该展示一个loading提示在屏幕上
在通过网络平台获取想要的信息时这种方法通常会被推荐
可以为用户带来更好的用户体验
所以我在这添加了一些代码
在TVMLKit做这些操作时是为了展示一个loading模板文档
这些都是在这个方法里完成的叫做createLoadingDocument
我们调到这个方法
你会看到我们基本上给loading模板创建了Markup
然后创建一个DOM文档对象使用的是DOMParser
现在回到launch方法
在创建loading文档后
我们现在使用navigationDocument对象
把文档推送到屏幕上
这就好像在UIKit里使用UINavigationController一样
现在我们有了loadingSpinner显示在屏幕上
我们现在回调用一个方法我创建的叫做...
request JSON
它会使用内置的XMLHttpRequest对象
为了获取JSON文件 然后在回调函数里响应
接下来
我们要转换JSON文本就是我们刚刚获得的
到我们的JavaScript数据结构里
现在我们的UI调用一个shelves栈
我们会创建一个stackTemplate文档
现在让我在这里贴一段代码
然后跳到我们的createStackDocument方法
现在你可以看到
和我们创建Markup类似为了早些创建loading模板
我们在创建Markup为这里的stackTemplate
在这个stackTemplate的Markup里
我们已在此添加了顶部banner图片
在collectionList里
我们实际上在浏览会议里的每一个触控项目
并且创建一个shelf元素每一个都创建一个
这些都通过使用createShelfElement方法
我们现在看到了
现在我进入这个方法里面
我们再一次为单独一个shelf创建Markup
在这个方法体里面 为每个会话视频创建一个lockup元素
我们跳到createLockupElement方法
你会发现我们正在创建的Markup
给这个单独的lockup元素描述了会话的信息
在这个处理情形里 我们捕获sessionId作为定制的属性
我们也在添加图片 设置宽体 高度 和 标题
我们回顾下 我们创建了一个stackTemplate文档
包含了多个shelf元素在美国shelf元素里
我们有多个lockup元素
我们再回到刚才那个launch方法
在我们创建stackDocument后
我们会使用navigationDocument对象
来替换loading文档目前这个文档是可见的
使用我们的stackDocument
这样之后我们已经准备好运行
我们再切换到Apple TV
然后继续
我们现在拥有一个漂亮的UI供shelve栈使用
美国shelf包含图片lockup或会话视频
如你所见 只要少量代码
我们就可以创建一个应用一个非常棒的应用
在家里的Apple TV上看棒极了
下一件需要做的事情
是在我们点击lockup时能够播放视频
现在什么都没做
所以我们回到Xcode然后添加这个功能
回到我们的launch方法
我会添加这两行代码
这会注册选择和播放事件
选择事件在你按住触控板的时候触发
Siri Remote触控板播放事件触发的是
在你按住Play按钮的时候
在这两种情形下
我的playSelectedLockup方法会被调用
我们进入这个方法
然后实现它
所以我们第一个要做的是...
获取lockup元素在这个时间里获取
我们可以获取会话信息通过定制属性里的sessionId
下一步 我们会创建一个新的mediaItem对象
给嵌入的视频创建并且初始化它使用视频的URL
就像这里一样
我们也会提取其他的关于会话的信息
比如标题 描述轨道和艺术品
接着我们会创建一个播放列表对象
并且把mediaItem对象推送进去
最后 我们会创建一个新的player对象
设置播放列表
只要简单的调用play方法就可以全屏播放了
回顾下 我们现在创建了一个player对象
这个对象有一个播放列表包含有一个视频对象
有了这些 我们来试试这个
回到UI
我们会使用 Siri Remote并且点击这个锁
然后播放器就开始播放了而且是在全屏模式下
谢谢
你可以点击Menu按钮然后退出视频
所以这就是TVMLKit产生的播放器
谢谢大家的宝贵时间接下来交给你了Nurinder
谢谢Jeff精彩的演示
只要少量的代码
你就能创建一个功能完整的应用并且有良好性能和外观
这个空白在lockup行
阴影处理 文字处理
看起来合适
在我们继续之前概括一下你们刚才所看到的
用Xcode里面的TVML应用模版
创建并配置你的客户端项目
你们学习了如何以JSON创建一个简单的加载文件
和一个复杂堆文件
且你们也学习了如何使用NavigationDocument
来推送或者替换堆栈里的文件
JavaScript用来处理用户事件
在这个例子中我们处理选择和播放事件
并且根据对应的lockup来配置视频播放
当我们介绍完了TVMLKit
你已经可以创建强大的应用
你们中很多人已经这么做了
谢谢
你们已提供了一些很好的反馈而且我们想做的更好
我们已经在这方面做了很多的努力
并且正在加入一些令人激动的新功能
它们是非常容易使用的
能使你的应用提高到更高的水准
为了更好地阐述这些现在我想邀请Parry上台
谢谢
下午好
我叫Parry我将带你们一起来体验一些新功能
这些功能是在tvOS 10的TVMLKit中引进的
TVMLKit提供了非常适宜的应用级别的功能
通过简单而灵活的界面
我们在tvOS 10中的新功能也是一样的
比如
只要增加一个属性
在搜索文件的搜索结果中
你就能让结果有淡入淡出的动画效果
在用户输入的时候
这给用户提供了着迷的体验
当他们试着去缩小结果范围
或者如果你有一个音乐应用
只要在菜单栏顶层增加一个菜单项
你就能在那里展示Now Playing的音频体验
这些都是由TVMLKit来管理的
所以它就会随着播放开始和停止而进来和出去
这给你们的用户提供了一种方便的办法
来返回到播放列表和继续听音乐
所有这些功能是非常强大的
但同时它们又是非常容易实现的
为了向你们展示这个
我想选择其中的三个
来聊聊它们
在最后实现你们在演示中所看到的功能
让我们开始吧
我想讲的第一个功能
亮色和暗色外观
在tvOS 10中有一个新的系统级别的暗色外观
所有的应用都要采用它
你的TVMLKit应用也要应用它
通过设置应用的info.plist文件
这是一件同样你需要做的事
在你用UIKit写应用的时候
所以你可以指定你的应用的外观
你可以选择亮色
暗色或者自动
这种情况下它会选择系统的设置
但是无论你选了哪种
你的标准TVMLKit应用会运行地非常好
而不需要更多的改动
我们所有的模版都配置了样式
对亮色和暗色两种外观
需要时TVMLKit会在两者之间切换
所以你能方便地得到这个效果
但是
如果你在你的文件中有明确的样式
那么你需要选择两种外观的样式
举个例子
这是一个含有标题的模版
它的颜色被设置成黑色
使用一个明确样式
这个可能在暗色主题下不起作用
为了能让它工作
你需要定义类
对于这样的外观
为了在tvOS 10中实现这个
我们新增了一个名为tv-template的多媒体功能
它有个功能称为tv-theme
你可以用它来创建一个多媒体查询
对应于一种外观
只要将你所有的样式合在一起
按照它们的多媒体查询分组
将它们放在文件中
TVMLKit将会为你挑选正确的样式
所以只需要一丁点的样式配置
和零行代码
你的应用就实现了暗色主题
现在让我继续谈另外一些能提高用户体验的东西
但是要通过一种不同的方
让我们聊聊内嵌式视频
公平地讲
视频是电视观看体验中很重要的一部分
如果你有丰富的视频资源
你就会想让你的用户感受到它
当他们一打开你的应用时
你的应用当中的内嵌式视频
发挥了重要的作用
为了给大家展示这会给你们的应用带来什么不同
我们创建了你们刚刚看到的那个预览演示
但是有内嵌式视频在里面
让我们来看一下
这是流畅的
不但浏览体验毫不突兀
而且迎合的非常好
这使人身临其境
正如你所料TVMLKit帮你做了大部分的工作
你只需要与这个上层接口打交道
让我们来看一下
在TVMLKit中
你要嵌入一个播放器
和一个播放区域在你的文件中
很可能 它会在一个lockup里面
TVMLKit会帮你处理播放
你所需要做的所有事情就是
指定你希望的开始时间
所以你可以说它应该开始 或者
当包含的lockup得到关注的时候
抑或是一旦它出现在屏幕上的时候
你可以控制让内嵌式视频变成全屏播放
如果你有高级用户案例
比如要用FairPlay进行加密
那么你可以用JavaScript控制嵌入播放器
通过它的API
你可以实现这个
现在你可用TVMLKit内嵌式视频只需要简单的三个步骤
第一 配置模版
第二 设置
第三 你想要处理触发切换全屏模式
让我们再深入地看一下这些
我们已经将模版配置的非常直观
我们在TVML中增加了一个新的元素称为mediaContent
你可以用它在lockup中包裹图片
如果你想嵌入视频的话
这会使lockup拥有一致的功能和外观
在视频播放开始之前
lockup里面的图片提供了边界
视频在其中播放
也可通过mediaContent的属性来指定播放模式
一旦lockup得到了焦点或者当它出现在屏幕上时
或者是当它出现在屏幕
举个例子
这是lockup
这是mediaContent
包含了lockup的图片
图片的宽度和高度
设置了视频播放的边界
第二步 配置播放器
现在mediaContent中的每一个元素
有着它自己的播放器
而且你可以用JavaScript控制播放器
只要查询播放器功能
从mediaContent的DOMElement
在播放列表中配置你想嵌入的多媒体项目
这是一小段对应的代码
请仔细注意
播放器的配置
和你们刚才在演示中看到的没什么太大的区别
你创建了一个播放列表
添加了多媒体条目并在播放器中设置它
但是有两点不同之处
第一
你不需要创建一个新的播放器
你只要使用内嵌播放器
第二
你需要提前就将它设置好而非等到用户选择lockup时才去处理它
你在提前做了
实际上 在推送文件之前你就做了
这让我想起了一个重点
为了更好的用户体验
在推送文件之前 你必须设置好播放器
一旦文件被加载
你可以在任意时间改变播放列表
最后一步
转换到全屏
值得注意的是
TVMLKit不会为你触发转换
这是期望你们实现的灵活性之一
所以你需增加一个事件监听器来选择和播放
为lockup
并且使用嵌入式播放器
来触发转换到全屏
举个简单的例子
这儿 我在选择事件中已经增加了一个事件监听器...
在文件中
我将从事件目标子树获取mediaContentElement
这将成为lockup
因为所有事件在lockup里被分配
最后调用现有的
嵌入式播放器来触发转换
现在当你想做这件事情时你已经能完全胜任
但是通过菜单动作可以自动转换回嵌入模式
就是那样
通过这三个简单的步骤
可以使你的应用的用户界面
更逼真
但下一步会发生什么？
当用户已经在全屏模式会发生什么呢？
他们在看你的内容
怎样能使这个过程更有趣呢？
这引出了今天我想谈论的第三个功能
让你能完全地实现它
交互式视频叠加层
在某种意义上 这和内嵌式视频很相似
它让你丰富你的内容
通过在顶层使用一个用户界面
你可以用它来做很多事情
比如
你可以推荐更多的选项给用户
使得他们能选择选项 并且继续观看
你能让他们浏览之前的广告和片尾
给他们带来完美的一口气看完的体验
或者你可以在内容的顶部实现应用内购买
当用户沉浸在这个体验中时
甚至当你实现
一些东西简单的像
互动元数据 比如投影
让你的内容变得更加引人入胜和具有互动性
与你已经看到的其它功能一样实现起来是非常简单的
你只需要使用任意一个模版来创建文件
将它设定在播放器中
TVMLKit会展示这个文件
当视频全屏播放时
这是对应的代码
在tvOS 10中我们给播放器添加了一个新的属性
称为modalOverlayDocument
所以当你设置了文件的这个属性
我们会在全屏视频的顶部展现它
如果播放器已经在全屏模式下播放了
你的文件立即就会被展示了
但是如果播放器没有在播放
或者说它是在嵌入模式下播放的
当视频被全屏的时候它们就会被展示
所以这对你来说是非常方便的只要在任意你想要的时间设置它
好了 让我们看一下演示
让我们来实现你们刚才在演示中看到的这些功能
为了做它
让我们欢迎Jeff上台
Jeff
谢谢 Parry大家好 又见面了
我来给大家展示一下新东西
所以回到Apple TV
这就是我们刚才给你们看的演示
现在让我们回到主页
进入到设置应用
进入外观设置
将外观设为暗色
回到主页
因为我们是用Xcode 8创建的这个演示应用
我们在info.plist文件中可以设置
来支持自动的用户界面工具栏
这意味着我们的演示应用
就会自动地支持工具栏的外观
让我们来看看这会长什么样子
看吧
我们的UI看起来是多么漂亮
而且 不需要一行代码就能实现
现在让我们聊聊嵌入视频
对于我们的演示我们想让视频
在lockup中自动地开始播放
正如Parry刚刚提过的那样
需要三个步骤来实现这个
第一步是使用mediaContentElement这个标志
第二步是配置内嵌式播放器
第三步是处理全屏播放
让我们回到Xcode
进入到createLockup函数
不同于创建标准的图片lockup
我现在要添加一个新的mediaContent元素标志
用它来包裹我们的图片
就是这样这就是第一步
非常简单
然后来到第二步
Parry刚才也提到了
每一个mediaContent元素会内置
一个内嵌式播放器
所以我们要做的就是配置这些内嵌式播放器
配置对应的播放列表在我们展示文件之前
回到启动功能
在我们展示这个文件之前
我需要调用一个我创建的函数 称为
configureMediaLockupElements
在这个函数内部
我们首先取出所有的mediaContent元素
从这个文件中
对于每一个mediaContentElement
和前面的演示类似
我们要创建一个新的mediaItem对象
一个新的播放列表对象包含我们的mediaItem对象
但是我们在这里不创建一个新的播放器
我们使用getFeature函数
来获取内嵌式播放器
然后在播放列表中设置好它
这就是第二步了
最后一步是处理全屏播放
我们来看一下playSelectedLockup这个函数
你应该记得它是从选择和播放事件中触发的
这些代码我们都不需要把它们替换掉
首先从事件中提取lockup元素
再从lockup元素中提取mediaContent元素
使用getFeature函数来访问内嵌式播放器
我们只要调用播放让它变成全屏
看一下它的样子
正如你看到的一样 视频现在会开始
在lockup里面自动地播放
当我点击lockup 你会切换
视频到全屏模式
欢迎来到2015年Apple设计大奖
欢迎今晚大家的到来
非常酷的东西
你也可以按菜单键来退出全屏模式
这就是内嵌式视频
我们想展示的下一个新功能是互动的视频叠加
这个新功能能让你把一个UI
置于视频上 当视频在播放时
在我们的演示中我们会展示一个列表包含
相关的视频在播放视频的顶部
回到Xcode
在playSelectedLockup函数中
调用我刚才创建的一个函数
来创建一个叠加 函数名为createInteractiveVideoOverlay
在这个函数内部
我们创建了另一个stackTemplate
只有一个shelf
在shelt里面有多个lockup元素
我们改变一下stackTemplate的样式
我们添加一个模糊的背景
顶部增加一些空白
这样shelf会在播放器的底部
回到playSelectedLockup函数
创建了叠加文件之后
我们将它设置在播放器的新模态叠加文件属性
这样播放器就能对它进行展示
实际上 播放器会展示任意一个使用了这个属性的TVMLKit文件
现在我们也能展示这个叠加了
当视频处于全屏模式时
比如 我们可能会想展示
这个叠加 在视频结束前30秒的时候
但是为了这个演示 我们展示这个叠加
一旦视频进入全屏模式所以我们在这里调用它
让我们运行一下
同样 视频会在lockup里自动开始播放
当我把视频切换到全屏模式你能在屏幕上看到叠加层
掌声
而且这个叠加层还是能互动的所以你可以随便移动它
在这个lockup里面
这就是交互式的视频叠加层
希望这个演示对大家有所帮助
谢谢大家
还给你 Parry
谢谢Jeff 多么精彩的一个演示
让我们快速回顾一下我们在演示中看到的内容
你们看到了亮色和暗色的外观
能直接应用于TVMLKit应用
你们看到了利用三个简单的步骤就能非常方便地嵌入视频
最后 你们看到了一个长时间观看体验的例子
通过交互式视频叠加层实现
到这里
我想要总结一下我们今天学到的内容
有一件事情
我请大家离开一下这个演示文稿
就是这个
TVMLKit是一种非常简单的创建TV上应用的方法
它给了你们本地化的体验
看上去和用起来都像Apple应用
类似于Markup和JavaScript这样的网页技术
能让你们快速开发应用
减少投放到市场的时间
利用这些新功能
和你们看到的TVMLKit
的例子
来编辑用户界面
你可以把你的时间 金钱
和聪明的精力
放在功能和内容上
让你的应用独一无二和功能强大
我强烈建议大家去看一下开发者网站
浏览一下文档和下载一些例子的代码
那里有大量的信息
我也推荐一些相关的会议
包括tvOS的新特性
特别是明天将要开的
是TVMLKit第二部分
我们会介绍如何混合你们自己的视图
视图控制器和TVMLKit中的JavaScript API
最后
我想要感谢大家
前来
希望大家在接下来的WWDC16 上有着很好的体验
谢谢大家