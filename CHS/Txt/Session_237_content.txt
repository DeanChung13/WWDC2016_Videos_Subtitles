CareKit开发入门
谢谢 大家下午好
欢迎来到“CareKit开发入门”演讲
我叫UmerCareKit团队工程师
今天的日程包括讲述CareKit的故事
以及它的由来
介绍其中一个应用
分析它如何使用CareKit来提升就医体验
了解CareKit架构并以此创建一个应用
演示一个定制的CareKit应用
最后 Apple和开发者社区
如何同心协力使它更上一个新的台阶
在介绍CareKit之前先看看它的由来
大家可能熟悉ResearchKit
它是我们去年发布的框架
帮助医疗机构和研究人员
在iPhone上进行大规模的研究
如果有兴趣 可以参看今早的演讲
ResearchKit新特性
由Bunny Laden和Yuen Xiou主持
以及去年ResearchKit演讲
由John Roll主持“使用ResearchKit创建应用”
在ResearchKit发布后的过去一年里
我们收到了很多请求希望对患者进行研究
或者查看他们提供的医学数据
我们开始头脑风暴以病人为中心的模块
随后我们发现这些模块的应用范围
远高于医学研究
所以在ResearchKit基础上进化出了新框架 CareKit
CareKit是一个开源框架协助医疗机构开发应用
来帮助病人恢复治疗
CareKit有益于各种慢性和急性病治疗
一个很好的慢性病的例子是精神疾病
它的用药追踪极其有效
对于抑郁和焦虑的评估
也能做到及时反馈
还能监督日常活动
它能做到互助小组和入院治疗以外的几乎一切事情
另外一个例子是手术治疗
其中最重要的是术后恢复
我们仔细思考这个用例
回想一下现有的就医体验
如今 如果你离开医院或者医生
可能会收到这样一张纸
列举了你的术后恢复活动
它包含了许多详细的指导说明
随着时间推移而改变
这方面的监管十分糟糕
患者经常会陷入困惑
由于这些计划并非动态
因此它们不能根据情况主动调整
最终可能导致患者再次入院
CareKit的推出就是为了解决这个问题
拿起这一张纸
把它变成Care Card
Care Card允许病人查看完整的治疗计划
互动性强 动态更新
它能实时地反馈病人的康复进展
在开发这个模块的过程中
我们发现了一个全新的世界
因为iPhone提供了无限可能性
我们又创建了另外三个模块来提升病人的护理体验
症状与测量追踪器
记录了各种主观和客观的测量数据
Insights概览页显示了各种应用数据
帮助病人掌握病情恢复进展
以及连接模块 用来实现
与家庭成员和护理团队之间的交流沟通
我们来看看它们是如何协作来提高就医体验的
德克萨斯医疗中心是CareKit早期合作伙伴
他们运用了这些模块
打造了一份独特的就医体验
来看看这些模块的实际运行
首先 你会看到一个欢迎界面
你能创建登录账户
我们的病人John Appleseed已注册
完成了应用配置
John起床后收到一条提醒他需要量体重
他使用密码进入应用
在智能秤上量完体重
体重值被传入HealthKit
CareKit会自动提取数据
CareKit轻易完成
因为它与HealthKit无缝衔接
记录体重后John进入Care Card
查看今天的待办事项
Care Card和症状与测量追踪器
正在自动更新内容
从德克萨斯医疗中心的ERM健康系统里提取
John不太记得其活动之一 短走的具体要求
他点击进入那一栏
开始浏览这项活动的说明
John完成了第一项运动接下来服用第一份药物
他点击进入了评估卡
查看今天需要完成的评估种类
在症状与测量追踪器里
他想记录下自己的术后疼痛症状
以及一些感染的迹象
他首先进入疼痛评估 输入了疼痛指数
接着拍一张感染区域的照片
上传到应用
这一切直接在症状与测量追踪器内完成
数据被传送到医院
最后 他要完成一些起立行走
当他四处走动的时候
iPhone的传感器会记录步数
当他完成行走后
数据会被直接传给医院
John想打开Insights界面
看一看过去几周的数据
他可以看到本周的信息提示和图表
这样视觉化的数据呈现方式更加便于用户使用
接着他切换到上一周
对比这两周的表现
同时他依然担心可能受到感染
尽管已经上报过了
他还是决定给护理人员发一条信息
他开始创建信息
他决定发邮件给Paul Cashman医生
他不需要再上传一次照片
因它已被发送给Cashman医生了
通过之前的感染评估
当天的晚些时候他收到了回复邮件
医疗团队成员Paul Cashman医生
他重新进入应用
阅读医生的信息
德克萨斯医疗中心就是这样使用CareKit创建出一个应用
打造了闭环的就医体验
谢谢我们来看看创建类似应用需要的步骤
这是四种前端模块 我们已经见过了
再加上两个后台的模块
Care Plan Store和Document Exporter
我们先从Care Plan Store开始介绍
Care Plan Store由活动和事件组成
我们先解释活动和事件的含义
然后创建一个活动添加到store里
寻找活动和事件的关系
最后把它们集成到UI里面
若仔细看这张Care Card
我们可以想象出活动和事件的含义
以ibuprofen为例
Ibuprofen 200mg是一个活动
下面的圆圈代表事件
活动和事件一起构成了Care Plan Store
这是一次活动
我们创建这个ibuprofen活动
先创建一个标识符
这里使用的是ibuprofenMedication
它能独特地标识出这个活动
接着创建群组标识符来标识不同的活动
方便以后在后台被调用
标题是Ibuprofen
内容是200 mg
这些属性直接面向用户
请确保它们的准确性
tintColor可以是任何UI颜色我们选择蓝色
除了选择填充色
CareKit还提供其它自定义选项
我们稍后会讨论到
我最关心两个属性类型和时刻表
类型决定了活动的类型
举个例子我们有干涉
它属于Care Card模块
还有评估它显示在症状与测量追踪器下
因为我们创建的是一个服药活动
它属于Care Card模块
所以 活动类型是干涉
接下来看一看时刻表
时刻表决定了活动发生的频率和时间
有三种方法定义时刻表
每天的日程每周的日程
你还可以创建自定义的日程
你可以定义频率
来指定每天的活动次数
听起来有点麻烦其实很简单
我们来简化它
我们来给活动定义一个日程
这是一个周计划
我们希望病人在周一 周三 周五服药
再定义一个频率
周一服用四次
周三两次 周五四次
综合起来就组成了活动的一个日程对象
现在这项完整活动可被添加给Care Plan Store
接下来我们学习如何使用代码创建Care Plan Store
在把这项活动添加进去之前
我们快速学习一下事件的定义
事件不是由开发者直接初始化的
其实它是由Care Plan Store自动创建的
为了深入了解创建的过程
我们回到刚才的日程
一个日程对象会根据自定义的频率生成不同的事件
举个例子 我们有四次事件在星期一
因此 有四次事件在6月20日
两次事件在星期三所以两次事件在6月22日
以此类推
要停止事件的继续生成
需要定义截止日期
一旦为活动定义了截止日期
Care Plan Store会停止生成事件
即使开发者没有直接创建事件
他也提供了很多有用信息
从事件对象你可以得到具体日期
可以看到事件的状态 比如初始状态
代表用户还没有调用它它可能被完成了 也可能没有
结果对象包含了完成的状态
它是什么时候被完成的
以及其它相关的信息
还有这个指针 它指向了这次事件
在Care Plan Store里活动生成事件
组合在一起构成Care Plan Store
我们来看看具体的代码
创建Care Plan Store步骤非常简单
先定义一个变量
我的变量是myCarePlanStore类型是OCKCarePlanStore
再定义一个永久的URL链接
在这里我使用了应用的文档目录
再使用URL进行初始化
就得到了可用的Care Plan Store
现在我们把刚创建的ibuprofen活动添加进去
首先创建一个日程对象
设定开始日期为今年年初
然后使用一个周日程
我们可以用数组来记录事件的频率
也就是每天发生的次数
举个例子我们的数组从周日开始
周日为0 周一为4 周二为0
以此类推
定义好了日程对象就可以初始化care plan活动
再定义一个标识符一个群组标识符
以及其它所有的参数
其中两个参数我们尚未讨论instructions和imageURL
它们被用来描述活动的细节
如 当John Appleseed点击“短走”
他可以看到具体的说明
我们也需额外信息描述ibuprofen及图片说明
等下在Care Card里就能看到其具体模样
要把这个活动添加到Care Plan Store
我们只需调用一个添加函数然后传递创建好的活动
最后使用completionHandler处理异常情况
以上即如何创建Care Plan Store及如何向它添加活动
我们来看看如何把它们的数据呈现在Care Card上
创建Care Plan Store和添加活动是最难的部分
呈现在Care Card上相对简单和直接很多
这就是我们添加的活动注意它的活动类型
它属于干涉因我们已把它设置成干涉
Care Plan Store自动将它显示在Care Card上
要创建一个Care Card
需要先初始化CareCardViewController使用carePlanStore对象
把它内嵌到NavigationController
这一步很必要 因为它能提供barButtonItem
用来操控日历
以及将信息推送到导航堆栈上
现在可以直接将其显示
也可以把它内嵌到tabBarController
仅仅三行代码我们就生成了一个Care Card
这里你能看到我们拥有ibuprofen活动
和其它建好的一些活动
我们看看这个UI的其它部分
了解它们的具体作用
headerView显示了本周活动的预览
你可以左右滑动切换到另一周
你可以选择特定日期查看当天的细节
心型图案是由程序自动计算和更新的
根据Care Plan Store现有信息
心型图案和填充颜色都可以定制
你可以选择更适合的图片
也可以改变填充色来搭配自定义图片
等会儿我们将展示一个自定义的Care Card
标头下面是治疗方案
它包含了当天要完成的干预治疗
每次从Care Plan Store里添加或删除活动
这个UI也会自动更新
开发者不需要额外的工作
这是我们刚添加的ibuprofen活动
点击这一栏
你将进入详细信息页包括具体的用法说明
以及药物的图片
方便用户把它和其他药物区分开来
我们看一种不同的干预治疗
这个项目要求病人起立行走
点击进去用户就可以自行完成病情报告
也可以通过Apple Watch的传感器自动更新
这正好引出下一点
我们如何更新这些事件？
有多种方法其中之一 用户自主报告
比如服药追踪
患者可以报告服药状态
他们可以在完成任务后将其标注为完成
如ResearchKit活动任务
还可以通过设备的传感器自动更新
比如Apple Watch或iPhone的HealthKit
这就是Care Card
它是一个互动的治疗计划
使用Care Plan Store规划活动和事件
帮助用户实时监控每日病情进展
就如Care Card一样
“症状与测量追踪器”也使用了Care Plan Store
来记录主观和客观的病情测量数据
添加评估的过程
和添加ibuprofen活动的过程十分相似
如果添加一个后背的痛感调查
它的代码和创建这个几乎一样
假设它已被加入了Care Plan Store
我们来看看如何创建症状追踪器
来展示这个评估
像Care Card一样先初始化symptomTrackerViewController
使用Care Plan Store对象
这里可以使用代理函数我等下会讲到
然后把它内嵌到NavigationController
然后把它展示出来效果就像这样
如果我们分解这个UI
headerView包含了和Care Card一样的导航模式
你可以左右滑动来切换至另一周
选择具体日期 来显示当日详细信息
当我们正在完成当天的评估时
这个环形的图表 可以显示当前的进展
一旦全部完成 图表会自动打勾
这表示当天的评估已经全部完成
图表和勾号的颜色都是可以自定义的
在这下面 是今天待完成的评估列表
评估多种多样我们来看看其中一些
这是一个痛感调查
要实现它 我们可调用ResearchKit的调查模块
来呈现出精心设计的调查表
它们也可以是活动任务
你可以进行点击测验或者创建自定义活动
使用ResearchKit如“运动范围”
它也可是自主报告的你可为客户展示viewController
就像德克萨斯医疗中心应用所做的一样
请求用户拍摄感染图片并传回医院
传回的也可以是任何类型数据如HealthKit或Bluetooth设备
在德克萨斯医疗中心应用里
John使用了智能体重计
自动上传了数据更新CareKit应用
代理函数就在这里派上了用场
为了更好地展示评估结果
我们需要实现症状追踪器的代理功能
为开发者提供回调函数
每当用户点击评估栏时被调用
这个回调函数会返回一个评估事件
你可决定使用哪个视图控制器呈现这个事件
如果你想显示一个痛感调查事件
首先你需要使用它的数据计算疼痛数值
然后创建一个结果对象
记下它的数值和单位
如果你要添加其它额外信息你还必须更新userInfo目录
在Care Plan Store里更新这项事件
以及它的结果对象 事件的当前状态
最后使用completionHandler处理异常情况
汇总所有的信息
你最后看到的就是症状与测量追踪器
Insights概览页能调用Care Plan Store数据
生成信息和图表
方便用户更好地理解数据
为了让开发者更容易生成它们
我们推出了insight部件
能导入它们到Insights概览页
它们包括各种信息比如提示和警告
它们也可以是图表
如从CareKit引进的分组条形表
以及各种自定义的图表
比如 ResearchKit的图表
能够轻易地被转换成我们需要的图表对象
我们看看这个概览页里包括的insight部件
这是一个用药追踪的信息部件
信息部件能鼓励用户完成治疗任务
通过推送重要信息的方式
这个信息部件使用Care Plan Store数据
计算出上周服用ibuprofen的遵循度
这些信息也能通过远程服务器生成
传递到Insights概览页
我们来看看代码如何向后台store请求数据
在这里你可以指定开始日期和截止日期
我使用上个星期天
和之后的星期六分别作为开始和截止日期
然后调用enumerateEvents函数
在Care Plan Store上
标注我们想要枚举的活动
以及枚举的日期
随后活动的的事件被返回给handler
我们可以枚举这些事件查看它们的状态
判定它们是否被完成计算执行度
完成了执行度计算之后如果想要生成一个信息部件
在这里你需要把计算得出的执行度
变成一条易读的信息
方便用户理解
你需要先初始化信息 给它添加标题
信息内容颜色 以及信息类型
比如说 这是一条提示
接下来 我们讲讲分组条形图
它能在一张图表里显示多组信息
比如说 这个图表对比了pain和ibuprofen
用户可以从这些数据中
了解病情恢复进展
我定义一个变量barChartItem
类型是OCKInsightItem
barChartItem包括不同的图表系列
我们已见过painSeries和ibuprofenSeries
要创建这个图表
首先需定义painSeries及初始化BarSeries
然后指定标题、数组以及字符串组
和图表填充色
数组的元素数目是不受限制的
所以你的图表可以展示每周数据、月度数据
或者任意数量的数据
数值决定了条形图的长度
字符串会出现在条形图的右边
大多数时候它们的含义都不相同
举个例子在ibuprofenSeries里
数值决定了条形图的长度
但它们并不代表数据本身
再举个例子这些1-5-4之类的数字
会很容易被误解成药品剂量1片药 5片药 或者4片药
标签值帮助用户知道他们遵循用药量
10%、50%以及40%
我们已经知道想要显示哪些系列了
需先初始化一个barChartItem
然后指定它的标题、文字内容、填充颜色
我们有两组数列分别作为坐标轴标题和副标题
显示在每组条形图的左边
你可以注明需要显示的系列数目
可能有1组 2组 或10组
还有两个可选的参数需要定义也就是量程
最小量程和最大量程
如果你不注明它们
它们会被自动生成根据你提供的数据
如果你想要注明那么请小心
不要让数据出现偏差
举个例子 如果数据的范围从1到10
但注明的量程是从5到10
那么所有低于5的数字就被隐去
数据就会失真
终于我们建好了信息部件和图表部件
我们创建一个Insights概览页
首先使用这两种部件的数组来初始化InsightsViewController
指定一个标头和一个副标题
一个标题和副标题
接下来直接展示它得到这样的
这是创建Insights模块方法
下一项是连接模块
连接允许用户分享数据
给医疗组成员或者家庭成员
为了简化这一操作
我们创建了CareKit联系人
它有两种类型
医疗组联系人包括医生或护士
或者其他医疗组成员
还有私人联系人
可能包括密友或者家人
观察连接模块时你会发现联系人是根据类型分组的
医疗组成员在上面
下面是朋友和家人
我们来看看代码怎样创建联系人群组
要创建一个医疗联系人首先定义一个变量
类型是OCKContact的PhysicianContact
接着初始化联系人对象
然后指定careTeam的类型姓名
他和病人的关系
以及填充色
接着是电话号码、信息号码是CNPhoneNumber对象
方便格式统一
邮箱地址是字符串
定义monogram数值
或者指定图片
来显示医生或者医疗成员的头像
当所有联系人都创建完成后 请初始化connectViewController
然后把它展示出来
但是这里你依然需要编写一个代理函数
我们等一下会提到
在我们呈现它之前
需要把它内嵌到NavigationController
因为连接模块同时包含主页面和详请页面
最后的连接模块是这样的包含了ConnectViewController
我们看看刚创建的联系人Paul Cashman医生
如果点击这一栏
进入详情页就能得到他的详细名片
在名片里你能看到他所有的联系方式
告诉你怎样打电话发信息
发短信或者邮件
还能在下面发送报告给他
代理在这里产生作用
连接代理让联系人之间数据共享成为可能
举个例子当用户点击分享按钮
这个函数被调用
你会收到一个联系人对象
你可以决定生成哪种报告然后分享报告
创建报告和分享报告的过程非常繁琐
看看我们是如何简化它的
为了更方便地使用连接模块分享数据
我们推出了Document Exporter
它从Care Plan Store抓取信息
甚至从其它来源生成富文本PDF以供分享
就像我们为CareKit做的所有事一样
为了简化流程我们创建了CareKit文档元素
包括页眉和页脚
文字和段落图片 图表 和表格
汇总这些元素创建一个这样的富文本PDF
在这份PDF中包含了病人的照片
一份易读的病情进展报告
同Insights概览页一样的图表
现在医生也能看到了
他们能看出病人的恢复情况
还有一个表格展示了所有的主观和客观的测量数据
关于上一周的
我们来看看创建这个PDF的代码
首先定义一个DocumentElementParagraph对象 只包含了文本内容
这些文本内容也可以来自Care Plan Store
或者远程服务器
然后定义一个DocumentElementChart对象
它几乎使用了Insights概览页同样的图表元素
所以我们不用编写任何新代码或者生成任何新图表
这个表格包含了许多的标题栏
以及许多的数组
每一个数组都包含了每一行将要显示的数据
比如 一个星期的疼痛值数据
或者 一个星期的点击测试结果
当你拥有了创建文档的全部元素
先初始化一个文档对象给它添加一个标题
和一个包含所有元素的数组
把这些文档元素转换成PDF非常简单直接
只要调用createPDFData方法
使用返回到completionBlock的NSData
最后输出到文件URL
现在 当用户点击分享按钮
PDF就被生成了 使用刚创建的Document Exporter
用户可以预览PDF他们就能知道被分享的内容
他们可以点击分享按钮进入分享页面
选择不同的方式来分享PDF
这就是Document Exporter它和连接模块一同协作
实现了数据分享
所有的模块放在一起构成了CareKit框架
Patient PAL最近改变他们的就医体验
使用CareKit
我将为大家展示他们如何利用自定义功能
来提升用户体验
创建干涉活动和评估
来帮助病人恢复健康
在他们的Care Card中心型图案被锻炼的小人替换
他们应用的主要功能
是帮助病人进行特定的锻炼
比如说 如果你专心于髋关节伸展运动
粉色的这一个
需要点击剩余的圆圈来完成它
但是在标注它为完成之前我们必须完成这组锻炼
这组锻炼任务包含了一则详细的描述
还有一个视频
保证用户使用正确的方式锻炼
他们甚至还帮助患者记录下自己的锻炼过程
医疗机构也能看到这些信息
点击观看视频按钮会显示出内嵌的视频
当你懂得这组锻炼后点击开始
这个过程中将会有一个活动任务引领你做完每一组锻炼
一旦完成了锻炼
你能看到完成进展度自动被更新
这个小圆圈就被标注成完成
在Care Card上我们为每一组活动提供详尽的信息
同时你可以编写代理函数自主提供显示信息
他们另外一项自定义
当用户点击其中一个细节界面时
比如说韧带拉伸页面
会唤起一个视图控制器
让你设置锻炼提醒
我已经完成了两项
第三项 我想在“晚上8点做”
应用会给我推送提醒
继续完成我的锻炼
CareKit提供了高度的可塑性
你可以定制这些模块来满足你的需求
这只是其中一部分
我们来到了最后一个部分CareKit的下一步计划是什么
目前 CareKit帮助你编写以患者为中心的应用
接下来 我们将专注于
创建应用程序和云服务器的连接
以及把医疗信息
从云端传递给医疗团队
这一类架构已经被运用到德克萨斯医疗中心应用
和Patient PAL的应用上了
我们由衷地希望
你们在开发CareKit应用并且连接到云服务器时
你们能分享自己的经验
回馈整个社区
让使用类似云端解决方案的人也能受益其中
CareKit是开源项目
它的未来取决于你
请贡献你的力量
你能在GitHub找到该项目
地址是github.com/carekit-apple/carekit
如果你想帮助我们完善CareKit
请浏览GitHub上的issues部分
你可建立新的issue或者选择已经创建的
进行开发
请随时联系我们或者社区成员
如果开发中遇到任何问题
和我们一起审查代码
这通常需要你、社区和Apple工程师的参与
我们的工作始于这里
当我们收到开发审查过的功能后
我们将接手这项功能给予它更多的访问权限
我们将使功能本地化翻译成CareKit支持的所有语言
在所有平台上进行QA测试
这个过程可能也会需要你们的帮助
一旦这个功能可以使用我们会把它并入框架
有了CareKit我们非常渴望和大家一起工作
一起打造全新的医疗体验
更多信息 请浏览这个URL
包括我们网站和GitHub的链接
以及我们的联系信息
如果有任何技术问题
或者有任何CareKit应用的想法要分享
请浏览这些相关演讲帮你们创建自己的CareKit应用
谢谢大家出席本场演讲