现代互联网的网络系统
下午好女士们和先生们
看到这么多人在场我感到非常高兴
有多少人是第一次来WWDC？
哇！这令人难以置信
欢迎
我希望你们在WWDC一切顺利
现在我们要来谈一些网络系统的话题
我今天有五个内容要讲
我们将向你们介绍显式拥塞通知的最新进展
我们去年谈论过（显式拥塞通知）
我们要告诉你关于IPv6进展的最新动态
我们要谈论一点点国际化文本
它正变得日益重要
我们要来探索下你如何控制网络接口的访问权
来避免你的用户收到天价流量账单
我们会以一些关于网络服务质量探讨进行收尾
你可能听说过AppleCisco Fastlane声明
我们就它将如何适用于你的应用这一话题加以谈论
我们先从ECN说起
简单地回顾下去年讲的内容
我们展示了Smart QueueManagement和标记而非丢弃数据包
如何在重新发送过程中降低延迟 减少延时
来提高所有应用程序的用户体验
特别是对串流影像这类情况
在iOS 9上面我们对TCP连接没有启用ECN
但是在一个不相关的改动里
VPN软件会关注ECN标记
我们发现德国的一个ISP把所有的数据包都标记了
“经历了拥塞”这对VPN是不好的
好消息是他们在几个星期内修好了网络
我们没接到世界其他地方发来的任何错误报告
这告诉我们的是我们在世界各地推出了iOS
发现了一个问题并修好了
现在互联网对ECN来说安全了
也正因为这样 在iOS 9.3和OS X El Capitan上
随机5%的TCP连接使用了ECN
我们用这个来收集性能数据
然后检查确认互联网对ECN来说是持续安全的
在你已有的Developer Seed中
100%的Wi-Fi连接和100%的
这三个网络运营商的连接现在都在用ECN
去年 我报告说Alexa上56%
排名前百万的网站支持ECN
这是一个还挺令人惊讶的支持数
对于一个没人用的技术来说
我和我在ETH的好朋友Zurich和Brian谈了下
Brian Trammell和Mira Coolwind还有他们的同事
为我们重新跑了下测试
今年的百分比上升到了70%
而且如果你只看IPv6的网站都到了83%
所以
这是在号召ISP、网络运营商
和卖给他们设备的供应商们行动起来
客户端在使用ECN
网络服务在支持ECN
是时候让中间的网络开始标记数据包
而不是丢弃他们
它给你更好的用户体验它减少了因为重新传输而产生的延时
而且它更有效的利用了网络
因为你避免了重新传输包裹而浪费带宽
我们的下一个话题是IPv6
全球启用IPv6计划是四年前的上个星期
它现在还在增长
我看了各种各样的数据统计
现在来给大家展示其中的一小部分样本
我看了通过IPv6访问Apple主页的比例
在比利时 这个比例现在到了39%
在美国T-Mobile这个比例到了54%
在Verizon上 这个比例到了74%
很清楚的一点是 在这些运营商上IPv6的通信是主流
原因很简单
IPv6更简单、更可靠操作起来也更便宜
所以运营商想转用IPv6原因很清楚
但对于开发者和用户来说代价是什么？
IPv6欠成熟吗？
它更慢吗？
分给IPv6的容量更少吗？
这些是很重要的问题
内容提供商和开发者密切关注着这个
他们用收集自网页浏览器的数据
测量一些东西像其用户每人浏览网页时的加载时间
然后把这个信息发送回来
这样他们就能知道自己的产品
在世界各国
不同的ISP不同的运营网络上运行如何
LinkedIn报告他们现10%的通信是通过IPv6
他们发现页面平均加载时间比通过IPv4快10%到40%
他们推理这可能是因为较少的额外开销
通过大规模超载的NAT建立连接
Facebook发现了相似的结果
他们现在通信的45%是IPv6通信
这是他们最近根据数据的平均情况做出的报告
ATP通过IPv6的GET请求要快15%
若你只看数据集合中iPhone部分
结果发现其中30%通过IPv6
所以IPv6对网络操作者来说更好
他对用户和内容提供商也更好
这也是为什么Apple100%支持IPv6
你们上个月肯定都已经看到了这个声明
我们去年宣布了我们将要求所有的应用
兼容IPv6网络
我们还说将在自己的IPv6网络上用NAT64 Gateway测试所有应用
从这个月起我们开始强制执行那个要求
还仔细的寻找任何
这个行为会导致应用程序拒绝率升高的证据
因为如果是这种情况的话
我们将不得不研究并找到解决的办法
但是好消息是我们尽全力监测
没有发现应用程序拒绝率的任何变化
这个真正告诉你的是你们中99%有应用
在IPv6支持下能正常工作
这是我们意料之中的
但是最好还是能确认下
若你已有一个应用被拒绝了而且你认为可能和IPv6有关系
那么今天或者明天来一下实验室吧
你可以在WWDC这里用NAT64网络测试你的应用
我们可以帮助你检测下哪里可能出问题了
我们的建议仍然是也一直会是
使用高层级兼容地址族的API
如果你非得使用低层级的BSD API
那么你将会有额外的工作要去做
这就是为什么我们诚挚建议使用高层级API来为你做那些额外工作
另一条重要建议是使用主机名而不是IPv4地址
因为IPv4地址是IPv4内置的一部分
让我给你看个小图片告诉你为什么
这是几年前的一个典型情况
你有一个客户端在用IPv4你有一个服务器在用IPv4
数据包在NAT Gateway绕了点圈子
这就是你如何连接到服务器
现如今 很多运营商开始使用带NAT64 Gateway的IPv6网络
数据包仍然在NAT Gateway绕点路
然后连接到互联网上那个老的过时的IPv4服务
如果你们数据中心的人提出双栈服务
但是你的应用还在用v4字面值
那么数据包还是会绕同样的路
通过NAT到达服务的v4接口
但是如果你通过主机名查找
并且他们把IPv6的配额记录放入DNS
那就是你如何直达数据路径
不用通过NAT Gateway
我谈了字面值地址
我们现对选定的API支持IPv4字面值地址
如果你使用其中的一个地址
我们实际会为你在本地设备上做DNS64综合体
创建一个临时IPv6地址
与你因特网上v4服务相对应
然后通过NAT64 Gateway进行连接
请记住 使用字面值v4地址
一定会阻止你的应用连接到一个ATV6服务器
但话又说回来如果那是你应用程序的需要
这里是一个例子教你如何去做
如果你编程语言用的是Swift和高层Cocoa API
这些会为你自动生成
但是如果现在你用的是UDP代码而且你用的是BSD socket
你需要用到的API是getaddrinfo
你把要连接的地址用字面值传进去
传入你想要的端口号
这里https是443端口的同义词
你对得到的地址进行循环
记住 不要只用第一个
你会得到一个数组包含多个地址你需要去试
当然 在你结束时释放内存
连接在Local Link的设备
我们从开发者那里收到的另一个问题是关于物联网的
有的开发者写的应用
和不是他们制造的设备进行互动
其中一些设备还不是很先进
我们希望那些设备去支持IPv6
如果不行的话
我们建议他们起码支持IPv4 link-local地址
所以即便在一个只支持v6的网络上
那些设备间可使用v4与link-local地址互相交流
如果这个设备两样都做不了 也可以
当你提交应用时 通知应用审查
那不能成为拒绝你应用的理由
但很可能是在这个设备上贴上这个标签的理由
要记住所有的线下链路通信
仍然要兼容IPv6和NAT64
总结一下我们推荐你支持IPv4和IPv6
在两端都要支持即在客户端和服务器
我们推荐你使用主机名、
这样你可在v4的网络上获得一个v4地址
在v6网络上获得v6地址
如果你确实需要使用字面值地址一些选定的API现在支持他们
只要你设置合适
但是记住
插入v4字面值以后会阻碍和v6服务器的通信
这就引入了我们要讲的下一个部分国际文本
你可能已经开始见到像这样的东西
如果你的母语是英语这可能看起来挺难懂也挺吓人的
但我今天想谈的是 它到底有多简单
国际支持在你的应用中不需要成为一个艰巨的任务
事实上 其实它不比支持ASCII难
所以尽管这部分标题是国际文本和网络
我们其实可以把网络划去
眼下 我只想谈谈通常来说你如何支持国际文本
我要从一些背景知识说起
并不是因为你们中很多人每天可能会遇见它
而是我想揭开它一部分神秘的面纱让它不那么可怕
因为它真的不再比ASCII复杂了
我们的第一个概念是Unicode
Unicode是一大串数字
与之相对应的是人们能看懂的字符
它就像一个大电话本事实上 它可以书的形式出现
它是一本又大又厚一页一页写满了数字和字符的书、
那就是个抽象概念
你有整数和它代表的字符
想在我们的电脑里用这些整数
我们需要代表这些数字的方法
在内存里 在硬盘上在网络上
代表他们的一种方法是UTF-32就是一个32位的数字
像其他32位的数字一样
你需要关心它到底是大尾数还是小尾数
它需要占用的空间是ASCII的四倍
UTF-16就更简洁些它用的是16位的数字
它仍有同样的问题小尾数还是大尾数
因为它是16位它只能代表65000个值
所以你得用代理对来代表超出范围的值
因此那就有点累赘
UTF-8是一个8位面向字节的编码
因此不存在字节的顺序问题
这也正是用它来编码很理想的原因
那就让我们深入研究下UTF-8
它发明于1992年新泽西的一个深夜
它是计算机科学天才的罕见作品之一
当我第一次听说它的时候我立马知道了 这就是答案
这解决了国际文本的问题
所以我想告诉你们一些关于它是如何工作的
那样你就理解他到底有多简单了
UTF-8的语法
Unicode的代码点 从0到7F和ASCII的值是完全一样的
UTF在内存中用完全一样的字节代表他们
它的意思是如果你有一个硬盘里装满了明文ASCII文件
我就能魔杖一挥 然后说我宣布你现在是UTF-8
硬盘里没有任何一个字节需要改变
文件的意义也没有改变
你对那些传统的ASCII有自动的向后兼容性
这个东西好极了
UTF-16和UTF-32以及其他编码没有这样的属性
对于ASCII范围以外的值
他们会表示成多字节序列
但所有那些多字节序列只用字节值大于128的
所以在ASCII字符和
大数值Unicode代码点的多字节编码之间是没有重叠的
这个属性不适用于其他
那些重新使用高码字节代表其他东西的编码
UTF-8有3种类型的字节
它有明文ASCII字节
UTF-8多八位序列
如果一个字节从最显眼的0开始
那就告诉你它是明文ASCII
如果前2、3或者4位是1
那就告诉你它是一个两、三或者四字节序列
如果前两位是10
那就告诉你它是多字节序列
我来联系语境展示一下
独立的ASCII字符
前两位是1的字节意味着它是两字节序列
开头3个1的是三字节序列
开头4个1的是四字节序列
这个赋予了它一个绝妙的属性
你可跳到UTF-8文件中间任何地方
通过看任何老字节你能分辨出来你看到的是什么
这个是独立的ASCII吗？
这是一个多字节序列的开始吗
我处在一个多字节序列的中间
是向前还是向后跳几位才能找到字符的边界？
所以这对于插入和删除错误来说是非常非常鲁棒的
这是个效率高到精简的编码
但它又恰有足够的多余度使自身可靠
它另外一个有用的属性是在一个字符串的UTF编码里
是没有0字节的
而C语言把0看成是一个字符串的结尾所以这个属性非常有用
UTF-16字符串到处都是0
UTF-8的属性
另外一个不错的属性
是若你在UTF字符串上做一个无脑简单的字节检验码的字符串排序
他们的排序和你直接对Unicode代码点排序的结果是一样的
这真是一堆绝妙的属性
这就是为何Ken Thompson发明它之后 仅仅时隔六年
IETF发布文档 要求从那时起
所有新互联网标准协议必须能使用UTF-8
这个理念也在网路被接受了
四年前 Google做了个问卷调查
发现80%的网页都是UTF-8
包括了一小部分老式的明文ASCII
当然也是UTF-8的兼容子集
UTF-8网页的百分比
上个月那个数字增长到了87%
正因为这样 W3C和IETF一样
同样推荐我们只用UTF-8
这相当棒
但是有一个问题
出于某种历史发展中遗失了的原因DNS界决定不这么做
他们发明了一个不同的编码方法被叫做Punycode
Punycode重新使用已有ASCII字节值来代表不同的东西
那些字节值对应的是字母、数字和连字符
这个的结果是如果我们有一段字节
我可把这些字节当成ASCII值处理
然后得到这样的东西
或者我可以把它们当成Punycode编码来处理
然后得到他们真实的内容
那个对于相同字节的双重解释可能会出现问题
因为你想给用户看的内容并不明确
或者不是用户想要的
如果用UTF-8来做对比
你注意到的第一件事是编码变得简洁
它用了更少的字节
而且只有一个有效的解释
所以不会出现模棱两可的情况
对你们来说好消息是你们不需要关心这些
因为我们会为你处理
在iOS 9和OS X El Capitan上
如果你试图在命令行ping一个UTF-8的主机名 那会失败的
你输的是UTF-8
那些字符通过了工具检测被API接受并到了网络上
但那名字没以UTF-8输入到DNS中 所以失败了
从现在开始的iOS 10和macOS Sierra
同样的ping指令在命令行输入同样的UTF-8字符
我们现会把它翻译成Punycode
运行查询它将会成功
这里ping指令会使用Punycode
把它以ASCII形式展示
所以你看到的是屏幕上这些乱码而不是你原本输入的实际名字
这也是对同一字符有双重翻译问题的一部分
但是好消息是所有的Bonjour和DSA API
现在会接受以UTF-8格式输入的国际文本
谢谢
因为Punycode格式有非常严格的限制
它甚至不支持像名字中有空格这样简单的东西
对于Bonjour搜索发现我们用的是DNS
我们不想有那么严格的限制
因此 运算法则的工作方式是RFC 6763里记录的
我们首先尝试UTF-8
如果DNS管理员把UTF-8放在他们的区域文件里
这做起来很简单人们在90年代在做的
我们运行查询 我们成功了我们得到了结果 一切都很正常
现在不同之处在于若我们失败了 我们没有放弃尝试
而是用Punycode进行再次尝试看看是否奏效
所以我们在同一个API中支持这两种
Email地址
Email地址当今也变得国际化
这个做起来也不难
但是用户却碰到问题了因为一个愚蠢的小原因
很多app 当你注册一个账户时
或者你去网页上注册一个账户时
他们试着验证这个email地址是否有效
他们检查它是否以.com结尾或者类似的格式
但有着绝对有效email地址的用户
却不让注册账户
因为他们的email地址被拒绝了
所以我们需要移除那些出问题的验证器
说实在的 对于email地址唯一你能检验的东西
是它是否有一个@字符
如果有的话它就可能是个有效的email地址
如果你想知道它是否有效发送一封确认邮件
让用户回应以确认它是有效的
如果你在写一个email客户端或者email服务器
会有一堆RFC你需要去看一下
但是对于剩下的人来说你不需要去担心它
让用户以UTF-8格式输入email地址
把它存在你客户端的数据库中让邮件服务器把它
以email标准编码正确发出去
国际文本的范例
来对这个部分进行一下收尾我们推荐你把UTF-8用到每个地方
让一切变得那么简单
不要担心Punycode我们来为你处理
对于接受用户的输入要自由灵活
这是个新的多语言国际世界
下面到了接口部分
Wi-Fi Assist是我们去年引入的
说真的 这不新
自第一个iPhone起就一直这样
如果我有Wi-Fi我希望我的手机使用它
如果我没有Wi-Fi那就是我为什么得花钱买蜂窝数据流量
这样出门在外我也有网络
第一个iPhone就这样做了
我们去年做的改变是我们做的更好了
我们对于做的那个决定更明智了
因为在Wi-Fi网络的前沿总是会有这样的一个灰色区域
移动因素也在此之内
我们有个情况我们称之为停车场问题
它发生于一天的结束当你要下班的时候
你离开了办公室你拿出了手机 你有Wi-Fi
你走出大楼去开车然后你要查看地图
或者天气预报或查找电影什么的
你的手机以为它有Wi-Fi
它一小会儿前是有Wi-Fi
但是你刚好走出了Wi-Fi的范围它还没意识到
有了Wi-Fi Assist我们会去做这个决定
我们尝试使用Wi-Fi
如果不管用我们就会转而使用蜂窝数据
但就像任何新功能有时候会存在倾向性
让新事物成为人们问题的替罪羊来遭受责备
所有人会恨它当有些app使用了大量的流量
然后出乎意料地收到了天价账单
人们的本性就是责怪新功能
但其实若你去看Wi-Fi Assist的流量
你很可能会发现那部分非常少
Wi-Fi Assist通常不是问题所在
应用有那个开关
如果你不想那个应用使用太多流量你可以把它关掉
但那非常残忍 更像是一种要么全要 要么全不要的开关
很多应用想做一些有点狡猾的事情
比如你有个视频流应用
你可能想让用户能浏览目录
看到指甲盖大小的小图片读简介 而这些全通过移动数据
不会花费太多
但是你可能想要应用程序的设置不让使用移动流量来缓冲视频
因为用户可能不想花费太多钱到移动流量上
如果你有那个设置的话你会想要能够辨别
接收指甲盖大小的图片是允许的
而缓冲视频是不允许的
很多开发者做过这样的事情
他们用可达性API来问我在用手机流量？
是还是否？
如果没在用手机流量那就开始去下载吧
但是 网络的事情不是一直不变的
事情每一秒都可能发生变化
在你检查
是否在用手机流量和实际上去连接之间
用户可能正穿过停车场
所以这不是做检查的正确方法
正确方法是把你的意图在网络层表达
我们会尊重你告诉我们的内容
第一步是不要管那个“飞行前检查”
如果你想做个网络传输就去试一下
如果那是一个你不想用蜂窝流量的传输
那么你可以把它在网络层表达
CoreMedia API的使用
你使用NSURLSession来设置allowsCellularAccess关键字
若把allowsCellularAccess设为假
那么我们就不会使用蜂窝数据进行连接
简单又好用
如果连接失败你可以询问用户
你想用移动流量还缓冲视频吗
或者你可以等 订阅更好途径的提示
当手机恢复Wi-Fi连接时你就会被告知
然后你就可在Wi-Fi再次可用时重试你的连接
总结一下不要假设因为你现在有Wi-Fi
你在一秒以后仍然有Wi-Fi甚至半秒以后
情况一直在变
把你想要的在网络层表达我们会遵从的
网络服务质量（QoS）
我们最后一个话题是网络服务质量
去年夏天 我们宣布了Apple和Cisco的合作关系
我来告诉你们一些关于新API的内容
你就可以在网络层来表达你的需求了
实际中存在不同种类的网络通信
我们所做99%的事情是好的标准的因特网尽力而为流量
我们想要能得到的最大吞吐量并且我们最好能降低延时
但是我们一定想要吞吐量越大越好
用来满足浏览网页、发送email
我们做的另外一件事是联机备份把图片上传到iCloud
这也想要好一些的吞吐量
但不像高优先级的东西需要的那么大
我们想把所有图片上传到iCloud
让这个过程在后台完成还不打扰看Netflix TV兴致
图片上传应该在我们睡觉时进行
俗称清道夫级别的流量
它用的是网络其他时候空闲的流量
不然那些就被浪费了
但第二类通信是发送email 浏览网页
以及任何人们频繁参与的活动
第三类通信是电话语音交互式语音和视频
我说交互式是因为它是关键部分
当我们在谈话时
我说一句话 你听到了 你要做回答你回了我一句话 我也听到了
如果这个来回需要几百毫秒
人们的通信就被打断了
当人们谈到语音和视频时
意识到一点很重要 就是看的YouTube视频可能是个视频
但它不是交互的
它不需要那200毫秒往返时间的附属条件
听的播客节目可能是语音但是它不意味着播客服务是声音通信
它不是互动的
这就是为何我把图表这部分标注为电话语音
因为这是交互式语音和视频
对这类通信你想要尽可能低的往返时间
而且它的吞吐量非常小
每秒只有几千比特你不需要50兆比特的语音
所以把你的通信标记为电话语音会告诉网络保持低延迟
但是你也不要把队列弄大
若你试图把语音类做任何形式的批量传输
你将会丢掉大部分的数据包
因为只有很少的网络流量
被分给了这类通信
人们问的一个常见问题是Fastlane会让我的应用变快吗？
答案是 不会的它不会让你的应用变快
它会减低语音通信的延时
你可能会好奇 这个和
Smart Queue Management还有Explicit Congestion Notification
就是之前谈过的那两个有什么关联
答案是 那些技术全面改善了
所有通信的延时
但是电话语音可能还会是个极端个例
它想要非常非常低的延迟
不惜牺牲吞吐量来达到
网络服务类型API
从iOS 5开始我们就有了网络服务类型API
它让你能向网络表达你的一些需求
但很多开发者写的诸如Skype和Facetime
是通过UDP来做这类电话语音通信的
在现在的iOS上要使用UDP你需要使用BSD套接字
所以我们现在有一个套接口选项用来公开相同的功能
这样你的UDP客户端可以从中受益
我们知道一些开发者过去一直在一次尝试中设置
服务的IP类型位系统来达到同样的效果
问题是那些服务类型位系统没被很好地定义
他们没在任何地方被详细说明
一些Wi-Fi芯片供货商会看服务类型位系统
然后把它当作设置
Wi-Fi通信类型为语音、视频或后台的提示
但是问题是没有对这些位系统进行标准定义
诠释起来就会不一致
所以你可能在你办公室测试过了认为一切正常
但是对于一个客户却是另外一回事
这就是为何我们有了新的套接口选项
会在任何设备上给你提供可靠的、一致的行为
如果你在用Swift编程
你可以设置网络服务类型属性为语音、视频或后台
或者你根本不去设置那么它就是传统的尽最大努力传输
如果你在使用套接口选项我们有同样的选项
我们有其他大概多于七个的选项
多于你们中大部分人需要的
这些是四个有意思的
链路层QoS标记
当你设置这些选项时会发生一些事
在设备自身有一些带外队列
你为通信设置的服务类型控制它使用哪个队列
在Wi-Fi接口它也会设置无线多媒体访问类
在iOS和OS X上所有的设备都支持这个
而且带外队列选择同样适用于Ethernet和Wi-Fi
现在 若你的设备在这些新的Cisco Fastlane网络上
我们会识别也会设置
IP层区分服务代码点
这样你就能得到想要的处理方式
不只是在它离开设备的第一跳
而是在企业网络上并发跳越
我想强调的是这不是你们所有人都需要的
不必感觉你得走开对代码进行改动
如果你在写一个在线备份的应用一定设置后台通信类
如果你在写下一代的Skype那就设置成语音类
但是对于剩下的人来说
标准的尽最大努力传输几乎可以确定就是你需要的
还有一些其他事情你们应该记住
带外队列选择和Wi-Fi层
服务质量标记被所有设备支持
但是记住只适用带外数据包
进来的数据包必须被另一端的发送者标记
IP层的标记也只针对带外数据包
现只被Cisco网络的兼容设备支持
只被iOS支持
不被Mac和Apple TV或其他设备支持
而且目前 只被Wi-Fi支持
绝大多数人在iPad上不用Ethernet
但若你插入了Ethernet适配器
服务质量不被Ethernet支持
最后一点 如果管理员选择安装
一个管理配置文件在设备上
那么管理配置文件可以限制
那个应用可以使用这类服务选项
只有在配置文件列表的应用才能够设置服务类型
对于其他应用来说将是个无操作
概况来说这个部分
你们大多数人的通信应该继续是尽最大努力
网络服务类型的最佳实践
如果你要做大型的批量传输且时间并不那么重要
后台通信是一个让你少受打扰的方法
让你在网络上成为一个更好的公民
记住 它没有优先级这一说
没有所谓的高优先级到低优先级的排序
它是一个web表达你是否想要小吞吐量和低延迟
还是大吞吐量和中等延迟
今天的演讲就到这里
谢谢你们的到来
我们谈了SmartQueue Management
这对所有ISP和运营商以及网络供货商是一个号召行为
客户端开始支持ECN
服务器开始支持ECN
如果你开始在你的网络上标记数据包
而不是丢弃他们你会让你的用户更开心
对在做的开发者的一句话
是IPv6现在对于很多网络运营商在很多网络上是主流的通信方式
在你的应用程序中支持IPv6
在你的服务器上支持IPv6和IPv4
对于你的文本UTF-8是新的ASCII
不比ASCII难
用起来实在非常简单
我们现在所有的设备都良好地支持
所有的Unicode字符的文字
这样那就没任何疑虑支持UTF-8了
最后 我们有新方法让你在网络层表达意愿
你可以控制什么时候你不想使用蜂窝流量
你现在也可以更好地控制
数据吞吐量延迟的特性
就是这些了
这里有个链接 你可以找到更多信息
我们有其他讲座你可以观看它的视频
你可能会感兴趣
我们有关于网络和安全的讲座 很重要
我们还有几个其他讲座是关于国际化的
我们有一些讲座关于高层级网络应用程序的 像HomeKit
那就这样吧感谢来到WWDC