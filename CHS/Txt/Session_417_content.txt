调试要诀和技巧
大家下午好欢迎参加“调试要诀和技巧”演讲
看到这么多人来参加这个主题演讲我感到很欣慰
很激动
我叫Kate Stone
我是Apple调试技术核心团队的组长
非常激动
我希望能从我们的团队中请几名工程师
讲一些新鲜事儿如果你刚开始着手的话
还有一些比较新鲜的小技巧
即使你已经在你自己的平台上做了十年的调试工作 你仍然还会觉得新鲜
这真的是个深水区我们有很多内容要讲
让我们开始吧
特别注意我们要讲的技术就是LLDB
若你用Xcode做过调试你可能没注意过
后台有一个叫做LLDB的技术
这是一个底层调试工具支持所有核心技术
不仅仅存在于Xcode中只要你需要 它无处不在
但是 当然了 你跟它打交道最多的地方之一
是Xcode的调试控制台
Xcode把那个控制台作为调试区的一个部分
你将看到可视化的变量同时也会看到这个LLDB控制台
我们今天要讲的内容很多
在那个提示框中你可以获得提示和一些很棒的东西
当然 那个区域通常不只是包含
LLDB的提示框以及与调试器交互
还包含你应用的输出
若是基于控制台的应用 还可以键入
那也许不是最便捷的方式
如果你的应用利用了控制台的其他功能
如移动指针或色彩或其他ANSI指针操作功能
那么 在Xcode 8中有个新选项
允许你给你的应用分配独立终端
而LLDB仍留在Xcode中
用起来很简单 提出了选择方案
并且在最底部的选项标签中你能看到这个新控制台
你可以从默认切换到Xcode和终端
然后 当你运行时你将得到一个独立终端
用于处理应用的输入和输出与Xcode是分离的
接下来的演讲 我们主要讲LLDB
若你对Xcode其它具体功能感兴趣
请查看这两场演讲的相关信息
当然 演讲已结束但是你们可以看一下视频
你还要注意 LLDB不只是Xcode的一部分
而Swift REPL其实就是LLDB
当你打开Swift REPL并开始跟它交互时
你就已经在调试环境中了
因此 无论什么时候你需要调试器它都在那儿
事实上 我们今天要讲的每个命令
你都能在REPL中直接使用
只需要在REPL的提示框中加个冒号前缀即可
先是冒号 然后是命令 这样就能直接在LLDB中发出命令了
比如我现在Swift REPL提示框
此刻 我想查找某类型的信息
当然 我可以打开Xcode并查看帮助
但是在提示框中
我可以简单地使用：type lookup Comparable
我要查找这个协议 我发现事实上
它是从另一个协议衍生出来的添加了以下四个函数
如果你熟悉并且一直在使用类型查找它是个很棒的功能
但你可能不会注意这一点尽管它的名字是类型查找
它实际上可以用来查找更多的东西
实际上我可以查找函数得到完整的签名
甚至可以查找整个模块
当然了 内容会很多
因为它是那个模块中每个类型的完整说明
在这里 我们把它简化了
那么 REPL可以很好地处理这种附加的命令
还可以用来与你在REPL中写的代码进行交互
假如我写一个简单的函数
我写好了一个函数当我在函数中时 我想停止
查看某一行正在发生什么
那么我可以发布断点命令
加一个冒号前缀 ：b 2
我在第二行设置了一个断点
当我调用这个函数时 正如我所期待的那样停止了
因为执行已经停止了它会立即切回LLDB提示框
在LLDB提示框中
我可以发布其他LLDB命令进行交互并探测我的应用
REPL还将自动进行这些操作如果你遇到溢出的情况
或一般会终止你应用的其他东西
所以 你可以直接从Swift REPL中
利用调试器的全部功能
你还要注意 你可以随时在两个提示框之间切换
如果你在REPL提示框中
只写一个冒号 然后按Enter将打开LLDB提示框
而REPL命令将切回REPL提示框
这样 你可以随时使用这两个提示框
REPL有一些不同的特点
可能更适用于调试Swift代码时
的调试会话中
这很棒
这是大多数人跟LLDB互动的主要方式
但LLDB还是个独立的命令行工具
如果我要远程连接到一台机器的命令窗口 很奇妙
我的连接很慢
我非常想利用命令行工具
但在其它环境下也很有用
你可能想用它来 比如说如果你正在自动化调试任务
我想把调试器设置成每次开启时加载的命令都一样
所以我可能要提供
一个包含一大堆LLDB命令的文件用于进行配置
LLDB -- source后边跟一个文件名
这将调用LLDB并source所有命令
按照我想要的方式设置调试会话
如果你不想陷入设置文件的麻烦中
你可以调用LLDB然后直接在命令行上写命令
-one-line接着是命令
只要我启动LLDB 就会发出命令
如果我想附加命令
我可以在这里重复option的简化形式
-o后边跟着另一个命令可以重复无数次
所以 在自动化脚本中把LLDB设置成
我所期待的方式非常琐碎
当然 这也非常有价值
如果我有一个应用只有百分之一的错误率
是一个竟用条件我想一次次地运行同样的调试顺序
我也有个特殊选项可以实现
LLDB -- batch启动批处理模式
那将执行我提供的指令从单行命令或从文件中获得
并且假设我的应用正常运行然后正常退出
如果应用崩溃
它会在LLDB提示框中停止我可以查找问题所在
当然 我可以用其他窗口命令把它打包
无限重复那一系列动作
或者至少直到应用崩溃并且我也准备好调查问题了
LLDB有大量的选项
如果你之前没有看过LLDB -- help
我建议你看一看 帮助文档中描述了这些选项以及更多的内容
我要在这里介绍一个非常有趣的概念
这可能是整场演讲中最无关紧要的事了
那么 如果你打算忘记某张幻灯片请从这张开始
因为它大部分是透明的你可能没注意到效果
我还想要介绍一些微妙的地方
从Xcode 8开始
LLDB已经从Xcode的程序中完全分离
它对你完全透明
你按照你一般的调试方式开始调试
支持多个不同的调试器版本
它会自动为你选择
因此 如果我要调试Swift 3我会得到最新的调试器
有我们在这场演讲中介绍的所有功能
其实若我使用纯C++或Objective C 也是一样的
我会得到最新的调试器拥有我们在这里讲的所有功能
另一方面如果我调试Swift 2.3
我将得到一个调试器
其实是跟我们今年早些时候发布Xcode 7.3.1时一起发布的
意思是 有些新命令不可用
但我们支持自Swift编译器时代的全部调试器
但最重要的是
如果你是我们开源社区中的一员
你可以使用调试器进行调试
该调试器与你正使用的开源Swift匹配
因此 如果你下载正在开发中的快照
或如果你开始添加代码
那么调试器会立即可用
你可以使用那个
同时调试在Swift 3或Swift 2.3中写的程序
一切都是完全透明的
有一个额外的好处：
如果LLDB陷入了一个不能继续的情况
它需要关闭调试会话
调试会话将会被终止
LLDB可以优雅地退出而Xcode将继续运行
说起如何利用LLDB这个强大的工具
以及如何自定义你的体验我要邀请我们的一位工程师上台
Enrico Granata
谢谢Kate 大家好
对于LLDB我最看好的是调试器的定制性
开启调试器定制技术不仅能收获很大的乐趣
还能让你在调试应用的过程中
获得令人惊叹的效率
LLDB提供许多切入点你可以进行自定义
你可以从命令别名开始
然后以你的方式定制命令或定制数据格式化程序
在Xcode 8中我们有一个新的扩展点
阶梯效应
考虑阶梯效应的方式是你想让下一行命令做什么？
你想让阶梯命令做什么？
但你是否发现你自己想要以一种或两种方式随处
调整它的行为？
通过阶梯效应 你全部可以实现
但使LLDB...自定义LLDB满足你需求的最简单方式
是创建一个命令别名
这种方式需要取一段你频繁使用的
调试器语句
并给它附上一段短语句
现在 在Xcode 8中你还可以附上帮助文本
这样可以达到你自己的或跟你一起分享
那些别名的人目的
可以帮你记住别名是干什么用的
让我们来看个例子
首先 要创建别名从command alias命令起
然后 正如我刚说过的你可以附上帮助文本
你提供给我们一段短语句
然后给我们一个你想要替换的完整的调试器命令
shell现在就是个正常的调试器命令
跟我们内建的其他命令一样
你可以 比如 help shell
它会显示那些你定义的帮助文本
在这些情况下 调试变得有些粗糙
你可能在查找漏洞时忘记你自己是谁
你可以要求调试器提醒你的身份
它会像这样通知你 我是Enrico
这很棒 但如果你想做一些更高级的事儿
而不仅仅是给现有命令附上一个新名称
我们还公布了一Python API
这是一个有相当广泛选项的模型
可以让你按照你的意愿绑定调试器
相当容易上手
我们在之前的WWDC演讲中曾详细阐述过这个工具
你可以看一下在线视频
我们有个网站 里面有文档和示例
你可以在线搜索一下
有一个社区在LLDB脚本处理方面
做得很棒
让我们快速地看一个例子
假如 我想要一个命令可以让我检索
调试时退出的最后一个函数的返回值
这里有一些注意事项
这个命令只有在你执行完函数并且之后不再执行任何
阶梯效应后才起作用
你可以键入表达式你可以查看变量
只要不单步跳过就没问题
让我们快速看一个例子
你导入一个包含那个命令的文件
然后 正如我所说的执行完函数
就能看到返回值
好的 很棒
这是默认的 不需要自定义
但是 比如说 如果我键入回溯
这是个冗余的回溯
现在 我不记得返回值在哪儿了
好的 我会进入终端尝试把它挖掘出来
但是很幸运
我们实际上可以写一个命令告诉我们答案
从而再次得到返回值
这就是再次得到返回值要做的所有工作
另外 不要再担心读取那个值了
它会一直在那儿
另一方面 你看到那是个文本
现在你可以键入你的别名shell键入文本
你会发现你自己键入这些内容
是因为每次你开始调试时它们都很棒
你会一次一次再一次地键入它们
直到你变成一只会打字的猴子你要做的就是键入这些内容
不 我要说不
我要说不要再让你自己重复键入了
完全没必要
LLDB有一个初始化文件
叫做.llbdinit就在你的主文件夹中
如果你需要LLDB做一些特别的事一些不同的事
在Xcode下启动或终端下启动时
有一个.llbdinit -Xcode文件
当在Xcode下的调试器中启动时很好用
还有一个诀窍
如果你需要在调试器启动时带有Python命令
请不要把它们键入.llbdinit中
而是要把它们放在一个.py文件中然后source该.py文件
在.llbdinit中导入命令脚本
如果你们用过LLDB
你很可能非常熟悉p和po命令
这些是很不错的命令
可以查找数据因为它们是完全表达式
它们有你编写应用所使用的语言的全部功能
你可以在调试器控制台上使用
另外 强大的功能伴随着重大的责任
这些命令在你的目标进程中运行代码
它们可能会导致一些副作用
有时候 几乎不可能
在你当前停止的点上运行代码
如果p运行了一次代码那么po实际上将运行两次代码
因为它不仅会评估你提供的表达式
还会评估代码
以便以一种作者可定制的方式
打印你的自定义类型
这种方式很棒 如果作者给他们的类型完全按照你想要的方式
定制了显示
如果你没那么幸运
p命令提供另一种变量视角
可能更接近你想要的
同时po是一个运行两次的命令
在编码你的目标进程时也很可能会产生副作用
如果你担心这个问题
我们有另一个查看变量的命令frame variable
这是个可预见的命令它不会运行任何代码
另一方面
因为它没有运行代码的能力
它提供的语句也极其有限
现在有很多方法可以查看数据
但是剧透一下 在Xcode 8中我们有更多方式来实现
有两种新方式分别是parray和poarray
是的 你说对了 听起来像p和po
但它们可以专门处理数组
它们如何专门处理数组？
嗯
如果你在Objective C或Swift数组中用过NS数组
你习惯于安全容器该容器知道包含了多少东西
C指针并不能了解这个信息
C指针并不包含某种电量模块
它们不知道要指向多少元素
那么 当我们像在这个调试器中打印C指针时
我们所能了解的只是指针的值
但现在我们知道它指向一群元素
所以我们可以开始打印第一个
打印第二个
继续依次打印 现在我们又变成那只打字的小猴子了
我们并不想这样
嗯
在Xcode 8中 你可以这样处理parray 元素个数 指针
这会扩展指针
就像指定元素个数的一个数组一样
谢谢 谢谢
这个方案已经很好了 但我为什么要猜测元素个数呢？
它就在那儿 个数就在那儿
我真正想要的是能键入parray个数 数据集
几乎就要实现了
我要做的就是把count放在倒引号中
那个倒引号是个常用的LLDB语法功能
可以让你取出表达式并进行评估
然后在执行命令之前 在命令中替换那个表达式的值
现在 我已经显示出了完整的数组
谢谢大家
而po也一样
poarray 元素个数
指针 然后我得到了po式的对象描述
在po的话题上
我确定你们可以写Objective C代码
我确定有不少人
就是那样实现的很可能没有认真思考过
你取出po 键入po
接着是一个数字恰巧你知道是个指针值
然后你取回一个非常漂亮的描述
你在Swift中尝试做同样的事你取回的只是个数字
为什么？怎么回事？
嗯 我确定你不止一次听过这样的事
但我再说一次
Swift是一种比Objective C类型更安全的语言
我们不能假设数字是任意对象
因为并不是所有的Swift对象都关联着一个指针值
那么当我们po一个数字时我们会得到数字
好的 这很棒 但拜托我知道那儿有个对象
刚刚已经显示出来了
有一种方式可以实现
就是这个
看起来有很多词 我知道
但它实际上...听我讲
expr -O的意思是po
如果你在LLDB控制台中键入help po
它将告诉你那是expr -O的一个别名
那么我们实际上在这里键入的是
po这个东西 就像我们在Objective C代码中做的那样
这样 我们实际上会得到我们想要的描述
这很棒
在一个实际检验内存地址相关的主题上
并尝试搞清楚它们的
底层调试
关于底层调试如果你只记得一件事
那就是离它越远越好
不要碰底层调试
很不幸的是 有时候你必须得碰
也许你要调试只存在于你应用发布版本中
优化代码的东西
我有时候会遇到这种情况
或者你要调试第三方代码而你没有任何调试信息
如果出现以上任意一种情况
那么请听我讲 在这段旅程中我们将穿越赫丘利斯之柱
但请注意 在这段旅程中如要前行 风险自担
就像这样开始
去年 有一位先生来到我的实验室
拿着他的笔记本电脑让我看那种状态下的Xcode
在Objc msgSend中崩溃了
他给我讲了一个故事
我在商店中有个应用很棒
然后 我的框架供应商对我说
“嘿 我的框架有新版本了更新一下吧 没问题的 ”
我就更新了 我听了他的话然后现在 我的应用一启动就崩溃
我该怎么做 请帮帮我
然后 我们坐下来 我告诉他说“嗯 我们几乎都不了解情况
但有一件事我们可以做...就是开始读取机器寄存器”
LLDB有一个功能可以实现读取寄存器
它允许你查看所有寄存器其中只有一小部分寄存器
甚至会允许你进行自定义格式化
它是什么样的呢？
键入register read
你将得到你的寄存器的值
这里有很多寄存器
那么 我为什么要关心屏幕上所有这些怪异的数字和文字呢？
嗯 你一定要关心
因为参数通常是在寄存器中进行传递的
好的 很好玩儿但寄存器也太多了
我如何了解实际上哪个比较重要呢？
这个问题要问你平台应用的二进制ABI接口
：convention会提供一些规则
但LLDB还提供
便捷的伪寄存器的命名像$arg1 $arg2等等
适用于参数为简单计数器的情况
或指针类型
实际上寄存器和参数是一一对应的
在C阵营表达式中也有类似的便捷方式
比如说
如果我有个函数读取这三个参数然后我调用函数
这些参数实际上将一对一映射为$arg1 $arg2和$arg3
好的 这符合我们的情况
在Objc msgSend中我们开始读取参数
第一个参数是指针 0 X 4 D 2
第二个参数是选择器符字符紧接着一个附加字符
我们恰巧知道ObjcmsgSends的第一个参数
是我们尝试与对象进行通讯的参数
第二个参数是我们尝试要发送的选择符
且我们还可使用memory read命令
来查看我们要通讯的那个对象到底怎么了
原来那是个不好的对象
实际情况是
我们在一个坏的对象上调用这个选择符
我们是如何变成这样的呢？
嗯 在Objc msgSend中崩溃了
有东西调用了Objc msgSend有东西调用了那个调用Objc msgSend的东西
以此类推
直到我们到达应用的切入点
在LLDB中 我们从最小的框架0开始调用
一直到最大的框架N
并且 如果你想移动到某个框架
你可以使用up命令
返回到堆栈上的一个编号较大的框架
down命令可以返回到编号较小的框架
另一个需要了解的是disassemble命令
可以让你反汇编一个函数
你可以用在当前函数、任意框架、
地址、函数名称上
你可以自定义反汇编的显示方式
在某些情况下 它会在有源代码
和调试信息的地方执行调试
但如果你想比较这些指令和机器指令
你还可以让LLDB总是随着源代码一起显示反汇编
那么在我们的例子中
我们在那儿崩溃了 我们可以看到谁调用了函数
是一个启动完成的应用
让我们快速看一眼那个函数正在做什么
那个函数正在调用这个初始化程序
框架供应商告诉我们 “是的编码那个初始化程序getGlobalToken”
它正在来回来去地填充东西
然后调用Objc msgSend我们就崩溃了
那么我们可以单步跳过机器编码并查看这些调用实际上是在做什么
首先 我们单步跳过getGlobalToken调用
然后我要做个弊
我恰巧知道寄存器叫做rax
包含那个函数的返回值
若我读取这个函数返回值
我只能得到不正确的指针值
有意思
让我们再做几次单步跳过
不 并没有修改它 并没有修改它
我们正在做的是取出那个指针值不做任何修改
并把它移动到rdi中
然后调用Objc msgSend
我在想是否关联？
如果我在这时候在进入Objc msgSend之前
reg read $arg1
rdi是不正确的指针值
我们证明了什么呢？
我们证明了getGlobalToken函数
就是我们的框架供应商非常激动地让我们调用的函数
实际上给我们返回了一个不正确的对象
一尝试给那个不正确的对象发送消息
就会收到一个大惊喜我们的应用就会崩溃
最后验证了我们的情况后
轻轻拍了拍我们的背
接着有请Sean Callanan上台
他会讲解表达式解析器相关的新特性 谢谢
不觉得神奇吗？
感觉像魔术一样
你的程序只是把数据以数字、数字数组
的方式进行存储
但你可以用LLDB这个强大的工具
以你想要的方式来表现数据
有时候
并不是只看数字和判断是什么数据
那么容易
有时候你需要使用表达式解析器
Enrico已经展示了
表达式解析器在一般情况下的命令语句
但是它还有好多功能
表达式解析器的工作是跟你的程序和SDK一起运行
在你当前的断点上
表达式解析器通过变形数据来得到你想要
实际检测的数据
我说过程序和SDK是一起运行的
回忆一下前几年的情况SDK在LLDB中运行
并不总是那么容易
那么比如说 如果你在Objective C程序上断点了
你尝试获取程序的撤销管理器
你很可能会得到至少一次或两次烦人的报错
这跟你正在尝试做的完全无关
真是莫名其妙
但是去年我们就讲了一个解决方式
如果你手动导入AppKit
那么你的表达式就能起作用了
好吧 但是我们为什么要这么做呢？它已经在那儿了
我都能听见你在哀嚎
并非只有你一个人遇到这种情况
因此今年我们考虑如何使这个方式变得更好
效果非常明显
我们查看了当前源文件导入的那个模块
然后就自动导入
不再需要手动导入了
很酷
我们可以更有效地摆脱手动实现方式
非常棒 但我们认为这是一个很强大的工具
让我来讲一下这个工具的一些不错的功能
现在 有时候 这种便捷可能会阻碍你的开发
你实际上想手动地导入你想要的东西
有个功能可以实现
有一个设置你可以禁用自动导入功能
然后你就能使用去年的老功能了
我们认为你一定会喜欢上这个功能它的默认状态为开启
很好
现在 让我们谈谈如何通过重用代码
有效地使用表达式解析器
重用代码最简单的情况是重用变量
请记住 我说过你可能需要做多级表达式
从你当前位置获得你实际想要的数据
在Swift中 你可以执行像定义和使用
临时变量那么简单的操作
这就能解决问题 就像你在你自己的程序中键入一样
现在 可能会超出你想象的是如果你再次使用它 会发生什么
那么我们会问变量名称是什么？
嗯 实际上我们刻意让它这样工作
原因是你可能会单步跳过
你可能会在不同的地方设置断点
也许稍后 你会位于一个程序定义A的地方
我们希望作为临时变量的A给你带来阻碍吗？
很可能不希望但有一个解决方法
我们可以设置一个功能可见性
确保你的变量不会像那样消失
实际上我们会设置一个本地环境
就像你在程序中添加了一对大括号
把let A放在大括号中然后是打印
但是如果你想让A起作用
你要做的就是给它一个专用名称
一个名称外加$符号
意思是 它将永远不会跟你自己的程序名称冲突
这意味着只要你的调试会话存在它就会存在
了不起
你还可以用这个工具做什么？可以做很多
在Swift中自LLDB和Swift发布的第一天起
你就可以用函数来解决同样的问题
现在 当你解决问题时
你很可能想要使用多行表达式模式
事实上 如果你键入表达式命令并按下Enter键
你会立即打开一个多行编辑器
你可以键入你自己的函数
如果你定义你的函数
你就可以简便地重用这个函数请不要忘了$符号
若你们曾在Swift中尝试过这样做并且说过“太棒了！”
你可能在Objective C中也尝试过了
效果并没那么好
这里不允许函数定义
“不是吧 LLDB那东西总是会妨碍我 ”
好吧 嗯 看起来我们也喜欢这个功能
我们认为这功能很不错我们想让它变得更好
但我们不能让它变得那么神奇
因为 你记得吧我们在你的代码中停止了
我们想表现得像在你的函数内一样
如果你在Swift中你可以定义余下的函数
没什么大不了的编译器会喜欢的
它不喜欢$符号你可以去掉它
但余下的就没什么问题了
这完全合法
但是在C、C++和Objective C中
尝试像那样处理余下的函数
没有用 编译器会对你咆哮的
嗯 避免方式是使用顶层表达式模式
是expression命令的一个扩展
可以使它完全脱离
你停止的那个当前函数
并定义全局代码
可以是函数或变量或其他你想要的
现在 你可以定义函数并按照你期待的方式使用函数
好的
现在 函数不是你可以定义的唯一能重用的东西
我已经讲过变量了你还可以定义闭包
闭包是变量和代码的一种合并
在Swift中 你可定义一个闭包
并使用它
今年 Xcode有了新特性
你可在Objective C中实现同样的功能
你可以定义和重用块
如果你是C++的铁杆粉丝
你可以用匿名函数实现完全一样的功能
现在
你可以用这些块做什么呢？它们有什么特殊作用呢？
嗯 比如说你可以把它们传给函数
有时候你可能需要在指定队列上手动运行某些东西
那样是可以的
你可以把素材发送给比如说 一个全局队列
块就会运行
现在
有时候有点儿烦人
因为这些复杂的表达式会增加错别字的出现频率
现在 不同的是
速度很快 不用回头看之前的代码
在这个表达式和之前代码中的表达式？
你很可能会错过它
但编译器一定不会错过它
如果丢了分号编译器会对你咆哮
但还有个更好的方式
如果你在源编辑器中键入我们会告诉你
“这里很可能丢失了一个分号你想加上它吗？”
嗯 看起来LLDB可以实现同样的功能
并且我们可以做得更好
只需要自动添加遗失的分号
然后就能运行表达式了
我们管这个叫做修订
以前是在Clang中使用现在LLDB也可以实现同样的功能了
Swift中也有修订
在Swift中 你不太可能会遇到分号问题
但是同志们 那些感叹号很烦人
是的 嗯 它们很有用 因为它们在你自己的代码中
当你调试时 帮助你理解它
你只是希望它们不要阻碍你
相信我 我们也是这么想的
如果你尝试使用一些没有解包的东西
我们就会应用修订并为你解包
现在 可能会有一两个人
说“我不希望调试器碰我的代码 ”
现在
对于这些人 我也有过这样的顾虑
我们有设置
可以关闭整个自动应用修订功能
如果你不喜欢调试器自鸣得意地指出
你代码中的每一个小错误并为你修改好
那么你也可以关闭那部分功能
好的
谢谢
好了
很好 这是个不错的便捷功能
但是我还要提另一个
你能定义为可重用的东西
你可以在Swift中定义你自己的类型
比如说你可以输入多行表达式
定义一个类
当你尝试实例化那个类时
它就是这样
就像你已经在程序中定义过的类一样
在C++中也一样 你可以定义一个类并重用它
现在让我们来看个例子
我们可以在你自己的程序中使用所有这些概念
通常尤其是当你的程序与web API交互时
你会得到返回的许多数据你想要筛选数据
尤其是当你正在调试时
筛选数据的方式尤其是在NS数组中
是通过定义一个判断实现的
现在 在表达式分析器中你可以定义自定义判断
在这种情况下 我们写一个块
从web服务器取出结果字符串
进行筛选 查找有文本错误的字符串
很可能有利于调试
现在 如果你只从web服务器取出完整数据的数组
然后就应用判断
你可以立即获得你实际关心的消息
现在你已经了解表达式分析器是如何强大了
接着有请Jim Ingham上台
他会给你们讲LLDB更强大的特性
谢谢 Sean
目前我们已经按先后顺序
讲了如何当你停止后
查看程序状态 但我们还没讲
如何得到这样一个有趣的点
这是我要跟你们讲的内容
当然 断点是停止程序的一种顺其自然的方式
那么 我想谈谈你们觉得断点就是自然而然地
在我设置断点的地方停止我的程序
但这并不是它们的实现方式LLDB也不是这么认为的
对于LLDB来说断点其实是一个搜索
在你的程序空间中寻找这些有趣的位置以便停止
事实证明也许是很多不同的搜索
因此 断点其实是搜索条件
你停止的个别位置
就是你认为的那个自然而然的断点
我们叫做断点位置
让我们具体讲一下 我要把这个连到Xcode的断点
因为不管怎样 当使用LLDB调试时Xcode都在幕后
所以 Xcode断点必须都得是LLDB断点
那么比如说 当你在Xcode中点击源边列时
你实际正在做的是在LLDB中运行这条命令
有些断点设置命令
类似地 当你做符号断点时
你正在运行一个按名称设置的断点
那么我想让你们有一点概念就是这些实际上是搜索
我要演示一些例子
从而你可以自然而然地得到多种结果
虽然以前你觉得只是一个单一的断点设置
那么 第一个例子是符号断点
这是一个只在主函数上设置断点的例子
这应该很简单 对吧？
但是稍后它会告诉你“不 我有19个位置 ”
为什么最终会得到19个呢？
执行break list命令是不是查看断点设置的结果
你看到的是断点名称搜索
实际上是一个不精确的名称匹配搜索
那么比如说 它在一个类中选取了选择器名称
在很多情况下这样的确很方便
因为就像你在C++中调试时你有命名空间、
命名空间内部、类、方法
你并不想键入整条路径
另一方面 也确实意味着
搜索也许比你想要的范围更广
我们提供很多不同类型的搜索
当然 我们提供更精确的搜索
即全名搜索 强制名称匹配
你指定的符号全名
我们尝试过 但就算那样也不行
因为某些原因某人决定在库内加
一个函数调用主函数不知道为什么 但确实起作用了
因此 你甚至可以指定
通过shlib选项
限制搜索特定的共享库
那么最后 你就得到你想要的断点了
我要再举一个例子 不是因为我认为你们不相信我
而是因为这个例子经常会在Swift中出现
文件和行断点
因为Swift有个不错的功能
就是你调用一个使用闭包
并定义闭包函数的函数
简单地通过用波形号来继续
然后接着是闭包体
但是 如果你尝试在那行设置断点
你就会发现有两个停止的点
为什么会这样？
你观察时 你觉得很简单对吧？
源代码行实际上给闭包函数提供了一些代码
你可以看到 我们在闭包函数上有一个断点位置
但是它也是函数引用的位置
因此还有一个位置是那个引用的位置
那么无论怎么样 就是这样
已经讲了一些例子
我要给你们一个命令的通用格式
然后再继续讲其他功能
断点设置命令是这样的：
键入break set
然后有一些指定类型的选项
这是指定你要进行哪种搜索的选项
是文件和行搜索还是符号名搜索
等等诸如此类？
那个类型选项的值是用于搜索的数据
然后还有其他选项 比如忽略计数条件 等等
这些选项规定的不是指定在哪儿中断
而是规定是不是中断
所以 搜索后是否可以修改
是不能改变的因为我们已经搜索完了
如果你希望这样做的话你只能设置一个新断点来实现
让我们讲讲断点位置相关的事
断点位置就是你要停止的位置
它们是个别的搜索结果
一般都会有地址
是程序要叫停的地址
当你查看它们时它们通过生成断点和位置编号被指定
通过一个点分开
因此 当你在Xcode中调试并且在某个断点上停止时
你注意一下你看一下PC小功能区
PC功能区将在右侧给出停止原因
它总是会给出像2.1这样形式的断点
它从不给出像2这样形式的断点
因为你只能在这些位置上中断
所以是1.1 1.2等等
另外 位置和断点在某种程度上与我讲的其他选项
是对称的
它们都有像命令和条件等那样相同的通用选项
你可在断点上指定任何命令条件
然后它将适用于所有位置
但是你还可以重载特定位置
通过在位置上设置其中一个命令或条件来实现
还有一点好处
很多时候若你有一个生成一批位置的断点
你想得到其中五个或你不想得到其中五个
那么你可以禁用它们你可以分别执行
但是 如果你不想搜索到它们
你想禁用整个断点
你可以通过禁用断点来实现
但看起来并没有改变位置的开启或禁用状态
因此 你只需要再把它打开即可
就会像你所期待的那样改变所有位置的状态
这只是一个小贴士那么现在你已经看到
断点在LLDB中的概念
让我展示一些LLDB提供的
更强大的断点类型
这些仍然是搜索要停止的位置
我们要进行哪种搜索呢？
这正是你程序中的命名空间所感兴趣的
看起来所有命名空间都是黏糊糊的东西
因为它们都像函数名或诸如此类的东西
因为我们总是使用常规表达式作为搜索模式的表达方式
那么如果你知道常规表达式
你一定会觉得它很可爱
如果你不熟悉常规表达式
几年前我就说过
在你的办公室找一个有动物封面书的人
即使现在 如果你想找个前辈
你可以找个有书的人
那么无论如何...
我们提供两种搜索一种显而易见
是搜索程序中的函数名
这是那种搜索的选项
还有一种可能不那么明显
但我希望随着我们更深入地讲解我能说服你 让你觉得那很有意思
就是源文本搜索断点
这就是搜索的选项
让我们先来看第一种
函数名模式跟断点相匹配
我只展示一些例子
假如某人给了你一个新类
你不知道这个类是干什么的你想知道它是如何工作的
那么你想要做的其实是中断那个类实现的所有方法
你可以通过在Xcode中仔细检查源文件来实现
从最开始进行 但很快你会觉得乏味
顺便说一下 你不想在父类或子类这样的类上中断
最好是尝试制定一个常规表达式
匹配给定类中的所有函数
那么在Swift中这是个合适的常规表达式
或在Objective C中这是个合适的常规表达式
然后你要在这些表达式上设置断点
然后你就可以运行程序看看会发生什么
请记住 因为你可以禁用个别位置
当你做这种实验时
你会发现你可能搜索到其中一个你知道它是干什么的 你并不感兴趣
所以你只需要禁用那个位置然后继续
发现第二个 禁用然后继续 以此类推
那么这是一种探索新代码的不错的方式
更高级的版本是
某人给你一个共享库
你想看看它在运行时到底有什么功能
然后设置一个常规表达式断点我在这里用的是简化的-r形式
常规表达式匹配一切
用.*实现
然后把它限制在你感兴趣的那个库
把这些和断点命令相结合
通常是一种很好的方式
以便又迅速又随性地获得这个库的执行轨迹
你可以向后追踪 也许会打印局部
然后继续 你只需要运行程序
并且得到那个库的执行磁带输出即可
当然了 在执行过程中速度会慢下来但值得等待
然后另一个小技巧是
如果你找到你并不感兴趣的你可以禁用它们
那么让我们谈谈另一种匹配模式吧
这里的重点是有一些构造函数
当你查看源文本时非常明显
但如何在生成的代码中得到那些构造函数
真的很不明显
其中一个例子是宏
通常在你的程序中替代文本
然后它就悄悄消失了但你知道
它们插在代码的哪个位置因为它们是大写字母
那么想要搜索到它们也许需要搜索全部大写字母
或你所关注的特定的宏
但是你可以更有创造力
比如说 我想了解指针
指定字段的位置
很明显是在源文本中
因为看起来就像是那样
但在生成的代码中寻找这些位置可能会很困难
因此还有另一个实例在源文本中使用模式匹配
可以允许你发现你用其他方式发现不了的构造函数
另一种使用方法是
做主题分组
你可以在上边设置断点
通过插入手动模式到你的源代码
就像注释里说的中断这里或中断那里
如果你有兴趣检测
程序功能中的这个特定的部分
然后使用这些源常规表达式断点
来捕捉它
那么这就是源断点的工作原理
选项是源常规表达式
为搜索提供的数据是模式
然后你可以把它限定在一个文件中
你可以通过多次给出-f选项限定在多个文件中
并且还有一个标志可以搜索全部源文件
让我举个例子来吊你的胃口
假如我有个复杂的函数比如状态机
是计算用的然后从许多不同的地方返回
在某些恐怖的超长的选择语句中或其他类似的选择语句中
我想找到什么时候会返回空
但我想了解返回空时
的具体情况
很难实现
因为你可以在函数返回后中断
并查看是否为空
你可以点击所有返回空的位置
但你可能会遗漏其中一个或你只关注模式
这里有另外一个便捷方式
在源常规表达式断点类型中
你不仅可以指定一个文件
你还可以把它限定在一个特定的函数中
如果那样的话我要做这样的操作
中断要返回的模式
我正在展示我会用常规表达式因为我正在炫耀
空格+星号代表任意数量的空格
然后空指针
我把它限定在一个函数中且限定在我感兴趣的一个文件中
然后我会发现在这个特定的用法中
我精确地找到了返回空的位置
那么值得谈一些额外的断点选项
你可能没听说过
其中一个类似逐行或筛选
很有用 因为我们程序中同时存在Swift和Objective C
可以给指定的一种语言设置断点
那么比如说 随处都有计数方法
如果你在计数上设置一个断点
你将在Swift代码中得到一批断点
你也会得到一批Objective C方法的断点
但你并不关心Objective C方法
你只想查看Swift代码
然后你可以指定语言为Swift
它将不会在 Objective C名称上执行恰巧匹配的断点
这很有用
是的 对
另一个有用的选项
能使搜索缩小到一个指定的线程
假如你有一些能调用的代码和一批不同的线程
就像内核或诸如此类的
但当你开始执行一个线程时
你不想让用于检测的断点
把你带到其他线程上去 很简单
有一个线程ID选项
这个选项可以让你按照线程名执行
可以通过调用pthread_setname_np设置
这很方便 因为如果你命名一个线程
然后保留在多个调试会话中
线程ID当然会随时变更
你甚至可以限制它
按照名称对指定队列进行编码
还有一点你可能会注意到
就是你可以把全部选项添加到现有断点上
特别有用
如果你已经在Xcode的边列中设置了文件和行断点的话
比如说 你决定你想限定到一个指定线程
你可以在查询后进行变更命令是break modify
另一件有用的事是展示如何指定它们
因为你可以通过断点指定
通过断点位置编号指定
还有一个小语句来指定范围
就是这样
那么现在 你得到了你想要的所有断点
但你遇到了绊脚石
就是目前Xcode看起来
只保留了它已知的你设置的断点
而那些你想方设法手动写入的断点它并不了解
那么如何保留那些断点呢？
第一种方法是Enrico讲过的：
如果你想把它保留在所有对象中
你只需要把它放在LLDB初始化文件中即可
但是如果你想指定对象有一个小技巧你可以使用
当你每次调试那个指定对象时加载断点
这其实是做一个Xcode存储的断点
最好是在程序执行中早期断开的断点
然后你把你的断点和命令放在那个断点中
这样你就知道如果是主可执行文件
比如说 主函数是个快速接口
那么你可以做一个符号断点
然后把主函数放进去
然后你还记得刚才那张幻灯片吧
我说过有个主函数的小麻烦
那么你可以指定共享库
然后你可以添加动作是个调试器命令动作
然后不要一个一个地键入所有断点
因为会很乏味
把命令放在一个文件中很方便
然后使用LLDB的commandsource命令来加载这些断点
最后 如果你自动继续
每次你运行时 你都将自动获得
所有那些断点集
我还想讲另一个便捷方式
用来克服
你在现代语言中常见的一种特定的烦人的麻烦
就是当你尝试单步跳入某个东西时
问题是在大部分现代语言中
大多数变量存取现在都是通过属性完成的
或通过存取子函数或诸如此类
所以...
一般来说 这并不是你尝试要调试的代码
最后导致了这样一个情况
我在这儿 我尝试进入这个函数完成某些功能
我想进入那里
所以我尝试单步跳入但并没有成功
因为我正在传递的一个参数
是存取子函数所以我在那个存取器中中断了
我并不想在那儿中断因为那一点儿都没有意义
因此我要做的是完成并返回
是不是有一种方式可以让这个过程变得更简单？
看起来我们添加了一个叫做定向单步跳入的东西
选项是step_in_target表示你要单步跳入
我要做的是单步跳入
但我只想让你在这个指定的地方中断
就是你正在用这个表达的意思
让我们在这种情况中尝试一下
我们发现它几乎不怎么工作
不怎么工作的原因是
虽然我们没有在存取器中中断
但是我们却在下一个源文件上中断了而不是在函数中中断
这是有道理的
因为实际上单步跳入是按照源代码逐行执行的
这就是多行调用
那么我们也要通过给出
结束行的编号添加能指定
单步跳入的终止范围
或更方便的是只进入这个块
让我进入 做一些操作
甚至还有一个别名即函数中的sif单步跳入
那么 你要做的就是坐在这里并在函数中键入step
然后你就会着陆在正确的位置
若你没着陆在正确的位置我就不会把它放在幻灯片中讲了
最后我想讲一下排错
你需要了解的一个信息是
运行程序中到底有什么
比如 也许我创建了发布版本和调试版本
我想了解我实际使用的是哪个版本
或某人给了我一个带dSYM的库
这个dSYM允许读入吗？
那么 需要那种信息的命令
是image list命令
你可以给它一个模块名这样它将给出
关于加载到你程序中某个模块的信息
或者为了消遣你可以不提供任何选项
将会显示全部有时候多得令人震惊
那么 这里有个例子让我们看看如何使用它
我键入image list
我看到这里有个二进制映像的路径
那么假如 如果我想查看我是否使用的是调试版本
是的 看起来我的确像是用的调试版本
如果有dSYM的话 它总是会在二进制映像后列出来
此情况下我看到我的确得到了二进制映像
我想告诉你一个Swift调试的信息
我这张幻灯片上的内容实际上并不是我要讲的内容
因为我们时间很紧
但我会告诉你TLDR
因为我讲得太快 你可能读不完
由于Swift和LLDB之间的工作方式
所有带调试信息的Swift代码
都必须在本地创建
因此 从其他人那儿拷贝二进制映像是行不通的
你要确保一切都是在本地创建的
并且有编译器
随着你正在使用的调试器一起运行
我想说的是 这是我们提供的一个小便利
那么 Enrico讲的优化代码优化的规则
我们之前听到如果不是不得不做的话 就不要做
由于大部分软件开发者都是理性的人
你可以写一个推论
调试优化代码的绝大多数人实际上都不是故意执行的
那么现在当你中断在文件中时
 LLDB将告诉你那个文件被优化了
每个库只通知一次你将得到一条像这样的消息
然后你快速进入设置把它们改回来
刚刚添加到Clang中的另一个新功能
是这个模块概念
模块是允许编译器
查看你程序标头环境中的所有标头的方式
编译并解析它们
然后在所有编译器中重用
然后我们想为什么我们不能对调试信息
做同样的事呢？
为什么不能允许类型信息的解析形式
也一次性完成然后
在所有带调试信息.o文件中共享呢？
这叫做Clang模式调试功能
此外 我们还可以使用PCH文件
Xcode中的设置是Clang模块调试
这是由于某种原因我放进去的标志
这很棒 因为就像编译器一样
提高了调试信息的生成速度
它将缩短编译时间但它有一个警告
那个警告实际上可能是个重要警告
那么 那个警告是你的调试不仅依赖于.o文件
还依赖于内存中的某些东西
因此 一般来说 那不是个问题每个东西都在自己的位置上
但当你要给某人发布库或应用时
该怎么工作呢？嗯 如果是应用或框架
你只需要运行dsymutil即可
效果是一样的 它把一切都集合起来一切都能正常运行
但请记住dsymutil只在关联产品上运行
并不在.o文件上运行
因此 若你发布的是带调试信息的静态库
那么你必须关闭这个G模块的功能
否则你将会给客户发布已损毁的调试信息
顺便说一下 如果磁盘空间不足
你删除了模块缓存
那么你就不能再调试了
这是那个功能的一个不利因素
那么 让我来总结一下吧
我希望你了解LLDB是个定制化很强的调试器
提供多种查看数据的方式
表达式实际上可以提供更强大的检测功能
我认为Sean的例子很好讲了如何在live状态下
从一个复杂的数组中通过并发现你感兴趣的点
在Xcode中 我们有很多断点类型比你想象的多
你可以把自己陷入超级深的麻烦中
比源代码层的调试还深
总之 希望我们提供了丰富的工具集让你探索自己的代码
这里有一些之前演讲的信息可能涉及你感兴趣的内容
还有一些早些时候的演讲你可能没参加
或参加了 但无论如何我把它们列在幻灯片上了
谢谢大家
希望你们能在仅剩的WWDC期间度过一段美好的时光