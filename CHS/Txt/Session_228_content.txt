窥视3D TOUCH
为了下一个维度的TOUCH增强你的应用
下午好欢迎来到“窥视3D TOUCH”
我是Tyler Fox稍后同事Peter Hajas会加入我
我们都是UIKit团队的工程师
我们今天非常激动地告诉大家
你们该怎样采用3D Touch
来把你应用的用户体验提升到下一个等级
我们今天想以回顾一些
3D Touch基本知识来开始
并向你们演示它如何跨系统穿越
然后我们要谈谈主屏幕快捷操作
主屏幕快捷操作是今天最简单的方法之一
让你可以把3D Touch加入你的应用
它们让用户从主屏幕直接跳到
你的应用中的那些关键活动
然后我们会谈谈Peek和Pop
Peek和Pop是让用户在你的应用中
预览和浏览内容的无缝方式
我们想大部分应用都会从中极为受益
即把Peek和Pop与支持一起加入你的内容中去
最终 我们也很兴奋可以告诉你们大家
关于UIPreviewInteraction的一切这是iOS X中的全新API
允许你为你的应用制作独一无二的3D Touch
这是给你们中的那些想要对3D Touch的交互
进行高级控制的人的
并让你使用与我们为Peek和Pop所磨炼的
同样的压力处理
但请带来你自己的自定义用户界面
这真是太棒了我们等不及要告诉你这一切
让我们开始吧先来谈谈3D Touch
支持3D Touch的设备有一种力量敏感显示器
它可精确测量
屏幕上的触碰压力
现在的iOS一直让用户在用户界面上
直接操作内容
这一直是一个标志
因为原始iPhone是与其
多点触控显示屏一起被引入
但3D Touch更进一步扩展了这一点
允许用户更密切的连接到它们在屏幕上的内容
让我们来看看一些3D Touch
穿越操作系统所用的方法首先是主屏幕
当你按下某个应用图标时
我们就揭示主屏幕快捷操作
正如你在此用相机所看到的这些让你直接跳到
你来执行的每个应用中的
一些关键活动
例如 用相机应用自拍
使用前置摄像头或用后置摄像头
拍张普通的照片
录制视频或慢动作视频
现在iOS X中的新特性如果你的应用提供了一个小工具
它也将在主屏幕快捷操作旁边显示
当用户3D接触你的应用图标时
另外还要注意的是当你按下
每个这样的应用图标时
该设备正在播放触觉反馈
来让你知道你何时达到阈值
快速行动将在何处弹开
现在让我们来看看消息
从而来看看Peek和Pop的一个例子
在信息这里你可以看到我在与朋友的对话中
收到了一张照片
如果我开始对那张照片轻轻施加压力
我就可以窥视它来揭露出此内容的大型预览
然后如果我继续施压我会直接弹在那张照片上
这将使它铺满全屏并让我与它交互
就像我按压过它一样
Peek和Pop相当好因为它可以让你
预览内容以及也许改变主意
并释放你的触控而却实际上不必
去按压返回按钮然后再返回
现在这里有一点要注意的是
因为我们为Peek和Pop跨越这两个不同的阈值
该设备再次播放触觉反馈
来让你知道你何时已经达到这两个阈值
这就是Peek和Pop
现在让我们来看看Mail
看看相同的交互中的一些有趣的片段
我希望你能注意到3D Touch充分互动
和中断的能力
我在屏幕上调节
触控压力你会在这里看到
我们使用模糊和缩放效果来让你知道
你可以继续与此内容互动
注意整个交互的流畅性和响应度如何
这是的标志特性中的一个
是它把3D Touch和传统触控
以及基于手势的交互区分开的
所以你可能会想
我为何要在我的应用中支持3D Touch？
3D Touch最好的用途之一就是
是它可以迅速加速访问你的应用已经提供了的
现有功能
你用主屏幕快捷操作就此看到了一个很棒的例子
让用户在你的应用里直接进入那些屏幕
就像深层链接并让它们
直接做出尝试执行的行动
但关于3D Touch另一个真正伟大的的东西
是它使得之前永远不可能的全新的身临其境的交互
变得有可能
稍后当我们向你们展示一个很棒的例子
提及这个新的UIPreviewInteraction API时
最后我们在iOS X的整个系统中都采用了3D Touch
因此用户也希望你们所有的应用都支持它
让我们继续谈谈你如何
从今天就开始通过主屏幕快捷操作
来采用3D Touch
而要做到这一点我想为你介绍AppChat
AppChat是一个示例应用我们一直在努力使它
在我们的应用中
突出一些3D Touch的强大功能
在这里你可以看到3D Touch
对不起 AppChat是一个短消息应用
你可以拍照并作为聊天发送给朋友 在这里你可以
看到我已经从朋友们那里收到一系列不同的聊天
我可以按上其中任何一个并全屏查看聊天记录
就这么简单
AppChat是一个非常令人熟悉的UIKit应用
我们会向你展示为使3D Touch这么做
我们增加支持的不同方式从主屏幕快捷操作开始
所以当你按下AppChat应用图标时
我们将为AppChat揭露一些主屏幕快捷操作
你会注意到我可以选择创建一个新的聊天
它会打开摄像头这样我就可拍张照片
然后从我的朋友中选择一位将其发送
但我也可以选择
这里底部的3种快速行动之一它们是
将让我把聊天直接发送给我的
前三位朋友的快速行动
我在AppChat中交流最多的朋友
所以实际上有两种不同类型的
主屏幕快捷操作
现在让我们来谈谈它们
第一类是静态快捷操作
这些是由你的应用在构建时所规定的
它们对在你的应用中一直可用的
固定操作来说是很棒的
例如用AppChat我们有新聊天快捷操作
我总能创建一个新的聊天
然后将其发送到我的朋友之一
另一方面我们有动态快捷操作
动态快捷操作也是伟大的 因为它们允许你
定制和定做被显示给用户的快速操作
但是让我们首先来看看静态快捷操作
静态快捷操作定义在你的应用的info.plist文件中
因此一旦你的应用
被安装在用户的设备上它们就可用了
现在让我们来看看一个例子
我们如何向AppChat添加一个静态快捷操作
这是我们的info.plist文件你可以看到只用几行代码
我们就能够创建
并添加这个新聊天快捷操作
我想在这里指出几点
你会注意到我们在指定一个类型
这是一个字符串你的应用定义
用户选择这些快速操作之一时稍后你会用哪一个
从而知道如何处理它
在这种情况下我们还提供了一个标题新聊天
以及一个图标类型它是你可以显示的
系统提供的图标之列表中的一个常量
这种情况下 我们就这样得到那个很好的聊天泡泡
要记住一点 任何面对你的信息plist.strings文件中
字符串的用户 你都该使其本地化来作为最佳实践
这就是静态快捷操作我们再来看看
我之前避开谈论的动态快捷操作
因此这些是在运行时由你的应用所定义的
也同时从你的应用提供到系统
其结果就是它们只在用户
最初第一次启动你的应用时是可用的
动态快捷操作
会在任何静态快捷操作之后被显示 在空间允许的前提下
你总共只可显示
四个快速操作在主屏幕上
所以如果你打算确保留有空间
为任何动态快捷操作
你还可以包括一个可选的系统图标 即
使用你的应用中的模板图像而制作的自定义图标
或者你甚至可以根据用户地址簿中的联系人
来创建一个图标
这就是AppChat正在做的用来拉取
那些漂亮的个人资料照片
紧挨着这三个动态快捷操作
排在前三名的朋友们
让我们看看一些代码
来看看我们如何能够实现这一点
那么在这个例子中我们将以寻找一个联系人开始
该联系人应匹配朋友Lexi Torres
我们一定要做到的第一件事情
向用户请求访问联系人通讯录的许可
假设我们有了这个权限我们可以继续前进
并实际查询其联系人通讯录来寻找这位
我们所感兴趣的姓名与这位朋友相匹配的联系人
如果我们能有至少一个匹配那么我们就可以
把该联系人发送给我们的UIApplicationShortcutIcon初始程序
这将继续并创建我们将以此快速操作而使用的图标
但是当然我们可能没有收到访问许可
来访问该用户的联系人通讯录
或者我们可能没有为这个朋友找到匹配
所以我们会希望有一个回退
在这种情况下我们将使用该系统的消息样式
作为图标来显示
现在我们有了这个图标我们就可以去创建
我们实际的快速操作
在这种情况下我们需要指定类型
这与你看待静态开始操作的方法非常相似
除了副标题我们还将用发送一个聊天
然后我们将把所有这些
发送到我们的UIApplicationshortcutItem初始程序
来创建我们第一个动态快捷操作
从此 我们可以继续如此操作并重复无数次
来创建任何额外的快速操作
当我们完成后我们将它们全部打包到
一个漂亮的阵列中去并将其发送到
UIApplicationsShortcutItems属性中去
其效果是
向系统注册这些动态快捷操作
以便它们可以显示在主屏幕上
有一点要记住的是
这个shortcutItems属性只显示你的应用
仅包含你的应用的动态快捷项目
或动态快捷操作
静态快捷操作只规定于
你的info.plist之中而不会被包含在那个阵列之中
让我们来看看所有这一切
回到主屏幕上是什么样子
好极了只需那几行代码
我们能够创建一个静态快捷操作
新聊天以及三个不同的动态快捷操作
我们排名前三朋友中的每个人
然而我们现在还得做一件事
当然就是当用户选择了一个时处理这些快速操作
在此要记住两种不同的场景
第一种是如果你的应用已经在运行
而且正被激活 这意味着你的应用
处于非活动状态或暂停状态
在这种情况下我们将使用回调于
UIApplicationDelegate
performActionForShortcutItem应用
completionHandler
在这里我们将使用shortcutItem 它被引入
实际用于处理此快速操作
这可能意味着很多东西然而它取决于你的应用
以及你有什么快速操作
但总的来说你可能应该把用户移动到
你的应用中的一个特定的屏幕上
如果你处理快速操作你应该确保
调用completion handler传递一个Bool
即它应该表明你是否实际上已经将其处理好了
太好了 这是第一个场景
我们考虑的第二个场景若应用其实是
作为一个快速操作的结果而被启动的
在这种情况下我们的应用并没有运行
在这里我们将在
使用熟悉的didFinishLaunchingWithOptions应用回调
UIApplicationDelegate上
在里面我们将访问launchOptions字典的
shortcutItem key来看看
我们的应用是否通过快速操作而启动的
如果的确如此 那么我们将处理这个快速操作
正如我们以前做过的那样
然后我们将确保用这个方法返回假
告诉系统我们确实在此真正处理了快速操作
而它会阻止调用上一张幻灯片中的方法
这几乎就是所有的一切
就创建和处理动态与静态shortcutItems而言
让我们回顾一些最好的实践来把它们记住
首先每一个应用应该提供快速操作
因为你在这里可以看到它们很容易被创建
而它们可以提供巨大的价值
直接显示在主屏幕 让用户直接
去到你的应用所提供的那些主要活动
因此你要专注于向你的应用所提供的
最高值的任务提供快速访问
记住你只有4个不同的位置
来显示快速操作
所以要明智决定该选择哪些
我们的建议是
当让你的快速操作保持可被预测非常重要时
你可能该考虑使用动态快捷操作
用户将快速打开你的主屏幕快捷操作并选择其一
如果你正在做诸如改变顺序的事情
这可能会使你的用户产生困惑
他们会有一个令人沮丧的体验
这里要记住一件有趣的事情
你应该准备好去处理动态快捷操作
你的应用先前版本
如果你还记得的话
原因是动态快捷操作直到你的应用运行才生效
并有能力把它们提供给系统
所以如果你的应用是近期刚刚更新的
它仍显示动态快捷操作
之前版本的
其结果是如果你的快速操作的语义发生了变化
则在处理时记住这一点会是一个好主意
而要做到这一点 你可能应该
考虑把你的应用的版本号
纳入信息plist 抱歉纳入用户信息字典
可连同动态快捷操作一起纳入
最后
尽量不要添加只可使用快速操作才能访问的功能
请记住并非我们所有的设备都支持3D Touch
即使是那些支持的设备用户也有选项在
系统辅助功能设置中禁用3D Touch
对此我想邀请Peter 上台
给你们大家讲讲Peek和Pop
Peter
来吧
谢谢你 Tyler
我今天真的很高兴能跟大家讲Peek和Pop
正如之前Tyler给大家展示的一样Peek和Pop允许人们
快速预览和浏览你应用中的内容
根据我个人的体验我可以说
它会改变你使用手机的方式
我们讲结合示例应用来谈谈Peek和Pop
示例应用就是指Tyler给你们展示的AppChat
正如Tyler给你们展示的一样在最后一节
AppChat是一个标准的UIKit应用
所以在表格中敲击消息之一
就会把我带到该条消息这样我就可以全屏检查了
把Peek和Pop添加到你应用的一般经验法则
是如果用户能够访问的内容
可被按压来导航
它也应支持Peek和Pop
因此让我们向AppChat应用该规则
这意味着当我对此表中的某个单元格施加压力时
我们应该得到一个快速的Peek
在我们的API中我们称此为预览
因为我们会得到视图控制器预览
而我们可以导航到视图控制器
现在如果我们继续施加压力
那会弹出全屏
我们就可以进行交互
在我们的API中我们称此为提交
因为我们已经提交导航到该视图控制器
好的 让我们看一Peek和Pop
的组件吧
首先且最重要的是我们有已注册View Controller
就是这个视图控制器
包含了用户交互元素的
视图控制器
在我们的例子里 这些是我们的信息表格单元格
每个注册了的视图控制器都有全系列来源
它们是每一个
有自己的视图控制器预览界面元素
在AppChat中 这自然适应我们的聊天表格单元格
最后
我们有被预览了的视图控制器
这是将显示预览内容的视图控制器
此预览代表了我们输入表中的元素
通常在按压此内容后
这和我们要展示的元素相同
按压它
并通过施加压力预览它
向我们展示相同的内容
所以这样的话我要一步一步来讲一下
我们用什么和如何把Peek和Pop添加到AppChat中去
这将密切反映你将如何把Peek和Pop添加到你应用中去
所以在我们注册了的视图控制器开始
记住这就是视图控制器表格
其中包含了我们的演示文稿的源视图
我们要遵循
UIViewControllerPreviewingDelegate协议
此代理将在
Peek和Pop交互中的不同阶段被召回
来将信息提供给该系统
这是相当容易实现的
接下来我们将要确保我们registerForPreviewing
进行此操作的很棒时机是在viewDidLoad中时
我们要registerForPreviewing
并用我们自己做代理
递交我们的表视图作为源视图
因为表视图是我们想预览的
所有接口元素的共同祖先
现在让我们继续并在预览代理协议中实施
两种必要的代理方法
第一种
是用于提供
一个预览视图控制器
提供一个视图控制器
在源视图内的一个特定位置
该方法被称为previewingContext
ViewControllerForLocation
而且它是很容易实施的
首先我们要找到indexPath它代表了
我们通过该代理方法而被递交的点
我们可通过点击测试表视图来如此操作
下一步我们要创建一个视图控制器
使用的模型对象由indexPath所代表
这是你可能已经有了的一种逻辑
并确实在indexPath中选择了行
其次非常重要的一点是
我们要设置
previewingContext的sourceRect
请记住源视图是整个表视图
而我们要确保从屏幕上仅仅突显单元格
用的是Tyler向大家所展示了的
模糊效应和规模效应
通过设置sourceRect系统会适当地
切出该元素然后将其在屏幕上突显
它看起来真的很棒
最后把视图控制器返回到系统中去
现在关于这个代理方法我想为你们指出
两个相当重要的部分
第一个是该方法将在每次
我们认为我们将启动预览时被调用
正如Tyler之前所说的我们希望保持交互快速与流畅
所以我们要伺机将其调用
以确保一切都准备好了
因此使用此方法返回一个视图控制器时
你需要确保一定不要花太多时间
如果你有可以在后台做的异步工作
则在准备此视图控制器之前
在后台做此工作并不要阻塞主队列
这样当我们
向你应用中的界面元素施加压力时
会有快速、流畅和反应灵敏的感觉
我给你们关于此方法的第二个重要建议
是它的返回类型
UIViewControllerOptional
这意味着我们可以返回零值
如果你用这个方法返回零值
我们将不会从屏幕上突显任何单元格
我们将不会做任何模糊处理我们将不会做任何触觉反馈
我们将不会做预览
但是你应该确保
只有当在该位置确实没东西来预览时才返回零值
你应该确保你应用中的外观相似的内容
可以用相似的方式来预览
这样人们就不必为了试图得到一个预览
而挤压手机因为外观相似的东西
将被用相似的方式来预览
太好了
这样我们就已经实现了这种交互的预览部分
但我们还没全部搞定
我们需要就此协议实施第二种所需的方法
即用于提供提交
这一种方法更易于实施
它被称为previewingContextcommitViewController
需要提交时它将被系统所调用
我们已经过了此压力阙值
我们要设置一些触觉反馈
我们在屏幕上显示视图控制器
在这里我们要尽一切努力
使这个视图控制器在屏幕上显示
AppChat是个使用导航控制器的简单的UIKit应用
所以我们只是要调用显示
这将有将
视图控制器推送到导航堆栈的默认效果
但是这个方法有一些真的很酷的地方
UIKit对它的操作使得你可以在此回调中
执行任何类型的视图控制器转换
推送东西到导航堆栈做一个自定义介绍
甚把视图控制器移动到一自定义容器中
在你的应用中 尽一切努力
使这个视图控制器在屏幕上显示
而UIKit将代表你来处理动画方面的事宜
好 我们已实施了对视图控制器的提交
而现在我们已经得到这个超赞的提交
这将使我们能够全屏导航
并开始与内容的交互
我们已向应用添加了Peek和Pop
但我们可以做一点点额外的工作
来把体验提升到
下一个级别
Peek和Pop的另一个很酷之处
是预览快速操作
而通过添加这些到你的应用中去你可以允许用户
访问最常用的一些操作
并在预览内显示内容
这真的很强大并可以让用户
以甚至比以前更快的速度使用你的应用
如果我们回到我们熟悉的架构图
我们将看到这些预览快速操作
属于被预览了的视图控制器
这是能够响应这些操作的视图控制器
因其对视图控制器所示内容进行操作
这些都很容易添加
我们要做的就是在
UIViewController中覆写预览操作项目功能
这将返回一个UIPreviewActionItems阵列
我们可以创建UIPreviewActions
使用你可能已经熟悉了的API
它类似于UIAlertAction和UITableViewRowAction
你只是传递标题、风格、和结尾而我们会
在用户选择该操作时调用该结尾
接下来我们就返回该操作阵列
到系统中去
现在我们已经有了一个使用heart的操作
但AppChat让你回复一大堆的表情符号
所以我们真正想要做的是把这些表情图案
分到一组操作中去
我们对此也有API通过UIPreviewActionGroup即可
你所要做的就是创建一个预览操作阵列
在这里我们有所有的你可以用于回应的表情符号
然后用标题、风格以及这些操作的阵列
创建一个操作组
这是个很棒的方式你可用它
来在你的预览快速操作中对关联操作进行分组
有适用于预览操作API的
两个其他重要部件它们也很方便
这是通过对预览操作项目的风格枚举
而完成的
第一个是所选择的样式
这将在此项目旁边显示一个小小的已检查标记
让用户知道他们之前可能已经选择过了
该选项
在我们推出beta 1版本之前
那个已检查标记有点害羞
所以你会注意到它不在第一个版本中
但放心这个错误将会被修复
另一个真的使用起来得心应手的样式
是破坏性的样式我们可以用它来指示
某操作可能执行一个破坏性行为
你可以从我背后的阻止操作中看到这一点
通过添加Peek和Pop并预览快速操作
我们已经把你应用中的体验提升到了
下一个高度并加快了你的用户
可以拥有的交互
让我们回顾一下把Peek和Pop
添加到你应用中去的一些最佳实践
首先最重要的是记住经验法则
可以被按压的内容还应支持Peek和Pop
你可以看一下Apple的系统应用
那里有很棒的提示来告诉你如何做到这一点
接下来
确保始终从代理回调返回一个
预览视图控制器
你应用中的外观类似的内容应当能被以类似的方式预览
在同一预览背景回调中
确保不要花太长时间
请记住我们不想阻止主队列
因为我们希望这种交互保持流畅和响应
确保设置好预览背景的sourceRect
来在屏幕上突出相应的用户界面元素
Peek和Pop部分就讲完了
现在我想把注意力转移到
iOS X中一些超级炫酷的新API
UIPreviewInteraction
UIPreviewInteraction让你感受Peek和Pop的感觉
即压力处理和触觉反馈
但你可以使用你自己的用户界面
正如我们不久就将看到的一样这是一个相当强大的概念
让我们来看一个例子
在AppChat中的我们的聊天细节视图中
我们已经在底部有了这个方便的回复按钮
在没有启动3D Touch功能的设备上
我们可以按压此回复按钮
来得到可以用于回复的表情符号的完整列表
然后我们可以按压这些表情符号之一
把它送回给我们的朋友
但在启动了3D Touch功能的设备上
我们可以把这种交互做得更流畅和更有趣
只需使用UIPreviewInteraction做几行代码
我们就添加了一些相当整洁的内容
我们可以对此回复按钮施加压力
并以交互方式展示该表单
注意模糊效果是如何淡入淡出的
然后在保持我的手指在屏幕下方的同时
我可以左右滑动来挑选一个表情符号用于回复
但愿我们不会选到魔鬼
然后我们会把它送回给我们的朋友
这种类型的一触式交互
是3D Touch所完美适用的
3D Touch可以帮助我们的另一件事
是加速
可更靠近用户手指的操作
在iOS 7中我们增加了滑动收回手势
作为返回按钮的一种替代
这就更方便了因为它就在你的手指旁边
你可以将它移动到屏幕边缘
然后向后滑动
并且通过3D Touch我们可以把这种便利
添加到你应用的交互中去
所以我们可在这张照片中的任何地方真正应用3D Touch
来交互地带出此回复表单
然后我们实际上可以通过多用力
来提交此会被打开的回复表单
然后再选择一个表情符号用于回复
这种类型的丰富交互
它可以让人有更流畅更快的感受
正是我们希望你会用UIPreviewInteraction
所构建的东西
UIPreviewInteraction采用的Peek和Pop压力处理
与我们已通过系统所提供的Peek和Pop的用户界面
所磨练时采用的Peek和Pop压力处理相同
我们在交互的各个阶段移动时的自动触觉反馈
但允许你的应用
使用其自己的用户界面
而有关这一点真正令人兴奋的是
人们现可为Peek和Pop构建肌肉记忆
并将此肌肉记忆应用于
系统的标准预览外观
并也应用于你将使用
UIPreviewInteraction所构建的自定义交互
而且此肌肉记忆将是普遍适用的
这真的很酷
因此让我们一步一步
讲解你可以如何向你应用添加预览交互
我们将以遵循
UIPreviewInteractionDelegate协议作为开始
此代理
将在预览交互中的各个阶段被告知
来让你知道发生了什么事情
接下来我们想要确保创建我们的预览交互
再次 viewDidLoad是进行此操作的很棒时机
在这里我们用源视图创建了一个预览交互
并设置我们自己作为代表
现在要讲的是预览交互它纯粹是关于状态转换
让我们讲讲这些状态转换是如何工作的
当交互开始时
如果你的代理实施可选的预览交互
应开始回调
我们将调用它或者如果你不这样做
我们将开始交互
现在随着压力从交互开始
向预览状态移动
我们用previewInteraction向你的代理发回信息
didUpdatePreviewTransition:ended
来查查看
这些压力进程更新
被赋予一个从零到一的归一化值
而真正要强调的重点是
这不仅仅是压力的直接转换
因为它使用我们为Peek和Pop
所开发的算法我们实际上是检测用户的意图
因此这不仅仅是简单的压力转换
当我们在这两种压力状态之间移动时
我们将在每一步都被通过交互而通知以
我们目前的进度
而一旦我们达到预览的目标状态
我们就会得到消息因为进度将移动到一
并且结束参数也将为真
而且该装置也将自动播放触觉反馈
让我们来看看此方法施用的一个示例
同样的 方法是previewInteraction
didUpdatePreviewTransition:ended
在这里我们只是要通过转换
来就目前的进度给自己更新
现在请注意这其实是即插即用
对许多UIKit的技术
我们可用它驱动UIViewPropertyAnimator
一个百分比驱动的交互转变
或者甚至一个UIKit动态系统
这些为状态转换所做的瞬时更新
适用于所有这些技术
并且如果交互结束
我们将希望展示我们已完成了的预览外观
这是第一个所需的代理方法
在UIPreviewInteraction上
第二个是为了对取消做出响应
它被称作previewInteractionDidCancel
每当用户抬起手指或者如果因为任何
其他原因交互应被取消这都将被调用
例如我们接到一个电话在这里我们将把
我们的进度设置回零并重置我们自己至最初的外观
但是请注意我们是在一个动画包内如此行动的
我们将要把我们自己做成动画回去休息
从而当我们抬起手指时我们可以避免东西在周围闪烁
所以这就是我们应对预览状态转换的方法
但要记住在AppChat中我们也想对
提交状态转换进行回应
来把我们的内容粘在屏幕上
我们可以采用可选的代理方法
previewInteractiondidUpdateCommitTransition:ended
来通过提交对我们的进度做出回应
所以当我们在交互之初
和预览状态之间时
我们会回调didUpdatePreviewTransition
一旦我们达到预览的目标状态
我们就会通过值为一的进度值以及一个为真的结束值
而我们也将播放一些触觉反馈
然后我们将开始发送消息
到didUpdateCommitTransition:ended
且有预览进度用于提交
这是同一类的进度更新
归一化值从零到一
而且一旦我们达到了提交的目标状态
我们会通过让已经结束的一个的进度值为真
我们会再播放另一条不同的触觉反馈
让我们来讲讲你可能会采用此方法的方式
那么在我们实施
previewInteractiondidUpdateCommitTransition:ended时
在这里我们要更新我们对提交的进度
同样这适用于
整个UIKit中动画和动态API套件
一旦交互结束
我们将只展示我们已完成了的提交外观
关于UIPreviewInteraction就讲到这里
现在如果你正在构建一个游戏或绘图应用
有一些你可以使用的低级压力API
此API提供标准化的访问
给与每个UITouchObject一起进来的压力值
通过UITouch上的两个属性
压力和maximumPossibleForce
这些值将被用于填充所有
支持3D Touch的设备以及来自
支持Apple Pencil的Apple Pencil触控
而在此我们不会进一步详细说明 相反
我鼓励查看iOS Talk上的
关于撬动触控输入的视频
这是一个非常棒的演讲并深入讲解了这些API
现在让我们回顾一下
如Tyler之前向你们展示
主屏幕快捷操作允许你的用户直接跳进
在你的应用内的许多常见活动的操作
而大多数的应用将真正受益于
添加主屏幕快捷操作
接下来我介绍了Peek和Pop如何
前所未有地允许无缝的流畅且快速的交互并让用户
与你的应用以一种全新的方式进行交互
我们认为许多应用将的确从添加Peek和Pop受益
最后 我们检视了UIPreviewInteraction
它可以让你在新的深度探索3D Touch这个海洋
并真的很好的检视了
多点触控的下一个维度
最后需要注意的很重要的一点用户会期望其设备上的
所有的应用都支持3D touch
所以我们强烈建议你采用这些功能
要了解更多信息并下载AppChat示例应用
我们在整个演讲中向你展示了这个应用
它使用了所有这些技术
请查看我身后的这个地址
有几个相关的演讲
一个是关于新的UIKitPropertyAnimator API
它非常适用于UIPreviewInteraction
而另一个是关于在iOS上撬动低级触控输入
就是这样十分感谢大家
祝大家在接下来演讲中也有很大收获 谢谢