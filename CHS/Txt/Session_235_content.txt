构建最棒的锻炼应用
大家好
欢迎来到“构建最棒的锻炼应用”
你们来到这里是因为你们关注构建最佳用户体验
对于你的健身应用的用户
有些用户很狂热
他们每周花好几个小时在健身上
他们期待响应快的易于使用的应用
能提供精确的数据
并能和Apple Health无缝衔接
我是Dash
我是Apple Health & Fitness团队的一个工程师
一会我的同事Jorge会来加入我
今天 我们将要向大家展示如何搭建一个很棒的锻炼应用
能搏得用户的喜爱
锻炼是保持身体健康的很重要的一方面
它能帮助你睡眠与更好地进行饮食决策
还能清醒大脑
你们中的许多人都曾很努力地创造iOS锻炼应用
能启发用户来记录他们的身体健康活动
并追逐新的健康与健身目标
借助Apple Watch锻炼应用又提升一个层次
通过瞬时心率卡路里燃烧 以及运动探测
只需一个来自手腕活动的信息
今天 我们主要关注
如何搭建Apple Watch上的最棒的锻炼应用
我们先介绍后台运行
一个watchOS 3中的对于锻炼应用而言颠覆性的新功能
然后 我们会从头到尾细数一遍一次锻炼的周期
在这之间 我们将向大家展示你的锻炼应用如何能
对用户的活动排名做贡献
然后 我们会讨论在iOS 10中添加针对锻炼的新API
最终 我们会看看一些最佳实践
那我们开始吧
每一个锻炼应用的核心是一个锻炼周期
用户可以开始可以结束
所以我们先说说HKWorkoutSession
这个API用起来很简单
为你的锻炼应用提供了自动化的好处
当一个锻炼周期开始时
Apple Watch的传感器就会通过活动类型
与某锻炼周期对应来精确计算运动和卡路里
这还会允许你的应用来贡献到
用户的活动环
比如说 在一次锻炼期间
活动会通过锻炼类型来奖励运动的分钟数
到用户的运动环中
在一次锻炼周期中
一旦用户唤醒设备你的应用就会被展示
用户会很喜欢瞬间访问你的应用
在他们使用手表锻炼时
最终 我们很高兴地宣布 锻炼应用
在watchOS 3中现在可以设置在后台运行
让我们多说几句后台运行
后台运行会大幅提高你的锻炼应用的使用体验
你的应用可以在后台处理来自传感器的数据
比如说 你将能收到连续的心率值
即使当你的应用没有展示在屏幕上
你还可以向用户提供即时的反馈
在一次运动周期的任何时间
你可以向用户发送触觉警告来告知他们当前进度
这还将允许你很快的展示最新的数据
每当用户看一眼手腕时
允许后台运行很简单
只需要将workout-processing添加到BackgroundModes
在你的扩展Info.plist
当然 为了保持Apple Watch的高性能
你必须要限制你的后台任务
只进行必要的工作
如果你的应用在后台使用过多的CPU资源
watchOS可能会将其暂停
我们建议你使用我们的工具
来测量你的应用的后台CPU使用情况
你可以使用Xcode内置的CPU反馈工具
或是instruments中的time profiler
watchOS 3还会生成一个内含backtrace的日志
每当你的应用超过了CPU临界值
现在你设置好了后台运行
我们一步步讲解如何开启一次锻炼
开启一次锻炼要进行如下三步
第一 你需要请求授权来访问HealthKit中的数据
第二 你需要创建一个锻炼配置对象
来表示你想要开启的锻炼类型
第三 你需要创建并开启一次运动周期
利用你的锻炼配置
我们一步步来完成
所有的锻炼应用都需要请求权限
为将健身写入HealthKit
这将允许你的应用中的锻炼
展示在用户的健康和运动应用中
根据你的锻炼应用的细节
你可以请求权限来读取燃烧的能量
距离以及心率
如果你想了解有关设置授权的更多信息
我们建议你看看我们先前的一次分享
充分利用HealthKit
锻炼周期是通过workoutConfiguration对象创建的
workoutConfiguration包含了锻炼活动类型
比如跑步或骑行
以及位置类型比如室内或室外
你将要使用配置对象来创建一个workoutSession
然后为了开启这一周期
只需将其传入HK healthStore的start方法中
让我们通过演示来尝试一下
仅限今天 我们假装我们都在为一家公司工作
我们最新的项目是要构建一个基于watchOS 3的锻炼应用
它专门为树懒爱好者设计
它叫SpeedySloth
我这里有一个Xcode项目已经构建好了锻炼应用的UI
让我们一起看一眼
这个事用户打开应用时所看到的第一个视图
它只有两个选择器 一个是活动类型可以是走路 跑步或远足
另一个是位置类型可以是室外 室内或未知
当我点击开始按钮时什么反应也没有
让我们一起修改它
你刚刚看到的视图是被
ConfigurationInterfaceContrller类所控制
我在这里写了一个方法叫didTapStartButton
其会在用户每次点击开始按钮时调用
我要在里面写代码了
我要创建一个workoutConfiguration对象
我需要将活动类型设置为当前选择的活动类型
通过第一个选择器
然后将位置类型
设置为当前选择的第二个选择器位置类型
我要将workoutConfiguration对象传入
到一个新的界面控制器叫做WorkoutInterface Controller
WorkoutInterfaceController负责
在锻炼周期中管理UI
它还负责开启与停止健身周期
让我们看看这个WorkoutInterface Controller
我在WorkoutInterfaceController的唤醒方法中
我知道我将收到我们的workoutConfiguration对象
作为这个方法中的上下文对象
让我们使用它来开启一次锻炼周期
首先 我要打开这个上下文对象
来确保它是一个有效的workoutConfiguration
然后我要通过它创建一次锻炼周期
通过将其传入HKWorkoutSession的初始化程序中
我要将我的锻炼周期的代理设为self
而后我将收到回调获得类似状态改变或是错误等信息
然后我讲当前时间保存为锻炼开始的时间
我们在后面还将用到这个参数当我们将锻炼样本保存到HealthKit时
下面 我要将workoutSession传入HK healthStore的开始方法
我们试一试
现在我们来到了配置界面控制器
我就选室外步行了
我要再次点击开始按钮
所以这打开了WorkoutInterface Controller
我有预感我们的锻炼周期正确开始了
保险起见 我们看一看设备上的钟表界面
你可以在最上面看到那里有一个绿色的跑动小人图标
这代表这个手表上的一个应用
有一个活动的锻炼周期
用户可以在任何时候通过点击这个图标进入其所属的应用
所以看起来我们的周期的确正确地开始了
让我们回顾一下所完成的
我们使用用户信息创建了workoutConfiguration对象
然后我们使用这个configuration创建了一个锻炼周期
然后我们通过将其传入healthStore的开始方法来启动周期
现在我们有一个活跃的锻炼周期
我们想要在锻炼期间收集一些数据并展示给用户
为了分享给大家更多有关收集和控制的信息
我要邀请我的同事Jorge到这里来
谢谢你
谢谢你Dash
早上好
我叫Jorge
我是HealthKit团队的一个软件工程师
我的同事Dash刚刚展示了
如何配置并开启一次锻炼周期
现在 我们将继续讨论你如何收集数据
并在一次锻炼期间控制你的周期状态
我们将要调用数据收集以及控制
这些你要进行的不同的任务
从你的锻炼周期起始点开始
一直到你决定结束
让我们看看这些不同的步骤
首先 我们将要观察样本 也就是
从HealthKit获取样本信息
为了将其合并到你的锻炼中
然后 我们要观察事件
事件可以被HealthKit生成
或者你可以在用户界面中探测事件
我们一会再更深入地讨论事件
一旦你开启了这两个任务
你就处在运行状态了
在任何时候你都可以选择暂停
然后可以多次继续锻炼
然后 你可以决定你要
结束这次锻炼周期
所以让我们更深入地再研究一下这些步骤
首先 我说了我们想要观察样本
你将需要打开一个锚对象查询
对你所感兴趣的所有数据标签
这可能是轮椅长度或者是活动燃烧的能量
当你进行此项操作时 你还需创建updateHandler
为了能收到HealthKit的新事件 新样本
这将允许你可以不停地计算锻炼的总体数据
比如总共的累计距离
或是总共的累计卡路里数
这样 你就能实时更新UI了
你还可以展示 比如说
最新测量到的心率
你可以通知用户某些目标比如说
每当他们在一次跑步中达到一英里
或是当他们燃烧掉第一个100卡路里
在他们的划船锻炼中
现在让我们看点代码
因为我们要使用锚对象查询
你需要做的第一件事就是为你的查询创建一个predicate
我们将使用你的锻炼开始时间
你不想要那个时间之前所生成的样本
来计算总量
然后 你将需要向本地设备索取样本
也就是当前的手表
你想要避免 比如说
获得那些保存在手表上的样本
作为一次和iPhone同步的结果
最终 你将要构建两个predicate
来组成最终的predicate并在查询中使用
然后 你要建立一个handler
为了处理HealthKit的样本
你可以将这些样本累计并计算总量
而后可以展示一些更新的用户界面
现在 我们可以创建锚对象查询了
你将要使用你所感兴趣的quantityType
我们刚构建的predicate
并使用我们刚刚构建的handler作为你最初的结果处理器
你还要建立updateHandler
这样你才能从HealthKit获得锻炼期间生成的样本
最终 你需要执行锚对象查询
我们还提到你可以通知你的用户
有关某些达成的目标
比如说 当他们达到了一英里
或是在锻炼中消耗掉的第一个100卡路里
一般的做法是
进行一次触觉提示来告知用户当前情况
与之同时 我们建议你要同时更新用户界面
这样才能展示达成了什么目标
很可能当用户感受到时
他们会抬起手腕并看看屏幕
这次震动是什么意思
进行一次触觉反馈的方式是调用play方法
在WatchKit界面设备中
现在让我们说说事件
事件是你要使用的时间戳
来在锻炼中突出特定点
比如说 你可以使用暂停与继续事件
来突出那些锻炼状态发生改变的点
有些事件将被你的应用创建
并随后存入锻炼中
而有些是由HealthKit创建并发送给你的
watchOS 3的新特性
我们在锻炼周期delegate中有didGenerate事件
HealthKit要使用该事件来向你的应用发送事件
所以让我们看看不同种类的事件
在watchOS 3中
圈数和标记是我们刚刚介绍的两种新事件
这些事件是你需要自己创建的
并存储在你的锻炼中
它表示你将用到的时间戳
用于将你的锻炼展示为图标或是统计数据
圈数和标记有一个区别
圈数代表代表划分你的锻炼的事件
它们所占的比例相同
比如说
如果你是在路径中进行跑步或骑行锻炼
你需要每次在用户完成一圈时创建圈数事件
标记 与之不同
可以是锻炼中的任意节点
它们不需要与距离或其他度量绑定
它们可以代表 比如说
你的用户达到山顶的瞬间
或是你在路上看到了一只树懒
现在让我们说说暂停与继续锻炼
在一次锻炼周期中
你的用户可能会决定暂时停止活动
比如说 他们正在跑步他们可能决定暂停
来买一瓶水
在这种情况下你需要在用户界面中有方法
来让你用户告知你这种情况
当这种情况发生时
你可以调用HealthKit来暂停你的锻炼
这将允许HealthKit来节省手表中的电量
以及数据库中的空间
当然了 当这种情况发生时
你也想忽略应用收到的任何新数据
你不想积累样本
到总量中在周期被暂停期间
HealthKit会反馈暂停与继续调用
通过生成暂停与继续事件
你需要使用锻炼周期代理获得
你需要知道当你收到暂停事件时
HealthKit不会再生成新的事件了
直到你继续你的周期
watchOS 3的新特性
你暂停与继续一次健身所需要调用的函数
是HKHealthStore的一部分
暂停workoutSession和继续workoutSession
你将要收到的事件是暂停和继续事件
你可能在之前的iOS版本就已经知道了
现在让我们聊聊运动事件
这是watchOS 3新特性
运动暂停与运动继续事件
你的手表 在一次跑步锻炼期间
可以探测到用户停止运动
这意味着他们停止跑动了
而一旦他们继续跑动我们就可以立即探测到
当你收到这些事件时
你要停止收集数据进健身中
就像用户手动暂停一样
但是 你不需要暂停你的锻炼周期
要注意这只是在跑步活动类型中实现了
所以让我们回到我们的SpeedySloth演示应用
看看我们如何可以具体化这些概念
我们刚刚所学到的
所以我要切换到我们的演示了
为了回放一下我们刚刚看到的
我们有...我们的锻炼应用
它已经启动了锻炼周期
但我们可以看到屏幕上卡路里和距离都是0
我们还没有累加数据
所以我们进入锻炼中来看看如何解决这个问题
回到我们的锻炼界面控制器类
我要找被委托的回调函数
当决定改变其状态时
这是workoutSessiondidChangeTo toState fromState
这里我有一个switch语句所有case都是空的
我现在所感兴趣的是运行时的case
每当我们从notStarted状态进来时
这意味着你的应用刚刚启动了锻炼
所以如果是在跑步从notStarted状态进入
我要调用startAccumulatingData函数
让我们看看这个函数
我们想更新屏幕上的这两个标签
一个代表距离一个代表燃烧的能量
所以我们要进行两次查询
针对这两种数据类型
进行查询的方式
和在展示中的一样
首先我们要构建一个在查询中使用的predicate
然后 我们要定义一个处理器
在这里 我已经有一个实现好的过程函数
它将接收这些样本并进行累积
并更新我的用户界面
现在 我准备好创建查询了
建立updateHandler并执行
最终 我想要保存这个查询留用
因为由updateHandler执行的查询
我们想在某个时刻停止它
让我们开始
再一次运行我们的应用
切换到模拟器
好了
所以我们要选择 比如说
一个室外的跑步锻炼
好了
当我们开始时
我们可以看到屏幕上的数字已经开始增长了
这是因为手表模拟器
在为你生成一些虚拟样本
每当你开始一次锻炼周期
棒
如果你看看屏幕你可以看到有几个按钮
但他们现在没有任何工作
我们已经说了你如何能暂停并为应用生成标记事件
所以让我们看看代码看看我们如何完成
我在这里有一个didTapPauseResumeButton函数
它与屏幕上的暂停按钮绑定
所以我要在这里写代码
首先我要要检查我是否有一个锻炼周期
然后我要检查它的状态
看它是否在运行
我要暂停这次锻炼周期
如果它是暂停的我要将其继续
好的 这样的结果是你的锻炼周期状态会改变
如果我们退回到
委托回调
每当你的锻炼周期变动到特定的状态
你可以在这里看到暂停状态是空的
所以我们要写点代码
在这里我已实现了pauseAccumulatingData
这个函数不再处理
新的样本 当它们进入到我的锻炼中时
类似地 我们要在某点继续这次锻炼
所以当我们的周期回到运行状态时
我们会收到resumeAccumulatingData
屏幕上的另一个按键是Marker按键
在这里 我们想要创建一个markerEvent
我们刚刚创建了一个类型为标记并有当前日期的锻炼事件
我们要将该事件保存到一个本地的队列里
为了以后保存到锻炼中
最终 我这里有一个步骤要在用户界面通知用户
这个事件刚刚发生
还要记住我们已经实现了didGenerate event
这是来自锻炼周期代理的回调
在这里 我们还想保存由HealthKit生成的事件
到锻炼事件队列中
所以让我们再运行一遍应用
等它运行起来
好了 出现了
我现在要选择室外步行
等几秒屏幕上出现数字
你可以在屏幕最上看到有一个活跃的锻炼
每当我点击暂停按钮它都进入暂停状态
你可以看到卡路里和距离的数字没有增长
我现在可以点继续了
它进入了活动状态数字又开始增长了
你也可以点击Marker按钮
它会在用户界面中进行展示
很可能你的用户所佩戴的手表会生成一次抖动
很好 现在我们回到展示
回想一下我们所看到的
我们刚刚看到你如何使用锚对象查询
来从HealthKit获得信息并更新锻炼总量
然后我们实现了暂停与继续事件
在你的锻炼应用中
最后 我们展示了如何创建一次事件并保存留用
下一步是终止你的锻炼周期
说到这里我要邀请我的同事Dash回来
又见面了
结束并保存一次锻炼很简单
只需几步 你的应用所保存的锻炼可以无缝地集成
与活动与健康应用
让我们看看活动应用
保存到HealthKit的锻炼会自动展示
在活动应用锻炼列表中
从iOS 10开始这包含了手机上的锻炼
这意味着用户可以在手机应用上进行锻炼
当他们的手表不在身边时
他们一样会在活动应用中获得积分
有能量样本的锻炼
可以向用户的运动环做贡献
用户会很喜欢从你的应用获得锻炼积分
在他们的活动日中
让我们一步步学习如何结束并保存一次锻炼
让它们展示在用户的活动应用中
完成一次健身有三步
第一 你要结束锻炼周期
第二 你要将锻炼保存至HealthKit
第三 你将关联的样本添加到保存的锻炼中
比如燃烧的热量和距离
让我们一个一个解决
为结束锻炼周期 只需调用healthStore的结束方法
并传入锻炼周期
这将重置设备的传感器至正常状态
当HealthKit成功结束锻炼后
你的锻炼周期代理会收到回调
在其状态改变方法中
当你看到状态改为ended时
就应该保存锻炼了
你要创建一个HKWorkout样本来保存到HealthKit
你创建锻炼所使用的信息
将会展示在用户的健康与活动应用中
确保你所使用的活动类型和原先配置健身时一样
为锻炼设置一个起始时间和结束时间
并包含一个锻炼事件队列
这个队列可以包含诸如暂停与继续的事件
以及Jorge刚才讨论过的标记和圈数
totalEnergyBurned值是一个HK数值 代表总值
在锻炼周期期间所有燃烧的能量
类似地 totalDistance值也是HK数值
代表锻炼周期期间所运动的总长
最后 不要忘了添加元数据
给IndoorWorkout键设一个值
来为你的锻炼声明位置类型
你可将该锻炼样本存至HealthKit
只需要将其传入healthStore的保存方法
当你看到它保存成功时
就可以向锻炼添加样本了
让我们说说添加样本
当你向一次锻炼添加样本时
HealthKit会在这些样本和锻炼之间创建一个链接
应用可以在其后查询所有的样本
与指定的锻炼对应
这将很有用 如果你想绘图
在锻炼时间线中描述细节数据
想锻炼添加能量样本很必要
如果你想让用户在活动运动环中获得积分
活动会使用这些关联的能量样本
来计算环中的积分
最终 确保你先前保存在锻炼样本中的总额
与这些关联样本相符
为了向锻炼添加样本只需要传入一个HK样本队列
到healthStore的addSamplesToWorkout方法
让我们现更新SpeedySloth添加结束与保存锻炼功能
我们上一次使用应用时
Jorge展示了如何收集数据来展示给用户
以及如何通过暂停与继续控制这个事件
你可能已经发现在WorkoutInterfaceController底部
有一个叫End Workout的按钮
当我点击它时没有反应
我们现在要进行修改
我又回到了锻炼界面控制器
我有一个方法叫didTapEndButton
让我们向里面写代码
首先 我要保存当前时间作为workoutEndDate
我们稍后创建锻炼样本时会用到它
接下来 我要调用healthStore的结束方法
并传入锻炼周期
当healthKit成功结束周期后
我们在状态变更方法中就会收到一个回调
我现要回到状态变更方法
Jorge刚才已经展示
如何处理运行与暂停状态
现在我们想处理这个终止状态
我们想在锻炼周期结束时完成两项任务
第一 我想结束所有的查询
这个方法已经实现了
它会遍历开放查询的队列并逐一停止
然后 我们想将锻炼保存让我们现在实现它
我要创建一个锻炼样本我要使用活动类型
直接从锻炼配置获得
然后我将开始时间与结束时间设置为刚才保存的值
我添加了workoutEvents对列
Jorge展示了如何在锻炼周期期间进行构建
我要使用totalEnergyBurned的数值
以及在此期间我们从数据查询中积累的totalDistance
最终 我要添加针对描述信息的代码字典
我要给室内锻炼字段赋值
基于我们锻炼配置的位置类型
我要将锻炼样本传入healthStore的保存方法
它会将其存到HealthKit中
当我们看到它保存成功后
我将要调用addSamplesToWorkout
这个函数就在这里我们现在就实现它
我想要想这次锻炼添加两个样本
一个作为totalEnergyBurned另一个是totalDistance
对于totalEnergyBurned我创建了一个quantitySample
我使用的数值类型是activeEnergyBurned
然后我要传入同一个totalEnergyBurned数量
与刚才我在锻炼样本中使用的相同
这意味着将有一个很大的能量消耗样本
这跨越了锻炼的整个周期
如果你想要的话 你可以创建多个更小的能量燃烧样本
只需保证它们加起来和
你在HKWorkout样本中的值相同
我为totalDistanceSample进行同样操作
我要使用的数值类型是distanceWalkingRunning
HealthKit有三种距离类型
我要用WalkingRunning因为我们的锻炼应用只处理
走动与跑动距离
如果你要构建骑行锻炼应用
你应当使用骑行距离
我们刚刚添加了一种新的距离类型
轮椅距离 你可以使用它进行基于轮椅的锻炼活动
我要使用和刚才锻炼样本一样的总距离数值
我要设置同样的锻炼开始和结束时间
再一次 这是一个很大的距离样本 跨越整个锻炼
我将这两个样本添加到锻炼
通过将它们放在一个队列中并传入
“添加样本至锻炼”方法在healthStore中
当我看到添加成功时
我知道我这次锻炼的所有数据都保存到HealthKit中了
现在我想将锻炼展示给用户
我通过传入HKWorkout对象来完成
传给一个新的界面控制器叫SummaryInterface Controller
SummaryInterface Controller已经写好了 它知道
如何在一个总览视图中向用户展示一个HKWorkout
我要再次运行应用我们将看到如何结束锻炼
我们再一次选择室外跑步
我要点击Start
我们稍等片刻数据开始收集
好了我将点击结束锻炼按钮
因为我们已经有些数据了
我们的锻炼周期结束了我们的样本已存到HealthKit
这里是总览视图向我们展示锻炼样本
为确保它的确成功保存到了HealthKit
让我们看看iPhone模拟器上的Health应用
现在我在Health应用的Workout视图中
我要点击显示全部数据而后会看到一个锻炼列表
在顶端你可以看到一个在11:36刚刚完成的锻炼
这就是我们的锻炼
我要点击它来获得更多信息
你可以看到这是一个跑步锻炼
它有近乎13秒的时长这里有起始和结束时间
这是我们锻炼样本中的所有信息了
你甚至可以在这里看到元数据说这不是室内活动
在底端你可以看到两个样本
我们刚才将其与锻炼关联
我们几乎总共燃烧了2卡路里
干得漂亮
我们跑了一英里的百分之一
所以看起来所有信息都成功保存到了HealthKit
让我们回看刚才做了什么
我们通过对healthStore调用end结束了锻炼周期
然后我们在状态变更代理方法中等待回调
当我们看到状态改变为end后
我们创建了一个锻炼样本并保存至HealthKit
然后 我们创建了两个样本来添加到锻炼中
一个为了totalEnergyBurned另一个作为totalDistance
要记住有必要关联燃烧能量的样本
这样用户就可以在活动环中获得积分
我们刚刚构建了一整个watchOS 3的锻炼应用
就是这么简单
现在watchOS中的每个应用都有一个父应用
我们在iOS 10中专门为锻炼应用添加了一些API
为了向大家介绍这些新API我要邀请Jorge回到这里
谢谢你
谢谢你 Dash
你们都为iPhone开发了很棒的应用
锻炼应用不只是你的手表
从iOS 10开始
我们提供了新的API供大家使用
来在你的iPhone应用中实现新的功能
我们提到了每一个手表应用都有一个iPhone父应用
你可以利用这一点为你的用户提供很棒的体验
你可以使用WatchConnectivity
在两个应用间通信
这是实现新特性很有效的方法
当你的手表处在健身状态
且应用在运行
现在我们有了后台运行
这样你的应用可以在任意时刻运行
这允许你实现很棒的新功能
但是 为了实现这一点
你需要将手表调到健身状态
从iOS 10开始我们提供功能
让你从iPhone中开启一次锻炼
这就是 你的手表将进入锻炼状态
用户不需要干预其用户界面
现在 让我们看看这怎么完成
在你的iPhone应用中
你可以选择活动类型和位置
你需要创建一个workoutConfiguration对象
一旦完成
你将workoutConfiguration对象
发送到手表应用中
如果手表应用没有运行
就会自动运行
现在 锻炼应用可以获取那个配置对象
并开启一次锻炼周期
为了使之正常运行
你需要进入锻炼运行后台模式
我们在展示的前一段提到过
现在让我们看看代码
你可能对这段代码很熟悉
因为我们在展示的前面看到过
每当你要在手表上开启一次锻炼时都需要这么做
你先创建一个workoutConfiguration对象
然后使用它创建一个workoutSession与startDate
在这里 我们想将这些代码分成两部分
第一部分是创建workoutConfiguration
会在iPhone应用中执行
创建workoutSession与startDate将在手表应用上执行
为了完成这一点你需要进行通信
在两个应用之间
所以让我们先看看iPhone应用中的代码
首先 你需要检测WatchConnectivity
看看有没有一个激活的会话
以及手表应用是否安装
完成之后 你就可以创建workoutConfiguration了
下一步 为了将workoutConfiguration传给
你的手表应用
你将要调用iOS 10中的新方法 startWatchApp
使用workoutConfiguration
这是HK healthStore的新方法
这会将你的workoutConfiguration传送到手表应用中
现在让我们看看手表应用代码
你需要用workoutConfiguration
来创建一个锻炼周期并开始
为此 你需要实现处理workoutConfiguration
这是一个新函数
是WatchKitExtensionDelegate的一部分
通过实现这个函数
你可以获取你的workouConfiguration并可以开始
现在让我们回到我们的SpeedySloth演示应用
来看看我们我们如何从iPhone开始我们的建设
所以
让我们看看iPhone模拟器
我将要创建健康应用
这里我有iPhone版本
的SpeedySloth应用
我要启动它
你可以看到用户界面
和手表上的非常相似
我们的用户界面可以让你
选择活动类型和位置类型
我们还有一个Start按钮现在没有任何功能
所以我们看看代码
来看看我们如何实现该方法
我要切换到iPhone应用的代码
我有一个配置视图控制器
这个类负责处理我们刚刚看到的界面
在didTapStart按钮中
我们要实现我们的方法
首先 我们要创建workoutConfiguration对象
使用选择的活动类型和位置类型
这和在手表应用上的代码一样
下一步 我们要获取workoutViewController
为了storyboard
在健身持续期间我们要展示这个UI
我们要设置workoutViewController的属性
为了传入我们创建的workoutConfiguration
最终 我们要展示用户界面
让我们看看workoutViewController的代码
看看它在做什么
在viewDidLoad方法中我们看到我们做的第一件事
是初始化手表连接
只需要获取WatchConnectivity这个会话
并确保它已经初始化
然后 我们要调用startWatchApp函数
startWatchApp函数...
会首先检查我们是否有有效的workoutConfiguration
当我们有有效的WatchConnectivity会话后
这是和在幻灯片中一样的代码
我们首先检查连接周期
被激活 以及手表应用已经安装
最终 我们要调用
startWatchApp使用workoutConfiguration
很棒 现在我们要进入WatchKit扩展
来确保我们能获取到workoutConfiguration对象
所以 我们要进入锻炼——
进入手表应用的ExtensionDelegate
并使用同样的代码来处理workoutConfiguration
当我们进行这一操作时我们需要封装workoutConfiguration
在一个上下文对象中 并传入Workout InterfaceController
这个用户界面与
我们每次在手表上启动锻炼时所展示的一样
还有一件事
如果我们进入Workout InterfaceController
每当一个应用
让我们看看 每当一个活动的锻炼周期状态改变时
我们要调用这个updateState函数
这个函数我们已经实现了
在我们的代码中它只是获取周期的目前状态
并通过WatchConnectivity发送
给iPhone应用
所以 现在让我们切换到iPhone应用中的代码
并看一看
在这里
我们要选择室外步行锻炼
当我点击Start按钮时你可以看到锻炼周期已经开始
如果你回到手表模拟器
你可以看到应用启动
回到iPhone应用你可以看到现在
它处在运行状态如果你不想这样
我就可以将锻炼周期暂停
你就可以看到另一端的状态已经更新
而后我们就可以将其终止了
现在在另一端锻炼状态也已经改变
回放刚才所说我们展示了你如何可以
在iPhone应用中写点代码
来让你的手表进入锻炼状态
任何时候用户都不需要操作手表
现在 让我们聊聊最基本的实践
我们希望你能在开发锻炼应用时能遵守以下几点
第一就是我们想让你确保
你的手表应用依然可以运行
当你的手表与iPhone失联时
比如 一个用户可能希望
启动一次锻炼周期
并离开住处 出去跑步不带着iPhone
在这种情况下我们不希望你停止锻炼
所以 你要做的第一件事就是让你的锻炼周期处于活动状态
及时你与iPhone失去连接
在这种情况下的另一个很有趣的点是
你可以使用HealthKit路程
因为HealthKit可以生成路程样本
即使没有GPS
还有 我们说过
你的用户可以开始健身
从他们的iPhone或Apple Watch
我建议你让用户来选择
到底是想从哪个设备开始锻炼
还有一些其他建议包括展示历史锻炼
如果你这么做展示所有来源的锻炼
不但会帮助你自己的应用
我们还想让你展示
其他应用生成的锻炼
如果你这么做不要忘了观察被删除的对象
不要展示一些锻炼
而它们已经从HealthKit数据库中移除
所以 总结今天的展示我们想让你学到三件事
从今天的展示中
第一 我们学习了后台运行
这是一个很好的方法来让你的应用
不停地更新
还要让你的用户界面有反馈性
第二 你学到了你可以贡献
到活动环通过向锻炼添加样本
不论是在手表还是在iPhone应用上
最终 第三点我们学到了你如何可以开始锻炼
从手表或是iPhone中
所以我们希望大家可以回到家或是办公室
看看你的代码并应用上今天所学到的
来实现你的应用中的很棒的功能
如需更多信息你可以访问这个网站
你可以找到这次展示的视频
我们还有其他关联的视频
一个是HealthKit做的另一个是Core Motion做的
如果你错过这些展示你可以上网观看
还有些几年前的视频也与今天的主题相关
这就是今天的全部了
感谢大家
祝大家今天过得愉快