WATCHOS快速操作技术
大家早上好
我叫Tom Witkin
Apple watchOS的工程师
今早我们将讨论添加快速操作
进入Apple Watch应用
让我们从这个问题开始
我们如何定义快速操作？
我很确定你们中的很多人为iOS或Mac OS开发过应用
在那些平台上我们一般测量
用户花在你的应用上的时间
尺度是几分钟甚至几小时
但是在watchOS中是另一种情况
用户希望可以举起他们的手腕
然后快速获得特定信息或者执行特定操作
然后放下他们的手腕回到他们之前做的事
所以交互模型完全不同
这里有些关于什么是Apple Watch快速操作之例
比如说开始一个定时器
或者查看天气
或者从你的购物清单里删除一项
我们认为这些是一些操作类型的原型在Apple Watch上
在这背后有一些关键的哲学你们可能已经在这周听说过
首先Apple Watch上的应用
他们要易于查看
也就是说只需要一瞥
你的用户就应该能够获得他们想要的信息
应用要易于操作
也就是说用户应该能够作出快速
并且获得足够信息的决定
最后它们要可响应
你应该从不让用户等待
如果你有兴趣了解更多
我强烈建议你观看
今天下午的设计优秀Apple Watch体验这一演讲
或观看watchOS 3新特性演讲
现在我们对什么是快速操作有了初步了解
但是Apple Watch上的快速操作是指多长时间？
我们认为理想的操作时间
是2秒
2秒并不长
所以你们不得不仔细考虑你们的设计
以及开发你们的应用
但是我们认为这是可以实现的
特别是有了这些新特性的帮助
我们在watchOS 3中加入的一个API
我们要从这开始
通过谈论这些新的特性和API
之后我们要谈论一些实用技术
你们可以在应用里使用
来创建这一类快速操作
我要说的就这些我想把演讲交给我的同事
来谈论新特性和API
谢谢Tom
大家好 我是Miguel
我将带你们快速浏览
我们在WatchKit里引入的新API
使你们能实现快速操作
我将谈论5类API
让你们的应用易读 易操作随时响应
首先要让你们可以访问更多新的输入种类
你们现在可以使用手势
在你的应用中有手势识别
我们要给你访问
Digital Crown中的旋转事件
我们还有3个其他方面
一是增强的表导航
对新的用户通知框架的支持
以及集成SpriteKit和SceneKit
让我们开始
我会给你们API的概览
然后 Tom会回到台上
向你们展示一些他如何结合这些API的例子
如果你在iOS中使用过手势识别
那么你基本上已经知道了几乎所有需要知道的
关于watchOS的手势识别
如果你还没有手势识别是对象
用来帮助你分析底层的触摸事件
到可识别的手势中
我们为4个识别器编写了支持
两个离散的
SwipeGesture
和TapGesture
以及两个连续的手势识别器
PanGesture
和LongPress
你使用它们的方法
和你在WatchKit中进行的大部分开发相似
是storyboard中的interface builder
你把对象拖入你的界面中
如果你看看这个库
你可以看到4个识别器实例
它们被拖入元素中
那些你想要附加手势的元素
然后你在检查器中设置interface builder
你要做的最后一件事是把行动拖入识别器中
到你的代码的一个函数里
这是一个函数将被调用
当手势被系统识别时
如你所见一个参数是手势识别器它自己
从中你可以知道位置
手势在这个位置被识别
这个对象的边界
以及手势的状态
一些关于手势状态的事
手势在被识别前从可能状态开始
可能会转变成已识别或失败状态
当你处理离散手势时
你不需要过多考虑状态
你只需要知道当手势被识别时
你的行动方法被调用
这和连续手势有一点不同
它们也从可能状态开始
但就像它们的名字所表明的
它们会在代码里经历多次更新
所以要假设你的行动方法会被多次调用
随着手势的改变
给你一个机会更新用户界面
一些watchOS中使用手势的提示
我们推荐把它们附加到组元素上
而不是控制上你可以这样做
但是你可能会和其他手势冲突
那些已经在控制里的手势
并且记住你获得一个更小的屏幕
在Watch应用中
那些组会是更大的界面元素
在你的应用中
你可以设定手势间的依赖关系
但是对watchOS这只可能
在查看器及interfacebuilder中
并且注意那些系统手势
会优先于你定义的手势
比如
如果你有一个元素允许滚动
并且你想要附加一个SwipeDown手势
它不会被识别滚动会优先
ForceTouch和LongPress也是同样的
让我们继续到第二个输入元素
Digital Crown
这是一个Apple Watch独有的元素
它允许用户快速准确控制输入
从watchOS 2开始访问Digital Crown
通过WKInterfacePicker对象
要使用它你要提供一个选取项目列表
并且设置样式
WatchKit会为你绘制这些元素
这是列表样式
你有堆叠样式
图片序列样式
但是对这个元素
WatchKit帮助你处理很多事情
我们绘制这个元素
我们处理表冠事件的解释
我们当一个选择被做出时调用你的行动
在watchOS 3中
我们允许你直接访问旋转事件
所以你可以编写你自己的UI元素
并且用旋转数值来驱动它
这能过两个新对象实现
通过我们要介绍的新类
WKCrownSequencer它使你能访问旋转事件
对不起每秒的旋转数
和新的委托协议WKCrownDelegate
在旋转差量上有回调函数
所以你会得到2种值
每秒的旋转数和旋转差量
你怎么处理它们或者你怎么访问它们?
如果你对每秒旋转数感兴趣
访问crownSequencer属性
现在出现在所有界面控制器类中
你查询它的每秒旋转数属性
这可能是你将会用到的东西
当你想知道表冠的旋转速度
可能是基于物理的动画 游戏类似这些的东西
旋转差量和你通信
通过委托协议
这使你能够知道表冠的旋转次数
你会在crownDidRotate方法中获得回调
rotationalDelta是一个参数
你在这个方法中需要做的
是维护一个累加器变量
你把我们传给你的差量加到这个累加器中
你要用的数学是一整圈旋转
相当于累积的差量是1
另一个例子是如果你只想要侦测到旋转一半
你最多积累差量到0.5
所以你还是累加我们给你的差量
当它们超过阈值时
你知道一次旋转发生了
这取决于你来断定
如何计算这些旋转
根据你想要显示的内容的灵敏度
当我们向你发送数值时请注意符号
可以是正或负
当用户在滚动
想让内容上移
我们发送正的值
当他们滚动想让内容下移
我们发送负的值
这些值方向无关
所以你不需要考虑顺时针逆时针代表什么
如果用户改变表冠的方向
我们仍然会给你正或负值
为上和下
所以你不需要考虑那些
最后有一个表冠焦点的概念
焦点可以被其他界面元素获取
比如一个选择器 一个滑动器任何可滚动的元素
这需要你来决定
什么时候界面元素需要取得表冠的焦点
这是一个很好的使用新手势的地方
而且
一旦你决定你的元素需要重新获得焦点
请调用函数focus
并且不要忘了在初始化时调用
当你的界面控制器第一次出现
让我们把输入元素放一边说说别的
关于我们将引入的垂直填充
用户浏览表格的典型方式
是选择一行
在另一个控制器中查看这一行的详情
他们需要返回主表
他们需要选择另一行才能查看详情
在watchOS 3中我们有垂直填充的概念
所以在你的表格中启用它时
一旦你的用户第一次进入详情
他们可以滑动手指或使用表冠
上和下来查看随后的详情
他们不需要回到主表中
使你的应用看起来更有响应性
你怎么进入这种模式?
这很简单
你只需要点选 ItemPagination复选框
在你的表查看器中
但是你还需要确定你的表格使用segues API
在这里你告诉我们你想用什么上下文初始化控制器
然后用指定的上下文来初始化它
你可能已经在这样做
所以这个API并没有改变很多
只有一些改变
有一个方法允许你用代码进入连续模式
它在你启动应用的时候很有用
通过点击一个complication或通知
并且你想直接进入一个特定视图
在连续模式下
你要知道的第二件事是
WatchKit正试着变聪明并帮助你
提升应用速度
所以我们为控制器进行预热
预测用户会向上或下滚动
所以控制器的一些生命周期方法
会在元素出现在屏幕前被调用
我不会谈论太多细节
但是我们有一整个新的场次为了性能的架构
会给你详细的例子
关于所有的生命周期方法
现在让我们来谈谈通知
他们是最快的操作
我们最初发布Apple Watch产品时就引入了
所以从用户的角度你的用户的角度
他们操作通知的方式
是简单的感觉他们手臂的震动
他们抬起手腕
他们会自动看到这个短看界面
为你的通知
如果他们保持手抬起
我们转到这个通知的长看界面
他们对你通知的反应是
我会通过长看的例子
有着最多的细节
所以如果你已经有了优秀的交流
通过使用文字来表现你的通知的内容
他们不需要做任何事除了删除这条通知
这是最短的快速操作
他们还可以点击通知来启动应用
或者
请记住通知可以有与它们相关联的定制化行动
在这个情况下我会展示3个
接受 可能 拒绝按钮
你最多可以有4个
当你把行动和通知关联时
他们可以是前台行动
就是说如果用户点击按钮
你的应用会被激活
或者后台行动
后台活动在watchOS 2中永远会被转发给你的手机
在watchOS 3中对通知的一个大改变
是有一个全新的通知框架
请到介绍通知这个场次
去了解关于这个新框架的所有细节
但是对WatchKit开发者高级的重点有三个
你们现在有一套
跨平台的类似的通知API
iOS tvOS和watchOS
我们现在可以在watch上调度通知
有后台行动的通知
会被发送到你的扩展
只要它们是在Watch上调度的
让我们来看看API
新的UNUserNotificationCenter对象
你想要成为这个对象的代表
当applicationDidFinishLaunching方法启动你的应用时
你想要指出
你要采用notificationcenter 委托协议
这个协议的2个方法对你很有用
第1个是willPresent方法
它会被调用当你的应用已经被激活
在表盘上
系统会给你一个机会告诉它
你想要系统怎么处理那条通知
所以根据你的决定
在完成处理器这
系统将会做二件事中的一件
如果你要用警告选项
我们将会返回普通的长看界面
属于这个通知并且它会覆盖在你的应用之上
如果你不想做任何事
那表明系统不应该做任何事
因为你的应用已经被激活
你需要处理显示通知内容
在你的应用里用某些方式
第二个方法是didReceive响应
当你的用户在通知上采取行动
这是程序变成前台运行时的回调函数
因为用户点击了按钮
这也是watchOS 3新的入口点
在这你可以得到后台行动的回调
但是请记住这只作用于后台行动
是由Watch自己调度的后台行动
现在是快速回顾的好时机
回顾在Apple Watch上调度和传送通知
任何时候手机触发一个通知
它被转发给Watch如果手机屏幕关闭
而且你戴着Watch并且它被解锁
永远都会是这种行为
但在watchOS 3中
你可以调度你自己的通知
在Apple Watch上
请记住它们只被发送到Watch上
如果你的应用需要
在手机上也有相应的通知
你需要和手机通讯
并且在那调度你的通知
现在你可能想知道如果我调度多个通知
如果它们都触发了会发生什么?
你可以删除重复通知
只要你使用相同的识别符
在Watch上
和在iPhone上对这个通知
如果我们在这种情况
我们转发通知给Watch
我们首先查看识别符
如果还存在通知有相同的识别符
当时在Watch上被触发
这有更高的优先级并且被显示
这样用户就不会同时看到两条相同通知
最后让我们谈谈SpriteKit以及SceneKit对象
SpriteKit和SceneKit提供丰富的API
它们允许你进行2D和3D绘制
它们允许你极大的扩展
你应用的视觉语言
我们有2个类为了WatchKit
支持这些框架
针对SpriteKit的WKInterfaceSKScene
针对SceneKit的WKInterfaceSCNScene
你们还是进行所有的设置
在storyboard以及interface builder中
你现在可以看到这两个类出现在库中
你只需要把它们拖入你的控制器
它们就会提供绘制场景的画布
然后设置就完成了
在查看器和interface builder中
一旦你准备好显示场景
SpriteKit和SceneKit所有代码保持原样
你继续使用API
我不会讨论那些框架本身的API
但是一旦你的场景准备好显示
和WatchKit集成来显示场景很简单
如果你在处理SpriteKit场景
你调用百分比函数
或者几个函数取决于你是否有过渡
如果你有一个SceneKit场景
你只需要在对象里设置场景的属性
这就是集成需要做的所有事
我已经带你们快速回顾了
你们拥有的新的工具包项目
来开发易于查看 易于操作
可响应的应用
现在Tom会回来给出一些特定例子
关于怎样结合多个界面
让你的应用有更好的响应性
谢谢
好的现在我们有了工具包
所以我们可以来看一些实用技术
要创建这些快速操作
我们要谈谈增加complications
和通知在你的应用中现在这些并不是新东西
但是我们要谈谈它们的一些独特的新方式
之后我们会谈谈
在apps有一个简单的浏览模型
最后我们会谈谈
给你的用户放下手腕的信心
在他们在你的应用里完成操作后
我们从易于操作的complications开始
在watchOS 2中对第三方应用引入了complications
在watchOS 3中它们扮演更重要的角色
现在有更多的表盘有complications
有一些已有的表盘有更多的complication插槽
现在你可以快速滑动
在你的表盘间来查看所有complications
因此我们认为每个应用
Apple Watch都该有complication
你还什么看到所有原生apps都有complications
比如健身应用和心率应用
为何有complications？
它们非常易读它们永远在手腕上
只要一眼就能看到很多重要信息
它们频繁更新
若你的应用在当前表盘上有complication
它每小时至少更新2次
你能确保新鲜
以及当前的数据用户部是可以得到这些
你的应用会保留在内存里
这很重要
因为这使你应用的启动很快
使你应用里的很多操作
响应更快
而且complications提供一种方式使用户更快进入应用
来完成特定功能
比如我们来看音乐complication
我点击它我直接进入现在播放界面
如果我在播放音乐这对我最重要
我可以播放 暂停 跳过一首歌
这使整个操作快得多
因为我直接进入我想要的界面
watchOS 3和iOS 10中新出现的是新画廊
在iPhone的Apple Watch应用中
这很好因为它允许你在Apple Watch中添加新表盘
它还允许你定制表盘
并在complications中选择
第三方complications也会出现在这
这方便用户发现你的complications
并把它直接加入表盘
如果你想成为这些complications的一部分
你创建一个complication捆绑
在开发者网站上有相关文档
我强烈建议你们去看一下
所以Apple Watch上的complications机制很棒
使用户进入你的应用
并提供一系列快速操作
如果你的当前应用没有complication
或者你正在开发新应用请确保你包括它们
接下来我们来到易读的通知
我们都知道通知
在Apple Watch上很优秀
一个主要原因是它们完全可定制
你可以把它们弄成任意你想要的样子
而且它允许你显示真正有价值的信息
在通知中
比如这是一个日历通知
我可以看到事件的名称时间 地点
而且
这经常可以去除一种必要性
启动Watch应用的必要性
因为重要的信息都内联了
在通知中
在watchOS 3中所有通知都支持SpriteKit
和SceneKit以及内联视频
所以你能提供更多定制
在你的通知中
所以SpriteKit和SceneKit
我确定你们中的很多人认为是为了游戏
而且他们确实利于游戏
在周五会有一个场次关于Apple Watch的游戏
但是在这里我想要谈谈它们非游戏的界面
为什么它们对非游戏重要?
它们允许你完全定制内容
和布局以及你界面的动画
所以这允许你创建定制化的外观
我们来看一个Photos应用的例子
你可以看到我获得来自我的朋友Ivy的通知
她向我分享了一些照片
这不包括很多信息
我不知道这些照片是关于什么
我需要阅读文字来知道谁分享了它们
这样我们可以获得很多好处
从通知的可定制性中
所以现在有另一种方法在顶部使用SpriteKit
它包括共享给我的相片
它有我朋友Ivy的相片
只需要瞥一眼我就可以获得大量信息
最终我可以获得更多信息来做决定
我是否需要启动Watch应用
或者拿出我的iPhone来查看关于相片的更多信息
我们来看看这是如何实现的
在顶部我们有新的WKInterfaceSKScene对象
在那之下我们有一个普通标签
我想要指出这里的关键之处是你混合搭配
SpriteKit和WatchKit界面元素
也许你正在使用动画图像
或者视图动画API
你可以用SpriteKit替换它们
或者你想要添加动画到已有界面
你不需要为了采用SpriteKit而重写一切
所以它提供一种强大的方式来添加更丰富的内容
到你的界面中
而无需抛弃已有的一切重新开始这很酷
如果你的应用中有通知
请确保充分发挥它们提供的优势
如果你只想要默认界面
考虑什么信息是真正重要的
在通知里
添加一个定制界面来反映它
接下来让我们来到
你应用中的一个简单浏览模型
早前我们谈论了表格的新的垂直填充API
它对所有分层的应用都有利
但是在这里我们想谈谈浏览
关于另外两种技术
它们是手势和Digital Crown
Digital Crown是Apple Watch特有的
它是一个很好的输入机制
它允许你快速精确地操作界面
它用很多种使用方法
比如计时器应用
它可以快速通过不同的时长来选择你想要的时间
或者在Photos应用中它可以
放大缩小相片
你如何在应用中使用 DigitalCrown可很有创造性
我们对你怎样使用它感到兴奋
在这我们想通过一些例子
通过一个跑步应用
使用手势和Digital Crown
来简化浏览
我们有一个跑步应用
目的是显示我之前的跑步
并且显示平均时间 距离 高度
一个版本是有一个关于每一英里的列表
我可能点击一英里来看更多信息
或者我滚动列表来看跑步全程
这个版本有我需要的所有信息
你不得不找来找去来寻找你想要的
你需要点击一行你需要滚动这个列表
信息的密度不易读
这绝对可以用更好的方式实现
这是一个使用SpriteKit的替代方案
使顶部有一个图表显示跑步全程
只需要一瞥我可以看到更多信息
现在有了手势我可以点击图表
它会在步速和高度中使用动画
用Digital Crown在图表中浏览
到达特定的数据点
虽然屏幕上有很多信息
浏览变得更容易
要到达我在寻找的特定信息
使得整个操作更快
如你所见我们开始混合搭配
我们介绍的所有技术
手势 Digital Crown和SpriteKit
它们创造出一些很强大的组合
当你开发自己的应用时
你应该确保考虑过这些技术
并看看它们能怎样帮助简化你应用的浏览
我们把很多时间花在watchOS 3的浏览上
我们很想确保它
也进入到你们的应用里
最后我们要谈一个技术
允许你的用户放下手腕
一旦他们完成操作
在Apple Watch上完成快速操作的一个关键方面
是使你的应用有很好的响应性
特别是你要用到任何类型的网络
或者要和iPhone通讯
因为通常这样
会引入载入指示符这并不是很好
它的一方面是
如果你在应用中更新数据
这是一个很大的话题我们实际上可以花一整场时间来讨论
使你的Watch应用保持最新状态
请确保去看了这个演讲
但是我们现在想讨论响应用户操作时的网络问题
例如我们有食品派送应用
你想买一些食品并点击购买按钮
你的应用在这种情况下应当怎样响应?
我们建议你立即提供反馈
向你的用户而不是显示一个载入指示符
我们会用一个例子来解释那是什么意思
这是我在谈论的食品派送应用
我可以点击我最喜欢的商品那有一个大的购买按钮
我们认为这会是一个很快的操作
我点击购买我得到一个载入指示符
因为应用要和服务器通讯
它需要处理这个订单它需要得到确认
一旦它完成了
它需要发送回Watch
此时它才可以移除载入指示符
并且说 “你的订单在路上了”
如果我们看看它的时间线就会发现问题
我们从选择商品开始
我们点击购买
然后显示载入指示符
在这期间
用户只能抬着手腕看着你的应用
直到你显示确认
用户仅仅进行操作
在开始和结束阶段
大部分时间用来等待
我们绝对可以改进这类操作
如果我们回到我们的食品应用
点击购买按钮我们马上得到反馈
关键是这并不是确认
因为我们还没有进行网络通信
我们不能说订单已经在路上
因为我们不知道
但是我们想提供反馈并让用户相信
应用在处理他们的订单
并允许用户放下手腕
不需要等待应用
现在在后台应用会用
一个后台NSURLSession
来和服务器通讯
并最终获得响应
然后应用在后台被唤醒
现在它可以使用本地通知支持
来说“好的现在你的订单已经确认了 它在路上”
然后你有和之前相同的信息
看看这种情况的时间线
它显示这样有怎样的提升
我们选择商品 点击购买我们以相同方式开始
接下不不是显示载入指示符
我们显示反馈
在我们完成网络通信之后
我们显示通知
从应用的角度来看总的操作
和前一种情况一样
但是从用户的角度来看
感觉更快响应性更好
所以是一个更好的互动
我想要指出在这你实际上可以怎么
在用户放下手腕后进行处理
如果你进行网络通信
你可用后台NSURLSession
并确保使用一个下载任务
这将允许你的应用在任务完成后在后台被唤醒
在这时你可以进行本地通知
这对你的应用有意义
或者你需要在Watch中进行处理
你可以使用一个后台任务判定
我们对它有很好的介绍
在去年的会话中WatchKit提示和技巧
如果你要做任何处理请去看它
在Watch本身处理
2秒是一个大胆的目标
就Apple Watch上的互动应该多快而言
但我们认为它应该就是目标
当你开发你的应用时
因为它会告诉你怎样设计和开发应用
所以当你要开发新应用时
或者思考你已有的应用
确保在一开始就关注快速操作
思考什么特性
是你的用户想在你的应用上使用的
确保它们出现在最前
并且确实很快响应性很好
使用complications和通知
因为它们带来很快的操作
它们为你的应用带来很多可用性
使用SceneKit和SpriteKit创建丰富
且可操作的界面
它们能带来很多能力
为你新的和已有的应用
我们对你们将用它们做什么感到兴奋
简化浏览
再一次 watchOS做了很多工作
在系统层面简化浏览
但是我们也希望那也发生在所有的应用中
再一次 永远不要让用户等待
如果你在屏幕上显示载入指示符
试着重新组织你的应用允许用户放下手腕
立即提供反馈并让用户相信
你的应用在处理事情
想了解我们今天谈论的话题的更多信息
去查看开发者网站
这周有很多演讲我都强烈推荐
今天下午的设计优秀Apple Watch体验
或者明天的watchOS演讲
就这些了谢谢今天到这来
请在旧金山享受这种接下来的时光