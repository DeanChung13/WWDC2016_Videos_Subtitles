tvOS有什么新内容
欢迎来到tvOS有何新内容这一会话
我是Hans我是tvOS团队中的一名工程师
今年我们非常高兴欢迎你
参加tvOS第一次的全球开发者大会
那么我想通过对tvOS简要概述来作为今天下午的开始
我们会引导大家认识tvOS 10的一些新功能
然后我们将就其中的几个深入讨论更多细节
我们甚至有一个很好的案例示范
现在开始
仅仅九个月前我们发布了新的Apple TV
伴随它还发布了tvOS
tvOS是一个现代操作系统专为现代硬件所设计
而其仅是64位的没有32位的运行时间
因此它会为你节省很多的时间
来测试32位兼容性或为32位片段进行配置
与你的iPhone
iPad甚至Mac都不同
Apple TV一直连接到高速网络
这使得tvOS成为这样一个理想平台
在那里你可以卸载一些任务比如管理你的应用的资源
用户数据
甚至是你的应用内容将其放到某些技术中去 如CloudKit等
以及按需资源
CloudKit是你
在icloud中通往几乎无限的存储空间的界面
它为你的资源提供了一个结构存储
它也为用户数据提供了一个公共的和私人的数据库
正如你在前一会话中所听到的
可以跨iOS Mac OS和tvOS平台来将其使用
并且也可以被分享
并且由于到iCloud认证
你再也不必问你的客户
要一个单独的登录账号了
即使你的应用碰巧在其他没有CloudKit的平台上运行
这也依然成立
而通过使用CloudKit JS以及其网络服务API
你就不必去推出自己的解决方案了
而仍然可利用安全性和效率方面的优势
目前 如果按照传统做法客户不得不下载整个应用
这样才能将其发布并开始使用
而只要应用体积增大这就成为一个痛点
因为我们等着下800兆的文件不是要为了找乐子的
这不仅令用户沮丧
同时对我们开发者来说也是一个挑战
因为客户
甚至可能在他们能够尝试之前就对我们的应用失去兴趣
按需资源……
利用Apple TV的一直在线的优势
并提供一种机制据此你的应用甚至可以
在其所有内容被下载之前就作出发布
这意味着你的客户他们可以更快的用上此应用
而当应用被下载时
该系统可以继续下载更多内容
所以在需要它们的时候它们就已经准备好了
进一步减少等待时间
而且应用的尺寸可以非常大
事实上比传统上所能同意的大得多
让我们来看看这个
每个应用都有一个可执行资源和基础资源的主应用包
使用ODR时
你的主应用包的尺寸可高达200兆字节
你可以向此应用包添加第一组待下载内容
这样当应用安装时它们就已经准备好了
例如这可能是你的游戏的前三关
第一组被称为初始安装标签
而这可以最多高达两个千兆字节
如果你有更多的内容呢？
那么你可以指定安装之后
需要立即下载的额外的资源包
而这就被称作预取标签
预取标签用于你知道你会尽快需要的内容
但不够快到足以解释对你应用的首次发布的阻止
从而防止你的用户使用此应用
因此 例如
如果你的用户正在玩
你的游戏的第一关
该系统将开始下载第四、五、六关
而当用户过了第三关时下一关
已经下载好就等着用户去玩了
所以这样的等待就已经从用户被转移到该系统了
而系统不介意等待但用户介意
预取标签使用其剩余允许量时
其尺寸可以高达四个千兆字节
所以如果你为初始安装标签用了500兆字节
那么你为预取标签就有3.5千兆字节
如果你已经用了你的初始安装标签的两千兆字节
则你自然就为你的预取标签有两千兆字节
如果你没有初始安装标签呢？
从数学上来讲你的预取标签有四千兆字节 但是
你可能希望将一些内容移入初始安装标签
这样它们就可被早点使用了
类似的
在应用被进一步使用时更多的资源包可以被下载
总下载内容可高达20千兆字节
使应用包和可下载内容的总尺寸
达到令人惊叹的20.2千兆字节
而这不仅只是一个大数字
它还是一个客户感受不到其沉重和繁琐的大数字
因为他们可以更早开始
而且他们可以继续使用应用而没有多少中断
晶体管是一个很棒的游戏也是使用ODR的好例子
它的应用包有160兆字节
初始安装标签有500兆字节
所以它能快速下载并安装
但由于900兆字节的预取标签
玩家就可以不断被新而华丽的游戏关卡所挑战
而几乎没有任何中断
但是ODR不只用于游戏
我最喜欢的应用之一是Earthlapse TV
Earthlapse TV
推出从国际空间站得到的时间推移视频
并在你的客厅创建一个虚拟窗口
它拥有超过一千兆字节的超高品质的内容
然而它下载和启动都很迅速
并且在内容之间跳跃时几乎没有任何等待
所以这就是ODR
顺便提一下那是从Cupola模块看到的加拿大
现在让我们来看看我们如何与电视进行交互
我们每天都使用电话而且我们已经很习惯了
但独特的是我们的关注和行动都
就在我们面前在触摸表面上
然而当你看电视时
我们的注意力在10英尺之外在房间的另一侧
而我们的行动在遥控器上就在我们手中
两者之间没有直接的联系
tvOS提供了一个独特的机会
来使这方面的体验更为直接和相关
首先是Siri Remote
通过其触摸表面
Siri Remote实现了一种新的基于集中的交互
而其是专为这样的环境所设计的
通过在触摸表面上按下按钮和使用手势
用户可以将焦点从一个元素移到另一个上
停留在特定的一个上然后点击来触发操作
为了配合这一集中交互
tvOS也引入了一种新的视差效果
这种视差效果使你感觉到你的焦点在哪里
也让你觉得你和屏幕相连在一起
而利用视差效果的最好的方式
是使用分层图像
分层图像是为tvOS所设计的一种图像类型
当元素处于对焦状态时
它会增强深度和活力
它最多可以有五层
实际上它也是应用图标所需要的
为了创建新的分层图像你可使用Xcode的资源目录
Mac OS的ParallaxPreviewer应用
以及Photoshop的Parallax Exporter插件
当然所有这些都可从developer.apple.com下载
现在让我们退一步看一看主屏幕
主屏幕这里这个10英尺的体验被最佳示出
第一行应用图标上面是所谓的Top Shelf区域
而放在第一行的应用能够参与其中
你的应用可呈现最相关的特性或内容
因为内容的快捷方式深藏在你的应用的内部
所以你的客户可以直接跳到它
而这可能是例如你的电影的一张海报
音乐专辑封面横幅广告
或可让应用有意义的任何东西
Top Shelf是一个把客户带回你的应用的伟大的管道
因此我们强烈建议你利用它
而不是仅仅让它提供一个占位符图像
现在让我们再回到主屏幕
主屏幕上是你关心的应用的集合
如你在keynote中听到的
我们相信电视的未来是应用
这一切都被App Store所实现
App Store正如在iOS上一样 是你去浏览
发现和下载应用的地方
而且由于它在iOS和tvOS上都存在
所以它支持通用购买
所以如果你的客户已在iOS上下载了此应用
他们就可免费在tvOS上享用此应用只需按下一个按钮
由于Apple TV的持续连接
在tvOS 10中我们要介绍的是自动下载
所以在iOS上被下载的应用
将被自动下载到电视里
就那么简单
这样会更容易让你的客户来获取你的应用
但是你打算怎么将其建立呢？
tvOS 提供与iOS、Mac OS和watchOS相同的
开发工具和语言
还有许多你已经知道的相同的框架 例如
UIKit、Foundation、Core Animation
AVFoundation、Core Audio
等等等等 在tvOS上都可用
另外在tvOS 9.2中我们也把MapKit带到了电视之中
但是这仍然只是整个列表中的一个部分
可供你挑选的还有很多
例如 如果你正在开发一个游戏
你会很高兴知道
你所喜爱的所有游戏技术
在tvOS上都是可用的：
Game Center、GameController、GameplayKit
Model I/O、MetalKitPerformance Traders
SpriteKitSceneKit还有很多很多
要什么有什么
最后tvOS还引入了一个全新的高级框架
叫做TVMLKit
TVMLKit通过为你处理
诸如布局和焦点管理之类的重活累活
来使你可以相当方便的打造
以内容为中心的应用
而它通过为布局使用预定义模板
应用逻辑使用JavaScript来操作
它用于快速迭代和部署 真的很棒
而且当然它也被调整过来得到强大的性能
事实上Apple自己的一些应用也是用TVML
那个电影应用所打造的
的确App Store本身就是用TVMLKit打造的
而所有在iOS上帮你微调和优化你的应用
的开发工具
例如Unit TestingApp Analytics和TestFlight
在tvOS上也都是可用的
今年tvOS继续提供令人兴奋的新功能
如同你在主题演讲中听到一样
我们正在把HomeKit引入电视
这样就能从电视上控制与HomeKit相兼容的
配件了
我们也正在引入PhotoKit
这样你的应用就可以利用你客户的iCloud照片库了
使用SpriteKit甚至变得更简单了
多亏了来自焦点引擎的本地支持
你的运动和导航会感觉更自然
并与OS其他部分完全集成而这是免费的
说起运动和导航
玩游戏的一个组成部分是你如何控制它们
你可以把Siri Remote当做一个轻量级的游戏控制器
竖着拿并使用像刷卡之类的手势
以及例如 点击跳跃
来控制游戏
如果你的标题要求稍微复杂的输入
你可以把它作为仅有基本的D-pads
和两按钮控制的小型游戏平板电脑横着拿
如果你的游戏标题要求甚至更为复杂的输入
你可以使用扩展游戏控制器
和你在国情咨文演说中所听到的一样
最多可以用4个
你现在有一个选项
来要求使用基于MFI的游戏控制器
而app store将会在必要时根据情况
向用户弹出提示
我们也在将ReplayKit移入电视
使用ReplayKit
玩家可以在本地设备上录制自己的gameplay
并通过AirDrop与朋友们分享
但是这还不是全部
游戏玩家现可在诸如Mobcrush的服务上
实时广播其gameplay
在tvOS 10中我们也将和iOS 10一道引入
一个全新的UserNotification.framework
还有
ExternalAccessory.framework这个用于
来自iOS的蓝牙配件
我们也在推出一个全新的Apple TV遥控应用
最后用户可以设置其系统外观
的明暗程度
而当你实际打造应用时
你会有很多选择
你可能需要把UIKit用作你的基准
并利用所有可用的框架
如果你已经习惯全天然框架
或若你有一个现有的iOS应用
我们本周会有一些伟大的会话请你不要错过
包括在tvOS上掌握UIKit
在那里你可以把你的UIKit应用提升一个层次
而就在tvOS上的焦点交互
我们将回顾焦点系统
讨论一些tvOS 10上的新功能
还要讨论SpriteKit
我们还建议你看看TVMLKit
TVMLKit是一个令人难以置信的丰富的框架
若你的技能已经包括JavaScript和XML
那么就真的很容易使用TVMLKit
来迅速开发和部署以内容为中心的应用
而由于TVMLKit是打造于UIKit之上的
你甚至可以混合进UIKit中来做进一步的定制
而这些会话侧重从TVMLKit取得最大获益
所以我们强烈建议你来看看
如果你是一个游戏开发者那么当然
所有打包成GameKit的游戏技术
很可能也是你的选择
下面我要加速了
我们要深入研究tvOS 10中的一些新特性
为此 现在有请我的同事Marshall Huss
下午好我是Marshall我是一名tvOS工程师
今天我们要深入研究如何应用
tvOS 10中的某些新特性
在主题演讲中听到新的Apple TV Remote应用
我们来看看如何使用通知
当你有新内容时如何通知用户
最后我们要看看如何在你的应用中
实现明/暗外观调整
因此新的Apple TV Remote应用和Siri Remote的工作模式一模一样
所以不需要做任何更改就能让你的应用运行起来
它还包括一个新的游戏控制器布局
这样用户可以用它来打游戏
现在如果用户正在使用此应用
你的应用针对游戏控制器框架做了连接
则他们会在导航栏得到一个新图标
看起来是这样的
当该用户点击该图标时他们面前会呈现
一个游戏控制器布局可通过旋转电话来使用
要了解如何最大限度利用游戏控制器框架
我们本周晚些时候会有一个会话
种子今天就可用请去下载和尝试
接下来我们要看看通知
以及当你有新的内容可用时
如何使用它们来通知用户
你可能会习惯的一个操作此事的好方法
是把你的应用图标做成徽章
我们已经在tvOS 10中增加了这种支持
现在就iOS你得向用户要求权限
来把应用图标做成徽章
但在tvOS上这看起来有点不同
他们会得到全屏模式警报
所以一定要确保
你在适当的时间申请许可
否则这可能是用户使用应用的第一次体验
我们还添加了对于远程通知的支持
这样你就可以使用Apple的推送通知服务
来发送远程通知了
我们支持两种通知类型
那些都是我们刚才看到的徽章而且也会有内容提供
现在如果你的应用在后台
那么这些有内容可用的应用将不会叫醒你的应用
就像你可能在iOS中所习惯的那样
让我们来看看这是什么意思
比方说你的用户有新的内容可用
好的通知方式是发送一个
有内容的推送通知以及一个数值为1的徽章
如果应用未打开tvOS将保留此通知
并更新用户的徽章
现在用户获得更多的可用内容
所以你可以发送另一个推送通知其将更新徽章图标
tvOS将保留最新的通知
并等待应用回来
最后你会得到更多的可用内容
而你也可以再次更新徽章
当用户准备好之后
回到应用并看看他们有什么新内容时
他们可以打开应用
而我们提供上次通知这样你就可以到你的服务器
并也许获得任何可用的新内容
为了支持这一点
你必须使用新用户通知框架
如果你之前已经在iOS中应用过通知
你可能习惯了使用UIKit API
到现在为止那些在tvOS中是被禁止的
而它们将被保持禁止
所以为了全力支持本地通知和[听不清]的通知
你将需要使用新用户通知框架
我们本周会有关于你可以如何学习
在你的应用中完全将其应用的会话
而终于在今天我们要去看一看
tvOS上的新的明暗外观
我们看到这是给用户的一个全系统的设置
用户将确定其何时想在明暗之间
做出改变
现在要考虑的事情
是用户可能在不同的环境有一定的空间
它可以是在一个电影厅中那里很暗
它可能是在起居室中里面有很多窗户
或者用户可以根据一天中的时间改变它
所以为了尊重用户的选择为其提供最好的
用户体验非常重要
为了充分支持这一点我们已经
在UITraitCollection上添加了新的API
你必须真正选择加入黑暗的外观
如果你不选择加入
你的应用将继续留在亮处就像在tvOS 9中所做的一样
让我们一起来看看如何才能让你的应用
采用新的明暗系统的外观
第一步是添加一把新钥匙到你的Info.plist
我们添加了一个叫做UIUserInterfaceStyle
如果设置了明值它就总是解析为明
如果设置了暗值你的应用就总是解析为暗
或者如果你使用我们所推荐的 自动的
它尊重用户和系统设定
并通过你的应用进行传播
如果你用Xcode 8为tvOS制作新项目
这实际上将默认为自动
有新API和TraitCollection
我们增加了一个新属性称为UserInterfaceStyle
这可能有不确定的值可能是
如果你的视图尚未被插入视图层次结构
或者它可以或明或暗
具体取决于系统设置和你的应用支持什么
为了支持开发者将其采用
我们增加了开发工具支持
到界面生成器和模拟器
如果你使用标准的UIKit控制
这些实际上会为你自动改变
如果你习惯使用外观代理
那么重构一点点然后你就可以指定颜色了
这取决于TraitCollection
如果你想要最大程度的控制
你可以应用TraitCollectionDidChange
在你的视图或视图控制里
现在在界面生成器你可以指定颜色
就在检查者中规定明暗
我们向Storyboard增加了一个明暗预览
这样你就可以迅速开发和设计你的应用了
我们还向模拟器增加了一个快捷方式从而能
这些系统外观之间快速切换
我提过UIKit控制会将其自动更新
而我们在自己的系统应用中对其大量应用
我们看到某些视图
比如这个键盘或文本字段或分段控制
会自动更新风格以在电视壁纸上显示最好的效果
若你使用表格视图像我们在设置应用中一样
它会自动调整其背景颜色
文本颜色以及所有的参数来使其看起来好看
如果你正在使用系统内置键盘
那么那些也会自行调整
如果你正在尝试自定义你的文字
我们已添加支持到UILabel和UITextView
这样它们也就会自动改变其颜色
为轻巧美观文字颜色设置为黑色
外观为暗时它将被设定为白色
但有需要注意的是如果你设置过文本颜色
则你将自行负责为此两种模式
更新该颜色
我们还添加了两个新的模糊样式到API
你现在可以使用UIBlurEffectStyleRegular
或UIBlurEffectStyleProminent了
我们称这些为自动样式
他们实际上将基于系统设置内容来调整
有效的模糊效果的风格
所以如果你使用UIBlurEffectStyleRegular
而系统是浅色 则其将使用UIBlurEffectStyle.light
如果使用常规和深色你将使用深色
如果你使用突出 其将使用.extraLight和.extraDark
.extraDark被放在稍后种子中
现在你可以用外观代理定制你的应用了
所以你可能有这样的代码
它设置一个按钮的标题颜色为红色
重新调整一点点
就可为明暗两色都提供TraitCollection
而使用外观代理API
我们可以为那些具体的TraitCollections 设置一种颜色
现在这种情况下我们的按钮将在浅色外观下使用红色
将在深色外观下使用蓝色
最后如果你想要在这些变化中有最多的控制
你可以直接回复他们
使用TraitCollectionDidChange你就能在
在你的视图或视图控制器中做到
让我们来看一个对此应用会是什么样子
首先我们在视图控制器中覆写了TraitCollectionDidChange
然后我们检查以确保UITraitCollection
对新的用户界面的样式属性
这使我们能够在tvOS上为我们的用户建立这个功能
但依然支持可能在使用tvOS 9的用户
下一个
我们检查用户界面风格实际改变了
否则我们可能会做比我们所需要的更多的工作
最后我们可以检查用户界面风格
并相应地更新我们的控制
现在对此的一项高级用途是
你是否想覆写TraitCollections
可能是这种情况如果你希望你的应用
支持自动风格但也可以在你的应用中
有某些视图或视图控制器
而你想要指定样式本身
我们将此用于我们的系统应用
我们的产品页面和电影而电视节目实际使用
其艺术作品所基于各种元素的样子
在这种情况下我们有浅色艺术作品
所以我们就按钮样式使用黑色文本
使颜色鲜活
我们也有深色网页我们在深色风格上
用白色文本 而按钮也被相应更新
为了覆写这些TraitCollections
我们使用API其已经被添加进iOS 8
而这是用于ChildViewController的setOverrideTraitCollection
为了将其使用我们可以用小包装
让我们看这样一个例子可能可能看起来像
首先我们创建...
一个新的类AppearanceViewController
然后我们从UIViewController处继承
我们可添加一个属性它有这样的一种风格
即我们可能会想设置ChildViewControllers
然后我们可以添加另一个属性在这里我们
实际设置视图控制器
然后我们为ChildViewController设置了OverrideTraitCollection
用我们指定的样式
最后我们使用标准ChildViewController包含
现在如果你想使用这个类
我们可以提供AppearanceViewController
指定我们想要的风格无论基于我们希望的何种属性
我们可以设置ViewController
然后我们将其转让给用户
接下来有请Brandon
来向你展示怎么样来为tvOS 10而更新你的应用
谢谢 Marshall
大家好 我是Brandon
非常激动向你们展示我们一直在努力做的tvOS应用
它被称为世界壁炉
壁炉爱好者们到目前为止很喜爱它
让我们来看看
这个应用允许你把来自世界各地的壁炉样式
直接带到你的客厅
让我们来看看佛蒙特州的壁炉是什么模样
啊 这里感觉很舒适 不是吗？
我认为这很棒
现在尽管模拟器外观将被设置为深色
我们的应用使用的是默认的浅色外观
因为我们没有指定偏好
我很高兴能采用新的深色外观
让我们现在就去更新应用
我们需要做的第一件事情
是将此新用户界面风格密钥添加到我们的Info.plist
我们会把它的值设为自动并重新运行我们的应用
我们选择自动因为我们希望让我们应用的外观
匹配用户的外观设置
好的目前为止看起来很不错
所以我们所有的标准UIKit视图都已被自动更新
因此在这种情况下标签栏和壁纸
现在就有了一个深色的外观
对于你们某些来说
这可能就是你更新你的应用所需要做的一切
但是我们的设计师已经决定
他们希望深色外观有一个不同的标志颜色
而在集合视图样式中的背景颜色
有那么一点点突兀
那么就让我们来做这些更改
让我们去我们的main.storyboard
而我们需要做的第一件事
因为这是一个现有项目
我们需要在Xcode 8中启动性状变体功能
因此要做到这一点我们会去文件检查器中
点击Use TraitVariations 复选框
当我们这样做时会得到警告即性状变化仅仅兼容
Xcode 8或更高版本
这很好 所以我们将继续
现在我们要点击我们的标志去Attributes Inspector
在一些属性旁边有这些新的加号按钮
所以我们会将其点击
并为我们的标志图像添加一个深色接口
我们会将其指定为黄色
现在Xcode 8一很酷功能
可在InterfaceBuilder的外观间
直接切换
要做到这一点我们就下到我们的故事板的底部
并点击View As:Apple TV（浅色风格）.
我们在这里有两个选择
浅色和深色
当我们点击深色时一切都将自动更新
我们的标志变了颜色
而且标签栏和墙纸也都已经改变了颜色
看起来很不错现在来更新我们的背景颜色
在AppDelegate中
我们使用外观代理来设置我们CollectionViewCell的
背景颜色
现在我们要背景颜色根据具体特性变化
因此我们需要使用具体特性的外观代理
所以首先我们要通过创建一个UITraitCollection来开始
因此用浅色的UserInterfaceStyle
来让浅色等于UITraitCollection
然后我们将更换我们的通用外观代理
用的是具体特性的外观代理
因此对于TraitCollection我们会用刚刚创建的TraitCollection
就深色我们会同样操作并指定一个不同的背景颜色
现在我们无法在Interface Builder中查看
我们重新运行应用
我们增加了一个键盘快捷键这样你就可以切换
在模拟器中的浅色与深色外观之间快速切换
要做到这一点点击Command Shift D
来切换浅色外观
然后Command Shift D来切换回深色外观
到目前为止看起来都相当不错
但我注意到 现在我们已经改变了
我们的背景颜色却很难再看到图标了
所以让我们把这个也更新一下
我们会去我们定制的收藏ViewCell子类别
而之前我们在awakeFromNib功能中设置着色颜色
既然我们要在我们的TraitCollection改变时让着色颜色改变
我们将覆写TraitCollectionDidChange功能
我们将使用与我们的浅色界面风格相同的的颜色
而为我们的深色我们将实际使用浅灰色
现在TraitCollectionDidChange将在每次
你的视图被添加到一个视图层次时被调用
我们在这里删除我们的初始化代码
但为了向下兼容我们只是把它留在那里
让我们运行应用看看现在效果如何
好的 看起来好多了
让我们切换到浅色外观确保一切都没有改变
看起来仍然不错
现在回到深色外观看起来真棒
我们刚刚更新了我们的应用来采用新的深色外观
我们已经为tvOS 10做好准备了
现在有请Hans回到舞台
谢谢你Brandon
非常棒的案例示范
所以和你所见的一样
采用浅色和深色外观是相当容易的
我们希望大家都可以在你的应用中很快采用它
今天下午我们已经看到了tvOS中的许多功能的一小部分
tvOS提供你已知的相同的工具服务和框架
所以它真的很容易上手
而基于焦点的交互
结合了视差效果的分层图像和Top Shelf
它们一起共同创造了
一个直接和相连的10英尺体验
而有了Universal Purchase和Auto Download
你的客户将能够从未如此密切的享受使用你的应用
我们也推出了一个全新的Apple TV Remote应用
而且它已经被做成了一个种子就请下载
并用它测试你的应用
而有了ReplayKit和SpriteKit支持
且直接来自聚焦引擎
游戏体验更棒了
最后用户可以根据其喜好来设置自己的系统外观
我们希望你会就所见所闻而高兴
通过本周许多很棒的会话
你还可以学到更多
今年早些时候的 AppleTV Tech Talk视频
就指导你完成基础知识学习非常有用
也可从developer.apple.com下载
当然所有这些信息都被放在会话链接
最后
等不及要看到你们为电视的未来所创作的产品了
非常感谢大家的光临请享受其余会议