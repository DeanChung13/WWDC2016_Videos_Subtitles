UIkit 动画和过渡的新进展
下午好
我是Bruce Nilo
我是UIKit的一名工程经理
今天 我和我的同伴Mike Turner都非常兴奋
我们会介绍一些新的动画API
在iOS 10中的UIKit将会包含这些新特性
我们相信这些API将会让你更简单的
创建自然的 顺畅的
和可响应的应用
今天我们会先快速重温一下
UIKit中已有的一些隐式动画API
然后我们会深入的介绍一个全新的类
我们叫它UIViewPropertyAnimator
我们还会介绍一些用于视图控制器切换的扩展
以便于你们更好的使用这些新类
Mike将上台给大家一个很棒的展示展示如何使用这些新的API
还有一个全新的图片应用的例子
不久你就可以下载到
我们还会讨论一些细微的问题
关于这些新类的触摸处理和点击测试
和该如何使用这些新的类
来创建甚至可以被中断的关键帧动画
UIKit中的隐式属性动画
基本上是为了
让你可以创建动态的内容
你可以通过设置视图的属性并让动画在一段时间内发生
它是隐式的因为UIKit为你创建了动画
值变化时会被记下来
用原始值和最后的值做个差值
这个值会在你指定的时间段上
用一个可选的定时函数决定这个动画的节奏
我们再具体的介绍下
这里有一个非常简单的动画
今天的展示中我们会一直使用这个例子
我们有个圆基本就是从左到右来运动
通过设置视图的中心属性来让其运动
在这个图中我们看到一个虚线圆形
或者是一个虚线正方形它代表了视图
在实际动画中你看到的样子
而实线形状代表目标值
我们也分别把它们叫做模型值和展示值
我们开始这个动画然后它以一定的速度进行
实际上你会注意到这个速度是恒定的
问题是今天我们将要怎么做
今天的实现将会很简单
你们中大部分可能熟悉animateWithDuration API
在这个例子中 我们指定在X轴上
圆的中心应该从0移动到100
现在定时函数可设置为.linear
简单来说它表示一个特性函数
我们快速介绍下在UIKit中什么是定时函数
它是一个三次函数映射"0到1"到"0到1"
同时有两个约束
就是说 在动画开始的时候
即在一开始时
动画进行的速度值就是这个开始值
结束的时候 就是结束值
现在定时函数不定义你的动画速度了
现在通过这个夸大的渐入定时函数可以很容易的实现
你会注意到动画进行到一半时
它的进度移动很少
它真的时进行的相当的慢
我们差不多离完成有90%了
但我们还是只到了一半的位置
在你指定时间的最后10%里
我们将会完成剩下的距离
简单说 它会加速
从速度非常慢到非常快直到最后
这就是定时函数的作用
现在UIKit有四个定时函数
这些是特定的三次贝塞尔函数实例
这是我们以前看到的特定函数
这是渐入渐出
这是渐入
最后 这是渐出
这些是我们提供的非常细微的函数
将会影响一部分动画的感觉
关于回弹会有什么呢
我们也有隐式的动画API提供给你来设置一个回弹
我们不会否认如果你想说
"那不是实际的插值
我们把这个值做得有点过并且有点回弹"
然而 接下来 大家可以都
想一下把回弹作为另一种类型的定时函数
现在看看我们为什么能这么做
来看看这个简单的应用
我们让一个方块从左面移动到了右面
我们绘制了位置移动图
在方块移动的过程中
它有点像定时函数
实际上它不是立方函数
我们过度设置了它的值
但我们仍可认为它是可以影响动画的速度的
接下来的API中我们将会对回弹动画进行分类
现在在iOS 8中有另一个重要的用来制造动画的版本
我告诉你这些
因为稍后我们还会谈到它
简单说 考虑一个动画在动画进行的中间改变
所以你将从一个位置到另一个位置
到一半的时候 你变了
在iOS 8以前 如果你这么做你的动画将会有一个中断
除非制定了一个特别的配置
UIViewAnimationOptionBeginFromCurrentState
如果你这么做了将会看起来好一点
将不会有间断和跳跃
但是仍然不会顺滑
速度变化的很突然
在iOS 8中我们做了一个重大改变
动画中的特定的属性被渐进的完成
我们没有移除之前的动画我们把后来的加了上去
这样能平滑处理速度的变化
通过使用新的UIViewPropertyAnimator第一种情况就不会再存在了
好的 现在我们看看新的类我们已经快速浏览了
它的一些特性
我们已经很熟悉了
如果你熟悉以前的animateWithDuration配套的API
新的API你也不会陌生
它是可以被中断的
这意味着你可以暂停和停止动画
你可以打磨它们意思就是说你可以让它前进后退
用你喜欢的方式基于这个可编程的API
你可以反转它们
你可以说别担心 往回走
我们将会介绍一整套定时函数
而不仅仅是以前的那四个
通过回弹动画的一种小的子集
最后 当动画运行时
往上添加动画将会非常简单
但是介绍这些API有点困难
所以我不打算做这挠头的事
让我们大体看一下这些API是什么样子
在所有这些新类的中心是UIViewPropertyAnimator
它实现了两个新的协议
把它们作为协议实现的原因
或实现这两个新的协议我们将会看到它会非常有用
当我们把它和视图控制器切换放在一起使用时
当你创建一个属性动画生成器
你将会创建一个新的对象类型
这会高效的指定定时函数
将会使用在你的动画中
我们提供了两个新的具体的类来实现
我们已经引入了一些新的枚举
以供协议中的方法使用
例如 动画生成器的状态可以为非活动活动或者停止
一会我们再讨论这些
我们也引入了位置
即动画停止的地方
动画会遍历所有我们设定的地方么
我们是通过反转它来回到开始位置么
或者我们可能打断了它还有可能其他的实现
好的
我们先来集中在这个图的中间部分
然后我们会简要说下所有的这些新的定时函数
那么我们来看看这个角上的API
它被定义在UIViewAnimating协议中
有趣的地方都在这
实际上这非常的简单
有几个属性你可以获得和设置
比如 你可以设置fractionComplete
你可以让动画开始
你可以暂停 停止 完成动画
这些都不用过多解释
下一个协议给这个动画生成器增加了隐式的特征
比如你想在哪里设置块和目标值
给这个设置动画的属性
这里同时有个有意思的方法叫做continueAnimation
能让一个暂停的动画
和一个完全不同的结束时间一起处理
甚至是一个不同的定时函数
UIViewPropertyAnimator有几个构造方法
也有一些属性用来处理触摸事件
我们会在最后讨论它
首先我们讨论下如何使用这些基本的东西
我们将会讨论一些不是那么明显的细节
你可能会在暂停和刷新一个动画的时候遇到
同时也有一些有趣的可能
取决于你如何反转一个动画
最后 我们会介绍所有的定时提供者
让我们从一个实际的简单的动画开始
同时我让这个例子变得更有趣了一些
为了教学目的 稍后你会看到
我来问个问题
“你将怎么样使用属性动画生成器来完成它”
它非常非常简单
第一步需要创建一个定时对象
就像以前用的枚举.easeInOut
你需要指定持续时间来实例化其中的一个对象
和这个定时对象
通过使用闭包添加动画
更新你想设置动画的属性
你可添加一个可选的完成后执行函数
这个例子中这个函数把背景色变成了橘色
然后你可以在任何时候开始这个动画
是的 相对于旧的API有点繁琐
但现在你有了个对象
你可以用它来做所有的事情
这和以前有点不同
让我们看下UIViewPropertyAnimator一些其他可用的属性
其中有三个比较有意思
有状态 有是否在运行
和是在正向还是反向在运行
这些都是KVO中可观察的属性
第一步你需要做的是添加一个动画
我们将会让这个圆再一次从左移动到右
一旦你开始你应该添加一个动画闭包
你可以开始这个动画
然后你开始这个动画动画的状态会改变 变成运行
现在这个视图实际的值开始改变
有一个目标值你可以在屏幕上看到
然后动画开始运行
现在不同的是我可以在动画运行的时候暂停
我可以通过让动画生成器暂停实现
我还可以让它从相反的方向再来一次
现在动画还是在在暂停中你可以注意状态的变化
然后我开始
动画开始运行从相反的方向
现在我再改变 动画接着向前运行
当完成的时候
将会调用你注册的完成处理函数
这次我们通过.end来调用
我们一直用这种方式来初始化
如果在动画运行时我们没有再一次反转它
我们将会调用.start来完成动画
这样 你的结束处理函数能知道动画实际是在哪儿结束的
好的
除了暂停动画还有其他你可以做
你可以停止动画
这是什么意思呢
首先你会注意到的是 立刻
这个圆在中间停住了
在屏幕中间可以看到我们明显提示了
动画视图的实际模式数值
这时你可以对这个圆做任何操作
但我们传了个false参数来停止
表示不要立即跳到
非活动状态 保持在准完成状态
它表示在未来某个时候
你将调用finishAnimation
同时你将指定一个动画实际结束的位置
在这个例子中 我们既不会在开始完成也不会在结束完成
你的完成函数将会在这个位置被调用
现若你调用了stopAnimation并传入了true参数
我们将不会调用你的结束函数
它将会在那个点完成
现在我们看看如果你调用finishWithADifferentPosition会发生什么
若调用finishWithTheEnd
它将会直接跳到动画的起始位置
你可能回想“为什么需要这么做”
实际上这给了你很多可能
比如 想象下你将要暂停这个圆
或者在你触摸它的时候来暂停动画
然后你可以拽这个圆来回转动
也许你设置了一些UIKit的临时行为
在结束位置或者目标位置
当你释放它 根据你手势的速度
它可能卡入那些相对位置
一旦到达了那里就可调用finishAnimation
通过.end和.begin
然后你可以做一些有意思的事情
来种植你开启的动画
好的 暂停和刷新
不是很多 对么
这有点意思
这里有个样例程序
我们给这个方块设置了一些手势识别
在那个绿色进度条上
我们可以刷那个进度条
我们用方块的位置更新它的值
然后我们继续操作方块
你会发现移动的时候方块的位置
在图中看起来有奇怪的突起
这里我们简单的说下
在介绍之前 我们看看这些手势识别
在方块上 我们添加了轻触手势识别
来检查动画是否是活动的
如果是活动的 它将会检查是否在运行
如果它在运行 将会暂停它
如果不是 它将会重新开始
相当直观
在进度条上我们设置了一个平移手势
我们会根据位置计算一个分数
我们在平移时
相对整个进度条的边界
根据我们计算的分数
我们将同时更新动画生成器和进度条作为fractionComplete
好的
那么 这个图怎么了
有些有意思的事情在发生
方便解释它我将会回到之前类似的
夸大的渐入曲线
这次 进入了50%
我们暂停了动画现在我们想刷信它
需要重点注意的是fractionComplete
实际上你的设置和时间无关
我们刚暂停了动画
你设置的是相对于终点值的小数
在这种情况下 我们不会有任何进展
现在我们将会刷新这条线
我们将会继续来一次
我们不想跳到能看出位置
这个正在设置动画的视图
所以 实际上 我们是把时间映射回
定时函数开始的位置
就是说当我们继续这个特殊的例子的话
这个动画将会快速的完成
所以当我们回到刚才看到的曲线
你会发现我们有点往回跳
到渐入渐出定时函数
并且注意到这很重要当暂停和刷新的时候
根据任何UI提示你可能需要这么做
你可能会看到这些不连续性并且需要做些补偿
好的 让我们谈下反转
有三种方式你可以用来反转
一个是你可以暂停反转 比如需要交互
需要再来一遍
你会发现你是字面上的直接反转回来
通过你指定的定时函数
你可以在任何时候反转
就是说 即使在动画运行时
你也可以来让动画反转
这有点像打一堵墙
再一次这将会导致速度上的很大的不连续性
这将可能是你想要的
如果你想要一个完美的非弹性碰撞或者类似的东西
如果你不想这样或者你想让它更顺滑些
你可以累加的使用动画
在这个例子中 我们将会反转动画
不是通过修改反转属性
二是通过实际的修改值到原始的位置
它们的不同是
结束的时候处理函数的调用
.end函数将会被调用
你已经改变了目标
你将不会回到初始的目标
你将会回到你刚才指定的目标
好的 有些有意思的
定时对象可以用
第一个是UICubicTimingParameter类
如果创建这一类时不设定任何参数
你将得到默认的core animation时间曲线
这之前在UIKit层面并不可用
第二 构造函数变量
本质上是现有的canned动画曲线
最后我们开放了所有l可用的贝赛尔曲线
供你在这个单位正方形内使用
举个你可能会做的事情为例
这个特殊的贝塞尔曲线如果给它个名字
就叫“快进 快出”
你一定会欣喜若狂 当你看到想要用来创建时间函数的贝塞尔曲线
我们已经为你们提供了更多方法去做比如弹跳这样的动画
而且再来想一下我们认为弹跳现在会影响时间
如果创建UISpringTimingParameter对象时不设定引值
你会获得一个临界阻尼的弹跳动画
这是很多人想要的动画
比如我们就会用这个动画在导航控制上进行推入或调出
第二个变量很像现有的UIKit弹跳动画应用编程接口
但是还是点小区别我马上就会讲到
但在讲这个之前
我们以为你打开了一个弹跳方程
你可以定义任何你想要的系数
我们也会切实重视这些系数
但这里有个问题
就是你定义的时长被忽略了
我们对这个时长的计算是根据弹跳方程的解法
举这样一个例子
我说过他们之间有区别
你会发现初始的速率现在变成了矢量
而不是标量
很多时候我们不会注意
这个矢量的y分量
但是如果你在视图中心做动画
那么这个矢量的x和y分量必须都要注意
原因就用这个应用程序实例说明
我们将正这个方形拖离中心
并在松手的时候要让它
根据手势的速率弹回中心
直至现在这个速率始终沿着一条线
就是两个正方形之间的连线这不是件好事
因为我的手势可能在平面的任何地方结束
而我们事实上并没有实际考虑到这一点
但现在我们想到了
所以我们来看一下这个小视频
展示了我们现在是怎样让正方形弹回中心
并将二维矢量位置都考虑在内
你会看到在我们开始做时
会同时考虑到x和y分量
这很简单
现在我们有了这个很好的属性动画
那么如何呢？
我想要利用它实现自定义视图控制器转换
而且我希望它们也是可中断的
三年前我就此做了一整场演讲
所以它的确有些复杂
如果你不熟悉自定义视图控制器转换
请参考之前的演讲
但我会快速地概述一下打个基础
准备讲解我们如何拓展这些协议
视图控制器转换一般是一组连锁协议
其中两个包括交互转换和动画转换
他们是你创建对象时需要符合的协议
好吧 是你创建的对象要符合的协议
系统会创建另一个对象并传递给
该协议的方法
这个稍后我们会讲清楚
但是要记得我们为什么想这么做
假设你有一个应用程序带导航控制器
而且pop看上去挺正常
它是个不错的临界阻尼弹跳动画
但是你的应用需要点不一样的东西
它需要的是完全不一样的外观
它可以爆炸式弹出或许下面还带模糊效果
这就是自定义视图控制器转换让你能做到的事情
而且它还可以让你的编写和驱动更有交互性
要得到这些符合协议的对象
只需要通过一个代理
它可以是导航控制器代理
也可以是视图控制器的转换代理
我们要问这个代理
“你是否都有符合动画转换的对象
可以在任何时候显示推入或者弹出？”
如果有 我们将绕过内置转换
我们要创建其中一个转换context对象
它可以给你所有你需要的信息
去实现转场动画
我们会命令animateTransition将context传递给你"
那如何让这个流程可中断？
我们所做的是添加了新的方法叫interruptibleAnimator(using
如果要执行它你需要返回一个对象
符合UIViewImplicitlyAnimating
他可以是一个UIViewPropertyAnimator
但不是必须的
它也可以是另一种动画
即你的执行可以根据UIKit动态或者其他动画策略
如果你不执行交互控制器
意思是你只执行了自定义动画控制器
那么你需要执行animateTransition
这个十分简单只要你用这个方法
你只要接收可中断的animator然后返回值
然后只要给一个开始命令
这就是执行animateTransition的所有步骤了
但是我们建议你使用交互控制器
如果你想让它变成可中断
重申一下首要的事就是要符合
是说返回的对象要符合转场动画的协议
然后我们会要你提供一个符合交互转场的对象
并且会传递之前返回给我们的对象
是作为一个参数来传递
很多时候你希望这个交互控制器
可以真正驱动动画控制器
若是如此 我们就不用调出animateTransition
而是调出startInteractiveTransition
传递的context是完全一样
用animateTransition也是这样
我们会提供一个具体的类你可以直接使用
这样操作起来就十分简单
在此之前还有一个限制
若要执行UIPercentDrivenInteractiveTransition
那么animateTransition方法
在动画控制器中的执行就要按照
现有的UIKit动画应用编程接口执行
但是现在有了可中断的animator
UIPercentDriven InteractiveTransition根本就不需要在意这个接口
只要使用UIViewImplicitlyAnimating定义的协议
就这些了
这样你就可以真正创造一个全然不同的动画
由UIPercentDrivenI交互转场驱动
这是不是很酷
假设你已经有了一个这样的动画
也有了一个自定义转场
如何将他们合并呢？
一种方法从表面上来讲
将animateTransition方法重命名为myAnimateTransition
再用同样的方法创建可中断的animator
你就只要添加这个任务方法到
animator中一个动画上就可以了
这不难
我们的确要拓展协议中的某些对象
比如现在的context转场中就添加了pauseInteractiveTransition
现在这就是进入交互状态的方法
在这之前要先启动交互并关闭非交互式
现在你就可以来回移动了
移动要通过调用pauseInteractive结束或取消也一样
同样isInteractive属性以及
transitionWasCancelled就可以随着你的前后移动
在交互和非交互中切换
我们添加了一个变量叫wantsInteractiveStart
既然已经可以前后移动
那你也许想要交互控制器从非交互式出发
此变量就控制这一行为
最后我们更新UIPercentDriven交互转场
这有几点规定
如果执行InterruptibleAnimator
我们希望它能真正有用
就是说不做其他事情
系统可能会很不高兴
我们会始终调用animateTransition
并最先启动startInteractiveTransition
这样就有很大的空间
去创建可中断的animator因为它将在
之后编写中被重复调出用同样的context
我们也希望返回值能一直是同一个
最后animator的时长可以涵盖整个转场时长
在整个转场结束之前它必须处于活动状态
现在请Mike上台为大家展示如何在应用程序中使用应用编程接口
没给你留多少时间
谢谢你 Bruce
不客气
首先来看这个演示应用
这个应用使用UIViewPropertyAnimator
和UIViewController转场的添加函数
在基本应用中创建完美的可中断自定义转场
第一 应用要使用UINavigationController
并且内置有一个集合视图控制器
这是个照片格子可以拉动浏览
当我们点击其中一张照片
它会推进导航栈上其他视图控制器
让你的图片视图更加清晰具体
如果我们点击返回键这个视图就弹回导航栈
另外我们可以滑动屏幕从左向右
实现交互转场返回
这些在UINavigationController基本都免费
就像Bruce刚才所说我们还有很多套应用编程接口
能让你自定义转场
如果我们想放大照片
让他铺满页面我们也可以做到 这很酷
点击返回键照片就缩小回去
这些在此之前都只是设想
另外你也可以向下拖拽
来启动交互转场再转动几下
让整个动作以动画方式完成
我想向你们展示的是我们如何做到这样
通过使用UIViewPropertyAnimator
首先你做的就是告诉系统
这里应该说是导航控制器
你要提供一个自定义转场
那么这里我们就要符合导航控制器的代理
通过AssetTransitionController来实现
这是我们创建的对象可以执行这些转场协议
这里我们要注意两种十分重要的方法
第一个是调出动画控制器
通过一个特定操作推入或弹出
我们要保存该操作然后返回值给自己
因为我们就是动画控制器
然后当我们将对象从那个接口返回后
系统将调出一个交互控制器
在这里我们还是返回值给自己
因为我们也要扮演交互控制器
完成之后系统就会知道
这里会有一个交互转场
现在来看一下UIViewControllerInteractiveTransitioning
这里系统会调出startInteractiveTransition
并以转场context调出我们的对象
这会包含所有有关信息
对于我们开始自定义转场十分必要
这里我们将创建一个辅助对象
一会儿我们会看到更多
这个对象将会创建我们的转场动画
我们要将context传递给我们之前所保存的操作
同时也要传给panGestureRecognizer就是之前用于启动交互转场的程序
IOS10允许交互转场
分两个进程开始动画进程和交互进程
若从panGestureRecognizer开始
就要设initiallyInteractive变量
为真以便系统知道
我们正在开始这个交互转场
下面看一下动画转场的执行
这里我们不太在意动画方法
就像布鲁斯提到那样我们使用的是交互控制器
它会调出startInteractiveTransition
相对于animateTransition
但iOS10里新的可中断动画接口
才是我们真正的兴趣所在
这里是我们的辅助对象
一会儿会看到它创建了一个UIViewPropertyAnimator
并且将它的值返回了系统
所以这里就是系统添加任何并列动画的地方
在这个演示中你会看到顶部的导航条
跟着我们的转场一起在动
系统会利用这个animator来添加这些动画
现在看看转场驱动辅助对象有多快
在此 startInteractiveTransition初始化了这个对象
这就会联通抱歉
是这里
这就可以联通这个辅助方法
和一些动画然后它会设定一些
背景动画给这个转场
视觉效果就是动态的
这两个视图控制器和alpha也是动态的
我们稍后再讲图片边框切换
它会传递完成关闭指令也会帮助清理
一些背景视图
但是这里的重点是我们如何创建这个属性动画
并返回到interruptibleAnimator接口
首先我们从辅助函数中获得一个转场时长
我们也是过会儿再看这个
创建PropertyAnimator并选择时长
以及easeOut曲线
我们会在收到的动画间传递
并在这里创建一个完成处理
然后调出这些传给我们的完成命令
重要的是我们要调出
转场context在动画结束时
告诉系统“嘿 我们的转场完成了”
然后到了...
抱歉
completionTransition接口有一个博尔值
让我们可以得到应该传递的值
所以从这个接口传递“yes”
这就意味着我们要结束这个转场
如果传递“no”意思就是取消转场
在我接着讲转场动画辅助对象之前
我想再展示这个演示应用的一些其他特点
都由UIViewPropertyAnimator实现
回到演示应用我之前展示了如何放大图片
和通过点击返回键缩小屏幕
但我没有展示你可以在半空中暂停
现在我们正在动画进程但是暂停动画
然后进入交互进程
这样与照片的交互就在转场中途开始
当我们松开手动画会继续
然后可以再次中断
这样我们可以自由来回往返于动画进程
和交互进程之间
这真的很炫
在返回代码告诉你我们如何做到之前
通过用新视图控制器接口
我想用具体的场景来帮助大家
理解这些代码是做什么的
假设我们正在开始
用panGestureRecognizer向下拉动视图
从而开始一个交互式转场
然后我们从屏幕上拿起手指
开始动画进程在动画播放时
我们在中途暂停然后再次回到动画
然后取消转场直接向上拉回
这就是我要描述的场景
对照下面这段代码
我将这个示例应用分成了四个方法
updateInteraction是手势识别处理
用来更新交互转场
当抬起手指
调出endInteraction函数
然后调出动画函数添加动画
在开始或者结束位置
然后当我们中断动画
最后调出pauseAnimation
这个可以在转场时长中多次循环
想做多少次都可以
这里我们只做了两次
然后是updateInteraction
这是手势识别处理
当它调出“状态开始”或者“状态改变”时
我们会看到手势识别的翻译
我们就会用这个去计算要添加的进程步骤
把他们作为fractionComplete添加到转场动画
之后要在背景中擦除这些动画
就像chrome导航条的背景视觉效果
这个很简单
就跟在转场动画里设定fractionComplete一样
这就可以基本免费擦除所有动画
再调出transitionContext
来更新交互转场percentComplete
最后我们的图片就可以在屏幕上移动了
当处于转场的交互进程时
我们要手动设定边框
因此我们要做一个小的辅助函数
最后我们重新设定这个手势识别的翻译
当我们收到指令时手指离开屏幕
手势识别会出现“状态结束”然后调出endInteraction
研究endInteraction时
第一只看我们的转场context是否是交互的
我们要保证它是在我们离开交互进程之前完成
然后调出小辅助函数
它告诉我们这个完成是在
动画的开始位置或者结束位置
如果在结束位置完成
调出context以表明
“嘿 交互转场在这里结束
我们要进入动画进程了”
如果在开始位置完成
意思就是我们取消了这个交互进程
将要进入动画进程
然后只要做动画就好
现在来看动画方法
之前我告诉你们转场动画转换的是
背景chrome和alpha通道
但这里我们要创建一个二级propertyAnimator
我们要使用它来绘制边框动画
让图片可以在屏幕上移动
我们之所以这么做是希望有些动画
能有不一样的时间函数相较于背景动画而言
一会儿就来讲看这个
这里我们要做的只是插入动画
具体定义结束位置
或者只是定义目标或者是图片的初始边框
随后开始这个属性动画
并实时记录
要记住我们还有一个转场动画
时长与我们之前返回系统的转场时长一样
我们只要确保这个动画的方向是正确的
如果我们定义一个toPosition值为“开始”
我们需要推翻该animator
最后 如果这是第一次联通这个动画
转场动画就会处于非活动状态
所以我们要做的就是开始这个转场动画
然后就进入动画进程
另外 如果程序开始后又暂停了
我们要用不一样的东西
调出continueAnimation
withTimingParameters和durationFactor
continueAnimation让你可以暂停一个动画
根据不同时间参数和不同的时长
和剩余时长随你喜好
这里要传递“nil”
表示我们要用的时间参数
是在初始化这个转场动画时就已经输入过的
但是我们需要改变后续动画的durationFactor
这使得我们能使时长同步
让新创建的itemFrameAnimator时长
与这个转场动画的剩余时长一致
durationFactor从而定义为
1.0等同于之前设定的初始时长
在创建转场动画时
这就是开始动画进程要做的所有事情
循环的最后一步
看一下pauseAnimation
这发生在动画进程中但是暂停了
把手指放在图片视图下方
然后只要设置一个手势识别在这个示例应用中的图片视图
现在这都是免费的了
因为UIViewPropertyAnimator会自动点击测试动画视图
在刚刚创建的itemFrameAnimator里
我们要完全停止这个动画就要设参数值为“真”
告诉系统我们不想再继续此动画
而且我们要直接写模态值
应该是显示值直接返回模式
之后回到转场动画调出pauseAnimation
就像updateInteraction里看到的一样 我们会擦除动画
在我们与图片互动的时候
最后我们会告诉转场context
我们要离开动画进程回到交互进程
我再给大家展示另一个技能和诀窍
也是这个演示应用的一个小细节
我们看到现在这个时间很慢这是出于展示的目的
但你可能想要更自然的感觉
再更生动一点
所以如果我们要更改弹跳的时间
让它跳出页面
而且只让图片跳出页面
而这些背景动画还是继续
按照我们定义的easeOut曲线运行
其实我们可以实现这个变化
让视觉更加生动只用一行代码就可以
而且在非中断时还可以继续互动
那么快速看一下这行代码
回到演示应用
看看propertyAnimator的方便方法
注意我们正在定义一个属性动画
其时间参数在这里为线性
这也就是为什么感觉动画很机械
我的一个同事留下了这个伟大的注释
来定义某些SpringTimingParameters
并使用大规模数据 强度阻尼和初始速率
这样就完整的定义了这个弹跳
当在创建propertyAnimator
我们正在传递的时长其实并不使用
而是会被计算
根据我们在弹跳时间中所提供的属性
因此我们需要有一个动画时长辅助函数
它只用propertyAnimator应用程序接口
就是下面这个来计算时长
基本上它就为我们解开了这个弹跳方程
我们可以用这个去匹配转场动画的其他时长
这都超级简单
这个代码看上去是有点复杂
但也确实只要几百行而已
UIViewPropertyAnimator使一切成为可能
就这样让我们请回布鲁斯
谢谢你 Mike
好的
我得讲快点了时间所剩无几
我们要来讲一点点击测试
假定UserInteractionEnabled值为真
我们实际上就可以点击测试我们的视图
如果值为“假”我们将吃掉所有触摸事件
我们将这个属性叫做isManualHitTestingEnabled
并定义为“假”
默认值为“假”的原因是
我们想能够点击测试我们的视图
如果值为“真”也就是现在的系统活动
当你要触摸这个视图下面的位置
就会发现我们无法点击测试
令人迷惑的是好像只在它运动方向上开始点击测试
我们不想要这样的结果尤其是对可中断的属性动画
在这个演讲下方我想你们推荐
一个技能让你们可以重写点击测试
做一些计算来绕过显示层面
调令“super”来点击测试一个移动视图
这个技术依然生效
但是现在有了propertyAnimators如果你有移动视图
默认的手动点击测试值为假
我们实际上就在点击测试这个视图
所以这很酷炫也很轻松
事实上 这个舞台上我们看到的所有东西
之前都是好用的
现在出了些问题
如果你有深层的视图层或者其他
我们就无法正确运行
这时你可能就要用其他技术可能在其他演讲中有提过
好的
我们今天讲了关键帧动画所用的整个应用程序接口
这是UIKit现在所有的接口
如果让它可中断？
要重调关键帧动画
作为一个常用动画除非你定义一个路径
来导入你想要的动画
我们也想让他们变成可中断的
事实上我们想要做的跟现在视频上看到的是一样的
我们要暂停它 擦除它
这应该都是意料之中
而且 你可以做到
这很简单
使用现有的接口
封装动画控制器的动画
从而你的关键帧动画也是可中断的了
我再说最后一点虽然听上去是在撒谎
互动PopGestureRecognizers
这是内置的导航弹出视图
现在如果你有一个交互控制器
你就无法使用这个
但是新的iOS 10里如果你输入一个错误请求
给手势识别或者你自己
那么内置的弹出手势识别就可以识别了
使用内置导航转场要与你自定义的互动一起
总的来说
我们学习了如何使用UIViewPropertyAnimator创建可中断动画
你可以用到很多全新的时间函数
你可以使用可中断的propertyAnimators
去创建可中断的视图控制器转场
更多信息请浏览这个网址
这里有其他有关UIKit的演讲
他们讲的是动画的其他种类其中两个就在明天
我希望你们听一听 看一看
谢谢