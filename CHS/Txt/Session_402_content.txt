Swift的新特性
早上好
欢迎来到“Swift的新特性”
先说一下Swift 3的发布目标
Swift作为开源工程发布
六个月前
这么做的重要原因不只是为了
把代码推到GitHub上
更是为了创建一个开放的社区
来推动Swift向前发展
Swift 3是Swift的第一个重要更新
作为社区的产品
我们谈一下社区的演进
和这个语言的演进过程
Chris会讲一下
关于社区对Swift 3做了什么
这次发布的另一个重要方面是为了把Swift带给更多的人
现在的软件生态系统非常多样化
人们做很多不同的事情
在不同的情况下
他们或者做服务器端程序
还有应用和其他的东西
我们想让任何人都能用Swift
我们还会讨论Swift在Linux上的重要进展
这真的是Swift第一次重要的更新
自从Swift被移植到Linux上
现在仔细看看这次发布
Swift已经被不断迭代和打磨
在过去的两次发布中
基于使用它的开发者的反馈
当然 还有来自社区的反馈
自从它开源以后
关于Swift 3的重大事件
我们想让重要的基础都固定下来
然后我们能从上面继续前进
最后 可能是最宽泛的目标
我们很想让Swift变得更迷人
不应该这样么
Swift想成为一个强大的工具
给开发者用
他们可以用它做一些惊人的事情
这是我们想要的
现在 这可能是比较宽泛的目标
我们努力听取反馈
从使用Swift的应用开发者那里
Apple内部如何使用
我想说说我们自己怎么使用Swift
尤其是去年在我们发布的系统和工具中
重要的不是我们在Apple使用Swift越来越多
是我们使用的方式越来越多
不仅是写应用
我们现在内部框架中也在用Swift
Agents 和 Daemons类似这样的加强了
这种操作系统的深层体验
如果你看一下 你会发现对Sierra和iOS 10
你会看到像新的音乐应用
使用了大量的Swift
Sierra里的终端应用
和新的日志记录联系紧密
也是用大量的Swift
通过Agents和DaemonsSierra中新的画中画功能
完全是用Swift写的
现在看看工具
Xcode也使用了Swift
比如 Xcode 8中的新文档查看
是用Swift写的
和为iOS设计的优美Swift Playgrounds
也是完全用Swift写的
所以我们Swift做了很多
这让我们集中精力解决各种不同的问题
无论是性能问题 比如内存使用
保证常规调用正确 等等
在各种情况下 保证Swift可用
我想讲一个特别案例
就是Dock
有两个原因
一个是它没有人们想象那么简单
它不仅仅是桌面的一个条
它代表一大部分macOS的桌面管理体验
像Mission ControlLaunchPad Spaces
我们认为他们是Dock的一部分
第二个原因是
这两次的发布中我们已用了Swift
在El Capitan开始采用Swift
我们有两个版本来对比Swift的使用
在Sierra中Dock有很多改变
首先 绝大部分MissionControl被用Swift重写
辅助引擎已经用Swift重写了
为什么我们这么做
我们不是为了重写代码而重写
这使代码质量提高了
通过接入新的特性和重构
同时有一些新的功能需要实现
所以这是重写代码的合适时机
从工程角度 看起来是什么样呢
给你点提示Dock有差不多20万行代码
有差不多几万行Swift
在El Capitan和Sierra
项目中Swift的代码超过两倍
实际上 通过重写
替换掉了大量的C和Objective-C代码
这里的影响不容易衡量
因为我们还做了重构和添加了新特性
但我们看到大约少了15%的代码
在用Swift替换掉C和Objective-C时
这包括其中新加的特性
直接结果是
这个工程在Sierra中变小了
比在El Capitan中
现在
有更多的统计
我认为最重要的是
写Dock的工程师喜欢用Swift
他们没有被强制使用它
他们是自发的他们很想用Swift
他们的经验是感觉
他们更容易的写出他们想写的代码
他们喜欢Swift的安全的特性
让他们坚信他们的代码很棒
我们说说Swift的开源
如果你还不知道请访问swift.org
你可以找到各种贡献的方式
比如 你想做
最专业的编译器黑客
你可以检出源代码来找漏洞
也有其他方式你可以贡献想法
我们想给Swift带来什么
现在 如何运作这个项目很重要
这意味着保持平等
我们非常想开放 透明和自由
每个人都能参与进来推动它向前
你能看到我们做出改变的合理理由
这真的非常重要
所有语言的改变
无论你在Apple工作
或者你是应用开发者
你有想法想要改变Swift
大家用的方法都一样
我认为这很重要
这意味着非苹果工程师可以直接
提交代码给编译器和其他储存库
我们想授权社区来推动Swift向前
第三 我想它同样重要
对这个项目是面向代码的
我们认为每个人能贡献代码时
不会感到歧视很重要
不会被不专业的方式对待我们很注意这些
最后这个项目的开源许可证比较宽松
这同样重要因为我们想让Swift
以Apple不曾设想的方式使用
这也是开源Swift的一个目标
我们想让大家用各种方式使用它
同时社区也有很好的专利保护
这是我们为何选择该许可证的原因
你可有很多方式跟随
Swift主干开发
你可以检出源代码或者编译编译器
通常我们也有可下载的快照
你可以从swift.org上下载直接在Xcode中使用
或者在Linux上使用
其他支持的平台
我们也会提供快照
更棒的是在Xcode 8中的Playgrounds
全部支持这些快照
这是一个很棒的方式来试验Swift伴随着它的演进
同时你不再需要重启Xcode
如果你想用其中的工具链
这体验很清爽
在试用最新版本的Swift时
所有的开发都在GitHub上进行
不止一个工程
有一系列的代码库
你可以在swift.org上找到它们的描述
它们可以大体被归为三类
语言和它的演进过程
一个包管理工具和一个核心库集合
我们挨个说一下
包管理工具发布当Swift开源时
还处于早期阶段和活跃开发阶段
GitHub有逾1,000个软件库
使用包管理
它是什么
它是一个跨平台的 包管理用来编译
给Linux和0S 10打包
我们主要想编译
让社区给Swift打造一个生态系统
我们认为把Swift带到其他平台非常重要
像服务器端
它为顺畅的开发设计
它容易上手最小化配置
容易解决依赖
目的是写代码然后运行
我们认为对Swift来说包管理如此基础
它是一个长期成功
我们持续提交把
包管理集成到Xcode随着它更成熟
我们讨论下核心库
什么是核心库
在iOS中有很多很棒的API
macOS tvOS和watchOS中
其中许多基础API
我们想让很多人能使用它
所以核心库代表
可选择的实现了不绑定Objective-C运行时间
Linux上的核心API
还有其他Swift会移植到的平台
有名的例子包括像XE测试组件
你可以用来写单元测试
一个基础的子集
需要可移植并不会绑定到Cocoa
同时进行libdispatch移植
然后你可以用这些并发API
这些工作都刚开始进行和Swift开源同时开始
但现在已经有不少了
在Linux上的基础库
支持许多很棒的API像操作URL 日期
还有数据 UID等等
我们希望在未来会变的成熟
随着社区希望更多的功能
现在 来讨论下语言
Chris会讲很多具体的变化
我想说说这些变化的演化历程
这些都在Swift软件库中发生
比如现在你想要改变Swift
你感觉有些地方很烂
重要的开发中有些地方出了问题
可能两年前这种设计比较好
但现在应该重新考虑下
或有些很棒的东西我们应该加进去
能给开发者带来全新的机会
没关系
你可以从邮件列表开始
告诉其他有相同兴趣的开发者
开始观察
这是个好想法么它的好处和弊端是什么
一旦有足够的关键论据
它会成为一个提议
这里仅是一个用markdown写的白皮书
可以在GitHub上查看
这里有一个实际的提议
通过pull request提交等待审核
左下角是数字标识 SE0046
每个提议都会被数字标记
我们通过它指定
实际的提议在Swift变化中
Chris引用这些提议
在他讲Swift的变化的时候
这些提议是大家建议修改
Swift的方法
合理的建议为什么我们需要做这些改变
具体的改变应该是什么样
优点和缺点
一旦提议合理将会被接受
之前的审查在接受进入仓库是开始
审查还是会被开放讨论
在邮件列表中但这次会集中
在具体的提议不仅仅是抽象的想法
一段时间后Swift核心团队
一小部分单独的推动着项目向前的人
会看社区的反馈
看优点和缺点
根据社区的需要做最终选择
他们要考虑很多怎么把提议融合到Swift中
这有意义么一些提议会被驳回
“嘿 当前这样的话
行不通
所以回去考虑和改进一下”
或者这对Swift永远都不合适
有时提议通常也会被接受
通过改进
无论被驳回或者接受所基于的理论都会做记录
所以每个人都可以回头看看这个语言的发展史
同时明白什么被提议
为什么被提议为什么被拒绝或者接受了
你可以看到所有的提议
通过Swift-evolution仓库
这个是为Swift 3建立的
由所有人推动
下面由Chris讲一下都发生了什么
谢谢 Ted
因为有很多其他事
不幸的是我没有时间准备演讲稿
我打印了所有的提议我想我会给你们读一下
听起来不错吧
开个玩笑
那么我们将要干什么
之前我们说我们想要把Swift的核心体验变得很棒
不仅是语言
也包括标准库
使用像Cocoa主要API的体验
还有使用工具的体验
我们会挨个介绍
Swift 3的一个目标是代码兼容
这是个很大的目标这意味着我们想
无论你在应用中写了什么样的代码
我们要保证当Swift 3发布的时候
不会有其他问题
这是一个相当困难的任务因为这不仅关系到
我们用的分号还是逗号
还关系到关键的API
做尽可能多的工作让Swift 3
兼容 然后我们可以一直使用
你写的代码
这里有几个不同的方面
一个是整合这些到
刚才Ted说的Swift-evolution提议过程
Swift 3之后的提议
都应当好好考虑下代码兼容性
现在 我为最重要的方面Swift 3中最大的改变是
影响我们每天写的代码的API
我们深入看一下API命名
先大体了解下
API是一个基础组成
当Apple在创建这个平台的时候
是你每天使用的重要部分
你用它来创建应用
命名规则
和设计方法
对它的影响很深远
在Swift 3中
我们会思考写这些API最好的方式是什么
我们应该更详细些么
还是应该尽可能的简洁
我们发现最重要的是要清晰
能够清晰的被使用
我们对API进行了优化
提取最重要的基础信息
去掉其他不必要的信息
我们看几个例子给你们展示下
实际操作中我们的一些思考和这么做是为了什么
这里有几个Swift 2中的API
我们从数组和往里面添加内容开始
在Swift 3中 被削减了一半
动词添加现在操作是操作了
contentsOf是传进参数描述
现在它是传递参数的标签
调用的时候使用
这能让它更清晰一些
插入索引 这个已经很合理了
但是这个索引没有额外的信息
只是重复类型信息最好去掉
在基础库中 我们看看NSURL
它有个fileURL方法或者属性
看看它它返回一个布尔值但不明显
如果用is开头将会很清晰
另一个简单的例子是URLByAppendingPathComponent
它去掉了多余的返回类型
因为没有必要
有非常多的像这样的改善
把所有的这些加起来
在10:00将会有个关于这些更详细的介绍
我们看看Objective-C和CAPI在Swift中如何工作
因为它是你使用API时非常关键的一部分
影响你在Swift中的体验
我们做了很多提升其中一个我们叫import为成员
这是一个典型的C的核心图像API
在Swift 2中它会被当做全局函数引用
好的 这样可以
但这不符合Swift开发者用的API
所以我们引入了一个新特性允许API作者给他们的API标记
用这个宏来把它封装为一个属性当做一个方法导入
提供一个优美的面向对象的API
就像核心图像和dispatch中的
你也可以在你的代码里这么用
另一个是泛型
去年在Swift 2中我们引入了轻量级的泛型
我们使用它来引入类型结合到Swift中
但Apple的几个框架
用其他方式采用了轻量泛型
比如 自动布局和核心数据
在Swift 3中我们可以引入完全通用泛型
到Swift 3中作为泛型类型
就是说许多冗余的类型信息
可以不要了
我们讲一下
关于常量
在许多Cocoa API中一种常见的模式是
用字符串作为枚举
我们这么做因为在C语言中最好的方法是
写一个开放的可扩展的枚举
但这有很多缺点
这些枚举 变成了全局常量
在Swift中被引用为全局的
使用的时候需要输入很长的名字
在很多地方都不是很好一个是完全类型不安全
你可以传递一个任意的字符串但它不会工作
同时它还不好因为它污染了代码的完整性
让人感觉不像Swift API
这是对Swift APIs来说非常好的发展方向
Swift 3中得以解决
现在API的作者可以给typedef添加一个简单的属性
不同的是它变成了Swift中的强类型
你可看到通过常用的NSNotification.Name
在这个例子中是在UserDefaults范围中
现在可以通过点属性来调用
最棒的是它经过了类型检查
所以在SDK中它有巨大的提升
通过这一周大家就可了解这些新的特性
这周有许多很棒的讲座
我们深入了解下核心语言
通过这些改变我们回头看看参数标签
快速介绍下如果你在Swift 2中有这个函数
你应该三个中取两个参数使用
为什么这样
因为沿袭了Objective-C的命名和设计模式
我们想要在Swift中和Cocoa的体验一致
当然在Swift中从根本上改变了Cocoa的工作方式
现在我们可以把参数标签给所有变量
可以让Swift表现更一致和可预测
我们说说泛型
Swift泛型语法 我认为非常优美并富有表达力
它能让你知道函数主要是干啥的
用一个简洁和友好的方式
不幸的是 当你开始使用更高级例子
你需要添加泛型约束
基本上是这些函数的第二功能
但是它们却在第一位置
使代码变得难读
Swift 3中 我们拓展了语法并修正了这个问题
现在签名被放在了前面
约束是第二位了
我们讨论下未使用的结果
这里有个简单的函数它加上一个数字并且返回
在Swift 2中这段代码不会被警告
即使它是一个漏洞
可能你忘记把它赋给一个变量
可能你完全调用错了函数 对么
在Swift 3中你默认会得一个到警告
它很安全 这很棒
这在其他地方也很好
因为对复杂例子的组合也很好
当然不是所有函数都这么理想化
在实际中它们可能有副作用
你可能会想如果有副作用
也许我就是为了这样使用它
这没有问题你可以把它赋值给下划线
告诉编译器或者维护你代码的人
你认为这个函数返回的东西
你明确表示你不关心
对么
现在 不是所有的函数有这个属性
有些函数像一些异常
有副作用作为它们的首要功能
返回值通常是你第二位你不需要关心的
在异常函数的例子中你可以使用一个属性表示
我知道这个返回值是第二件事
不要产生警告如果我没有使用
一个友好的系统
我们说说Swift 3中最令人兴奋的地方
被去掉的特性
你可能会问为什么这么做
但我们真的让Swift 3变得很棒
Swift 3是这些的总和
许多部分被放进Swift
在我们真正明白什么应该被编译进去
和我们该往哪里走
所以我们回头想了下Swift所有的属性
无论它是何时被引入进来的我们问一下基本的问题
若该特性还没被加入到Swift现在应该添加么
对于一些特性 答案是否定的所以我们把它拿走
这样做很棒
它为大家简化了语言
我意识到其中可能有偏见和争议
Swift-evolution最棒之处是作为社区让大家可以在其中讨论
它们中的每一个有个有丰富理论基础的提议
如果你想回头阅读关于它的上百封邮件
请到归档的邮件列表查阅
我想邮件列表各个方面都有
这些问题都被描述得很好了
Swift也有其他小的提升
我没有时间去全部说一遍
但我们有像泛型别名
我们有类型安全选择器和关键路径引用
我们有新的编译配置
匹配功能提升和其他好多东西
你可以从提议中阅读
或者从发布日志中看到
关于核心语言的另一方面是语法
我想我们大家都喜欢我希望你们喜欢
Swift的基本语法结构
我认为它是其中一个主要部分
因为它感觉起来熟悉并在一起工作的很好
不幸的是Swift的有些部分
没有被好好考虑
我们每天用的语法结构
所以我们进行重新设计
对你最喜欢的颜色添加了美观一致的色调
我们研究了一些奇怪的例子
因为它们和语言剩下的地方不一致
它让语言变得难用
这些被包含进Swift因为它们很重要
我们回过头来标准化所有的东西
我们想把它弄正确并在长时间里保持正确
这还是核心语言的简述
我想深入点说下类型系统
首先 什么是类型系统
在Swift中类型系统和类型检查器
一起定义类型怎么工作
类型检查器和编译器使用类型系统
来保证你的代码是正确的或检验它是正确的
同时推断你代码忽略的东西
因为它默认是隐式的例如 什么是A类型
在Swift 3中我们想要简化类型系统
让它更一致我们也想杜绝
人们遇到的常见类型问题
引起漏洞
我们讨论几个例子
首先是不安全的指针
不知道你们是否注意到你可以在
Swift 2中给一个不安全的指针赋值nil
你可以直接测试它是否nil
你可以使用不安全的指针
不用关心它是否为nil
它和其他语言不一样
它让不安全的指针更不安全了
在Swift 3中不安全的指针不能为nil
你可以使用optionals就像这个语言的其他部分
你可以用if let安全的测试然后包起来
甚至使所有的语法提示我们提供optionals
让所有的代码工作的更稳定些
说到optionals
这个语言另一个有趣的部分是隐式展开optionals
隐式展开optionals是语言非常重要的一部分
通过两个阶段的初始化
或者调用API还没有验证时是否为空
这里有个简单的例子
我有个int用了隐式展开optional
对其他类型也可以这么用
现在 Swift 2中的隐式展开optional的基本工作方式
我想 大家都已经清楚了
这个例子中的X 比如
编译器必须强制展开那个IUO
为了做加法 它是这么做的
对于y 就不必这么做了
就像从代码上传递下来了
这个传递有很多原因
这也很令人意外因为很多复杂的情况
常常让我们挠头不知道代码到底是在做什么
在很多情况 你甚至不知道你有IUO
这里 我有一个int和一个IUO
IUO是强制的么
我能得到任何数组么 或者可选的这到底怎么回事
你永远不会知道
直到你编译代码时并且你得到了一些奇怪的编译错误
我们不想在这里费力
所以IUO作为一个概念非常重要
我们保留了它
但是我们改变了它的工作方式用一个新的简单的模型
这个模型还比较原始
如果使用了IUO
如果值是可选的 那么就是
这是安全的我们不想展开值
在你不想展开的地方
然而 如果编译器需要展开它
为了做类型检查 它就展开
我们再来看些例子
这里 有个x
编译器需要展开它做加法 所以展开
这是IUO的重要部分
与强属性的有所区别
为什么
好的 这里这个编译器可以对表达式做类型检查
作为optional
所以现在不需要传递IUO
可能在深入到代码不同层级
它转换成了一个强的optional
可以让你思考
这让数组更可控
因为现在
当然 它可以作为一个强的optional被类型检查
如果你实际上需要展开 这样也可以
你可以明确地在代码中使用感叹号包上它
现在读代码的人可以知道是什么意思
你的代码好了很多
这是我的快速浏览
关于类型系统的一些有意思的事情
我们谈谈标准库
标准库最大的改变是全新的集合索引模型
这是什么意思你可能使用过索引
或者没有
有很多方式使用索引
这里的不同是它们如何移动
之前在Swift 2中你可以调用索引的方法
像Successor 向前移动
在Swift 3中这个模型基本相同
除了现在索引可以自己移动
collection自己移动索引
为什么我们要做这些
在Springs有很多很棒的事
首先 我们开始简化标准库
许多类型去掉了 这很棒
更好的是 一些常见问题根本上就没了
你可以随便使用与发挥
之前可能触发一个没人知道的陷阱
同时性能也提高了
因为我们可以去掉很多特殊情况处理
对这些我们很兴奋
我们讨论下数字类型
我们有一个新的浮点类型协议或者一个家族协议
可以帮助定义操作让你们写通用的算法
超出浮点类型更广的范围
更好的是如果你是个数字分析类型的人员
你理解IEEE浮点数
我不是 大部分人都不是
它有很多低层次的操作
像让数字ULPS出来
其中有些重要的有技巧的东西
我也不全懂这些东西
我认为这很重要
我理解像Pi样的东西每个人都喜欢Pi
在Swift 2中使用MPi时我们总是遇到困难
这经常让我恼怒
它总是错误的类型你需要强制转换它
总让人泄气
现在 除了包含IEEE的全部东西
我们有了Pi在浮点数类型中
Swift通常有类型可用
另一个很棒的事情是
如果你有类型上下文
比如这里我们返回一个CGFloat
替代强制转换你可以用CGFloat.Pi
更好的是你可以让编译器给你做推断
会有不错的结果
语言方面有很多提升
贯穿标准库
其中有些对提高你的Swift代码很有用
我强烈建议你看下其他Swift演讲
可以得到更多信息
这是一个快速浏览 关于语言
标准库Cocoa在Swift如何工作
另一个重要的部分是Swift和这些工具怎么在一起工作
讲到这里我想请Ewa Matejska给大家讲讲
Ewa？
谢谢 Chris
大家早上好
让我们说说Tools
一个比较好的着入点是
就是工具如何提高性能
你可以看到我们这一年非常忙碌
我们讨论其中的几个
我们重新实现了字典
我们集中
优化了字符串哈希算法
为ASCII字符串
我们看到一些不错的提升
从去年我们做的一些简单的测试
我们还添加了栈的推广
针对类实例数组常量
我们从堆栈中提取出来相当费资源的操作
到栈
我们看到一些相当不错的提升在我们测试的时候
同时 像我说的
我们集中优化了字符串哈希算法
我们看到它提升很大
在我们对比字符串前缀和后缀
我们有86倍的提升
接下来 我想说一下整体的模块优化
这是去年我们引入的特性
我想给大家提醒下它是什么东西
当你看这个图表
你可以看到一个并行编译流程
一个文件进入 一个文件出去
通过全模块优化
我们扩展了编译从一个文件到多个文件
这真的很棒因为编译器有很多信息
来写新的创新性优化
来让你的代码运行的更快
我们认为从我们的内部测试中已经可以稳定工作了
所以今年我们将把它作为新工程的默认值
以前的工程会有优化建议
按照它的建议 我们认为你应该接受
这里有个重要提醒就是编译时间
就像图里展示的
你会发现编译器成了瓶颈
就像你想的编译时间 会增加
为了抵消它
我们让编译器变得更智能
它会尽可能的缓存
来避免重新优化和编译
最后结果是虽然你第一次编译时间
变长了
接下来 增量编译应该更快
说说代码大小
我们在这方面做了许多工作
从Swift 2.2开始
我们有了不错的结果
DemoBots是一个样例应用
你可以从developer.apple.com下载
你可以看到应用二进制文件大小减小
了差不多25%
自从Swift 2.2开始
这真的不错
好的 关于性能只有这么多
但关于Xcode还有不少可以讲的
今年Xcode我最喜欢的特性是
Swift代码浏览的提升
它对每天的开发影响很大
我们看一个例子
这里有个例子
我们创建了个整型数组接着进行排序
你认为会发生什么
当你右击Sort跳到声明
在Xcode 7.1中
你会进入一个综合的像这样的头文件
这是什么
这是一个可变集合类型
sort这里返回Self.Generated.Element
注释中只有一个数组的参考
所以这不是很有意义
也不是很符合逻辑
在Xcode 8中我们做的更好一些
现在你可以看到
这里有个数组的扩展
和sorted
因为在Xcode 8中sort被重命名为sorted
现在返回一个包含元素的数组
这真的提升了
你在Xcode中浏览代码
阅读时候更有逻辑了
同时 在标准库中
我们通过逻辑区域添加了分组
比如 数组被分组为集合
说到标准库
我们有了各种新的文档
同时协议被锁定进了API
你可以有逻辑的浏览
就像在综合接口中
谢谢
我认为你们会喜欢这部分 是的
多少人有Swift 2.2的代码？
可能有很多
所以 当然我们像往常一样有迁移工具
但今年你需要选择
在Swift 2.3和Swift 3之间
如果你
如果你没有准备好跳到Swift 3
Swift 2.3就是包含新SDK的Swift 2.2
可以么
我们会接受提交到app store
的Swift 3和2.3的应用
但你应该注意Xcode中有一些关键特性
是专门针对Swift 3的
像Playgrounds和Documentation
和新的特性像Thread Sanitizer
Swift 2.3其实是个临时解决方案
让你有时间规划升级到Swift 3
所以请从今天开始规划吧
是的
如果你在用Swift 2.3我有几个建议
这是个例子
这是个小的代码片段是2.2的
当你将Swift迁移到2.3
它会建议你在frame后添加叹号
因为核心图像API
可以编辑
现在这代码同时用Swift 2.2和Swift 2.3编译
但如果你个复杂点的脚本
你可以选择性的编译你的代码
用#if #else语句
这是一个小的建议
当你准备好升级到Swift 3
可以使用迁移工具
编辑 转换当前的Swift语法
你可以再次体验迁移
这很简单
从今天开始计划迁移到Swift 3
这是我想说的关于工具
概括一下
概括说
Chris说了Swift 3如何
集中在基础改变
这些都公开在Swift.org
像Ted说的
你可以到那里看看是如何演进的
你还可以看到我们为Xcode做了很棒的集成
这周还有很多信息这仅仅是开始
我们这周有很多课程
我想推荐一个
就是Swift API设计规范
还在这个房间在这个课程结束以后
祝大家能和我们一起度过这美好的一周
谢谢