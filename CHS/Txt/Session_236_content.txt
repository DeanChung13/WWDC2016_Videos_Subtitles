哇 大家下午好
大家想要创建一个超棒的应用
那么一个很赞的布局将是不可或缺的一部分
自动布局功能可便于大家创建自己的布局
针对不同的设备 定位和适配性
以及针对不同语言的布局
我们今天将要探讨自动布局的新玩法
本场演讲共有三个部分
第一部分由我为大家讲解
我叫Jason Yao是Interface Builder工程师
我将告诉各位有关Interface Builder的新特性
接下来将由AppKit部门的JesseDonaldson 为大家讲解Cocoa的功能
最后 UIKit的Marian Goldeen将告诉诸位最新的调试技术
这些工具和技术将为各位节省开发时间与精力
当大家在工作中使用它们时好了 我们现在开始吧
首先来说说
如何渐进式地运用自动布局
自动布局的增量式运用
这是什么意思呢？
在进行布局设计时Interface Builder里的视图
不会立即限制所有东西
大家可以逐步进行操作 以节省时间
简化各位的设置并更具灵活性
但在我向大家演示之前
让我们先来看一个背景设置的例子
首先找到视图
然后拖拽到InterfaceBuilder画布上
然后设定它的尺寸和位置之后进行一定编译并运行
这样就能在设备上获得既定尺寸的视图
然后对其进行旋转 你会发现
视图尺寸与既定标准一致
但还有一些操作要进行
那么接下来会怎样呢？
接下来 我们仅需简单地按照既定的宽高水平
将其固定在界面顶端及左边
事实上 我们只是以隐式的方式创建了约束条件
在进行编译时
通过使用自动布局引擎来使视图尺寸与既定水平一致
如果各位需要进行更多的动态调整
那么各位就需要打开Interface Builder画布
添加个性化约束条件
那么问题来了 有没有一种更好的办法
或许可以不需要设置约束条件就能简单地进行尺寸调整呢？
答案是肯定的
Xcode 8的新功能可在自动布局文件上
对视图的autoresizingMask属性进行规定
而无需设置约束条件
这意味着 大家可以很简单地对视图尺寸进行调整
通过规定autoresizingMask属性
若在场有人还对自动布局出现前的时代存在记忆
那您可能还认识这个UI
这是Springs &amp; Struts UI
大家可将视图固定在边缘并决定/b&gt;
它的尺寸是否可调整
那么这些视图就能和各位的约束视图一同进行良好的工作
事实上 我们要对这些autoresizingMask属性进行设置
并把它们转换成约束条件
但实际是在运行期间将其转换成约束条件
这里存在一个主要区别
实际上 它们是在运行时间内而非在建立时间内生成的
因为这样更具灵活性 且更清晰
若各位希望对视图进行编程操作那它能为您带来良好的控制
因为对于专业的自动布局用户
可能还认识这个标志
对于视图 我们简单地将
translatesAutoresizingMaskintoConstraints设定为真
那么对于视图来说
若在Interface Builder内添加了约束条件 它会怎样呢？
答案是 没有变化
各位仅需点击一下视图就能获得所有影响该视图的约束条件
AutoresizingMask即可被忽略
并且这些视图的translatesAutoresizingMask 属性都将变成假
那么将它们和最初的问题放到一起
这样 我们就能逐步地使用自动布局了
首先通过autoresizingMasks对视图尺寸进行简单的调试
然后添加相应约束条件以进行更为复杂的操作
这会给大家带来更好的灵活性
当各位准备好添加约束条件时
选择你想要添加约束条件的子树目录
先从父级开始然后再按各自的方式进行
这样可按照各位的意愿来进行自动布局操作
并且有益于大家准备构建的新布局
方便大家进行尺寸调整
且对于各位一直想进行布局的文件而言也是很棒的
并且 你还可以在保留现有行为的情况下进行该操作
我来给大家演示一下这个操作
那么 让我们来看看它究竟是什么玩意儿
我已用Interface Builder打开了Xcode 8
我要创建一个关于天气的应用
我找到了我的视图并已经拖拽到了视图控制器
它适用于iPad的竖屏模式
我们来看看横屏模式下它将是怎样的
在全新的设备结构配置栏内
把竖屏模式更改为横屏模式
点击一下即可
那么 让我们继续 从顶部的图标开始
我们希望能将它放大 并横跨父视图
不需要添加任何约束条件
我并没有添加约束条件我找到尺寸查看器
当然 这是AutoresizingMask查看器
我说需要做的只是改变其宽度并延展到另一边
现在 做点对小孩感兴趣的事
我先选中月亮然后把它的未知属性默认为顶端
然后我希望设置为靠左
接下来是云朵 我把它设置为靠右
取消掉靠左的属性
接下来是标签 我希望能按比例调整它
比例精确
我取消掉靠左的属性
调整它的宽度
这里有个小的动画窗口可让我们对其进行预览
之后点击上下两端 使其固定
然后同样方法调整高度
最后我们想要观看其效果
点击横屏模式 大功告成
现在我们来试试2/3分屏模式
大家看 标签被截断了
这是怎么回事呢？
如你所见 标签没有是什么问题
它调用了autoresizingMask
然后根据自身的父视图进行比例调整
AutoresizingMask不会对视图的内容尺寸进行考虑
但我可以通过约束条件来修正它
不过对于这个特别的UI标签我还没有别的技巧来解决它
我只能通过属性检查器
将它从固定文字尺寸转换为最小文字尺寸
这样 就能完整地显示出来
于是 当我们返回全横屏模式
它也能很好地显示出来 竖屏也一样
接下来 我们来处理一下中间的温度控制图标
我希望它能更精准地排列
因此 我准备采用约束条件
我先选中它...
我想对这个75摄氏度的图标进行关于父视图约束设置
需要通过键盘操作
调出关于父视图连接
即可调出约束条件菜单
在该菜单内 可以通过按住shift同时选择多项约束条件
我希望它处于水平及垂直中心 点击即可完成
相似地 我想做同样的调整
按住Ctrl键拖拽到sunny图标按住Shift键
我想添加Horizontally Space及Baseline两个约束条件
然后对太阳图标也一样
按住Ctrl键拖拽 按住Shift键添加horizontal spacing
以及center vertically两个约束条件
现在 我对视图添加完了约束条件
现在 我们仅需对框架进行更新即可
现在 我们前往“解决自动布局问题”菜单
对选中的视图进行框架更新
接下来我想将温度控制图标再变大一点
首先选中它 然后增加它的字体尺寸
各位可能会注意到当我在增加字体尺寸的时候/b&gt;
因为一切都准备就绪
所以自动布局便自动为我的框架进行了更新
在Xcode 8中 我们为各位做了大量的框架自动更新的工作
那么接下来我们希望能有个不错的背景
这是阳光明媚的一天
因此 我们继续添加一个图片视图
从目标库中 我拖拽出了一张图
把它放大到全视图尺寸
然后设置为图像属性
并选择填充模式
就该案例我们可能会选择AspectFill
现在我们要确定它的尺寸符合其父视图模式
我们可以对各边添加共四个约束条件
但对于这种简单的尺寸调整我们并不需要添加任何约束条件
因为我们可以调用尺寸查看器
然后调用AutoresizingMasks对四边进行一定延展
这样就能改变其宽高水平
最后同样重要的是我们需要把它放到文件的上方
看它就又出现了
然后需要确认我这个banner的背景
介于这属于视觉艺术看 现在就得到了很棒的半透明效果
然后我们测试一下
它现在看起来很棒
在横屏模式2/3模式
及竖屏模式下都很棒
同样在iPhone 6s Plus模式下也一样
以上内容既是关于如何逐步使用自动布局的内容
接下来我想讲些比较高级的主题
混合设计与运行时间约束
有些时候大家会陷入这样一种窘境
你在InterfaceBuilder内部进行视图布局
并添加个人约束
但是确实不知道该添加哪些约束条件
直到运行时才有眉目 这可能是因为约束条件的确定是根据诸如
一天中某时刻或只有应用才了解的一些大家正在载入的数据
我想给大家展示三种工具和三个例子
来解决这类问题
首先是调用占位符约束
在这一情况下我选中一张图
我希望它在我的设备中处于垂直与水平居中位置
并处于边缘白线以内
而且我还希望它保持自身的长宽比例
然而我并不知道这幅图最终会成为什么样
只有在运行时才能看到
因此为了充分了解近似尺寸与布局
可以查看Interface Builder然后添加一个4:3的高宽比
当然这一比例是我估计的之后将其标记为占位符约束
这样就能在构建时间内对其进行移除
当在运行时间内确实需要对图像进行设置时
我会创建实际的长宽比例约束并运行
第二个例子假使你正在创建一项自定义控件
你的自定义控件将清除诸如UIView类或NSview类
它会提供自己的图像
并管理其相关内容
或许它甚至还能确定自己的尺寸
它可以向自动布局系统提供该尺寸
通过指定其固有内容尺寸来进行
Interface Builder并不执行该代码
因此它并不知道固有内容的尺寸该是多少
但各位可以模拟其近似尺寸
通过使用固有尺寸占位符来对其设定合理值
因此你就可以得知它在布局中究竟是怎样的
记住你的自定义控件
如果各位要这样操作务必提供它的实际固有内容尺寸
你可以通过重写固有内容尺寸属性来进行
在自定义控件上进行
最后一例是关于Xcode的新特性
之所以把它放到最后来讲是因为这可能是各位最后的一项应急选择
在大家对占位符约束及设计
还有固有内容尺寸占位符黔驴技穷时
因此我们为各位设计了一项功能
基于各视图来调整模糊警告级别
意思是说对于该视图
我希望它处于屏幕中央但我只确定垂直位置
而不知道水平位置也不知道尺寸大小
Interface Builder其实会为此给出红线
以提醒我此时缺少足够的约束条件
来进行定位 所以它是模糊的
这样我就知道我得在之后运行时间里添加约束条件
当我获得所有需要的信息时
如此 我就可以继续操作
并通过进行模糊属性设定来将作业区的无用信息移除
并将该属性由“总是确认”改为
“位置确认”或“绝不确认”
然后我向自己保证之后我得添加那些约束条件
如此这般第一次布局通过前 会一直处于该尺寸下
这些工具让各位通过设计师/运行时间约束来进行作业
当大家已尝试完各种
Interface Builder可添加约束条件的情况下
那么以上内容既是如何逐步使用自动布局
及如何进行设计师/运行时间约束设置那么现在我们将开始第二部分内容
欢迎我的同事Jesse Donaldson
来给大家讲解新的Cocoa
该你了Jesse
大家好 今天由我给大家讲解NSGridView
它是一种新的布局容器我们在macOS上有提供
大家知道维护约束条件是件很难的事
纵使你有如同该复选框一样简单的工具
我们创建了StackView来让这件事变的简单
并且你还可以在任何时候将一些视图在工作区间内进行伸展
有些布局依然
很难实现 比如
你可以通过stacks创建它
而NSStackView则不能对内容进行
跨行与列的排列
这就是我们设计NSGridView的原因
它能轻松地将内容放在确切的网格上
并能完成跨坐标的排列方式
那么我们放大一点来看
我从Voiceover设置的UI上截取了这幅图
我在其中添加了紫色线条以便让大家知道它是如何适应网格的
NSGridView调用多种辅助类
NSGridRow和NSGridColumn表示行与列
并通过内容默认设置为自动尺寸调整
如果各位有需求还可以指明具体的尺寸
还可以让你添加一些额外的填充
如果你的网格需要一些额外空间的话
若你有些不适用于当前硬件构造的UI
那么这些UI将通过动态图表示出来并被隐藏
NSGridView调用独立的NSGridCell
以代表独立的单元格
并且单元格的作用既是
对特定的内容视图进行布局管理
单元格还可让各位控制内容的位置
如果单元格具有一定额外空间
并且如果某些内容需要跨越多个单元格
还可以对它们进行融合
这就像各位熟悉的电子数据表格程序一样
我已经创建了一个较小的UI并且还有一些有趣的事可做
我先展示这一小部分内容并展示它是如何创建的
我们打算在Interface Builder中为NSGridView提供支持
但直到完成它之前我们还是得通过代码进行作业
我把outlet放进了nib文件
针对所有我想放入网格的控制组件
之后无论何时大家对NSGridView注明ContentView属性
在需要的情况下它都能考虑到网格子视图的可移动属性
这让各位在运行期间可以轻松地对网格视图进行分配
之后融入到现有视图层次体系中
可以通过多种方法构建网格视图
但我认为这是最简单的一种
大家所要做的仅是
为每行注明一个内容视图列表
接下来我们来讨论几件事
首先各位不必担心网格的尺寸
无论需要多少行与列它都能
针对大家指定的内容进行处理
其次各位从头到尾使用的代码既具有近似网格状的属性
而且至少与指定的UI是高度相关的
这便于之后各位或他人返回
并了解该代码
因此如果我们现在运行它会出现这样的结果
仅对于调用构造函数来说这不算坏
但显然这并不符合设计
最突出的问题是UI伸展幅度过大
造成过多空白比如这个
这是因为表格视图被限定到了窗口边缘
现在我要做的是将窗口的尺寸调整到与网格一致
但实际上这样会使网格填满整个窗口
如果各位之前使用自动布局比较频繁
那么在使用文本文件或其他控制组件时可能遇到过类似的问题
我们准备用同样的方式来解决这个问题
通过调整网格视图的ContentHuggingPriority属性
这样该窗口内的其它控制组件
就能从nib文件中获得较高的ContentHugging值
但直到我们在表格视图中增大ContentHugging值
之后窗口可能将内容视图的边缘
偏离行与列的边缘
一旦我们增加该值反而能拉小窗口的边缘
空白间隔即消失了
接下来我希望讨论的是这些标签
显然它们的布局存在一些问题
需要进行调整
因此需要对它们进行标签属性的控制
通过对单元格调整坐标参数会很容易地将它纠正过来
X与Y坐标属性适用于行列
单元格以及网格视图
方法就是如果没在单元格上指定具体数值
那么可调用关于行与列的数值
或者网格视图的数值如果必要的话
这样在一个位置进行数值设定将让整个过程变得很简单
并且能对各种单元格进行调整
就这个案例我们可以从网格视图中得到处于零引索位置的列
并对该列设置x坐标
如此就能将这俩标签调整到正确位置
接下来我想讨论的是基线对齐
该文本的标签明显没有与
处于控制状态下的文本对齐
在幻灯片上可能不是很明显
调整rowAlignment属性即可很容易对其进行校正
与安置一样rowAlignment具有继承性
对于这种特别的设计
通过基线来处理所有网格对齐的问题是一件很棒的事
因此我们可以在网格视图中的一个地方进行数值设定
且该设定可影响一切
如果大家够仔细能发现文本已经调整到了正确位置
现在还有一件关于行对齐的问题是
可能有许多处于行位置的视图处于行对齐状态
之后各位或许会对那些单元格注明安置
所以 在这样的情况下网格视图可能无法满足所有的要求
重要的是要理解行对齐
总是比安置优先
它起作用后我们将得到整组的对齐内容视图
然后我们会使用安置功能从第一个单元格开始进行安置
接下来我要给大家讲的是这个弹出按钮
设计图在弹出按钮的上、下均留有一点额外的间隔
我们可以在该行中添加一些填充使布局也有这样的间隔
因此 我们要做的第一件事就是获取行
我们其实可以用之前获取列的相同方式进行
通过指定索引获取但这种方式更好一点
相反 我们从网格视图找到包含该弹出按钮的单元格
然后从该单元格获取行
这样更好 因为如果之后有人参与进来
并更改网格视图的配置以添加一个复选框
或其它类似的东西这段代码仍将有效
如果你在代码中塞入了大量硬编码的索引值
那么一旦有人添加一个复选框你就得检查所有的代码
以查看哪个索引值需要进行更新
在任何情况下 只要我们获取了行
我们就可以继续 并设置填充值
我们会发现得到了一点点额外的间隔
在弹出按钮的上方和下方
我们还需要在状态单元格标签上留一点间隔
我们可以通过同样的办法实现
下面 我想在此处花点时间
谈谈填充与间隔之间的不同
我们还没怎么正经地讨论过间隔
填充值在行和列上都有
它们仅用于在各处添加额外的间隔
在网格需要添加间隔的地方
网格视图本身就可以设置间隔值
它们适用于所有行或所有列之间的间隔
因此 如果我们拷贝一份设计并清除上面所有填充
那我们就会看到这样的结果UI仍适当地间隔开
但我们已无法分辨出不同控制群簇之间的区别
如果我们保留填充但去掉所有间隔 就会变成这样
我们仍能看到控制群但UI就很紧巴地挤在一起
当然如果你把两个都去掉了那就会变成这样
整体都会被压缩得很紧实
此处需要记住的是填充属性默认为零
除非你特别设置它否则在网格中不会有任何填充
但是大家通常希望在内容视图之间留一些间隔
所以网格视图的间隔默认值默认不为0
如果你的用例要求视图都是彼此之间紧贴布局
那么就需要在网格视图中将这些间隔属性设置为零
此处最后一个确实不协调的地方是这个复选框
这是一个有趣的情况因为它需要跨边界
在底部的两个单元格之间
但我们可以通过合并单元格实现
正如我在介绍中提到的
这有几种方法实现但在这种情况下
我们可以告诉该行合并它的头两个单元格
当你这样做时
它具有扩展顶部前导单元格边界的作用
覆盖整个合并范围
因此这个代码一旦生效我们看到复选框滑动
现在这个内容视图已经在两个单元格中展开布局了
就好像它们是同一个
实际上 你可以看到它只是沿袭了拖尾放置
从第一列沿袭过来
我们真的不希望有拖尾放置
但是我们也不想有引导放置
这个复选框实际上应该置于边界中心
介于两列之间
因为列与列大小不一
这不是网格视图真正想为你做的事情
但是它却为你自己实现这一目标留出了空间
开始需要把该单元格的安放设置为空
当你将这些安置值设置为空时
它会导致网格视图
停止维护该布局的这一属性
其结果是网格视图将不会应用任何约束条件
这可能与我们的约束条件相悖
所以一旦完成了这个就可以继续设置约束条件
从复选框中心x锚点开始
到它上面的复选框引导锚点
一旦我们有了约束条件
我们就可以像通常对待约束条件那样真正激活它
但在这种情况下要把它设在自定义安置约束条件阵列中
如果这样做就可以使网格视图
保持任何自定义的安置约束条件
它会进行诸如激活或停用约束条件等类似操作
取决于该单元格是否可见
接下来 这个代码生效后我们看到复选框移动到位置
实现结果就与设计一致了
这样我们就完成了
此处 部分网格的配置有些复杂
但是比起你需要构建这个UI来说整个过程还是简单了很多
从基本约束条件抑或是堆栈
其实没有太多需要改变
为了将这扩展到整个UI我借鉴了VoiceOver参数选择
所以 总而言之NSGridView很棒
如果你的应用程序有一个静态网格式UI需要管理
要处理它的一个好办法是获取你的所有内容视图
并将它们放入一个网格看看会发生什么
此时 你还可以对网格的配置进行迭代重复
直到实现你预期的布局设计
我希望大家觉得这个有所帮助
接下来 有请同事Marian Goldeen
她将给大家讲讲她开发的一些新的调试工具
谢谢
虽然不经常发生但它一旦发生 就很要命
然后就造成了故障 很难调试
这是一个布局的反馈环路
当你遇到一个布局的反馈回路时
你往往正在开始或者结束一个切换
它可能是这样的
你点击按钮开始切换
按钮响应了 但其它都没有响应
这样 你得马上运行Xcode在调试导航器中查看
你会发现CPU卡住了
内存占用正在增加 可能你会中断
你继续查看就会发现一堆布局正在回溯中
现在出现的情况是 某种视图集合
正在运行布局不断重复 形成了死循环
运行循环永不停止
此时出现的消息都在收集自动释放对象
全部都在收集信息这就是为什么内存占用得越来越多
造成这种情况的原因是一种上行数据流setNeedsLayout
我的意思是在它布局中leafword视图之一
正在做些事情使得更趋于根定向的视图
以得到setNeedsLayout所以当布局完成其路径时
它正好回到顶部 并重新开始
你们想知道的是这其中涉及到了什么视图
因为这将帮你找出setNeedsLayout的出处
这是为何？你要对它做什么？
这个信息其实收集起来有点难
因此 这就是我们为什么要介绍布局反馈环路调试器
以此来应对这些特殊情况
这是一个在Xcode中添加的启动参数
它叫做UIView
或NSViewLayoutFeedbackLoopDebuggingThreshold
取决于你用的是macOS还是iOS
你给它设置一个值 此处我设的100
你可以设置任何值但我们把它限制在50到1000之间
现在当你对该启动参数设置之后
布局反馈回路调试器将会计算布局子视图
为每个运行布局的视图进行计算
如果它们其中任何一个运行超过阈值
在同一个运行循环中
在收集信息的同时还会使循环运行一段时间
然后它会引发异常并把信息转存到日志中
转存信息至com.apple.AppKit子系统
或com.apple.UIKit子系统
这取决于你用的是macOS还是iOS
这两种情况有不同的布局循环目录
如果你想了解更多有关这一新日志子系统和目录的信息
请参加今天五点钟的讲座
在Knob Hill 举行主题是统一的日志与活动跟踪
另外 你可以在调试器中设置断点
异常断点
你可以在调试器中打印反馈回路
或者它碰到断点也是挺好的
也许还可以更多地反思一下发生了什么事情
所以我说的信息转存确实就是信息转存
下面我们来看两个真实的实时布局反馈环路的例子
我用了布局反馈环路调试器进行调试
现在我们要查看这些日志逐一细细查看
很可能看到对你有所帮助的两个不同日志记录
我们准备要查看布局反馈环路
这是由上行数据流setNeedsLayout引起的
这实际上与自动布局无关
而另一个是由源自约束条件的模糊布局导致的
这对于自动布局是非常特殊的
所以对于第一例子当上行数据流结构发生变化
这是一张视图树的图片其中出现了反馈环路
在这个视图树中很多视图其实都是运行中的布局
通常你会很幸运因为其中没有太多视图
但如果碰到这样的 你就会抓狂了
但实际上 它们中有10个仅仅是凑数的
它们是实际问题的无辜受害者
这出现在分层结构的较高层中
接下来 可以看到第三层级视图
在其布局中 正在改变它的子视图边界
当一个视图边界发生变化就会有一个明显的setNeedsLayout
因为它需要为了新的边界而重新设置其视图
但若正接收边界的这个视图发生了变化
而如果它的父视图实际不在布局中
父视图也将收到一个setNeedsLayout
这样布局子视图将会有对布局进行描述的字眼
这样 当布局通过 执行到底并结束
它会返回顶部并继续执行布局
因为顶视图仍然需要布局
这会重置中间视图的边界
反馈环路是由两个视图所驱动的
这两个视图对中间视图的边界存在分歧
你可以想象 有很多视图正在运行中
这样 在日志有很多信息所以你大可放心使用
日志大概就是这样的或者说至少是顶层是这样的
当你查看这些日志时我希望你们也从这里开始
第一个被调出来的就是顶层视图
是布局反馈环路的顶层视图
因此 在这个环路中没有视图而更多的是根词语
相对这个布局视图而言
接下来是关于子树的递归循环描述
在顶层视图之下
在描述中 有些视图的旁边你会看到一个数字
你往往会在顶层视图的旁边看到一个数字
此处你看到的就是23
这些数字表示的是数量
即接收布局的视图数量且数字都是顺序排列的
当然 这是一个循环我们可在任何地方放置一个
但是我们这样做的话最后一个就是顶层视图
这样你就能知道涉及到多少视图
所以总共是23个但从这里往下只有10个
这儿顶部还有三个加起来还是不到23
这是怎么回事呢？
好了 让我们来看看日志的下一段
这是按顺序接收布局的视图
在本段中你可以看到正因为有一个循环
并不意味着罗列的每个视图只出现一次
我们展现出了十个视图后面还有两个其它视图
接下来又是这十个相同的视图
所以这些是更leafmost的视图
当你看到这种情况即一堆视图被罗列出来
在循环中不止一次出现
它们往往都是其它更重要视图的受害者
所以就像我之前说的我们真正感兴趣的是
顶层视图从哪里获取其setNeedsLayout
因此 紧随这一段后面是很多详情
关于在布局中实际发生了什么
所以我们准备要直接滑动到日志底部
这段顶层视图被称为CallStacksSentTo
所以在那儿 你只需要查找它就可以了
现在 这样的顶层视图可以不止一个大家知道通常只有一个
这是个很复杂的情况其中有几个顶层视图
它们非常相似 我准备给大家展示一个
在回溯的顶部是一些漏斗类函数
用于反馈回路调试器但非常接近你看到的顶部视图
即在框架五中看到的DropShadowViews
接收一组边界
如果你记得递归描述中
DropShadowView是TransitionView子视图
DropShadowView设置边界的唯一方式是
在TransitionView上调用setNeedsLayout
因为TransitionView不在布局中
这样 在框架七中正在运行布局的视图
不是TransitionView而是其它东西
但是在这个回溯中我们没有看到该信息
我没有这个特定应用的符号
所以 它们在这儿没有显示此外 这可以是个视图
此处我们很幸运因它是DropShadowView
接收设定界限 覆盖设定界限
但它可能是一个不覆盖设定界限的视图
但很可能在是回溯的信息中间
与顶部信息之间
这样你就可以具体了解自己感兴趣的内容&lt;\b&gt;
所以我们感兴趣的是框架的变化
对于DropShadowView
所以我们向上回滚会发现信息的所在
这在一些结构变化信息之下
我们看到实际上这些结构变化
边界变化以及框架变化……
变化一直在不停地重复中
其中的两个变化出现在布局过程中
在TransitionView上合理的 也在预料中
但其中一个来自viewLayoutSubviews类函数
即该视图的一个特定视图控制器
即TransitionView子视图
所以我们已经定位了问题
修复这个漏洞的方式是依靠程序员
找出其它方式来实现他们的目的
且不改变布局中子视图的边界
好了 下面让我们休息一下因为我们要转到示例二了
这是一个完全不同种类的反馈环路
对于那些一直在用自动布局的人来说
如果要做很复杂的事情
你可能会遇到模棱两可的布局问题
而模棱两可的布局通常不是那么可怕
通常你可能会碰到一堆大小为0的视图
你就会想我的视图到哪里去了
或者说可能该视图就是你所要的
除了偶尔旋转设备会获得不同的布局外
但是有时真的会很不幸
在优化布局的更新限制通过时
你可以训练这种歧义而如果歧义被训练了
则每一个都会发生变量变化
每次它都将在某个地方扰乱布局
这样你就明白了这个循环
现在一个模棱两可的布局作为布局反馈环路
导致一些让你挠头的事情
除非你能想到
所以 这就是为什么我们总是尽可能在日志顶部调用它
这样它们已经在考虑它了
所以这就是说模棱两可的布局被怀疑了
然后当你查看递归描述时
你看到模糊布局遍布到处都是你也知道
这很可疑
我先说点题外话
因为在这些日志中我进行了一些缩略处理
以便它们能在幻灯片上显示正常
但是有个缩略语大家可能不认识
实际上就在日志中 叫做tAMIC
大家可以看到就在模棱两可的布局旁边
tAMIC表示
将Auto Resizing Mask翻译成约束条件
现在大家都可以这么称呼它
无论如何有歧义的布局肯定是我们的问题
我们可以去看回溯
对setNeedsLayout设为顶层视图 但我没有
这就是内部Foundation和UIKit类函数
这对我们没什么帮助
我们得去看细节
此处的详情将会告诉我们变量发生变化的视图
这些变化正触发布局
关于模棱两可的布局需要记住的一点是 它会蔓延
所以你可能只是遗漏了几个约束条件
但是一堆视图都是模棱两可的
因为它们都是互相依赖的
这样 你会发现很多这类视图但只能从一个开始
而一旦这个解决了
剩下的即便无法全部解决但也能解决大部分
大家来看这儿可以看到最小的x变量
在-120到-160之间振荡
不管怎样都是某个奇数
因为它是模糊布局我们列出了约束条件
这些约束条件影响布局
然后你很可能检查出来丢失了什么
我准备现在就开始检查约束条件
因为看到一系列约束条件可能会很吓人
而画图描述是唯一的处理办法
我想从一张视图层次结构的图片开始
这些视图被列在了约束条件之中
幸运的是 在这个例子中所有的视图都属于不同的子类
所以我可以把它们标记出来给大家看
接下来我要做的是给自己画张图
描述约束条件是什么
所以约束条件是一个最小的前导和尾随填充
对于容器中的标签而言
有一个定心的约束条件
介于容器和操作视图之间
然后操作视图中有自动缩放的掩模约束条件
将其安置在呈现视图之中
某个奇怪的地方
有些东西明显惧怕这些约束条件
最终在呈现视图及其同类视图之间将会进行对齐
但是没有什么会真正坚持
整个视图层次需要在任何特定的地方
这就是我们为什么要介绍模糊视图和布局反馈环路
这就是布局反馈回路调试器它是一个启动自变量
你不会经常需要使用它当你需要时 可节约大量时间
简要回顾一下 我们看了...
如何逐步使用自动布局和Interface Builder
在AppKit中有类似网格布局NSGridView
若你想很快在iOS中看到它请到Apple Bug Reporter中投票
最后 我们还谈到了反馈环路调试阈值
若要了解更多详情请访问Dub-Dub网站
希望大家下午过得愉快感谢你们的到来