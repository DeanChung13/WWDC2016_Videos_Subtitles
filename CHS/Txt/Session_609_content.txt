SceneKit渲染的进展
早上好
欢迎来到“SceneKit渲染的进展”
我叫Amaury 很高兴在这里
为大家讲解如何让SceneKit再上一个台阶
利用艺术图形状态
所以我们今天会讲很多东西
首先对SceneKit做一个简介
在讨论渲染的新进展之前
接下来Jean-Baptiste和Sebastien会和我一起为大家演示一个很酷的例子
来解释该例子是如何编写出来并为大家展示所有新的性能
比如全新的照相效果
最后 Nick会为我们讲解Model I/O的基础
简而言之
如你所知 SceneKit是GameKit下的高级API
主要应用于3D图形
它和2D图形的Spritkit完美结合
并且构建在Metal和OpenGL之上
你可以把SceneKit应用于各种情况
把屏幕上的图形进行分散
仔细想会发现它们被应用到很多领域
比如 我们刚引进了Swift Playgrounds
SceneKit让其界面更为可视化
帮助孩子们迈出学习编程的第一步
在Xcode我们用SceneKit建立了
一个创新并极为有用的接口
帮助你编写应用的视图结构
在iBooks和iBooks Author里人们可写出丰富的书本
利用增强的插图效果 并且是互动型的
当然SceneKit也被用在游戏上
最后 但不失其重要性的 谢谢你们
你们为SceneKit和3D图形找到了非常多的用户用例
你们在app store里发布了成千上万基于SceneKit的应用
所以谢谢你们
现在 如你所知 SceneKit和系统紧密结合
它和所有Apple技术无缝合作
它充分利用macOS和iOS平台
这两个平台已经问世多年
在去年的WWDC上 我们还在tvOS上引入了SceneKit
我们在狐狸例子里所添加的只是为游戏控制器加了两个端口
就可以在大屏幕上玩了
真的非常精彩 能看到同一款游戏
和代码能在macOS、iOS和tvOS运行
今年我们画了一个完整圆 让SceneKit进入watchOS
谢谢
SceneKit应用到watchOS是一个非常好的机会
开始思考新互动
以及在手腕上展现内容的方法
如你所想象的
在Apple Watch编程有很多可讲的内容
今天无法面面俱到
但是我们有一个专门的演讲
星期五的“Apple Watch游戏技巧”
你可以了解到更多可用功能
如何利用SceneKitSpriteKit和其他技术
如果你是SceneKit新手想学习更多
可随时上网观看过去几年WWDC演讲我们讲解过基本技巧
也讲过SceneKit中非常高级的功能
好的 让我们开始看看这个新的渲染技术
今年 SceneKit把手动渲染
交到了你们手中
也就是说 编程者 你们大家
可以在艺术作品和游戏中取得惊人的图形效果
这在SceneKits渲染能力里是一个显著进步
自从它问世以来
我们在3D图形最新高级技巧的基础上利用了先进的技术
提供准确的渲染和基于物理着色
现在 基于物理着色有一些要求
首先从线性渲染开始
这里是一个平滑的辐射图 从0到1
如你所见 显示很完美
直到你把它压缩
想储存到8寸的磁盘光学映像里 比如
可以看到 发生了光度弯曲
这是因为我们的眼睛对于变化很敏感
在深色的影响下
通过伽马编码可以给该暗圈函数指定更多的值
比如 这里的图例显示了
储存原始像素数据和利用了伽马编码之后的不同
现在的问题是当着色［听不清］
所有的光信息和公式都在一个线性空间表示
所以在非线性管道中
只存在鲜艳的颜色数据在纹理上进行伽马编码后
并且用线性公式进行处理
产生的浓缩结果会被写入某个纹理或帧缓存中
如你所想 这是错误的
为了最终的图片显示正确所有的操作都需要有足够的空间
作为一个演示例子这是伽马空间内光照场景
这是同样的场景以线性空间的着色显示
如果比较两者 会发现光照如何消退
以及边缘变得粗糙 在线性渲染里
线性渲染对于基于物理的渲染十分关键
它实际上被应用于所有SceneKit光照模型
因为从数学角度上很正确
如你所知颜色是今年WWDC的重要话题
除了伽马纠正
SceneKit［听不清］自动管理颜色和线性渲染
这代表了什么？
它意味着指定给一个纹理的颜色配置
现在将会［听不清］
任何操作 从发生在图像从磁盘
被加载 到传给系统那一刻
可以显示在屏幕上
我们会保持颜色数据的完整性
基于SceneKit的应用会产生高度的色彩准确性
和某些专业照片编辑应用一样
如今 如你所知［听不清］地图和普通地图
都不再显示被存储为色彩的原始数据
SceneKit知道这一点它不会为此类图像配色
为了帮助你解决这一点有一个全新的很棒的性能
在Xcode 8资产目录里就是纹理集合
在纹理集合里 可以指定一个图像显示色彩数据或者原始数据
然后Xcode可以自动把这些图像转换为
CPU和GPU高效纹理格式
关于这点 午饭后我们还有一个演讲
“用广色域来工作”
Metal团队将会讲解更多相关细节
除了纹理 色彩管理也应用于色彩对象
色彩组件不能再假定为sRGB
如果要变成新建色彩
使用正确的构造器非常重要
这里展示了两个色彩对象
一个叫Display P3另一个叫sRGB
它们是由同一个组件构建出来的
当使用色彩选择器时
请注意选择的色彩空间
菜单上可以选择不同的色彩空间
包括和设备无关的比如Display P3和sRGB
还有一个很方便的选项显示数值
以浮点数显示 而不是整数
这样它们可以方便地复制粘贴到代码中
讲到这里 如你所知
着色修改器是SceneKit非常优秀的性能
它允许自定义渲染
如我所说 今年着色出现在线性空间
所以你必须确保把色彩
转换为线性扩展sRGB色彩空间
在这些组件被用来［听不清］
关于向后兼容性要注意几点
线性渲染和色彩管理会自动启动
当你把应用和新的SDKs连接起来时
启动不会产生性能下降
但是会显著改变旧场景的外观
举例说明 这是去年的演示并没有使用线性渲染
如果对其进行重组会变成这样
当然 纹理 光照和阴影修改器
可以用线性渲染重新进行改写
但是如果想把应用部署到旧版本的系统
或者出于某种原因想在色彩管理中更新线性渲染
有一个方法可以实现
你可以通过指定一个关键字
在应用的info.plist文件
将会显示广域内容
如你所知 广域色彩空间
比如存在扩展sRGB
对现代硬件设备来说非常重要
新款带Retina显示的iPad Pro和iMac
有广域显示SceneKit自动支持
你只需要取出广域内容比如纹理或色彩
SceneKit可以透明化进入其中
广域纹理和帧缓存需要更多的内存存储该数据
从而会带来更多的带宽消耗
如果产生任何性能问题
我们提供了一种重新上传的方法［听不清］
下面来看一下色域展示示例代码
是和Cocoa和Cocoa Touch团队合作编写
它是一个基于同步的应用 允许
可以在色域组件外观察
这非常有用 因为在广域显示里
你可以看到该显示情况
因为你可以模拟一个非广域显示
从而可以学习利用广域
以及如何在色彩空间内转换色彩组件
再次说明今天下午我们会有一个精彩演讲
也可以应用到准确渲染
也是基于物理渲染的前提
基于物理渲染
什么是基于物理渲染 为什么要用它
人们总是认为精细的场景
是带有很多细节模块的场景
的确是这样
但是着色才能让对象有形
在屏幕上看到的这幅图曾经是一组多边形
着色是为屏幕上每个细节找到正确色彩的过程
所有的高亮 阴影和深度感都是从着色而来
着色就是那个神奇的操作能够让场景栩栩如生
工作原理是什么？
首先有一个光源发出的光
当光碰到对象
会根据表面的属性跟物质发生相互作用
光发生反射进入人眼或本例中的一台相机
光和物质之间的相互作用非常复杂
多年来很多数学模型
都在尝试对它进行最好的解释
基于物理渲染是光传输的模拟
基于这种数学模型之上
它们考虑到了光和物质的物理性质
但是 如你所知SceneKit是高级API
我们想让每个人都从该全新光照模型受益
所以我们公开了一个超为简单的API
可以让你利用基于美术师们热衷的物理渲染技术
本次演讲结尾 你可以从该渲染
也是标准渲染 变成基于物理渲染
在SceneKit我们从两个角度导出基于物理渲染
首先 基于物理材料 以及基于物理光照
基于物理材料
首先 基于物理材料
这里描述了表面上的一点
通常指示方向是空间
当光照碰到该点 发生两种反射
漫反射和镜面反射
漫反射通过
回应进入表面下面的光
进行多次反射 并射向各个方向
看上去均匀
漫反射的色彩是对象的底色的反照率
所以在SceneKit中设计基于物理材料的接口时
我们需要用到反照率映射图
镜面反射不需要如此
镜面反射由从表面弹回的光组成
所以它的颜色是光源射线的颜色
这是我们称作的立方体映射图
这是六个空间的集合
代表3D空间位置的周边环境
当我们把一个全镜面对象
放入该环境 可以看到它好比一个镜子
我们来举一个更实际的例子 用塑料球
可以看出 它不是一个完美的镜子
中间部分反射很暗
越向边缘靠近越亮
实际上在高角度 所有的光都被反射
不是所有材料都有相同的反射量
上方是代表反射值的曲线
从0到90度入射角的函数
可以看到这些反射值
从0到45度时几乎保持不变
我们实际上可以利用该值重建整条曲线
金子是一个很有意思的例子
因为它有不同的反射值
对红色 绿色和蓝色组件
最后要注意的是 金属
比如铝或金 反射值较高
而非金属或绝缘体的反射值较低
反射值的区别很重要
对于对象的最终显示
所以在SceneKit中我们想要公开一张金属性映射图
显示对象的哪些部分是金属的哪些不是
所以除了不同的反射值以外
要注意金属也会吸收表面之下的所有光
而绝缘体将会发生散射
两者的视觉效果
是金属有广泛的镜面反射 没有漫反射
绝缘体则有非常多的漫反射
镜面反射几乎只能在高角度看到
在SceneKit我们会重新使用发散的Metal属性
储存金属的反射值和绝缘体的反照率
对于绝缘体的反射值
我们只使用一个全局常量
并且重用金属属性diffuse
我们从其他［听不清］取得
最后我要讲的一点是表面粗糙度
你们知道 没有完全光滑的表面
从微观来看 总有小的凸起
和裂纹将影响镜面反射
微观表面越粗糙 反射越模糊
因为光的反射线不再对齐
所以在SceneKit里也会提供粗糙度映射图
将会显示表面的哪些部分是粗糙的哪些部分是光滑的
这是一张灰度图
可以看出如何分开三个基本属性
每一个属性都有明确的含义
都是来自表面的属性
在SceneKit中建立基于物理材料很简单
新建一个材料 设置其光照模型
为新的基于物理光照模型
最后提供映射图
来看一个例子
从一台矿车开始 它只有一张漫反射映射图
然后添加粗糙度映射图
比如 看一下煤
煤很粗糙 所以没有［听不清］
随后我们加一个金属性映射图
比如 看看铁轨和车轮
再举一个例子
这是一辆消防车
我们还是从漫反射映射图开始
现在添加金属性映射图
最后是粗糙度映射图
比如 看看轮胎
我想要指出一点
对于金属度 粗糙度和环境闭合映射图
请使用灰度图像
使用红绿蓝色彩通道
只会造成内存浪费
如果还添加另一个函数 浪费更大
此外 如果想在整个表面使用相同的值
可以利用色彩对象
或更好的方法 因为对于这些金属属性支持数量已知
我们看看如何建立简单而高级的API
从而建立各种各样的材料
这是同一个对象
在一个轴上 改变粗糙度值
在另一个轴上 改变粗糙度值
我们曾经说过 会导出基于物理渲染
来看一下基于物理光照
在SceneKit光照分为三类
首先是基于图像光照 IBL,
然后是光照探测 最后是点光源
基于图像关照
我说过可以利用一个立方体映射图描述
3D空间位置的周边环境
当对表面上的一点进行着色时
我们可以把终点上方当做完结点根据它的平均值
和色彩的正确光照信息
从立方体映射图中获取的
举例说明 这里有一个对象
只利用图像光照进行照明
在该场景中没有光照
你可看到根据立方体映射图的改变
如何显著影响了对象的外观
对场景内所有对象利用基于图像光照
将会带来一致的观感 协调合作
在SceneKit里使用基于图像光照非常简单
我们为场景添加一个“lightingEnvironment”属性
只需把它的内容设置为一个立方体映射图
很棒的是它和background属性完美结合
比如 如果取一个对象把其background
和lightingEnvironment属性都设为相同的图片
就可以在上下文中显示一个对象
立方体映射图可以显示远处的环境和艺术
当对表面上的一点进行着色时
有可能这个环境不可见
因为你正处于山洞或它们之间有别的对象
基于图像光照应该要考虑到这一点
所以对封闭对象来说效果没那么好
还好我们对此有解决方案 光照探测器
光照探测器
光照探测器是面向场景的局部光照
它们捕捉局部漫反射
当着色表面某点时可以找到四个最近的光照探测器
然后从这些探测器添加光照
如我所说 光照探测器它们是局部光源
它们可以被认为是闭合的
可以用这种方法实现
它们重量轻 效率高
可以在场景中放置很多光照探测器
我们推荐这么做
因为探测器越多 就越精细
获取的局部光照信息就越准确
建立光照探测器很简单
新建光照 修改其类型
可以编写代码实现
也可在Xcode SceneKit的场景编辑器里
和立方体映射图一样光照探测器捕捉静态光照信息
该信息可以被很简单地传入探测器
只需用到这个API的Xcode场景编辑器
我们看了如何利用IBL或光照探测器
在场景中进行间接照明
当然也需要直接照明
还是可以访问任何别的光照
如全向 定向或聚光灯
都可以运用在基于物理渲染中
实际上我们还有［听不清］可以进行更好的设置
比如添加“intensity”属性
光照强度通过每千瓦的流明数表示
和灯泡是一个量级
我们还添加了温度属性 单位是开尔文
可以用该单位区分颜色
一个新的性能我们添加了新的光照种类 IES光照
IES光照 即光度学光照可以用于任何衰减形状
当聚光灯或全向光
有一个非常对称的衰减曲线
IES光照可以更好积累剧场光照的行为
比如可以照一个锥形
也可以照一个阴影
如此种种 根据光源的形状
在SceneKit里建立光度学光照很简单
同样 新建光照
修改类型属性
最后提供一个URL 放入配置文件中
可以比如 从生产商网站上直接下载
快速复习一下我们看到在SceneKit中
新建基于物理材料多么简单
所有这些属性都是从表面属性中衍生出来
非常容易理解
以及如何利用光照在基于物理的材料之上
请欢迎Jean-Baptiste和Sebastien做精彩的演示
谢谢你 Amaury
为大家做了关于SceneKit的全新渲染技术的演讲
我们在实际操作中看一下Xcode场景编辑器
如大家所见Amaury演示的几乎一切
都可以在Xcode场景编辑器里直接可用
可以调整属性 实时观察结果
这里有一个很简单的场景卡车上只有一个光照
打开材料检查器
该对象只有两个材料
一个车身 一个配件 等等
选中这两个材料
继续采用布林光照模型
切换到基于物理光照模型
把两个材料设成金属
可以看到有一个问题
因为我们没看到环境反射
打开场景检查器
我们必须要为项目设置光照环境
为此我要使用立方体映射图
比如 该停车场立方体映射图
作为光照环境
接下来将集中讲解这三个主要的
基于物理光照模型的属性
现在来看粗糙度值
粗糙度显示表面有多光滑
可以看到
表面越粗糙 显示越模糊
如果把粗糙度值调到近1
反射很模糊
当值到达1时 几乎没有反射
如果调回0 表面就非常光滑
如你所见 一切
整个环境都在金属里反射
我只用一个常量值代表粗糙度
然后为对象的每一个部分指定一个值
因此我需要一张粗糙度映射图
为车体提供一张粗糙度映射图
以及一张配件粗糙度映射图
对于金属度也是一样操作
我们需要指定对象的哪些部分是金属哪些不是
所以我们需要提供金属度映射图
设定配件金属度映射图
还有不同的图
给车体
如你所见 对象的车体部分是非金属
前面的散热器格则完全是金属
最后是添加反照率
就完成了
就这样 我们为该卡车进行了完整的基于物理渲染
现在切换到场景编辑器修改立方体映射图
比如这个都是树的光照环境的立方体地图
可以设定为背景
就这样
如你所見
新SceneKit场景细节的使用十分简单
为了说明这种渲染操作
我们编写了一个很酷的演示现在放给大家
Sebastien将进行讲解
大家好
谢谢
很高兴为大家介绍今年的新的毛茸茸朋友
Bub Bub是一头獾
它开着一台采矿车
它要采集珠宝 用于加速
你看到的所有场景都采用了新的SceneKit渲染技术
所有的材料都是基于物理 光照也是
我们还采用了平常的
SceneKit的属性比如动作 动画
和以前有的对象
这是Swift应用 可在macOSiOS和tvOS上运行
都完全用Swift编写大概有700行的代码
沿着轨道我们安置了光照探测器
考虑到局部照明的改变
请注意光照改变 当进入山洞或隧道时
还加入了新的特效 比如运动模糊
当Bub像这样抓到一个加速奖品时就可以看到
我们有一个HGI相机这就是为什么光照发生改变
当有亮光或环境改变时
我们还采用IDL（交互式数据语言）编写光照环境
还有一些新的 我们喜欢的运动模糊
当有亮光时 会有绽放效果
所有的材料 你所看到的都完全是PBR效果
对水晶是全自由反射
对所有的奖品和宝石也是如此
在这里又看到了照明变化
色调映射实现了这一切 谢谢
我们现在来看幻灯片
我会再讲解一些关于这个演示的内容
首先 今年我们十分高兴告诉大家的是
和往年一样 该演示是一个简单代码
是的 谢谢
大家可以在开发者网站上下载所有代码
调试它 检查场景代码看我们如何编写
大约700行的Swift代码
我们认为代码很容易理解希望你们能够欣赏所见
并从中学到一些东西
今年我们决定 关于演示我们和美术师们进行了讨论
我们拟定了一些草稿考虑已有的设计理念
当我们就设计理念和流程达成一致时
美术师开始构建模型世界
这是一个互动的过程 我们非常需要
能够在模型正在构建时取得其信息
并马上开始编程而不用等待最终的资产
所以在SceneKit中我们有一个自定义工具
在命令行工具里充分利用SceneKit的强大
为了采用DAE文件里的工具单位转换为米
且它们可在场景里自动放置光照探测器
因为有200多个光照探测器
我们不想每一次场景转换时需要手动安置它们
我们采用了基于图像光照
所以我们有立方体映射图作为背景图片
另一张立方体映射图作为光照环境
我们采用了光照环境添加反射
如你所见 对于户外场景效果非常好
我们还采用了光照探测器
它们显示在Xcode当中你可以看到它们
我们对它们进行了高亮显示
可以看到只从这个视图上就已经有很多光照探测器
可以想象整个场景中用了多少
自定义工具把它们放入环境 开始计算
也可以在Xcode中手动实现
但是 当然 光照探测器用的越多就会越沉闷
它对室内场景很重要
但它也为户外场景视图添加了很好的触摸效果
来检测场景中的微小变化
我们还对室内场景添加了光照映射图
因为它覆盖了光照环境
这对山洞非常重要因为光照在山洞里非常不同
我们采用探测器和光照映射图
在该场景中改变了光照和氛围
当然我们也采用了正常的映射图为模型添加细节
我们还采用了环境闭合映射图
产生效果更好的光照视图和渲染
我们采用了一个点光源来模拟太阳
在场景中天空的高处
我们利用它建立动态阴影并加强全局光照
所有在演示中看到的材料都是100%的基于物理材料
所以有椰子树在环境反射下的逼真效果水晶也是如此
讲到水晶这是我们编写非常简单的材料
它没有纹理映射 创建非常简单
它是全金属 完全没有粗糙度
只是一个漫反射色彩
所以它是创建宝石的非常好的方法
宝石几乎对环境全反射
光谱另一端 可以看到这座塔
该对象既有金属部分又有非金属部分
采用金属度 粗糙度映射图和纹理映射图来创建它
如你所见 我们还是在普通映射图上采用漫反射色彩来添加细节
基本上该演示使用了所有SceneKit的新功能
基于物理着色 所有材料和光照的SceneKit API
我们采用了Xcode集成
以及为流程新建的自定义工具
我们认为这是今年新特性的非常精彩的展示
也是非常好的示例代码能让大家学到新知识
希望你们喜欢
谢谢
如你们所见
今年我们对材料和光照进行了重大升级
我们也因此必须改变相机的表现
我们已经有了优秀的材料和光照
我们也需要更好的相机
现在我们了现实光照
我们需要有一个HDR相机或高动态范围
因为普通的相机是低动态范围
是每组件8比特
我们采用浮点组件
所以可以有非常亮的光照比如蜡烛或灯泡
还可以有比如说 太阳是非常非常亮的光照
这样形成了非常高动态范围
需要对屏幕上的动态范围进行重映射
我们采用色调映射
色调映射是把部分渲染重映射
到低设置设备
所以我们需要启用HDR相机
它不是默认设置里自动设好的可以在API或者Xcode里设置
可以调试色调映射
可以改变灰点 白点
以及曝光的范围
还可以固定曝光偏移
举例说明 这个场景显示得很好
但是你可以进行曝光不足渲染低调显示 也可以过度曝光
只需要改变偏移值 很简单
因为有HDR相机我们还添加了很棒的视觉效果
首先是绽放效果
绽放是模拟很强的光照造成的刺眼效果
来自场景里或反射
可以通过散开
光照附近的放射像素
在这个例子可以看到 非常好的效果
可以看看在塔顶上的反射绽放效果
这是一种很好的方法使光照附近的像素晕开
让渲染润色不少
接着我们添加了运动模糊已经在演示中看到了
它让相机运动变得平滑
如果把运动模糊加入整个场景
就变成这个样子
有时我们并不想让所有对象都模糊
比如 我想让獾和矿车显示清晰利落
所以有一个新API可以从运动模糊中排出某些对象
结果带来目标对象显示清晰利落的效果
今年我们在现实生活相机中加了几个变化
首先是渐晕
渐晕是现实生活镜头的误差
在图像角落上形成阴影
所以你可以把这张图像换到这张
也可以改变环境对象 把滤镜
从图像中间调到图像边缘
今年模拟的另一个误差是彩色边纹
彩色边纹是实际镜头中发生的折射
实际镜头的玻璃上
所以它会在渲染中产生光照的紫红色和黄褐色阴影
就会看到这个样子变成这个样子
这个例子很极端
可以更加温和细致 取得好的效果
我们还加入了一个可以改变场景氛围的好办法
就是色彩校正
可以改变饱和度 达到几乎黑白效果
如果你想 也可以让色彩更夸张
还可以改变场景对比度
就会产生正常的图像或不饱和的
或过度饱和的图像 然后改变对比度
最后一个 有着非常非常棒的效果
就是调色
调色让我们完全重映射
场景的颜色 变为完全不同的颜色
我们采用正方形条形图片
构建3D颜色立方体 当作查找表
来重映射本来的颜色到全新的
举个例子 我们重映射
上面这条的普通颜色 到褐色调
这就是褐色调的效果
操作很简单 我们觉得很棒
看上去很不错
这就是今年对HDR相机的更新
我们觉得这是非常棒的升级
期待看到大家使用后的结果
我们把所有的新效果都集中整合供用户使用
你不用在比如绽放或运动模糊之间选择
可以同时使用所有效果
当然这些是需要付费的
但是你可以用来做出非常棒的图片和看上去非常酷的场景
现在我把讲台让给Nick来讲解今年Model I/O的改进
非常感谢
好的 大家好
首先我将稍微讲解
今年模块输入输出和SceneKit上的改进
今年SceneKit可以导入模块
到自定义格式比如不一定和以前一样的三角形
而是四边形或任意多边形的拓扑
作者最初新建内容的地方
SceneKit 如果需要会自动进行三角测量
从而完成渲染
问题是如果想要采用全新的镶嵌设备
你需要让镶嵌有精确的形状
所以你需要修改代码 采用“preservedOriginalTopology”标识
该标识和Model I/O标识一致
把它带入资产 进行指定
它将保留所有的孔 折线以及所有重要的东西
为了对象的正确再现
今年我们还改进了细分算法
成为新的体系 来自Pixar的OpenSubdiv 3
可以看到在这个例子中
有之前以三角形方式导入的对象当进行镶嵌时
我们想进行平滑细分的盒子显得有点凹凸不平
如果取出该对象 保持其拓扑结构
可以看到四边形形成了均匀的圆形表面
看上去效果很好
这是一种非常好的方法 让轻量对象
可以根据场景缩放分辨率 诸如此类
输入输出的另一方面 我想要强调的
是去年我们在Model I/O里引入了基于物理材料等
它们自然连接了所有SceneKit的内容
如果在Model I/O里指定了高动态范围相机
它会四处可用 不会失去任何属性
来看Model I/O
快速复习一下
如［听不清］所说模块输入输出
在框架和系统里
显然需要它们 把数据在应用之间
新建对象的地方 以及翻译对象
在框架之间 比如SceneKit和MetalKit 等等
我们支持很多标准文件格式
文件格式是一种方法 让内容
从成品输出到工具
以前存在的格式
专业范围很窄
比如 只是一个模型
或者只是一大堆数据
今年很激动人心的是
我们和Pixar联袂合作
引入了对全局场景描述工具的支持
现在全局场景描述是全新的公开标准
关于它非常有趣和令人激动的是
它不仅仅是一个文件系统和一种格式
很容易以ASCII读取或足够以二进制加载
它还包含了一个场景组合引擎
这让它真正从以前的其他格式中区分开来
它凝聚了多年来的实际操作经验
Pixar采用它制作电影
明天上映的“海底总动员2”完全从USD文件产生
现在USD有专门用于场景的数据类型
并且再一次除了将此格式作为开放格式
还有文件分层 实现并发流程
并发工作流程非常棒
这是一个例子 可能在
在全局场景描述中取得的关于电影中某个典型场景
我们有一个取景层取景被分层
从组件 从背景 从角色
角色本身可能包含很多组件
可以看到该取景层图片有很多分层
因为你不止可以新建一个场景
由所有这些内容构成的
你还可以做出改变
场景描述可以让你知道 这是第四镜
角色可能出来快了些或慢了些
可以把所有这些变化存入一个文件为了审阅
另一个全局场景描述的特点是
据我所知 它是唯一的开源文件格式
允许在对象变化中对类进行指定
可以想象 可能出现一种情况
有很多野兽 都想闯进大学
之类的 那里有书本
在传统的工作流程中 你大概会
发现自己在编写书本 编写程序
为每本小书都新建无数文件
然后把它们放在书架上然后一本一本取出进行渲染
真的很枯燥
在游戏里 有一种角色团队
可能各个角色有所不同比如发型和T恤
你可能不得不把它们都删除
而现在全局场景描述
允许你在对象的一个单一文件类中进行指定
所以一个类在这里显然代表了了一本书
所以
文件可以代表很多不同几何形状的书
显然有一本宽的 长的 还有一本厚的
当你把书实例化 放入书架时
你可以告诉全局场景描述
我想要这本书 想让它这么宽这么长
它会提供你想要的信息
实例化进入运行 或照片 都可以
你在一个单一文件内的改变可以是很多轴上的
在本例中 我将修改一些着色属性
刚才我有所有这些书
我可以给它们着任何我想要的颜色
神奇的地方是 我把书放好最后我问
为了渲染
在这个地方的书是什么颜色的？
它会找出来根据所有的场景组合的逻辑
文件和引擎包含的它应该被表达的方式
除此以外 你还可以在一个单一文件内
表达不同的功能
我将要展示的是在非常低的终端
比如某个可穿戴设备可能只显示低多边形版本
同样的文件可以展示出合适的效果
在已有功能的最高渲染上
我们集成了全局场景描述
跨越所有系统和框架
所以 在最底层
如果把一个全局场景描述文件导入Model I/O
我不期待你们可以读懂
可以获得一个熟悉的Model I/O对象层次
含有所有在全局场景描述文件中的属性
精确地表现 所以可以使用我们的工具
Model I/O所提供的比如 放置光照探测器
并且评估它们的最佳位置
然而 除此之外 比如有一个项目
你的美术团队给了你一个包含很多内容的文件夹
你可以在Finder里打开窗口包含所有内容
Finder会准备好缩略图
因此可以看见里面有什么
快速查找也适用
你可以选中其中一个对象 按下空格键
它会跳出 你可将其翻来翻去
当然快速查找一次只能显示一个对象
如果你想保留一个对象以进行比较
或者你的USD文件有多台相机或多项内容
你想逐个检查 可以用预览打开
全局场景描述在那里实现地非常好
如果把全局场景文件读入Xcode
它通过Model I/O导入SceneKit
含有该文件内完全相同的属性表达
所以可以在层次浏览器上进行查看
可以查看属性
可以移动对象 可以添加相机
修改场景 返回给USD
然后你把它发回给美术师们说
你知道 我做了点修改
你能不能 你知道该怎么做
最后 它归入SceneKit
Pixar的朋友为我们提供了“海底总动员2”里的雷先生
这是SceneKit最直接可用的功能
用最新的基于物理着色方法你刚才已经全部听过
我们只在电影资产中播放了3秒动画
看上去效果非常非常好
你还需要插件
才能把全局场景描述集成到工作流程中
从而激活资产的动作 在人物
内容创作节目 编写的应用之间
所有插件 开源信息
可用性 时间表等等等等
都可以在openusd.org网站上找到 我建议大家访问
找出可以在你的管道和进程中可用到的内容
这就是全局场景描述
快速总结一下
SceneKit在我们的所有系统和平台上可用
这非常令人赞叹
我们有基于物理渲染针对任何美术外观状态
以及美术表现状态 看上去非常美
HDR相机和效果让你
控制如何表现对象以及外观 非常高质量
我们还提供全局场景描述的支持
我们非常高兴能在背后进行支持
并且认为将在工作流程里大显身手
在未来的日子里
关于本次演讲609更多信息 都可以在网站上找到
相关演讲还有
Xcode中可视化调试和广色域游戏技术和Apple Watch
今天和明天可以参加
非常感谢大家