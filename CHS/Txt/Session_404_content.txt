Swift入门
大家好欢迎参加Swift入门
我是Dave Addey和同事Brian和Alex一起
我想要给你们一个Swift编程语言的快速概览
在之后60分钟里你们会获得足够的Swift 3知识
来能够阅读Swift代码最好还能开始写代码
让我们看看这个语言的一些基础
这是一些我两年前写的代码
我写了一个常量用let来表明
这被叫做language是一个字符串类型
这中间的冒号我们会经常在Swift中看见
它表明是类型
language是一个字符串类型
我在swift代码里用字符串给它赋值
让我们做更多
假设有个整数称为introduced
我们将它赋值为2014
及一个布尔型被称为isAwesome
把它设为真
你注意到这些值都无需改变
名字language不会改变
或者它出现的年份
两年了Swift还是很好
所以这也可以是一个常量
这是Swift中的一般原则
如果一些量不需要被改变我们申明它为常量
现在你可能还注意到了命名习惯
常量和变量是小写开始的驼峰式命名法
像字符串、取整和布尔类型是大写驼峰式命名法
现在如果我们看右边的这些
很明显
我想要的是字符串 整数 布尔型
在这种情况下Swift会推断这些类型
我们不需要写出来
你仍然得到明确申明了类型的变量
但是你不用写那么多代码
这是一些常量
那么对于变量呢？它们有时候会改变
这是一个变量被用var表明
这是为了语言的版本
它被改变了让我们更新它到2016年的情况
现在如果我试着对常量这样做
如果我试着给isAwesome赋值为假
Swift告诉我有个错误
这是对的
编程时常做的一件事
是通过其它值生成字符串
我们可以把字符串连接在一起
像这里展示的这样但是Swift有一个更整洁的方法
被称为字符串插入它看起来是这样的
我们可以把字符串和值放进一个更大的字符串
通过用括号包裹并在前面加一个反斜杠
我们在这想生成消息“Hello WWDC”
我们并不只用字符串
我们还可以添加其他值
像是这里的整数加入年
我们还可以加入表达式
我们可以让年加1为了可能是明年的代码
现在Swift中的字符串对于Unicode编码是完全兼容的
它可以是ASCII也可以是猫 狗 国旗
这都是相同的
不论是常量还是变量
你几乎可以使用任何字符
在常量和变量名中
说到标准字符
Swift做了很多工作来解决这意味什么
做为一个单独字符
无论你的字符串是怎样在幕后编码的
或者怎么显示在屏幕上
我有一个字符串叫做dogString
你可能认为它有6个字符
D O G ？！狗脸
但你错了
这里只有5个字符而不是6个
这里有一个特殊符号被称为问号惊叹号
很好的用来形容狗
如果你不相信我让Swift来证明这点
每个字符串都有一属性叫characters
它给我们字符串中的字符的集合
我们可以访问这个集合的计数属性
来看有多少字符
如果把那传递给Print函数
我们发现我们实际上有5个字符
如果你仍然不相信我
让我们一个个遍历那些字符
用for-in循环
把每一个打印在它们自己的一行中
你可以看到我们实际上有5个字符
D O G ？！和狗脸
除了基本类型外
我们还有一些内置的集合
我们有数组和字典
你可能知道字典在别的语言里是哈希或者映射表
最简单的创造数组或字典的方法是使用字面值
这是一个数组字面值用方括号包围
并用逗号分隔每个值
这里我们有一个数组包含4个名字4个字符串
字典看起来类似
它们的键和值被冒号分开
我们有一个字典它的键是名字是字符串类型
它的值是整数
现在你可能注意到在数组中
它们都是相同的类型都是字符串
在名字数组中插入其它类型是没有意义的
有一个整数 布尔型或自行车
这会很奇怪
对于名字我们总是希望它们是字符串
我们可在Swift中表达它
我们可以说我们想要一个字符串数组
当我们从中取出值时
我们可以把它当成字符串处理
这就是我们为何这样写
这是我们怎么写一个字符串数组用方括号包围一个字符串
但是我们早前看到
如果右手边明显的表明了我们想要的类型
Swift会为我们做推断在这也会发生
我们不需要写下类型
很清楚我们想要字符串数组
对字典也是同样的
这里很明显我们想要键是字符串值是整数
Swift可以为我们推断这些所有东西都有清楚的类型
Swift有所以你在别的语言里知道循环种类
我们有在执行循环体之前检查条件用的While循环
一repeat-while循环执行循环体一次
在检查条件前来决定是否继续
我们先前看过我们有for-in循环
用来在字符串中遍历所有字符
这不是for-in唯一能做的事
我们能用它遍历一个范围
这里我们有一个从1到5的范围
包括这些数字
我们用来打印5个入口在乘以4表中
我们把它写成1... 5这被称为闭合范围
因为它包括2边的数字
有时我们需要
一个范围运行到比最后的数字少1
这是一个它很有用的例子
我有一个整数数组但我只想打印前5个
因为数组的索引从0开始我希望索引从0到4
所以我们想要用半闭合范围运算符
点 点 小于
因为它运行到比最终的数字在这是5小1
我们可以对数组使用for-in循环
这里我们为数组里的每个名字打印一条信息
我们也可以对字典使用它
现在注意我们要遍历键和值
名字和年龄在同一时间
这在Swift里被称为元组
让你把多个值组合在一起
同时使用它们
我们晚点会看到另一个例子
这使代码遍历一个字典时清楚很多
我们要怎么修改这些集合？
这是我今年 WWDC 的装箱单
我把它申明我一个变量所以我可以改变它
我包括了基本的袜子和鞋子
在 WWDC 2014
我忘记了我的袜子这是一个恶梦
我不会再犯同样的错误
所以我们检查数组的第一项是袜子
2014后如果我把它放在列表里它会是第一个
我们通过下标来这样做
在数组名后写一个在方括号里的索引
如果我们打印这个值我实际上记得添加袜子
袜子和鞋子还不够但是为了一星期的会议
我还需要其他东西让我们添加一个新物品
让我们把裤子加入数组
我们使用append方法
但是这有一个问题
这个会议是在美国他们不叫裤子“trousers”
他们叫裤子“pants”
这会引起很多误解
所以让我们修改数组中的一个值
让我们把它改成牛仔裤
我们又用下标来这样做改变在索引2的项目
牛仔裤在哪都一样因此不会招致误解
这个会议在加利福尼亚州这里总是晴天很热
让我们再加一些东西
让我们加一些短裤 拖鞋 防晒霜
我们可用appendcontentsOf方法
并传递一个兼容的数组另一个字符串数组
它们在同一时间都被添加
这个会议是在加利福尼亚州的旧金山
这里并不总是天晴并且炎热
所以让我们修改一下这三项
用连帽衫和围巾来代替
我们可以通过传递一个下标范围来这么做
注意我们要修改三项中的两项
这在Swift中是合法的
那对于字典呢？让我们修改一个字典
这里是我的年龄字典
我想加入其他人
我们通过用下标的办法来为一个还没有值的键加一个值
我加入了Justyn
但是仔细想想上周是Justyn的生日
所以这个值现在不对
我需要更新它我还是用一样的方法
我给同一个键赋不同的值
现在我的字典是对的了
如果我想要从字典里取出一个值
如果我想知道是否有Devon的年龄
或者Daryl或者Daniel
可能在字典对这些人有一个值
也可能没有我们需要一个方式来应对这种情况
这是Swift的被称为可选的一个功能的好的使用案例
如果我们试着对Amy这样做我们可能期望有个值是40
如果我们对Daryl这么做我们应该得到什么？
这里对Daryl没有值
这样考虑这个问题
或者在字典里Amy有一个整数值
或者没有一个整数值像例子里的Daryl
所以这里我们有一个可选的整数我们写成Int问号
问号表示这里可能有值
也可能没有
我们看看我们是否找到一个值
通过把它和nil比较
nil是一种特殊情况是没有值的简写
如果对Daryl这么做没有值
我们会打印这个信息
年龄没有找到
如果我们试着对Amy这样做我们找到一个值
所以它不等于nil我们不打印这个消息
一般我们不仅仅查看一个值是否存在
当它存在时我们想使用它
Swift有一种简单的写法
写下“if let”
它是说如果字典含有Amy的值
让一个新的常量age等于那个值
我们就可以在if语句里使用那个值
请注意在此我们把它当成真正的整数使用
它不再是可选的
if语句查看它的值并解包
给我们一个普通的整数我们可以对它做整数的操作
我们看了一些if语句
这是另一个用来打印生日消信
有两件事需要注意
首先我们不需要在条件附近有括号只需要写下条件
第二我们给每一部分的语句加大括号
加表明哪部分代码会被执行
此外我们还有switch语句
可以用来写更复杂更强大的匹配
它转换一个常量或者变量的当前值
和一系列可能的情况匹配
比如我们有这种情况
如果年龄值是1
我们想要打印第一个生日快乐的消息
我们也可以匹配范围
匹配任意值使一些人是青少年
我们可以匹配更复杂的模式比如这一个
一个叫decade的临时常量
等于我们当前要匹配的值
检查是否能被10整除
如果可以用它打印一条特殊的生日消息
为任何人刚满30或40岁或其他重要的年龄
但这有一个问题
如果我们想要为以下年龄的人打印消息 比如41
97或56
它们不会得到一个消息
听起来很不幸特别是在它们的生日上
坦白说Swift在这帮助我们
Swift确保switch语句是完整的
你不会偶然的忘记你需要的情况
在这个例子里我们可以加一个default语句
捕获每一个我们之前没有捕获的情况
说无聊的生日快乐
这里有另一个switch语句
它获得一个字符串值用户名和一个布尔型值
指示用户密码是否合法
我们会一起用这两个值
来产生一个合适的消息用来显示
当用户要登录一个受限的区域
要这样做 我们可以同时switch两个值
用一个元组像之前做过的那样
这表明我们可以写一些非常非常有趣的case
有趣的switch case
可有一个case是用户名为admin
密码为真
然后打印消息来欢迎管理员回来
现在如果是一个客人
我们永远都不希望客人进入受限区域
即使密码是合法的
我们可以用下划线来忽略密码
它的意思是匹配任意可能的值
对所有其他用户
我们不关心用户名是什么我们只关心密码
我们可以忽略用户名
我们切换到我们想要做的
检查密码合法性
要这么做我们创建一个叫做IsValid的临时常量
然后我们用三元条件运算符
就是这个问号和冒号
来说如果是合法的用这个消息
否则用这个消息
如果我们浏览一些例子
如果使用管理员并且密码有效
他们将得到一个管理员消息就像我预期的那样
如果我们试着用客人即使密码有效
他们得到对不起你不能进入的消息
如果我们用Bob并且密码有效
他获得预期的欢迎消息
但如果他的密码无效他得到访问被拒绝的消息
现在关于这个switch语句有最后一个需要注意的点
它没有默认这个情况
它没有的原因是它不需要
它已经是完整的
如果我们看一下后这个case
实际上它包括了所有可能的情况
我们没有在上面匹配到的
所以switch语句不需要default就已经完整了
这就是Swift语言的一些基本知识
现在我想把演讲交给我的同事Brian
来介绍Swift中的函数和闭包
好的 谢谢Dave就像我已经说过的
让我从怎样在Swift中定义函数开始
你用func关键字定义函数
然后你在大括号里实现它
我们定义了一个简单的函数叫做sendMessage
打印消息到控制台
然后你可以用一个直观的方式调用这个函数
通过写下其名sendMessage接着是一对空括号
让我们给这个函数加上参数
来表明消息是否应该吼叫
你写下参数的名称接着是冒号
然后是参数的类型
就像你申明一个常量或变量所做的那样
我们添加了一个叫做shouting的参数 它是布尔类型
当你调用这个函数时
参数的名称为你传入的参数提供一个标签
给参数加标签使代码更易读
使参数的目的清楚
在这个情况下如果没有shouting标签
一些阅读你的代码的人可能以为那个真是表明
是否发送这条消息
所以你可以喊出一个消息
但是你要把消息发给谁？
让我们加入另一个参数
使我们把消息发给特定的人
在这我们添加一个参数叫做接收人
是一个字符串类型
我们还通过字符串插入将接收人姓名加入我们的消息中
当你调用函数时你可以传入接收人姓名
现在虽然这个消息按你期待的那样打印
它读起来不是很好
发送消息接收人Morgan读起来很怪
当你调用函数时你希望它读起来自然
在这个例子中你希望读起来像
发送消息给Morgan这形成一个有好的语法的短语
你可以通过改变参数名称来这样做
这也会改变参数的标签名
这使得函数被调用时读起来好一些
发送消息给Morgan
但是这在函数内部工作的不好
在函数体里你希望参数是一个名词而不是一个介词
嘿给听起来不好
但是有时没有一个单词能工作良好
既在函数体内又在调用函数的标签
在Swift中你不用放弃其中的一个
当一个参数的名称不合适时
参数的标签
你可以明确地提供一个更合适的名称
你把这个明确的参数标签写在参数名前
在这我们添加to作为明确的参数标签
在接收者参数的之上
这表示你可以用“to”
当你调用函数发送消息给Morgan
然后你仍然可以在函数体内使用接收者
让我们添加另一个参数到函数中
使你调用它时能提供一个定制消息
这里我们添加了一个消息参数是字符串类型
现在我们调用函数你可以传递你自己的消息
再一次的代码如预期一样运行
但是读起来还是不好
发送消息消息是重复的
消息标签无助于澄清第一个参数的作用
因为函数名中已经说清楚了
发送消息
在这里参数标签使代码更难读
在这种情况
你可以在参数名前写一个下划线
这表明你不给参数提供标签
当你调用函数时
这时我们的函数读起来自然
发送消息 在Bash见给Morgan
我们不常需要喊出我们的消息
我们通常传递假给这个参数
在Swift你可以捕获这个行为
在函数申明中
当参数有一个常用到的值时
你可以把它作为default值
你能过赋一个default值在这个情况下是假
在参数的类型的后面
当你调用函数时
你可以忽略相应的参数
default值被使用
当你决定是否使用 怎样使用明确的参数标签
什么时候忽略一个参数或者提供一个default值
记得函数只被申明一次
但是被重复使用
最重要的事是
函数被调用时读起来清楚准确
现在让我们学习更多
你需要考虑的事
当编写优秀Swift API时
请去看Swift API指导演讲
我们已经看了很多种函数获得值的方式
让我们看看让它们返回值的方法
假设你想写一个函数
返回数组里第一个有给定前缀的字符串
函数获得一个字符串前缀
一个字符串数组
返回一个有给定前缀的字符串
如你所见 你用一个箭头
来表明函数值的类型
在这里是字符串
让我们看看这是怎么工作的
首先用一个for-in循环来遍历数组中的每一个字符串
然后检测字符串是否有给定的前缀
你需要检测字符串是否有给定的前缀
使用string.hasprefix方法
如果它有 那么完成了你只需要返回这个字符串
通过将它写进返回语句
但是你要返回什么
如果数组不含有你在找的字符串？
因为这个函数申明了会返回字符串
唯一的选项是一些合法的字符串
在这个情况下是空字符串
但这不是好的Swift代码
但是像Dave演示过的可选是完美的
用来表明值有可能不存在
所以你只需要改变函数返回类型
为可选字符串通过在字符串后写一个问号
现在你可以返回nil当字符串没有找到时
因为函数返回可选的字符串
你可以在一个if-let语句里安全地使用它
请注意Swift推断函数的返回类型
所以不需要明确的写出来
我们看了一些方法
函数能获得和返回不同类型
比如字符串 整数 数组和可选类型
让我们看看怎么写另一种函数
假设你要写一个函数过滤一个数字数组
基于一些条件
让我们想想这个函数需要做什么
它要获得一个数字数组
对数组中的每一个数字
函数判断是否将它包含在被过滤的结果中
比如你想要一个数组被过滤成只含有偶数
你可以测试每个数是否能被2整除
4当然是偶数所以它被包括在结果数组里
如果一个数不是偶数比如17
过滤函数转而检测下一个数
然后继续 遍历剩下的数组
让我们看看写这个函数的代码
函数申明是你想要的
但是你要把什么类型放在这个包括数字参数这里？
你刚刚看到决定是否把数字包括进结果里
是一个函数
不是一个简单的值比如字符串或者一个数字
在Swift里函数可以接收其他函数做为参数
那么函数类型看起来是怎样的？
所有的函数类型在Swift中都有基本的形式
函数参数类型如果有的话
在括号里跟随的是一个箭头
然后是函数返回类型
比如说我们早前的发送消息函数
它有空的括号
因为它不需要任何参数箭头空
这里空表示它不返回任何值
在Swift中如果你的函数不返回任何值
你不需要明确的写箭头空
这是第一个字符串函数
它的签名复杂一些
但是它的类型还是遵循基本的形式
它获得一个字符串一个数组一个字符串参数并返回一个可选字符串
你们已经知道了函数类型的语法
所以很清楚你要怎么完成过滤整数这个函数的申明
这个包括数字参数
可以是任何函数获得一个整数返回一个布尔型
你把类型Int写在括号里箭头布尔
让我们来完成函数的剩余部分
你需要生成一个过滤过的数字的数组
这有一个变量叫做结果
它被初始化为一个整数数组
随着你遍历传给这个函数的数组
检查每个数字是否应该包括在结果数组里
要这么做 你把每个数字传递给包括数字函数
注意在过滤整数函数体内
包括数字参数被当成被传入的函数的名字
那说明你可以调用它
和调用其实函数相同的方式
这就是你怎么写一个函数
获得另一个函数做为一个参数
但是你怎么调用这类函数？
首先你需要把一些值传递给过滤整数函数
这是一个数字数组
和一个简单的函数叫做可被2整除
表明一个整数是否是偶数
你可以看到能被2整除的类型
和包括数字参数的类型匹配
这表明我们可以传递能被2整除函数
给过滤整数函数做为一个参数
你通过简单地传递能被2整除函数的名字
现在你得到一个数组只含有偶数
注意你没有包括括号
当传递能被2整除函数时
这是因为你现在并没有调用它
它在晚些时候在过滤整数函数体内被调用
还要注意我们传递了数组的名字
我们也可以传递数组字面值
比如如果你只需要传递少量值
不需要创建一个常量为了等会的重用
传递函数参数也可以这样
很可能能被2整除函数
不会被重用
新建一个函数很麻烦
每次你想要传递不同的过滤函数条件
如果你看看能被2整除的重要部分
你可以看到给它一个名字
仅仅是为了方便重用
能被2整除仅仅是一个名字
针对你所看重的功能
在Swift中像你可以写一个字面值字符串或字面值数组
你也可以写一个没有名字的字面值函数
被称为闭包表达式并在你的代码中被传递
写一个闭包表达示的语法
和函数申明很像
除了它没有名字
把整个闭包的函数写在大括号中
用in关键字把闭包函数体和签名区分开
用数字参数类型是整数
在闭包的函数体内返回一个布尔型
这是最明确和最完整的定义闭包的方式
但是你之前见过了
Swift可以推断很多信息从代码的上下文中
比如闭包的函数类型已知
从包括数字这个参数的类型中
所以你不需要明确的写出来
如果整个闭包的体只是一个返回语句
像这里一样你不需要明确的写出return关键字
这是更干净的语法但是因为闭包很短
看起来这个参数数字都显得有点多余
像这种情况Swift提供暗示的变量名
所以不需要写出参数名或者in关键字
这个暗示的文件名
用一个美元符号开始以及一个从0开始的数字
$0表示第一个闭包参数$1是第二个 等等
虽然这可以在任何闭包表达式中使用
使用它们不会使你的代码变得难以阅读
现在你看到Swift提供很多方便的编写闭包的方式
但是直接在一个函数的括号中传递它们
看起来有很多符号
一个关闭大括号紧邻一个关闭括号
看起来很怪
但是当闭包是最后一个参数时
这种情况就是
你可以写一个尾随闭包
就在括号外面
你接下来会看到如果一个闭包是一个函数的唯一参数
你可以移除这个括号
这时尾随闭包看起来很好
当闭包含有多于一行代码时
比如这个更复杂的闭包
它判断一个数每一位相加的和是否是偶数
尾随闭包语法
确保即使是复杂的有多行的闭包
看起来也很自然很好
现在过滤整数函数很有用
如果你想要过滤整数
但是要怎么过滤其他类型的数组比如类型数组？
例如假设你有一个名字数组
你想要一个过滤了的数组只含有名字
含有少于给定的字符数
你可以写一个过滤字符串函数
像你看到的这个
因为你已经写好了一个过滤整数函数
让我们来看看你能否重用一些逻辑
首先你当然想要做一些簿记
把所有涉及数字的地方改成字符串
下一步把所有整型改成字符串类型
因为实际上这2个函数的行为
是一样的对整数和字符串
没有什么别的要做
它们实际上是同样的函数
你现在有函数过滤字符串数组
现在如果你想要一个函数过滤其他类型
你可以重复这个步骤
为每种类型
但是这显然很无聊
实际上你可以写一个函数
可以处理任意类型的数组
这被称为泛型函数
我们来看看怎么写一个
写一个这种函数和你已经看到的没有很大不同
首先你把名字改得更通用
比如函数叫过滤
而不是过滤整数或过滤字符串
接下来更重要的是你需要填写占位符
你在这里看到的元素的类型
但是你现在还不知道元素的类型
所以你希望是一个类型参数
实际的类型会在函数被调用时确定
这里我们填写了占位符
用一个通用类型参数叫做元素
所以你能看到区别在类型参数
和实际存在的类型比如字符串或者整数
你把类型参数写在尖括号中
紧跟函数名后面
现在你有一个泛型函数
作用于一个数组包含任意类型的值
你和以前一样调用这种函数
你不需要指定你想要这个函数处理的类型
因为可以通过你传入的值推断
过滤是如此有用的操作所以Swift标准库
有一个过滤方法可用用于任何种类的序列或集合
你和你看到的过滤函数以同样的方式工作
除了这是一个方法你需要用点号来调用它
names.filter像你看到的
Swift标准库实际上有很多其他方法
接受闭包作为一个参数
另一个很有用的是映射方法
它也作用于任何序列或集合
映射返回一个新的数组
包含对每个元素进行闭包的结果
这是一个例子在对上面得到的包含短名字的数组调用映射方法
它传递一个闭包把每个字符串转成大写
你可以把它们链起来强行多个操作
比如
你可以在同一个表达式里过滤并大写
通过把两个方法形成一个链
使用点号
过滤先进行
然后映射在被过滤过的数组上被调用
最终返回大写的字符串
这读起来很棒
即使你用尾随闭包语法
所以使用闭包和函数接收闭包作为参数的这个组合
使它有可能写一些复杂强大的代码
用一个简明但是很有表现力的方式
我们已经看了函数和闭包以及一点泛型函数
我想邀请Alex上台告诉你们所有关于Swift数据类型的事
谢谢Brian
你们看到了Swift中的数据类型
现在让我们看看怎样创建你自己的数据类型
让我们从结构开始
你创建一个像这样
你写下struct关键字跟随的是结构的名字
矩形
然后在大括号里
你写下结构的属性
属性使用相同的语法
和你在前面见过的变量和常量一样
这里有两个属性
做为申明的一部分被赋值
所以你可以新建一个矩形通过只写下矩形这个名字
跟随一对括号
要访问属性你使用点号
你不需要为属性提供值
在类型申明中
实际上大部分时候你不这么做
更常见的 你只写类型
然后你在建立实例时赋值
矩形除了尺寸的另一个属性是面积
虽然你不想储存面积
你需要在每次尺寸变化时更新它
你想要的是一个属性
它的值当你需要的时候被计算出
你可以用一个被计算属性
要创建一个被计算属性
在属性的名称和类型后面你写一个函数体
用来计算并返回
函数的当前值
虽然它是被计算的而不是被储存的
你还是可以用点号访问它
你还可以用属性做更多
你可以有设置者和监视者
你可以获得更多信息
在Swift编程语言的属性章节
就像你在结构中定义属性
你还可以定义方法
和你已经看过的函数一样的语法
和属性一样你用点号访问方法
当你需要调用它们时
你看到几次新建矩形的语法了
我们看看它做了什么的更多细节
这看起来像调用函数因为这个括号
实际上它是在调用初始化者
我们一直在用一个特殊的初始化者
称为成员初始化者
Swift为你的结构实现
这是它看起来的样子
如果你明确的写这个初始化者
你写init关键字
然后在里面你为矩形的属性设值
注意有两个宽度
一个是属性另一个是参数
你写下self点来明确的参考属性
这就是你怎么写初始化者
矩形结构有足够多的代码
值得进行一些组织
Swift中这样做的一个方法是使用扩展
一个扩展让你向一个已有的类型添加功能
在Swift里你可以用扩展来分离你的代码
核心功能可以在结构的申明中
辅助的功能可以在一个或多个扩展中
你可以不受限地扩展你自己的类型
如果你需要你可以扩展从其他地方来的类型
比如foundation 或者标准库
你早前看到怎么创建范型函数
在不同的类型上进行相同的操作
你还可以创建泛型结构它包含不同类型的数据
语法看起来很相似
你仍然有泛型类型参数在名字后面的尖括号里
这个例子把名字附加给一些种类的元素的数组
这会是个有用的数据结构比如
来填充一个表视图有不同的部分有标题名
你创建一个泛型结构实例
就像另一个类型的实例
你在这看到如果你写下类型标注
棋盘游戏和质数有不同的类型
一个是字符串数组另一个是整数数组
它们有不同的元素类型所以它们是不同的类型
你不需要写数组
Swift自动推测是什么元素
这就是结构
在Swift中另一个数据类型是类
你在名称前写下类别关键字
但是关于结构的一切都仍然有效
属性 方法 初始化者等等
那么为什么你想要创建一个类？
一个原因是你的代码可以引用一个类的同一个实例
从不同的地方
这和结构的行为不同
一个结构的行为像一个大的值
比如 在游戏中 你让玩家1有一个分数
你给玩家2一个一样的分数你有两个独立的分数
改变玩家2的分数不会改变玩家1的分数
但是两个玩家需要引用硬盘上的同一个文件
当他们记录他们的高分的时候
因为这是一个类这就是你想要的行为
当玩家2得到一个新的高分并把它记录到文件中
两个玩家都看到改变
如果你是从另一个面向对象语言中过来
你可能习惯于写很多类
在Swift中你不需要经常写它们
任何时候你想要检查是否相等或进行复制
你通常只需要一个值类型像是结构
要知道更多为什么以及怎么用值类型的信息
你可以看一个很有用的演讲
另一个用类的原因是
你想从已有的类中派生一个子类
比如假设你有一个框架
给你鱼类包含一些核心的鱼的功能
你可以创建子类来添加功能像是飞鱼可以添加飞方法
你标明这是一个子类通过写冒号鱼
子类还可以覆盖方法来提供它们自己的实现
像抱怨鱼
它像普通鱼一样游泳只是会先报怨
你写super.swim来调用父类的实现
这个代码还不能被编译
当你在Swift中覆盖方法
你需能写覆写关键字来明确标明
现在代码工作
像是一个错误偶然覆盖了一些东西
这也是一个错误写了覆写却不覆盖任何东西
这就是说如果你拼错了一个想要覆盖的方法的名字
Swift会在编译时告诉你这个错误
一个赛格威也可以提供初始化者
比如鱼有初始化者接收一个名字
抱怨鱼的初始化者需要名字和报怨
在初始化者中你设置初始值
为子类申明的属性
然后你调用super.init
让父类完成初始化
你可以用初始化者做更多特别是围绕类
你可以在初始化者这一章知道更多
在Swift编程语言中
你看过了怎么用子类
让我们谈谈子类编程
继续游戏的例子假设你有玩家基类
因为每个玩家轮流行动你有一种方法这样做
你有两类玩家
你有人类玩家类
通过显示UI给用户来完成一轮
你有电脑玩家类
通过进行最好的合法的移动来完成一轮
问题就是什么进入基类的实现中？
人类和电脑玩家没有共享的行为
没有共享的代码可以移出
在附近的代码
你永远都不会想要一个玩家基类实例
所以这个方法永远都不应该被调用
这里能写的唯一合理的东西
是一些严重错误来帮助你捕获失误
在开发的早期阶段
所有玩家类在做的是描述做为一个玩家意味着什么
每个玩家进行一轮
它是玩家的蓝图
在Swift中你用协议表达这种关系
协议规定要求像是方法和属性
他们就像接口或者抽象类
你可能在别的语言里知道
你使用protocol关键字来创建一个
因为它描述其他类型要实现的要求
你不提供一个实现
类型通过提供那些实际来遵守协议
你通过写：Player来申明符合性
就像你对父类做的那样
这样你不再使用子类
这些方法不覆盖任何东西
你不写覆写关键字
没有理由它再是一个类
让我们把它变为结构
让我们仔细看看人类玩家
它还有一些其它的属性比如名字和分数
如果你创建一个玩家实例你可以打印它
你得到一个default的描述因为标准库
可以把任何类型转化成字符串
但是如果你想要定制这个转化
来打印一个更好的描述
该标准库还有一个协议叫CustomStringConvertible
使你提供自己的描述
这是这个协议的样子
它有一个要求一个描述属性
任何遵守这个协议的类型使用定制描述
你要在哪实现这个描述属性？
记住你可以整理你的代码
使用扩展核心功能在函数申明中
附加功能在扩展中
有一个字符串转换功能是第二类
它不是核心功能所以把它放在扩展里
这是你如何扩展一个类型来遵守协议
你在第一行写下“: CustomStringConvertible”
然后你在扩展体内实现要求
现在你可以调用打印你获得定制的字符串转换
你可以在Swift里用协议和扩展做很多
来组织你的代码并建立抽象
要知道更多信息请看
2015年的面向协议编程
那带来Swift最后的一个数据类型枚举
你在有一个值列表时使用枚举
当你提前知道
这是一个枚举支持左或右对齐的文本
当你用一个枚举时你用点号来访问它的案例
这里只有两个案例
所以你把它们写在一行还是可读的
因为枚举是一个可能值的列表
经常把它和switch一起用
一个switch case对应一个枚举案例
一遍遍写对齐有点重复
在这并不需要
switch考虑文本对齐所以需要检查的仅有的可能值
是枚举的案例
所以你可以省略枚举名称
只用写“.left”
还要注意这里没有default
和你已经看到的原因一样
switch已经覆盖了所有可能的对齐值
没有东西留下给default来处理
省略default有一个好处
如果你晚些回来增加一个枚举案例
但是忘记更新switch
Swift会高亮这个错误直到你添加遗失的代码
让我们快速看一看你能对枚举做的其他两件事
你可以给每个枚举案例关联一个值
比如对齐可以指定要用多少填充
你可以获得那个填充值在switch case中
你也可以给每个枚举案例一个原始值从其他类型中
比如字符串或者整数
来让你提升代码的类型安全
通过用枚举取代字符串常量
你今天下午看了很多Swift
但是没有时间展示所有的
最后一个我想展示的是错误处理
在Swift中你可以用枚举来描述错误
你用throws关键字标记一个函数可以抛出错误
你在必须要运行的代码块前写defer关键字
无论是否发生错误
它都会在退出作用域前被运行
比如从一个函数返回
在调用可能抛出错误的代码前
你用try关键字标记它
你可以捕获和抛出错误用catch和throw关键字
关于所有细节请看错误处理章节
在Swift编程语言中
你可以在这找到这本书和其他资源的链接
有很多很好的Swift演讲可以在这周晚些时间参加或者看视频
谢谢