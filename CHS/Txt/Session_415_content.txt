在服务器端使用开源Swift
欢迎大家 我是Philippe Hausler我在Apple Foundation工作
今天我们将谈论服务器上的Swift
我们看看为什么服务器端的Swift是引人注目的
各个部分是怎么一起工作的有哪些是可以开箱即用的
哪些不是 一些现实世界中的Swift运行在服务器上的例子
最关键的
你可以怎么贡献来使服务器端的Swift更好
现代应用开发不仅仅是为一个平台开发
它是一个生态系统
你很难找到一个应用
没有任何服务器端的部分
来自分析 实时通讯
或者云上储存的共享的状态
服务器是构建一个丰富并吸引人的应用必须的一部分
现在构建下一个伟大的事
通常有接触开关需要制造
你最后嗡嗡地响写你的应用
然后你知道你要写的下一个东西是用不同的语言
这会造成停机时间和重复实现
我们都知道我们有多不喜欢重复代码
但是运行在服务器上的Swift有潜力
不仅仅提供无缝开发体验
还提供更丰富更吸引人的用户体验
通过分享你的代码库合适的部分
可以节省开发以及测试的时间
但这不仅是语言
这是API
通常难以剥离API的架构
从语言的构造中剥离
比如字符串 数组 字典 并发
它们通常成为表达那个语言的库的核心部分
有了这些 让我们来到Swift的架构
不仅仅是在服务器上还包括Swift怎么适用于其他平台
在早期的设计考虑中
Swift不是只能运行在Darwin系统上的语言
它本质上可以运行在多种平台上
有了社区的帮助 这个目标开始成为现实
对平台 平台支持比如FreeBSD目标比如Raspberry Pi
甚至Windows和Android
一些很令人兴奋的事
在所有这些平台Swift依赖系统库
构建在其上的你有标准库
它提供一些根本性的基本构建块和数据结构
在Darwin上我们有被称为覆盖的附件
这帮助系统框架更好的通过接口连接Swift
但因为Linux中没有Foundation或Dispatch
一个可移植的接口被创建做为那些基本的部分
我们从一个那里应该有什么的大纲开始
和一些初步的实现
和社区一起 我们添加了很多基本功能
任何现代的开发工作都会需要的
当你的应用进行混合时
你可以看到这些部分在一起工作用在两个平台上相同的方式
有了以这种方式创造的Swift
作为开发者你可以从你的应用中选出合适的部分
来为服务器开发使用你一直在用的熟悉的概念
Swift.org是获得最新版本的Swift的中心地带
注册邮件列表得到GitHub仓库的链接
或者持续集成构建
或者一个阅读资料支持的好地方关于Swift的最新开发进展
这是一个针对Swift工具链的地方
工具箱里都有什么？
工具箱提供在Linux和Mac上构建的支持
你可以在Mac上开发然后部署到Linux服务器
有持续集成服务器来确保
对语言和API的改变
发生并持续集成这样所有东西都像预期的一样运行
你有标准库
给你基本的构建块 协议 结构 类型
你在构建任何Swift应用时都需要用到的
还获得Foundation、Dispatch、XCTest
作为Swift工具链中的项目
这给你可移植API的横截面
这使你为不同平台开发时能保持代码几乎是一样的
但是你得到一系列工具
用来编译 打包和调试Swift应用
以及Swift仓库来完成尝试那些新特性
你在两个平台上都可以得到所有这些
现在有一些东西没有被包括
我们做了一个设计决定
有些东西对跨平台没意义
或者让开发者开发自己的方案更好
因为他们是高度特殊化的
新平台不仅仅是代码
它们是持续集成和验证而且移植到新平台的冠军
通常最了解实现那些
你的代码来到这里开发者机会
用户界面是一个非常特定于平台的东西
在iOS上你有UIKit
在Mac上你有AppKit虽然它们有很多相似之处
他们是两个不同的东西
因为他们解决不同的问题
关于这点UI可以是网络模板
有时用户界面中的用户不一定是人
有可能是另一个服务连接在发送服务协议
这很明显是一些相当专门化的东西
现在把你的应用部署到服务器中
这是一个专门化的任务
这样你可以选择合适的服务
适合你的要求 预算 规模 当然还有你的应用的服务
这不应绑定到特定的Swift轨道上
在服务器上运行你可以有多个应用
运行在多个Swift版本上
很高兴看到热爱者创建一个开放和分享的社区
有一些很好的机会
来丰富Swift生态环境
总有很多努力被投入到了这个领域
我们在IBM的合作贡献者做出了
一些相当优雅的东西
我们会看一些抽象的概述
让我们深入一些
现在看一些现实世界的例子
关于他们在IBM是怎么参与到Swift中的John Ponzo和Patrick Bohrer
谢谢Philippe
嘿 我是John Ponzo
我是IBM移动云开发的技术领导
我很激动今天能做为WWDC的一部分
我们在IBM对Swift社区感到兴奋
做为开源的一部分我们看到了这个语言的极大潜力
对不熟悉的人 让我稍微介绍一下关于IBM的一些事
及我们怎么参与到Swift中
2014年Apple和IBM宣布了我们的合作 聚焦在
企业应用和解决方案
接下来IBM成为Swift的早期使用者之一
当它两年前在WWDC上被宣布时
从那以后我们开发了超过100个企业应用
完全用Swift开发那些应用和解决方案
而且我们有最高的集中程度之一
在IBM开发这些应用的Swift开发者的集中程度
我们开发这些企业应用和解决方案的经验
持续地指出后台允许一个优秀的体验的重要性
做为开发者我们知道它有多重要
有一个后台 带来优秀的移动体验
我们还知道一个重要的事是我们快速安全地
部署适合的代码到适合的地方
这就是为什么我们对帮助把Swift带到服务器来如此兴奋
我们感谢Swift.org社区的资源和活动
从邮件列表
到代码贡献和新形成的开源项目
我想强调我们在IBM做的一些事情
来帮助开源社区把Swift带到服务器
首先我会告诉你社区实现
然后告诉你Swift沙盒和Swift程序包目录服务
我们开发了这些来帮助开发者
更容易学习、发现、分享Swift资源
接下来我们受到一致的开发者体验的激励
连接客户和服务器的体验
最后我们开发了Kitura网络框架
用来帮助促进和优先我们的贡献
进入libdispatch和foundation的核心库中
接下来云实现是开发过程中的重要部分
我们受到了使把Swift部署到云上更容易更有趣的动力
通过IBM Cloud对Swift运行时的早期支持
和Xcode附加应用
来帮助部署代码到云上社区实现
当Swift.org 12月发布时
我们想做的第一件事之一
就是帮助增长开发者生态环境
我们看到了这个语言的价值
我们想快速地把它介绍给其他开发者
我们创造了沙盒
这允许开发者更容易在Linux上运行和测试代码
沙盒在浏览器中运行有了这
你可以轻易地编写Swift代码保存代码
并看到在服务器上的运行
自从我们发布了沙盒
我们根据社区的反馈和要求做出了很多改进
沙盒现在支持移动UI多种UI主题
自动保存代码允许选择多个Swift运行时
为了帮助开发者分享关于Swift的问题和解决方案
我们增加了代码快照的支持依靠一个永久的URL
你可以用这在邮件列表中分享代码
还可以在开发者论坛中分享 比如stackoverflow.com
从2105年12月4日起运行了多于150万的代码
谢谢 我们看到了超过150万次在沙盒中的运行
从我们12月发布它起
从2月起增长了超过200%
沙盒解锁了从其他平台访问Swift
实际上我们看到了稳定的增长和兴趣
关于来自其他操作系统的运行和会话
我们很高兴见到这些我们希望继续看到Swift的增长
我们还看到了来自全球的使用
开发者使用沙盒学习Swift并合作
我们的目的是继续支持沙盒来帮助社区的成长
一个有活力的程序包生态系统对任何语言都至关重要
尽管Swift的程序包管理器规格还是早期技术
我们在服务器上做的所有事
都是基于创建和构成基于Swift的程序包
因为这 我们发现了关于发现和发布我们自己的程序包的需求
所以我们开发了Swift程序包目录帮助实现这个目标
我们继续更新程序包目录
随着Swift程序包管理器规格的进化
今天我们的目录中有1500个和Swift程序包管理器兼容的程序包
从2月以来增长了400%
接下来当我们开始思考服务器
任何服务器语言的一个基本要求
是能够支持网络接口
网络框架负责监听端口
路由代码到合适的逻辑
我们认为很重要的一点是那个逻辑尽可能一致
和客户端的编程模型
为此目的我们开发了Kitura框架
我们在2月开源了Kitura
这是一个基于模块化程序包的网络框架
它利用libdispatch和Foundation实现并行
和实用程序库的支持
一致的开发者体验
这也驱使IBM对Swift.org的贡献
我们用Kitura来开发我们服务器端的应用
我们和社区一起工作
有很多IBM以外的Kitura活跃贡献者
这是我们把Swift带到服务器的很重要的一部分
我们还为基于Swift的工作优化了我们的云
我很荣幸地宣布我们最新的更新
我们基于Cloud Foundry针对Bluemix的构建包
包括所有你需要的
来快速部署你的基于Kitura的应用到IBM Cloud
这个构建包包括最新的Swift运行时
核心库 依赖的C库
部署Kitura到云需要它们
此外开发是关键
我们很高兴宣布IBM Cloud Tools for Swift
一个Mac应用允许你
容易地用Swift开发端对端应用
这个工具帮助你快速和容易地连接客户端应用
和运行在IBM云上的服务器端Swift
继续开发你的工程
你的客户和服务器端工程在Xcode中
用这个工具来连接那些工程并且部署你的代码到服务器
有了这些介绍
我想欢迎我的同事Patrick Bohrer上台
他会展示正在运行的服务器端Swift
谢谢John我是Pat Bohrer
是IBM围绕Swift进行很多有趣事的技术领导
很激动来到WWDC
我会进行我认为本场演讲中有趣且令人兴奋的部分
它有趣因为我会在服务器上进行一些Swift的实时编程
它令人兴奋是因为我的2个演示
依赖到云的一个工作的网络
希望我好运
我们已经谈了服务器端的Swift
这对很多人意味着很多
但是对本场观众对本次演讲
我们想谈论的是网络服务
什么是网络服务？
简单地说 它们是运行在电脑上的程序
它们监听
它们监听进来的请求
它们负责路由这些请求
到一些服务器端逻辑并返回回应
现在外面的可以是一个浏览器
可以是另一个应用
谁知道呢？可以是另一个服务
但简单的说它就是这样
要开始 这听起来足够简单
让我们继续深入做一个现场演示
我已经提到过
通常这些网络服务运行在Linux上
我们听说了Swift运行在Linux上
让我们继续 为第一个在Linux上的演示工作
让我们那么做
这里我们有Linux在运行确保我不是在撒谎
让我们新建一个目录来做一些来玩一玩
所以我们非常有创造性地创造了一个用来玩的目录
你可以看到里面没有东西
我们会用Swift程序包管理器
如John提到的 我们在服务器上做的任何事都是基于程序包的
我们要用 这是一个版本的Swift程序包管理器
对晚些时候观看的人来说这些语法会改变
但是对我们今天用的这个版本它有一个初始化步骤
所以如果我们使用这个命令可以看到它创建了一些文件
根据结构和package.swift文件
Swift程序包管理器知道怎么构建你的应用
如你在这里所见我们有package.swift
它创建了一个Sources.main
这就是用来构建一Swift一个简单Swift程序包所需的全部
说过这些让我们继续
我们可以开始Swift构建这很容易
它创建了一个.build/debug/play可执行程序
让我们运行它
你好世界
但我们在开发网络服务让我们做一些真实东西
这是Swift程序包管理器为我们创建的东西
我们最好有一个程序包它是基于我们的称为Play的目录
它给我们的可执行程序命名为play这是得名的原因
我们想要增加一部分
那是对Kitura的依赖我们只需要指出这
现在我们来到主文件
让我们删除旧的你好世界
让我们在这加一些代码
这个代码所做的是 忠实的支持者
我们获得Foundation
我们导入Kitura和一些Kitura支持程序包
我们定义了一个路由我提到过的 为了进入的请求
我们需要把这些请求导到一些地方
我们要定义一个路由在这 那是/hello
如果任何请求进入 我们会运行这些代码
很简单
我们会指定一些回应头
我们会发送回一个字符串说你好世界
往下到这我们指定我们监听的端口是8095
我们开始监听这个端口我们指定我们的路由是一个委托
然后我们启动服务器
这很简单
让我们保存它
现在我们要第一次构建Kitura
因此我们在这加了一些东西
John提到过 我们利用libdispatch和Foundation
所以它在做的是获取
Swift程序包管理器正在获取我们需要的东西
我们写我们关心的代码
Swift程序包管理器获得Kitura
它在获取我们的网络它在获取一些系统支持
一个记录器 所有你在网络服务中需要的东西
以及监听套接字和其他的功能
这些都是独立的程序包
在GitHub上你可以获取
它被编译和构建
现在让我们运行可执行文件
我们现在可以看到它说它在监听8095端口
让我们看一看
打开本地主机8095端口因程序运行在本地Mac和Linux
你看到我们看到一个Kitura页面
如果我们没有定义默认路由
它会显示这个页面并说明其他开始的方式
你可以覆盖这些但是对我们来说想要定义的是一个你好
所以你要做的第一件事是说你好世界
第一步当你思考它时
让我们返回我们会在这做更多
让我们返回并编辑主文件
这里有很多东西是我们可以用的
我们有Foundation
我们可以生成JSON
让我们添加一个小助手代码来帮助我们生成JSON字符串
我们会添加一个叫做今天的路由
这是一个新路由 如果有东西进入/today
它会利用Foundation获得当前日期
我们会新建一个NSDateFormatter
就像我们在客户端会做的一样
我们用这DateFormatter来创建日期和时间字符串
然后我们来到我们的回应
在这我们创建一个负载是一个字典
现在在互联网上 你们都知道的这都是JSON
我们指定消息是你好世界日期和时间是当前的
我们把它转化成字符串这是我们这次返回的
让我们看看它是怎么工作的
让我们重新构建
快多了 所有程序包都在本地
这很好
我们会再次运行它你可以看到我们在监听8095
我们会刷新并看到我们仍然在你好上返回你好世界
让我们看看今天
这就是了我们有JSON负载
每次有人来这
这些代码会被运行返回一个回应
这是一个很简单的如何开始
我妻子要我取下眼镜
这很有趣但是现在让我们让它更有趣
在我们讨论时我想首先介绍给你们
一个有趣的例子我们提供给社区的
它叫做BluePic
端对端Swift BluePic
BluePic是一个社交相片分享应用示例
它有富客户端界面一个很漂亮的界面
我们开发并提供它做为示例的一部分
它还有个很有趣的后端
是一个Swift服务器后端纯Swift
使用Kitura运行在IBM Cloud
它还使用一些有趣的服务
我会提到 如Watson和ObjectStore
SQL数据库 这些好东西
如果你准备好深入
它还使用IBM全新的事件驱动的编程模型
叫做OpenWhisk它也支持Swift
这个程序包还有很多事在发生
它现在在GitHub上为那些想开始的人
在我们进入演示模式前
我想花一点时间谈谈设计模式
不像以前我们有网络浏览器做为客户端
我们当然有iOS应用
它有我们的MVC设计模式
你看到它还有一个网络接口
有请求和回应
它和我们的Swift中间层联系和我们刚刚做的类似
这只是更有趣
接收一个进入的路由请求 把它们路由到一些逻辑
然后 最后 我们还有一部分
我们有一些有趣的服务我们会讨论一下
用来保存我们应用的所有数据
再深入一点
我们有客户端
它有响应性它是非常用户特定的和视图驱动的
用来渲染一些漂亮的界面和应用的用户互动
然后我们有中间层
中间层响应用户有的所有东西
但是它还做一些很有趣的事
当相片被递交给中间层
它会接受那些相片并储存到ObjectStore中
会围绕它们创建一些元数据
但还会做些有趣的事
它会把相片递交给Watson的Vision Insights
提取相片的标签
山 湖和类似的东西
这像是从中间层给我们的应用添加一些特殊酱汁
它还会注意到相片是在哪拍摄的
调用Watson的WeatherInsights获取信息
当地的天气是怎样的？
我们添加所有这些
不是把这些双程通信放在客户端
我们把它放在服务器端它总是可用
构成我们的服务
实际上这是端对端Swift
让我们部署合适的代码到合适的地方
这是在野外运行的BluePic
它运行在设备上
它连接了云
应用服务器接下来联系
各种不同的服务我提到过的 这很好
现在如果出现一些问题 我们需要调试或进一步开发应用
我们要怎么做？
做为一个iOS开发者我们知道该怎么做
我们获取应用的源代码放到我们的Mac中
我们把它载入Xcode然后我们准备好了 对吗？
我们可以调试它
我们可以调试应用
你可以向云发送请求
我们现在知道做这些
但是现在中间层也在运行Swift
我们要怎么做？
对的 你可能不想像我一样在Linux上使用VI
但是我们能做相同的事
我们可以获取服务器端源代码到Mac中
把它载入Xcode 然后我们就可以进行正常的开发
并且在Mac上本地调试我们在调试和开发
这令人兴奋
现在我们的开发世界变得更大了
我们实际上控制端到端的所有事
从客户端到中间层甚至到我们接触的服务
我们真的对此感到兴奋
因为我们认为它降低了开发周期
因为你在客户端上工作
而且你想在后端增加功能
是在一个你了解的世界中
到那一端 我们做为开发者我们认为我们可以再深入一些
就像我们对程序包目录和Swift沙盒所做的
我们开发了叫做IBM Cloud Tools for Swift应用
作为一个Mac应用来帮助我们管理这个更大的开发世界
我们对此感到兴奋
这个应用实际上使我们能够
管理端到端的整个栈
有很多事是我们能手动做的
但是为什么不用一些工具来帮助你呢？
IBM Cloud Tools for Swift
我们期待听到你们对此的反馈
像我们的沙盒和目录
我们会继续 你们知道我们的这些应用刚开始
做为开发者我们知道我们想要它做的
我们会继续增加功能并聆听社区
但是我们对它的可能性感到兴奋
我们的目标是允许社区
继续开发优秀的应用现在由服务器上的Swift驱动
有了这些背景
让我们再看看一些演示
会向你展示和Swift一起的未来有多光明
首先这是IBM Cloud Tools for Swift
如果你想要开始
它显示给你一个界面是一个漂亮的富界面
对那些想要开始使用BluePic的人
它还允许创建一个BluePic工程
创建Kitura工程或一个空工程
关于这有趣的部分
不仅是克隆那些工程
还提供来自IBM Cloud的资源
当你准备好部署工程它会
实际上 当你创建这些它会部署它
因为它知道这是一个工作的例子
要准备好并快速运行这是开始的一个好方式
对我们 我们已经创建了一个BluePic应用
你可以看到我们有一个BluePic演示
非常聪明的命名
在这你可以看到我们有一个客户端应用
一个客户端应用和云运行时之间的捆绑
它们都用Swift写
此外如果我们深入这里是服务器端代码
你可以看到它有代码在我的电脑本地位置的引用
以及绑定到它在云上的位置
以及为了应用提供的所有服务
我可以在Mac本地管理所有这些
并且我可以启动
在界面中点击一下来查看我的客户端
这就是BluePic的客户端应用
它也被创建了 让我放大一下这个文件
Bluemix.plist
知道开发周期 可以运行
你的云服务 在本地而不是远程
很容易控制这些
它会监听本地8090或者远程的在Bluemix里
并传递授权
这里的想法是使这些简单
在这我们继续运行让我们想像
有人提交了一个关于这个应用的错误报告
这是我们的应用
它有漂亮的界面
我们可以滚动我们可以看更多图片
如果我们点击这些图片我们可以看到有更多信息
这一张的名字是自然我们可以看看是谁拍摄的
可以看到 是在德克萨斯州奥斯汀拍摄的
在那没有山
我们还可以看到当时的天气
多亏Watson Insight我们看到一些标签
这很有趣如果我点击标签可以看到
我们有一个相片有湖
如果我返回 让我们点击山
我们看到有一些相片有山
所有这些都是通过后端集成完成的
用户不需要加标签这是自动提取的
但是我们听说有一些抱怨关于当我点击多云的天时
所以让我们看看
我们点击多云的天我们看不到任何东西
我们知道这发生了什么
不知道为什么服务器没有返回正确结果
让我们切换一下
我们想找出原因 弄清真相
所以我们来到这 点击服务器端代码
它会启动并显示服务器端代码所在的目录
如果我把这些载入一个终端
你可以看到有很多相同文件我提到过的
我们在服务器上使用Swift 3.0
我们有Package.Swift我们有资源
我继续
并创建了一个服务器端代码的Xcode工程
让我们打开它
这就是代码这是一个图像的获取处理器
我们知道当我们想要图像我们的图像供给
我们会调用获取函数 在服务器的/images目录
若我们看看这 我们想要深入它并说
不知道为什么当我传入一个标签我们没有返回正确结果
让我们在这加一个断点我们会运行服务器
现在我们可以看到服务器在监听本地的8090端口
让我们切回去
在这我们要客户端的本地选择是
这样它就会连接到我们的本地服务器
让我们重新运行模拟器
顺便说一下 我在网络连接这方面真是很幸运
请继续保持你们所做的
让我们向下滚动到我们有问题的文件
让我们在这点击
让我们点击多云的天
好的
在这我们在服务器来到了断点
如果我们想知道发生了什么
比如我们想要打印标签
我们可以看到有点难看到那个
我们可以看到进入的字符串是cloudy%20sky
这不好我们不想要这样
让我们看看
我们还知道有Foundation
若我们用Foundation清理它
我们会移除百分号
现在这是一个变量而不是一个let
让我们构建它
我们会再运行它
重新运行服务器
让我们返回应用
好了
等待我们的时候超时了
让我们返回让我们再点击一次多云的天
看看我们是不是改正了我们的问题
打印标签
好多了这是我们想要的
让我们关闭这个断点并继续
我们看到我们得到了结果
此外 因为我改正了错误
我可以返回到Swift云工具
我可以进行重新部署把这些代码部署到服务器上
它会马上开始部署代码
和你的客户端一起工作就是这么简单
和你的服务器端以及重新部署到云
我希望你们喜欢这些演示
我需要告诉你因为每件事都进展顺利我觉得放松了很多
代表IBM我和John谢谢所有抽空前来的人
做为一个Swift开发者这是令人兴奋的时候
我们邀请你加入我们加入更广泛的社区
把Swift的能力带到服务器
更多信息 关于你在这听到的任何事
关于我们是什么 IBM在做什么
我们有developer.IBM.com/Swift你们可以来我们的开发中心
就这些了 再次感谢
我会交回给Philippe
如你们见 IBM对Swift进行了很多很棒的工作
他们不仅仅贡献优秀的代码
他们还丰富社区
和他们开发服务的各种经验
和流水线化开发流程
他们的一些工作对使服务器端Swift成为可能相当重要
但是你们也可以帮助使服务器端Swift成为现实
有一些事是你们可以贡献的
Swift的一些部分还没有完成
有很多工作要做
有一些功能还没有实现
没有实现表明有贡献的机会
有很多容易的方式让你做出贡献
缺陷追踪系统有一类问题被加上了初学者缺陷的标签
但是代码不仅仅是实现
设计可以和Swift一起工作的新API和指南
是邮件列表上的日常工作
很多讨论是关于语言本身的工作
并且是来自像你这样的贡献者
当然 你的程序包 你的应用
会使得服务器上的Swift了不起
如果你有任何问题关于资源或链接
关于我们今天讨论的内容的
我们有本场演讲 我们有一切集合在一起
还有一些很好的相关演讲
我强烈建议观看
API设计指南讨论了我们的一些设计上的想法
在Swift 3新命名的背后
我强烈建议你们看一下
“Swift Foundation的新特性”
所有新添加的值的类型和特性
都会在服务器上可用
当然性能不仅仅是在本地应用上必要的
我们也需要确保服务器
的响应性好而且快
所以性能 在所有平台上Linux和Mac上都有
是需要关注的
我强烈建议看一看GCD中的新特性
会和Swift 3一起发布
就是这些了 非常谢谢