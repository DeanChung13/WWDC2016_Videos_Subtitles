性能和电池寿命的I/O优化
大家好 欢迎
我叫Kushal Dalmia我的同事Terry Long
我将为大家讲解I/O优化
为性能和电池寿命
在本次演讲中 我们将讲解什么是I/O
它会如何影响你的应用
以及如何提高应用的性能
通过提高其I/O性能
我们现在开始
众所周知 每年设备越变越大越变越好
屏幕分辨率增加 在过去十年增加了16倍
在相机领域也有类似提高
已经可以拍摄4K HD视频
还可以从我们的移动设备里拍出令人惊艳的的高画质相片
所有这些改进造就更为丰富的媒体每天被生产
和消费
为了关注它们的前景
我们来看看iPhone壁纸大小的趋势
如果跨越设备和时代来看iPhone壁纸
可以发现其呈指数增长
iPhone 6s Plus上的壁纸大小
是对应的iPhone 3G的14倍
所有手机数据都有相似的趋势
我们编写和使用复杂的应用
在游戏 信息和社交网络领域
我们工作和存储丰富的文件 如PDF
我们分享和捕捉高品质音频和视频文件
现在为了管理这种数据爆炸
应用需要在系统资源利用方面做到非常高效
主要系统资源有CPU 内存和I/O
关于CPU和内存 我推荐大家观看去年的WWDC演讲
“iOS和watchOS上的性能”
今天我们将来讲解I/O
I/O 即输入输出是和本地文件存储进行互动的操作
或和基于网络的服务器
和文件系统互动的操作
以及处理文件读写的操作都被认为是一个I/O
和网络服务器交流是基于网络I/O的很好的范例
I/O如此有趣的其中一个原因是
在I/O技术上发生了巨大的变化
性能特征上也是如此
考虑一兆字节的延迟
当写入最平常的I/O媒介时
如SSD 硬盘和普通Wi-Fi网络
你可能会注意到 同样的操作
大概耗时几毫秒到几百毫秒之间
根据互动的媒介不同
I/O之所以如此重要的原因
是应用上I/O性能直接影响用户体验
应用性能的延迟时间的改变
可以表现为响应问题
由于I/O是系统中的共享资源
你的应用的I/O性能可能会影响整体系统性能
我们一会儿将会看到
I/O也会显著影响设备上的电池寿命
为了帮你们了解应用上I/O使用情况
我们提出了自己的I/O哲学
该I/O哲学有四个主要支柱
减少应用里的I/O用量
用正确的线程完成这些I/O
采用合适和高效API完成这些I/O
最后 对应用中I/O性能测试和测量
当我们通读剩下的文档时
我们会了解其中每一项的更多细节
提高应用中I/O效率的最好方法
是减少I/O用量
每一个I/O操作都和多个硬件功能相互作用
在设备上
这是一个现代设备的简单框图
包含部分功能及它们对电池寿命的影响
当应用使用I/O时会在CPU上运行代码
访问内存
最后从硬盘上读取或写入数据
如果还涉及到网络
基于网络收音机也参与到互动中
所有这些组件联合起来的能量消耗
让I/O在电池使用方面操作非常沉重
由于I/O对设备电池寿命的负面影响
我们来看看可以使用的最好的实践技巧
来减少应用上的I/O用量
首先是缓存
基本理念是 建立数据的内存副本
而不是每次操作都访问磁盘
为了决定应用里的数据是否应该在内存中建立缓存
你应该查看数据的访问模式
被频繁写入或更新的数据
也许是在应用中建立缓存的好对象
还有 当从磁盘中读取需要昂贵处理步骤的数据
比如 解压缩一个图片文件
可能是应该缓存的一个好例子
即便如此 应该注意内存和I/O平衡
和I/O一样 内存也是系统中共享和有限的资源
应该格外小心用户需求
如果决定在应用里建立缓存
我们推荐使用NSCache API
因为它们可以很好地处理内存压力条件
下一个实践技巧是合并I/O
基本理念是
把系统里的I/O推迟到之后更为合适的时间
由于I/O技术的工作方式
更大更少的I/O对系统来说总是更为有效
其中一种实现方法是
是采用应用状态改变通知
比如 后台应用数据来安排I/O
在macOS 你可以使用集中任务计划 API
来安排维护和备份任务
系统会找出运行这些任务的最佳时间
想了解更多这些API的信息
我们推荐观看2014年WWDC演讲
“编写节能高效的代码”
我们已经看过一些最佳时间技巧
来减少应用中的I/O用量
我想为大家介绍我们的示例应用是Terry和我编写的
在剩下的演讲中我们会一直使用这个应用
来演示最佳实践技巧的实际影响
这个应用叫ImageBox
ImageBox是iOS和macOS上很棒的应用
让你可以添加和浏览图片
对于每一个图片 它将显示其缩略图
显示相关标识 比如喜欢
或者某张特定图片是否有相关注释
当你点击某特定图片 将进入详细视图
可以让你把图片标记为喜欢 取消喜欢
或者为它添加注释
我们编写了这个应用
我们想要知道它是否I/O高效
并且在I/O性能方面也表现良好
我将来介绍可以使用的工具
来决定是否在你自己的应用上使用
该工具叫做Xcode调试仪表
来看看它如何使用
为了使用该工具只需从Xcode UI中运行项目
这会在设备或模拟器上启动项目或应用
点击Xcode调试导航器
它显示了应用里的实时数据
关于应用正在使用的所有系统资源
有CPU 内存 能量 网络和磁盘
由于我们对应用中I/O活动或I/O性能感兴趣
我们选中磁盘
一旦选中 可以注意到会显示实时数据
应用中发生的读取和写入数据
看上去该应用每几秒都进行大量读写入
即使没有用户活动时
为了进一步调查我们想进入Instrument
用Instrument来找出原因
继续在Instrument里点击配置
点击重启按钮
如此操作时Instruments提供了组模板
你可以从中选择分析应用
因为我们对应用里I/O活动感兴趣
继续选择系统使用情况 然后点击选择
将打开新的Instrument模板
准备记录应用中的I/O活动
继续开始记录
注意到在详细显示区
该模板显示了应用里所有的系统调用
为你进行I/O操作
还显示了其他有用信息 比如实际和请求的字节数
对于那些读写操作以及相关的文件路径
现在我将停止记录
为了找到刚才看到的大量写入
在Xcode调试仪表
我们按照实际读写的字节数进行排序
找出大量写入 在最上方
有了这个之后 可以进入扩展详细视图
查看确切的回溯
关于应用中执行这些I/O的代码部分
看上去是应用的委托方法
双击进入源代码检查器r
将显示执行I/O操作的准确代码块
在源代码检查器中点击Xcode图标
将会回到Xcode项目
并为你高亮显示执行该I/O操作代码
来看看这段代码更详细的情况
问题出在应用中的实现部分
委托方法didFinishLaunchingApp
作为实现的一部分
我们新建了一个计时器DispatchSource
让它每5秒记录一次
且对于该计时器作为事件处理的一部分
我们写出整个数据存储
我们中很多人这样写代码 因为我们想确保
应用数据可以持续定期地保存
然而 还有更为I/O高效的方法实现
为了修改代码
首先我们删除计时器的重复部分
把这部分删除
取而代之 新建一个方法叫dataStoreDidChange
在应用中不同的地方被调用
只要数据存储发生任何变化
作为该实现的一部分
我们把计时器的调度源往后推15秒
用这种方法我们收集应用数据存储的所有更新
往后推一段时间 合并写入
当计时器最终过期时
它收集了我们频繁采用的更新
我们把其作为单一的I/O操作写出
来看这些代码在应用中的功能
再次点击Xcode UI中的运行按钮启动应用
进入调试导航仪 选择磁盘仪表找到I/O活动
可以发现应用已经不再进行那些写入了
现它完全空闲 用户也没和它进行互动
这就是我们的预期效果
我们高效地合并了应用中I/O用量
提高了I/O效率
使用正确的线程
在看过了一些最佳实践技巧可以减少I/O用量之后
我们来看看利用这些I/O实践的趋势
我想请Terry上台为大家演讲
Terry
谢谢 Kushal
我们刚看了一些可以减少应用中I/O用量的好方法
避免对电池寿命产生不良影响
继续讲解我们的哲学的第二大支柱
我会讲解一些方法 可以在应用中有效使用线程和队列
达到更好的I/O性能和效率
系统中每一个线程或每一个应用都从一个线程开始 叫做主线程
该线程很特别 有几个主要功能
主线程的第一个功能是处理输入
如果点击应用里的一个按钮
主线程负责处理该输入
并作出响应
此外 主线程还负责更新界面
这适用于比如绘制视图操作布局 或动画
当主线程空闲时 它随时备用响应输入和更新用户界面
但是如果在主线程上执行其他操作
比如执行长任务
比如昂贵的图片处理
这类的工作将会一直占用主线程
也就是说它不会空闲
则无法响应输入或更新界面
此外 我们今天关注的是
应该避免在主线程上进行I/O
我们已看到I/O是系统中的昂贵资源
需要对其正确管理
如果在主线程上进行I/O操作
使用应用的用户会发现问题
第一个例子是在macOS上
用户可能会看到旋转光标
旋转光标意味着主线程繁忙
则无法和应用进行互动
此外 在iOS上
繁忙的主线程可能会造成应用发生冻结或无法响应
最后 在主线程上进行I/O会造成动画出现问题
比如 如果在视图表格里大幅度滚动
然后在主线程上进行I/O加载更多的数据
应用在做这些操作时
就无法继续显示动画
就会造成诸如卡屏的问题
我想再提一次Kushal刚才指出的演讲
iOS和watchOS的性能
该演讲有很多关于如何有效使用主线程的信息
现在来看看ImageBox示例应用
这次在macOS上运行
我发现 当主集合视图想添加图片时会产生问题
来看一下
首先从Xcode 点击运行按钮
Xcode启动应用
然后点击工具栏右边的添加按钮
从打开的面板选中一张图片 点击打开
如你所见 打开的面板并没有消失
我们看到了旋转的光标
终于 打开的面板消失了
我们选中的图片显示在主集合视图中
这里出了什么问题？
我们已经知道
旋转光标意味着主线程繁忙
所以主线程上一定有操作在运行
让它无法空闲
所以我们无法和应用互动
我们需要找出问题
因此需要用到Instruments
回到Xcode 可在“产品”菜单里选择“配置”
Xcode重新编译配置文件
启动Instruments
这次我选择Instruments里时间分析器模板
时间分析器是非常好的工具用来观察耗费的时间
每一部分代码执行时需要的
所以我们可以利用它找出为什么主线程繁忙
点击选择
Instruments打开全新空白的时间分析器文件
默认情况下Instruments时间分析器
只在CPU活跃执行代码时显示耗时
其他诸如I/O的操作并没有在CPU上活跃执行
CPU会等待I/O结束
若想在Instruments回溯中看到此类操作
首先点击“记录等待线程”选项
在记录设置目录下
现在Instruments也会显示耗时
当我们进行其他操作时比如等待I/O
我们开始 点击Instruments中“记录”按钮
Instruments启动应用我会做同样的操作
和之前一样 来重现问题
首先 点击“添加”按钮选中一张图片 点击“打开”
问题又出现了
在Instruments里点击“停止”
看看问题所在
在继续讲解之前 我想整理一下输出
通过只关注我编写的代码
而不是其他系统库
要做到这点 首先 点击显示选项
在Instruments右边
然后点击“隐藏系统库”
Instruments只显示我编写的代码
而不显示其他可能会调用的系统库
现在我们来看Instruments的主详细视图
Instruments显示了应用中所有不同线程
和它们执行时不同的耗时数
在本例中 我们只对主线程感兴趣
所以我可以展开主线程部分
找到最繁忙的栈
本例中 我看到应用里有一个打开的面板回调
它在数据存储里调用一个添加方法
该添加方法之后把所有数据存储存到磁盘上
Instruments显示该存储操作耗时几乎为7秒
这非常糟糕
而我刚好知道该存储方法正在写出一个很大的Plist
这会让问题更为严重
Kushal在之后的演讲会提到一些方法
来优化数据存储操作
将使操作速度变得很快
但现在 我只想关注如何解决这个问题
使得无论该操作进行多久
我们的应用响应度都非常高
为了实现 来看一下代码
这里是打开的面板回调
它在等待一个响应
当接受到该响应
它将验证响应是否有一个指向有效图片的URL
然后它为图片的集合视图新建一个项目
并试图把它添加到数据存储
如果成功了
它会告诉主集合视图重新加载数据
使得我们可以看见选中的图片
如我们之前所见
Instruments也验证了这一点/b&gt;
调用该添加方法非常昂贵
因为它把所有的数据都存到磁盘
看看如何进行修复
回忆一下 应用有一个主线程
主线程正在执行打开面板回调
该回调在数据存储中调用添加方法
这时我们看到旋转光标
当所有操作完成
才终于可以更新主集合视图
这显然不是我们想要的
在这整个过程中 主线程都是繁忙的
我们无法和应用进行互动也无法更新任何界面
一种解决此问题的方法是采用中央调度 即GCD
利用GCD 可以新建调度队列
调度队列
是在主线程上同时运行代码的方法
可以把昂贵的I/O相关操作移动到该队列中
让主线程空闲
为了实现 我们可以在该队列上调用async方法
然后把昂贵的操作推入
队列而不是主线程
最后 由于UI相关操作必须要返回主线程
我们可以异步调度返回最终更新集合视图
现在 正是我们想要的
昂贵的I/O操作正另一个队列中进行
因此主线程空闲
也就是说我们可以跟应用进行互动
并继续使用
来看看在代码中实现是什么样子
我还使用了之前同样的openPanel回调
首先新建GCD调度队列
并提供一个描述标签
本例中 我建立了一个队列
可以重用所有数据存储操作
接下来 把昂贵的操作
当添加图片时 移动到这个队列
在调度队列中把代码块提供给async方法
最后 要更新UI时 可以调用dispatchqueue.main.async
传入包含所有UI相关操作的代码块
完成之后 来看结果
如果在Xcode里重新编译运行
首先点击“运行”按钮
等待应用启动
再次尝试添加图片操作
点击“添加”按钮从打开面板上选中一张图片
点击“打开”
可以看到 打开面板立即消失
我们可以继续和应用进行互动
添加更多的图片
你还会发现 在主视图上我添加了一些占位图片
这只是表示 我们正在处理该数据
并存到磁盘
当所有数据完成添加和存储
所有的图片都会显示在主集合视图
在整个过程中 主线程都是空闲
也就是说应用响应极为迅速
这个结果正是我们想要的
现在我们把操作从主线程移到调度队列中
应该考虑告诉系统该操作的内容
使系统可以为我们管理资源
为了实现 可以采用一种叫“服务质量”的方法
服务质量是一种方法 可以告诉系统
正在执行的操作的内容
使系统可以正确地管理资源比如CPU或I/O
系统管理这些资源
在系统不同的运行中进程之间
以及应用内部不同的线程之间
当使用服务质量时
请记住正在执行的工作的三个属性
可见性 重要性和期待值
问问自己三个问题
正在执行的工作是否对使用应用的用户可见？
其次 该工作的重要性是什么？
该工作是否必须完成在别人可以继续使用应用之前？
最后 该工作预计需要多久
是否是立即发生的还是估计需要很长时间的？
在继续之前 我想推荐去年WWDC上的一个演讲
叫作 用GCD建立响应式和高效的应用
该演讲讲解了很多GCD的细节
以及如何使用服务质量
我大力推荐大家观看
当我们思考完这三个属性
我们准备从四个服务质量类里选择一个
第一个服务质量类
是用户互动
用户互动被指派给主线程
为了完成比如响应输入和动画的操作
所有其他和主线程异步发生的操作
都应该使用其他三个服务质量类之一
其中第一个是用户启动
用户启动工作对应用用户可见
用户期望得到立竿见影的效果
用户可能也需要该工作结束
在他们可以继续与应用互动之前
一个好例子是
如果我点击一个按钮 切换到新视图
可能需要在不同的队列中加载资源
为了显示该视图
该工作应该在用户启动中进行
服务类的第三个质量是实用工具
实用工具服务质量通常和
有进度条或其他活动显示器的工作相关
该工作通常耗费很长的时间
它也对应用用户可见
这方面一个很好的例子是渲染电影
它不会阻挡任何人
继续使用你的应用
但是它也耗费很长的时间才能完成
最后一个服务质量类是后台
后台操作对用户不可见
其实 用户甚至根本不知道它正在进行
这方面的一个好例子就是索引
索引通常对应用性能十分重要
但一般用户不会注意到
所有这些服务质量类都很重要
因为当你选择服务质量类
它会帮助通知系统该如何管理资源
使不太重要的工作 如后台操作和索引
不会消极影响重要的工作 如动画
即使该工作在不同的进程上进行
当选择了一个服务质量类时
有两种方法
可以在应用中指定服务质量
第一种方法是提供一个可选QOS参数
给调度队列的async方法
本例中 我指定了qos:.background
也就是说当提供的代码块异步运行时
它将使用后台服务质量
此外 若正使用操作队列或操作API
这两者都有一个服务质量属性可以对其进行设置
比如实用工具
现在我们已经初步了解服务质量
以及如何指定
让我们回到ImageBox应用
看能否为添加图片选择合适的服务质量
为了实现这一点 我们可以思考这项工作的三个属性
可见性 重要性和期望值
添加属性是可见的操作
对应用用户来说
但它不一定需要完成
在我们可以继续做其他事之前
比如浏览图片或添加更多图片
此外 因为还显示了占位图片
我们给出了指示 该操作
可能会耗费较长时间
出于以上种种原因 服务质量
可能是该项工作合适的选择
现在我们知道了一些方法可以移动昂贵工作
比如I/O 让它们离开主线程进入另一个调度队列
以及如何利用服务质量指定该工作内容
让我们来看哲学的第三支柱
采用适当的API
首先我要提到的就是 资产目录
如果你还不知道 资产目录是一种方法
可以简单地管理应用里的资源 如图片
它们被用来存储比如应用图标和启动图片
以及所支持的不同设备上的所有图片
以及比例系数比如retina或非retina
用SpriteKit编写游戏时
资产目录也用来编写Sprite Atlases
可以利用资产目录来标注资源
以服务按需资源功能
另一个使用资产目录的例子是
在watch complications里存储资源
为什么资产目录对I/O来说很棒？
资产目录有一些很棒的存储效率性质
首先 因为资产目录存储所有图片
用同一种优化格式
而不是许多单个文件
你可以通过使用资产目录得到较低的磁盘占用
此外 通过iOS上的如应用切片等功能
当从App Store下载应用时
它将利用资产目中的元数据
决定该下载什么资源到设备上
比如若我下载一个应用到iPhone
App Store知道不需要下载任何资源
准备给iPad或其他不同屏幕分辨率的iPhone的
这会在设备上省下不少空间
此外 资产目录对性能也很有帮助
因为它们存储用的优化格式
图片加载将变得更快
如果利用它们为游戏编写Sprite Atlases
由于用户可以很好地管理一个大一点的资源
而不是很多小的资源
这些Sprite Atlases可以加快纹理渲染时间
最后 如果使用资产目录
在运行macOS的硬盘机上
还可以加快应用的启动时间
实际上 我们看过高达百分之十的提高
在这些机器上的应用启动时间只需要切换到资产目录
你可能会认为要得到这么大的性能提高
切换到资产目录一定很难或很耗费时间
而事实上 如果已经使用了
标准NS图片和基于UI图片的API
切换到资产目录很简单
现在我想为大家用一个示例项目来演示
这里有一个还没采用资产目录的项目
要开始 首先可从文件菜单选择新文件
然后从资源类别 选择资产目录点击下一步
Xcode新建了一个 抱歉
系统提示时 为资产目录添加一个名称和地址
然后点击新建
现在Xcode为项目新建了一个空白的资产目录
要移动所有已存资产
从项目到该新资产目录
首先打开屏幕底部的添加菜单
选择“从项目导入”
Xcode会显示项目中所有图片列表
点击“导入”
它会把所有这些图片都移到全新的空白资产目录中
Xcode自动找出
哪些图片为哪些设备准备以及以什么比例系数
现在当重新编译应用时它将使用该全新资产目录
就这样
用了不到一分钟
并且不用修改任何一行代码
真的很简单 所以我强烈鼓励
大家采用资产目录 就在今天如果你还没用
关于资产目录 我还想提一点
今年有一个新的功能是 图片压缩
默认情况下 资产目录的图片是无损画质
但今年新的改变是
可以选择一种有损图片压缩格式
这些格式拥有硬件快速解压
所以非常快
因为有了这些压缩格式
可以降低内存占用
如果应用中有很多资产
会在潜在内存和空间节省方面受益良多
通过使用图片压缩
来看看如何使用图片压缩
回到刚转化到资产目录的项目
首先 点击目录里的一张图片
打开右边的实用工具侧栏
点击属性检查器
Xcode新包含了一个压缩弹出菜单
选中它时
它会显示所有可用的图片压缩格式
本例中 我选择自动有损
让Xcode为我选择一个好格式
这是关于如何在应用中利用资产目录的一点介绍
采用它们 使用新的图片压缩功能
现在我把讲台还给Kushal
他将为大家讲解其他更多的API
可以用来存储数据
谢谢 Terry
资产目录是既简单又高效的方法
来管理应用中的资产
我们很多人还会想到的另一件事
是应用数据在设备上如何存储和存储位置
我们很多人对序列数据格式很熟悉
如 Plists XML和JSON
这些数据格式流行的原因
是因为它们简单好用
而且它们作为数据交换格式也流行多年
在很多基于网络的服务中
这些数据格式对少量只读数据很有用
比如Info.plist文件中的配置信息
然而 它们不是数据库
而它们不是数据库的最大原因
是这些文件的微小更新
都会导致整个数据文件写出到磁盘上
这非常影响I/O效率
为了所有数据的存储需要
建议使用Apple SQLite数据库框架的核心数据
核心数据是Cocoa应用开发框架
用于管理应用数据
它将通过采用SQLite作为后备存储来处理数据持久化
它自动管理对象 对象图形和对象之间的关系
让你更简单高效地管理数据
它还进行修改跟踪
可以让你在数据模型中进行撤销和恢复操作
核心数据完全集合在Xcode工具链
因此可以建立和可视化数据模型直接从Xcode UI
现在我们知道这个优秀的工具和框架可以用来设计或编写数据模型
让我们思考该如何设计数据模型
最好的方法是把数据模型基于应用的UI需求
回到ImageBox
它到现在一直使用巨大的Plist
来写出所有文件和所有图片
和应用相关的
现在用核心数据模型来替换它
仔细思考该应用ImageBox有两个实体
第一个是集合视图里的项目列表
第二个是其中每一项的相关注释
我们来把它们放入各自的一张表里
第一张表是BoxItem
表示集合视图里的某些特定项目
第二张表是注释 表示注释本身
BoxItem表格含有一个布尔项
表示图片是喜欢还是不喜欢
还含有全分辨率图片 你想表示的图片
Notes表包含BoxItem里所有相关注释的主体
我们把这两张表用简单的一对多关系连接起来
当使用该数据模型时看看应用的性能表现
我们发现应用启动性能非常慢
我们用Instruments调查原因
发现应用耗费了绝大部分时间
在启动面板上获取核心数据模型
所以我们需要查看应用启动性能
从核心数据的角度
幸运的是核心数据让我们做到这一点
它有一个工具集合 帮助你调查
核心数据运行情况
比如 你可在应用上设置一个启动参数
即com.Apple.CoreData.SQLDebug
带着速度级别让你观察核心数据是如何
和其SQLite后备存储进行互动的
核心数据Instruments模板让你观察任何模式
关于获取和加载太多的数据
最后 SQLite查询分析工具的标准集合
比如 解释查询可用
让你更深入到某个特定查询
查看其性能
想了解这些工具更详细信息
我推荐大家查看去年WWDC文件
“核心数据的全新功能”
我们有了这些工具 来使用其中一个
找到数据模型的问题
为了实现这一点 点击项目
点击编辑方案
在打开的窗口中 选中参数面板
添加一个新参数com.Apple.CoreData.SQLDebug
速度级别选择最高3
完成后 继续点击关闭
现在我们从Xcode UI启动应用
这样做将重编译项目加载并启动应用
如你所见 控制台显示了各种日志
关于数据模型性能的核心数据
还会注意到的另个地方
是该应用用了几秒的时间启动
现在还没有结束启动
在日志输出中 我们看到更多核心数据
终于 应用启动完成
回到Xcode UI你可以深入挖掘所有日志
找出数据模型的问题所在
让我们继续 在应用中实践一下
你在这里看到的最开始的日志之一
是核心数据对所有行进行读取
从SQLite数据库在BoxItem表格
这是我们想要的
然而 下一个日志告诉我们该读取操作耗费了大概9秒
这非常糟糕
是应用启动速度慢的最大原因
回到之前执行读取所有这些数据的查询
会注意到一点
我们在读取全像素图片
对于BoxItem表格的每一项
尽管在启动屏幕上显示的只是缩略图
继续 我们还发现核心数据在进行一个合并操作
在BoxItem表和Notes表间
在从BoxItem表里读取每一项时
这么做的原因是
因为是一对多的关系
在这两个实体之间
而且我们需要在启动屏幕上显示一个UI批处理
来表示BoxItem是否有相关注释
让我们继续修改数据模型
首先要修改的是避免两张表的合并操作
核心数据又做了合并操作的原因
是因为我们需要显示UI
对于BoxItem的注释是否出现
所以为了改进该模型
可以简单地在BoxItem表里添加一个字段
叫notesPresent
该特定字段False值存在与否
告诉我们是否需要在启动屏幕上加入UI批处理
数据模型的下一个问题
是我们读取的是全像素图片
在启动屏幕上
让我们来修复它
我们把图片数据替换为缩略图数据
不再把全像素图片数据移动到
它本身的表格
而是把这两张表通过一个简单的一对一关系连接起来
如很多人知道的那样这些图片会变得很大
可能会是个好主意 来把这些图片
作为单独的文件存储在文件系统
而不是把它们放入SQLite数据库
所以我们将把全像素图片
作为数据库本身的一部分取代为图片URL
并把图片直接存在磁盘上
现在来看看应用的启动性能在修改完之后
从Xcode UI运行项目
采用新的数据模型 编译 启动
如你所见
应用启动速度快了四到五倍
只是修改了数据模型
所以让你的数据模型基于UI需求
可以明显影响应用的运行和整体性能
我们已经讲解了减少并优化
应用I/O用量的方法
我们接下来讲解如何测试I/O性能
其中一点建议是在不同设备上测试应用
如果应用发生改变 在多个平台上
将会是一个好方法 测试你的应用
在不同的设备 在所有这些平台上
即使应用只在一个平台上发生改变
跨代测试也是一个好方法
因为I/O特性有很大不同
另一个可能改变的部分
在你的环境 和应用用户的环境之间
是网络条件
为了帮你测试网络条件
或者最坏情况的网络条件
我们提供了一个工具叫做网络连接调节器
打开网络连接调节器的方法是
打开设置应用
滚动到最底部 找到开发者设置
点击开发者设置 进入这个菜单
可以看到在这里 是网络连接调节器
点击 打开这个菜单
显示了可安装在设备上的各种配置文件
有3G 高延迟DNS以及我最喜欢的 非常糟糕的网络
让我们来看看使用它的情况选中“非常糟糕的网络”
用上方的滑动按钮开启它
就这样
现在你的设备会表现的好像处于非常糟糕的网络中
你可以这样进行测试
另一个需要记住的事实是I/O是系统中的共享资源
应用的I/O性能可能会受到
其他系统资源的影响或者其他设备上进行的I/O
比如 由于多任务还有其他应用正在运行
你的应用的I/O性能可能会受到影响
所以最好能够测试应用在有其他应用的情况下
并且 系统试图维持公平的平衡
在内存和I/O使用之间
在内存紧张情况下I/O延迟也可能受到影响
所以我们也建议在内存紧张情况下测试应用
最后 系统默认情况下为你保留了很多缓存
为了让你更好地访问和存储数据
这些缓存的状态也可能影响系统以及应用的I/O性能
为了检测其最坏情况
我们会建议重启iOS设备
及macOS设备可使用purge命令
将会刷新所有缓存为应用模拟最坏情况
为了确保你的应用
在所有这些环境变化中保持性能良好
我们建议遵循I/O哲学减少和优化I/O
这里是本次演讲的几点关键
减少应用的I/O用量因为它显著影响电池寿命
把繁重的I/O工作量从主线程中移开让主线程为UI和动画保持空闲
指定正确的服务质量为了指定正在进行的工作内容
切换到资产目录因为它们是最简单高效的方法
来管理应用资产
为数据库需求使用核心数据
最后 测试和测量应用的I/O性能
想了解更多信息请访问www.developer.apple.com
本场演讲编号为719
本周内还会有这些相关演讲
你可以参考更多我们提到过的API和工具的细节
谢谢大家