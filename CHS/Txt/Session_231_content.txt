CloudKit最佳实践
早上好谢谢你们来参加本次演讲
我叫Dave Browning今天和我一起的还有Nihar Sharma
我们是CloudKit团队的工程师
今天我们跟你们谈一些最佳实践
来用CloudKit构建你应用
那么 我们具体会谈些什么呢？
这个 首先我要介绍在Apple我们怎么使用CloudKit
我会说一下整个工作流程还有我们用的一些API
我们用这些API给顾客们提供流畅的体验
我指的是让他们可以一直访问相同的数据
在他们所有设备的应用里
接着 Nihar会细说
CKOperation API的使用
以及使用时的可配置性和灵活性
然后 他会聊一下数据建模时需要考虑的一些东西
你在CloudKit存什么 怎样存怎样建立你数据库的架构
接下来 他会讨论错误处理
我们说过 这对于CloudKit应用来说至关重要
他的讲话会涵盖你在用API时可能会遇到的不同类型的错误
还有怎样根据你应用的使用情况考虑应对之策
给各位提个醒 我们在Apple创建了CloudKit
还创建了很多基于CloudKit的应用
所以你们应有信心你们的应用会成长和扩张
因为我们已把应用扩展到拥有数亿用户的规模
我还想给你们快速回顾一下概念模型
在最高层 我们有所谓的容器
这个一般跟应用一一对应起来
Photos、Notes和你应用在CloudKit有一个容器
在一个容器里你有一个公用数据库
你可以将所有用户可以看到的数据存在这儿
所以 其中一个实例是WWDC应用
或iOS里的News应用都由CloudKit创建
它们用公用数据库来储存文章、新闻
这些所有人都能看到的东西
我们还有私人数据库
你在这儿给一个特定用户储存数据
这个用户可以在所有设备上看到其数据
但别的用户都看不见
而今年我们新增了共享数据库
关于这个 如果你想了解更多一定要看昨天演讲的视频
“CloudKit的新特性”
深入探讨了共享
接着 在一个数据库里你有一个地带
在公用和私人数据库里都有一个默认地带
如果你把档案默认搁在数据库里这就是档案会去到的地方
你在私人数据库里可以选择创建一个或多个自定义地带
你便可以在那些地带储存东西
而当一个用户分享内容给另一个用户时
这份内容就会呈现为他们共享数据库里的一个共享地带
你可以把它的本质想成是一个代理
是所有者私人数据库和自定义地带的一个代理
当然 如果多个用户在多个自定义地带跟你分享东西
你就会见到很多共享地带
在共享数据库里
而在整个工作流程中 我演讲的重点会在自定义和共享地带上
就是我们刚在这儿谈的
最后在最低级 你有档案
这是键值结构数据存储
一份档案永远存在于一个特定地带
好 我快速地回顾一下在高层使用CloudKit的好处
你可以专注于构建你的应用而无需为搭建后台服务操心
我们帮你做了这步
你的用户能够进行所谓的自动认证
是指若他们在一台设备上登录了iCloud
你就不用提示他们注册、登录
或者任何常常会造成阻碍的东西
妨碍他们使用你的应用
他们若用CloudKit登录iCloud
你马上就有这个用户的唯一标识码
你就可以替他们储存数据了
最后 也是今天值得强调的就是你可以得到同样的数据
不对 是你用户可以在他们所有的设备上得到同样数据
若你将数据存于CloudKit
好 我们现在来说一下我们看到的常用案例
以CloudKit为基础构建应用时
我们看到 你有一个用户在运行一个应用
此案例里谈论的主角是Notes
Notes是基于CloudKit构建的
假设用户在iPhone上创建了一个note并存到了云端
当用户在第二台设备 比如iPad上第一次打开Notes的时候
会感觉数据神一样地推送出来
它已在iPad里了
而且 如果他们在iPad编辑
也会感觉数据神一样地向另一个方向推送
这就是我们想提供给我们用户的使用案例
我们应该这样想iCloud服务器是真实数据的来源
你的设备有这个真实数据的本地缓存
而CloudKit API就是两者之间的桥梁
好 所以这个实际上到底是怎么运作的呢
这个基本上就是当你的应用启动的时候
我们推荐的工作流程是你从服务器获取数据的变化
特别是在你应用首次启动时
因为你不知道有没有东西已经存在
用户从另一台设备写了一些东西
对吧 所以你连接到服务器获取任何你还没有的数据
然后你确保订阅了未来的数据变化
通过订阅未来的数据变化你告诉CloudKit让服务器
推送通知
到用户其它设备上的你的应用
接着 当然若你收到一个推送你应再获取数据变化
把用户其它设备上产生的新变化下载下来
好 我们来挖掘关于这个的更多细节
订阅数据变化
它是这样运作的当你的应用第一次运行时
我们一会儿会探讨为什么不过现在 当它第一次运行时
你设定好订阅告诉服务器
这些是我关心和订阅的数据
当这些数据发生改变时服务器就会告诉你
当你的应用在另一台设备上第一次启动时
给用户的订阅可能已经存在于服务器上了
但你的应用并不知道这个因为这是它第一次启动
所以你要保证这个订阅确实存在
你接下来要做的跟你之前在另一台设备做的一样
现在 既然你订阅了数据变更并且CloudKit会推送通知
你就要侦听这些通知我们来具体看一个例子
用户写一个新笔记
应用将它存于服务器上
服务器看了看说啊哈 这个用户有订阅
当有新数据的时候它们想第一时间知道
它说它来自iPhone所以不用打扰iPhone
但这个用户还有一台iPad
服务器于是就查找合适的Apple推送通知服务标记
帮你跟APNS连接并且告诉后者发一个推送给iPad
你于是就用不着亲自在后台发推送了
你的iPad终于收到推送
iPad接着干嘛呢我们之前提到
现在它会向服务器索取这些新的数据更改
具体就是iPad经CloudKit下载新的数据
更新自己的本地缓存然后用户在iPad上打开Notes
瞧 用户看到刚在iPhone上写的同样的东西
好 我们来实践一下搭建这个系统
我们深入到代码里到我们专门用的API里
实现一切
我们首先看到订阅数据改动
记得我说过的话
这是那些只在你应用第一次启动时你才需要做的一件事
所以 你会注意到在我们代码顶部有一步审查
查看我们在这台设备上是否本地缓存
既然我们都已经设置了这个订阅
我们不用每次应用启动都执行后面的程序
你为自己节省了网络请求你也为用户节省了一些网络操作
好 那么如果我们之前没有订阅我们来看看代码是怎么设置订阅的
今年 iOS 10新特性
CKDatabaseSubscription API
让你可以订阅整个数据库的任何改动
而且它可以用在私人数据库可以用在共享数据库
在这个例子里我们来关注新的共享数据库
所以你给订阅赋予一个ID方便之后查找 我稍后也会谈这个ID
在这个案例里 因为我们的对象是一个共享数据库
我们称数据改动为共享改动
接着 你要告诉CloudKit你想要发送的推送类型
在订阅触发的时候发送
我们来深入聊聊你可以用的不同类型
第一个类型实际上我们用得很多而且对于大多数用例我们都很推荐
这是一个静默推送通知
要做到这点 在我们的API里要关注到一个订阅对象
你可以用一个CKNotificationInfo对象设置notificationInfo
然后 如果你将shouldSendContentAvailable属性设为真
并且只设置这个属性你就可以静默推送了
后台就会替你给这个订阅发一个静默推送
而这个关键的一点是你不需要提示用户并取得同意
过去我们有开发者抱怨“嘿我们有这个订阅 但它会弹出窗口”
你们也见过这种情况对这个应用允许推送通知
很多人会选不
没得推送的话你就只能靠下载数据了
如果你这样做的话基本上你怎么样都不能引起用户注意
所以 你不需要征求用户接受
最后 你侦听这些通知的地方是在AppDelegate里的
RegisterForRemoteNotifications
而如果你确实想发送一个UI推送你其实想要的是标记
横幅或者发出声响你可设置三个设置中的任何一个
这会告诉CloudKit给你的用户发一个UI推送
而在这个案例里 因为你要提醒用户所以你需要征得他们的同意
你跟以前用一样的方法登记远程通知
一些要注意的细节
如果你去读APNS文档
它们会告诉你说推送可以根据设备条件进行合并
这个指的是 如果一个订阅触发了并且一个推送发到你用户的设备上
有很多情况 比如低电量网络不稳定等等
这些情况下不一定收到推送
这个合并协定的目的就是要至少实现其中一个推送
这意味着
你不应该认为推送就是要告诉你的应用具体“什么”数据改变了
因为如果发了五个推送而你错过其中四个
你只是错过了其中四个“什么”
取而代之 你应该将推送想作是告诉你“有些”数据改变了
一个或多个东西
这就是为什么我们要从服务器那儿找出哪些数据改变了
好消息是CloudKit API
给你提供了一个途径询问哪些东西改变了
所以你不用下载你服务器已经有的所有东西
我们回到我们的程序记得我们还在创建一个订阅
在这个案例中我们设定了一个静默推送通知
通过把shouldSendContentAvailable设为真
现在 我们需要拿这个订阅
让CloudKit客户端把它存到服务器上
你可能熟悉这个
但你做所有东西都要用到操作
而在这个例子里 我们用到CKModifySubscriptionsOperation
我们把刚创建的订阅告诉它
而这就是我想储存的那个订阅
有了CloudKit 因为客户端要通过网络跟服务器连接
这可能会耗很多时间所有东西都是非同步的
这意味着所有操作都有完成模块
一旦有一个响应回来这些模块就会被调用
在这儿 我们有一个modifySubscriptionsCompletionBlock
所有完成模块里你首先要做的是
检查错误我知道我们总是说这个
Nihar会跟你们更详细地讲解
不过 在这个案例里假设如果我们没有错误
那我们就知道订阅已经储存好了
而我可以在本地缓存我们已经做了这一步的记录
这样下一次我们就不用做了多亏有程序顶部的错误检查
顺便讲一下Nihar也会谈这个
CKOperation继承了NSOperation即Swift 3里的操作
所以你可以设置这个服务质量属性
默认值是.utility
他会讲一些设置这个时要切记的东西
而最后
拿这个操作让客户端发送回来的方法
就是把它加进数据库的操作队列里
既然这个例子里我们做的是共享数据库的订阅
就把操作加到共享数据库的操作队列里
客户端于是就会把操作发送到服务器
好 我们现在订阅了数据变化
下一步就是侦听推送了
既然CloudKit在另一台设备的数据改变时会发推送给我们
你要确保在Xcode里你打开了背景模式
你要在远程通知的选项打钩
可能还要选后台获取
如果当你应用在背景的时候你想做这个
这一步后 AppDelegate有一个你可能知道的方法
applicationdidReceiveRemoteNotification
fetchCompletionHandler
你给这方法一个用户信息字典
CloudKit就可以让你很方便地
看能否从这个字典对象里获取一个CKNotification
记得推送还可能有别的各种原因
但若它来自一个CloudKit订阅就会有CKNotification
现在我们可以查订阅ID
这一步很重要 因为你可能会有一个数据库订阅
在私人或者共享数据库可能还有别的东西
这一步让你辨别哪个订阅触发了这个推送
在这个案例里 我们假设推送来自我们的共享改动
现在我们可以去获取这些共享数据
这个流程我们待会儿会探讨
这步完成后 我们调用完成处理程序
这个方法的参数之一
好 现在我们设置好侦听推送了
我们假设一段时间后你的应用收到一个推送
我们该怎么办呢记得我们刚讲的东西
我们要获取新的数据变化
我们来看图说话看看这个是怎么运作的
我们的设备收到一个推送
我们说了这个是共享数据库的推送
你需要做下面两步
一你询问服务器
共享数据库里哪些地带变动了
记得我们之前谈过地带
可能还会有新地带出现而你甚至都不知道
因为有人跟你分享了一些东西
你接着发一个服务器变动标记
告诉服务器你在数据历史的哪个位置
这个我们一会儿也会深入讲解
有了地带的数字后 第二步就是你又询问服务器说 好
请告诉我在那些具体地带里哪些档案有改动
同样地对于每个地带你都有改动标记
标明你本地的设备缓存在数据历史里的位置
好 我们来更详细地讲讲这个改动标记
假设你的用户有一台设备就我们之前说的那台iPhone吧
用户用你的应用发送了一些改动到服务器
改动得到认可服务器在历史上标明这一点
这要用到服务器改动标记
在这个例子里 为了简便我们标明为字母A
这台设备又发送另一些得到认可的改动
这些标为B 等等 接着就是C
一段时间后 用户在第二台设备运行你的应用
假设是我们之前说到的那台iPad
iPad首先要做的记得在应用启动时
要做的是索要任何它没有的改动
于是它说“我想从服务器获取改动”
服务器说“拿去吧这些是我有的”
最后它说“你现在位于服务器改动标记C”
所以二号设备自己记好了它在历史上的位置
现在假设二号设备接着写了一些数据
写的过程中 一号设备收到推送
一号设备下载新的变动
最后 服务器说“你现在位于改动标记E”
好 二号设备又改了一些东西
一号设备收到推送下载东西
现在它位于改动标记I
你会意识到二号设备还在改动标记C
你写数据的时候你是不会得到改动标记的
除非你去索取你是不会得到标记的
我们假设在二号设备应用重启
或者用户重启iPad还是别的什么你的应用启动了
你去要数据改动
服务器就会发给你你从设备写了的东西
它不知道你会不会因为各种原因而没有本地缓存
如果你见到类似的情况也不要惊讶
这么做让你可以确认你有这一部分数据
最后 服务器会告诉你位于改动标记I
注意两台设备都在同样的状态都有同样的服务器改动标记
这就是展示系统如何运作的一个例子
好 我们来看看真正写代码来获取这些变化
这个案例里我们要讲解数据库
iOS 10一个新API叫CKFetchDatabaseChangesOperation
如我们所说 你把我们刚提到的服务器改动标记作为参数
你第一次用它时它会告诉服务器你啥都没有
服务器也会把它的所有东西给你
接下来在API以前的版本里
在这个操作最后你通常要检查一个旗标
看服务器有没有说之后还有更多的数据
我们一会儿也会谈论这个
但通常如果这个设为真的话你就要负责在客户端
重新触发这个操作
但我们加了一个新属性
到这些操作里叫获取所有改动
其默认值为真
它做的是让CloudKit客户端
替你做这个所以你不用亲自动手
运行了其中一个操作后
如果客户端看到服务器还有更多数据
它又会帮你自动把你的操作加入队列
当然 顺便调用你的回调方法
所以你再也不用担心
然后 你要实现这个完成模块
recordZoneWithIDChangedBlock
在这里 你会得知哪些地带
在共享服务器里改动了
你有收集这些地带ID
我们等会儿会讲怎么处理它们
再接下来是recordZoneWithIDWasDeletedBlock
这个告诉你哪些地带在服务器里已经不复存在
还可以让你清理任何本地缓存数据
之前位于那些现在不再存在的地带里的缓存
你会在下面的情形看到这个
就是有些东西没有跟你的用户分享
因为在他们的共享数据库里没有这个地带
另一个新事物是changedTokenUpdatedBlock
我们来看一下
记得之前我们一号设备写了一些东西到服务器
二号设备写了一些东西
过了一会儿 这个用户的三号设备也加入进来了
它首先要做的
是跟服务器连接并且获取任何改动
因为获取所有改动为真它要下载所有数据
但我们可能有很多数据比如这个案例里面
服务器会觉得没必要只在一个响应里就将所有数据传过来
我们分段来进行
服务器发给你一部分数据
CloudKit服务器会看到服务器还有更多数据
所以它要替你去设立另外一个操作
但它在做这步前要调用changeTokenUpdated
并且告诉你你现在在改动标记C
这让你可以跟客户端配合
随之设立操作
你更新你的本地改动标记
就用不着重复你已经做了的一些事情
比如说这个客户端替你说
“还有更多数据要从服务器传过来我们去获取吧
下载一些新数据”
结束后再调用changeTokenUpdated
看还有没有新数据然后又跟服务器连接
不过这一次会有一个错误
你处理错误时可能最终还是重新调用获取改动
但你就不用从头从A开始了
因为你有一个changeTokenUpdatedBlock
你的本地改动标记现在E
当你调用下一个时
服务器说“你只需从F到I的数据”
你不需要你已经处理的旧东西
这就是实现changeTokenUpdatedBlock的重要性
你就像正常情况那样缓存服务器改动标记
我们有完成模块
在这个例子里是 fetchDatabaseChangesCompletionBlock
同样地 你首先要做错误处理
Nihar也会谈这个
然后你会得到一个最后的改动标记
如果我们没有错误 最后就会是I
像正常情况一样缓存这个标记
现在我们收集了在数据库有变动的地带
我们要去获取有变动的档案
这也就是之前那个图表的第二步
我们通过一个新API来完成这步
CKFetchRecordZoneChangesOperation
它接受地带ID的集合作为参数
所以你不用担心要根据不同带有改动的地带来调取档案
你只需调用一个方法赋给它所有有变动的地带
我们不细看代码了不过它大概看起来是这样
在处理档案而非地带的地方你会有一些完成模块
而且在这个过程中你会收到改动标记
好 快速回顾一下我们讲了什么
你订阅了数据改动告诉CloudKit你想接收推送
一旦用户在另一台设备上改动了数据
你侦听了推送通知
当你收到推送时你连接服务器
获取变动了的数据
这么做的话 你的应用就能提供流畅的体验
给你的用户使用他们所有的设备
好 现在Nihar要上来讲一些特别的最佳实践
谢谢 Dave
大家早上好谢谢大家的到来
我是Nihar SharmaCloudKit团队工程师
我很高兴能够跟你们分享一些CloudKit最佳实践
我们过去几年在Apple领悟到这些操作
你也可以在你的应用里利用它们
我们先来看看我们要谈些什么
首先 我想说一下自动认证
Dave提了一点点我想更详细地讲讲它是什么
你怎么用它
接着 我要讲到CKOperation API
这是我们原生CloudKit框架主要用到的API
然后 我们会谈你可以牢记的一些点子
在设计你应用的数据库框架时可以用
它们让你更有效地利用CloudKit API
最后 如我们之前告诉过你们的
错误处理对编写一个CloudKit应用至关重要
我今天在这儿想重申一遍
并且探讨几个不同类型的错误
还有你的应用应该如何处理它们
那么 我们开始吧
首先是自动认证
你可能熟悉这样的一个UI
第一次启动时应用向用户索要很多私人信息
用户甚至都没开始用这个应用
而我们觉得在CloudKit我们有很好的方法
让你增加和用户互动的机会
不需要开门见山索要任何私人信息
我们通过CloudKit用户记录做到这一点
我提醒你们一下 我们给每个用户都自动创建用户记录
用户第一次用你的应用时就记录到了你的iCloud账户
这样的话 它在每个CloudKit容器里都具有唯一性
也给你提供用户的一个可靠的标识符
对于应用重启 OS更新等等都非常可靠
所以你可以将这个标识符存在你的服务器上
并且可以马上开始给用户建立一个档案
而当你发现他们跟你的应用有更多互动时
你这时就可以向他们征求更多信息来充实他们的档案
你找到当前用户的用户记录ID的方法
是用CKContainer里的fetchUserRecordIDcompletionHandler API
这就是CloudKit自动认证
我们谈谈CKOperation
回顾一下 有两种主要的方法
来让CloudKit框架将操作呈现给你的应用
一个是通过调用便利API它一次针对一个东西
二则通过相对应的CKOperation
这样 我们呈现的每个便利API调用
一次只针对一个东西都有相对应的CKOperation
后者则是批量处理
比如说 我们有fetchWithRecordID API
在CKDatabase里一次获取一份档案
我们有它对应的CKFetchRecordsOperation
它接受一个档案ID列表并且批量获取档案
用这个CKOperation API有一定的优势
相对调用便利API
我今天要讲其中的很多优势
首先
CKOperation是NSOperation子类
这意味着你有全套设备的
NSOperation API让你可以免费使用
你可以做比如建立你的CKOperation之间依赖关系
你可以给它们的服务质量属性赋值
让系统知道那个操作对你有多重要
甚至是管理队列的优先性
在你的NSOperation队列安排它们时
你还可以取消CKOperation
就是那些已经开始执行的
我推荐你们回去读NSOperation的参考文档
来很好地利用CKOperation API
一个很好的参考资料是我们的进阶NSOperation
即我们去年WWDC的演讲
既然我们讲到CloudKit操作
还有更多东西值得一提
今天我谈其中三个比较重要的
第一个是CKOperation给你的可配置性
第二个是它让你可以优化资源
针对系统还有作为开发者的你们
最后 我想说一下寿命管理
这是我们新开的一个东西让你可以
在iOS 9.3使用
首先 快速回顾你可以给一个CKOperation配置些什么
操作让你可以精确调节使用权利
调节你想不想让这个操作的网络活动
通过手机网络来进行
你还可以给从服务器下载东西的操作设置关键词
如果你想下载部分档案而不是全部的档案
社区的API不让你做这个
你可以限制响应结果的数目
一个操作返回的结果
最后 持续运行的操作还会给你进度更新
你可以用这个来驱动一些UI元素
现在 我们来说一下资源优化
你的操作在系统中用得最多的资源
是网络请求
现在每个便利API调用
都转为系统中至少一个网络请求
所以 当你使用CKOperation批量API
你让系统可以去最小化所需要的请求数
来将你的改动发到服务器
比如 如果你想保存一批档案
并且你用的是CKModifiedRecordsOperation
系统会拿这批档案并且优化需要的请求
来把这批档案发到服务器
这样 这不仅对系统资源是一件好事
还帮作为开发者的你们优化你们的网络请求限额
更进一步 CKOperation默认让你的网络活动
酌情进行
我们指的是你让你的系统决定一个合适的时间
来安排你的请求
欲知更多详情 推荐看看酌情处理属性
它在NSURLSessionConfiguration里
我们在CKOperation把它呈现给你的方法
是通过服务质量属性
CKOperation有一个默认值为实用的服务质量
任何是实用或以下的服务质量
会默认选择这个酌情进行的行为
所以如果你注意到CKOperation
花了比你预计的还要长很多的时间来执行
很可能就是因为系统
觉得现在还不是一个让你的请求发出去的好时间
还有切记的其它几个行为
当你选择了酌情进行的行为
网络错误就会重新尝试
与此同时 你默认有一个七天的资源超时
你的操作执行的每个请求都有这个默认超时
这就是资源优化
现在 我们来说说CKOperation寿命管理
在我们的平台
你的应用退出可能有多重原因
比如 你的应用在背景可能被中止
或删除 或者被用户强行退出
当这些事情发生的时候你可能有一些更新正在运行
这些更新可能是用户发起的
你就应该把它们存到服务器
不管你的应用是否已经退出
这些更新也可能因为你有更新的运行时间比较长
但优先度比较低你想尽快完成它们
不管你的应用还在不在
在iOS 9.3里为了达到这个目的
我们引进了CloudKit长寿命操作的概念
这些操作一旦让你标为长寿命
系统就会替你的应用执行
不管你的应用还在不在
我们会缓存从这个操作得到的任何服务器响应
并且会给你提供一个API来重新处理这些响应
一旦你的应用再回来
我们来看看我们呈现的API它能做到这点
对于CKOperation这个非常直截了当
你有一个isLongLived旗标
像正常那样建一个CKOperation
一旦你设置了这个旗标
它就成了一个长寿命操作
与此同时 你有一个操作ID
它是一个系统指定的字符串
唯一地标识每个CKOperation
我们等会儿会看看为什么这个很重要
下面我们讲你怎样运行一个长寿命操作的大体架构
你像正常那样初始化一个操作
设isLongLived旗标
再加上你的参数和回调来运行这个操作
现在 当你想重新运行它的话
你可以从CKContainer类获取这个长寿命操作
通过操作ID
如果你想留意运行的情况你可以设置回调
可以再运行一次这个操作
我们来看一个例子
假设我们运行一个长寿命fetchRecordsOperation
我们像正常那样用参数设置这个操作
但要记得设置isLongLived旗标
并且将操作ID属性存入我们的本地缓存
这样我们就会记得这个操作代表了什么
我们设置回调且把操作加入队列
现在 当你想要重新运行时
就用CKContainer里的fetchLongLivedOperationwithID API
获取操作
因为你知道操作所代表的东西
通过缓存所以你可以安全地执行它
并且设置合适的回调
你不用再设置参数或调节其它的操作属性
你之前可能设置过
这样重启了操作
现在 CloudKit会重新处理我们有的所有缓存响应
给操作
让你跟上进度
达到你的应用不在时操作所取得的进度
或者给你操作所有的结果
这也意味着这些操作会被清理
这是一个重要的信号
正常情况下发生在完成模块
被操作调用
你要记住你的应用有至少24小时
重新运行任何他们可能加入队列的长寿命操作
这就是关于CKOperationAPI的全部内容
现在我们转移到数据建模的话题
今天我想给你三条主要的点子
第一条是关于数据库架构的冗余
你可以怎样利用它们
还有它们怎样帮你更有效利用CloudKit API
第二条是如何用引用
来避免你可能遇到的一类错误
在你CloudKit应用中
最后 我想谈一下父级引用
是我们在这次发布里新加的一种引用
来支持CloudKit分享
那么 我们来说说数据库架构的冗余
我们用开发照片分享应用的例子
现在对于这个应用 你在服务器可能有的第一个东西
就是给照片的档案类型
你可以储存用户的高像素照片
是在我们某款iOS设备上照的储存为CKAsset
现在 假设用户第一次启动应用
当你像Dave之前推荐的那样获取改动时
你可能想展示一个缩略图
囊括用户所有最近的照片
就像这样Photos应用就有这个功能
这样一来可能会造成网络带宽的巨大浪费
的一种情形就是下载全部的高清资源
每次你打开这个页面时都下载
那你该怎么办答案非常简单
你可以考虑在档案里加入一个冗余的域
代表缩小的资产
而这可以让你配合使用CKOperation
和我们讲过的所需关键词的属性
让你可以获取部分档案
你现在可以只获取那些你需要的关键词 用来驱动UI
你用户感兴趣的UI
甚至能用结果限制的属性
来限制你在一个页面上显示的结果数
这样 你就可以把一个优化的下载加入队列
能够将一个动态UI呈现给你的用户
你只在需要的时候取需要的东西
能用所需关键词属性的还有新的
CKFetchRecordZoneChangesOperation
和CKFetchRecordsOperation
两者都从Cloud给你获取东西
我提醒一点 就是这些API在网上也可以用
通过CloudKit JS
通过利用这些工具你让你的用户可以
在你的应用里有更为动态的体验
因为他们不必等你完成操作
来下载他们会用到的数据
接着 讨论CKReferences我提醒你们这些是什么
CloudKit让你的档案可以指向其它档案
比如 如果我这儿有两份档案档案A和档案B
我们把引用存在档案A上
用档案B来给它初始化
创建了CKReference
现在假设我们想给我们的照片分享应用添加相册
可以涵括多张照片
我们怎样可以给这个一对多的关系建模呢？
简单地
而又天真地 你会觉得下面的建模方法比较好
储存档案ID档案ID用来引用照片档案
把ID作为一个数组直接存在照片所属相册的相册档案里
这就是概念图
现在 我们来瞧瞧当你用户的多个设备
尝试添加照片到相同的相册会发生些什么
假设我们在Cloud有一个相册档案
相册还没有照片
现在 记得你的用户会有多台设备
它们都获取这个相册记录
看到相册没有照片它们很满意
设备现在都有了新照片
它们各自有想加到同一个相册的照片
所以它们把档案更新加入队列
假设iPhone档案最先到相册
服务器现在知道有一张照片
对其中一张照片的引用
当别的新设备加入进来并且尝试更新时
它们更新的不再是最新的服务器档案
所以 在这个案例里两台设备都会出现错误
CKErrorserverRecordChanged
现在 我推荐你们去看我们的进阶CloudKit演讲
是2014年的WWDC你会学到更多如何处理这个错误的细节
不过 现在我们来看可不可以完全避免它
在这个例子里 我们知道我们的相册档案会有频繁的写操作
所以 取而代之 如果我们一对多关系的建模
用的是一个反向指针把引用存在照片档案上
照片归属这个相册
这样我们就彻底排除了
我们在相册档案上的写操作纠纷
在这个情况下每当你加入新的照片时
你就设置它引用所属的相册的档案
并且保存照片档案
这么做的话 你就可以完全排除掉你之前有的纠纷
你还会想知道我怎样可以获取所有照片
这就是我们一开始遇到的问题
为了达到这个目的 你可以用请求
你要获取归属这个相册的所有照片记录
这非常简单直白
你要的就是相册的引用域
那儿有你所有的照片档案
下面 我们来讲父级引用
今年 在CKRecord
我们加了新的一类引用叫父级引用
帮你给数据建模
并且更好地支持CloudKit分享
我们推荐的是
如果你的应用支持分享你就用父级引用
来建立一个等级制数据模型
规定好你应用分享的单元
并且根据情况来设置父级引用
我们来看看一个例子来解释我刚说的内容
我们的照片和相册档案是一个父级引用的很棒的例子
相册很明显是照片档案的父亲
我们只需设置父母属性
在照片档案上指向我们相册档案的ID
并且保存照片档案
现在 假设我们在我们应用里都用这个模型
我们有一个像这样的等级分配
现在 一个用户想分享整个相册
这种情况下你需要做的只是
创建一个CKShare附上相册档案作为组档案
你一下子便可以分享整个等级分层
你就是用父级引用来建立的这个等级
现在 CloudKit还支持部分分享的等级制
这种情况下比如用户只想分享照片C
你可以创建一个分享只附上照片C
这样
只有照片C还有它的所有子代
通过父级设置将加入这个分享
以上就是数据建模
我们来谈谈错误处理
现在 我们有不同类型的错误
而你的应用应该处理它们
通过几个主要的不同方法
我们来看看它们各是什么样的
我们有一个简单的例子
假设你的设备
选择一个CKModifyRecordsOperation
尝试跟服务器连接
服务器有可能响应两种主要的东西
它可以说我一点儿也不喜欢这个请求
别再试着跟我连接
或者它可以说你的请求什么都好
就是现在的时间不太合适等会儿再试一次吧
你们的应用需要处理这两种错误
而且要用很不同的方法我们来仔细看看到底是什么
第一种错误是致命错误
你基本上无能为力
我们有几个错误代码表明你遇到的错误是严重的
比如内部错误服务器拒绝请求
非法参数或者权限失败
你要在你的应用里给你的用户显示合适的UI
让他们知道出错误了重试也没辙
然而 另外一种错误
服务器让你歇一会儿再重试
我们会告诉你服务器想让你等的时间
下面是一系列错误代码每个里面都嵌入了时间值
zoneBusy serviceUnavailable和requestRateLimited
当你收到这些错误代码中的任意一个时
你要找到CKErrorRetryAfterKey
在错误的用户信息字典里面
你要等上面说明的时间并且重新初始化同一个CKOperation
用相同的参数并重试这个操作
下面是一个简单的例子还有你需要的所有代码
如何等一段时间
而CKErrorRetryAfterValue代表了这个时间值
如何重新初始化同一个CKOperation
注意 如果有些时候
你的操作可能在设备上出现错误
而甚至还没连到服务器怎么办？
我今天讲解两种主要的情况
CloudKit可能完全用不了
第一种是设备处于下线状态
这种情况下 我们推荐
你监测可能连到的网络就像
在别的基于网络的应用里做的一样
若你用的服务质量是用户发起或者更高等级
而网络错误不会自动为你重试
你会看到这个错误代码CKErrorNetworkUnavailable
一旦你监测可连接的网络
你可以通过SCNetworkReachabilityAPI 做到这点
比如在系统配置框架里
这样你就可以让你的用户知道
“嘿 这些改动现还传不到服务器上”
但我们推荐你让你的用户保持跟应用的互动
即便设备处于下线状态
你应该把这些改动存在你的本地缓存中
当可连接性API告诉你设备重新上线时
你就可把CloudKit操作加入队列并把档案存到服务器上了
另一种主要的情况是当你想给用户用私人数据库
而用户没有登录到一个iCloud账户的时候
此情况下 返回错误代码CKErrorNotAuthenticatedTo
我们推荐的是 对于你所有的应用
在首次启动一定要登记侦听CKAccountChange通知
当它触发时 用 accountStatuscompletionHandler API
来重新获取当前用户的账户状态
告知他们一些操作会失败
因为他们没有登录一个iCloud账号
我来总结一下我们今天都看了哪些内容
我们学习了如何订阅并且获取改动
来高效地和服务器同步
我们领略了使用批量CKOperation API优势
我们推荐你所有的应用都采用它
我们也研究了几个点子如何设计你的数据库架构
来完全避免一类错误
或更有效利用CloudKit API
最后 我们探讨了如何处理一些类型的错误
还有如何分辨它们
还有服务器的意图 当它返回
一些特定错误代码 而不是其它代码
我们昨天有一个相关演讲如果你没有去
我推荐你回去在网上补看回来
这儿有更多的信息谢谢你们 祝你们有很棒的一天