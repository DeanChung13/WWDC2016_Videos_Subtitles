用广色域来工作
广色域显示的理解与优化
欢迎大家的到来
我希望每个人都有个很棒的WWDC
我叫Justin Stoyles
我是Apple图形和媒体组的一员
我很高兴今天和你们谈谈用广色域来工作
我们今天要覆盖一些主题
首先我们要讨论一些核心的颜色概念
我们会谈谈什么是广色域它为什么重要
然后我会交给Patrick
他会向你们展示过程
把广色域资源加入应用的过程
然后我会交给Steve
他会谈谈渲染广色域
让我们开始
我已经提到过 我很高兴今天能和你们谈谈广色域
这是因为我们正在改变
我们处理广色域 或者一般来说颜色的方法
在Mac和iOS平台上
一个好的开始的点是上世纪90年代
Apple一直处在解决计算中的颜色问题的前沿
最好从ColorSync说起
ColorSync是Mac的颜色管理平台
它是上世纪90年代开发的当时
Apple和其他有相同想法的公司聚在一起
有一个想法那就是颜色管理和再现的标准
可能可以开始解决一部分问题
工程师和设计师与颜色打交道时面对的问题
该组后来成为国际颜色联盟（ICC）
你可能感到熟悉
ICC的工作成果被融入ColorSync中
我们也把那包含进了OS X
Apple现仍然处于显示技术的前沿
在多个产品线上我们现在有漂亮的retina显示
人们非常非常喜欢它们但什么是下一个前沿？
好吧
去年我们宣布了漂亮的有P3显示的新iMac
我们获得了巨大的反响
它们多显示25%的颜色
它们有P3色彩空间人们很爱这点
如果你再快进一年
我们有新iPad Pro 9.7寸显示并有True Tone技术
所以我们又更进了一步
现在有很多事在下面发生
我们今天会试着涉及到这些主题
我会从核心的颜色概念开始
让我们从简单的开始什么是色彩空间？
一个色彩空间是一个环境在其中颜色可以被比较和显示
它可以是1 2 3 4维空间
是由颜色成分的亮度定义的
颜色成分也经常被称为颜色通道
一种表示方法你可能很熟悉那就是RGB
这和显示屏密切相关
你的子像素是红 绿 蓝
要考虑这些颜色通道你可以想
每一个颜色通道的亮度
决定你在另一端看到的颜色
有多个不同的色彩空间
我提前了RGB空间在显示中很流行
但是还有很多有灰度空间
被用在单色打印上
在彩色打印中我们通常用CMYK空间
如果你尝试进行计算和转换
我们通常用色彩空间比如LAB
它是设备不相关的
现在我们有色彩空间和颜色通道
我们现在想创建一个坐标系统
我们可以比较和计算颜色
这就是颜色基色的概念
颜色基色通常落在
你可以在特定的颜色通道上达到的最大值
在这个RGB色彩空间的例子中
你可以看到颜色基色是我们在色彩空间上定位点1.0的地方
对黑色 在任何一个颜色通道上都没有饱和度
所以我有0 0 0对白色我有1 1 1
对红色我只饱和红色通道我有1 0 0
非常简单
当我们提到色域我们实际上是说所有
可以被那些单独的颜色通道的组合定义的颜色
现在你知道一些基本的
我们将会在这个演讲中讨论的颜色概念
那么什么是广色域？首先我们要谈一下
目前的行业标准是什么
标准RGB或者sRGB是目前计算机界使用最广泛的色彩空间
它基于BT.709标准我们用的伽玛大约是2.2
典型的光照条件在这个例子里是D65
这是iOS的默认色彩空间
这实际上也是很多平台的默认色彩空间
这很方便因为有一些平台
有颜色管理还有一些没有
当目前存在的很多内容都是sRGB
你可以对你获得的内容做一些假设
并且它会在另一端被如实重现
但事情不永远是这样
sRGB可以很好的用来描述我们日常工作中使用的颜色
我们的系统可以很好地显示这些颜色
但是很多颜色并不适合sRGB
很多纺织品是用墨水和染料设计的
有很多颜色是在sRGB之外的
主要是因为这些颜色很捉人眼球
它们非常生动和令人印象深刻如果你看看足球做为例子
有很多球衣的颜色实际上在sRGB之外
因为他们在进攻吸引了我们的注意
无论是看你孩子的足球赛
还是欧洲杯
你会看到很多球衣的颜色
实际上不能用sRGB描述
很多产品实际上也是用sRGB之外的颜色设计的
这些产品是我们每天打交道的
但是最迷人的例子就是大自然本身
日落 秋叶 热带水体
这都是大自然中的事物含有sRGB之外的颜色
我们想要显示它们
好的事情是你可能有很多相片
你在相机上拍摄的特别是如果你用RAW格式
它实际上包含很多颜色数据
但是你无法在显示器上看到如果你的显示器只支持sRGB
那对此我们要怎么办？
去年我提过我们引入产品
有一个新的色彩空间这个色彩空间是Display P3
在我们的iMac和iPad Pro 9.7中
我们用这个色彩空间
它是基于SMPTE的DCI-P3标准
但它有一点不同
DCI-P3是为数字投影定义的色彩空间
它在那种观看条件下表现很好
但是我们的观看条件有一点不同
sRGB表现地很好对于定义一个标准
工作在我们的观看条件下
所以我们采用了相同的伽玛和典型光照条件
为我们的白点 像sRGB
这是Display P3和DCI-P3的关键区别
为了理解什么颜色在sRGB之外
但我们可在Display P3中描述
我会试着用行动向你展示
这是我相片库中的一张相片我用photos导出它
在Display P3色彩空间
它是很漂亮的相片
即使我们今天是用一个sRGB投影在看它
或者如果你在观看视频如今你在用sRGB观看
这个相片还是看起来很好
但是相片上有很多东西你可能不能马上发现
但是实际上有很多颜色实际上没有被sRGB描述
这是sRGB色域外的颜色
这种情况下你最终得到的是对这些区域进行色调分离
所以这些颜色被压缩到sRGB色域的边界
我们要怎么解决这个情况？
我们要把更专业的工作流程转移到我们的移动平台
要使这成为可能
不仅仅是把广色域显示加入你的系统
还需要一起做一些其他事
其中之一是我们需要更新出厂校准
所以现在我们所有的产品都有单独校准的显示
在每台设备上你可以相信颜色
是准确一致的
最后我们在iOS中建立了整个系统范围的颜色管理
这就是我们所做的事
但是我们不能只是建立一个相同的颜色管理系统
使用在Mac上使用的相同方法
有不同的考虑和限制
当与移动平台一起工作时
一个要考虑的就是无数的应用
已经存在在iOS生态系统中
这些应用是在sRGB中开发的调整了颜色
和性能在sRGB中
我们怎么保证这些应用
仍然可以运行在有颜色管理的平台上
而不会影响性能和颜色
我们所做的就是在sRGB的基础上创建
所以我们引入了一个扩大范围的sRGB色彩空间
这是我们用来工作于广色域的工作空间
我们用相同的sRGB基色
我们用相同的伽玛2.2相同的白点
有趣的差别是我们允许值
大于1或小于0
允许我们保持相同的性能
和外观对所有为sRGB开发的应用
但是还可以用负值和大于1的值
允许我们表达任何可见光谱内的颜色
同时仍然保持我们的定位点在sRGB中
用来说明它的最好办法是用一个例子
所以让我们假设我想要Display P3中最饱和的红色
那会是1 0 0
如果想在扩大范围sRGB中表示它
那会看起来像这样
在红色通道 我有一个值是大于1
在绿色和蓝色通道我实际上用负值
所以我减少了绿色和蓝色增加了过饱和的红色
这允许我得到一种颜色是在sRGB色域之外的
同时使用相同的sRGB定位点在扩大范围sRGB中
有趣的事是如果你用一种像素格式
允许你用很大的负值和正值
这种方法允许你表达任何可视光谱里的颜色
所以这是可扩展的
说到像素格式sRGB标准是8位
8位用来描述sRGB中的颜色已经够大了
不完美但是还不错
一个简单的例子来描述
之间的区别在我们希望sRGB的精确度
和更广色域的精确度之间的区别
是用这个例子
假设我想要在家建造一个楼梯
从地下室到一楼
我会用8个台阶
我也许会用12个 但是让我们简单地假设我会用8个
这对我是合适的高度
如果我想要把楼梯扩展到二楼
我不会仅仅用相同数量的台阶
当我们用数字编码颜色时
这对你尝试表达更多颜色讲得通
你想要更精确
每颜色通道8位对sRGB足够了
如果我们是说使用sRGB之外的颜色
那么我们的建议是每颜色通道使用16位
现在在我交给Patrick前我想要用另一点来结束
我们仔细检查了整个系统并且更新了所有框架
和工具使它们能正确理解颜色
但是如果你们用开源工具开发应用
或者从头开发了你自己的图像处理管道
你需要采取行动来确保
你所用的工具能正确理解颜色
此外 我们已经帮你们处理好了
关于这的更多我会交给Patrick
谢谢Justin我是Patrick Heynen
我是Cocoa框架组的高级工程师经理
我想问广色域从何而来？
答案是它实际上不仅仅来自于衣服
不 它来自你
也就是它来自应用及其内容
和你的应用提供的用户体验
哪种内容可以为广色域进行修改？
第一个可能是你们最熟悉的
就是静态图像资源
它们是PNG JPEG和单独的图形文件
你捆绑进了你的应用并且一起发行
和你的应用包一起给你的用户
另一类是文档和基于网络的图像资源
它们是单独的图像内容
你可以从网络服务下载
或者储存在文档数据中
还有其他类
比如高级媒体比如Live Photos
或者来自iPhone iPad内置摄像头的内容
我不会说太多细节
关于广色域对这些种类内容的影响
但我推荐你去看看iOS摄影进展与
在iOS上编辑Live Photos和RAW演讲
以获知更多细节
最后还有一个内容是GPU纹理
如果你的应用工作在GPU一级
比如你的游戏引擎或者图形软件的高级部分
并且你会发送颜色信息
以纹理或着色器值的形式直接发送给GPU
对广色域内容还有其他要考虑的
我也不会深入太多细节
但我要介绍同事Dan Omachi对此所做得极好的处理
在Metal的新特性第二部分
好的让我们回到颜色问题
Justin早前做了很好的解释
但这怎么应用到应用？
应用内容可能来自一个很宽范围的来源
颜色的丰富程度也在一个很宽的范围中
从灰度
一直到16位广色域内容
同时
设备和显示的颜色能力也处于很宽的范围中
比如iPhone 5只能显示sRGB
一直到最新的iPad Pro
可以完全显示P3颜色和扩大范围sRGB
你要这么衔接这些差别？
我们将解决这些颜色问题
支柱就是颜色管理
什么是颜色管理？
颜色管理的工作就是确保
图像在所有输出设备上看起来都是相同的
不管它被编码到哪个色彩空间
或者最初它是如何被创造的
就是这些但它是怎么工作的？
颜色管理从每个图像开始
或者有相关联的色彩空间的内容种类
有时被称为颜色配置
这告知系统颜色的实际含义
然后颜色匹配过程通过算法映射
这些颜色到特征和输出空间
属于你要渲染到的设备的特征和输出空间
当然这是一个计算过程而且不是免费的
实际上每个像素都会被涉及会被转化和匹配
而且还需要注意这是有可能有损的过程
特别是如果你要
从更广的色域转化到更窄的色域
假设一个16位的P3内容降到8位的sRGB
这会造成色彩保真度的丢失
这是需要注意的事
这是重要的方面但是有好消息
第一个好消息是这个颜色匹配过程
它们用算法定义的方式
我不想讲解它们背后关于颜色科学的细节
但是结果是那些计算很容易被硬件加速
不论是用CPU还是GPU
这导致下一个好消息
我们把这个功能集成到了系统本身
它们都通过Quartz 2D自动运行
Mac上的ColorSync以及核心动画
实际上你需要确定的是
你的内容被正确的加了标签
在这种情况下 要正确显示你的图像不需要任何代码
并且让颜色正确显示
平台颜色管理
Justin逃避了的macOS
从它一开始就有颜色管理
有些人甚至可能会说早于它的开始
当它在ColorSync时代之前被称为macOS
所以这没有什么新的但是在iOS上有一些新的
从iOS 9.3开始
我们在大部分设备上有自动颜色管理支持
这就是颜色管理解决颜色问题的关键
现在让我们谈谈
一些设计上的考虑和工具链
和平台服务是如何被增强的
来适应在你的应用中获得广色域的内容
首先它总是从设计开始
需要考虑的重要的事是
从设计上看你要在什么时候达到广色域
我首先要说的是
很重要的是当这样做有意义时才使用广色域
而不是在任何地方
请记住我们日常生活中接触的大部分颜色
其实被包含在漂亮的sRGB三角形中
这是大部分颜色所在之处
然而还有那些漂亮的新的生动的饱和的颜色
你的应用使用它们是有意义的
所以很重要的一点是把广色域内容看成
你可以使用的一个工具
当生动的颜色确实能提高用户体验时
并且为你的应用增加一些价值
并没有必要更新你的所有内容
并且马上升级到P3
这并不是一种技术转变
这只是一种新的你可以使用的创造性工具
在你想用它时
好消息是我们改进了工具链支持
使逐渐采用广色域成为可能
让我们假设你想升级一些内容到广色域
什么是需要考虑的？
小心是很重要的
当你升级设计文件到广色域
一个常见圈套是仅仅赋予一个新的配置文件
它从sRGB开始赋予一个新的广色域配置
这是一个错误这仅仅重新映射
已有的颜色信息到新的色彩空间
这相当有效但可能不是你想要的
因为这只是拉伸所有颜色
使它们生动而且设计文件的外观
不可避免地被改变
重要的一点是应该转而使用转化到P3
这会做一个颜色匹配操作
你的设计结果不会改变它的外观
但是它被准备好使用
并且有一些内容被提升到那些漂亮的
生动饱和的P3颜色
当你进行广色域设计时
这很重要我们强烈推荐
你使用Display P3颜色配置
作为你的工作文档配置
并维持最高的颜色准确度和最高质量
工作在每通道16位的颜色模式下是个好主意
当然能看到你的设计很好
所以如果你要在广色域下工作
最好进行设计工作
在可以渲染广色域的系统上
比如2015年末推出的iMac或其他有这个能力的硬件
当来到产生产品的阶段为了输出资源
使用16位嵌入Display P3ICC配置的PNG文件很重要
这是一种黄金标准
把内容转换成广色域内容
一个简短的注意事项
有一些很流行的内容生成工作流程
它们有不同名字
我要特别讨论AdobePhotoshop工作流程
他们被称为为网络保存和导出资源
这些工作流程很多都没有完成向广色域的转变
它们不能导出16位P3内容
所以现在不要用它们
使用一些变通方法使用保存为PNG格式
使用16位并且嵌入显示配置做为一个变通方案
这就是设计过程和广色域如何影响它
现在让我们谈谈工具和如何使用它们
要采用你在设计过程中得到的内容
我要谈到的第一件事
是内容工具故事的中心
是Xcode资源分类
你可能对此感到熟悉
这是Xcode中的普通工具
允许你整理并分类你的图像资源
标记它并提供元数据把它发送到你的应用中
资源分类会为你做什么？
它们是最好的静态资源部署工具
我们自动对你的资源内容进行颜色修正
并对构建目标进行优化
所以即使你的设计师是完美的
并且总能交付内容含有正确的配置
和所有正确的信息在他们的交付物中
但事情并不总是这样
这就是自动颜色修正发挥作用的时候
来确保我们匹配并标准化全部颜色
到合适的目标设备的工作空间
我们还自动进行像素格式优化
确保对设备使用正确的位深
最后 但当然不是最不重要的
资源分类是应用切片的途径
应用切片是其瘦身功能的重要组成部分
它确保只有相关内容被传送给客户
在一个特定设备上不相关内容不会被传送
那我们做了什么让资源分类更容易
与广色域内容一起工作？
第一个重要改进是我们现在支持16位的源内容
并为16位的图像资源提供干净的端对端路径
我们有16位半负载来储存它
但是你在Xcode 8中可以用到它
下一个重要的事是我们增加了给显示色域分类的功能
这是什么意思？这说明你
在查看器中有一个新的选项来提供并剪裁优化了的资源
为sRGB或Display P3
显示色域和设备通过那些特征匹配
三个简单选择
这就是这个特性
Xcode提供它来整理资源
但你怎么利用它？你怎么考虑利用它？
这里有三个简单的选择
选择一
不做任何事
这可能看起来激进
但是完全可以这么做
因为如果你不对资源分类进行改变
你可能不需要这些生动的新颜色
你将继续在所有设备上如实渲染8位的sRGB内容
没有什么会改变你不需要更新所有东西
只需要确保它能运行在新硬件上
这完全是个有效的选项
当然这表示你的应用不会包含任何广色域
这是完全可行的设计选择
这是部署选择的结果
假设你想要在你的应用中使用广色域
带来选择二升级到P3
我们把这种方法称为通用P3资源
它所要做的是使用16位Display P3文件
可能从你设计师那得到它
然后在资源分类中替换你已有的资源
使用这个升级过的资源
在创建时会发生的是我们会自动生成
一个sRGB变种 从16位通用Display P3主档生成
我们会进行高质量的颜色匹配
高质量会降级到8位
然后在瘦身和内容选择时
我们确保正确的内容变种被选择用在适当的设备上
但是如果你对自动转换不满意
你想要完全的控制
好消息是这也提供给了你
这就是选择三 优化资源
这基本上是个很简单的选项
你提供一16位Display P3内容和你的原始的8位sRGB内容
我们给你提供地方来整理这两类资源
他们会被创建进你的应用并且被正确的选择和瘦身
这就是广色域资源和资源分类
我现在想要介绍创造内容
假设我们有这个漂亮的色度环
假设我们有这个漂亮的色度环
这好多了
我已经决定了这会获得好处
从一些更生动的饱和颜色
这是怎么完成的？让我们看看这里
这只是一个简单的渐变一个辐射渐变
我只想要强调这里
在渐变中的这一点是一个纯的饱和绿色
我从这开始
我要怎么升级它？
我首先要做的是因为我要整理类型
我要创建它的一个备份这样就不会弄坏已有的资源
我在这起一个新的名字
我现在准备好开始工作了
我要做的第一件事
是更新到每通道16位
我们现准备好用16位工作了
然后是十分重要的转换到配置
我要做的是
把这变成Display P3颜色配置
我们弄好了
实际上我可以在下面的文档配置中确认
Display P3 16位组件我准备好了
让我们看看这个渐变发生了什么
让我们看看最爱的绿色
这很有趣是吗？这个绿色并没有改变
注意这个色度环的外观完全没有改变
和赋值相比这是转化计划中的结果
但是相同的绿色现在只有70%的饱和度
这表明有多少净空间
来扩展到更广的色域并得到更纯的绿色
我想要那么做但是我不想要一整天都在讲台上
我会重新应用渐变的预设
现在一切应该都回到开始的样子
100%饱和但是现在是在纯的P3广色域空间
现在我有我漂亮的资源了
我会继续并保存
当然这只是一个设计文件
我只有保存它以后才能在我的应用使用它
我将这么做
我将把它保存为不是Photoshop raw而是PNG
我要确保嵌入了颜色配置
并保存它
好的 我完成了
其实我还没完成我只完成了设计过程
我没有把它加入到我的应用
让我们这么做
我的应用在哪？我的应用在这这是我的应用 没有修改的
这是我已有的sRGB P3色度环
我想要做的是来到这
到这个弹出菜单来显示sRGB和Display P3色域
这会立即显示一系列额外的分类选项
我把我的P3色度环放到这个位置
我弄好了现在如果我构建并运行
它会把它们都编译到我的资源分类中
若我在iPad Pro 9.7英寸上运行
我会得到16位Display P3资源
在一个sRGB设备上如iPhone 6 我会得到该资源
好的
这就是在应用中加入内容
我们已经谈过了工具和怎么用它们处理内容
现在是时候讨论部署要考虑的事
你使用完那些工具后发生了什么
这会怎么影响你的应用的运行
有了资源分类部署应用切片
将确保适当的变种被传递给给定的设备
这很重要
因为有可能有很多内容
是你应用的一部分
有了切片 我们确保没有负载成本
对你的实际最终用户
对将广色域内容加入你的应用
因为我们确保有了应用切片
广色域内容只被发送给广色域设备
sRGB内容发送给剩下的设备
它不会浪费不相关设备的空间
在Mac上其实没有新东西
NSImage总是可选择最好的表达
从资源分类中可用的表达里
它会继续这么做
根据你的目标显示器的特征
比如如果你使用的是广色域iMac
你有P3内容在你的资源分类中
它会在渲染内容时使用这些资源
就像Mac上1X和2X资源的行为一样
NSImage和NSImage视图和所有有关的AppKit类
确保自动刷新内容
当显示器特征改变时
比如你的窗口在内部和外部显示器之间移动
或者颜色特征或后台缩放比例改变
这很好
但是数据是怎么储存的
这会对你的应用有什么影响？
一个好消息是在构建时我们尽了很大努力
来优化像素格式和储存特征
为你的资源分类的所有图像内容
并尽量用最有效率的方法来做到这些
尽我们最大的能力
我们现在用16位每成分来储存广色域内容
我之前提到过
这允许你有端到端16位的颜色精度
在你的应用资源中
我们还有压缩
这很方便因为16位和8位相比有更多数据
更多的数据不可避免的导致更大的足迹
除非你使用压缩
现在我们总是有压缩我们总是有无缩压缩
比如对PNG文件发生的
但今年的新特性是一些有损压缩选项
来中和 你知道的 应用足迹尺寸
第一个我们称为基本压缩
这是一个和JPEG很像的压缩系统
除了增加的红利它还可以处理透明度
它有相似的视觉和性能特征
好消息是它表现的很好
在所有设备上
就像JPEG一样
它是你可以依赖的
付出很小的视觉质量损失
来获得很好的储存特性
今年新的还有
我们有令人兴奋的选项叫做使用ASTC的GPU压缩
ASTC代表高级可缩放纹理压缩
是用GPU压缩过的纹理格式
被很多Apple设备上和其他系统上的现代GPU支持
我们把这个选择带到你的资源分类中通过两种不同形式
一是GPU最佳质量
是固定的比特率4位每像素ASTC压缩模式
是很好的选择 大致上可以在视觉性能上
和视觉保真度上和高质量JPEG相当
我们还有GPU最小尺寸
如果你真的想极大地优化你的足迹
和你的内存足迹那么你选择这个尺寸
这是1位每像素固定比特率编码
有优秀的存储特性
当然因为不是每个设备的每个GPU都支持
使用ASTC格式
我们更进一步为你自动生成
一个软件后退为没有这个功能的设备
这很好的一点是它意味着你不需要担心
你的内容会不兼容
对所有支持的设备
我们会自动生成这个后退
合适地使用 瘦身 路由它
对不支持ASTC的设备
所以你可以使用GPU压缩
不需要冒破坏兼容性的风险
一个简短的注解关于GPU如何压缩
广色域资源
我们用ASTC低动态范围（LDR）压缩模式
就是说广色域内容实际上需要
在压缩前被降低到8位
因为LDR是每样本8位的压缩格式
好消息是我们为你进行这项工作
我们自动进行一个高质量的8位转换
在构造中当我们处理你的图像时
但是我们保留可能含有的广色域颜色
在你的原始16位源内容中的颜色
通过Display P3色彩空间内编码和压缩
这样就保留了显示所有颜色的能力
在Display P3色域中的所有颜色
这就是部署
关于部署特性的一个小讨论
但是这个演讲是关于颜色的
颜色怎么样？
特别是UI中的颜色
UI中的颜色
一个重要的观察是你在屏幕上看到的大部分像素
大部分应用绘制的并不是来自图像
即使在这次演讲中获得了重要地位的应用
屏幕上的大部分像素实际上是纯色
在你的应用中用代码绘制
广色域颜色的结果是
对仅仅工作在这么简单的层次带来了新的挑战
让我们谈谈它
特别是我想谈谈第一个挑战
实际上是谈论颜色
因为这是一个被低估的问题
被低估的问题
一般当设计师和工程师交流
通过书面形式 或者可能甚至是口头或视觉形式
代码的交流通常假设了sRGB色彩空间
这表明你可能曾经看到颜色被写下来
像是RGB 128 45 56这样的格式
很简单 他们不告诉你这是在什么色彩空间
它假设每个人都知道是什么颜色
因为每个人都使用sRGB 不是吗？
不再是了
这对和广色域一起工作不再足够
那你要怎么办？
你能做的最重要的步骤是指出
指出什么色彩空间是你工作和交流的
或者写下 或者传送那个颜色
当你进行广色域设计时用Display P3而非sRGB
并标明它
如果你需要使用比0到255的8位表示更高的精度
那么使用浮点数
做为一个例子 下一次你在电子邮件里发送颜色
你可能会把它们写成像这样的
有一个注解 P3 255128 191等等
选择颜色
这是你怎么交流颜色
但是那个颜色是从何而来的
可能是你选择它可能是设计师从哪选择了它
他们是怎么选择颜色的？用一个色板
这是Mac的标准色板
是AppKit的一部分叫做NSColorPanel
这当然是个很熟悉的UI但是它也遭受
一些我们刚才提到了的调用颜色遇到的限制
典型的 我们选取红 绿 蓝的值0到255的数字
色板总是支持在不同的色彩空间中选择颜色
但是这不总是一个直观和简单的用户体验
我很高兴地说我们实际上做了一些改进
在macOS Sierra的色板中
使工作在广色域变得容易一点
我们做的第一件事
是我们把最常用最重要的工作空间
主要是Display P3和sRGB放在右键菜单里
在数字选择器的动作菜单里sRGB当然还有Display P3
我们做的下一件事是我们实际上允许一个选项
改变它的颜色的数字显示方式从整数变成浮点数
所以你可以标准化浮点颜色
如果这对你的工作流程有利
另一个令人兴奋的事是我们在色度环或环选择器中完成了它
我们实际上改变了它的实现所以它实际上可以渲染
整个P3颜色的色域当使用一个合适的显示器时
我们还添加了一个新的右键菜单允许你
使用这个自动行为
它自动切换功能 在P3
和sRGB之间 当你用多台显示器时或者固定在特定色彩空间
如果你想看到更多
现在我们选择了我们的颜色我们知道怎么沟通它
其实要使事情发生我们需要写代码 不是吗？
我们怎么在代码中构造广色域颜色？
我们引入了两个新的方便的构造函数
在AppKit和UIKit中直接使用Display P3颜色数字
这是NSColor Display P3红 绿 蓝 透明度
和UIColor Display P3红 绿 蓝 透明度
很好的方法和来自你的设计师的P3颜色一起工作
但是当然你的代码可能工作在扩大范围sRGB颜色上
这可能并不来自设计师但是可能来自一个不同的子系统
或者一个提供扩大范围sRGB颜色的API
你怎么和这些一起工作？
好消息是我们扩展了已有的标准
NSColor和UIColor的红 绿 蓝 透明度构造函数
并不固定在他们的输入成分并且允许值被表示成
大于1和小于0
这样你可简单构造扩大范围的sRGB颜色
然后是储存颜色
如果你想要
把颜色放入你的文档数据或者用某种形式归档它们要怎么做？
这样做的话要特别小心
因为和这个生态系统的其他部分一样
有很多传统上的关于颜色空间的假设
并假设每个人说的是相同的事
当你传递一个红 绿 蓝数字
你只需要三个数字对吗？
只需这么做表示一个颜色这有什么问题？
事实证明确实有问题
因为你无法分清sRGB
和P3颜色且你可能做了错误选择
结果在你的文档中是错误的颜色
我希望你考虑一下
在使用广色域颜色的时候同时编码一个兼容的sRGB颜色
这允许你的应用特别是旧的版本
因为这是文档数据
你需要考虑向前向后兼容
允许旧应用继续得到sRGB数据
并继续把它当成sRGB这是当时做的假设
而新的软件知道新的广色域代码
你一起保存的代码
你怎么创造兼容的sRGB颜色？
在iOS上你可以用CGColor.convert API
在macOS上你可以用珍贵的NSColor.usingColorSpace API
来把那些颜色转化到sRGB色彩空间
我们实际上把这集成到了macOS本身中
你可能熟悉TextEditMac上的文字编辑应用
它的文档格式是RTF也就是富文本格式
一直存在并被支持
被Cocoa文本系统作为它所需的文档储存格式
当你对一个文本范围添加一个颜色
它实际上被储存在RTF文档里的方式
是简单的红 绿 蓝 0到255
这会造成问题我想现在你们可以理解
因为我们不知道那些红 绿 蓝值
属于哪个色彩空间而且它不允许你表达整个范围
所以我们采取了行动
我们的成果是改进RTF标准
以及我们怎么读写RTF至少在我们的平台上
通过包含一个扩展的颜色表
这实际上注释了每个颜色元组
它现在被转化成16位整数
包含单独的色彩空间信息
允许你在多个色彩空间定义颜色
这很好
但是这是加利福尼亚州我们应该冲浪不是吗？
这和颜色有什么关系？
网络上有颜色
关于广色域和网络的好消息是
只要你的图像内容有正确的标签
和正确的颜色配置信息
那么所有内容在网页上渲染时都会被颜色匹配
只要你这么做你就准备好了
还有现在有媒介查询可以用来解析资源
在P3和sRGB兼容设备间这真的很方便
最后现在有WebKit提案
用来在除了sRGB以外的色彩空间中定义颜色
一种从CSS开始就有的情况
我要说的就这些我想把讲台交给Steve Holt
他会告诉你更多关于在你的应用中渲染广色域的事
谢谢
谢谢Patrick
所以在你的应用中
你经常有从资源分类中获得的资源
但是你可能获得一些内容是由用户产生的
或者来自网络你无法控制的来源
也许你想要产生一些额外的资源作为它的一部分
你怎么在广色域中来处理这些？
当你用广色域绘制时
我将用一个简化的例子
这是一个盒子它的一半被渲染
用Display P3中我们可用最饱和的红色
另一半被渲染
使用我们可用的最饱和的sRGB颜色
不幸的是因为这个视频是被录制的
而且你是用一个投影系统观看直播
而它并没有和我们的新显示一样的颜色保真度
我们需要作弊
我们实际上降低了两种颜色的饱和度
我们看到的和代码不完全一样
和我将要展示的代码的输出相比
但是在一台设备上渲染它它会在那
我是UIKit组Cocoa的框架工程师
当然我会从桌面的Cocoa开始
用广色域Cocoa渲染
当你在桌面上
它已经有很好的颜色管理支持
你图像和绘制中的颜色配置
如果你需要在代码中手动绘制
而且需要在屏幕外完成推荐的做法是
用NSImage和drawingHandler API
它被调用时有当前语境
你可以在任何你使用NSImage的地方使用它
它可以在那工作
让我们看一些代码
很简单就是设置一个尺寸
我们用我们想要的尺寸初始化NSImage
我们不想它翻转
我们配置绘制处理器
我们从drawRect得到传入的矩形
我们把它分为两半分配displayP3Red并绘制它
然后分配我们的sRGB红并绘制它
然后返回真 因为我们成功了我们完成了
这就是了 它是工作的
如果你目前在你的应用里使用它
你已经做了正确的事
这就是桌面
那关于iOS呢？应该是一样容易对吗？
你们应该熟悉UIGraphicsBeginImageContext
这是一个很好的API
让我们再看看代码
我们得到尺寸我们用尺寸创造语境
我们分开我们的矩形 绘制我们的P3颜色和sRGB颜色
我们得到我们的图像并结束语境
这就是我们得到的
这不对
为什么这不工作？
如果我们看看资料我们有一个有趣的点
我们标明了UIKit中的BeginImageContext API
只会返回一个32位整数语境
这表明你每个通道红 绿 蓝 透明度只得到8位
这极大地影响了我们能用它绘制什么
因为我们不能创建一个语境每个颜色通道超过8位
它不能显示任何扩大范围sRGB色域中的颜色
而且因为已有的界面是用C语言写的
我们不能扩展选项
我们也不想使UIGraphics成为有更多选项的语境
所以我们在iOS X中提供了一些新API
它是UIGraphicsImageRenderer
它的工作方式很直观
我会进入一些代码
首先初始化我们的图像渲染者对象
你可以重用它
而且它的属性会保持相同在每个
你使用这个绘制处理器得到的图像中
你只需要调用渲染器 图像
你提供代码块就像平时一样
你从描述确切属性的格式里得到的边界
这个特定的渲染器所含有的属性
然后你分开这个边界
你得到并渲染P3红色方块
然后你设置和渲染sRGB红色方块
就像我们之前在AppKit中有的
我们有一个正确渲染了扩大范围的
一半P3一半sRGB的红色方块
关于这个新API的一些其他要注意的事
默认它是完全被颜色管理
它还默认支持扩大范围的sRGB色彩空间
它对这很聪明
若你有一个设备有P3显示像是新iPad Pro 9.7英寸
我们会默认启用它
你不需要进行额外工作
但是如果你在一台不支持显示扩展了的颜色的设备上
比如其他iPad和iPhone
那么你会得到更标准的每通道8位
sRGB语境来进行绘制
所以我们没有浪费额外的内存来得到16位浮点语境
它为你做的其他事是管理CGContext的生命周期
你不需要操心结束这个语境
或者自己进行其他管理
对你应用中的任何旧代码
它工作在UIGraphicsGetCurrentContext
所以如果你调用一些函数比如绘制矩形
你会做正确的事
这就是在屏幕外绘制
关于在屏幕上绘制呢？
我们重新开始一个新iKit
在UIView上我们有新的Swift 3
在Swift 3中被新命名 绘制
我们在这为你做正确的事
当你在你的UIView子类中调用绘制
如果你是在iPad 9.7英寸上
我们会正确的在扩大范围sRGB色彩空间中调用你的绘制方法
使用浮点像素格式
如果你不是在一个新设备上那么
你得到现在你得到的每通道8位的sRGB
当然如果你有图像我们有UIImageView
从iOS 9.3起被颜色管理
并在现在被继续颜色管理
屏幕上的广色域CocoaTouch
如果你需要知道你是如何渲染的
你可以看看你的视图中的UITraitCollection的新特征
在视图控制器中被称为显示色域
它获得一个UIDisplayGamut枚举
它的属性是P3如果你在一个新的
P3类的显示上 或者sRGB如果你在一个新的sRGB类的显示上
这可以很有用如果你需要匹配一个特定
UI颜色和一个从资源分类获得的资源
所以你正确地匹配颜色到你的资源
现在如果你知道一个视图永远都不需要
扩大范围sRGB语境？
CALayer上有一个新的属性是内容格式
这为你控制CA创建的语境的位深
当它渲染那个视图时
根据默认 在iPad Pro 9.7英寸上它会使用扩大范围语境
在其他设备上它会默认使用传统的sRGB语境
你通过使用这些格式文字来控制它
控制位深
在Cocoa中 回到桌面
NSView和UIView是一样的
它会使用和NSWindow相同的语境来绘制
你可以看看所有传统的属性
有窗口后备存储 屏幕目标配置等
如果窗口改变了显示屏
viewDidChangeBackingProperties这个你视图中的回调会被调用
你还可以监听
NSWindowDidChange-BackingPropertiesNotification
它会在你的视图窗口中被省略
这些是从很久之前你就一直在打交道的相同的东西
仅仅是提醒一下
NSWindow的支持属性
包括显示缩放 色彩空间和输出显示色域
和在iOS中一样 你还可以控制从AppKit获得的语境的位深
通过NSWindow的WindowDepth属性
你可以把它设置成这些位深中的任意一个
所以如果你在一个广色域显示器上但并不需要额外的精度
你可以设成24位RGB
那它就不会为你创建扩展的语境
我们今天学到了什么？
好吧
你看到了广色域的视觉和怎么把这带给
下一代的显示和你的用户
我们谈了一点关于色域的知识和颜色管理
以及怎么和广色域内容一起工作
你想带给你的用户的内容
我们回顾了怎么在你的应用中使用颜色
怎么把你的绘制代码提升到颜色的下一个层次
通过确保它在广色域情况下能正确绘制
关于更多信息你当然可以获得这些幻灯片
在这个演讲的网站上
还有很多相关的演讲
这是第1页
请获得它们
如果它们已经发布了我不会枚举它们 它们有很多
请用WWDC应用观看视频或者在WWDC网站上在线观看
谢谢