HTTP Live Streaming的新特性
打开了吗？
下午好
我是Roger Pantos
本次会话关于"HTTP LiveStreaming的新特性"
我们谈论HLS有七八年之久了
然而 每次我谈的时候营销部的人都说
"你一定要跟人们说有什么新进展了！"
所以开始吧这就是新的内容
但首先用20秒简介HLS
HLS重点在于播放播放列表 什么是播放列表？
就是这样的东西是TXT文件
上面有标签是蓝色的那些
还有分段 白色的那些每一个都是10秒的媒体文件
如果你想播放一个你在这些标签中翻找一遍
找找有趣的东西
比如...这个写着这是INF分段 先加载它
所以去加载
然后加载segment1播放它
加载segment2播放它
可能这是直播播放列表所以你刷新播放列表
加载segment3播放它
简而言之这基本上就是HLS
所以现在我们都明白这是怎么一回事了
我们来讲讲新的内容
很好 好了
MPEG-4 Fragment Support
MPEG-4是个什么东西为什么要被分成片段？
在座的大多数人可能熟悉MPEG-4文件
如果你的硬盘上有一部电影这很可能就是MP4格式的
或者是相近的格式
如果你去深入观察它包括一个样本表
通常是开头然后所有的样本数据都在其后
我们最初是这样做的
之后 我们推出了新的分段随后称之为片段
片段基本上是指一种方法能将你的MPEG-4文件
分割成这些小的可播放数据岛
小的样本表小的样本数据
小的样本表更多小的样本数据
这些小岛都叫做"片段"
所以我们今天宣布的本质上就是你现在能做的是
你能够将这些东西这些MPEG-4片段
在你的HLS播放列表中当做分段使用
就像传输流文件那样
或者基本音频流
我们会更新细则来给你详细信息
我认为现在会有本次会议的链接
不过...
它能让你做的本质上是使用fMP4分段
传输流能做的事你都可以用fMP4做到
这包括iframe播放列表包括不连续性
包括直播流 等等同样的功能
当然 我们会应用到我们所有的HLS平台上
所以你可以选择将你所有的流媒体编码成fMP4文件
然后在所有平台上使用
为什么要这么做？简言之 互操作性
如果你要将你整个媒体库用一种方式编码
传输到Apple平台上之后你还要重新进行编码
换一种方式 例如传输到Android设备上 那就太糟了
但如果你只有一个库
那你的传输成本会下降你的存储成本会下降...
缓存的使用率会更好
因为你不再是拼命抢用缓存了
而且作为附加福利
还有 如果你有单一的生产链
你可以在你全部的生态系统中
使用相同的工具和验证方法
作为附加福利
因为fMP4不使用同样的信息分包
而传输流使用
在较低的比特率下你会得到略微更高的效率
所以这算是附赠的好处
所以HLS对各位播放列表作家带来了什么变化？
实际上 没什么变化
如果我们拿之前看过的播放列表
并将它转化成fMP4格式我们只需要这样做
我们更改初始化分段使其指向Movie Box
然后每个分段就成为了MPEG-4片段
这就行了
播放列表级别上的其他东西几乎是一样的
在分段级别上这里还有一点我想谈谈
那就是加密
如你所知 HLS有两种不同的加密方法
你要么可以只加密整个分段
AES CBC 全部加密
这对传输流或是fMP4都是一样的
对于样本加密 例如如果你想用FairPlay Streaming
这就稍微复杂了因为你必需说明
哪部分文件已加密哪部分未加密
这一次...上一次我们做的是传输流
我们本质上创造出我们自己的格式
这一次 我们决定使用现有的格式
而且...
在这MPEG中叫做"共用加密"
是一种标准几年前推出的
最新版的标准里有一个叫做cbcs的模式
这可以兼容FairPlay Streaming
所以如果你在HLS中做样本加密
你会使用共用加密的cbcs模式来做
有了加密播放列表和其他东西
这基本上就是HLS的全部内容了
围绕片段化MPEG-4
但如果我们要想实现那个快乐 闪亮 有活力的世界
在那里每个人可以只有一条目录
可以传输到任何地方那我们就必须超越HLS
我们要做的一件事是我们需要写下一套规则
上面写着 "你要这样创作你的fMP4分段或
片段诸如此类来让它们在任何地方播放"
而且我们也一直在这方面努力
一开始是我们和微软做的一个假设演练
一旦当我们进展到觉着靠谱的时候
觉着能行了我们就向MPEG提了这件事
那里的很多人都认为这个想法很不错
所以最后得出的是一套约束条件
用于如何创建你的fMP4分段
所以你要将音频和视频分开传输
你要在每个视频分段开头加入一个iframe
你要保证能严格对齐所有分段
涵盖不同的比特率
你不需要做这些的如果你的目标只是HLS
当你想要让你的媒体库拥有最广泛的受众
那我们为你准备了一系列推荐
我认为这会让所有人受益...至少我希望如此
所以...
现在我要转换一下来谈谈其他事情
大家都爱讨论的话题...元数据
所以为了描述它我首先开始谈谈
一些我们已经在HLS上为元数据所做的现有的东西
静态元数据和ID3
静态元数据是用于静态元数据的 不出意料
它会提供内容标题之类的东西
大多数是文本
这就能很容易地放入播放列表文件中
要么直接是标签
或者打包成JSON文件然后通过URL引用
现在只有一个标题或一个作者
或一个版权对应每个演示文件 是静态的
但这样的好处是在你任何想要的时候都能获得
马上就能获得
所以拿它和ID3对比
因为计时元数据和媒体演示文件的时间轴相连接
还经常在流媒体中用于为事件发信号
例如 广告的开始节目的开始
它存在于媒体格式的本身所以是一种叫做ID3的二进制格式
这让它体积小巧同时还变得难以创作
因为需要专业的工具
如果你要排除故障这会让你痛不欲生
很难读取ID3
但你想要多少数量都行
而且可以放置到时间轴上的任意位置
所以这十分强大
而在另一面因为它存在于媒体文件中
我们只能在播放之后才能提供给你
所以这个新玩意有什么作用？
我们添加的是一种在播放列表自身内部创建计时元数据的方式
所以现在你在ID3中用的同样东西都可以在这上面使用
你可以将它们创建成文本这很简单
你可以轻松地把它们放入播放列表中
而且想要多少数量都行
它们可以覆盖可以嵌套 什么都行
另一方面因为它们在播放列表中
我们读取完播放列表之后就可以马上提供给你整个集合
无论播放指针位于媒体文件的哪个位置
这就非常有助于
做特别像是导航控制之类的事情
所以它是什么样子？我们如何应用它呢？
我们在HLS中已经有日期的概念了
PROGRAM-DATE-TIME标签允许你精准地在播放列表内部发送时间信号
所以我们以此为基础 我们说
每个比特的元数据都将会被表达成时间范围
并附带有一组的属性
其中一些是我们的其中一些是你们的
我们设置句法所以能整洁地从直播流
添加和移除这些东西
所以这能完美契合直播工作流
它是什么样子？
我们来看一下这些句子
我们将新的标签称作DATERANGE标签
这是另一个播放列表
第一句基本上在说现在是什么时间
第二个是DATERANGE标签如果你去看看
你能看到这是由属性组成的
这些蓝色的部分是细则中定义出来的
ID START-DATEDURATION
我们为各位保留了X-namespace这与HTTP相似
这样你能用它来放入你想要的属性值对
在本案例中 有人决定放入AD-ID和beacon URL
这是一个示例
这是它们在播放列表中的样子
当你在进行内容创建时你可以用在直播或点播上
这只需要有DATERANGE标签和日期
很明显 在创建播放列表时你可以将这些东西放进去
不过另一个好处是因为播放列表易于操作
如果你有后期制作工作流
在做广告插入
可以非常容易地使用元数据
同时增强播放列表和演示文件
应众人要求
我们还包括了如何映射SCTE-35的规则
你可以在源媒体文件中找到它然后用于DATERANGE标签之内
这样你可以在HLS中无损地执行SCTE-35
最后我们添加了媒体流验证程序的支持
我想花点时间
宣传一下我们有的新工具
我们办了一次演讲
现在我们没有时间说这件事
但我们办了一次演讲谈论了新的工具
所以我鼓励大家去看看
你可以在你的应用或其他东西上点播
你应该看看有什么新的本领
特别出现在验证程序上了
对于重放
当你想让视频流中的元数据起作用
你要有一组AVFoundation API
所以这个时候你一定要在应用内部
而且API本质上就是"给我你目前有的所有数据"
然后如果你有直播播放列表当有新内容出现时要通知我
这中心围绕在一个新的对象 叫做
AVPlayerItemMetadataCollector
我们这里有一个小样本你能看到没有什么特别的
你创建资源和PlayerItem
然后你说"我想收集一些元数据"
所以你创建MetadataCollector
你将自己设定成委托这样我们可以将内容告诉你
然后将它添加到PlayerItem
这就好了之后你就得到所有元数据项了
所以使用起来十分容易十分强大
我认为这会很快成为一种首选方式
来将元数据输入到HLS中
所以接下来我们今天要讲的
是另一个功能这也是应众人要求的
那就是离线模式下播放HLS的功能
我想请我的同事
Jordan Schneider上台给大家作说明
嗨 看看幻灯片好不好用
好了
在iOS 10中 我们让你能够下载
并播放HLS内容不需要网络连接
现在你可以将离线媒体重播功能提供给你们的用户了
使用现有的流媒体库
作为此功能的一部分我们扩展了
去年我们推出的FairPlay Streaming支持
来兼容离线HLS
而且我们给大家提供一种下载HLS内容的方式
即使你的应用在后台运行
最后 我们推出播放部分下载内容的功能
即使你的下载可能还在进行中
所以第一个问题-应该何时使用离线HLS？
没错 如果你想将这种功能
主要用于当用户想要播放内容的时候
然而他们可能没有网络连接
例如当他们进入飞行模式
不过 此项功能并非针对于预先加载媒体文件
我们有使用AVPlayerItem的其他做法
所以为什么使用HLS播放离线内容而不是直接下载好电影文件呢？
第一点 你的内容可能已经是用HLS制作了
所以采用HLS来播放离线内容可能对你非常便利
从工程学角度来说
同时除了视频轨
电影文件可以包括很多不同的音频轨和字幕轨
你的用户可能不太需要或是在离线存留着
在HLS中 因为所有的轨道都是分隔保存于
服务器的不同播放列表中我们能实现更大一点的灵活度
我们能精确控制被下载的媒体选择
节省用户的时间 网络数据和设备上的存储空间
例如 默认下 我们下载了一个用户的默认媒体选择
用户在离线播放时很可能只会关心这些文件
我们还给你提供的方式是确切配置
你和用户想下载的可以离线回放的内容
离线播放HLS的另一好处在于
使用相同的资源
我们仍可以下载未被下载的媒体选择选项
只要它们还存储在你的服务器中 这非常不错
所以怎么做呢？
在iOS 10中 我们推出一个新的类 用于下载AVAssets
叫做AVAssetDownloadTask
这个类继承了URL会话的功能
更重要的是在后台下载资源的功能
即使你的应用没有使用其所有的机制运行
我们让你有能力...
控制下载哪些媒体选择
因为这是HLS
我们让你有能力选择你想要的资源品质
还可以离线下载下来
AVAssetDownloadTask的界面是这个样
继承了URLSessionTask
我想在这里提一下这不是继承了
URLSessionDownloadTask
作用很相似 但是我想指出几点不同之处
所以为了创建这些东西你要设置URLSession
现在我们有一个特定的URLSession子类 叫做
AVAssetDownloadURLSession你需要使用这些东西
所以调用makeAssetDownloadTask来创建资源下载任务
之后为了选择品质
我们有最低要求比特率的选项键
以及媒体选择键
现在我应该说一下每个AVAssetDownloadTask
对应单个的媒体选择
如果你想在同一资源上下载多个媒体选择
那你需要设置多个AVAssetDownloadTask才行
我会在几张幻灯片中展示的
要想使用这些东西我们要这样做
首先要设置一个AVAssetDownloadTask
任意进行配置然后开始下载
我们要响应下载过程中可能发生的任何事件
例如监控下载进程
一旦下载完毕
我们要存储位置来在离线时进行回放
你可能要下载额外的媒体选择供你的用户所用
最后 你要播放该内容
所以要想设置这些下载
设置完资源后首先要做的是
你要去设置backgroundConfiguration
来自backgroundURLSessionConfiguration
然后你要创建你的AssetDownloadURLSession
然后创建你的下载任务
这里我有一个下载任务下载品质
的媒体比特率大概是每秒2兆位
但默认下 我们会下载提供的最高品质的视频
一旦设置完成因为这是URLSessionTask
你可以调用resume来设置你的下载
所以一旦下载开始了那你就要去监控它
为此 我们为你准备了新协议叫做AVAssetDownloadDelegate
这继承了URLSessionTaskDelegate中相同的委托方法
我想指出两件事是我们在这里推出的
一个是我们使用的监控下载进程的方法
在此方法中我们显示出下载进程
和时间范围 而不是字节来实现更好的媒体界面表达
之后我们有一个
didFinishDownloadingTo location委托方法 来通知你
下载文件的所在位置
这相似于URLSessionDownloadDelegate
的协议方法 你需要做的事情的预期
当你得到这个委托方法是稍微有点不同的
我马上就指出来
这是我们进程委托方法的一个示例
这里我将时间范围转化成已完成下载的百分数
我不会对其深入说明不过这就是它的做法
你的应用可能在下载过程中被关闭
进程可能被终止那你怎么办？
你的下载会继续
为了应对该情况你的响应方法完全与
URLSessionDownloadTasks相同
当你的应用启用后你要去设置
另一个后台配置你使用的标识符相同于
最初设置下载时的标识符然后从中创建一个URLSession
从那里调用getAllTasks方法
然后这里 你可以恢复你的AVAssetDownloadTask
其中会有当前的进程
你可以用它来更新应用中可能有的任何UI
然后你甚至可以用它来抓取原始AVAsset
之前你用它来设置你的下载
所以一旦下载完成首先你要做的是
储存下载资源的位置
所以每当有东西存到这个位置这个方法就会被调用
包括当部分下载的内容被用户取消的时候
现在你可以用
先前取消的下载内容恢复下载
或者你甚至可以用它回放部分下载的内容
如果你不想让那个下载
或者那个内容占用你的应用储存空间
那你可能要在这里删除它
所以...
不同于URLSessionDownloadDelegate
我们希望各位不要将资源从这里移开
我们这样做是因为让系统能够找到这些文件是很重要的
因为系统会回收磁盘空间
如果磁盘空间很少的话而且会在某个时刻
会从应用容器中删除该资源
所以你想保存的是位置的相对路径
从这里 你能够在将来恢复你的资源 从而进行回放
所以 现在你下载完资源的一个版本
比如说 你想下载额外的媒体选择
这个适合在我们的didCompleteWithError委托方法中做
这跟URLSessionTask有的那个一样
适合在这里做的原因是
因为同一资源上的媒体选择是连续下载的
通常这里适合进行任何完成下载的清理工作
所以用额外媒体选择选项来进行增强
比如 西班牙语音频
我们首先会抓取要下载的spanishOption
然后我们改变最初放入的AVMediaSelection
从这里选择spanishOption
一旦选择好了
我们要去创建一个新的AVAssetDownloadTask
最好是在同一会话中
外加传递我们要下载的额外媒体选择
然后我们调用resume这样整个过程就会重复
如果想的话 我们可以之后下载额外媒体选择
现在我们谈谈播放的事情
假如说我们有...这里示范了如何创建下载任务的方法
注意到我输入了一个带有networkURL的资源了吗？
但我们离线回放HLS
如果我们仍可以用原始的urlAsset
那我们应该使用那个AVAsset实例来播放
我们可以从AssetDownloadTask上的urlAsset属性中抓取
如果你输入带有networkURL的新资源
AVFoundation无法知道从何处寻找下载的内容
所以你应该使用同一资源然后你就能离线回放了
然而 如果你无法引用那个原始AVAsset
例如 很长时间之后你的应用可能没在运作
那你要做的就是创建新的AVAsset
用我们提供给你的下载位置
在didFinishDownloadingTo委托方法中
并用它创建一个PlayerItem
在这个案例中 如果你想对资源进行操作 例如
用额外媒体选择下载来增强
你真的应该重新使用那个同一个资源
你不应该有大量的AVAsset指向磁盘上相同的fileURL
这有助于让AVFoundation高效地
重新使用已经下载的媒体数据
所以我们还有一个附加级来帮助你严谨规定
用户能离线播放的内容这叫做AVAssetCache
你从一个AVAsset的资源缓存属性中抓取
这有两个作用一个是能告诉你
是否这个资源的各个版本都能离线播放
另一个是它能告诉你
是否出现了可用于离线的特定媒体选择选项
如果它不允许离线但还是能够播放的
前提是要有网络连接而且那个媒体选择选项
仍然存在于你去下载的那个服务器上
这就是如何使用AVAssetDownloadTask
并播放后续的下载资源
我应该提一下第五点如果你在下载资源磁盘上播放
这会在该过程的任何时刻发生
这甚至可能在开始下载之前发生
或在下载过程中发生而且AVFoundation会高效地
重新使用已经从网络上下载下来的内容
我想换一下话题
来谈谈保护离线内容
去年 我们推出了FairPlay Streaming
为HLS生态系统带来了强大的内容保护
然而 在iOS 9中
FairPlay Streaming需要对密钥服务器的活动连接
这无法用在离线回放上面
所以今年我们扩展FairPlay Streaming
使其在离线HLS情况下无需网络连接也能工作
我们的做法是将你的密钥以安全的方式打包并存储在磁盘上
并重新用于离线回放
但你的应用本身还是会保存这个密钥
并响应来自AVFoundation的密钥请求
用于每次回放 一旦密钥进入缓存 就不需要接入网络了
所以要想支持这些密钥需要对你的密钥服务器进行更改
具体是新的TLV值这样你的密钥服务器
必须明确地选择加入密钥从而满足使用离线回放的资格
最后我们想提醒一下FPS Keys
你必须在主播放列表中将它们声明为会话密钥
如果你想确认是否下载完成的话
所以...
为离线FairPlay Streaming保存密钥
真的就是基于在线FairPlay Streaming的请求流
你要更改的只是和修改这个请求流有关的内容
我在这里快速总结一下来指出你需要做的事情
但如要了解更多信息你应该观看去年的演讲
我们在那里讲得十分详细了
与FairPlay Streaming回放一样
AVFoundation会下载你的播放列表
并在找到密钥标签时触发密钥请求
这会让你的应用有机会保存密钥 从而用于离线回放
所以你的应用首先会回调AVFoundation
来获取流媒体密钥请求
然后会和你的服务器对话这会取走
那个流媒体密钥请求 然后给你一个内容密钥上下文或CKC
在线上FairPlay Streaming中你会在这里完成
请求流 并用那个CKC返回到AVFoundation
然而在离线FairPlay Streaming中
在这里你要将那个CKC交给AVFoundation
这样AVFoundation能将其冻干成一种格式
可以安全存储在你应用的存储空间中
你也可以在后续的回放中重新用上它
之后...
一旦你将它写入你的应用存储空间中
你要将那个冻干的密钥返回给AVFoundation
来完成这个请求
如果你的应用离线了那你需要做的只是
从你的应用存储空间中读取那个冻干的密钥 并返还给
AVFoundation 这样不需要网络就能做得到
所以我们来看看这究竟会怎样改变你的代码
在线上FairPlay Streaming中这些密钥请求作为
AVAssetResourceLoader的一部分
具体是AVAssetResourceLoadingRequest上面的委托方法
一旦收到请求首先你要做的是
请求AVFoundation创建流媒体内容密钥请求
或是SPC这会发送到你的服务器上
这会返回一个CKC 之后你用它来响应AVFoundation
现在 在离线FairPlay Streaming中我们有一个新方法
这是用来冻干密钥的方法
你输入从服务器返回的CKC
然后返回那个为你保存的数据团 从而用于离线存储
我们还有一个新的内容类型作为这个请求流的一部分
是persistentContentKey类型
和一个新的选项
来为应用方法输入我们的流媒体内容密钥请求数据
所以我们是这样修改那个密钥请求流的
用于我们要离线保存的密钥
我们首先要做的是请求AVFoundation创建SPC
不同之处是我们要输入所需的persistentKey选项
这样 AVFoundation和你的密钥服务器
会知道去请求一个适用于冻干过程的密钥
所以它将SPC发送到你的服务器 从而得到CKC
一旦拿回了CKC 你就调用你的persistentContentKey方法
来创建这个冻干的密钥然后可以保存于磁盘上
之后你要将这个密钥真正写到你的磁盘上
你要将内容类型设置成persistentContentKey类型
然后用那个持久性CKC来完成数据加载请求
那个CKC保存在你的磁盘上
现在如果你离线了
或者比如说 你之前已经满足了这个密钥请求
那你要这样做
你会得到资源loadingRequest
你只需从应用存储空间中读取你的冻干密钥
设置persistentContentKey类型然后响应密钥loadingRequest
完全不需要接入网络这很明显是必须的
因为你可能在飞行模式下
并且在这个过程中没有任何网络连接
这就是如何修改FairPlay Streaming
来用于你的离线HLS内容
现在我想谈谈管理资源的最佳做法
很重要的一点是这些下载会占用
你的应用磁盘使用量所以你要稍微多留意
你真的应该清除磁盘上任何不需要的资源
具体点 你一定要为你的用户提供一种
查看所有下载内容的方式
并允许他们删除那些不再需要的内容
要记住 用户取消的下载还会保留在磁盘上
你可以用这些资源在将来的某个时刻恢复下载
如果你不想恢复下载那你就要注意在
取消下载的时候删除那些资源
我们希望各位基于明确的用户行动来保留下载
你不应该去下载一堆东西
因为用户可能不想离线观看
我们冒昧地选择性排除了这些下载
在iCloud备份上面
我之前提过了你应该做好准备 这个系统会在
在低磁盘空间的情况下删除资源来回收磁盘空间
这不会在应用运行的时候发生
这只会在你应用终止后发生
当你的程序启动后你应该稍微保守地
推测你的资源是否真的
提前下载在磁盘上了
你不要将资源从我们提供的位置中移走
因为让系统能够找到这些资源是非常重要的
最终 因为下载的资源可能包含
未被下载的媒体选择
注意不要改变你服务器上的资源
如果你一定要更改媒体播放列表的位置
并改变你的主播放列表
那你应该将修改后的资源托管到新的URL上
而不是更改原来的那个
这就是 离线HLS
我们高兴向各位发布并期待各位会采用它
总之 今年我们有新功能供你们使用
我们有MP4片段支持这会带来通用的媒体格式
可以用在你们所支持的所有不同平台上
记住 这个兼容所有的HLS功能
而且对HLS播放列表只需微小改动便可采用
接下来 我们有使用DATERANGE标签的新播放列表内的元数据
在直播内容中非常适合使用元数据
内容可能有动态更新的元数据
像是广告边界之类的东西
最后我们提供离线HLS回放
其中我们有一个强大的媒体下载引擎
你还可以配置要下载的媒体选择和品质
我们还扩展FairPlay Streaming支持
没有网络连接时也能工作
所以要想获取更多信息
包括如何使用AVAssetDownloadTask的样本代码
和关于这些新版本的更多的资料
去查看我们开发网站上针对本次会议的页面
我想指出Roger之前提到的会议
已播出的创作和验证演讲
现在你可以在WWDC应用上观看这个视频
我极力推荐观看
感谢各位的到来希望大家会喜欢之后的发布会