高级测试和持续集成
大家下午好
我叫Zoltan
等下我的同事Eric也会上台
我们都是Xcode组的工程师
如今的软件开发很像指挥管弦乐队
你和我维护一系列测试
如果它们中的一个运行不正常
我们需要快速理解和纠正它
可能你是个测试大师有成百上千个测试
Xcode有工具和技术来指挥即使是最大型的测试程序组
今天我们将向你展示
首先我们要介绍一些概念
在之前的演讲里还没有被介绍
然后我们会介绍一些Xcode中的新特性
以及Xcode Server
尤其是可配置集成用户
然后我们会以xcodebuild的新特性做为结束
让我们开始吧
做为测试的简要重述
测试有4个特征
XCTest
你用来测试的框架
针对Objective-C和Swift
你的测试被编译成一些束
Xcode是编写测试的IDE
你还可以在开发时运行单独的测试
你还可以在Xcode里查看报告
来自本地运行和Xcode Server的测试
关于Xcode Server
是你的测试的连续集成解决方案
你设立bot来周期性的运行测试
Xcode Server会为你生成报告
如果发生错误它会通知你
这是你追踪项目的一个好方法
Xcode Server是在xcodebuild的基础上建立的
可在命令行使用xcodebuild
你可以在终端运行测试并查看结果
Xcodebuild是构建部件
对于我们在后面会看到的定制连续集成系统的构建部件
你可以在我们之前的演讲里了解更多关于这4个特征的信息
但是今天我们想看一些之前没有涉及的概念
我们想把你带到幕后
向你展示你的测试是怎样运行的
要这样做最好想象一个时间线
当你的测试被编译后它们必须被托管
这使得测试首先被运行
一旦这些测试在运行
你可以看到详细的测试进展
用一个叫监视的技术
我们来看看这2个概念托管和监视
让我们首先来看看托管
根据你是否有单元测试或UI测试
托管的故事不同
你的测试束被直接载入到你的应用中
在这种情况下我们称你的应用为寄主应用
但是对于你的UI测试你的测试束将被载入UI测试运行器
和你的应用是分离的
在这种情况下你的应用被称为
目标应用
这里有一些暗示
单元测试中你可以直接访问
你的应用数据结构和API
但是在你的UI测试中
你通过辅助功能和发送事件来访问应用
就像用户一样从外部来观察应用
对于单元测试你的所有测试都将被运行
在寄主应用的同一次运行中
所以在测试之中你需要注意清理工作
但是对于UI测试你的测试可以结束并重新启动应用
所以这利于测试你的应用怎样启动
这就是托管
这就是你的测试是怎样被启动的
一旦你的测试在运行中
你可以用被称为监视的技术
查看你的测试的详细进展
让我们放大这条时间线
在这里你可以看到2个测试用例一个接一个运行
这些测试用例属于一个测试组
一个测试组对应你写的一个测试类
如果你在测试束中有多个测试组
你可能想要做一些设置工作
为任何会运行的测试
或者也许在测试完成后
做一些析构工作
或者在测试中做一些定制的记录
你可以用XCTestObservation协议来做这些
你编写一个符合这个协议的对象
在和一个共享的监视中心注册它后
你的对象会接收到回调
比如在任何测试开始前
你得到这个束将会开始的回调
那么在组开始前
你会得到一个组将会开始的回调
对每一个要运行的测试用例
你会得到一个用例将会开始的回调
和测试用例结束的回调
如果出错了
你会得到用例失败的回调
因为测试结束了
你会得到测试组结束的回调
以及你进行任何工作的最后机会
在这里测试束结束的回调
这是一个例子
这个对象遵守XCTestObservation协议
在这个对象的初始化函数里
我和共享监视中心进行注册
随着测试的进行
我记录事件比如这个
测试出错时 我记录这个
我也会记录测试结束
一个理想的设立监视器的地方
是你的测试束的info.plist文件
你通过使用Xcode的Info.plist编辑器来这样做
你添加这个NS主类入口
这是你的监视器专门针对测试的初始化
它是和类载入初始器独立的
这就是托管和监视
他们是有用的概念来帮助理解
你的测试是怎么在幕后运行的
还帮助你诊断测试中出现的问题
让我们看看Xcode 8中的新特性
崩溃是测试失败的一个常见原因
崩溃可能发生在宿主应用
和目标应用中
通常Xcode会重启宿主应用
来完成你的测试组
这需要你自己来收集解决崩溃所需的诊断信息
我很高兴的宣布
今年Xcode会帮助解决这个问题
我们会在测试报告中帮你收集崩溃记录
对UI和单元测试
对本地和在服务器上运行的测试
崩溃记录会被收集到测试报告中
你会在那看到用文本呈现的崩溃
或者你选择查看崩溃的上下文
我想现在向你展示
Eric和我最近都在夜间活动
我们在空闲时间开发tvOS应用
现在我通过按运行按钮来启动它
这个应用是用一些测试的奇怪的乐队名称
来寻找附近的音乐会
我可以通过键盘上的键进入模拟器
Eric和我为这个应用加入新特性
来支持禁用了位置服务的用户
让我向你演示这对那些用户是怎样的
我会进入主菜单
在隐私选项里
我将禁用位置服务
我将进入Xcode
在这我们为那些用户添加了一个视图控制器
这允许他们输入一个邮编
让我为这个视图控制器再添加个测试
我希望那些单元测试在它们自己的方案中运行
我会向上来到方案菜单
我将复制这个已有的方案
并给它取一个有意义的名称
然后在这个方案的测试行动里
我禁用调试器
这是一个技术它允许我运行我的测试
不会有东西来打断测试组
它不会进入调试器
与你的测试如何在Xcode Server上运行很类似
我还会禁用和位置服务不相关的测试
我将分享该方案
我用Command-U运行测试
这是给禁用位置服务用户的新视图控制器
他们可以选择输入邮编
现在 测试是输入邮编
那是出乎意料的崩溃
当下 Xcode聚集了崩溃日志
报告测试失败
让我们看看
这是失败的测试
我可以点击跳到测试报告
我将展示测试抄本
这里是测试输入邮编时的事件
此处最底部是崩溃
现在我可以点击查看该崩溃的文本显示
但这情况下我想向你展示崩溃的上下文源码
所以 我将点击此处的箭头
这就是崩溃发生的那一行
你可以在左上角看见调试导航中的栈帧
现在我就能看见上下文源码中的崩溃并且诊断问题所在
我恰巧发现引用了错误的视图控制器
应该是presenting ViewController而不是parent
所以 我将做个修改
我将通过去测试导航来重新运行测试
点击此处的图标
之前我向你们展示过本地测试运行的测试报告
但那个报告将看上去与出自Xcode Server的完全一致
现在测试是重新输入邮编
太棒了 这些测试通过了
我们现在登记测试并...
在支持禁用位置服务用户这方面建立信心
但 现在 让我们回到幻灯片
你已经看过Xcode怎样收集崩溃记录
并在测试报告中包括它们
你可以选择查看那些崩溃的文本呈现
或者你可以查看崩溃的上下文源码
这是诊断问题的一个好方法
并且在你的源码上下文中修正问题
我们在Xcode Server中有一些新特性
为了向你们展示更多欢迎同事Eric Dudiak上台
下午好我是Eric Dudiak
我将和你们谈论Xcode Server
及Xcode 8中有哪些新特性
让我们看一下概述关于我们要谈到的
Xcode 8和Xcode Server
我们有定制的环境变量你可以设置它来集成
我们有高级触发器编辑流程我们在Xcode 8中改进了它
我们还有一些对追踪和归责的改进
来确保bot中出现问题时你被通知
我们还会看到那将怎样和升级集成一起工作
这是我们为你提供的一个新特性
最后我们将看到可配置的集成用户
也是Xcode 8新加入的
让我们开始讨论定制环境变量
有点像作弊
实际上它在Xcode 7.3中出现
它让你配置环境
这个环境在bot传递给Xcodebuild
这将控制你的集成将被怎样运行
你可以配置任意多你想要的设置
为你在服务器上运行的bot
有可能和在本地运行的不同
定制你的服务器怎样运行你的集成是有利的
不需在你的项目中新建很多方案就可以完成这个是很好的
现在来到Xcode 8的新特性
我们显著改进了编辑触发器的体验
我们有两种触发器脚本和电子邮件
首先让我们谈谈脚本触发器
他们在你的集成前或后运行
他们就是普通的shell脚本
我们改进了编辑器给你更多的空间来查看脚本
并且你可以看到它们里面有什么
你可以看到更多
这些行还允许你给触发器命名
如果你在组里工作这些有帮助
你的其他组员可以看到每个触发器应该做什么
如果你有一个很长的脚本
那是你集成触发器的一部分
你可以看到它是在Xcode正在集成时被唤起的
当你在状态UI里看产品的集成过程时
你实际上可以看到哪个脚本正在运行
最后如果你后来又有一个新脚本
你想在其他脚本之前运行这个新脚本
你可以在这个UI里重新对触发器排序
只需要添加一个新的脚本触发器并把它拖到顶端
它会成为在bot中第一个运行的
现在让我们看看其他各类的触发器
我们有电子邮件通知
在Xcode Server历史中
总是一封邮件对应一个集成设置
这会造成大量垃圾邮件
为了减少在你的收件箱中的邮件数量
我们把这类触发器分成2种不同类型
我们仍然有报告触发器或者报告邮件触发器会出现
在每次你运行集成
虽然现在你可以调试它们
每天或每周只运行一次
不管你的bot运行多频繁
不会产生大量的邮件
你的收件箱不会被大量邮件淹没
我们认为这对管理者很有利
管理者希望持续检查bot的健康状态
但不想收件箱充满了邮件
此外我们还允许你定义邮件里的某些域
这样你就可以配置抄送和回复域
使你能更多控制
你要发送的邮件类型
我在之前提示过
我们现在有两种不同的电子邮件触发器
另一类是问题触发器
当有问题发生时
我们会给你发一封电子邮件
给对这个问题感兴趣的人
我们会在接下来谈谈这个
但是如果你有更多的提交者
是你要集成的代码的参与者
那你当然想要发邮件给他们
我们允许你在这过滤接收者
来确保你只给你想要的人发邮件
让我们看看这个
如果你有多个仓库你可以选择只发邮件
给来自特定仓库的提交者
或者你知道哪个域名所有你想要发送邮件的邮件地址
都会来自那个域名
你可以在这添加那些
让我们花一些时间来谈谈问题
或者构建问题
没有人是完美的也不会每次都写出完美代码
这是我们有连续集成的原因
这是我们有单元测试的原因
我们有单元测试因为我们知道它们不可避免的会失败
所以我们首先写它们
我们偶然也提交无法构建的代码
我们中的一些人不会在提交前检查
事情就是这样的
连续集成利于捕捉
在这些情况下Xcode会给你发邮件
通知你你破坏了构建
但除此之外还可能发生其他问题
有时候即使你写的代码是完美的
你周围的事情会改变
可能是你安装新的Xcode
你得到很多新特性
你得到新的SDK可能有些东西在其中被新弃用了
可能因为语言的改进产生问题
我们希望确保每次发布的Xcode
都比以前发布的Xcode更聪明
所以你可能看到我们以前没发现的问题
它们一直在那只是Xcode现在追踪它们
比如静态分析问题
当你看到邮件时重要的事
是我们想确保它是可操作的
并让你知道你收到这封邮件是因为出现问题
一是因为出现了一些问题
并且你可以处理这些问题
第一类是如果你导致了一个问题
是因为你损坏了它
所以这会联系你像你在邮件中看到的这样
你会看到像这样的说是你导致了这个问题
我们知道这是因为问题出现在一行或一行附近
你最近修改过的一行
我们还可能知道在2次集成中
问题出现时只有你提交过代码
这种情况下猜测你造成了损坏是合理的猜测
但情况并不总是这样
比如 一个应用基于一个框架
框架里的一个改变
可能造成应用的损坏
没有任何人对应用提交代码
在这种情况下你会看到一封邮件更像这样
它会更少地谴责你的工作
并且会说你可能可以在bot里解决这个问题
现在我们知道这是因为你经常在出问题的范围内提交代码
我们对各种范围赋予所有权
并且考虑到这是更模糊的匹配
和直接把责任归于某些人相比
所以邮件会发送给更大的范围
会形成一个很宽的网络
当试着找出谁可能对特定问题感兴趣
这对你的代码中出现的问题有利
但是有时候问题
并不是代码的改变引起的
最简单的重现它的方法是重新设置你的bot
所以Xcode 8或者Xcode Server现在会追踪修改
对你的bot的配置的修改并把它们调出
任何我们有可能把新出现的原因
归咎于配置的改变时
比如说你启用测试或静态分析
也许这类问题一直存在于你的代码中
但是我们实际上把它们归咎于
特定的bot配置的改变
而不是代码的改变
我们还在下一次的集成包含这些信息在邮件里
这样当你看到一封这样的邮件时你知道其中的一些改变
可能因为你进行了一些配置的修改
让我们回到之前谈论的一些事
安装新Xcode获得一系列新特性
当那发生在Xcode 8中的Xcode Server时
实际上会重新集成你的整个项目
我们称之为升级集成
我们会用和之前集成完全相同的版本
然后重新运行所有测试
重新构造所有东西重新运行静态分析器
当这发生时我们知道
问题发生在你在项目里在这个时候
任何新的问题都是由升级引起的
因为我们使用完全相同的代码
这节省了你追踪源代码改变
所需的大量时间问题并不是
由你对代码的修改引起的
这就是一些新特性和问题的责任归咎
我想谈谈Xcode Server和Xcode 8中
我最喜欢的新特性
那就是可配置集成用户
我们给你将运行你的集成
的Mac OS用户完全的控制
这给你很多增强的可视性
关于你的集成是怎样运行的
此外它还允许你配置
你的集成究竟怎样运行
Xcode Server中有一个隐藏的Mac OS用户
在后台运行所有的集成
你无法访问密码
你无法用它们登录
这就是说你得到一个用户
你不能进行任何修改
现在你自己拥有并管理这个用户
你会得到密码
这个用户就是一个普通的Mac OS用户
可以是系统上的任何用户
可以是你想要的任何用户
我们建议用一个新用户
但它在登录窗口和快速切换用户中可用
所以你可以用其他用户登录
你会注意到你在使用这个用户
通过一个菜单显示Xcode Server集成图标
我们会马上看到
让我们看看怎么建立这个用户
在这我打开服务器应用来到Xcode服务面板
为了启用Xcode Server
我需要选择Xcode
我会选择我已经安装的新的Xcode 8
我会看到这个对话框
要求我建立我想使用的集成用户
我新建一个
只用来运行集成的用户
给它一个名字和密码
和普通用户一样的一些事情
我将视其为基本用户
当我按新建用户按钮
Xcode将在后台做一些工作
当它为运行集成做准备时
一旦用户被设立好
我们被要求用它们登录
现在我们被要求用它们登录因为我们要继续
运行建立助手
请记住这是一个真正的普通Mac OS用户
所以我可以登录比如 登录一个测试iCloud账户
我可以保存用来集成的数据
任何此类
当Xcode准备好运行集成时
你会看到一个通知像右上角这个
以及在菜单栏的右上角
你会注意到有一个锤子表明
是Xcode Server集成用户
当这些都完成后我可以切换回去
我会回到服务器应用我会看到指示符
提示用户已经可用
登录后集成可以开始运行
我们已看过怎样建立该用户
让我们看看一些我们访问集成用户
可以做的事
让我们来到演示的机器
我们有早前看到的那个相同的项目
我们看到有一个问题它崩溃了
因为它无法访问位置
我们需要手动进入模拟器
并关闭位置访问来在本地测试它
但是因为我们在开发应用我们可能不想这样做
我们可能想要保持启用位置服务
在我们的Apple TV和模拟器中
这是我们的用户多多少少会遇到的情况
我们希望怎么看到应用
但是现在我们已经解决了早前看到的问题
我们不希望它再出现
如果它出现我们希望收到通知
所以碰巧我现在在用的机器
是我的服务器机器
要进入我的服务器
我只需要来到快速用户切换菜单
我看到我有一个
可配置集成用户名叫Xcode Server
我选择它
输入我的只有4位的密码
我们就会作为这个用户登录
我修改桌面背景
所以我知道这是构建服务用户
在这我们看到Xcode的锤子图标
它表明这是Xcode Server
它已经启动并在等待集成
已经配置好了
我想要进入Xcode
我可以为这个用户在Xcode中配置任何我想要的本地设置
它们会在我的集成中被使用
我会用一些小技巧
如果我来到设备菜单
我看到了插入这台电脑的所有设备和模拟器
现在Apple很慷慨我们提供我们生产过的所有设备
如果这还不够多
你可以按这个增加按钮来获得更多模拟器
Apple TV 1080p模拟器在我安装Xcode时就已经内置了
我会新建一个没有位置服务的Apple TV
它已经启动了
我双击进入
它实际上已经禁用了位置服务
如果我来到设置 一般隐私
位置服务被关闭了
所以模拟器已经配置好可以使用
而另一个也可以在我想要启用位置服务时使用
让我们快速切回
并登录我通常使用的用户
通常我需要穿过房间
到我实际用来工作的电脑所以这快一些
这里我们看到所有的UI测试
现在我已经有一个bot正照常进行集成
但我想新建一个bot用来集成
在没有位置数据的情况下
所以我来到产品新建Bot
在这个服务器上使用无位置的方案
我会给它位置 对不起是我的仓库
这样我就可以取得我的项目
和我的普通bot一样我禁用归档活动
我不关心那个但是我想要运行测试
让我们保持启用静态分析
我想要在我破坏它时马上收到通知
但是每天一次就可以了
所以如果我们又破坏了它我会在24小时内知道
UI测试会在server上捕获它
我们会在每天凌晨1点运行它
在这我选择设备
默认情况下 每次集成在那个操作系统的所有设备上运行
这是一个tvOS项目
所以它将在所有tvOS设备和模拟器上运行
但是让我们选择特定设备
我将只选择Apple TV没有位置
这是我们早前谈过的环境变量视图
我不需要任何变量
我将继续确保我收到邮件
当一个问题在特定用例里出现时
然后继续新建这个bot
它将继续开始一次集成
我们在这可以看到它在运行它正在导出构建
我们看到UI测试进行了一部分
让我们来看看
我早先准备好的一个集成
若我们去测试
我们可以看到所有测试都被运行了包括邮编测试
如果我查看一些屏幕截图
它实际上运行了那个位置
因为它打开了我们早前看到的视图控制器
我们可以看出我们显著提高了可视性
关于你的用户怎样运行
你可以登录它们看到正在发生的一切
我们看到了你可以定制不同的设置比如模拟器
运行你想要在集成中运行的操作
我们看到这是普通的Mac OS用户
我可以在快速用户切换中切换到它
我也有密码
我们看到菜单的额外图标
显示集成状态的信息
在集成用户中
现在随着这些新特性而来的是一些责任
所以我们为你们准备了一些最佳实践
首先我们强烈推荐你新建一个用户
让他尽量和你的客户有相同的体验
你不想要你的设置
影响你的bots
我们还建议你避免使用管理员账号
请记住所有能在服务器上新建和编辑bot的人
将可以通过触发器来访问那个账户
对任何私有或定制数据也是这样
避免在那个用户里储存这些数据
如果你想在后台保持登录那个用户的状态
使用快速用户切换
集成可以继续运行在后台就像它们一直做的那样
但是如果你想要做为最前台用户运行集成
确保关闭了锁屏
就像iOS屏幕锁定bot测试Mac OS屏幕锁定也会这样
最后确保你对你的所有需要都这样设置
包括我们前面看到的任何模拟器
如果你在集成中需要
特定网络配置
你想要在UI测试中使用任何保存的用户数据和设置
去配置它们
最后如果你有高级供应
比如你的管理员给你一个供应配置文件
然而你可以在Xcode上配置
你实际上现在可以在可配置集成用户中配置它
来确保代码签署正常工作
我要请回Zoltan
来谈谈xcodebuild的一些新特性
谢谢你Eric
你们已看过Xcode的Xcode Server新特性
现在要向你展示xcodebuild的新特性
xcodebuild有测试活动
针对定制连续集成系统
你给它一个工作区一个方案和一个目标
一个xcodebuild就会尽职的构建你的源码
它会在设备上安装所需的构建产品
它会运行你的测试然后在命令行向你报告结果
今年我们为这一行为引入了2个选项
只测试选项
让你可以有效的
限制将被运行的测试
你可以指定测试用例或测试组或测试束被运行
并排除其他测试
你还可以使用跳过测试选项
来指定测试用例被排除在测试中
而其他测试会被运行
今年的大新闻是
xcodebuild有两个新行为
我们可以有效的把测试分成2个
这些功能已经在Xcode IDE中
但我们要把它们带到xcodebuild中
让我们一个个来看
为测试构建是测试活动中的构建部分
你已经给了它一个工作区一个方案和一个目标
它会构建你的源码
可能会使一些符号可见
然后它会把构建好的产品输出到导出数据
它还产生XCTestRun文件
它是一种清单规定你测试要运行的一切
我们晚点会回到这
不构建测试是第2部分
像之前一样给它一个工作区一个方案和一个目标
xcodebuild在输出数据里找到已构建好的产品
它会把它们安装到所需的设备上
然后像之前一样运行你的测试并报告结果
但是酷的事是你不再需要提供工作区
你只需要提供XCTestRun文件
Xcode会从二进制文件运行你的测试
它会使用XCTestRun文件
它会找到和这个文件相关的二进制产品
它会运行测试并报告结果
i和之前一样
但是不需要访问你的源码
这对分布式测试环境很理想
你可以在为构建优化的电脑上构建你的测试
然后把构建好的产品
转移到为测试优化的电脑上
然后你可以并行的收集测试报告
XCTestRun让这一切成为可能
它是测试的清单指定哪些测试要被运行
哪些要在哪个测试电脑上被跳过
它向测试提供环境变量和命令行参数
关于主页面的格式你可以用这个命令来查看
我们今天覆盖了很多
我们首先回顾了测试的4个特征
然后我们看了Xcode的一些新概念
它们帮助你诊断测试中的问题
然后我们介绍了Xcode的新特性
Xcode Server和xcodebuild
我希望这些新特性的介绍
能帮助你开发运行良好的测试组
并最终帮助你开发优秀的应用
你可以在这个网址获得更多本场演讲的信息
谢谢