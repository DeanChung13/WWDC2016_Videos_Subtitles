使用Core Motion以健康和健身
谢谢
大家好
下午好 欢迎
我是Bharath Rao
是Core Motion团队工程师
今天我很高兴和你们谈谈健康和健身
在这次演讲中 我会向你们展示如何使用Core Motion框架
来增加一些有趣和迷人的特性
到你的应用
在我们开始前
对Core Motion新手们
我想要提醒你去观看一些我们过去的演讲
他们有一些很好的信息关于传感器是怎么工作的
及怎么在Core Motion中使用这些传感器
来提供API来帮助你的应用观察统计和活动
和设备Motion及其他很多
请去看它们
有了那些 让我们开始
这是我们今天为你们准备好的
我有一个对历史加速仪的更新
我希望和你们分享
我们有一个新计步器事件API针对iPhone和Apple Watch
最后我们会把设备Motion API带到
Apple Watch和watchOS 3一起
谢谢
首先是历史加速仪
去年我们介绍了CM传感器记录API
有了这个API
你的应用可以访问原始的加速仪采样
或很长一段时间的采样
而且你只需要用很少的电量来访问
当你的应用请求框架开始录制这些采样
他们可以暂停而且操作系统会提供那些采样
即使设备在休眠中
当你的应用准备好使用那些采样
它们可以启动并发送一个请求
并且获得对所有缓冲了的采样的访问
在watchOS 3中我们有一系列重要更新
首先是更长的时间
现在你的应用有一个36小时的窗口在其中它们可以启动
并且获得对所有历史加速仪采样的访问
第二个更新应该不会让你们吃惊
它是对于API被请求最多的更新之一
所以我很高兴宣布在watchOS 3中
现在采样的延迟只有3秒了
有了这个更新现在你可以使用传感器记录器
不仅仅是观测用户活动或者是长时间
而且有一些实时应用
对这些应用你现在可以使用传感器记录器
也许
来追踪体育活动或者记录健身房里的健身
或者甚至是健康诊断
想像应用在Apple Watch上可以侦测手颤
现在每当用户发生一些手颤
他们可以启动应用
你的应用将能够获得所有历史加速仪采样
对它们进行一些分析
得到一个报告说那个手颤有多严重
并且是哪种颤动
并和用户分享它还可能在获得同意的情况下分享给医生
所以这样可以对这种病症加速诊断和治疗
在watchOS 3中对历史加速仪的更新是很好的
下一个是计步器
CMPedometer是一个多用的API
它记录统计和距离以及阶梯步级
用户在一天中所爬的阶梯步级
这样你可以用它来创造一个全天活动的追踪器
你可以设置一些有趣的目标让用户来达到
通过这样你激励他们达到一个更健康的生活方式
但是CMPedometer真正强大之处是在锻炼的环境中
比如速度测量
我们有步幅估计算法在iPhone和Apple Watch上运行
使用这些
我们可以提供相当精确的速度和距离测量
即使手机没有GPS信号
或你带着Apple Watch跑步
你没有带手机
即使这样用户得到非常精确的测量
我们今天增加的计步器事件API
实际上会帮你使那些健身体验
更吸引人更精确
让我们设想一个典型的跑步健身在地市里跑步
做为第三方开发者
你在这种情况下会面对的挑战之一是
如何侦测所有的那些开始和停止
当用户在城市里跑步时在十字路口发生的
用户在红灯的时候停下来
你的应用会继续累加他们站立不动的时间
在他们完成跑步的时候
你已经累加了足够的时间
如果你试着计算他们的整个跑步的平均速度
你的结果可能和他们的爷爷的速度相似
也许爷爷的速度比他们快 没关系
我想说的是你会得到一个非常不精确的速度
有可能远远小于他们跑步的速度
一个可能的解决方法是
你可以提供手动的暂停和继续选项
但是现在一旦他们暂停了
他们需要记得当他们开始跑步时继续这次锻炼
如果他们没有这么做所有他们在应用暂停时跑的步
不会被记录在锻炼中
所以如果他们忘记暂停他们会得到不精确的速度
如果他们忘记继续他们失去距离
很明显你需要一些自动暂停和继续的侦测
不但要精确 还要响应快速
需要感觉你的应用
能很好的侦测那些开始和停止
此时你可能在想为什么不用GPS和步数
毕竟你的应用可以访问那些
如果你以前用过GPS
你知道你不得不做大量的过滤工作
这样你可以移除噪声
也就是说响应会很慢
而你从CMPedometer得到的步数
它有一个内置的延迟
我们这样做因为我们想避免误报
我们用步数来估计步幅
从那我们计算距离和速度
所以这对我们很重要
首先有精确的步数计数
所以在这个版本中我们给你计步器事件
会帮助你侦测那些开始和停止
不但有好的精确度而且延迟低
我们的计步器事件解决方案或者自动暂停继续方案
使用一个预测算法
这个预测算法用用户数据进行训练
所以我们可以提高估计的似然度
关于用户是运动中还是完全静止？
当然都是在徒步的情况下
通过这么做我们可以弥补大部分
和步数计数算法相关的延迟
但是我们可以这样做并有很好的精度
我还想要指出
因为预测算法一直追踪用户是否在移动
或者他们停下来了
我们还支持步行速度
当用户停下来
不论是从走路还是跑步你会得到一个暂停事件
一旦用户开始跑或走
你会在应用中得到一个继续事件
计步器事件API在iOS X和watchOS 3上看起来是一样的
让我们来看看API
你有暂停和继续事件
每个事件都包括一个具体时间
算法发现从运行变成非运动状态的时间
以及反过来
你需要开始和停止更新
来帮助你的应用注册和取消注册这些事件
我一直在说计步器事件会怎么
被用来清楚划分跑步的阶段
在一次完整的跑步锻炼中
以用你能怎样用它来得到精确的测量
但是你还有其他有趣的计步器用法
让我们看一个例子
这是一个iPhone上的越野跑应用
所以我们会用计步器事件来看
来找出什么时候我们能够与用户衔接
以及当我们这么做时我们能够怎样向他们显示一些有趣的信息
能让他们响应更多的活动
因为这是越野跑应用
整个跑步过程中会有高度的变化
我们要看看这是否会有一些有意义的信息
我们会用CMPedometer类
来注册暂停和继续事件
我们还会得到相关的高度更新
或者海拔高度的变化使用CMAltimeter类
如果你想要继续在应用中接收计步器事件
即使屏幕关闭
你的应用必须保持运行
在iPhone这么做的一个方法
是订阅持续后台位置
如果你对知道更多相关信息有兴趣
我建议你去看Core Location最佳实践演讲
会在今天的 WWDC 举行
接下来我们会首先注册相关的高度更新
并检查可用性
然后我们提供一个操作队列
并提供一个回调处理器来开始接收那些更新
在这个例子中我会记录最近的更新
但是可能在你的应用中你可以缓存所有更新
在锻炼结束时你可能可以提供
一个漂亮的整个跑步过程的高度轮廓
接下来我们会注册计步器事件本身
首先还是检查是否存在
然后通过提供回调处理器来注册
这只是一个小提示来确保我不会面临并发问题
我会工作在来自同样的操作队列上的所有处理器
现在这个应用被设置成找出
什么时候用户开始和停止跑步
我们准备好看一下它们是否能用在一个有前后关系的方式中
他们一开始跑步我们就会在应用中收到继续事件
在这时你可以
记录下你收到继续事件的时间
那么在锻炼完成时
你可以把所有跑步时间加起来
来计算整次跑步的精确的平均速度
在这个例子中我会记录下最近的高度更新
这样我就知道他们开始跑步时是在什么高度开始的
当用户停止时
现在是个很好的机会来找出
因为我们有高度 我们可以找出是不是他们在跑上一座山
如果是的这可能是他们第一次在山上跑步
为什么不给他们一个登山包成就
如果他们已经在山上跑了多次
因为我们有每次跑步的精确时间
现在我们可以比较它们
并且给它们一个统计关于他们在特定的山上跑步中做得怎样
这是我们使用计步器事件的一个例子
不仅仅达到非常精确的测量
还划分那些跑步阶段
这也是一个你可以使用
那些事件来做些有趣的事的例子
在跑步的最后
当然你要取消那些注册
这也会释放
所有框架中的处理器代码块
计步器事件在iPhone 6s和更新发布的iPhone中可用
还有Apple Watch
这就是iOS X和watchOS 3中的计步器
接下来让我们谈谈设备Motion
如你所知
设备Motion API自从iOS 5起就存在iPhone上
有了watchOS 3 我们把相同API带到了Apple Watch
Apple Watch上有非常强大的传感器包
它是在我们手腕上一个固定的位置并且我们全天都在使用
因为我们用手
来做几乎任何事在我们全天做的事中
这是一个很强大的工具来观察用户的所有活动
设备Motion所做的就是
获得加速仪和陀螺仪的采样
它融合这些
来清楚地告诉你用户的所有活动
这些就在你的手腕上
所有手腕上的motion被描述成设备Motion
使用四个不同的属性
姿态 重力 旋转速度和用户加速度
如果你想详细知道这些属性是如何导出的
以及它们的作用
我鼓励你去看2011和2012年的演讲
在这个演讲中我会给你非常简短的关于这些属性的概述
这样我们可以建立一些灌输
以及用例子看看你能怎么使用它们
在一些健康和健身应用中用有趣的方式
第一个属性是姿态
在你的应用中使用姿态
你可以获得对设备方向和空间的观测
你用CMDeviceMotion时你获得三个姿态属性
是四元数 旋转矩阵 和欧拉角度
当你在应用内使用姿态
需要注意的一件事是
每一个姿态观测
都和一个固定的参考坐标系是相对的
这的意思是
每一个方向观测
是通过一个不是固定在设备上的点进行的
参考坐标系保持静止但设备可以到处移动
这就是你如何用姿态来观测方向
而且
你的应用注册来开始接收更新的时间
是参考坐标系设定的时间
所以你的应用接下来收到的采样
会被计算
用开始更新时设定的相对参考坐标系计算
这是你在应用中使用姿态时需要注意的
而且你不要做假设
关于设备在绝对空间中的方向的假设
下一个属性是重力
重力是
它是重力 把物体拉向地心的力
在设备Motion中
它在设备坐标系里被表示成单位矢量
使用重力你可以观测设备的翻转和倾斜
但是你可能会问 难道翻转和倾斜不也和姿态一样是方向吗？
但是一个关键的不同是
现在你从设备坐标系中观测所有方向
比如如果我要保持我的手完美的和地面平行
在我的两侧然后我把它移到我的前面
你无法用重力观测到这
因为重力的x y z成分会维持不变
在这两个方向中
要观测像这样的情况你需要
一个观测点是外部的或固定的
当设备移动时这就是姿态
所以你可以用重力来观测方向
但是在有限的情况下
但是在你所设想的应用中这可能工作得很好
关于重力的另一件事是
当你拿着设备并完全静止时
你可以用加速仪观测它
加速仪会得到一个固定的加速度
你可以从加速仪中读出它
但是一旦你开始移动设备
这时加速仪获取的不光是重力成分
它还获取所有用户产生的motion
这会使只获得重力成分越来越难
设备Motion所做的是使用融合
我们转而用陀螺仪来追踪重力单位矢量
下一个属性是旋转率
就像名字暗示的这是角度motion的变化率
这很适合用来观测一些事比如手腕的旋转
当你旋转手腕时
会有一个围绕设备x轴的旋转motion
你可以用旋转率观测它
你还可以观测围绕身体的任何旋转
因为我们的大多数固定我们的躯干活动我们的手臂
所以会有一些弓形的motion
所以有旋转并且你可以观测到它
利用设备Motion的旋转率属性
最后一个属性是用户加速度
你通过设备Motion得到的用户加速度
是对重力的抵消
回忆一下我提过的加速仪怎么获取
重力成分和用户产生的成分
而这仅仅是用户产生的成分
但是它抵消了导出的重力
使用设备传感器融合导出的重力
这就是对这些属性的快速概述
现在让我们看看你可以怎样在应用中使用它们的一些例子
第一个属性是姿态
姿态很适合用来观察任何重复motion
像是对举重进行计数所以当你举起重物时
你实际上进行了一系列方向的改变
所以通过观察这些方向改变是如何重复的
你可以计算次数
使用姿态来这样做最好的部分是
现在他们可能使用一种机器他们拉在
水平方向或者从上面
你可以用姿态观测到所有重复
重力 像我已经提到的很适合用来测量翻转和倾斜
这表明你可以把它用在瑜珈应用中
所以如果他们在做一个下犬式或者保持一个战士式姿势
你可以得出他们能保持姿势在多静止的状态
当他们从一个姿势变换到另一个姿势时
你可以发现他们是用优雅的方式这样做
还是只是摔倒了
旋转率最有用的使用方法是
观测旋转motion的速度
比如以棒球练习为例
当你挥棒时
你不只是围绕身体旋转你的手臂
还有围绕手腕的旋转
你可以用旋转率的这两个成分
来估计挥棒速度
当然你需要知道棒的长度
以及要在棒上的哪点测量速度
用户加速度最好用在有一些突然的motion时
因为加速仪捕捉所有用户正在进行的motion
如果你想开发一种应用
你用用户加速度来测量一些小的运动
可能会被噪声淹没
有突然的motion的地方是最适合用用户加速度的
比如击拳和反冲
你可以知道他们打中沙包有多痛
或者是对手希望那是空气制造的
这只是一部分例子
你能怎样在应用中使用设备Motion
在看过这些之后
若你觉得你有一个可以使用设备Motion的应用的想法
而且想知道更多关于如何应用设备Motion
请在明天到我们的实验室去
我们会很高兴帮助你
现在让我们看看API你有四个属性
姿态和重力 它们没单位重力是单位矢量
用户加速度的单位是G旋转率的单位是弧度每秒
在你可以在你的应用内接收设备Motion更新前
你需要设定它们的采样率
你可以设定采样率最高到100赫兹
一旦你设定了采样率
你可以去注册更新使用开始更新这个方法
从这之后
你可以选择周期性获取设备Motion属性
获得最新采样
或者你可以提供一个回调处理器你可以获得
设备Motion为你产生的每一个更新
当然一旦你完成了监听设备Motion更新
你可以取消注册使用stopDeviceMotionUpdates方法
我的演讲就是这些了
现在我要把讲台交给Paul他会带你们
看一个Apple Watch的示例应用
用一种有趣的方法使用设备Motion
谢谢 给你 Paul
谢谢Bharath
大家好
我是Paul Thompson我是Core Motion工程师
Bharath刚谈了CoreMotion API的新特性
我要做的是向你们展示怎样使用它们中的一个
在一个Apple Watch健身应用中
在这个应用中
我们要做的是创建一次网球锻炼
然后我们会向设备Motion订阅传感器更新
最后我们会侦测挥拍
并区分正手和反手挥拍
要这么做我们需要做的是利用Core Motion的功能
和一些HealthKit的新功能
你们可能记得
watchOS 2应用高度依赖HealthKit和Core Motion
来进行实时分析和传感器输出
并提供给你数据比如步数
步级 距离和热量消耗估计
现在在一次锻炼中
你的应用做有限的工作来处理设备Motion采样
当用户并没有直接进入你的应用中
但是当然这个功能也带来一些警告
开始你必须启用了新的HealthKit授权
在Xcode项目中
进一步 后台工作只能
在一次活动的锻炼中被完成
除此以外
当处于后台时你必须最小化CPU使用
否则你的应用会被暂停
直到用户明确的把它调入前台
因为后台能力是由HealthKit提供的
我鼓励观看早前的演讲来了解更多关于它的细节
考虑到这点 让我们想想我们的应用看起来是什么样的
有了应用你可能想和你的朋友
戴着Apple Watch去网球场
进行一些截击练习
你简单地开始一个快速锻炼来回击球
然后你希望在任何时候
你快速地看一眼watch可以获得一些媒体反馈
考虑到这些 让我们想想我们项目的结构
会有三层我们需要考虑
首先是UI
我们最终要向用户显示我们做了什么
然后我们有锻炼管理器
我们会和HealthKit互动
开始和停止锻炼会话并启用后台功能
然后我们有motion管理器
在这我们会直接和Core Motion互动
实现我们的侦测算法
在这我们会响应50赫兹设备Motion更新
并把采样结果加入一个RunningBuffer
之后在每次更新时
我们会判断是否有挥拍发生如果有 我们会实现UI
我们怎么给我们想要侦测的挥拍建立模型？
网球是个复杂的运动
在这个情况下我们要做的是我们会看看两个动作的基本点
一个完整的正手和反手挥拍
我们通过使用重力和旋转矢量来这么做
这些矢量由设备Motion提供
如果你假设watch是在主手上
那么你期待一个完整的正手挥拍会包括用户的旋转
如果我们进行点乘
来自可能的挥拍的旋转率
和重力单位向量点乘
我们可以忽略设备的姿态并分离这个运动
还可以忽略一些无关运动
然后当我们获得足够多关于这的采样
我们可以判断是否旋转了足够远是否远到可以计数为一次挥拍
所以我们现在知道要做什么让我们看看我们的采样应用
要开始 我们来想象一下我们简单的UI
我们会向用户显示信息
这就是了三个WatchKit界面标签
我们希望在运行时更新
这包括锻炼标签
正手计数标签
和反手计数标签
锻炼标签会做的是简单地告诉用户
我们开始和停止了锻炼会话
而正手反手计数标签
会显示我们侦测到了多少次对应的活动
我们有一Force Touch菜单来开始和停止锻炼会话
我们知道UI会显示什么让我们看看锻炼管理器
在这我们处理和HealthKit间互动
并且创建我们的锻炼会话
我们还指导我们的motion管理器开始和停止传感器更新
在我们的锻炼管理器中我们将开始一次锻炼
要开始我们会创建我们的锻炼配置
我们会用它来初始化锻炼会话
因为我们在创建一个网球应用让我们用网球做为活动类型
户外做为地点
初始化之后
我们会让HealthKit开始锻炼会话
并订阅设备Motion更新
此时我们可以在屏幕关闭时做一些工作
此外我们还需要停止锻炼
我们只需要进行相反的动作并且取消订阅传感器更新
然后告诉HealthKit结束锻炼会话
此时普通后台规则会生效
让我们看看我们的motion管理器
它直接和Core Motion打交道并实现我们的侦测算法
要开始 我们在这要做的是
我们会创建一个到CMMotionManager链接
并且创建一个NS操作队列使采样工作在它之上
此时我们会询问watch是在左手还是右手
正手反手挥拍的区别
会完全取决于这一点
我们还会保持一个本地的计数为正手反手挥拍
并且标记我们最近是否见到一次挥拍
我们选择50赫兹采样率
创建一个RunningBuffer它应储存不多于1秒的数据
像Bharath早前提到的
设备Motion采样可最多以100赫兹的速率被提供
你通常想要采样率尽量低
同时能提供你所需的保真度
此外我们还会设置三个在我们的侦测算法中会用到的常量
这包括最小的挥拍角度
挥拍时最高速度的最小值
挥拍的最大安定速度
现在我们选择这些值
根据实验和我们收集的采样数据
但是一般你会发现收集数据和选择这些值的过程
是你应用工作量的一半
最后我们会在这创建委托引用
我们会用它来和UI通信
现在在我们设置了所有属性之后
我们会调整操作队列来反应一个连续队列
我们会用它来处理所有设备Motion采样
我想在这强调一下我们创建了这个操作队列
来确保所有的数据处理发生在主队列之外
现在我们还会创建这个函数
我们会用它来重置所有声明类
同时使UI归零
然后最后提供一系列方便的方法
我们会创建一些补充的更新委托函数
在这我们简单地实现对挥拍的计数
标记我们最近遇到了一次挥拍并让UI知道
现在让我们和Core Motion打交道
和往常一样我们要做的第一件事
是询问API是否在我们要运行的设备上被支持
然后我们告诉Core Motion用50赫兹的频率更新
最后我们订阅设备Motion更新
通过传递我们的操作队列
和一块代码用来响应所有进来的设备Motion采样
这整块代码要做的是简单地检查更新是否有错误
然后把它传递给我们的侦测函数
让我们看看我们的侦测函数将会做什么
如Bharath早前提到设备Motion给我们很多事
但是在这个例子中
我们只会用到重力和旋转率矢量
现在如你可能记得的
重力矢量只是简单的Core Motion的终点
重力单位矢量 不论设备如何移动了
旋转率是设备的旋转矢量
给我们弧度每秒
所以现在我们的算法要做的
是点乘旋转矢量
来自可能的挥拍和重力单位矢量
所以我们只分析motion中关于重力的部分
然后我们把结果标量加入
一个RunningBuffer保存不多于1秒的数据
一旦我们有了足够的内容我们分析这些内容
所以我们要用来分析挥拍的两个度量值
是累计的旋转角度和挥拍的最高速度
在这要获得累计旋转
只需要累加我们采集到的所有旋转采样的总和
在我们采集它们的那一秒中
然后你得到最高速率
你简单地获得最大或最小值取决于旋转的方向
继续我们的函数
我们会检查是否包括足够远
和足够快来判断为一次挥拍
如果是我们会选择正手还是反手
根据Apple Watch位置和这个标量的符号
最后在函数的结尾
我们会添加一个测试看看这次挥拍是否安定下来
这样我们可以拒绝一些反弹运动
像是用户的手臂回到位置上准备下一次击球
最后要结束这个类我们有stopUpdates函数
我们用来取消订阅DeviceMotionUpdates
当锻炼结束时
这结束了我们的基本采样应用
我们简单地描述了一个简单的用户界面
然后我们创建了一个锻炼管理处理和HealthKit连接
然后创建了motion管理器
处理Core Motion并实现我们的侦测算法
我希望你们都对如何使用设备Motion有了好的了解
这是新引入Apple Watch的
在我结束前
我想要强调使用这个API的一些细节
现在当你期待watch在一个固定的可预测的位置时
永远记得检查设备是在哪只手上
这个位置的区别会极大地影响你的分析
更进一步 当使用惯性传感器时永远记得
试着理解你是操作在什么参考坐标系上的
而且如我们早前提到的
设备Motion提供最高100赫兹的采样
我们永远希望能达到平衡
在提供你的采样率所需的资源
和你的应用所需的保真度之间
这很重要
因为锻炼会话的后台限制
要总结这次演讲
我们早前谈到了历史加速仪的性能提升
然后我们演示了如何使用计步器事件
来精确的给阶段加标签
提供准确的上下文反馈给用户
然后我们介绍了AppleWatch上的设备Motion
然后浏览了一个应用
来侦测正手和反手挥拍在一次网球锻炼中
如果你想知道更多信息
比如资料和采样代码
请查看这个链接
然后如你所见
该应用和HealthKit的新特性互动
我鼓励你们都去看看HealthKit演讲
来了解更多细节关于“watchOS 3的新特性”
此外Core Location有一些最佳实践需要你查看
我建议你们也去看看
最后我还推荐看看watchOS 3的其他资料
谢谢