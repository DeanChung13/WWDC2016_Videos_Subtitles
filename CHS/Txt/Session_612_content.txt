Apple Watch的游戏技术
下午好 欢迎来到Apple Watch的游戏技术
我希望你们有一次美妙的 WWDC
而且和我一样对新技术感到兴奋
iOS上的游戏抓住了用户的想象力
作为一个长时间的游戏者
我玩过很多游戏是由像你们这样的开发者创造的
听说Apple Watch游戏的潜力激起了你们的兴趣
所以今天我们很高兴能够展示watchOS 3的游戏
本场演讲涉及你开发一个优秀游戏所需要的所有方面
在这个最个人化的设备上
我们首先会向你展示怎么使用Apple Watch的多种输入
并向用户提供反馈
我们将向你介绍我们的框架
允许你创造醒目的2D和3D视觉效果
我们还会展示怎么集成社交游戏
和多玩家进入你的应用
最后
我们会展示所有开发过程中可以用到的工具
和一些最佳做法
watchOS提供一套丰富的工具来帮助你开始
这包括你可能熟悉的一些东西
比如WatchKit和丰富通知
今天我们会聚焦在新特性上
在WatchKit中我们提供新界面
这允许你在Xcode中用Interface Builder创建游戏
现可在Digital Crown中使用手势识别
来对游戏进行精确操作
还有触真体验反馈
是一个很好的方式使你的体验
更个人化和拟真
SpriteKit和SceneKit
是两个框架用来让你创造更丰富的视觉效果来取悦你的用户
它们提供地方来添加音频
并形成一个简单的基础你可以在之上创建你的游戏
Game Center提供API来添加社交功能
给你的游戏 包括成就 排行榜和多人游戏
但是现在让我用一个例子来展示什么是可能的
这是用我们的3D框架SceneKit创建的一个游戏
最开始你有一个组合含有不同形状的块
你的目标是旋转他们直到它们形成一个熟悉的轮廓
让我们看一会
现在玩家嬴了我们会再玩一轮
我会稍微说说这里发生了什么
我们用平移手势来控制左右旋转
当它在同一平面时我们会使用Digital Crown
来旋转它到合适的位置来获胜
现我们介绍了Apple Watch的游戏
并且展示了一个样本让我们深入看看如何使你的游戏
用更自然的方式和用户互动
Apple Watch是我们最私人的设备
我们通常近距离使用它通常用一根手指触摸屏幕
或者旋转表冠
你可以从加速仪中读到移动
或者你可以用触真体验引擎让它震动
当一起使用时这创造一种感觉
你在使用一个实体设备
这种操作和回应是有形的
让我们从触摸开始
在watchOS 3中我们提供四种手势
对游戏的不同互动工作良好
我会一个个介绍它们
点击是最简单的
你触摸屏幕 你可以选择一个目标
或者移动到一个位置
平移适用于滚动和在给定方向上的移动
想要浏览到另一个屏幕可以使用滑动
比如你的装备菜单你可以往回滑动来退出
长按是访问游戏主菜单的推荐方法
在这你可以提供选项比如退出
继续或者显示Game Center统计
现在我们展示了四种手势的例子
让我们谈谈我们提供给你来使用它们的类
对于点击 我们提供WKTapGestureRecognizer
对于平移WKPanGestureRecognizer
对滑动和长按是类似的
这些手势在InterfaceBuilder中可用
当你进入对象库
并且搜索手势你会找到它们
如果你选择一个你可以把它加入你的事件
在我们的例子中我们加入了点击 滑动和平移
这些手势有多种选项可以配置
比如使它成为向右滑动或向左 向上 向下
这些其他选项配置多种行为
如果你使用多种手势你应该看一下最后这个选项
因为指定优先级很重要
因为手势可能冲突
我说的冲突是什么意思？
一个右滑动
也可以被认为是一个点击再加一个平移
所以开发者需要决定谁有优先级
在游戏中一个点击和平移
表示直接和你的游戏世界进行的互动
我们应该让它们比滑动有更高的优先级
这会使你进入装备
回到Interface Builder你配置这个必须首先失败域
在滑动手势中
你设置点击和平移这反映优先级
现在我们给storyboard进入了手势
你需要实现一个行动方法
这个行动方法获得相应的类
有很多可以读取的属性
比如在对象中的位置和对象边界
还有最后这个 状态
我认为最好用一个代码来展示它
所以在那个我演示了的解迷应用中我们有一个handlePan行动
我们做的第一件事是我们获得位置和边界
然后我们查看状态如果我们已经开始了平移
我们要设置旋转
如果我们在一次平移中间无论它改变 结束 取消
我们都要更新它
我想用一些需要考虑的事做为手势这部分的结尾
因为用户戴着Apple Watch
每个手势都要用到两只手所以最好使它们很短
还有一个需要注意的重点是和其他设备相比
你的手指和屏幕相比相对较大
请考虑到这点
并确保当你互动时内容还是可见的
最后你知道的我们的用户界面指南
它推荐我们使手势容易发现
你应该遵守这些
现在你们中的很多人可能对手势熟悉
但是我们谈谈一些Apple Watch特有的东西
即Digital Crown
界面指南说它便于选择和滚动
但是做为玩家 这使我们回到街机
有一个转盘可以转动来旋转宇宙飞船或移动一个踏板
或者在这个例子中我们可以来回移动一个球
直到我们决定我们想把它放在哪
当我们准备好时我们可以点击来让它落到指定位置
利用这个表冠相当容易
你访问crownSequencer它在你的主界面类中可用
有一些属性你可以读取
比如每秒旋转数或者我们是否空闲
或者你可以定义一个委托
这个委托提供两个方法
CrownDidRotate获得rotationalDelta
rotationalDelta表示表冠的改变
从这个方法最后一次被调用起的改变
如果它正远离你 该值为正如果它正接近你 该值为负
不论Apple Watch是在左手还是右手都是这样
当表冠停止旋转时调用crownDidBecomeIdle
扼要复述一下 我们认为Digital Crown有利于游戏
而且很容易采用
我等不及看到你们能创造什么新游戏
用这种新的控制
现在加速仪可以用来增加其他互动
比如给弹球游戏添加倾斜
或者给台球游戏添加旋转
你通过CMMotionManager访问加速仪
这里有一些要考虑的
你可能知道
当你抬起watch屏幕是可见的
但是当你放下手臂时屏幕变成空白
当这发生时会把应用放入后台
所以你移动手腕的话屏幕可能变空白
所以在游戏中你要考虑到这点
一个建议是使用后台处理
你可以调用NSProcessInfo中的performExpiringActivityWithReason
来给你的游戏循环一些时间来继续
并给你的用户一个平滑的体验
让我们用一个例子看看怎么在代码中使用它
我们首先要访问CMMotionManager单例
我们在这把它设为一个属性来稍后使用它
在主界面的willActivate我们询问是否加速仪可见
如果可见我们配置一些事比如更新间隔
我们要求motionManager开始发送更新事件
我们提供一块代码来接收这些事件
我们可以把它发送回我们的游戏给用户提供反馈
当我们结束时我们应该告诉motionManager停止发送更新
这样可以保存电池寿命
让我们回顾一下
我们觉得加速仪可以很好地增加其他互动
请注意屏幕有可能变空白所以考虑使用后台处理
并确保在需要时使用它
并在完成后停止监听
让我们来看看触真体验技术
在iOS上你只能让你的设备震动
在Apple Watch上你可以创造更私人的体验
通过使用不同的触真体验模式
每种触真体验包含一个震动和短音频
通过使用触觉和听觉
加上屏幕上的视觉线索
你可以创造更拟真更有趣的游戏体验
我们提供九种触真体验反馈
我想通过一些例子来讲解在你的游戏中可以怎么使用它
这是通知触真体验
这个品红色的三角形表示触真体验震动的时间
这个波形表示和它一起播放的音频声音
让我们听听它
如这个例子所示
通知触真体验对警告人们很好
当重要的事发生时
需要他们的注意
如果你采用丰富通知那么你可以免费得到它
但是如果你在游戏中探索世界
你可以用它告诉你的玩家你的村庄被攻击了
方向触真体验 上和下
被用来警告用户当一个重要值增加
或减少且数量显著时
在这个例子中
你的健康值很低
或者当你喝健康药剂
你感到好一些
还有一个声音是开始一个行动
比如开始一次竞速
或者当你想暂停时
成功触真体验提供确认音调
这可以用在
你赢了
或者你失败了请再试一次
最后一个例子有一个很微妙的点击触真体验
这种触真体验有一点特殊
如你所见 它比其他的更小声更短
实际上 我不确定你是否能听到音频但是让我们试试
这种触真体验提供感觉
在一个指定的增量或间隔点击拨号的感觉
在游戏中可以用在开一个箱子的锁
或者给用户提供反馈他们撞上了障碍
现在我已经给出了一些例子
我想要指出要采用这些触真体验事件很容易
你调用play函数然后传递定量
指定你想要的种类以及你想要唤起的感觉
让我用一些要注意的事以结束触真体验的演讲
Taptic Engine和传统的音频不同
传统音频中你你一次只能播放一个触真体验
还要注意这些效果是用来为重要事件引起注意
他们的有效性会减少
如果你不断震动watch
所以请有节制的使用它
我认为你们会有很棒的体验
让我们回顾一下我们讨论了手势识别
和把它们用在游戏中的一些想法
我们展示了如果使用表冠
来创造引人注目的游戏
我们讨论了如果把加速仪包含到你的应用中
最后我们讨论了触真体验反馈
使你的游戏更拟真
现在我想交给Fatima
来谈谈我们的图形框架谢谢
谢谢Christy
嘿大家好我叫Fatima
在这部分我们要谈谈我们的图形框架
SpriteKit和SceneKit
你用来在Apple Watch开发很酷的游戏
什么是SpriteKit和SceneKit？
SpriteKit和SceneKit是Apple的2D和3D框架
针对游戏和图形
你可以在游戏中用任一个框架
或者把它们组合到一起
它们使用起来很简单
在Xcode中有很好的集成工具和编辑器
它们在macOS iOS和tvOS上可用
今年它们也在watchOS上可用了
在Apple Watch上
SpriteKit和SceneKit第一次来到你身边
GPU加速 实时渲染
这允许你创造非常动态的内容
还使你的游戏很有互动性
让我们来看看一些很酷的特性
你可在Apple Watch上使用
让我们从动画开始
你可以在SpriteKit中用SKAction创造2D动画
你可以在SceneKit中用SDNAction创造3D动画
来使你的游戏互动性好
你可以用动作来移动 旋转和缩放你的物体
通过添加一个或一系列动作
来创造更复杂的动画
接下来我们有颗粒
你在SpriteKit和SceneKit中都可创造颗粒模拟
来为游戏增加有趣的效果
使用颗粒模拟你可以模拟火雪 雨
和很多很多其他有趣的效果
接下来我们有物理定律
SpriteKit和SceneKit都集成了物理定律
来使你的游戏更有趣
你可以在对象上启用物理定律
然后定义属性比如质量 速度和摩擦力
这些属性会定义你的物体如何移动
他们对碰撞有什么反应对力有什么反应 在你的模拟中
接下来我们有光照
你可以在游戏中加入光源
光只是你场景中的另一个节点
所以你可以给它添加动作来到处移动它
有一个很酷的光照的特性
是你可以自动用SKTextures生成普通映射
接下来我们有摄像机
SpriteKit和SceneKit都有摄像机供你使用
如果你决定使用摄像机
那么你将从摄像机的位置渲染你的场景
所以摄像机是你视口的中心
而摄像机就像你场景中的其他节点一样
你可以到处移动它通过给它添加动作
接下来我们有形状和文本
文本可以做为一个节点加入游戏
所以现在显示文本
以及在它之上应用动作和物理定律很容易
我们还有形状节点
你现在还可以在游戏中创建动态的几何形状
SpriteKit和SceneKit中还有可编程着色器
你可在SpriteKit中创造着色器
你可在SceneKit中创建着色器修改器
来让你的游戏元素获得更加定制化的外观
现在我们看了一些你可以使用的很酷的特性
让我们看看SpriteKit和SceneKit在Apple Watch上有什么不同
我会从SpriteKit开始
在SpriteKit中我们有SKView
我们用来显示我们的场景
我们的场景可以包括很多节点
比如我们有SKSpriteNode来添加精灵
我们有SKLightNode来添加光照
我们有SKEmitterNode来创建颗粒系统
在watchOS上有些事不同
首先我们没有SKView
我们不得不用WKInterfaceSKScene来显示我们的场景
我们也没有CIFilters但是我们能达到相同的效果
使用SKShader
我们没有可定位音频但是我们可以播放声音
就像其他平台用SKAction playSound
最后我们没有SKVideoNode
但可用WKInterfaceMovie来播放视频
这张表总结了SpriteKit的不同
对SceneKit我们几乎有一样的区别
我们有WKInterfaceSCNScene代替SCNView
我们没有可定位的音频但是我们有标准音频
我们无法访问CIFilters
但是我们可以用着色器修改器来实现相同功能
所以让我们用一些例子来看看为Apple Watch开发游戏
为一个已有的iOS游戏
在这我用iOS上的SpriteKit模板
在左边我可以看到项目的文件
我们可以看看游戏场景
我们在这可以看到我们用了一个很简单的场景
还可以看看GameViewController
在这我们可以看到我们用SKView来显示我们的场景
现创建一个针对Apple Watch的游戏
我们要做的就是点击文件新目标
选择watchOS下的游戏应用模板
给它一个名字然后点击完成
这个模板为我们创建了两个文件夹
应用文件夹包括我们的storyboard
和扩展文件夹含有我们的InterfaceController
和我们的游戏场景
让我们看看storyboard
这是storyboard我们可以看到
在中间我们有我们的界面对象
我们的界面对象在我们的对象库中被选择
在这我们可以看到我们有选项
在选择SceneKit场景显示SceneKit内容
和SpriteKit场景显示SpriteKit内容间
我们的界面对象还有一个在界面控制器中定义的出口
我们可以用它来显示我们的场景
让我们来看看它
这就是那个界面控制器
让我们来仔细看看它的代码
在这我们看到我们的界面对象
在唤醒 有语境中我们可以看到我们在载入场景
和iOS中做的一样
最后我们使用界面对象
显示我们的场景就像在iOS用SKView做的一样
这就是你要创建一个AppleWatch游戏所需要的全部步骤
为一个已经存在的iOS游戏在Apple Watch上创建一个游戏对象
现在我将有请Christy上台介绍社交游戏
谢谢Fatima
让我们谈谈Game Center
如今的游戏鼓励参与
和与朋友竞争
Game Center使分享成就和分数
甚至是一起玩游戏变得容易
关于Apple Watch多人游戏我们会集中在回合制游戏
回合制游戏和Apple Watch非常搭配
它支持短的互动
我可以接受 不需要两个玩家都在场
我可以进行一轮当我完成时我可以把它交给你
你会得到一个丰富通知
你可以有空时进行一轮
有很多如何实现一个回合制游戏的细节
我们去年已经谈过了
但是今天我们会强调什么是Apple Watch特有的
关于其他细节请看我们的资料
或者观看以前的演讲
我还想说一些新特性
关于今早覆盖的iOS 10中的Game Center
如果你还没有看过它我鼓励你看一下它的视频
来开始创造一个回合制游戏
让我们谈谈授权
这比iOS简单
你不需要在Apple Watch上输入密码
当你在手机上登录
自动在Apple Watch上登录
如果你熟悉iOS上的Game Center
你可能知道你会获得视图控制器
并且在一些情况下你要显示
我是说在iOS上在Watch OS上这不是必须的
让我们看看代码
对你们中不熟悉Game Center的
有GKLocalPlayer单例是我们的API的焦点
在这个例子中我们发送一个授权处理器
它被调用
当授权完成无论成功失败
如果你成功你可以给用户反馈他们他们是否成功登录
并且可以开始游戏
现在我们授权你可以新建一个回合制的匹配
这里一个重要的决定是如何和其他玩家匹配
最简单的方法是让GameCenter为你选择其他玩家
这被称为自动匹配
或者你可以载入一个最近玩家列表
通过程序邀请一个
让我们从自动匹配开始
你创建一个GKMatchRequest
你把它传递给寻找方法
GKTurnBasedMatch类的方法寻找
当它返回时会给你一个新的回合制匹配的实例
你可以用来储存你的数据和玩游戏
请注意这可能会是新匹配
或者 若Norman创建了一个游戏并且完成了他的回合
我可能会参加他的游戏的一个空位置
你的游戏需要考虑这两种情况
让我们看看代码
你创建你的匹配请求
你设置参数像是最大玩家数量
你调用查找
当它成功时你可以开始游戏
就是这么简单
通过程序邀请几乎是一样的
你只需要设置另一个参数接收者
这来自你选择的玩家列表
然而要这么做你需要访问你一起玩过游戏的玩家的一份列表
我会展示一些示例代码
这向你展示如何访问最近玩家列表
一个好的地方来假设你有一个类
有一个玩家选择器让你在列表中挑选
在唤醒函数中
调用localPlayer单例上的loadRecentPlayers
这假设你以前授权过你的主界面
我们调用loadRecentPlayers你得到一个玩家列表
你最近和他们一起玩过
在手机 平板或watch上通过自动匹配
有一件重要的需要提到的事是一旦你转入并保存了它
你需要选择你的对手
为了帮助你显示玩家清单
并给你开发一个回合制游戏的开始
我们创建了一个应用例子
HelloGameKit实现了回合制游戏的基本功能
它基于新的SpriteKit模板
作为一个红利它会展示怎么使用手势识别
我想简短的介绍这个例子
当你启动应用时它显示这样一个屏幕
并且说授权
当授权完成时它在顶部显示你的名字
在底部给你选择对手的地方
中间的计数器对你进行的各种点击计数
记录并保存到游戏模型中
这是个简单的事在回合制游戏中保存错误
现在你已经点击了在底部选择一个对手
这会带来一个玩家选择器并载入最近玩家列表
让你选择其中一个
它还给你选项来自动匹配但是我想和Alan玩
现在他在和我玩
如果我想要访问匹配列表
我可以向左滑动我会得到匹配浏览器
在这我可以创建一个新的和Alan的匹配或者选择一个已有的游戏
我将返回游戏
最后我可以用长按结束我的回合
会把游戏传给Alan他可以进行他的回合
这就是HelloGameKit
你可以在这个网址下载它
点击资源标签来找到这个例子
让我们回顾一下 watchOS中的Game Center给你授权流水线
这是一个可编程API但是我们给你了应用例子
有UI包括所有你需要做的事
我们希望这会给你一个好的开始
有了这些
我想要把讲台交给Tyler来谈谈工具和最佳做法
谢谢Christy
我们已介绍了Apple Watch可用的一些框架
让我们谈谈工具
你可能熟悉我们丰富的游戏工具
已经存在在Xcode中
我很高兴告诉你们这些工具都对你们可用
对你的Apple Watch开发
这包括我们的场景编辑器它处理在代码中设置
和布局你的场景
并把它移动到Xcode中的视觉编辑器
而不是不断编辑和迭代你场景的一个位置
你可以看到并控制你的节点的位置
你还可以容易地控制你的场景的层次
用场景概览视图
并且创建和修改节点的物理主体
不需要涉及任何代码
现在我们的场景编辑器还包括一个内置的动作编辑器
让你可以容易地创建 修改
和预览复杂的可重用动画就在你的关卡中
所以如果你在创建一个复杂的剧情剪辑来介绍你的关卡
或者你会在你的代码中重用的一个角色动画
有了动作编辑器这都容易做到
当你开发你的游戏时
你会发现SpriteKit和SceneKit强大的颗粒引擎
在给你的游戏带来生命时扮演重要的角色
为你的游戏创造完美的颗粒很困难
如果你无法看到它
幸运的是我们提供一个灵活的工具
来创建和可视化你的颗粒
你被允许访问颗粒的大量属性
你修改它们后就能马上看到效果
我们还有工具帮你在AppleWatch中保持优秀的性能
这包括我们的纹理地图集
当你把图片放入Sprite地图集
我们会自动旋转并重新定位它们
来形成单一的图像
这减少你的游戏需要使用的绘制调用次数
还有很好的一点是不需要对你的代码进行任何改变
你还是可以在这些纹理上操作因为它们是单独的文件
当你的游戏运行时
我们现在提供帧数每秒性能表
在报告的顶部你获得很多实时统计
包括当前的帧率
以及GPU使用情况 来看看你GPU的哪部分被使用的最多
CPU和GPU的帧时间
这会帮你找出性能瓶颈是CPU或GPU
除了实时统计我们还提供时间轴历史
你的CPU和GPU帧时间历史
它会分解CPU帧时间到独立的部分
所以你会看到多少时间用来渲染
或者运行更新循环或者评估物理动作
以及多少时间是空闲的
当你的应用暂停时你可以在历史中滚动
在应用性能历史中滚动这样你能看到它是如何
随着你在游戏中的进展而发展的
如果有特别感兴趣的你可以深入
并检查它的详情并得到精确时间
有一些最佳用法你可以使用
来确保在Apple Watch上获得优秀的性能
一个好的减少电池使用的方法
是只有需要时才更新你的场景
SpriteKit和SceneKit会自动跳过渲染
如果我们侦测到你的场景中没有变化
如果你有大的资源在你场景开始时载入它们
这样你就不会因为载入这些资源经历中断
你希望你的整个游戏过程流畅
你需要有一个帧率的目标
会提供给用户一个一致的体验
通过明确设定你的界面想要的每秒帧数来这么做
如果你发现你确实面临性能问题
有一些方法你可以使用来解决性能问题
首先减少任何时间你的场景显示的颗粒数
你可以试着减少资源的细节
如果它们离得很远或者被大幅度缩放了
这样做的好处是你通常不会看到任何
在你的游戏视觉保真度上因为进行这些减少而造成的改变
如果你还是面临问题减少你场景的复杂度
直到你找到性能和内容的好的平衡点
你在Apple Watch上开发游戏时
你应该时刻记得一些设计考量
在整个开发过程中
你不应该简单地照搬iOS游戏体验
我们希望你能重新思考体验
Apple Watch提供的是轻量的互动
用户喜欢一眼就看到游戏的进展
你应该围绕那些忙碌的人设计互动
你还想要一个简明简单的界面
避免显示太多信息或者同时在屏幕上太忙
你可能把互动分散到多个屏幕中
这样可以最大化屏幕空间
如果你有按钮或者可触摸目标
让它们足够大这样你的用户可以舒服地和它们互动
你还要保持应用视觉的连续性
它的意思是从一个应用进入你的
应该有一致的体验
它的一部分是选择一个支持你的游戏商标的色调
在整个游戏中使用
我们还建议当可能时在游戏中有一个黑色背景
因为黑色会
与Apple Watch面板无缝混合
创造出一个无边界的屏幕这一美好的错觉
你知道了一些Apple Watch可用的优秀输入
优秀的框架你可以用来开发游戏
丰富的工具可以用在开发流程上
我们等不及看到令人兴奋和有趣的游戏
你们今年将在Apple Watch上开发
想了解更多信息请访问开发者网站
你可以在演讲编号612下找到我们
这周之前的演讲提供了很多有用的信息
包括“SpriteKit的新特性”
Game Center中的新特性SceneKit渲染进展
watchOS快速互动技术
如果你想要深入任何一个我们今天涉及到的领域
我们强烈推荐你看一看
谢谢祝各位在接下来的演讲中过得愉快