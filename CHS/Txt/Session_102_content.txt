下午好欢迎来到2016全球开发者大会
自我们上次相聚 已有一年时间且发生了不少事情
新出了tvOS然后是四个Apple OS平台
其中很多拥有其App Store
并且我们的所有平台都为其自身的独特体验进行了优化
但他们共享了相当多的通用技术和API
令你容易将你的应用带到所有四个平台
通过同时衡量个体特性
我们的专家工具链对于这四个平台是相同的
他们共享大部分的框架和库
还有基本的编程概念和语言
也是相同的
今天我们要宣布很多新的API和技术
你将可以利用到的
你会找到更多的方式来表达你的观点
你甚至可以瞄准更多市场中的更多用户
特别是我们的iOS X对于开发者来说变化巨大
事实上 至少如果你看下我们今早宣布的 iOS
你会发现我们开放了iOS的整个用户体验
给开发者 涵盖了所有东西从通知
到电话 信息 地图甚至是Siri
一个重要的概念我们用来实现这个那就是extension
并且你可能记得我们两年前介绍了extension
其代表了一个日益重要的机制
因为他们允许你从应用中扩展开来
并参与到我们的系统功能性
它们允许你安全地定制我们的OS
通过运行短生命周期的沙盒服务沙盒服务按需启动
我们发出的产品已支持很多extension points
并且今年我们会添加更多
允许你更深入的连接到我们的OS和应用
也许最令人兴奋的新extension point就是创造iMessage App
我将交给Darin Adler来给你讲述它的所有细节
新信息用起来非常好
并且我希望你们都会这样
iMessage App是你如何变成它的一部分
现在 正如Andreas所提到的iMessage App是extension
意味着它和其他extensions一样
你将其包含到App Store里的应用上
但对于iMessage Apps也有另一个选项
你可将它们包含到iMessage App Store
也就是从信息里直接获取
看起来像这样
现在 当你通过iMessageApp发送交互信息
你会在上方角落看到应用的图标
但甚至更重要的是
如果你发给交互信息的那个人
还没有这个应用
他们将得到这条链接上面写道获取应用名称
如果你点击该链接
这会带着你获取或者购买这个应用
因此这是个令人惊异的方式来令你的用户
传播你的应用 从一个人到另一个人
现在 如果你想创建一个便签应用这真的很简单
根本不需要编写代码
你只需为应用的图标准备好所有的图像素材
便签的图片素材
把他们放进Xcode建立 然后提交到iTunes Connect
如果你想编写一个更为复杂的应用
并利用iMessage Apps里的所有力量
你用Swift编程并使用UIKit就像其他的extensions一样
还有一个新的Messagesextension point
这个Messages extension point中的类给你访问权限
你需要一切都在Messages App里
因此有一个对象代表你发出的信息
有一个对象代表
此信息作为其中一部分的整个对话
甚至有一个对象代表一个叫会话的东西
让你将信息汇集在一起
这是一个很好的方式来创建协作性的iMessage Apps
现在 所有这些已完成都没有妥协掉私密性
信息就是以此出名的
你的应用没有除当前对话外的任何访问权限
应用之外正在发生什么
它甚至不需知道
谁参与了 你发送给谁
因为保持了私密性的完好无缺
现在适应性设计对于任何iOS app开发都很重要
这对于iMessage Apps甚至更加重要
那是因为信息运行在
所有种类尺寸形状不一的设备和适应性
所以它运行在iPad上它运行在iPhone上
它运行在iPad的slide over里 竖直和水平
iMessage Apps也需要它
对于iMessage Apps有额外考虑因素
就是当它们运行在Compact Mode
底部键盘
并且你能在它们间滑动切换或者你能调用相同的应用
并将其扩展到全尺寸
有时应用会完成这个操作有时用户完成该操作
适应性设计对于这个体验也很重要
所有你所需开发iMessagesApp的东西都可用了
因此你现在就能开始了
SDK有我谈论的所有东西
所有来自messagesextension point的东西
并且模拟器甚至有一个新的特殊版本的信息
专门给开发者的
来让你看到对话的双方
并且试验你的iMessage Apps
来看它们是如何发送和接收的
现在Adele Peterson将向你展示如何将这些在iOS X中集合起来
谢谢 Darin
正如你今早所见 我们在迪斯尼的朋友已经做了一些很棒的便签
我将向你展示他们是如何做到的
在Xcode中组合起一个便签应用
现在 这仅将花一分钟因此即使我现在开始一个新的项目
其实我几乎都要完成了
通过选择便签包应用模板
我会给它一个好的名字像是《星球大战》
保存它 且选择便签资源类别
现在 我想要便签有一个好的图标
当我在信息应用抽屉看他们时
我将从拖拽进我的图标开始
现在我可以选择我的便签包并把便签拽入
好的 让我们试一下
信息现在模拟器中
对于你在iMessage Apps中试用你的便签很容易
好的 让我们运行便签包我喜欢这个8-bit的机器人
所以我可以试下发送一个
并且我甚至可以试验剥离
并且拖拽一个便签到另一个信息
看起来不错 如此轻松就做出一个便签应用
现在看看iMessage Apps
我这有个冰淇淋应用
我女儿很喜欢这类的应用
可以让她设计和创造事物现在我要做iMessage App
为她和她的朋友们制作冰淇淋便签
在Compact View中 你有已经完成的冰淇淋便签
并且当我点击加号 应用扩展开并显示冰淇淋创建UI
我将从选择一个筒身开始
我将会选择它并发送
现在模拟器显示
会话的发送方和接收方
所以你甚至不需要使用两台iOS设备
来测试你的iMessage App
在这个视图中 我实际是John Appleseed并且我将会把筒身发送给Kate Bell
让我们从会话的另一方来看一下
在这里Kate已经收到了筒身
你可以点击此信息 启动app
添加一些冰淇淋球并将其发回给John
然后在会话的另外一边
你接收到这个
你点击此信息 加上冰淇淋顶
并将其发回给Kate
现在 就如看起来的一样美味
我不想要我的整个会话
被这些半成品冰淇淋甜筒所占据
其实有个更为简洁的方法来创建这个协同性的iMessage App
如果我为每一个信息使用相同的MS会话
那么早前创建冰淇淋的步骤将被取代
通过紧凑简洁的描述
并且你将只会看到后者也就是最新的冰淇淋信息
我将在Xcode里做出变化并向你展示它看起来什么样
让我切换到冰淇淋项目让我们看看
这里是我的部分代码创建了MS message对象
我将会拖拽进
我将会拖拽进此代码
这段代码是看会话中有没有选定的信息
那是你点击该信息时所得到的
并且它全屏启动应用
因此如果有一个选定的信息
我们会使用该信息所关联的会话
我们会传入一个新的MS会话
让我们试一下
好的 现在我们再次启动这个应用
我们点击加号按钮 选择一个筒身将它发送给Kate
加上一些冰淇淋顶 发回给John
然后将它完成 并发回给Kate
所以现在你能看到那些描述
描述此过程先前的步骤
并且你不再有半成品的冰淇淋了
在完成的产品的上面
这就是你能利用iMessageApps所能做的一些小尝试
接下来 Robby Walker会跟你们谈谈Siri
谢谢你 Adele
五年前
我们发布了SiriiPhone的智能助手
从那时起 Siri已经和人们交谈几千亿次了
如今 Siri在五类设备上都可用
并且支持36种本地化语言
Siri也有很多新的特性和改进的核心体验
一个很酷的例子 在iPhone 6s和iPhone 6s Plus上
你可以立即开始和Siri说话当你按Home键的时候
以几乎零毫秒的延迟
多亏了我们硬件和软件团队之间令人惊奇的合作
但是当然 直到今天
有些很重要的东西一直缺失那就是应用
所以我们非常兴奋地在iOS上启用初版的SiriKit
我们相信对于人们的最佳体验就是使用他们喜欢的应用
你们所有人已经创建的应用
有着SiriKit
人们现在将能够同这些应用进行交互
通过一个崭新的 谈话式的方式
我会谈谈如何让你的应用与SiriKit一起工作
来提供一个很棒的 谈话式的体验
Siri所做的第一件事是理解用户说了什么
采集音频并将它转换成文本
然后 Siri理解用户是什么意思
采集文本并将它转换成我们称之为intent的东西
依据intentSiri接下来采取行动
并且提供反馈 同时通过视觉和语音
你的应用将提供三样东西
第一个是帮助Siri进行理解的词汇
第二个是应用逻辑你的核心功能
并且当然了 一个很棒的用户界面
现在 我们设计了SiriKit以便Siri可以处理对话
并且你的应用处理功能
这么做最棒的是它意味着采用SiriKit会难以置信的容易
并且你的用户们可以期待一个连续的高质量的体验 它非常自然
感觉像是一个谈话而不是一个命令行
让我们深入一点
你的应用的一个角色是提供词汇
有两种 第一种是应用的词汇
这是面向你应用的任何用户都应该知道的术语
像是UberX或Pinboard
另一种是用户词汇
这些术语对于你应用的个体用户来说更详尽和重要
像是他们的联络人姓名或是照片相册的名字
你的应用的主要角色是提供应用逻辑
它在三个重要时刻伴随extension而来
第一个是帮助Siri理解用户意图的参数
第二个是帮助Siri展示给用户将会发生什么
如果当他们确认的时候
第三个 当然了 就是掌控此意图
来完成用户想完成的
并且在此会话中Siri展现图像给用户
你可以选择性提供第二个extension来配置这些
以便在使用Siri时 你的应用
仍然像是在其他地方用你的应用一样
让我们看一个 叫Hologram的信息应用集成
Hologram是在遥远的银河系发送信息类软件中
排名第一的应用
假设有人跟Siri说
“发一个hologram给Obi-Wan 你是我唯一的希望”
现在 Siri的工作是提取音频并将其转化为文本
但Siri需要你应用的帮助
Siri自己不知道Obi-wan是一个重要的用户
还是你用户生活中一个重要的人
所以通过提供这部分的词汇给Siri
你可以确保Siri理解你的用户说了什么
接下来 Siri会进行理解用户正试图做什么
在这个案例中 是发送一个重要的信息
并且Siri也将试图理解参数
像是收件人和内容
Siri将所有这些信息打包成一个结构化的对象
一个很好 简洁的对象
你的应用不需要担心数不胜数的方式
某人可能会表达同样的观点给Siri
它是不是不同的短语或者多步骤的交互
那些都被搞定了所有你需要操心的就是
这个相当简单的对象
然后SiriKit会把这个对象传递给
extension来帮助参数的解析
例如 可能你的app知道用户说“Obi-Wan”
但其通常指Old Ben Kenobi
你可以教SiriKit来更新此intent
然后就是重要的时刻了
现在要实际处理用户的intent
SiriKit再次将这个对象传给extension来进行处理
在这个例子中 你会发送信息
你会进入一个逃生舱
翻滚过沙丘 对付一些Jawa
你会为你的用户们完成这些
与此同时 Siri会提供
一个默认的用户界面给这个交互
如果你想 你也可以把你的应用体验带进Siri
以便让你的用户们感觉更熟悉
就是这样
这就是你的应用必须得做的三件事
因为SiriKit会处理会话
处理这个会话实际上意味着很多
Siri行为不一
取决于某人是如何开始和Siri谈话的
所以如果你拿着你的电话按Home键
看着你的屏幕
Siri将会提供更多视觉反馈减少大声说出来的东西
但若你说“Hey Siri”或你在车里用CarPlay
那么Siri会展现更多东西
抱歉 是说更多而展现更少
SiriKit由extensions和NSUserActivity所支持
这些相同的技术还支持了正在增加的OS集成
本周你会听到更多关于它们的消息
今年 SiriKit会在六个领域连接到应用
在每个领域中会有多于一个的intent
来提供一个完整的 会话式的体验
例如 在Messaging里你可以发送或者搜索信息
在支付里你可以请求或者发送支付
并且SiriKit会对所有Siri语言可用
这可是意义重大
当我之前说Siri会处理会话的时候
我实际的意思是Siri会处理会话
用所有36种本地化语言
所以你的应用不需要担心这些
我们非常兴奋想看到你们将会创建什么其他我们认识的人也是
Siri 跟应用问好
我很快地跟它们成了朋友
籍此有请ChrisLattnert谈下Swift
好的
谢谢 Robby
让我们看看Swift有什么新特性
很容易忘记我们推出了Swift
并在不到两年前发布了它
在这么短的时间内
你们已建立并提交逾100,000个应用到Apps
包括这些响当当的应用
现在 Swift在企业中也同样流行
举个简单的例子
IBM已经开发和部署了数以百计用Swift写的应用
现在
人们喜欢Swift有很多原因
其中一个就是我们不到六个月前把它开源了
从那开始 它变成
GitHub上下载量第一的语言项目
观看量排名第一的
最喜爱排名第一的 并且它保持在前列
我想对我而言 比这更棒的是
我们有很多的新人参与到这个项目
我们现在有数以百计的新贡献者通过开源参与
且我们已处理了数以千计的投票请求
这反响真是很大
我们将Swift开源的一个原因是对于我们很重要的是
我们想看到它到处都是
例如我们认为Swift对于服务器很棒
所以我们把它迁移到Linux社区认可了
在很短的时间内
他们已经开始将它带到其他流行的平台像是FreeBSD
Android 甚至Windows
为了帮助Swift进入所有这些平台
我们启用了Swift Package Manager
Package Manager是一个很好的方式来建立 共享和重用
跨平台的package
它可以生成一个Xcode项目文件
甚至在像是Linux这样的平台上本地化编译项目
另一个关于Swift开源很棒的事
是你能参与到语言的设计本身
Swift的进化一直是个很棒的体验
有着激烈的兴趣
在邮件列表上简直疯狂的邮件数
这太叫人吃惊了
现在 我发布了一个公开的路线图包含了每次发布的更新
并且我们征求意见 讨论我们可能走的不同方向
来共同向前推进语言的发展
然后我们像一个社区一样一起公开讨论这些
我们将它们变成正式的提案
目前为止 我们已经有了超过100个提案 来推进Swift发展
这仅仅是在六个月内
这是个很棒的标志来说明Swift发展的多快
但是它也说明另一个重要和有趣的点
尽管它使用广泛
Swift仍然是个相对较新的编程语言
现在 正如你所想的
我们选择快速发现Swift语言中的问题并修复它们
因为我们不想永远被这些问题所困扰
我们正在开发Swift将其作为下一代很棒的编程语言
所以我们想要它对将到来的十年来说很好用
现在的问题是对于有些开发者
编程语言发生在深层的变化
可能会令你感到担忧
并且随着Swift来到新的平台
和Swift Playgrounds带来的新类型用户
这会变成一个甚至更大的担忧
以此为背景让我们看看Swift 3的新特性
我们在12月宣布了Swift 3
作为推出Swift开源的一部分
我们一直在完全开源地开发它
Swift 3的第一特性和第一目标就是
克服这些早先成长期的痛处
并且将Swift转变成一个稳定且成熟的平台
我们可以保持与语言未来版本的兼容性
不是吗
因此 我们在关注语言的核心要素
并使工具和开发体验非常棒
在Swift里你有很多的方式可以看出来这个
给你举个简单的例子对于Swift 2的一个常见抱怨是
一些Cocoa中的API在Swift中感觉不是自然的
Swift喜欢清晰透明 且致力于定义模板文件
在Swift 3中Cocoa APIs有精致的感觉
你可以说他们完全Swift化了
我们是通过一些不同的初创完成的
首先 我们坐下来努力思考什么造就一个很棒的Swift API
我们把它写成文档并放在Swift.org上
然后我们采用那些规则
并把它们写到Swift的重编译器
所以它会自动把这些规则应用到Objective-C API
把它们引入到Swift
但是Swift所做的远不止命名
命名是个相当困难的问题 不过它做的远不止命名
举个简单的例子若你看foundation
你会发现全新的Swift本地化数据类型
Date就是一个例子如果你比较Date和NSDate
你就会发现它提供了恰当的值语义
它有两倍快的速度去传值
由于减少了免于MalCon 的通信拥有40倍快的速度去变化
现在 这些例子到处都是随着Calendar变为了Calendar
Global Constant变成了scoped enum
Date Components NSDate Components变成了一个恰当的值类型
所有东西都感觉那么的快速和敏捷
如果你不看foundation
dispatch是另一个关键API我们一直在用的
但是它提供的是低级别 C风格的接口
Swift 3中Dispatch有一个重要的革新
有个漂亮的面向对象的API
并且它遵从所有最好的命名规范
从一个很棒的Swift API期待的
Core Graphics是另一例子
这里是Swift 3中典型的core graphics代码
它精致 漂亮并且就如你所期待的一样工作
现在Swift 3有很多很棒的特性你能学足一周
Swift 3在Xcode 8中可用
并且Xcode提供了一个很好的迁移助手
来帮助迁移你的代码从Swift 2到Swift 3
甚至更好的是 Xcode 8也包含Swift 2.3
这意味着能迁移到Swift 3语法
当时机对你恰当的时候
这就是我今天要讲的全部
谢谢 我将交回给Andreas谈谈下一个大事件
iPad上的Swift
谢谢你 Chris
Swift另一个让我们兴奋的方面是它如此简单和易接近
它不仅对于开发应用和服务器部件很棒
它作为第一个编程语言来学习也很棒
事实上 我们认为这超级重要当我们设计Swift时
那也是个我们明确的目标
从Swift推出开始 我们介绍了Xcode Playgrounds
一个交互的环境你可以快速迭代你的代码
而且有经验的开发者用我们的Xcode IDE很棒
我想要极度扩展我们的关注点并包含kits
为初始学习如何编程的人
所以今天我们要宣布Swift PlaygroundsiPad的一个新app
你已经看了今早keynote上的一个展示
它与Xcode技术匹配但是它从底向上
为了学习和教授如何用Swift编程
它对于年轻观众既好玩又有参与感
并且它是个有趣的方式来尝试新的东西对于有经验的开发者来说
它被设计成利用iPad的触控界面工作
我们创建了一个新的Smart Keyboard
为你的代码带来快速的键入提示
和Xcode中的代码自动完成类似
你经常能写完整段代码
而根本不用调出完全的键盘
当你编辑行中的值 比如数字和颜色时
我们弹出这些快速编辑控制允许你轻松选择一个值
再次 不要调出完整的键盘
你可以在Playground里快速修改代码
简单地在屏幕上用手指拖拽这些结构化的元素
并且如你所期待的有提前写好的代码片段的库
你可以简单点击就可以插入到你的代码
或者再次用手指拖拽它们
并且当有时候你调出完整键盘写代码时
我们展现给你一个专用的编程用键盘
对于访问许多特殊符号和数字超级容易
你用来写Swift代码的就用一个手指滑动即可
不需要切换键盘布局
应用也带有很棒的课程内容
我们正在编写一个完整系列的课程
会一步一步向你介绍Swift编程
并且我们正计划快速扩展这一内容
对于明年的课程
但你可以提供给学习者一系列的挑战
他们将频繁更新的
所以他们会保持回到这个应用并保持参与学习过程
对于这些有深度的主题
但是你不被限于跟从这个入门课程内容
你也有权利和灵活度来探索你自己的编程
利用一系列的简单模板
我们创建了一个挺容易组成程序的
只带有文本的输入和输出
并且另一个允许你探索和视觉化图像概念
基于形状
除此外由于你在指尖拥有整个iOS SDK
自由创建任何你喜欢的Playground
并且使用这个应用来教授许多主题
你甚至能控制机器人像是屏幕上的这个
和其他的配件从你的Playground
所以它将带来很多欢乐
为了向你更多展示你能如何操控应用
我会请Ken Orr来给我们另一个演示
好的 谢谢 Andreas
Swift Playgrounds令通过编程进行创新很容易
让我们看下我早前创造的Playground
我会给你们展示我是什么意思
现在我从选择一个形状模板开始
你们能看到开始我的图片在右边
就是围绕中心旋转的一些不同尺寸颜色的块
现在所有右边的东西是我左边代码的产物
我代码的中心是这个for循环
在这里我创建了每个块
然后在顶部 我有个变量定义了
我应该创建多少个块
好的现在被设成了15个 但是我想要
让整个右手边被颜色填充
为了实现这个让我试试把这个调成80
然后我点击运行
好的 我也许不想用褐红色想用个好看的蓝色
这看起来不错
我真的很喜欢这里的图案
螺旋进入画布中心的方块
这看起来真的很酷
我打赌我能把这做得更加明显
如果我随着时间的推移更戏剧性地改变那些方块的大小
所以在for循环这里我计算大小
我要去挖掘这两个不同的表达式之间加分
而不是仅仅将它们放在一起为什么不去我尝试乘法
运行 这看起来不错
所以 你就可以开始获得一个点子
使用touch代码探索和实践是多么容易
所以接下来我想将生活中的点滴带入图片
我将用一些动画
现在 为了做到这一点 我将使用内置在了形状模板的API
我想我要的是这个方块弹出来
并且停靠在流的中间
所以我要点击这里在我创建每个方块以后
然后进入快捷工具条接下来滚动
我要去点击动画功能
所以我有一个三秒长的动画
我会让它在开始前仅等待一秒
然后该块有内部的一切东西
它将代替我自动演示动画效果
所以我会拉动旋转
然后 我也想方块大小动画
所以我想我会在宽度和高度均为零开始
然后回到动画块我将它设置为之前的参数
所以我说square.size=size
然后 我已经计算上面的尺寸
我就用同一个变量 点击运行
很酷 它开始生动了
谢谢
我还想在此做一件事
对于触摸操控 我想补充一点
要做到这一点 我将使用一些内置到了图形模板的API
底部这里
我其实已经在画布上添加了一个拖动处理程序
块正等待我去填补它而且我也在此写一个函数
它将使每个方块围绕画布中心
所以我只需要在此块调用该函数
因此 回到快捷方式栏我说squares.rotateforTouches
然后我就点击运行
而现在我要用手指点击并按住右上角
并往下拉
就这样 我已经添加了触摸操控
谢谢
顺便说一句 到目前为止你可能已注意到
对于任何这些 其实我还没用到全键盘
我认为这很酷
今天下午我还有另一个东西向大家展示
我是做UI的家伙 我喜欢建立自定义的控制和俏皮的UI
我一直在四处摆弄这个自定义颜色选择器
我很想向大家展示
当你点击颜色选择会弹出一个颜色选择器
从你的手指下面你可以拖动
并选择您想要的颜色
现在 所有将构建的代码在左边
因此 让我的代码变大我们可以快速看下
现在 你首先会发现 最顶端
我导入的UIKit我已能获取iOS的SDK
在这个Playground和我创建的任何Playgrounds
然后一路下行在底部
我告诉Swift Playground获得我的视图
并显示在右侧
我想添加最后一样东西至我的Playground
添加我可以设置颜色的东西
这样我可以尝试一下我的颜色选择器
我认为要做到这一点我就添加了一个简单的UI图片浏览
让我调出编码键盘 我要说
“让图像视图
等于UI图像视图”
我会使用采用图像初始化
然后我就轻按在快捷栏的第三项 即小图片
这是文字的图像
所以 当我在点击源代码 就可以选择
从已添加资源到这个Playground
所以我提前加入了Swift的logo（小鸟）元素
所以我会选择那个
我需在此做的最后一件事我需要将你的
UI图像试图放进视图层次所以我说
viewController.view.addSubview
折腾在图像视图
我们将运行 然后我将使视图全屏显示
而且知道我们可以看到我的图像
我已经有了颜色选择器
其实这一小小的其他功能让我有些困惑
我希望它有一点点乐趣设置鸟的颜色
想通哎 为什么不那样做
这就是Swift Playgrounds谢谢Andreas
谢谢你 Ken
所以你看到的 不管你创建什么样的Playground
你总是通过利用实际的iOS SDK做到这一点
包括让你访问该设备的硬件API
并通过编写真正Swift代码
这也许是与其他学习应用最大的区别
经常使用用户数量过快增长的有限方法
在Swift Playgrounds 你将学习如何编写真正的SWIFT CODE
顺便提醒一下
Playgrounds应用本身也是用Swift写的
Swift Playgrounds为您提供了许多方法来试验
教授并学习如何编写代码
而我们尽可能让更多用户
尤其是孩子 对于利用这一新的机遇充满激情
而事实上我们希望你能帮助我们
通过创建其他内容而创建整个学习平台
现在开始
我们正在制作Playground文件格式的文档
今天在我们的网站已经可以获得
而在今年晚些时候我们计划发布学习资料
包括丰富的3D拼图
按照许可证 可以让您复制和重复使用我们的材料
结合自己的想法
并帮助我们覆盖世界各地的许多观众
一旦用户创造了Playground
有多种方式分享其成果
Playgrounds仅仅是文件所以你可以分享
用你熟悉的常用的方式
而我们并没有就此止步
对于你的程序输出 拍照变得更容易
甚至纳入重播工具包让您可以录制编码会话
并作为视频发布你的成果
并且对于
对于更高层次的学习者
iPad上的Swift Playgrounds
和Mac上的Xcode相得益彰
你可将Playgrounds来回在两种环境间切换
最终过渡到在Xcode IDE开发完整的应用
这很好地将我们带入下一个话题
更深入探讨Xcode有请Matthew Furlich
谢谢Andreas
Xcode 8 是一个重大发布可以谈的东西很多
让我们直入主题从源码编辑器开始
此次发布 我们将重点放在添加来自大家
最被要求的功能
我们开始添加活动行高亮
你可编辑该颜色
它会与任何编辑器主题完美融洽
变得更棒
我们也做了Swift的色彩文字支持
所以你现在可以在你的源代码中查看并定义颜色
让我们进入第三点
我们还添加了Swift图像文字所以你现可在源代码查看图像
作为代码完成的结果
并帮助你更好地编写文档
编辑器现在有一个命令
为记录你的API而生成标记
这些特性和多项可用性改进
真正让Xcode的编辑体验变得很棒
但我们并没有就此止步我们已经增加了一个特性
它原来是你们的头号要求
应用程序扩展
Xcode 8中 我们正开放IDE我们开始用源编辑
该扩展与活动编辑器一起运作
激活变革 选择中的改变
文件中导航
这开辟了诸多机会
对于命令 例如重新格式化 评论
本地化 甚至待办事项
现在 你可在每个extension中实施许多操作
每个操作被列为编辑菜单的一部分
用户也可为这些操作设定按键
作为员工队伍的一部分让他们工作
作为extension的开发者
你可以将它们通过App Store加载或开发者ID部署
而这些Xcode8上的extension
在Sierra和ElCapitan都运作
现在作为一个标准extension用户也感到安全了
这些扩展作为一个单独进程运行
且自身签名通过验证
并进一步加强安全性
现在系统完整性保护保证Xcode的安全
这意味着只有受信任的库和扩展
可与IDE和你的代码交互
因此 新源编辑扩展是我们的第一步
致力于使Xcode变成更可扩展的IDE
我们很想听听你们就此的反馈以及想看到的其他extension
我们也一直致力于改善您了解代码的方式
藉此 我们有全新API参照体验
我们已合并了API文档
将我们四个平台合并到单一统一的参照
现在 这个基准使导航变得容易通过框架和符号运作
现在 搜索统一参照意味着对于每个API 你看到单一结果
我们已经集成了同样的模糊匹配
我们用以快速代码完成和开放
浏览参照时
对于每个API该平台可用性清楚地列出
而在以前的发布中 我们将这个作为单独下载来加载
因为它的大小
在本发布中我们已能够将其缩小为先前的十分之一
所以我们已默认将其包含在内
你总能获取你需要的信息
现在我们还在Interface Builder中做了一些重大革新的改进
我想在演示中向你们展示
所以在这里我们有一个项目我们称其为Trailblazer
它是共享你喜爱的健行步道社交应用程序
除了你的界面布局方式
你会发现 InterfaceBuilder向你展示
它会呈现在设备上的方式
Interface Builder现可向你展示视觉效果
例如画布上的活力 模糊 阴影
使设计和运行应用程序成为无缝体验
你还会注意到我们在设备纬度内
展示接口
并在底部有新配置
普通设备的尺寸
在此我们在iPhone 6sPlus上看
我选择其他一项就像让我点击iPad上的一项
我可以看到界面如何显示
你看 我们通过iPad上的两列设计了自适应布局
要以其他方式查看它我可以改变方向
如果我想横向进行查看
我还可以在自适应布局下查看
例如 让我们以三分之一大小来查看下
这是用于多任务的滑动
这很棒因为它可以让我
为确保我实施了正确的界面
用户将以多种方式体验我的应用
我们还改进了经验
通过使用大小类创建自适应布局
具体来看一个例子
这个应用程序的设计者希望在图像顶部放个按钮
在地图上覆盖显示健行步道
但因为地图的大小他们只想在更广泛的显示器上做
这真的很容易
在配置栏中我将点击Vary for Traits按钮
我将获得两个尺寸类选项
宽度和高度
iPhone和iPad上的宽度尺寸类别不同
所以我会检查该选项
配置栏会变成蓝色 提醒我
我正在为特定尺寸类做自定义
但你也注意到设备的列表已经改变
我能看到那些将利用该定制的设备
在这里 我看到各种iPad预览方向和适应
最后一个项目iPhone 6s Plus的横向预览
该设备和预览方向使用常规宽度尺寸类
这是重要的信息 因为现在我可以确保
我将为设备设计正确的界面
我们的界面将很好看所以让我们继续做这些改变
我将去到库中 拿出一个按钮
并将其拖到界面
如果你的手不那么汗湿你可以拿住按钮
来吧
各位 一秒内不许看
一秒后 这将不再有趣
好了
这不应该赢得最响亮的掌声好的
让我们继续我将在此处删除标题
我们继续为它设置图像
我们将把它做成这个漂亮的罗盘图标
而我们只需把它放在正确位置
现在 我将稍后连接这个按钮
但确保得到了我们想要的界面
我将在配置栏中点击完成
我们将横向切换回iPhone 6S Plus
我们的按钮出现了
当我切换到纵向预览 这不
而这正是我想要的界面
Interface Builder现使得设计自适应布局变得很容易
在配置栏中将会显示iOS和watchOS设备
还显示了tvOS一些有用的选项
我将谈到应用程序的tvOS版本
你会看到在配置栏中现在向你显示的选项
对于亮界面和暗界面
我甚至可以在此进行自定义
例如 让我们添加罗盘图标的特化
暗模式 使其弹出效果更好一点
我想给你看InterfaceBuilder的另一特性
你会看到tvOS Storyboard缩小
所以它覆盖整个画布
Interface Builder现支持任意缩放级别的画布操作
因此 无论你想放大
获得完美像素比对
或者你想要缩小回来在Overview模式上运作
你可以做到这一切
这就是我们给InterfaceBuilder配备的新特性
谢谢
设计Interface Builder现在感觉就像直接在设备上工作
编辑任何缩放级别意味着你不再受制于
设备的大小
在此发布中我们还专注于工具的辅助性
我们尤其已让Interface Builder
与语音辅助程序Voiceover一起协调运作
我们也完全改写AppleScript字典
使得Xcode更容易融合于桌面自动化
现在 在每次发布中 我们增加了寻找
诊断和修复问题的额外技术支持
藉于Xcode 8我们正跨出另一大步
在过去的一年 我们增加了100多个新的诊断方法
提供了极大的洞察力当你构建
以及当你编辑代码碰到实时问题
我们已添加了三个新的静态分析器
用于本地化 延展性和释放
所有常用的可能在应用程序中引起问题的模式
我们继续投资测试系统
提高稳定性 性能并增加一些新的选项
现在Xcode将捕获和显示崩溃日志
在你的测试期间发生
这很棒 因为你可以运行测试
收集这些日志 比如崩溃日志
你可以直接用调试器来查看诊断问题
我们还用一新选项来增强xcodebuild联编以运行预建测试
哇哦 确实如此
这意味着这对合成可扩展测试而言是完美的
与自己的持续合成
Xcode比以往任何时候都更会帮助解决问题
当你构建 分析和测试自己的应用
但通常情况下
一些最有趣的 若非我们说的毒辣问题
当你运行代码时发生
为此 我们推出了新的东西叫做Runtime Issues
Runtime Issues与其他应用一样
会在活动视图提醒你
你会在问题导航关看到详细信息
我们已在顶部添加了一个切换以使其醒目
现在 有三种运行问题
UI 线程和存储器
让我们先从UI开始
视图调试器已是一个很棒的工具
用于你的界面可视化以及问题诊断
除了改进的准确度和视觉呈现
视图调试器现将在运行时检测布局问题
每次捕获 视图调试器
能够检测到含糊的布局视图
而这些是由于遗漏和错误配置的限制而造成的
这些问题在导航器里浮现出来
检测将提供详细信息帮助你解决这些问题
现在 线程问题往往难以预测
且可能难以调试可能出现问题的原因很多
比如 从错误的线程或数据争用解锁
为了帮助你跟踪这类问题
我们正把Thread Sanitizer整合到Xcode 8中
当你的应用启动时
Thread Sanitizer检测常见线程问题
并将其作为运行问题呈现
你可在这些问题出现时中断Xcode
或者你可以收集全部
在会话结束时审查
和综合报告提供了这些问题的具体细节
给你提供任何争用条件的详细信息
并提供栈帧来帮助你导航
像——是的
现在 像线程 内存问题往往难以确定和修复
想要有效地进行调试
通常你得查看对象图
看看它们是如何相互关联的这就是我们建立的东西
Xcode 8的新特征是工具条提供了一个内存调试器
这将帮助你可视化和导航运行应用时的
对象图
你是否会更喜欢它如果我告诉你 它会自动查找泄漏呢？
这是调试内存问题一个很棒的新工具
我想在演示中向你们展示
好了 在此我们有Trailblazer应用
我要在模拟器中启动它
我之前在调试
我想看一下之前注意到的内存问题
当我们正在做这的同时我将弹出内存报告
我会点击步道
你会看到内存峰值
没关系 我早调查过了
这还只是加载所有资源的步道
我注意到当我点击每个评论
我们的内存峰值
我们不恢复内存
即使我们一路回到应用程序的起点
这预示存储器管理问题
我们可以使用内存调试器进行调查
我将点击工具栏中的内存调试器按钮
当我们暂停你的应用时我们捕捉到对象图
调试导航现在向我显示
在我的应用程序中分配到的所有对象
有我创建的和系统创建的
我可以将其过滤只显示我的项目中的相关条目
我还可以输入字符串或地址来查找特定对象
我已经输入了“控制器”
我有评论视图控制器的三个实例
这令我感到诧异
当我选择它们中的任何一个
我们会看到该对象图表在右边显示
现在 你看到的都是该对象的参照路径
存在内存里
我在此看到的其中一个对象是Swift捕获环境
这是代码中我的视图控制器的某处
已被捕获闭包的一部分这是开始查看的一个好地方
我将用检查查看更多的细节
其中一个细节是回溯追踪
至捕获发生的地点
当然 我可以直接点击导航
至导致它的那一行代码
我看到问题的根源
我已经为这个视图控制器建立了一个观察器
被告知评级何时发生变化
此API返回的观察令牌
当视图消失 我已妥善上下清理
但我从来没有保留它
这是一个常见和易犯的错误
也是内存调试器容易找到和修复的错误
现在 我之前提到的内存调试还能发现泄漏
并且它提醒了我在活动视图有三个泄漏
我会点击那个将被带到问题导航
在那里我看到泄漏的三种类型对象
阵列 用户评论和用户对象
我要点击任一评论抱歉 点击用户
现在我们看到的是参照周期
用户有书面评论的数组
每一个用户评论都有一个参照返回给该用户
如果所有参照都强行持有这将泄漏遍布这些对象
现在 它看起来像是我一致泄漏它们
如果我想获取这些对象中任何一个的详细信息
我可以使用上下文菜单在控制台打印出来
或只是弹出一个快速浏览看看更多的细节
在这种情况下 审查用户关系
是我要进行调查的正如代码一样导航
我命令式点击一下就可以了
就将被带到产生参照源的代码行
果然 我忘了声明它是弱的
就这样内存调试器能够告诉我
我有的泄漏 以及帮我解决这些问题
这是Xcode 8的新内存调试器
今天我还有一个其他类型的问题想谈谈
这与配置有关
没有什么更令人沮丧的当你在做项目时
代码签名出了问题
其实 这并不完全真实
因为在一些情况下 解决方案
比问题本身更令人沮丧
因此 我们在Xcode 8中解决了这个问题
我们已经完全重建了配置系统
我们开始通过创建更快更强大的新签名行动
并考虑到新Xcode的工作流而建立
我们构建了新的用户界面元素以清晰地想你展示
概况 团队和你正使用的证书
并明确告诉你所有问题
我们完善了信息以确保其始终包括可操作的信息
同时我们也确保生成请求日志
其结果是将所发生的任何事透明化
基此 我们有一个强大基础
以供建立两个新配置工作流
Xcode 8具有自动代码签名的选项
有了这个代码签名选项Xcode处理了所有的细节
通过专用信息
而此信息与你创建或管理的任何其他信息无关
我们将应对所有签名请求
添加权利和再生新项
对于你希望对签名设置有更多控制的情况下
您可以禁用此选项并使用自定义代码签名
有了这个 你可以指定
你想使用的确切的签名资源
并且你可以在每个生成配置中指定
这是一个很好的选择当你有各种各样的签名需要
自定义代码签名仍然利用了新基础
对于任何问题给你很好的反馈和帮助
我们还想关注配置的另一点
就是开发证书
使用多台机器工作时为了使开发更容易
Xcode现支持多个开发证书
这意味着当你得到一台新Mac你只需要添加Apple ID即可
你不再需要取消或分享证书
从你的其他开发
所以新的授权系统自动并且定制登录
并且复制开发许可
Xcode 8总是使得授权变得容易
并且给你你需要的控制
在这个版本里我们把注意力集中在性能上
而且我们达到了一些了不起的成就
和我们一年前发布的版本相比
你会发现Xcode的启动速度提高了2倍
测试的索引速度甚至提高了50倍
所有的这些使得Xcode 8变得更快更好用
这是你将在Xcode 8里找到特性和提升的一部分
请在这周来实验室让我们知道您的想法
接下来 邀请Sebastien Marineau-Mes
他将会和你们分享一些令人兴奋的新平台技术
Sebastien
谢谢Matthew
谢谢
让我介绍一些关键的根本的技术的更新
我会从压缩开始
如果你们记得 去年我们介绍了lzfse
作为我们主流的压缩算法
比zlib算法快3倍并且能量消耗少一半以上
这真是一个引人注目的技术并且获得了广泛的使用
现在我们宣布 我们要开源lzfse 并且
现在你知道了
我们相信这会鼓励lzfse获得更多的使用
特别是多平台以及离线压缩这些使用案例中
接下来 我想要讨论网络
现在,我们知道一些应用的性能
取决于拥有一个好的网络连接
但是如今的网络
没有好的办法给最重要的通信优先级
比如说 人们在工作时下载YouTube上的猫的视频
会影响你真正重要的视频会议
所以我们和思科合作给网络加入智能
现在网络能够识别被信任的设备
识别对你的工作最重要的应用
然后优先让这些通信在网络终端间传输
这将提供更好的性能
给那些对你最重要的应用
这就是网络部分接下来
接下来 请我们讨论记录
如今 记录是你们所有人都使用的一项技术
在开发 调试及现场诊断中
在传统中 记录是碎片化的
你们有很多人使用你们自己的方案
这个平台已有的方案通常很慢
所以今年我们重新思考了记录
并用我们提出一个我们认为很吸引人的技术
它是统一的并且非常快
它在硬盘上记录的数据很紧凑
它还给你足够的灵活性来支持
跨应用 守护进程 系统服务的记录
它有内存内追踪的概念
你可以捕捉频繁的记录信息
只保存它们在硬盘中
当你的应用有错误时
最后 我们也加入了隐私
所以在开发时你可以捕捉非常多的记录信息
并且使它们被自动编辑
当你向最终用户发布你的应用时
现在 和这个一起
我们重写了控制台应用它有了更多的功能
比如说 它能够直播流媒体
通过开发设备高级过滤的能力
等级系统的内省能力
这就是新的记录系统
接下来
接下来 我们来说说文件系统
好的
当然 如今HFS+是Mac上的主流文件系统
它是1998年发布的
如今它被部署到所有的Apple产品
超过10亿台设备
当然 HFS+是18年前设计的
我认为它证明了当初的设计相当优秀
它在今天仍然是一个优秀的文件系统
但是 在它设计的时候 Mac上还有软驱
我们认为现在可能是我们开始一个新的文件系统的时候
所以今天我们要宣布一个全新的Apple File System
这就是它
我认为你们会为此感到兴奋
Apple File System从我们最小的设备Watch扩展到
高端的拥有很大的存储配置的Mac Pro
它还是现代的我们设计它首先
针对当今以及未来的存储技术闪存和SSD
它是有弹性的
并且我们利用这个机会来统一iOS和Mac OS上的加密
使我们在未来有良好的灵活性
Apple File System有很多新的独特特性
我想要重点展示其中的两个
第一个是克隆为什么要克隆？
如果你看看一个运行了一段时间的系统
你会发现很多同样的重复文件
到处复制是人的天性
这当然不高效这会浪费存储空间
但是有了克隆 你可以复制文件只需要使用初始存储空间
当文件被修改时
这很快并且你可以克隆文件 目录 目录结构
第二个我想要强调的特性是快照
什么是快照？
他们是文件系统在一个时间点的内容的镜像
为什么你们需要它？
好吧 假设你在开发一个备份应用
使用快照 你可以备份
文件系统在一个时间点的统一的视图
另一个这很有用的好的例子是在教室
你可能会为学生准备一台设备
包括内容 配置文件 应用等等
在上课时使用
学生使用设备时
他们可能会修改内容或设置
你可以在课程结束时使用快照
使设备恢复到初始状态
这样它们就可以被下次课的学生使用
这就是新的AppleFile System的特性
Developer Preview会做为Mac OS Sierra的一部分
在今天提供给你
我们希望你们都可以下载它使用它并向我们提供反馈
Apple File System会很快来到所有的Apple设备
好的
最后 让我们来谈谈隐私
你们听说了一个新的 强大的技术 叫做差分隐私
在今早的keynote中
我将向你们解释它
我从差分隐私背后的数学开始
这看起来很复杂
但我保证这些数学很有效
我会用一些例子来解释它
第一个例子是我们将用差分隐私来解决
一劳永逸地解决
最有争议和最重要的问题之一
在现代计算机科学中
代码格式
这当然是一个重要问题
我们将让听众对问题的答案投票
你们会希望你们的结果保持私密
因为让我们来面对它
你的一些同事会对这很热情
那么我们怎么利用差分隐私？
首先 你们每人提供你们的倾向
但是在我们把它发送给Apple产生调查结果前
通过差分隐私我们在每个答案里加入噪声
在我们加入噪声后
我们无法知道你的原始答案
我们把它发送给Apple差分隐私的优点
就是我们把来自很多人的数据集中在一起后
我们可以还原我们问题的答案
我不会对答案进行做判断
看起来我们的意见还是很不同
但是当你通过编译器运行你的代码之后
这并不重要
所以
那就是
所以 现在我们怎样在iOS X中使用差分隐私?
让我来提供一个例子
在Spotlight中 我们为深层链接提供建议
我们当然希望提供
最相关和最流行的建议给最终用户
我们这样做我们赋予每个深层链接
一个独有的哈希值当用户浏览它们的设备时
每当他们遇到一个深层链接我们获取那个哈希值并加入噪声
提取它们的片断并发送给Apple
现在 任意单独片断都没有意义
但是当我们把整个用户群整合到一起时
我们可以还原深层链接的流行度然后就可以使用它
使它们出现在Spotlight中并提升用户体验
这就是差分隐私背后的科学
我还想介绍它的另一方面
你可能会想 如果我们从用户收集样本
这通过从大量用户中收集大量样本实现
如果Apple从同一个用户那收集大量样本会怎样?
你们难道不会发现我在做什么?
这就是隐私预算起作用的时候
隐私预算限制我们可以获得的样本数量
从任何一个用户并且它确保最终
我们永远无法从任何用户那恢复有意义的信息
这就是差分隐私
这个强大的技术允许我们从用户那学习
提高用户体验的同时保护你的隐私
就这些了 接下来请Toby Paterson演讲
Toby将会介绍iOS X的高层特性
谢谢 Sebastien
下午好
让我们开始
所以 你知道的 非常感谢你们所有人
使得我们有一个如此好的iOS生态环境
我们一直在努力寻找使用户找到新应用的方法
进入到他们喜欢使用的应用中并且整合你的应用
到其他操作系统中
你们之前已经看到你们的应用可以怎样通过消息病毒式传播
并且我们使告诉人们你们的应用变得相当容易
从主屏幕
我们在快速行动列表中新添加了一个分享按钮
它会调出分享菜单
这样你就可以向全世界Tweet你的应用
这在所有应用中都可以免费使用
现在 我们有很多方式来获得用户
在正确的时间进入正确的应用
我将要快速介绍它们请耐心等候
Handoff让你可以把任务从一台设备带到另一台设备
Spotlight可以直接和你的应用内容连接
一个通用链接
会把你带到对一个平台最合适的地方
你可以直接将一个应用和另一个应用连接起来
Siri会在今天的视图以及Spotlight中推荐应用
我们可以只在正确的时间推荐应用
在主屏的任务切换器中
我们可以基于相同的数据类型连接应用
就像这个 这个 以及这个
我想你已经了解了这个主意
只有一件事我想你从中拿走
那就是NSUserActivity
这是很多的功能出入口
这是你的应用如何告诉操作系统人们在你的应用里做什么
并且让我们能够创造智能的建议和连接
在你的应用之间
在iOS X中 我们加入了2个重要的信息
现在 很多应用用多种方式使用地址
我们可以用它来在你的应用间建立连接
让我用一个例子来说明
这是一家我最喜欢的餐厅的Yelp页面
在旧金山
假设向NSUserActivity提供这个地址
这将使我能够做类似于要Siri带我到这来
我的手机知道我经常用Uber出行
这使得很容易
让我叫车去餐厅
或者当我在期待获得位置数据的文本域打字时
QuickType能建议一个我刚刚在看的地址
而且地图可以在推荐列表里包含这个地址
以及一个快速回到这个应用的方法
现在 我们也用多种方式和其他人互动
操作系统可以学习我用什么应用和特定的人联系
要达到这点 你的应用需要提供3个信息
足够的上下文这样我们能找到一个入口
在该人的Address Book中
你提供的服务种类那是消息或者视频聊天平台
以及一个你将为那个人使用的特定的标识符或处理者
这是新的Address Book卡
通过它我们可以在操作系统中实现很多功能
而且你将注意到我们可以自动包含
我们从你的应用学到的信息
现在 当我按任意一个快速通信按钮时
在卡的顶部
我们还可以在选项列表里包含你的应用
当我做出选择时我们会记下来
所以下一次当我按这个按钮时
我们可以把你直接打到那个应用
我需要指出所有这些学习
是用户的私密只有他们的设备能访问
现在 我们深深的相信跨操作系统的应用整合
提供更丰富的用户体验
扩展 当然 是你如何做那些
而且你早前已经听说了新的iMessage Apps
地图扩展和SiriKit
那么 我想要告诉你们两个扩展点的一些信息
我们加入到通知中
一个服务扩展在后台运行
并且允许你修改推送内容
在我们向用户显示通知前
这使你可以做一些事比如下载图片 视频 音频文件
在后台并将之直接嵌入到通知里
或者你可以在你的服务器上对推送内容加密
并用一个服务扩展在设备上解密
提供完全的端对端加密
我需要指出你可能想要使用一些更强大的
比我们在这提出的ROT13算法
我们会在明年改进ROT13来提供更多的安全性
现在如果你想要更丰富的用户体验
一个内容扩展可以提供一个任意的视图
我们会用来扩展一条通知的界面
这使你能提供动态的互动的体验
安全为你的应用量身打造
今早你快速浏览了改进后的今日视图
和它充满活力的 拥有新外观的小部件
一个小部件可以是任意大小只要在合理的限制内
但是我们还添加了一个新的紧凑的 固定大小
来优化信息密度
使我们感到兴奋的是
使这些小部件在主屏上就可以使用
我将要告诉你使你的小部件工作需要做什么
首先你可能想要更新它的外观
并且支持新的紧凑大小这样你的小部件不会看起来可笑
你需要用iOS X SDK构建它如此而已
不需要改变构建小部件的其他方面
你将免费获得这个新功能
所以我们很兴奋
我们认为这将为你的应用打开一个新的次元
好的 让我们转到Mac
Mac OS Sierra加入了本地化应用的全面支持
在从右到左的语言中
包括有意义的翻转UI元素
Mac加入了iOS和watchOS
它们在今年早些时候悄悄加入了对这一功能的支持
在全世界有这么多潜在客户
这比以往更加重要
你的应用被正确的本地化和全球化
你可以在这获得更多相关信息
你知道 当Sebastien首先谈论制表符和空格符
我们很确定他会讲到这
你今早看到人们怎样把他们所有的窗口收集到一起
到一个分页UI
AppKit将会在这为你处理所有事
它聪明到知道不要将你的设置窗口配对
你的文档窗口 等等
其实 若你使用NSDocument
你在你的应用中不需要做其他事
如果你没有使用NSDocument
你需要采用一些API来支持创建新标签页
但是我强烈建议你看看NSDocument是否
不符合你的使用案例你看
我们今早还向你展示了我们如何使人们易于
把他们的文档和数据迁移到云上
并且我们相信那是文件存储的未来
所以你的应用采用最佳做法非常重要
关于文件协调和元数据查询
如果你在此使用NSDocument
它会为你处理所有琐事
就像iOS上的UIDocument那样
现在我有一个iCloud的重要更新
如你所知iCloud API在我们的所有平台上都可用
但是在Mac上 对这些API的使用受到限制
只有通过Mac App Store发布的应用可以使用
在Mac OS Sierra中我们移除了这一限制
现在
你的应用仍然需要被有效的developer ID签名
同时也会移除那些烦人的不受信任开发者警告
但是一旦你完成了这一步你可以使用所有的API
无论你怎样分发你的应用给用户
接下来CloudKit
我们2年前介绍了CloudKit
它是基础 我们用来开发
所有我们的新云服务
现在他的权限模型相当粗粒化
你的数据或者可以被任何人访问
或者只能被一个用户访问
新的CloudKit分享特性允许你的应用
能够绝对决定谁能访问你的数据
新的CKShare类
使你能管理权限
谁能读写一个指定的数据集
这个API在所有的平台上都可使用
在Mac和iOS上我们提供标准API
来处理邀请他人的机制
并且在你的应用中管理他人
我们用CloudKit分享来实现新的合作特性
我们把它加入了Notes
我鼓励你们在今天developerpreview中看一看它们
接下来交给Josh Shaffer
他会向你们介绍watchOS的一些更新
谢谢
谢谢 Toby
如你们在keynote所知watchOS 3简化了导航
并提升了性能
这些改进超过了系统层面
并且包含很多对应用的改进
这些改进聚焦在Watch应用的3个关键方面
首先是方便查看
和Apple Watch的单次互动都很短暂
所以需要呈现设计良好简单的信息
给用户只聚集最相关的信息
来确保容易消化
第二是易于操作
这包括简化使用
对最常用的发生在Watch上的操作
比如 我们重新设计了健身应用
来减少开始一次健身所需的步骤
这也意味着简化访问关键信息
你的用户将会希望按照它来行动
即使他们不会在Watch上采取这些行动
第三是保证你的应用的响应性
通过保持它们在被需要时状态是最新的并且立即可使用的
当然 谢谢 我同意
所以 当你思考一个应用
首先想到的是全屏应用
它绝对是这个的一部分
但是在Apple Watch上重要的一点是记住你的应用可使用
另外2种界面complications和通知
这三种界面只是你同一应用的3种不同视图
所以重要的一点是他们呈现一致的信息
当你更新它们中的一个你应当更新其他的
因为如果他们显示不同信息
你的用户不会信任任何一个
你可能记得在watchOS 2中
有第4种界面叫做Glances
Glances简化获得
你最喜欢的应用的信息的摘要
在watchOS 3中新的Dock将提供这一功能
并且只要按一下侧边按钮就可以从任何地方立即达到
若你watchOS 2使用Glance界面
这个分开的界面在watchOS 3中不再需要
但是它简单的设计可以帮助你更新主界面
为你的应用 来确保它看起来和使用起来都很好
当用Dock显示时
在Dock里的应用会立即响应来确保
Watch上最常用的任务
可以在几秒内完成
现在 那很明显是很短的时间
为此努力可以成为一个好的引导
帮助你为你的应用设计顶级的特性
为确保在Apple Watch上确实运行良好
尽管每一个单独操作都很短
一些应用可能会在较长的一段时间里被使用多次
比如我可能会多次查看购物清单
当我在一家商店时
在watchOS 3中每当我抬起手腕
我能马上看到我要买的东西
并且删除我已经拿了的东西
现在设计拥有这种交互模型的应用相当容易
因为watchOS 3会返回你使用的最后一个应用
在你最后使用它之后长达8分钟内
当你完成之后你会返回到Watch界面
当你的应用未被使用时
确保它保持响应意味着让它在后台保持最新
所以当你要使用它时它已经准备好了
要达到这非常容易
watchOS 3包括一系列新的后台应用刷新API
后台应用刷新是一个关键部分
来开发可响应的watchOS应用
周期性的在后台更新你的应用
是一个巨大的改进
不管你开发何种应用
现在 如果你开发健身应用对这类应用
它们保持最新更加重要
在整个健身过程中
所以我们为它们有一些额外改进
在一次健身中
这些应用将会持续在后台运行
即使屏幕关闭时
确保他们能监视健身进度
并向用户提供更新
当他们用触真体验技术达到里程碑
在健身中它们也保持立刻可用
即使你切换到另一个应用来完成其他任务
所以当我跳出到音乐应用里切换音乐
我放下手腕后
我会很快回到我的健身
我们还加强了访问
心率计和加速仪
所以现在它们提供连续的数据
在整个健身过程中
除了这些传感器方面的增强
还有一系列新的硬件访问API
Crown事件使你原始访问来自Digital Crown旋转事件
手势识别使为应用添加定制的触碰操作更容易
触摸操作 比如轻触 滑动 拖移当然还有
除了加速仪 现在还可以访问陀螺仪
来确保你可以通过这些硬件访问API来做一些很酷的事情
我们还为watchOS SDK带来了一系列图形图像框架
SpriteKit和SceneKit给你很多自由
来增强你的应用和通知的外观
AV Foundation使得用Watch的外放播放声音相当容易
本着简化应用浏览的精神
你现在可以在应用界面中播放视频
当然 你也常常需要将数据传入或传出Watch
Toby已经提到 为了简化这方面
CloudKit是watchOS SDK一部分
因为它基于NSURL会话
它甚至可以脱离手机运行
若你的Watch靠近已知Wi-Fi网络
Apple Watch是在商店购买商品的方便途径
在watchOS 3中你可以卖东西
在你自己的应用里
只需双击侧边按钮即可购买
开发一个Watch应用只是第一步
另一件重要的事是使用户易于
发现和安装你的应用
为了帮助你实现这点
在iOS X新的Watch Face Gallery中
含有一整个部分专门用来显示所有你的应用
只需几个简单的步骤就能创建一个complication bundle
使应用出现在表盘图库中
当拿到新表时你第一眼就会看到表盘图库
在成功配对之后显示complications
来自你iPhone上每天经常使用的应用
这就让安装应用 变得非常简单
并添加到他们的表盘上
我们竭尽所能为你提供所需要的全部工具 帮你创建
非常棒的、引人注目的、可控性强的、响应式的应用
并且我们迫不及待想看到你要如何利用它们
为了让你了解这将如何在watchOS中强化你的应用
Eliza Block会给我们展示一个Background App Refresh的演示
和一些新的图形API Eliza
大家好 我这儿有一款基于watchOS 2创建的应用
展示了一位名叫Max的熊猫朋友
它能告诉我他在不同时间的不同心情
那么现在 你可以看到他很高兴
如果我挂起应用
可看到有complication仍然会告诉我他很高兴
但这儿有个通知 说Max饿了
这个watchOS 2的应用
有一些问题 我现在要演示给你们看
首先 如果我不理会这个通知
我的complication就不会更新也不会体现出Max现在很饿
更糟糕的是 当我进入DockDock中的应用快照
也没有更新 所以我不能演示出
在app中所有界面都享有一致的数据
现在让我们看看代码在watchOS 3中有一种
简单新方法来处理该问题
在扩展委托中有一个单一点管道
叫做处理和后台任务可以完美地更新
所有界面 当数据变化时
在快照刷新后台任务中
我只需要添加两行代码就能处理这两个问题
第一行代码更新界面上的当前状态
第二行代码刷新complication
当查看快照的时候
好了 这就解决了我们之前的问题
既然说到这儿了
那咱们就把这个应用变得更有意思一些吧
显然 你所看到的Max在watchOS 2中只是个静态图像
但在watchOS 3中可合成一个SceneKit场景
实现一些动画
那么我要切换到我的界面
这是我的应用界面 我要先删除这个图片
然后拖一个SceneKit场景进来
我之前写好了少量的代码
只是给这个场景填充一些SceneKit assets
然后创建一个出口现在我要把它连上了
把它拖到SceneKit界面
现在 不仅能在应用中添加SceneKit场景
还能在通知中添加场景
这可比文字通知有意思多了
我还要把一个场景拖到那儿去
我需要稍微调一下尺寸
钩住出口
这就行了 我要再运行一下应用
这次 我们有希望能看到更多动态画面
那么 我们就有了一个更养眼的版本 因为Max能跑了
我现在再挂起应用
等他变饿
我们看到一个非常沮丧的Max摸着肚子 这个版本更直观
我觉得这好玩儿多了
当我挂起通知时
complication如我们希望那样更新了 体现出了他的当前状态
如果我在Dock中查看
你会看到快照也更新了
体现出他饿了 不高兴了
这只是能实现的很小一部分新功能
用watchOS 3提供的新API
我们非常期待你们会创造出什么
接下来 让我们请Jim Young上台来讲一下tvOS
谢谢Eliza
自App Store在Apple TV上线以来我们一直很兴奋
就在去年十月
因为我们坚信TV的未来属于应用
从那一刻起 你们就忙于
让6000多个应用在App Store上架 其中包括娱乐应用、游戏应用、
保健和健身应用、教育应用等等
现在让我们谈谈这对于tvOS的开发意味着什么
首先 你已经很熟悉它了
你可以使用你已经掌握的工具和语言
而且tvOS包含你已经熟悉的iOS的基础框架
此外 我们还有一些针对tvOS创建的新框架
还有你创建很棒的应用时所需要的所有基础支持
有丰富多媒体资源帮你创建音频/视频应用
当然 我们对游戏应用的支持也非常出色
而且我们也将更多的特性引入到平台中
现你可用PhotoKit创建
能在大屏幕中显示用户的图片的应用
并且使添加明暗变化变得非常简单—
请看一下明暗效果
这样的技术相当丰富这个列表只列出了其中一部分
还有一大批没有列出来
现在让我们谈谈这些技术的使用
并把它们结合在一起 在tvOS中实现一种优秀的用户体验
我想先从Touch谈起
在设计tvOS时 我们很清楚需要引入
一种优秀的Touch体验 到客厅
现在 Touch必须让人感到流畅和连贯
要精准和有趣
这在客厅里是极具挑战性的因为TV就在10英尺之内
让我们看看该如何解决这个问题
我们更新了UIKit
所以大屏幕上的所有控件和视图看起来都很漂亮
我们添加UIFocus 可定义UI中的哪些元素可设定为焦点
更新了UIMotionEffect可获取聚焦引擎的输入
以上这些都可以直接连接
在用户远程操作
和在大屏幕上看到的结果之间
好消息是我们已经帮你们做了大量的工作
你们的UIKit app可免费使用该成果
如果你现在还有基于服务器、用于提交内容的app
我们有很多不错的应用 就像Showtime频道显示的这个一样
我们有一种技术叫TVMLKit还有一个框架叫TVMLKit
TVMLKit是我们专门为tvOS开发的一个新的高级框架
它建立在UIKit的基础上
所以你能获得我们刚刚展示的所有无缝Touch体验
我们提供大量模板 你们甚至可以提供
自己的自定义模板和本地控件
TVMLKit允许团队创建
漂亮的、高度程式化的、自定义应用
在短时间内
现在让我们谈谈如何将这种体验扩展到Apple TV之外
通过整合其他Apple设备
可以用CloudKit很方便地在云中保存应用和游戏状态
用户可以很方便地在Apple TV上开始游戏
然后在iPhone或iPad上再继续游戏
我们还看到了一些不错的应用可同时使用多个Apple设备
比如FreshPlanet中的SongPop Party
每个家庭成员都可以用自己的iPhone
来回答音乐相关的提问
为了让不同的设备更好地进行沟通
我们在平台中引入了Multipeer Connectivity
只需要少量代码
就能很容易地连接运行在多个设备上的应用
今天早晨 我们发布了新的Apple TV Remote
现在 你的家人只要有iPhone
就相当于有Apple TV Remote了
你的apps无论看起来还是用起来都跟Siri Remote很像
并且我们还利用屏幕优势增加了更多功能
Now Playing在屏幕上提供了一整套的
重播控制和媒体封面
就像iOS在锁屏时显示的画报和控制一样
使用Media Player Remote
我经常用Media Player RemoteCommand API
把信息添到Remote app中
这个应用还提供游戏设定的布局
在玩儿游戏时 这个新应用可以当做微型游戏手柄
就像Siri Remote一样
要实现多个微型游戏手柄
你需要设置一个Info.plist key
除了Siri Remote和新的Remote app之外
tvOS还支持MFi游戏控制器
今年秋季
tvOS将同时支持多达四个游戏控制器
但我们不想止步于此
我们想做出更出色的游戏
我们想做出需要这种控制器的游戏
因此我们很高兴地宣布我们将更新控制器政策
你可以限定你的游戏必须使用控制器
tvOS会查看所需要的控制器是否存在
如果必要的话 会提醒用户
这是tvOS的进步 我们非常高兴能取得这样的成绩
我们会举办很多tvOS工程师参与的实践活动和研讨会
欢迎你们参加
接下来我们欢迎Geoff Stahl上台
谈一谈图形技术 Geoff
谢谢Jim
我要谈谈绘图
我要谈一下图形学的几个领域
今天我们要谈一些了不起的技术
我要从色彩说起
我们为最新的iPads和Macs打造了令人惊叹的新显示器
可以完全还原色彩
其实DisplayMate展现的是
“色彩的精确程度是人眼不可辨别的”
那么我们要如何实现 嗯这其实是色饱和度
绝大多数显示屏都采用了sRGB色饱和度
范围很窄
不能准确还原我们日常生活中能看到的所有色彩
比如花儿和画儿的色彩
亦或是你穿的衣服的色彩
所以我们步入了范围更广的P3色饱和度的时代
可以真正实现色彩的精准还原
并把这些现实的对象渲染出来
但我们并没有止步不前 我们将色彩做到极致
从系统API到系统应用
我们始终致力于显示更深、更广的色域
如果app采用了UIImageView或UIView
可以免费使用 自动获取
如果你要自己控制范围更广的色彩
我们还提供API
当然 我们有一个很棒的色彩捕捉工具
我们最新的摄像头支持捕捉更深、更广的色彩
我们用API获取原始图像
而且现在还可以用API LivePhotos来获取
以上说的是色彩
现在我要谈一谈技术
改变了产业走向 即Metal
我们在两年前引入了Metal目前已被广泛使用
请记住 当我们开发Metal时
我们优化它时 我们同时也考虑到了我们的设备
所以我们能很快地创新
用Metal细分曲面技术这样的高质量的表面处理技术
来实现之前从未实现的渲染精确度
或Metal功能专业化
结合S码 可以创建一套着色器
自动处理材质并照亮场景中的道具
对于低内存的渲染目标
可采用碎片兑现中的结构
来减少应用或源代码中使用的内存
这就允许应用
有一种专门的算法在Metal应用中处理内存
Metal几乎无处不在 成千上万的设备都使用Metal
我们的关键图形框架和主游戏引擎
就建立在它的基础上
所以 无论是用高级API 还是直接在Metal中编程
都能获得我们创建的所有的性能优化
关于Metal的另外一点是
它是我们游戏生态系统的基础技术之一
因此让我们来谈一谈游戏
在过去几年中 我们创建了伟大的游戏生态系统
目的是创建API和工具
把你对于游戏的想法付诸实践
今天在这里我想有重点地说几个
第一个是上午说过的Replay Kit
我们去年引入了Replay Kit应用起来非常简单
可以让你的用户录制游戏过程
编辑录像 然后分享给他们的朋友
今年 我们会更上一层楼将推出ReplayKit Streaming
目前 Replay Kit可以现场直播
在支持ReplayKit StreamingExtension服务的设备上
这就允许用户不仅仅是—
不仅仅是能和朋友分享还能通过Internet实时发布
自动地 通过ReplayKitLive Streaming
并且——是绝对的
甚至更好
如果你已经使用了Replay Kit只需要添加三行代码
非常简单 可以真正扩展应用的社交覆盖度
说到社交 让我们谈一谈Game Center
我们将改变Game CenterMultiplayer工作模式
目前在最新版的OS中
只要能发信息就能邀请
所以你的用户可以邀请任何通过信息能联系到的人
就是这么简单 发个信息就可以了
而且最酷的是
如果你已经在游戏中使用了多玩家API
你甚至不需要做任何改动在最新版的OS中就可以这样运行了
并且我们不会止步不前
我们将向Game Center中添加新API
Game Center Sessions
Game Center Sessions营造了一种坚挺的分享体验
用户可以随意进出
意思是你要在设计游戏时充分考虑到移动设备用户
进入和离开应用的方式
这就需要一个移动设备的多玩家游戏的新典范
最后 说一下GameplayKit
GameplayKit是一个基于组件的API
可以实例化和自定义这些组件
并为游戏对象构建模块
把难题留给我们来解决吧
接下来我要邀请Norman Wang上台
讲解这些组件和Xcodegameplay工具的展示
谢谢Geoff
我想向你们展示在Xcode 8中创建一个游戏有多快
这是一个我正在开发的游戏项目
这是一款竞技性游戏 角色有英雄和敌人
互相投掷彩绘气球
我现已使用了今年发布的新API中的SpriteKit和GameplayKit
你可以看到 游戏需要三个主要元素
一张地图、一个英雄和游戏设定
我已经实现了英雄的移动和动画
但毫无疑问 缺失了小岛边界的冲突
那么让我们来解决一下
打开Xcode对象 看一下源代码
我已经写了一些游戏设定行为
使用了GameplayKit提供的GKComponent
比如这个战斗组件
在Xcode 8中 我可以公开任何一个类属性
是在2D编辑器中定义的类
然后我可以自定义
在场景中这个行为何时与一个实体相关联
我用了新版的碎片地图编辑器来创建小岛地图
因此在游戏中
有三个不同的碎片集
分别是沙子、水和草
我不仅可以指定内部和外部的碎片
还可以引入差异
所以这里的这个红边 比如说
对于这个独立的碎片图片如果我想添加一个新外观
去掉小石头
我只需要把它从Media Library中拽进来
现在这个碎片集就完成了
现在让我来展示一下如何使用它
那么我们再切换到小岛地图
小岛是用新的碎片地图功能创建的
由SpriteKit提供的
所以要修改它 我只需要选择碎片地图
双击
选择激活的碎片
现在 我觉得小岛看起来有点儿太单调
要进行更多修改 我只需要绘制各个游戏关卡
Xcode会自动绘制正确的碎片
使相邻的元素得以匹配就这么简单
现在我觉得我实现了我想要的小岛的效果
让我们看一下这里的一些游戏设定元素
要武装我们的英雄让他有一些动作和动画
我已经关联了玩家输入组件
和动作组件
要让玩家待在小岛的边界之内
我只需要添加一个冲突组件
这样 它会自动创建一个实体
为我们的英雄和小岛
基于当前设置好的碎片集
要使玩家能投掷水球
我只需要添加战斗组件
请留意一下 战斗组件类是如何公开健康值的
现在是可见的了我可以给它一个自定义值
比如说 我可以设置它的值是2
而不是使用默认值1
另外 我设置了一个雄蜂投掷彩绘气球
还有一个敌人 在场景中
要赋予敌人同样的战斗力
捡起彩绘气球并扔向我
我要添加同样的战斗组件
要让游戏成为一个公平的游戏
我会给敌人设置同样的健康等级 即2级
而不是使用默认值1
现在 我觉得这个关卡的设置非常棒
让我们运行一下 看一下效果
雄蜂会随机投下彩绘气球
气球战斗即将打响
那么看起来所有的元素都齐了
因此在Xcode 8中 可以很轻松地实现游戏关卡的设置
并关联所有游戏设置逻辑
相当迅捷
因为我用了SpriteKit和GameplayKit
我的游戏可以在所有Apple平台上顺利运行
谢谢大家 现在让我们把舞台交还给Andreas
谢谢Norman
好了 让我们快速回顾一下我们刚谈到的几个重点
现在有四个Apple OS平台
都有自己的App Store你可以在里面发布自己的想法
而且今天 我们增加了丰富的新扩展接口
可以更深层地连接我们的OS平台
也许最重要的是
我们建议你考虑创建一个iMessage App
并把你的app与SiriKit整合在一起
但这只是今天我们要发布的众多API中的两个
并且全部支持
都由新版Xcode IDE提供
Xcode 8的运行平台包括Mac OS El Capitan
和Sierra
当然 也支持Swift 3的开发
现在 这些技术都可以下载了
今天 从WWDC Attendee Portal中
那么你可以在今年下半年捷足先登
当我们发布产品时
你就可以为你的用户创建更强大、更独特的应用
同时 留意一下新版SwiftPlaygrounds app
我们将它纳入了iOS XDeveloper Preview
我想你们一定会获得很多乐趣
也许你会考虑创建额外的内容
为刚开始学习如何使用Swift编程的孩子们
此次会议中有许多机会
来更多地了解我们今天所发布的一切
有100多场研讨会和很多实践活动
你可以跟现场的每个工程师一对一地进行交流
他们会在这里回答你的所有提问
我希望你们能尽情享受此次研讨会 下半周再见