令应用自适应 第二部分
早上好我叫David Duncan
和Kurt Revis一起今天我们要讲讲
如何使应用自适应
那么 第一部分你们会看到Interface Builder加入了的
工具
以及做自适应布局的基础
这个部分中我们会跟你讲更多
能帮助你做自适应应用的技巧
以及自己定制想要的体验
同时保持自适应性所需要写的代码
那么 看看今天的议程
我们要谈的第一个
只是一些尺寸和屏幕分类的基础帮助大家温习一下
我们还要讲讲在UIKit工具中已经有的一些东西
能够帮助你用Interface Builder最有效利用UIKit
最后 Kurt会上来讲
怎样跨屏幕构造自定义体验
那么 让我们从尺寸开始
好 尺寸
如果直接拿过来所有的设备
和它们的设备方向和它们在屏幕上的适配
这样看起来是很复杂的一些东西呢
我不认为任何人会想把这些问题都连根拔起
搞清楚它们的布局看上去怎么样使它工作
让我们看看是否可以将需简化的所有这些做个图表
好吧 还是挺复杂的
你不必读它这些文本很难看清楚
看看把文字和颜色去掉会不会简单些
并没有什么帮助那么我们还可以怎么做？
好吧 我们在UIKit考虑该问题时我们会想可以怎样
分配空间给用户创造好的体验？
正如你已经猜到的我们在讲的是屏幕分类
用网格分开 分成紧凑宽度和常规宽度
紧凑高度和常规高度
我们决定 当你在紧凑型时
你会有更接近iPhone的体验更好运用空间
但当在常规型时你可以做到一些更高级的事
真正利用空间做到更有趣的一些事
那么从中学到的就是当你看到常规尺寸时
就是给了你机会给用户提供更好的用户体验
利用空间
超越能在紧凑型尺寸办到的
那么 看看基于屏幕分类 UIKit已经能办到的
大部分视图和控制实际上并没有变
如果你看一下开关
它在紧凑型还是常规型是一样的
导航条在紧凑型还是常规型也是一样的
但什么会变呢？
好吧 这里有个展示
看上去是个全屏展示在iPhone 6s Plus上
如果我们旋转设备 把它放在紧凑型时我们看到一个表单
所以在展示中看到的一件事是
如果你在常规型尺寸展示表单
转而到紧凑型尺寸不会有足够的空间来展示
所以会把它改成全屏展示
现在在UIKit中做着最复杂的适配
基于屏幕分类和有限空间
的是UISplitViewController
在iPhone 6s Plus上看紧凑型宽度的观看体验
会看到 如同你常常体验到的
只能看到一个能够推送、弹出东西的导航控制器
我们再旋转到紧凑型宽度时
就引入了边栏
在iPhone 6s Plus上我们认为所有常规型尺寸的空间
有边栏比没有带来的用户体验更好
尽管我们只有这么些空间来加上它
跟在iPad上相似横屏9.7英寸iPad
你会看到也有边栏
让你更方便切换于不同邮件之间
如果换到竖屏怎么办？
记住 在iPad上还是常规型尺寸
但是我们觉得在iPad上通常有内容
更大、更有趣的内容
内联图像等等你需要多余空间
来和内容交互
然而 我们允许你在边栏切换
这样你还是能方便切换于不同邮件之间
这就是UIKit的一些
基于两种屏幕分类提供最好体验的功能
和有限的实际空间
为了更好利用它让我们看看UIKit的一些实践
充分利用现有功能
讲讲Xcode工具里UIKit的
第一部分中
你们看过了Interface Builder的用来做自适应应用的增强功能
为了在所有范围轻易做调试基于屏幕分类
和特征
但是 Xcode还提供了资源目录
资源目录很棒不仅用来整理图像
还指定了什么时候该用这些图像
当然UIKit有很多技术
让构建自适应应用变得简单
我们讨论自动布局很多年了
有很多相关演讲如果你想了解
可以去回顾它们
当然今天稍晚些有个演讲关于自动布局的新进展
特征集合在第一部分回顾过了
但还有别的东西比如动态字体
让你的应用适应不同字体大小
基于用户想使用的
布局导引是个很好的方式用于传递自动布局信息
向层级下
我们会讨论一些UIKit默认提供的一些布局导引
最后UIAppearance能很好
声明指定你想让你的应用
控制和视图看上去怎样
让我们从资源目录开始
资源目录让你自动适应图像
基于图像所在展示的特征环境
这里有个小例子
这里是些Sophia宝宝的图片
有1x 2x 3x版本的图像
不管你在iPad 2还是iPhone 6s Plus上
你会得到那个设备下最好分辨率的图像
另一个优点是
资源目录可以为应用瘦身设计
这意味着如果我指定这个应用给iPhone 6s
一个2x设备我不用付出空间损失
给携带1x和3x的图片
同样的 还压缩了图像基于屏幕分类
和其他一些东西
那么 用资源目录
可以给图像做最好的细分
让你用尽量少的容量
部署给用户设备的时候
另外 资源目录提供了元数据信息
为了各种理由添加到图像上的
第一件要讨论的是对齐嵌入物
把Sophia宝宝弄回来
比如有个应用
有时我们要剪裁这张图片成正方形
如果随便取中间部分
会看不见她大部分的脸
真正要的部分是在她脸上画个正方形
现在你该怎么办？
要引入一些度量
搞清楚从边到正方形的距离
不用把这些写入代码和资源相连
你可以直接在资源目录完成这些
UIImage会在你需要时提供这些数值
类似的 你可以用这些数值创建图像
把图像放进资源目录
意味着你无需巨大的表格关联资源名字
和元数据
类似的 比如表格视图有个背景
之类的 你需要调整大小
来适应展示尺寸
你可以创建一个分成9部分的图片创建切割边缘
储存这些进资源目录
然后当这张图片改成最终状态下的尺寸时
它不需要大尺寸图像就能调整大小
而且特定的根据你在工作的设备大小
好 这些是资源目录
讲讲其他可以给应用做的适配
使用动态字体
我们喜欢动态字体
它给用户提供了指定字体大小的能力
给用户一些视野上的帮助
指定很大的字体大小来更方便阅读
今年
我们让你在应用上用动态字体更加简单
用两种方法
第一种 把它放在特征目录其中
就不用等着听通知了
它就在那儿给你使用来自定义文本如果你需要它
但我们发现你在常规型文本视图下应该不需要做这些
给标签 文本框和文本视图
我们把这些变得非常简单
你只要指定想要的字体样式
给内容尺寸类别设置调整尺寸的标志
所有标签 文本框和文本视图
都自动适配成当前动态字体尺寸
你不用做任何事
当然 如果你用了这个方法
确定在所有动态字体尺寸下测试应用
如我提到的有些很大的字体
Mac的无障碍检查器会连接你的应用
你可以动态调回来
而不用来回设置
如果你要在表格或集合视图展示
回顾一下“集合视图的新特性”演讲
其中有些很好的信息关于性能和行为的增强功能
在集合视图中可以很好利用的
那么讨论讨论布局导引
UIView提供两种布局导引
边距导引 和可读内容导引
我们会依次说
这两种都源于视图
不管要放什么内容
边距导引由UIView中的一项属性定义
那就是布局边距
定义了插入物的所有边
那么 接下来怎么创建布局导引呢
那只是由视图指定的一个长方形而已
边距导引 当然 提供自动布局对象
给你生成自定义约束
简单
那么 可读内容导引跟这有什么关系呢
可读内容导引
提供信息如何布局文本
让文本的每行长度看上去好可读性高
如果你在用新的12.9英寸iPad Pros
把文本布局成一边到另一边
用户在阅读时会不停转头
第一件要计算的是文本长度的理想宽度是多少？
我们不想要文本溢出边距
所以把边距导引作为计算的一部分
把两者结合成可读内容导引
另一种在UIView中放入文本布局
现在 可读内容导引基于动态字体大小
如果动态字体大小变了会怎么样？
好吧 我们放大了动态字体大小
理想宽度变大了
如你所见
因为可读内容导引基于边距
导引不会穿过这些边距
所以你可以铺开文本
得到可读性强的文本长度在视图里面
那么让我们讲讲UIAppearance
UIAppearance如果你还没用过 是个声明方式
给你指定你想让应用看上去怎么样
这什么意思？
这意味着 比如说不同于有个新的标签栏就写代码
你写道：
你写说 对于我所有的标签栏
外表样式中所有未选择的着色是蓝色
非常简单每次创建标签栏时
未选择项目会是蓝色
但它同样是基于上下文的
意味着你可以指定基于特征集合
或基于视图包含物
这看上去什么样？让我们看看
这是我们的应用
至于样式 我们想把大的标题图片放在顶部
在常规型竖向屏幕的时候
图片会替换导航栏的背景
然而 当我们在紧凑型竖向屏幕时
会呈现并排布局
图片不会超出导航条
所以我们会用默认背景
先让我们做默认背景
创建一个UITraitCollection给竖向紧凑型屏幕
把导航条样式赋给特征集合
说我们不想给这个样式用任何背景图片
这会导致导航条用回原来默认样式
类似的 做竖向常规型屏幕时
给它创建一个特征集合
用这个样式
指定一个空图片导致导航条
不使用背景图片
现在 记住给特征集合的样式API
可能会被读取的很奇怪
我们实际想修改C2的API
所以仔细注意这部分
要结束这个最佳实践的部分前
这个部分我们回顾了如何用资源目录整理图片
动态字体适配用户改变字体大小的愿望
布局导引帮助你构建你自己的布局
以容易适配所有布局情况的方式
最后 外表
让你的应用看上去跟你想要的一样
那么接下来我要交给Kurt继续讲
谢谢 David
如果你还记得 从自适应应用 第一部分演讲中
要记住的讯息是：
系统会做大部分工作你不用做
现在 我今天要讲的是超越系统做的
如果你想超越系统提供的
接下来告诉你怎么做
这里的关键词是“如果你想要”
不是必须的
然而 如果你不想要即使你不利用它
还是可以学到如何更有效使用UIKit
那么我要讲一些超越基础的
我要告诉你怎么设计应用来解决所有各种
设备方向 尺寸的问题
你如何实现这些设计
应用改变大小时 如何动态改变设计
然后我要讲关于使用可重复元素
让构建应用更方便快捷
我会放在做一个应用的上下文中讲这些这儿我们会做个真正的应用
那么 称我的应用为我的非常自适应的应用
幸运的是它也很简单
在这个应用中只要展现三件事
三个项目每个项目有个标题
只是A B 和C
然后还有更长一些的文本每个项目一个描述
即使这个应用非常简单我会用到一些技巧 你可以在
更复杂更大的应用中使用
这就是我应用的原型这是其中的数据
那么我的应用该看上去如何以及如何运行呢？
设计什么样？
好 当我在思考设计时
我需要考虑所有尺寸和方向的组合
给每个组合做个特别的设计太费事了
这工作量太大了让我们试着简化
我觉得我的应用只需要两个设计
称第一个为“高的”
我把所有项目竖着排放A B 和C竖着放在堆里
另一个设计叫“宽的”于是横着排所有项目
现在 我认为不管应用实际是什么尺寸
我可以用两者之一的设计让它们放的合适
现在我的问题是：
给到一个设备方向和尺寸的组合
怎么选择用哪个设计？
我要定义一个规则我的应用专用
我觉得我要选：如果宽度低于高度
用“高的”设计
否则的话 用“宽的”设计
运行所有的组合看效果怎么样
在写代码之前先在纸上看看
比如 这个iPhone是竖向的
宽度低于高度我们用“高的“设计
把iPhone放到横向
或者iPad全屏或者iPad部分屏幕
过一遍所有的例子全都试一遍确保这个规则能用
再说一遍我刚刚做的
在设计应用解决尺寸问题时
我考虑了所有的组合
想出了几个设计来覆盖所有组合整个范围
然后定义规则来确定用哪个设计
当我在定义规则时
有很多方式可以用这也是让我的应用变得特别的地方
但要注意我本来可以检查
尺寸是否正好匹配
我本来可以看1024x768尺寸
那么说这是iPad然后基于这个信息决定设计
我不想这么做因为这样做会要解决太多组合
而具体尺寸会随着时间变化
所以我定义了一个简单的是否条件
来告诉我用哪个设计
有很多方法做这些
第一条 最明显的是用屏幕分类
然后就完成了大部分工作
你只要检查是常规型还是紧凑型
应用会像系统其他应用一样工作
因为在用同一个屏幕分类
所有的Xcode工具可以帮到你你会无偿得到很多
但是你也可以自己定义一个规则
比如可以比较一个值 比如宽度或高度跟一个阈值比较
或者比较两个值 像我之前做的宽度和高度比较
或者结合这些规则
重点是想出一个简单清除的规定
来决定用哪个设计
在考虑设计时即使尺寸相同
比如iPad的一边或者另一边
不要把设计特定到设备按钮位置
或者多线程操作时另一个应用在哪儿
找到应用的大小
用规则决定用哪个设计
最后 把设计用在UI上
改变UI的视图来适配
现在我该把这段代码放哪儿？
如果我用个Xcode的新模板或者新的视图控制器
有viewDidLoad方法的模板
它说 在这里进行任何额外设置那么我就在这儿放代码 对不对？
不幸的是 没那么简单
原因是你不会想做这些因为视图在所需时加载
第一次要求视图时这个视图会被调用
那得很早了
我们知道那时视图还不是父视图
布局还无效呢
所以你不能指望视图尺寸
活任何父级尺寸或特征之类的
只是太早了
对于一次性东西 像初始器loadView、viewDidLoad
你会想放一些设计中都一样的代码
对我来说更好的地方放规则代码
是在视图控制器的viewWillLayoutSubViews方法里
你会看到因为那时视图在父视图中
父视图的布局已经发生了
尺寸有效视图尺寸有效
特征有效一切都很好
这是操纵视图控制器中元素的好时机
这里改变视图控制器的视图
约束等等
现在 注意要小心因为这是条非常火的路径
经常被调用 经常出于你掌控之外的原因
所以在这个方法里做尽量少的工作
理想条件下你会发现上次被调用后什么改变了
然后基于变化 尽量少的更新
只改变视图的必须改变的属性
最后 小心不要导致布局循环
如果使父视图布局失效
它们会反过来失效你的布局
马上你会发现你应用没做任何事只是不停使生效、
失效布局然后任何实际都没有发生
要了解更多关于调试和更多关于布局循环
可以看看今天稍晚些的自动布局的新进展演讲
那么这里是我的两个设计回到这里
怎样实现它们呢？
我可以给每个项目A B C一个视图
然后用UIStackView
来横向或竖向排列这些东西
UIStackView做全部工作我不用特别努力思考
这有一些代码
我简单示例的视图控制器是一个UIViewController的子类
为它做个storyboard
其中有个堆视图而且这个视图中已经有了三个视图
现在我要在viewWillLayoutSubviews方法里
覆写这些
第一步 得到尺寸写view.bounds.size
第二 采用规则
如果宽度大于高度...
或等于高度 选择用“宽的”设计
最后采用设计
如果再用“宽的”设计
堆视图的读取会是横向的
否则就是竖向的这是所有我要做的
注意这里我不用做很多工作
我还利用了StackView很聪明这个事实
如果设置读取已有值
不需要做额外工作
让我们看看在活动的应用这是我应用在iPhone竖向屏幕上
看到竖向布局现在我旋转到横向
会看到应用也旋转到横向
我还无偿得到这个动画
现在回到竖向再展示一下
这样旋转了
把这给David看
因为我被震撼到了堆视图 免费给了我这个
我没料到
他说“好 这很棒
但怎么让它更好？你能让它变得更突出吗？”
如果你是个应用开发者 也许你曾经从客户那儿听到过这些
我说“当然 我能让这更突出”
我可以让应用稍微有趣些让它更突出
通过在旋转时 让项目向你变大
旋转后我让它们回到正常大小
缩回到正常大小
这不是我们必须提倡
你在你应用中做的
不是这个特定的让应用突出的技巧
重点是把代码放在哪儿以及具体怎么做
那么我把代码放在viewWillTransition方法里来调整大小
和协调器
我这么做因为它会在应用尺寸变化时被调用
或者在旋转时
我给协调器设置动画
在旋转同时设置之后发生
为什么不把所有布局代码放在这儿？
因为应用启动时第一次不会调用这个方法
还有别的原因 但那是主要原因
那么我用协调器设一段代码
来在旋转时加入动效
我要做的是在这段代码中
设置参数表示我想要动画
它就会以相同曲线和相同时间旋转
接下来设置堆视图变化
到1.4倍所以变大一点点
然后结束后设置自己的动画和持续时间
这里我选了.5然后回到正常大小
设置CGAffineTransform为默认
也就是正常大小
那么就这样
这是同一个应用上面有多加的代码
会旋转
向你弹出然后回去
如果再旋转 它会做同样的事
就这样我加入了弹出效果
让它变得有趣了些
但我没有变核心布局代码
它保持原样我只是加了些在顶部
最后我想讲的是可再用元素
这种方法可以让你构建应用
由不同设计中可再用的元素
这种应用构建方法更快而且利用了
不同设计而不用重写所有东西
我们会用到视图控制器
每个元素往往是一个视图控制器
这是因为视图控制器打包了很多有用的东西在一起
比如你得到了一个树的视图
不仅是单个视图而是一整个树的视图
和所有它们的约束一起
可以连接到其他的视图控制器
于是你可以用segue跳转到另一个不同的视图控制器
或者呈现某个东西找到父视图控制器
之类的
这里可以和应用的其他部分建立连结
你可以连接到模型对象或者一个对象
代表网路接入之类的
现在你应用的视图控制器有不同的角色
也许有一个容器视图控制器
它也许包含了几个被包含的视图控制器
也许你曾经写过被包含的视图控制器
然后把它们放在UIKit提供的容器里
比如导航控制器或者分割视图控制器
或者标签栏控制器等等
但你可以写自己的容器视图控制器
这让你解锁很多能量
你可以通过这做到很多事
我会展示给你如何做到又是我的设计
在我的案例中 我认为我可以有一个外面的容器视图控制器
我称它为示例容器视图控制器
在那里面我又三个元素视图控制器
每个元素有一个视图控制器
现在 想想我认为我的设计需要一点精化
如果我没有很多空间
我会需要展示这些项目的预览
我没有地方放全部文本只够放标题
那么当我点击其中一项时
或者 不好意思 轻击其中一项时它会呈现预览
会呈现展示全文的另一个视图控制器
然后如果我再轻击那个我们就遣散了它 它会不见
做出这个通过...我的示例容器视图控制器
会有三个小的元素视图控制器
我们等会儿会定义它
当我们要呈现一个时轻击它
就创建并呈现了一个新的大的元素视图控制器
如果我的应用够大我不需要做这些
我只要展示这里的大的元素视图控制器就可以了
直接在容器里
所以我的容器会有三个另一个类的实例
LargeElementViewController类
当应用动态改变尺寸时
我们要在这两种视图控制器层级的状态之间改变
在这里展示代码
我们将从被包含的视图控制器向上讲到
容器
从给这些被包含的视图控制器的storyboard开始讲
它很简单 这里有个简单带标题的视图
注意我设置自定义类为小元素视图控制器
把storyboard标识符设为小元素
就能在storyboard找到这些然后之后举例说明它们
至于大元素视图控制器它更大 其中有更多文本
同样道理
设置自定义类为大元素视图控制器
然后设置标识符
这儿是给小元素视图控制器的代码
从这开始我知道每次展示这些
就要点击来展示大的视图了
在viewDidLoad方法中有个适合的时机来做这个
我要设置轻击手势识别器
加到视图中
接下来它被轻击时会被调用
找到主storyboard
举例说明大元素视图控制器
用标识符 大元素
最后只要呈现它们
在大元素视图控制器中更复杂一些
因为我们需要知道是否在被呈现
如果在被展示需要轻击来退出
如果不是不需要
所以我把这段代码放在viewWillAppear方法里
我这么做因为能用另一个方法
isBeingPresented方法找出这视图是否被呈现
如果在被展现跟之前一样加入轻击手势识别器
当被轻击时所有要做的只是退出
现在进入容器视图控制器
我准备加额外的一个对象
让它更容易工作
叫做设计对象
设计对象可以包裹
所有描述一个设计的信息
我把它做成一个无法改变的值类出于安全考虑
写一个函数返回其中一个之后它无法改变
没人能改变它
它允许比较
这样就可以看我想要的设计和当前显示是否不同
让我们实现它我只有一个简单的Swift结构
它有两项信息
第一个是轴
从堆视图中重复使用这个枚举可以是竖向或横向的
然后定义这个自己的枚举为是否在用小版本
或里面视图控制器的大版本
称其为ElementKind
最后这里有个只读的计算的属性
称为elementIdentifier
这只是用来告诉我用哪个标识符
做storyboard里视图控制器
最后 实现Swift里的Equatable协议
这里只是双等号函数我在两个设计中比较数据
来看它们是否相同
让我们进入容器视图控制器
然后做这些
你记得它会有三个子视图控制器
它要用这些规则来创建决定用哪个设计
然后更新
每个布局会重新评估用哪个设计
然后改些东西如果需要的话
那么这样示例视图控制器
这里有个包含三个位置的数组给三个可选视图控制器
它们开始是无值
当它一开始被创建时还没有展示任何东西
我还要跟踪记录当前展示的设计
这也是可选的 现在是无值的因为还没有发生什么
在viewWillLayoutSubviews方法中这些现在应该看来很熟悉了
得到尺寸
调用一个叫decideDesign的函数
基于尺寸返回一个新的设计使用
如果这个设计和当前显示的不同
我就把设计用到UI上改变UI来匹配
注意这和我之前讲的伪代码一模一样
不管你的应用做什么
你也可以按照这个模式来
也许你的设计中有不同的东西
你的decideDesign和applyDesign方法不同
但会按照一模一样的模式
现在把这些函数填进示例应用中
DecideDesign先决定坐标轴
我们已经讲过了对这个规则怎么做
对elementKind我将用一个不同规则
我决定选择比较应用宽度是否低于阈值的规则
选择用小的视图控制器否则用大的
这里我在跟一个定值做比较
这是一个给我应用用的例子
你不一定在你的应用中用这个值这只是一个例子
把这两样信息打包
进设计对象然后返回它
用这个设计 采用这两样
我需要找出它们是否改变了
坐标轴直接传递到堆视图
它很聪明不会做任何不需要做的事
对于elementKind我们还有些工作要做
如果有旧的元素视图控制器而且元素类型在改变
那么我们需要毁掉老的创建新的
这里我们要做的是迭代整个数组
这里我用了这个枚举函数
因为它让我们得到索引和在那个索引的对象
在迭代的同时
最后 如果我们有一个旧的元素视图控制器
需要删除它可以调用这个函数删除
到storyboard创建一个新的元素视图控制器
用设计给我的标识符创建
最后调用函数 加入新的子视图控制器
然后保存它到数组为了下一次迭代
这是最后一页代码幻灯片谢谢你们听我讲到这儿
这些是我们需要做的
来做一个运行良好的容器视图控制器
完全按照这个顺序完成步骤很重要
加入新的视图控制器时调用addChildViewController
这个方法加入这个视图控制器到自身的一列视图控制器中
然后需要加入那个新的视图控制器的视图
到视图层级中
通过运用堆视图的addArrangedSubviews方法
UIKit不会帮你做这个
也不能帮你做这个因为我们不知道
在视图层级中它该放在哪儿
只有你能告诉我们这些
最后 做完前面步骤以后你告诉那个视图控制器
它移到了新的父视图控制器那里是“自己”
要移除旧的做基本上相同的步骤
只是以相反的顺序
我们告诉它它会移到一新的父视图控制器 即无值
从视图层级中移除它的视图
最后从自身的子视图控制器中移除自己
就是这样最终给你们展示了应用
这里我们在看横屏的iPad有很多空间
我们用横向布局和大元素视图控制器
现在我划到另一个应用固定住
我的应用变小了它换到了竖向布局
我还是在用大元素视图控制器
它们和之前我们看的视图控制器一样
现在如果我还把应用变得更小
你会注意到我们换到了小点儿的设计
还是竖向 但在用小一点的设计
现在我能轻击其中一个小视图控制器
呈现大的那个如果再轻击 会退出它
这就是我的应用记住我们超越了基本的
我们真的决定了要自己完成这些
我解决了所有组合的设计
实现了每个设计
应用变换尺寸时在不同设计间动态变化
还用了可重复使用元素来完成
我的应用只是一个示例你的应用也能做到这些
我们讲过了基础展示给你Xcode能办到什么
展示了一些UIKit提供的很棒的东西
在一整套瑞士军刀一样的工具里
在实例应用中讲过了代码
可我们还只是涉及了表面
还有很多要做
看看这个URL里的示例代码
还有 如果你还没有看第一部分请回顾它
有一个“兼收并蓄的应用设计”演讲会讲到字体排印
David提到集合视图和自动布局的新特性
还有WWDC去年两年
我们讲过关于自适应应用和多线程任务
真的不想重复太多那些材料
所以请复习那些东西
那些演讲中有很多很好的材料
那么谢谢各位愿各位度过一个很棒的周五