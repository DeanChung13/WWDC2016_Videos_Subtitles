Core Location最佳实践
下午好
我是Brad 今天同大家谈论Core Location最佳实践
为了大家完全明白今天的主题我将从介绍
Core Location的主要特性开始
由于是它是被广泛使用的API这里我们将做些回顾
对新手来说
这样做挺不错不过你在会后最好查询一下相关文档
做完回顾之后 我们将会谈论最佳实践
使用Core Location
我们所有的API只能运行在iOS平台上
iOS将是我们谈论的焦点
但是呢 如果你对macOStvOS或者watchOS感兴趣
你可能想在这待一会儿
iOS上Core Location许多特性在那些平台上也适用
我们将在演讲快结束的时候特别说明
接下来 我们谈论Core Location主要特性
首先是API的授权机制
API授权是必要的
以便应用可以访问用户的位置
你以前有可能使用过类似功能
如果你看到过像上面那样的提示
Core Location正在询问用户
是否授权相机应用获得用户的当前位置
我们提供两种授权方式
你的应用可以去请求
第一个是使用期间授权
就像它的名字那样
当你的应用收到使用期间授权的时候
应用便可以获得用户的位置
当用户使用应用时
我们待会解释使用期间授权的含义
当你想请求授权的时候
你只需要调用requestWhenInUseAuthorization方法
我们还有另一种方式是永久授权
当你的应用获得永久授权
应用能够取得用户的位置信息
当你运行应用的时候
想要使用它 你需要调用requestAlwaysAuthorization方法
无论你请求何种方式的授权
你必须在你应用的属性信息列表里提供用途描述
Core Location会从你的信息列表里获取用途描述的字符串
然后把提取到的字符串作为授权提示的一部分展示给用户
你的应用要在何时进行授权请求?
假如你的应用在前台运行我们就会请求授权
这是Potluck我们的示例应用
如果你的应用在后台运行会有一个蓝色的条块
这个时候应用也可以获得授权
若你在思考该蓝色条块
我们待会会谈论蓝色条块的内容
最后 若你的应用正处理来自WatchConnectivity的消息
前台watchOS应用发出的消息
应用同样也可以获得授权使用用户位置信息
一旦你的应用获得了来自用户的授权
你的应用就可以使用我们的定位API
首先我们要谈论的是Core Location必要组件
标准的定位服务
定位服务有两个版本
一个是简化版本的定位API
当你请求定位的时候
Core Location会尽全力计算出用户的准确位置
然后将位置传递给你应用的代理
还有一个是持续提供定位服务的API
当你调用StartUpdatingLocation
Core Location会产生一系列定位更新数据
并将一系列数据传递给你应用的代理
当你使用完定位服务的时候记得停止定位更新
若不停止 CoreLocation会持续计算位置信息
你可以调整相应的参数
来控制定位服务如何进行工作
例如 延迟更新
当你允许定位延迟更新的时候
你可告诉Core Location那是可接受的
在更新位置信息的时候传大批量的数据给应用
有时我们这样做是出于功耗的原因
我们也会提供自动暂停更新的功能
默认情况下该功能是开启的
它需要做的是监测
当定位会话失效或者在一定程度上来说是无用的时候
让我们来看一下这个应用
假设用户正在使用一款跑步追踪应用
用户开始跑步但是当他们回到家 用户已经很累了
他们想要冲个澡
但是用户忘记停止当前定位会话
除非应用尝试指定操作
来监测一系列的情况
否则用户的手机会持续计算用户的位置信息
直到电量耗尽
使用自动暂停定位的话
Core Location会对类似上述情况进行监测
监测到后 会自动停止位置更新
Core Location会支持
应用在后台运行时使用标准的定位服务
当你进入到这些特殊的会话时
Core Location将使你的应用持续运行
持续传递更新的定位数据给你的应用
如果你的应用已经获得使用期间授权
我们会自动在屏幕的顶端显示一个蓝色的条块
以此标记的你的应用正使用定位服务
允许你的应用持续接收到位置的更新信息
获得永久授权的应用可以在后台运行
但是不会在顶部显示蓝色条块
当你完成你的应用后你需要停止你的定位会话
否则会有潜在的问题
为了启动一些列的后台会话
你需要在你的应用中做三件事情
首先你需要允许进行后台定位
在你应用的属性信息列表中
完成上面操作最便捷的方法是
转到Xcode的功能标签页
向下滚动到后台模式部分
勾选位置更新复选框
第二 你必须设置
将后台位置更新的属性为真
这表明定位管理器
可以启动后台定位会话
最后你需要开启定位更新
当应用处于前台的时候
如果你没有在前台开启定位更新
你不会获得用户的位置数据
如果你在后台开启定位更新将会发生什么？
嗯 你的应用很有可能需要获得永久授权
因为你的应用在后台那段时间是不可用的
此外 Core Location不执行任何操作
来保证你的应用可以在后台运行
如果你的应用需要在后台运行
你需要去开启定位会话
你可能获得位置更新信息
但是在你收到位置更新消息之前你的应用有可能会被挂起
你希望获得的信息
在启动定位服务之后我们可以使用后台监视API
我们首先要谈论的是区域监控
区域监听允许你的应用
指定一个它感兴趣的位置
Core Location将判断
给出用户是否已经到达或者用户已经从当前位置出发
这些操作持续运行尽管你的应用被挂起
或应用在后台运行Core Location启动应用
并设置为后台运行若有需要会把启动事件传递给你的应用
我们有两个版本的区域监控API
首先 我们圆形区域的监控
当你开启圆形区域的监控
你需要提供圆形的地理区域
那是应用需使用的区域Core Location尝试探测
用户从那个圆形区域的进入和退出
我们有Beacon区域监控
Beacon区域监控会发现最近
的iBeacon设备并匹配
匹配你应用提供的iBeacon设备
在另外的情况下区域监控会消耗有限的系统资源
Core Location只允许你设置有限数量的区域
请注意
如果你写的应用使用到了Beacon区域监控
单一的Beacon区域可以监控多个iBeacon设备
当你开始区域监控的时候
你需要构建一个CL区域
或者CL Beacon区域又或者一个CL圆形区域
然后将这些区域传给startMonitoring(for:)方法
在CL区域管理器上
当你处理完上一步传递相同的区域到stopMonitoring(for:)方法
如果你想使用区域监测去触发一个消息通知
你有可能会对用户通知框架感兴趣
用户通知框架有对区域监控的相应支持
通过UNLocationNotificationTrigger类
用户通知框架是在iOS 10中引入的
但是用户通知的这个功能之前是可以
通过UI本地通知实现的
如果你想学习用户通知框架的更多内容
你或许想在线观看消息通知介绍的演讲
同样的HomeKit框架提供了支持
为区域监控事件触发HomeKit场景模式
HM LocationEvent允许你触发上述操作
若你想学习使用HM LocationEvent
我建议你去看一下去年的HomeKit演讲
你可以在线观看它
在另一种情境下你只需要获得使用期间授权
来使用用户消息通知框架
或者是HomeKit框架为区域监控提供支持
通过Core Location达到区域监控
需要获取永久权限
同Beacon区域监控类似我们有Beacon Ranging
每一个iBeacon设备广播的消息有三个部分
UUID 主ID 监控ID
当一个Beacon区域事件触发了
这个消息的三部分你不会全部收到
使用Beacon Ranging你可以填充丢失的信息
Ranging对于评估有效的距离是有用的
从用户的设备到iBeacon设备
当你的应用在前台运行的时候距离估算会更准确
但可在后台用Beacon Ranging
若你想那样做要记得Core Location
不会阻止你的应用被挂起
这样 你的应用可能被挂起
在你收到你期望的信息之前
另外 如果你有兴趣使用iBeacon设备
我建议访问developer.apple.com/ibeacon
同意iBeacon license后你可以去下载
iBeacon的官方规范
如何对每个iBeacon设备进行设置使它运行良好
下一个我们要谈论的后台监测API
是位置大幅变化监控API
从它的名字可以推断用于用户位置发生大幅变化的监控
变化达到了公里的级别
就像我们介绍的那样
在Core Location上发生了不少变化 在这点上
我们相信这个API是相当独特的
许多的应用使用位置大幅变化监控
通过访问监测提供更好的服务
在访问监控主题中
访问监控利用复杂算法
来监视一天中用户逗留过并且对用户来说有意义的地方
那就是为什么我们会认为访问监控能使得应用更好的服务用户
毕竟 你会对用户逗留和花费的时间地点会感兴趣的
相对用户偶尔逗留的地方来说
当Core Location探测到位置发生较大的变化
我们做了许多工作来保证
访问监控有较低的功耗
你会在全天的情景中使用访问监控
就像我们接下来要讲的后台监控API
尽管在应用挂起的时候访问监控还是会持续工作
并且会在后台启动你的应用传递事件信息给应用
如果你想开启访问监控
你只需简单调用startMonitoringVisits方法
当你完成以上步骤调用stopMonitoringVisits
最后我将介绍地理编码的API
Core Location支持双向地理编码
将地址转换到地理坐标系
反向地理编码将地理坐标系转换
到地址
不像我们将要谈论的剩下的API
地理编码不需要用户授权 然而
如果你的应用被授权访问用户的位置信息
当需要执行前向编码时会自动使用用户的位置信息
这就是将用户地址转换为地理坐标的过程
地理编码API调用的频率是有限制的
你不能发送太多的地理编码请求
避免达到发送频率上限的最好方法是缓存查询结果
地理编码提供的查询结果
使用这种方法你不需要查询同一个地理编码信息多次
我同样建议仅对
用户的操作进行地理编解码
例如 若用户在地图上放置一个大头针
那时可以对用户位置进行地理编解码
好了 现在你已经熟悉了我们所有的API
让我们在看一下授权
如果你的应用使用期间授权或者永久授权
它可以使用标准的定位服务
这些特殊的后台定位会话
它们在前台启动
随后进入后台和Beacon Ranging
如果你的应用有永久授权
应用还可以使用后台监控API
那是区域监控和访问监控
和位置大幅改变的监控
不要忘记用户通知框架
HomeKit框架允许你进行特定区域的监控
使用使用期间授权
只需要关注可用性
我们的API均可以在iOS上运行
在macOS上你可以使用标准的定位服务
圆形区域的监控
位置大幅变化的监控和地理编码
在watchOS上我们支持标准的定位服务
和地理编解码 最后 在tvOS上
你可以使用单一定位API和地理编解码API
好了 让我们开始
使用Core Location最佳实践
用户的隐私是十分重要的部分
关于使用Core Location
定位信息是高度敏感的信息
它描述了我们生活和工作的地方
我们大多数时间和谁在一起
当使用Core Location时你必须尊重用户的隐私
那是值得反复强调的
在使用Core Location时你必须尊重用户的隐私
Core Location使用授权系统帮助用户保护他们的隐私
除了获得用户的许可你可以获得你们的位置信息
抱歉 用户的位置信息
这是尊重用户隐私需要做的第一步
你需要确认你的应用没有请求过多的信息
比满足用户实际请求需要的信息
同样 你必须清楚告诉用户你在请求什么
你使用这些信息的目的是什么
你的应用需要做两件事情
若你的应用要使用Core Location
首先如果你要同服务器进行对话
尽可能使用隐蔽查询
让我们看一个例子
如果你正在写一个签到应用
如果用户已经点击了签到按钮
然后你需要发送用户的确认
信息和定位信息到你的服务器在一次请求中
在用户清楚知道将会发送这两个信息的情况下
如果你正在编写一个天气应用
用户有可能对你的服务器不太了解
你能够访问到用户确认消息和定位信息
用户可以获得良好的用户体验有赖于隐匿的查询
此外 假如你想把用户的定位信息保存到磁盘上
你需要使用有文件保护功能的API
保存文件是相对简单的
从iOS 8开始文件保护是默认开启的
然而 仍然是可以创建不被保护的文件
所以你需要确认
假如你想使用户定位信息持久化
你最好不要把信息存储在未受保护的文件中
除了隐私 功耗是第二件重要的事情
需在使用CoreLocation时考虑的
使用Core Location时的功耗差别是相当大的
在一种极端情况下我们使用Beacon区域监控
的全部内容
在另一种极端情况下我们持续使用定位会话
在几个小时之内会将我们电池的电量耗尽
不管你的应用有多酷
如果你的应用耗电比预期的快
用户也不会喜欢使用你的应用的
所以 你在设计应用时 需要考虑功耗
有时候那意味你不得不牺牲定位的精确性和即时性
以便能达到用户预期的功耗标准
为了达到这个要求你必须使用正确的API
由于Core Location有许多API
你如何知道哪一个是正确的
我把它们放到了一个决策树里
会引导你使用正确的API
那不意味着它可以处理所有的情况
但它可以满足你的入门要求
你需要考虑的第一件事情是你是否需要知道用户的位置
现在 或者是将来的某段时间
假如你想在未来的某段时间使用
那样你可以使用我们的后台监控API
或者是区域监控
如果你对特定的位置感兴趣
或者访问监控假如你对用户逗留的位置感兴趣
如果你想知道用户现在的位置
那么你需要使用标准的定位服务
现在 你有许多不同的方法来使用它
让我们深入的了解其中的一些
如果你正在写一个健身应用
我们建议你使用延迟位置更新
在一个持续的位置会话中
如果你正在写导航应用
你有可能想使用持续定位的会话
如果你的应用要持续的更新UI
那么你也可能需要使用持续的定位会话
最后需要考虑的事情是你的应用
是否需要记录用户的运动轨迹
如果需要的话我们建议你使用延迟位置更新
在其他的情况下
我们建议你使用单一定位API
你或许已经注意到了底部的电池图标
那不是意味着依次执行
只是为了告诉你每次使用服务的耗电量
好了 对于授权
我强烈建议你使用使用期间授权
用户更倾向于知道你不能对他们进行追踪
除了有他们的授权
此外 你需要同用户进行交互
确认用户懂得你为什么
需要获得授权还有你会如何使用获得的授权
记住 Core Location显示一个提示
提示中包含你应用提供的用途描述
这是一个同用户进行交互的好机会
但是幸运的是 这不是你同用户进行交互的最后一次机会
你的应用需要引导用户到设置页面
Core Location只会显示
来自你应用的有限数量的授权提示
从一些方面来说
如果你想改变你的授权等级
用户不得不进入到设置界面自己进行更改
若你引导UI应用打开设置的UI
调用UIApplicationOpenSettingsURLString常量
然后iOS将会打开你应用的设置面板
对于Potluck 我们的示例应用它看来像这样
你可以看到 用户仅需要点击几下
便可以改变Potluck的授权
我们见过许多开发者被Core Location困扰
还有它对线程的要求
你需要记住Core Locatioon要求你
在一个有RunLoop的线程上创建CLLocationManager
当位置管理器初始化完成后
它会将当前的线程附加到RunLoop上
它将传递全部代理的回调到RunLoop上
现在 对许多应用来说
主线程就是唯一拥有RunLoop的线程
所以呢 在主线程上创建位置管理器是安全的
但如果你那样做 也需要特别注意的
你必须保持你的主线程是激活的以便可以处理UI事件
如果你花费了很多时间处理定位信息
那么你的应用将会卡顿
我们建议你要不间断同位置管理器进行交互
就是调用它的方法在创建它的线程里面
这样就简化了同位置管理器进行的交互
让我们看一下代码
这儿我正在请求授权
这里假定我已经在应用中加入了必要的应用描述
到我的信息属性列表里
我创建了一个位置管理器
我会使用使用授权授权
不幸的是 不起作用
原来requestWhenInUseAuthorization方法是异步的
并且CLLocationManager会自动释放
销毁显著的授权提示
这样用户根本看不到授权提示
由于管理器会在函数结束的时候释放
让我们尝试下与众不同的操作
如果把管理器作为一个静态类的属性
那样的话它将存在足够长的时间
然而 那样的话会引入新的漏洞
Swift的类将会在第一时间初始化管理器这个属性
除非我们十分小心并且确定我们可以访问那个属性
在有RunLoop的线程上访问
这将在没有RunLoop的线程上创建位置管理器
我们认为这样做会容易导致错误我们也不鼓励这样使用它
再一次尝试
我们创建位置管理器
作为视图控制器的一个实例化的属性
视图控制器通常是在主线程上创建的
在这个实例中 位置管理器
将会随着视图控制器的创建而创建
这样我们就可以确保
位置管理器会在主线程上创建
我们比较倾向用这种方式创建位置管理器
你有可能会考虑将它依附到你应用的代理上
由于标准的定位服务
在所有Core Location的API中耗电惊人
正确使用API就显得重要了
首先我们建议使用请求定位API
在任何可能的时候
其次 你需要确保获得合适的精度
可以在你的应用中设置你能允许的最大偏差
一般来说越精确的定位意味着耗电越多
举个例子 你请求的是100米的精度
Core Location通常不需要打开GPS
来满足我们的定位请求
Core Location将会给你或者尽力给你
一个比你请求的更精确的定位信息
如果说你请求一个3公里精确度的定位
这会要求Core Location
给你的定位信息是它获得的最接近的
我们建议你开启自动停止功能
我们已经对自动停止的算法进行了优化
使它能行之有效
我们会感到惊讶如果它停止了你的定位会话
当用户正在使用定位会话的时间段中
只要你对自动停止的配置是正确的
你可以让定位会话持续运行着
对自动停止进行配置设置活动选项的属性
在位置管理器上设置合适值
如果你想了解更多的内容你可以查阅我们的文档
同样 我建议不用去管或者打开延迟定位更新
延迟位置更新允许Core Location
让设备处在耗电量低的状态
被动搜集位置信息然后大批量的处理这些数据
这样做可以在很大程度上节省电量
相比于正常状态下持续定位会话来说
还有一点困惑就是你不能了解
每一步的设置是如何工作的
你可能想在Xcode中使用耗电日志
它将给你一个关于耗电的粗略统计
你持续定位会话正在运行
最后我建议你设置allowsBackgroundLocationUpdates属性
为真 只有当你
开启后台定位会话的时候
我们看到许多应用将那个属性设置为真
当他们进入到后台之后会停止他们的位置会话
这样做会有一个消极的影响
这儿 我已修改了Potluck我们的示例应用来模拟那种情况
你将看到当我启动会话然后返回到主界面
蓝色的条块在屏幕顶部仅仅持续了几秒钟
在这儿我开启了会话
然后我点击了home键有一个蓝色的条块在屏幕顶端
这样的失误可以通过简单管理进行避免
对你的allowsBackgroundLocationUpdates属性进行正确的设置
现在 我们的监控API会监控你的进程
像这样 我建议你频繁的交互
从你进程分享的唯一一个位置管理器
你有可能想附加到你应用的代理上
除此之外 我们的监控API将持续运行直到你告诉它停止
确实如此 尽管你更新应用且移除对Core Location全部引用
并且断开同框架的连接
所以我们建议不管你何时启动你的应用
你需要花一点时间思考Core Location
是否需要在后台监控你的应用
除非你确定在那个时间段
后台监控是在运行的
你需告诉Core Location停止监控
这一小片段代码
可以停止所有的三种后台监控API
如果你你正在编写室内应用
记住Core Location将会自动
允许室内定位不管何时你的应用
不好意思 是不管何时用户在室内
这只发生在如果你的路线已经被记录
如果你想你的路线被记录
访问mapsconnect.apple.com学习更多
Beacon区域监控是广泛使用的技术
可以应用到各个领域
我认为最好配合室内场景使用
它能很好的完成室内定位
Beacon区域监控允许你的应用探测接近
你已经在室内放置的地标
室内定位允许你在地图上显示用户位置
可以帮助你从一个地方导航到另一地方
在watchOS上 你需要记住
Core Location将自动利用附近的iPhone
让我们处理同iPhone的连接并且计算位置
除此之外 我们看到过许多应用的请求
在watchOS上获得永久授权
尽管可以使用完成任务
利用使用期间授权
如果你想使用永久授权在watchOS上
让我们再一次看一下
在使用期间授权
对于watchOS 3
我们在watchOS上开放了startUpdatingLocation接口
然而 使用requestLocation可以更好的服务大多数的应用
这是一个例外
在watchOS 3上可以让健身应用运行在后台是可行的
如果你长在编写锻炼类的应用
我认为startUpdatingLocation方法对你来说是比较合适的API
对于macOS来说
我们只支持永久授权
此外 Core Location将会自动显示一个提示
当你尝试获取位置信息的时候
你不需要在macOS上调用requestAlwaysAuthorization
因为Mac不会经常被移动
我认为requestLocation是你想在macOS上使用的API
对tvOS来说你可以使用三种功能强大的API
单一定位 地理编解码和MapKit
使用这些API你能获得你想要的任何东西
在Apple TV上创建良好的定位体验
但是需要额外注意的是任何信息
通过Core Location获取显示到你的应用中
tvOS设备通常放置在用户的家里
用户的家庭信息是十分敏感的隐私信息
你可从Core Location上获取的
你应当恰当使用你获得信息
不知不觉到了今天演讲结束的时候
当你离开的时候请记住四件事情
首先 你必须尊重用户的隐私
其中一部分就是通用户进行交互
确定用户理解你正在询问的
知道你如何使用这些信息
其次省电是必须的部分
在使用Core Location时
有时你不得不牺牲精确度并且延迟
以便获得用户期望的用户体验
同时能达到用户期望的耗电标准
为达到上述效果 需保证使用了正确的Core Location API
对你面临的难题来说
同样确保你使用的是使用期间授权
不论何时你都可以使用
若使用Core Location使你感到困难
我建议你看一下Potluck我们的示例应用
我们将在今年更新Swift 3它会比以往更好些
如果你想学习更多你可以访问我们的在线资料库
或者是查看相关的演讲
就这些 谢谢你们祝大家在余下的WWDC过得愉快