发挥HealthKit最大价值
早上好 欢迎来到“发挥HealthKit最大价值”
我是MattHealthKit团队软件工程师
稍后这个舞台会交给我的同事Jeff
本场演讲 我们会讲一些很棒的新功能
是iOS 10和watchOS 3中HealthKit API的新拓展
与此同时我们也会讲到一些主要的新特性
核心概念和重要的工作流程以确保
你真正可以充分利用HealthKit的价值
希望你已经对HealthKit有所了解
若你在此观看这场演讲
如果不是我们会列出之前的演讲
在这场演讲最后
供你日后参考来快速了解这些内容
但是现在我们开始讲今天的内容
在座的都知道Apple的健康与健身生态系统
在我们的用户中大受好评
人们越来越健美也越来越健康
这归功于我们将HealthKit
ResearchKit和CareKit
在iPhone和Apple Watch上与你的应用和设备结合在一起
我们想保证你们可以
一直创造这些很棒的有关健康和健美的用户体验
让我们的用户有所期待并享受其中
那么今天我们就来看看你都要做哪些事情
来确保这些体验正确而且理想
首先来讲授权
这是HealthKit所有其他功能的基础
然后是Activity Rings API在iOS 9.3下引入的
还有健康记录今年在iOS 10系统下发布的
这两个都会产生一些重要的影响
与授权相关
最后在剩下的时间里
我们会讲解各种处理数据的好方法
在你与HealthKit互动时
现在就开始讲吧
首先就是授权
若你使用HealthKit一段时间
那么这里大部分内容对你来说可能就是回顾
但我们建议你重点关注一些细节
因为它们很重要对我们过会儿要讲的内容而言
我们也会讲到一些最佳操作所以竖起耳朵听
iOS让用户能完全掌握他们的健康数据
以及哪个应用可以访问哪一部分数据
在与HealthKit互动前
你的应用需要请求许可通过HK Health Store访问正确的类型
Health Store反过来会显示
一个正确的授权UI给用户如果有必要的话
注意 用户可以随时更改给你应用的权限
在开发应用的时候一定要记住这一点
同样重要的是读授权和写授权
完全独立不相干
最后这点是有点复杂
所以我们来讲的更细一点
这里看到的是读和写的授权如何运行
如果用户同时授权你
读和写的许可给一个指定的HealthKit类型
那么你的应用可以如你所愿地查询并保存
这个HealthKit类型的数据
如果用户只给你读某个类型的权限
那么你的应用可读
但是不可改写这个HealthKit类型的数据
到目前一切都好
现在 如果用户给你改写某个类型的权限
那么你的应用可以改写HealthKit中这个类型的数据
但不能从HealthKit回读这个类型
有写的权限不意味有读的权限
但是这有一个很重要的例外
如果你的应用可改写HealthKit类型
那么你可以回读你的应用所写的内容
只是不能读其他来源的数据
最后 如果用户拒绝
对某个类型所有读和写的权限
那你就既不能查询也不能保存这个类型
最后这一点会产生重要的影响
如果用户拒绝了之前授权给应用的许可
那么你的应用就无法再读取任何
这个HealthKit类型的数据
即便是你的应用之前写的数据一定要牢记这一点
以上就是所有的技术回顾
但是这里iOS X的授权有个重要的变化
它与使用说明相关
iOS X及以后版本的应用必须为用户提供一个说明
说明他们为什么要访问健康数据
这也是再次强调了我们的原则就是用户控制数据
使用说明应当在应用的info.plist文件中声明
为NSHealthShareUsageDescription验证码
这是读取数据的时候
或者声明为NSHealthUpdateUsageDescription在改写数据的时候
换个画面来看看你如何请求授权
第一件事是保证HealthKit
可用于当前设备
比如说iPad上的应用就不行
建好这个之后
我们列举一些类型是我们想要读取和改写的
最后调出requestAuthorization
在HK Health Store里传递我们感兴趣的类型
然后处理反馈并回调
watchOS应用怎么办？
授权可以共享于你的iOS应用
和匹配的watchOS应用
请求授权可以随时进行
通过iOS代码或者watchOS代码
但是 系统授权UI
只能显示于用户的手机上
因此这就造成了重要的可用性问题
比如用户准备开始锻炼
他们可能已经把手机绑在了臂带上
如果是这样
他们很难允许你的应用发出的授权请求
所以这就不是请求初始授权的好时机
但是还有一个更麻烦的情况
如果用户使用Watch应用手机可能根本不在身边
这样的话
请求表单甚至都无法显示
因此我们建议你实际考虑一下这些问题
在开发Watch应用的时候
同样要记住请求授权调令的反馈时间
没有保证
所以在等待反馈的时候一定不要阻碍任何UI
现在重要的是提供给用户正确的授权体验
在此之上
应用可能会请求访问一些或者很多HealthKit数据类型
所以就出现了一个很重要的问题
什么时候应该请求访问一些或者所有的数据类型？
以下是我们的一些建议针对这个问题
首先我们建议你请求访问
合理的类型集合
它们要对应应用的逻辑活动
比如说你的应用允许用户监测
食物摄入量和身体指标比如BMI
要是这样
你要考虑请求访问营养数据类型
在第一次用户记录食物摄入的时候
然后请求访问身体指标的数据类型
在用户每次要记录它们的时候
这个规则也有一个例外
就是当应用有加载流程的时候
如果是这样你实际上就要
请求访问所有应用要提前使用的数据类型
因为你现在已经可以清楚地向用户解释
你的应用要用这些类型做什么
无论你选择哪个类型我们必须要建议你
在开发过程中常常测试授权
你可以简单的重设初始授权流程
通过删除应用从你的设备或者模拟器上
在建立和运行之前
这样HealthKit就显示给用户
初始授权流程从头开始
这时一定要测试
授权有没有延迟或者被用户完全拒绝
应用在这些情况下如何运行？
还有更多能力吗？
最后 如果要用一句话总结授权那就是
时刻考虑用户体验
不要在不合适的时间显示问题
并保证你的流程有意义
我们已经花了很多时间了解授权
现在我们来讲一些新特性
是去年以后HealthKit新出的从活动环开始吧
Apple开发了一个很棒的健康与健美的追踪体验
在Apple Watch上
用户喜欢它能简单地追踪主要的活动规律
改善他们的生活
在iOS 10和watchOS 3
用户甚至可以跟其他人分享他们的活动环
可以比赛
我们提供给你一个很棒的方法
来融合这个活动环体验
到你的应用里通过iOS 9.3的Activity Rings API
首先我们要开始一个HKActivitySummary对象
HKActivitySummary代表的是
在某一天的时间内用户的活动总量
这包括了他们的热量消耗锻炼分钟数和站立小时数
以及他们设定的每个目标
HKActivitySummary是授权的一种独特类型
它不是HKObject更像是一个特殊的只读类型
是你单独从组件类型请求的授权
最后这一部分十分重要
HKActivitySummary包含了一些HealthKit信息
与HealthKit类型相同：活动能量
锻炼分钟数和站立小时数
但这些都是以天为单位累加
所以如果你想要做得
更具体些 比如...
更改用户的Move ring通过改写活动能量的数据类型
或者显示精细粮食数据
给这一天的活动
这样的话你就需要请求
单独访问每个成分类型
由于ActivitySummary对象代表的活动
是某一天内的活动
它可能 或许不能对应24小时的时间段
所以我们要指定对应活动小结的日期
通过使用DateComponents对象
那要怎么做就看下面这个例子
假设我们想要获取今天的活动小结
那么就要使用HKActivitySummaryQuery
首先让日历
对应今天创建DateComponents对象
使用规定的组件时代 年 月 日
接下来用这些组件创建一个predicate对象
这将我们的查询控制在活动小结里
日期与今天对应
最后创建query传递给predicate
之后在这种情况下处理单一的活动小结
这会返回一个值
以上就是如何获取活动小结数据
但是最有意思的部分是显示环本身
要做这个 我们要使用iOS的HKActivityRingView
或watchOS上类似的WKInterfaceActivityRing
外观是这样
就像你想的那样它们用漂亮的动画来显示
调出setActivitySummary就能动了
下面讲几个使用HKActivityRingView和WKInterfaceActivityRing的技巧
首先就像iOS和watchOS上的健康和活动的应用那样
这个环在黑色背景上最好看
所以我们建议你的应用也用类似的显示
第二 如果你的应用有分享和交流的功能
可以使用HKActivitySummary的可写属性
来架构你自己的对象
并提供给HKActivityRingView或者WKInterfaceActivityRing
这样就会显示另一个用户的环形图
紧挨当前用户的环形图在你自己的应用里
最后 当你使用HKActivitySummaryQuery
记住要使用规定的DateComponents
时代 年 月 日在你的HKActivitySummaryQuery里
时间映射有时十分复杂
所以如果你有任何使用日历或DateComponents的问题
请参考上一次会议的精彩演讲
讲了很多关于授权和Activity Rings的信息
现在来实际操作通过快速的演示
在右边有一个越来越流行的应用
是给医疗小组用的叫做LoopHealth
这个应用有不一样的功能
但主界面都是dashboard里面有些很有用的信息
比如说你的医生名字
最近的预约以及一些健康知识
LoopHealth希望他们的病人每天生活得更健康
所以他们看到了一个好机会就是能把Apple的Activity Rings
带入他们的界面
这里你看到我们已经把
一个HKActivityRingView融入了应用的storyboard里
但是我们还没有写一个代码来链接到这个数据
让我们看看这有多简单
在Xcode里有个DashboardViewController
这个视图控制器是我们刚刚
在LoopHealth里看到的
现在这里很空
但是我们的确有些有用的信息可填
你看到这里有一个IBOutlet
被设置连接到应用里已有的activityRingView
这里我们导入HealthKitUI
这是一个新的框架
可在iOS的HKActivityRingView里找到
最后在这个下面
LoopHealth在应用代理中设置了适用于全应用的HKHealthStore
所以我们只要设置一个简单的计算属性
能方便我们检索需要的东西
好的 如果我们想要在应用中显示活动小结
第一件事就是请求可读许可
给HKActivitySummary
鉴于我们在读取健康数据
所以我们需要包含一个使用说明
那么就让我们去info.plist文件
添加一个新的key
我们需要的这个key叫做NSHealthShareUsageDescription
这里用简易英语写着Privacy Health Share
很好 然后只要加入一个简单的使用说明
设置全部完成
现在就可以回到DashboardViewController
再写代码实际请求授权
由于我们想让这个初始画面能立刻显示给用户
而每次用户转到dashboard的时候都要更新环形图
要做这个最好是在viewDidAppear方法里
那么我把它拉到这里
在调出super后
注意我们在HKHealthStore上调出RequestAuthorization
传递进activitySummaryType
然后作为返回调出updateActivitySummary
是为了真正获取并更新数据
现在就来执行这个代码吧
这就是updateActivitySummary的基本构成
我们这里要做的
是创建一个HKActivitySummaryQuery
请求今天的活动小结
然后把这个活动小结定义到HKActivityRingView
在收到这个小结后
首先 对应今天 创建一个DateComponents对象
由于DateComponents只作用于一个特定的日历
我们就要把需要的日历对象
放回组件对象
呃 好了
下面来创建predicate通过那个组件对象
一旦有了这个predicate就可以创建query
传递给predicate然后在返回中
获取今天的活动小结
现在只要有了这个小结
我们要做的就是调度回主队列更新UI
然后调出setActivitySummary让活动环变成动画视图
现在有了query剩下的就是去执行
就这么多
那么让我们来运行看看怎么样
很好那么你看到的第一个东西
是我们在请求访问活动小结
Health正请求用户允许授权
我们允许它读取活动数据类型
这个时候注意下屏幕底部
有个使用说明是为读取健康数据时添加的
现在就在这里显示给用户了
值得注意的是在一个真正的应用里
我们要确保这个说明已经本地化
所以我们要把它放进info.plist.strings文件
我要在这里允许授权
就像这样我们看到这个活动环
就在合适的地方漂亮的动起来
就是这么简单
就将活动环加入了你的应用
一定要检查API
下面 我把舞台交给我的同事Jeff
他会为你们讲述一个 iOS X最棒的新功能
谢谢你 Matt
大家早上好
我是Joefrey Kibuule
与Matt是同事
我是iOS软件工程师在Health团队工作
今天我很感到很自豪来为你们介绍
iOS 10的一个新功能
健康记录
健康记录提供了一个简单便携的方法
让你的私人信息能随你而动
就在你的手机上
由现在的经验来看
如果用户去看医生
并要健康记录的话拿到的是这个
一大叠文件这会很麻烦
如果你想从中找一个特定的信息的话
再近一点的时间
健康机构会给病人提供这个
存有电子信息的光盘使用起来不直观
但现在iOS有了健康记录我们就能解决这个问题
通过我们的努力推出的这个功能
为你的应用开启了新的可能
尤其是与健康记录的交流与互动
事实上在美国使用这些API
可以帮助健康机构遵守新的规定
就是要求他们给病人更多权利掌握他们自己的健康数据
首先做个概述
iOS健康记录是一个涵盖性术语
代表的是各种不同病人就诊信息
由健康机构生成
今天我们特别为健康档案添加了支持
用标准的机器可读的XML代表特定的病人就诊信息
这些包括
病人就诊总结
持续护理记录
以及手术记录还有很多
我们支持国际HL-7 CDA标准
来完成与大量不同提供者的互操作
这些文件可以在病人的在线健康门户里找到...
并且能通过Safari和邮件导入现在所有应用都可以导入了
这些文件的保存跟其他HealthKit数据一样
安全的加密在你的iOS设备上
接下来我们讲讲许可
由于每份健康文件里都包含着大量的信息
相比于HealthKit的其他数据类型我们给用户更多的控制力
访问许可是基于每个文件的
不仅仅是健康文件数据类型
在右边你看到
我们显示的这个UI可以让用户
在授权你的应用之前浏览和选择文件
这个UI会出现在任何你想查询文件的时候
以及有新文件可用的时候
如果要查询文件
并且没有任何更改
我们就不会显示这个UI给用户
那么你的查询就会立刻返回结果
如果查询文件是在
应用在后台运行的时候
我们永远不会弹出UI来授权新文件的许可
HealthKit确保了用户总是知道
他们何时授予你的应用访问文件的权限
在第一次需要授权的时候
下面来讲讲如何在HealthKit创建文件
要保存文件到HealthKit你可保存一个原始XML
到新的HKCDADocumentSample类型
我们会验证创建以保证它符合标准
并且会在失败的时候报错
我们会自动提取标题 病人 监护人和作者名字
无论何时文件被保存到HealthKit
以便更快的查询这些区域
而不需要读取整个文件
我们来看看这个例子的代码
我们要用documentData并转换为Data对象
通常这个XML的来源
是一个健康机构的服务器
接着就要创建一个新的HKCDADocumentSample
传递到Data对象
定义合适的日期
和任何附加元数据跟其他HKSample一样
之后我们要保存这个文件到healthStore
完成了
现在你的健康文件就保存到HealthKit里了
并可以在其他应用上使用
或者直接让用户用Health应用浏览
现在 我们来讲讲如何在HealthKit里查询文件
鉴于HKCDADocumentSample是HKSample的子类
现有的查询对象对你来说已经很熟悉
它们会继续运行跟你想的一样
但是 你要使用新的HKDocumentQuery
去获取原始的XML
获取原始XML成本很高
我们只在有明确要求时 才这么做
我们提供predicate支持
以便查询自动提取的域
最后 要记住
由于HKDocumentSamples不可更改
对之前样本的更改信息被看作新的样本
现在我们看个例子
如何查询HealthKit里的文件
在这个例子里我们要查询
用户保存的所有文件
首先我们要获得documentType
我们要传递CDA identifier给
HKObjectType上的forIdentifier方法
再创建HKDocumentQuery
你要留出额外字段用来筛选和排列文件
让它们按照你想要的顺序返回
然后执行查询
以便获取HKCDADocumentSamples
从HealthKit返回
我要强调一点在这个特定的例子里
就是includeDocumentData定义为假
要定义为真
只能在你需要完整原始XML文件数据的时候
现在我们来讲一些最佳的操作
在处理HealthKit健康文件时
首先 检查验证错误
在每次创建KCDADocumentSample的时候
这个报错告诉你我们为何不能转换
原始XML到可用样本
下面 你要用Health应用验证
你导入的文件是否正确保存
以及自动提取的域是否存在
这样你就知道
基于这些自动提取域的查询
所返回的正确样本是否符合你的预期
最后请求原始XML数据只能在必要的时候
不发出请求的查询包括文件数据
会返回自动提取的域
这可能是所有你和你用户所需要的
用来唯一识别HealthKit文件的工具
要了解更多HL-7 CDA标准的信息
请访问屏幕上的这个链接
现在我们来换个话题
给大家一些处理数据的基本指南
你知道 HealthKit实际上是个中央存储库
在这里你的应用和其他应用可以帮助用户
管理他的健康记录数据
你在云服务上的应用
也许能直接连接到云服务上的其他应用
这时就需要一些特别的考虑
这里我主要探讨三点
有关数据处理的问题
第一 同步数据
第二 追踪更改的数据
第三 数据迁移
先看第一点 数据同步
你要一直使用HKAnchoredObjectQuery
以便用户处理新样本和已删除的样本
从而与HealthKit更新一致
Anchor像一个书签来标记
最后一次请求查询以获取数据
你可以保存这个anchor
方便下一次创建新的HKAnchoredObjectQuery
你可以给每个样本类型开放一个查询
只要你感兴趣
然后传递一个备选的更新处理器
以便持续处理新样本和删除的样本
不需要重复查询HealthKit
但是 要是为了更好的用户体验
为了在应用第一次启动时能显示新的UI
或者是为了让你的云数据保持同步
那么应用必须也要处理新样本和删除的样本
即使当前不在运行状态
这就是HKObserverQuery
和HKAnchoredObjectQuery一起发挥作用的地方
我们来看一个图表例子
那么这里有四个主要步骤
来处理后台更新
分为两个阶段
设置和执行
第一步
注册后台更新
这要用于每个你要操作的样本类型
第二步打开ObserverQuery
设置完成后
ObserverQuery同时监测
HealthKit里的新样本和删除的样本
当新样本生成时你就要开始第三步
你会从observerQuery收到一个回调
然后执行HKAnchoredObjectQuery
来获取新样本和已删除的样本
那么第四步
调出observerQuery的完成处理器
以便告诉HealthKit
你已经完成对后台更新的处理和传送
接着你会继续循环第三步和第四步
以便与HealthKit保持更新
现在 我们来一步一步看代码
第一步要注册后台更新
每次启动应用的时候都必须这么做
所以我们建议你在应用中写didFinishLaunchingWithOptions
然后你从HKObjectType获取step的quantityType
然后传递给HK Health Store的enableBackgroundDelivery
以便传递stepsType以及你想要更新的频率
请注意后台传输时间没有保证
应用要选择它能处理的最长频率
以便保护用户的电池寿命
还要注意的是这个API是iOS特定的
后台更新在watchOS上不可用
第二步
传递step的quantityType
创建HKObserverQuery
这里有自定义的updateSteps方法
我们可以用它来获取
HealthKit检测到的新样本和删除的样本
之后就要执行这个查询
就这样设置阶段完成了
HealthKit就可以监测HealthKit中的新样本和已删除的样本
那么...
在我走过舞台生成健康样本
是步数样本的时候
我们深入了解一下updateSteps方法
好让我们知道要如何做
才能获取新样本和删除的样本
首先来创建一个HKAnchoredObjectQuery
传递给stepsType
同样有一个predicate是额外字段
让你能筛选出你想要的那个样本
然后调出handleSteps方法
以处理新样本和删除的样本
更新anchor
以便下一次创建HKAnchoredObjectQuery
然后调出completionHandler
宣布获取新数据进程已完成
之后执行查询
最后 第四步
调出completionHandler这是observerQuery给我们的
是为了让HealthKit知道我们已经收到
并且处理了后台更新
就是这样
现在你的应用启动时就会有新的UI
然后同步云数据
按照这些步骤
下面来讲讲追踪更改数据
你要使用UUID
来追踪唯一的HKObjects
独特的识别符要定义在每次创建对象的时候
而且要一直存在于这个样本的生命周期
将UUID记录到你的个人数据库
或者...
同时存到本地设备和云端
这样你就能知道哪个样本是一样的
当样本被删除的时候以Health应用的锻炼为例
你要一直监测这些更改
以确保那些相同样本也会被删掉
同样也是在本地设备和远程云端
还要保证以后的同步操作不会重新添加这些已经删除的样本
这可能会产生两个问题我要重点讲一下
关于如何避免重复
第一个就是预填充数据
预填充数据是抱歉 加载
预填充数据是一个好方法让你在加载过程中
节省用户的时间通过拉取那些
已存在HealthKit里的信息
用户可以验证数据
在HealthKit里需要的话也可更改
但是问题在于如何保存未更改的值
要保证再次保存数据是用户的意愿
另外一个潜在的问题就是数据摄取
无论从其他应用还是HealthKit
记住只能选择同一个来源的信息
并且最适合你的应用
HealthKit有很棒的隐私性这是我们的用户已经认可的
但是只有你知道哪个来源对你的应用最好
一定不要保存其他应用的数据
以他们的名义
只写一遍你自己的数据避免重复数据
通过明确哪个应用有权编写
这个规则有一个特别的例外
有时候复制是有意的
比如数据来自多个来源的时候
步数数据不仅由用户的手机生成
还会由Apple Watch生成
你可以使用HKStatisticsQuery和HKStatisticsCollectionQuery
来自动消重
按照Health应用中首选数据来源排列
这样的话用户体验就会连贯流畅
健康数据视图在整个生态环境里都一致
现在我来讲讲数据迁移
假设你发起了一个新的Bluetooth体温计
和可把数据写入HealthKit的应用
你的应用上架App Store已经几天了
但是用户发现了一个问题
在某些情况下
本来要保存98华氏度
实际却存的是98摄氏度
这温度有点高
这种情况下
我们就知道如何迁移数据来解决这个问题
我们首先要找到旧的样本
写一个新样本
一定要更新存在别处的UUID
然后删除旧样本
现在有几个新事项关于数据流动
在iPhone和Apple Watch之间
从iOS 9.3开始用户手机产生的数据
现在会同步于所有与之匹配的Apple Watch
Apple Watch现在反映的是
存在HealthKit里的最新的健康数据
为了实现这个任务
样本会定期修整
基于其在Apple Watch上的结束日期
所以一定要保存样本
特别是HKHealthStore最早许可之后的样本数据
这是为了保证你的样本能正确地保存
并同步到用户的设备
最后同步的时间没有保证
所以你的数据要保存在iPhone或Apple Watch上
不能两个都存
我现在把舞台交还给Matt
由他来最后总结一下这场演讲
谢谢大家好好享受 WWDC 吧
谢谢你 Jeff
在总结之前
我想再着重讲一个很棒的辅助特性
这是iOS 10和watchOS 3中全新的特性
轮椅辅助
辅助功能是Apple十分看重的部分
所有的用户都应当享受我们的产品
和最极致的体验
这样强大的活动追踪体验在Apple Watch也不例外
iOS 10和watchOS 3就包括了这种强大的运动跟踪功能
它可以自动记录数据对轮椅使用者十分有用
现在你就可以使用并记录这些类型
在与HealthKit互动的时候
首先这是个新的特性数据类型
HKWheelchairUse
它定义了用户是否使用轮椅
它的值可以是是 否或不确定
然后我们有一些新的数量类型专门针对轮椅使用者
其中包括轮椅移动距离和推动次数
你可想象成是步数
最后我们具备对轮椅使用者十分有用的新的锻炼类型
这些包括轮椅的步行速度和跑动速度
当轮椅使用者佩戴Apple Watch时
watch会自动记录推轮椅的次数
并写入新的推动次数类型
另外
站立环形图中对应站立小时数的数据类型
变成了转动小时数
要注意 轮椅走的距离只能在
轮椅运动时 自动记录
还要注意
用户的轮椅状态会随着时间改变
这十分重要尤其当你要查询历史数据的时候
这种情况下你要保证同时查询
轮椅类型和非轮椅类型
这样就不会遗漏大段的
用户历史信息
总的来说我们一直努力保证
我们所有的产品和体验能为所有人服务
你也是
我们强烈建议你
去考虑这一十分重要的用户群
通过在你的应用里支持并提供这种轮椅数据类型
我们今天讲了很多
现在回顾一下
授权十分重要对保护用户隐私而言
但是保证好的用户体验绝对是重中之重
时刻记得授权
在开发应用时而且一定要经常测试
然后我们讲了如何应用Apple的健康与健身生态系统
通过把活动环带入你的应用
通过Activity Rings API
不管何时与HealthKit互动都要仔细处理所有情况
正确的同步删除 复制这些数据
以保证用户的数据始终精确
并始终符合你的预期
最后不要忘了好好利用这些新出的好功能
就在今年发布的iOS 10和watchOS 3中
特别是轮椅辅助
这是我们认为十分有意义的功能
如果要了解更多关于我们今天所讲的话题
又或者你有任何问题请访问这个网站
这里有更多资源可用
也不要忘了了解下其他相关的演讲
还有往年的精彩演讲
会让你更快了解HealthKit
感谢你们创造了这些出色的应用
让我们的用户生活更加健康
希望你喜欢WWDC的其他演讲