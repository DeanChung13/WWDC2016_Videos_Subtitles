Apple File System介绍下一代存储的快照
好了 欢迎各位
我叫Eric Tamura旁边是Dominic Giampaolo
我们会向各位讲一下Apple File System
这是关于今天展示内容的一些流程图
我会稍微讲一下介绍与动机
为什么我们决定去构建它
我们添加了一些新功能作为Apple File System的一部分
我们简短地展示这些新功能
然后在结尾我们会
谈谈你可以在应用中使用的一些新API
我们开始吧
就像Sebastian提过的
Apple File System可用在macOS Sierra的 WWDC 版本
你们昨天都得到了
并且它会作为开发者预览版技术
于秋季macOS Sierra的发布之后 在其上面使用
什么是Apple File System？
它是我们下一代文件系统是我们为Apple产品所构建的
你可能会关心这个
因为它会在watchOSiOS tvOS和macOS上运行
对于预期的受众
我们预计你们要么在这些平台上是初来乍到
或者是一位长期开发者
但我们打算涵盖
新文件系统中所有高级功能的足够细节
这样你能跟得上
该产品的一个特点是我们想从
从Apple Watch一路扩展到Mac Pro
我们也想利用闪存和SSD存储
因为几乎我们所有的产品都使用SSD
最后 其构建有加密作为主要功能
从最开始到现在我们将这个想法变为现实
你可能会想那HFS+怎么办
我们目前把HFS+作为主文件系统发布
但其最初设计到目前几乎有30年之久
你们当中有多少人希望我们再发布30年的HFS+？
很好 所以HFS+设计于
软盘和硬盘代表最新技术水平的时代
自此世界改变了很多
现在我们使用SSD 而且其它下一代存储技术也不断发展
HFS+的数据结构相对来说也是单线程的
所以B-trees要依靠大分块来访问或改变它们
并且数据结构也相对死板
我们的意思是 像是HFS+中的文件记录或目录记录
差不多相当于其他文件系统的索引节点
是固定的 这是为了添加新的字段来扩展文件系统
加入新的功能我们必须付出代价
那就是向后不兼容的卷格式改变
我们的意思是如果我们给HFS+添加新功能
回到10.5版本 然后附加那个相同的文件系统
这会发生什么？
所以如果我们关心向后兼容
以及向前兼容我们开始考虑
也许打造完全崭新的东西是有意义的
所以我们考虑出新的东西
我们想要的是为Apple产品专门设计和优化的东西
其他文件系统良好地执行着其他目的
尤其 文件管理器或者企业级别存储服务器有很多的功能
对于Apple产品没有太大意义
我们通常在所有产品上使用单个存储设备
而且我们的规模广泛
在Apple Watch上你有更少的DRAM和存储空间
与Mac Pro相比Mac Pro有数十GB的
潜在DRAM以及数TB的存储空间
所以我们想要灵活动态的东西
而且在那些平台上运行
我们想打造的其它东西
我们想新加并增强安全功能
我们现在已经在iOS上发布了HFS+的一个版本
使用每文件加密
所以在存储空间上每个文件都是不同加密的
不同于这个文件系统上的其它任何文件
我们想更进一步
我们会在稍后的展示中深入谈谈这些功能
最后 我们想加入一些新的通用文件系统功能
是应大家要求而且我们认为是十分重要的
对于我们平台的未来
在我们讲这些新功能之前
我想给大家简短介绍一下
Apple存储软件的样子
在文件系统和存储方面我们会谈论HFS+
但我们涉及的范围不止是HFS+
这里实际上有很多辅助技术
构成了我们的存储软件
在一开始我们有HFS标准
这几乎至今有30年之久
若干年后我们添加了HFS+
不过我们加入了死机防护
我们还加入了区分大小写变体的日志
我们还增加了CoreStorage这给了我们全盘加密
以及Fusion Drive这将SSD的速度与
硬盘的容量相组合
我们不能忘记所有针对iOS的变体
我们有针对iOS的HFS+变体以及支持
刚才谈到的每文件加密的变体
所以我们的目的是所有这些技术
都被一样东西所取代那就是Apple File System
我来稍微谈谈Apple FileSystem中的一些新功能
这个简明的视图囊括了我们现有内容
我们有一些改进的文件系统底层技术
HFS兼容性 空间分享克隆文件和目录
快照和快照恢复
一项我们称之为目录大小快速调整的功能
原子级安全存储基元以及加密
你不必把它们都记下来
我们会在下面的幻灯片中进行深入讲解的
首先来谈谈一些改进的底层技术
改进的文件系统底层技术
首先闪存和SSD优化
在我们所有的设备上在我们所有的iOS设备上
而且很多Mac上是内置有SSD的
我们想尽可能地对固态硬盘进行优化
其还有死机防护功能APFS或Apple File System
采用崭新的写入时复制元数据方案
所以每个元数据写入都写入到稳态存储上的新位置
我们将其与事务处理子系统相组合
这保证了如果断电如果机器死机
或糟糕的事情发生你会看到一致视图
关于之前的磁盘内容或者什么变更都看不到
我们有现代64位原生字段
所以索引节点号扩展成了64位
我们有时间戳现在也是64位
我们支持纳秒时间戳粒度
我们也支持Sparks Files在Apple File System上是首次
所有指向磁盘上分块实际位置的
文件和目录记录也扩展成了64位
我们的数据结构也是可扩展的而且允许未来扩展
所以我们讨论HFS+的一件事是
其数据结构相对死板
在APFS或AppleFile System上
代表核心索引节点的数据结构现在是灵活的
所以字段是可选的或我们可能尚未将其创造出来
所以我们在过程中可能选择添加的新字段
会被正确识别成不支持
或是我不清楚你是否将那个存储
附加到当前版本的macOS Sierra
这样我们可以添加新功能
不需要担心会破坏掉向后兼容
这还允许我们拥有可选字段
在一些系统上单是文件的存在
就足够传递出一些信息
如果你有0字节的文件你不一定需要
所有机器指向哪个分块在磁盘上
因为它们不需要所以这些字段是可选的
这也优化于AppleSoftware生态系统
我们想添加功能并优化API
这对我们平台的向前发展极其重要
我们也有低延迟设计
在文件系统中 延迟通常是延迟与吞吐量之间的折衷
我们选择倾向延迟这一边
这么做是因为我们想让你的应用
当用户在桌面上点击应用或在手机上按下应用时
你想让应用快速出现响应迅速
而且有非常明快的动画
这个的原因是当你进入文件系统
我们想确保你会尽快得到你想要的回答
最后我们有原生加密支持内置于系统内部
我们提过了 在HFS+上使用的是每文件加密
不过它们是通过扩展属性存储在磁盘上的
在Apple File System上并非如此它们现在就如头等公民一般
是文件系统内部的一级对象
这就是底层技术的略微介绍
HFS兼容性
如果你们的应用在HFS+上运行良好
我们打算让它们继续运行
不需要你那边进行任何更改
Apple File System会支持并替换HFS+的功能
这里有个星号
因为有三个功能我们不会继续支持
一个是交换数据另一个是Search FS
然后第三个是“时间机器”的目录硬链接
不过其他剩下的API和行为都会得到支持 和HFS+一样
现在我想稍微讲讲空间分享
这是Apple File System上新添加的一项功能
我快速调查一下在座的有多少人
有Mac或者在Mac上使用一个以上的分区？
非常好 我们也是在内部我们做的一件事
是我们想让开发版本的OS在一个分区上
我们想让稳定发布版本在另一个分区上
或你可能选择将主目录放在一个分区上
其他你不在意的不同数据放在另一个上面
不过我们得知了一件事通过分析
来自用户选择性输入的数据收集
以及向Apple设备报告的统计数据
大多数终端用户不这样做他们只有一个分区
他们不做的原因是这很困难
你必须清楚知道如何给磁盘布局
在你设置的时候而且更换它是比较昂贵的
此外 一个分区上的空闲空间如你所知
不会转换成另一分区上的可用空闲空间
所以我们使用名为空间分享的功能来解决该问题
我们看看这个例子
我们会在流程中说明这项功能
假设你在下载最新最棒的猫咪视频
从朋友那里得来的在网络上用AirDrop下载
假设文件变大越来越大
事实上大到你的空间都被占满了
在你运行的那个分区上
这种情况下你做不了多少事情
若空间占满那就是占满了
你可以做的一件事是之后马上完全销毁
那个分区然后扩张分区1
我们来看看
我们可以销毁分区2分区1扩张
现在你有足够的空间来继续下载猫咪视频了
但这也很不灵活而且会带来一些问题
如果你下载的文件不在分区1上
而实际上是在分区0
这种情况下你会下载文件
越来越大就算你有空闲空间
或者愿意销毁分区2上的内容
我们可以销毁它不过这样分区0不会扩张
因为它并不靠近任何我们刚才
腾出来的空闲空间
所以我们认为这是可以使用空间分享解决的问题
在Apple File System中我们想出了这一基本概念
我们称其为容器很合适的名字
因为它包含了卷或单个文件系统
在这个实例中Apple File System的容器
代表了最低级别的功能
这个封装了我们的块分配器
以及我们的死机防护子系统
假如说我们有分区0在分区中占有一定
数量的空闲空间
卷可以扩张或缩小
但在所有这些情况下空闲空间会动态地调整成
在你进行请求时可用的大小
还可在容器中创建一个以上的卷
这会逐渐占用更多空间
如果你想在这个时候
扩张卷0你就能做到
如果你询问系统中还剩多少空间可用
绿色长方形底部的区域就是
开发者们 要注意
这个东西稍微不同于
你之前计算空闲空间的方法
如果你使用一些范例例如使用总共存储大小
减去已用空间来得出空闲空间
这不会再起作用了因为容器上的
其他卷也在参与空间分享
此外 你也没有必要将所有已用空间加起来
接下来 我请Dominic上台
它会给大家讲讲克隆文件和目录
嗨 我叫Dominic我将讲解一些
我们在APFS中有的其他高级功能
首先 我们来谈谈克隆文件和目录
这里我们有一个文件TOP_SECRET_APFS.key
这在Eric的主目录中
它引用了两个数据快
现在如果Eric想做这次展示的档案
它在这一时刻中存在着他可以复制数据
通过全部读取然后再写出来
这很明显会消耗CPU电力以及磁盘空间使用
相反 在APFS上你可以克隆文件
通过克隆文件你复制了数据的引用
而不是实际数据
所以很明显会更快而且如果是大文件
你不会使用两倍的空间
你使用的是大小完全一样的空间
外加用于数据额外引用少量递增空间
克隆在文件系统中能保证
如果在原件或克隆上进行修改
文件系统会将那个数据写入新的位置
所以克隆原封不动
所以这一点要着重记住
当你有克隆时你在克隆的时候
你没在使用任何额外空间
随着你继续进行修改你会开始使用越来越多的空间
此外 因为APFSiOS和macOS
支持应用程序捆绑包中的文档
APFS还会允许你克隆整个目录层级
文档捆绑包是一个目录
其内部包含着一套文件
APFS可以原子级别地克隆它
接下来我们谈谈快照
这里我们有文件系统的另一个代表 其中有两个文件
BikeRacing和CoffeeOrigins
BikeRacing有两个数据块CoffeeOrigins是一个
如果我们捕获文件系统的快照我们现在有一个分离的
可独立挂载的只读的文件系统副本
这代表在捕获快照的那一时刻文件系统中的数据
跟克隆很相似 如果在活动的文件系统中进行写入
文件系统会将那个数据放入新的位置
保留快照的完整性
同样的 如果我们删除CoffeeOrigins.key
尝试清空一些空间文件系统无法回收那些数据块
因为如你所见快照的文件系统
继续引用这那些数据块
这是一个很重要的考虑
开发者在快照上工作时需要留意
因为当一个文件被删除如果它存在于
快照捕获的时刻那数据块就无法回收
所以快照可以致使你使用所有的磁盘空间
如果你不定期回收它们
我们预计开发者可能会将快照
用于获取稳定只读的数据副本
将其用于备份不过我们也想知道来自
开发者的其他反馈关于快照的其他可能用途
所以请在12:30到实验室和我们见面
让我们知道你会如何使用快照
现在我们谈谈快照恢复
这是APFS支持的另一项功能
我们有相同的文件系统状态
不过我们决定不要这样
我们想恢复这基本上是全局撤销
我们想回到之前捕获这个快照
那一时刻的文件系统
你可以标记文件系统恢复到快照状态
下一次挂载的时候
文件系统会返回到捕获这个快照的那一时刻
之后允许你继续从那时开始进行更改
你能看到CoffeeOrigins.key回来了
而且在其他文件上做出的更改也被丢弃了
快照会继续存在
而且你可以无限次数进行恢复
好了 我们来谈谈目录大小快速调整
这项功能回答了一个问题
那就是目录层级会使用多少的空间
应用程序会经常需要计算这个大小
用于操作大小调整给用户提供进程
这样做的一个明显方式是打开目录层级
递归性地迭代所有的内容
然后查看所有项目的大小加在一起
当然 用户会非常乐意更快一点得知那个答案
在下一张幻灯片上
如果你把注意力集中在屏幕的左边
当Get Info面板显示出来你会看到上面写着 计算大小
几秒钟之后就会填充上大小
这是我们想提升的地方
文件系统可以跟踪它
很明显 你可以保存目录层级的大小
外加目录本身不过这有一个主要问题
如果安全地在链上更新父目录以及父目录的上级？
我们深入到了文件系统的内部
不过当你在修改时锁定了子目录
你无法再锁定父目录应为这会违反锁定顺序
文件系统总是会从父目录向子目录锁定
从来不是从子目录到父目录
如果你反着来做就会出现死锁
而APFS绕过了这个问题
如果问题是将大小和目录一起保存
那我们将大小保存到别的地方
所以通过分隔保存大小
我们可以使用原子级操作来将大小更新在
由文件系统所维护的单独记录中
而且不会违反任何锁定顺序
额外的大小记录会带来少量增量成本
不过这基本与IO一起可忽略不计
好了 接下来我们要谈谈原子级安全存储基元
第一个例子只是一个基本文件
这是当今安全存储怎样在普通文件上起作用的
这里我有MakeMoneyFast.key
我想出了一些聪明绝顶的新方案
能快速赚钱
当应用程序保存那个数据时
它会被写入边下的一个临时位置
当应用程序得知一切都写好
并安全存在磁盘上它会请求文件系统进行重命名
文件重命名一直都是原子级的
文件系统保证要么完全发生
而且是安全的要么根本不发生
此外 文件系统会负责删除
文档先前的版本
这对普通文件来说非常好但如果你有
文档捆绑包该怎么办？
我们这里有一个文档捆绑包ClutchConcertReview.rtfd
这是一个目录其中包含着文档的资源
今天会发生的是假如我去看Clutch表演
他们的表演十分出色然后我更新我的评论
这个改变写出来了但现在发生的是无法
将一个目录在另一个目录上面进行原子级重命名
因为POSIX语义不允许这样
如果有东西在目的地内部
我们开始玩一个脱壳游戏
首先 将文档移动开活动的文档
这时如果出现什么差错然后应用程序崩溃
或者系统断电用户数据就消失了
之后 应用程序将数据移动到位
最后 它要负责删除目录的先前版本
文档捆绑包
所以这不是原子级而且不安全
这个问题困扰我们
很长时间而且我们想改进它
在APFS上我们推出了新的系统 叫做renamex_np
用于非POSIX 这允许目录的原子级安全存储
现在当应用程序将数据写入其临时位置时
并请求执行重命名操作APFS会原子级地负责交换
并删除文档的先前版本
所以现在是原子级的并且安全
当然 作为开发者你可能不会借助于
这种低级的系统调用
因为已经为大家在Foundation中采用好了
所以你会在APFS上享受到这个改进行为的益处
接下来 我将谈谈加密
就如Eric所说有了HFS+
在Mac上 我们使用叫做CoreStorage的层 位于HFS下层
提供全盘加密以及其他内容
这是一个相当复杂的层而且功能很多
在iOS上我们有不同的变体
保存加密密钥和有效扩展属性
这些加密密钥会与
iOS设备上的加速AES硬件一同协作
来提供每文件加密
这是个有点复杂故事有两个非常不同的代码库
在APFS上 我们想尝试提供更完成的故事
在我们所有的产品上
APFS支持多种级别的文件系统加密
不过首先最简单的级别
我们一开始就做好了那就是没有加密
所有的数据都是以纯文本写成
所有数据和元数据都是以纯文本写入磁盘中的
下一级别是每个卷配有一个密钥
所有敏感的元数据和数据都是使用相同的密钥加密
这基本上相当于全盘加密
我们支持的最复杂级别是多密钥加密
这里 所有敏感的元数据是由
单个密钥加密密钥不同于用于加密
单个文件的每文件密钥
此外 由于快照和克隆的工作原理
APFS支持每盘区加密
所以文件的每个区域都可以使用自己的密钥加密
这是独一无二的 而且没有其他文件系统支持此类功能
此外 这允许我们统一我们的加密故事
在我们所有的平台之间
好了 之后我将交给Eric
好了 现在我将快速展示
WWDC 版macOS Sierra上的Apple File System
可能最简单最快速的试验Apple File System的方法就是
使用磁盘镜像我们首先那样做
你能看到在命令行上输入了hdiutil create-fs APFS
这会指定 给我创建APFS类型的磁盘镜像
我们指定大小然后进行稀疏束
这会出现警告因为这是尚在开发中的项目
我们希望你清楚
你使用的东西目前并非是100％完成的
这时它会提醒我我说是
你这就创建出磁盘镜像了如果我附加
你可以在桌面上检查它进行Get Info
你能看到文件系统的类型确实是APFS
这可能是最简单的方式如果你只想
得出某个东西来尝试
接下来 我想展示一些其他
我们加入的更高级功能
关上它
这里我有两个优盘它们只是普通的优盘
你可以从任何标准办公用品商店买到
我插入一个
其中一个是HFS+格式另一个是Apple File System格式
在这两个上面都进行Get Info
这样在操作过程中你能看到空闲空间
这个时候我有意大利旅行的一些演示照片
这两个的目录层级中都有不少存储空间
首先我们开始复制HFS卷中的
最新版iTunes然后在APFS中也是同样
开始复制 进行中
你能看到这里的进程条不过APFS已经完成了
因为它在后台使用克隆
Finder已经采用了所有新的克隆行为
所以如果你进行复制Finder会自动替你
在后台进行克隆
然而HFS还没有完成
好了 我可以用演示照片做同样的事
你在这里能看到这里有几张照片
它们全是几MB的大小
注意这里的空闲空间3.35GB空闲
如果我进行复制这实际上会替我克隆
你会看到空闲空间根本没有减小
接下来我将展示捕获快照
这用叫做SnapshotUtil的工具
这会在公测版发布之后供大家使用
抱歉 这个要作为根运行
好了 现在我创建了一个快照我能用SnapshotUtil-s检查它
你能看到它现在识别出APFS_Snap
我在这次演讲之前创建了一个挂载点
我会挂载这个时候的快照
你能看到这个快照出现在桌面上了
这包含系统文件的只读视图
与捕获快照时候的样子相同
现在 在APFS卷中我将创建一个临时文件
大家好 我是临时文件
保存 关闭你能看到它在这里显示
在APFS卷中这是挂载的读写
但在快照中不存在
相应地 我还能删除一些演示照片
将它们移到垃圾箱 然后删除
空闲空间实际上还是没有减小
因为现在它们被快照的存在所固定
如果我想删除它们我还要删除快照
好了 这简短展示了AppleFile System的实际效果
好了 我们来谈谈一些新的API
我们为支持AppleFile System而添加
首先 我们预计可能大家会熟悉这一个
如果你使用Foundation或FileManager
这两者都得到Swift增强如果你用copyItem或replaceItem
它们会采用克隆或安全存储语义
我们刚才自动给你描述了
你不需要做任何事不费任何功夫
它会自动弄清你使用的文件系统是HFS+
还是Apple File System而且只有在合适时使用行为
但是 如果你断定Foundation或FileManager
无法提供你所要的确切内容
你可以到下面 我们有一个叫做libcopyfile的库
这个支持深层级的复制
我们在有克隆功能之前
已经用它很多年了
复制文件支持新的位叫做COPYFILE CLONE
这与其下方的5或6个位相同
我们决定将其选择性加入
因为如果你使用像这样的专门库
你未必想要ACL和扩展属性
以及剩下的内容完完全全地复制过来
而克隆会隐式地复制所有那些东西
这个库也会自动为你调用克隆
如果后端文件系统支持
如果不支持 那它就会继续像往常一样运行
这些就是新的安全存储API
renamex Np和renameatx Np是新的系统调用
支持安全存储基元
你可以在Man Pages上使用在macOS Sierra版本中
如果你想去看一下Man Page它们就在这里
这些也是克隆API
所以克隆文件及其变体支持克隆文件和目录
说一下兼容性我们认为最简单的方式
访问Apple File System镜像就是使用我给你展示的hdiutil
目前只在macOS Sierra上的
命令行中可用作为开发者预览版技术
还并未特意地完全为Disk Utility做优化
所以最快的方法是使用hdiutil create-fs APFS
你可以得到磁盘镜像然后附加它
你还可用diskutil APFS增加容器
创建容器添加卷 删除卷
任何你想对容器本身进行的低级操作
最后 我们还有FS检查这是我们在研发的功能
这个能够验证文件系统
也可以进行修复
所以还会继续开发该功能
macOS Sierra中APFS上目前的一些限制
这只会在数据卷上支持
现在不支持从AppleFile System启动
现在Apple FileSystem不支持“时间机器”备份
FileVault和Fusion Drive支持还尚需等待
当前的卷格式只能是区分大小写的
如果你不确定你的程序是否需要不区分大小写
请试一下创建磁盘镜像或设置在
Mac上的分区里试着证实它并将你的应用
在Apple File System中运行然后告诉我们它的效果
其他对兼容性的备注
Apple File System无法通过AFP分享
如果你想使用文件分享我们建议你使用SMB代替
作为未来首选的文件分享机制
OS X Yosemite或更早版本
将无法识别AppleFile System卷
所以请不要把AppleFile System实例
带回到OS X Yosemite或更早版本
你必定会碰到你不想回应的对话
所以macOS Sierra会有开发者预览版的
Apple File System
这会是开发者预览版技术
一旦macOS Sierra于今秋发布
现在你可能会好奇我们有什么样的推出计划
各位如何在你们设备上获取AppleFile System？
我们会讨论这个的
升级到Apple File System
你想要这些我们展示过的出色的新功能
那你怎样获得它们？
一个可能方法是要求所有人
所有用户备份系统保存起来
确保所有东西都绝对安全
然后擦除卷擦除设备
还原 放入新的OS然后从备份中还原
这个过程会花数小时
然后期盼所有东西在还原后
都完好如初
我们不会这样做
相反 Apple会提供就地升级路径
从HFS+到Apple File System
在此期间 用户数据仍保持在其原来位置
Apple会将崭新的APFS元数据
写入HPF+空闲空间我们这么做是为了死机防护
这个操作可能会耗时几秒或者几分钟
在这段期间如果设备断电 死机
任何发生的糟糕事情我们想要设备上的数据
安然无恙仿佛什么都未发生过一样
所以Apple File System Converter会尽可能以原子级别执行操作
这不是完全瞬时完成的
但随着操作持续进行
如果设备死机
我们的打算是使其完好如初 归于原样
Apple File System 将于2017年在所有设备上以默认程序发布
总而言之
Apple File System会是默认的文件系统
用于2017年的所有Apple产品
它超现代 有死机防护支持空间分享
我们支持克隆和快照增强的数据安全功能
像我们刚刚讨论的多密钥加密
它也专门优化和设计
用于我们所有设备里的Apple生态系统
你可以得到更多关于Apple File System的信息
在我身后的URL中
那里会有开发者指南以及一些示例代码
这样你可以看到克隆文件和目录的实际演示
给在座各位说一些要点
Apple File System即将到来 2017年将在转眼间来临
我想请大家将你们的应用在Apple File System上测试
用你们昨天获得的macOS版本
试着在Apple File System上运行你们的应用
请告诉我们这一过程的进展如何
如果你要报告任何错误请使用Bug Reporter报告
通过传统的手段这样我们可以调查
我们都希望大家会像我们一样喜欢它
还有一些相关演讲
如果你有兴趣学习更多关于安全功能的内容
在我们的平台上特别是iOS
我们建议你可以看看iOS Security实际工作原理
将于今天4点钟在本会议厅开始
至此 这就是Apple File System
我们迫不及待想知道各位会如何使用它