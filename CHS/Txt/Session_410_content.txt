Xcode下可视化调试工具
大家下午好
欢迎来到“Xcode下可视化调试工具”演讲
我是Chris在Xcode调试工具UI小组工作
众所周知 调试工具存在已久
就在不久以前
调试工具看上去还是这个样子
此后不久 UI进行了改进
调试工具开始看上去像这个样子
但是快进到今天
调试工具变得更加强大
同时也更容易操作
其中大部分要归功于它变得更为可视化
这帮助我们更为快速更为直观地解决问题
今天 我将和同事们一起讲解
Xcode中最新的可视化调试工具
首先 快速概述一下讲座的内容
我们将会讲解Xcode的新功能
能报告工具发现的运行时问题
我们还将讲解最新的增强功能
对Xcode的视图调试工具所作的
以及如何把自动布局调试变得前所未有地简单
我们还将讲解一个新功能可以可视化调试
就是状态机 以及做出的增强
在FPS性能测量方面从而更好帮助调试SpriteKit
以及SceneKit帧率问题
最后 将讲解Xcode的一个新功能
可视化内存图形调试工具
首先来看问题
我们都知道 编译时发生的问题比如编译器警告 错误
和静态分析问题 都已经得到了
Xcode用户界面充分支持和测试时发现的问题相同
然而 不能同理可证
调试和分析工具的扩展组件发现的运行时问题
这些工具都已经被遗忘
最多会被用来在控制台上记录输出结果
不是最好的体验
我们认为可以做得更好
在Xcode 8我们引进了运行时问题
运行时问题把工具在运行时发现的问题上升
和UI里传统编译时问题同等地位
活动查看器会如此显示
当发现任何运行时问题时并报告问题数量
我们增强了问题浏览器包含新的运行时范围
这区分了运行时问题
和传统的编译时问题
比如编译器警告 错误和静态分析问题
在运行时 会看到什么样的问题呢？
在Xcode 8 我们处理三个范围
首先 线程问题
我们全新的"Thread Sanitizer线程检查工具"
可检测线程问题在应用中 在运行时
UI布局问题
我们扩展了Xcode的视图调试工具
来自动检测模糊的布局问题
在应用中 在运行时
以及 内存问题
全新的内存图形调试工具
一会儿我们会详细解释
它可以自动检测内存泄漏
在应用中 在运行时
所以 如你在周一所听到的
Xcode最新的运行时的检查工具
就是"Thread Sanitizer线程检查工具"
"Thread Sanitizer线程检查工具"帮助我们检测和更好地理解线程问题
在应用中 在运行时
它可以检测到的问题有 数据竞争
使用为初始化的互斥锁来自错误线程的解锁
线程泄漏及信号处理器的不安全调用等
发现以上任何一种问题都会被报告为运行时问题
"Thread Sanitizer线程检查工具"是一个强大的全新的运行时分析工具
为了更充分地理解它可以观看关于"Thread Sanitizer线程检查工具"
以及静态分析演讲
视图调试是一个非常优秀的范例
在Xcode的调试工具中变得越来越可视化
仅仅在过去几年 关于UI调试问题
我们从必须要读取调试输出
到一个像这样的工具台 变成这样
Xcode的可视化视图调试工具有非常好的用户体验
对于调试和理解可视化UI问题
如果你还从未使用过
当应用在运行Xcode时
只需点击调试工具条下方的“调试视图层次结构”按钮
Xcode将会快照你的应用
快照你的视图层次结构
把它在一可互动的3D场景里分解出来
在那里你可以在3D画布里检查视图层次结构
还可以在分级视图里
你可以检查所有视图和限制的属性
利用检查器
在Xcode 8我们让视图调试——
你猜？比过去任何时候都更好
快照现在比过去快了近70％
所以你可以从运行应用
切换到调试UI问题 前所未有的快
渲染复杂布局
和转换视图在Xcode 8里更准确
谈到准确Xcode现可渲染模糊视图
比如画布上带高保真视觉效果的视图
因此在Xcode的视图调试工具所见到的
更为准确地反应了在设备上所见到的
在beta 2将会看到改进的模糊渲染
我们添加了便利性 比如可以直接跳转
从视图类到源代码
只需在对象检查器上点击跳转按钮
浏览过滤也变得更为强大了
可以通过任何标签上的文本或按钮标题上的文本进行过滤
或者你可以通过类名进行过滤也包括超类名
比如 如果通过UI标签进行过滤将会返回
所有视图层次结构中该UI标签的所有子类
甚至可以通过内存地址进行过滤
这样可以迅速找到特定的视图
只需知道其内存地址
自动布局调试也进步显著
检查器可以显示更多和自动布局相关的属性
限制在画布上表现得更好
我们用标记渲染限制
来代表不平等或长宽比关系
我们还用虚线渲染非必须限制
所以你可以很容易分辨
画布上的必须限制和非必须限制
但是我最欣赏的自动布局调试的新功能
是它结合了运行时问题
Xcode现可自动检测模糊布局问题
在视图层次结构里 在运行时
它是怎么运作的？
当快照视图层次结构时
Xcode将会检查每一个视图并将准确决定
其中任何一个视图是否存在模糊布局
以及模糊原因
如果检测到任何布局问题将会作为运行时问题报告
所以可以看见它们显示在活动查看器里
还可以看见它们在运行时被列在问题浏览器里
此外 视图层次结构一览将会标记
任何有布局问题的视图因此可以轻易找到它们
在整个布局层次结构下
对于一个选中的视图尺寸检查器将会包含
任何布局问题的细节 以及所有
参与该视图布局的限制
我们对Xcode新功能感到十分激动
它可以在运行时自动检测模糊布局问题
我想为你们做一个演示
我有一个iPhone连在Mac上
Xcode已经启动正运行一个叫DemoBots的项目
这是我们今年更新Swift 3中的示例代码项目之一
在右边 我正使用QuickTime Player
把手机屏幕映射在桌面上大家才都可以看见
我们的团队的任务是把一个游戏指导说明书
添加到DemoBots所以做了一个“如何开始游戏”界面
然而 在演讲前我们发现了一些问题
现在是调试这些问题的好机会
点击“如何开始游戏”
这就是“如何开始游戏”界面
不怎么样是吧？
显然 存在一些问题 来看一下
可以看到DemoBots图标在后面
上方有一些错位的文本
我们需要来调试 从哪儿开始？
给你们一点提示
DemoBots是一款用SpriteKit编写的街机小游戏
但该屏幕是用UIKit和自动布局产生的
所以最好的开始的地方是在
在视图层次和布局结构上
我们一起来操作
回到Xcode
最底部
找到“调试视图层次”按钮
点击
它将暂停应用 快照整个视图结构
在编辑器里
我们返回了刚才屏幕上所见的准确表达
为了查看内部结构
我们只需把它拖进画布
把完整的视图结构开拓成3D视图
在这里 可看到构成该屏幕的所有视图
后面的视窗
容器视图 视觉效果视图
及构成“如何开始游戏”说明书的视图
放大看一下
我们看到DemoBots图标在后面
还有很多标签和图像
我们迅速可以了解 通过旋转
找出屏幕上的一团乱的原因
所有这些视图都彼此叠加
所以我们的布局有问题
传统的工作流程是
检测每一个视图及其限制
然后试着确定产生布局问题的原因
但在Xcode 8我们有一些额外的可用信息
注意上方的活动查看器Xcode报告
我们有运行时问题
可以点击它
将会打开问题浏览器
但你可能也注意到了左边这里
在调试浏览器里
Xcode标记出一些视图
它告诉我们 这些视图有布局问题
直接来看这里
如果选中第一个视图
画布中高亮显示
然后打开该视图的尺寸检查器右边这里
在这里 我们可以在限制中找出布局问题的原因
该视图有一个模糊垂直位置
也就是说自动布局没有足够的信息
在垂直维度明确定位该视图
很典型 限制缺失
来看下一个视图
有着一样的问题 垂直位置模糊
下一个视图也是
若我随机点击一些别的
似乎它们都有同样的问题
我很好奇 这个列表的第一个子视图
并没被标记显示有问题
可能是查看布局代码时的一个线索
现在我们来看一下
如果选中父视图
类名是InstructionsLayoutView
这就是负责显示“如何开始游戏”屏幕的视图
来看看它的源代码
一种简单的方法就是选中视图
右边这里
可以找到 对象检查器
该按钮可以直接跳转到视图源代码
如此操作
关上检查器 多留出一点空间
我们来看看InstructionsLayoutView的源代码
首先开始循环
说明书的每一个部分 都是模块对象
描述了页眉部分 段落部分 和图片
代码把它们从上到下显示
对于每一个部分 修复视图把它添加到视图层次结构
然后是水平布局的源代码
但在水平布局中没有发现任何问题
所以略过此处 到垂直布局
这里 有两条通路
第一条是 对于第一个子视图
把它限制到容器顶端
我们已经注意到 第一个子视图
并未报告含有任何问题
所以 该限制我们认为是设置正确的
来看看条件的另一面
这里 查找可选的previousPartView
如果找到了就把它指定给上面的局部变量
然后可把每个视图限制到它上面的视图
看上去这就是缺失的限制
让我们来看看为什么该条件不为真
选中previousPartView我们从它开始
我将使用Command-A选中Command-F跳出搜索栏
检查该变量的实例
可以看到其在顶端被定义
它被指定为nil 在for循环之前
在下方这里也检查
在外循环外又检查一次
来处理底部限制
但看上去我们从未指定给它
快速修复一下
在循环结尾 我们可把previousPartView
设定给当前的partView
然后在每一个循环中前一个视图都可用
都将指定给上面的视图
我们将从视图到其上面的视图之间建立一个限制
停止 重新运行 看看结果
我把QuickTime移到前面
请注意Xcode能给提供多少信息
甚至在看到代码之前
{\an2用视图调试器查看结构内部
看看有什么问题
更重要的 Xcode会主动告诉我们
应用里的某些布局问题
哪个视图有问题 尤其是什么样的问题
这在我们查看代码之前就有了很多信息
因此我们可以迅速锁定需要查看的代码部分
现在应用正在运行点击“如何开始游戏”
看上去好多了
我们有了一个美观的说明页面
现在Xcode可以报告运行时错误
采用和检测编译时问题时一样的UI
今年 Xcode的视图调试器也有了显著的改进
包括更为迅速的快照和更为准确的渲染
在复杂布局和模糊视图方面
在自动调试方面也有了显著的改进
尤其是 Xcode现在可以
在运行时自动检测模糊布局问题
Xcode的视图调试器支持各种UI
在Mac OS iOS和tvOS上
在你的项目中试一下
我们很乐意得到反馈关于它如何在调试流程中给你带来帮助
下面 我想把讲台让给Tyler
他将为我们讲解调试状态机和帧速率问题
谢谢大家
谢谢Chris
今天 我将为大家演示一种增强调试体验的新方法
利用状态机快速查看
及Xcode 8中FPS性能检测的内部机理
今天有很多有用的快速查看
已经在Xcode 7里可用
这些为你提供了实时查看各种对象的可能
在调试过程中
你甚至可以自定义快速查看
来检查应用内部对象
现在在Xcode 8
我们扩展了内置的快速查看包含了状态机
首先我们来看状态机到底是什么
以及如何在应用内部使用
你们当中一定有很多人已对GKStateMachine很熟悉
去年它是GameplayKit的一部分
可用于Mac OS iOS和tvOS
状态机允许你更为简单地定义复杂行为
通过把它构建成为一个有向图
在状态机内
你为每一个状态提供一个离散行为
可以像播放一个动画这么简单
或者更复杂的 比如一个AI
然后对每一个状态定义条件
状态机可以据此从一个状态转换到另一个状态
组装完成后状态机可以产生极其复杂的行为
然而 在代码里它们也会变得很难辨识
由于它们复杂度的增加
简单的状态机可以迅速进化得更为详细
在Xcode 7.3对调试状态机的支持
只局限在当前状态和它的转换
而现在在Xcode 8
我们可以可视化完整的状态机
因此可以一目了然当前状态
这非常有用 不论你正在
操作简单的状态机 还是你在操作
更为复杂的状态机
利用快速查看你可以迅速调试潜在问题
并且准确评估状态机的当前情况
现在我们把焦点转到性能
任何时候新建任何形式的游戏或视觉应用
保证良好性能都是关键
在Xcode 8我们扩大了FPS性能测量
在这方面进行帮助
你们当中很多人应该已很熟悉
Xcode 7的FPS性能测量
在报告一开始
可以看到实时状态的数据
这包括了帧速率
即当前每秒被渲染的帧数
以及GPU利用率
可以看到哪部分的GPU利用率最高
以及CPU和GPU的帧时间
可以帮助表明是CPU绑定还是GPU绑定
现在 除了实时数据
Xcode 8还提供了时间线历史
SpriteKit和SceneKit帧时间
为CPU和GPU两者
在iOS和watchOS都可用
这里很棒的一点是我们分解了CPU的帧时间
以及CPU的各个部分
所以可很清楚地看到有多少时间
用于渲染 或运行更新循环
评估行动和物理甚至多少时间是空闲的
当应用暂停时
可以滚动查看所有性能历史
就可看到它随着应用的运行如何变化
如果有某一个特别感兴趣的地方
你可以深入检查更多的细节
查看确切时间点
来看一下如何在应用里应用
我们找到了布局问题
在“如何开始游戏”菜单点进游戏本身
这个游戏的目标是把所有的损坏的机器人
变成好的机器人
要达成目标 我有一道光束 射向它们
就可以把它们重置为好机器人
我们看到这里有一个坏机器人在追我
我用光束射向它
可看到它变成好机器人了 显示为绿色
但是我看到还有光束
显示在机器人上面 不该有这样的情况
既然我们用状态机来管理光束行为
这是一个很好的对象
来使用状态机快速查看这里是怎么回事
我将会暂停应用浏览BeamComponent
我们用BeamComponent来新建和更新
管理光束行为的状态机
在更新循环里添加一个断点
继续游戏 马上进入断点
因为应用已经暂停 可以进入调试区
找到状态机的实例
快速查看它
在这里 我们看到整个状态机
蓝色是当前所处状态即BeamFiringState
灰色是所有
组成状态机的其余状态
我们还可以看到每个状态之间的转换
我立即注意到的是有很多转换条件
指向BeamFiringState但没有转换指出去
也就是说 一旦进入到开火模式
就没办法离开
来检查BeamFiringState
看到底是怎么回事
删除断点 关闭调试区
切换到BeamFiringState
现在来看更新循环
这里可以看到有一些转换逻辑
既指向CoolingState又指向IdleState
但在下面的方法里
检查我们要转换的状态是否有效
总是返回假
这是不正确的 因为我们想要转换到
冷却状态或者空闲状态
现在修复该问题
通过检查想要转换到的状态
是否是两个有效的状态之一
回到游戏当中
检查这是否是我们看到的问题
当我们转换到FiringState满足条件退出时
我们应该可转换回IdleState
进入游戏
向坏机器人开火
把它变为好机器人
可以看到光束已经不在游戏者头上了
看来问题已经解决了
我们还发现了游戏存在性能问题
底部有很多地面机器人
我发现如果游戏者被机器人袭击
性能会急剧下降
我将切换到FPS性能测量
这样就可以在运行时实时看到性能数据
可以看到在这里 显示的是目标帧时间
本例中 是16.6毫秒
也就是保持每秒60帧的帧速率
可以看到一部分时间被用在渲染的时间
以及用在运行客户更新的时间
还有CPU空闲时间的回旋余地
回到游戏 移到右边
有一个敌人机器人 我会让它袭击我
试着重现性能问题
现在切换回性能测量
看看更新循环里是怎么回事
我发现很长一段时间被用于评估操作上
事实上 现在帧速率大幅下降
暂停应用
来看看其中的问题所在
既然已经暂停 我可以及时滚动
回到帧分解
看看应用里之前的帧时间
可以看到在主菜单
只有小部分时间用于渲染
大部分时间都在空闲
游戏中的分解部分也是如此
我们已经找出了性能问题
可以点击 然后按住来查看细节
对于我们发现的性能问题
在这里 我看到帧时间是36.2毫秒
71%都用于评估操作
也就是说在游戏中可能存在一个或两个问题
我们可能在场景中有一个操作
占用了非常长的时间来评估
或者 可能会有很多操作造成更新循环产生瓶颈
现在已经知道更新循环里哪里有问题
我们知道该如何利用状态机快速查看
来调试游戏中碰到的问题
以及FPS性能测量如何显示
更新循环的具体哪里出了问题
现邀请Daniel Delwood
上台为大家讲解全新的内存图形调试器
我们用来确定
操作问题从哪里产生然后可以对其进行修复
谢谢你 Tyler
我很激动能够为大家讲解
Xcode 8里全新的内存图形调试器
我很喜欢视图调试器
它是可以更好理解应用的工具
如同视图调试器了解视图层次结构
内存图形调试器可以帮助了解内存
以及内存之间如何互相引用
它想回答的一个核心问题是
为什么某些对象还存在于堆里？
对象互相引用
你知道 现在引用
和注释已经成为自动引用指南世界的重要问题
我们该如何解决存在
不需要的对象 泄漏的对象或遗弃的对象的问题
有一些命令行工具 比如Heap
Heap将快照你的进程
遍历检查 找出不同类型的摘要
以及进程中对象数量
你甚至可以使用“地址”标记来寻找特定类型的对象
获取实例列表
一旦对某个实例感兴趣
可以用leaks中寻找关于连接问题的信息
是否未被引用？是否存在泄漏？
是不是从全局位置有一条通路
在应用中一直指向该对象？
在任何此类调查时你都可能需要进一步的细节
比如栈分配追踪
可以用malloc_history获得
而这些都不是可视化体验
这就是我们为何要把这三个工具集成到
内存图形调试器的IDE
快速浏览一下它的构成
左边 浏览器中显示堆类型信息
用来开始分析
中间的编辑器
显示连接问题
右边 我们用来显示
通过检查器显示栈分配追踪
讲完以上 回到演示例子
从Tyler讲到的地方开始看看我们是否
能看到他所看到的操作问题
好
现在我们在FPS性能测量
看到那些应用里可能出错的动作
我们可以直接查看
通过选择内存图形调试器按钮
在调试菜单栏
左边这里
浏览器显示了我的应用中所有不同类型
分配在应用中的
它们按照模式被分解 然后按照类型
每一个对象 都有一个实例
在本例中 我对搜索堆感兴趣
这很容易做到
在过滤器里打字 搜索“操作”
出现了在SpriteKit里出现所有类型
我们看到有很多操作——559个
应该是操作太多了的问题
而不是只有一个一直在运行的操作
选择其中一个对象
编辑器显示问题的答案
即为什么这个对象还存在
在这里 它显示了根操作图形
可以追踪选中的对象
回到左边 回到应用根目录
可以看到它被一个SKC序列反复引用
还带有一个数组
我还可以发现更多问题
这里有带一些操作的SKNode
这是该SKNode的部分操作列表
可以点击 然后快速查看
如果想查看关于该操作更多的信息
我可以选中它 拉出检查器
检查器将显示一些内存细节
比如类名 地址 层次结构
如果是其它对象的子类
我想知道该操作是在哪里新建的
这样就可以找到该位置
折叠该栈追踪 进入代码
这里有一个函数refreshHurtAction
一个HurtAction在运行
可以用快速帮助看到该操作已经添加到
结点的操作列表当中
但实际上我只想有一个单机操作
并确保它取代之前的操作
所以修复很简单
我将使用withKey变量
取代“playerAction”
快速帮助将会显示是的 这就是我想要的
如果一个操作在使用正运行的统一键值
它将会在该操作加进来之前被移除
很好
这是一种非常简单的方法对某个特定类型进行调查
但是我还注意到另外一点
当我点击内存图像调试按钮时
运行时问题浏览器提醒我有一些问题
点击该提醒
来到新的运行时问题浏览器
显示在应用里有很多泄漏
我先从模式里定义的一个类型开始
比如这个LoadSceneOperation
选中它 图形没有显示同样的风格
它显示了一个引用周期
它是一个泄漏的对象
从应用里的位置无法访问它
需要找出哪些
泄漏的对象正在彼此引用
快速来看这一点
有一个带有内部状态的操作
它在引用一个完成块
作为该块的一部分 有一些捕捉
正在强力引用LoadSceneOperation
有意思
如果点击该模块 我可以看到回溯轨迹
马上去那里
在这里
我的LoadSceneOperation的完成块
我甚至有一个“unowned self”捕捉列表
但是图形显示该self没有问题
问题是LoadSceneOperation正在捕捉自己
就在该模块中
此处修复也非常简单
只需要捕捉unowned
就可以继续了 但是
可惜的是 这不是真正的解决方案
因为是整个模块 我的LoadSceneOperation已要结束了
如果它执行了该模块
LoadSceneOperation将会结束其生命周期
不会存在很长时间
也就是说如果用dispatch_async回到主队列
该LoadSceneOperation可能已经不可用
系统将会崩溃
只是想告诉大家有时这些捕捉会有点复杂
需要一点调查
希望内存图形调试器
也能够帮助你检查问题
现在我们再来讲讲泄漏和废弃内存
内存图形调试器是一个调试模式
它会暂停 开始对目标应用进行检查
这样应用就不会继续运行并改变状态
可以有一个恒定的视图
也可以让你做一些诸如快速查看的操作或者PO不同的对象
在你进行调查时
而且在所有平台上都可用
如我所演示的共有两种不同的图形风格
第一种是 根路径图形风格
它将显示引用过的内存
也许你废弃了它
应用中不同的根 比如全局变量
和正在运行的线程是如何引用该内存的
利用渐进展开模式
它让你从对象开始回溯不同的中间对象
找到那些不应该存在的引用
对未引用或泄露的内存来说第二种风格是周期视图
其目标是帮助显示正强引用自身的对象
会再一次找出引用问题
在查看器里看到的栈记录集成
它无法自由记录所有的分配和释放
这是一种需要选择加入的诊断
进入方案编辑器 选中“分配栈记录”
在“诊断”标签
它将记录所有的磁盘分配和释放
方便之后的查询
但是对于内存图形调试
你不真正需要所有的分配和释放
之前的分配模块通常也没什么用
所以在最新的OS中有一个新特性“实时只分配模式”
这样做开销较低
它还让你获得这些有用的信息
在进行内存图形调试时
它将把“分配栈记录”标识为“lite”
在目标环境下
关于内存图形调试你们还可能喜欢的一点
我们引入.memgraph文件类型
当在调试某个问题时
你并没有时间去好好研究
你想把它存下来
或者让团队里的其他工程师也来看看
在Xcode里你可以点击“文件”菜单
选择“导出内存图形”
这将保存所有
连接信息和堆信息
以及一些VM数据 到一个文件
之后某个时间 你可以双击它
加载到Xcode 看一看内存图形
但是用这种方法 调试器里没有进程
所以你无法回溯 也无法快速查看对象无法PO对象
但这仍然是出错后分析应用的一项非常强大技术
如果你想持续集成
在命令行中有一些选项
只要运行leaks-outputGraph选择一个路径
保存到一个.memgraph文件以便之后使用
leaks vmmap heap都可以读这个文件
好了 到了有趣的部分
我们来讲讲有用的小技巧
这一切都建立在泄漏结构上
说明图形是保守的
我们非常非常小心避免在对象没有泄漏时报告其泄漏
避免误报
在图形里可能会看到多余的引用
这些引用将被显示为灰色 表示未知
可能是有效引用 可能不是
可能不止提供元数据给工具
当你查看这些图形时 要多多注意
提高准确度的一个方法是
就是开启“内存涂鸦”
该方案下的另一个诊断工具
它的作用是当分配自由
它将把内存写入 你就不用了
未初始化的内存写入新的模块
对于那些已知的强引用来说
在图形里会粗体显示
Swift 3实际上有很多可用反射元数据
我推荐大家使用
因为它绝对更为准确
在理解捕捉和引用方面
最后 我应该关掉内存图形调试器
暂时关闭所有检查工具
比如地址检查工具或"Thread Sanitizer线程检查工具"
有很多的信息
这是不是一个开始编写应用的好地方？
验证你的期待吧
还有别的某种类型的对象要期待吗？
对象是不是在你想要时被释放？
你的类型还有没有泄漏？
如果你对某一个对象很感兴趣
目标就是找到一条不应该
连到对象上的路径
还有两种常见模式
来自块和闭包的强捕捉
或图形中潜在的向上引用
这些需要被标示为“weak”或“unowned”
讲了很多信息
我非常感谢你们的倾听
Xcode 8中全新改进的可视化工具
我们对此非常激动
如更好的可视化调试 用视图调试器
用FPS测量以及内存图形调试器
今天就在应用中放手一试多多解决问题吧