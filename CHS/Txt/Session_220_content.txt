在iOS上使用触摸输入
早上好
欢迎来到在iOS上使用触摸输入
我是Dominik Wagner我是工程师
在UIKit团队我会告诉你
如何最好地利用我们的进展
关于Multi-Touch和Apple Pencil
首先让我们回顾一下最近新发布的硬件
从去年WWDC起我们发布了很多东西
比如带3D Touch的iPhone 6s和6s plus
允许你使用每种触摸的能力
我不会就此谈太多
但是你可以了解Peek和Pop带来的良好体验
在今天晚些时候的演讲“窥视3D Touch”中
我们介绍了更快的触摸扫描从iPad Air 2和iPad Pro开始
给我们一个时间分辨率是显示刷新的两倍
我们还介绍了针对Apple iPad Pro的Apple Pencil
这个惊艳的设备 谢谢给你精确的定位
为你的绘画提供很好的精度
它有更高的时间分辨率是240赫兹
它允许你使用它的倾斜和方向当然还有力量
我们的算法组在手掌拒绝上做了很好的工作
所以你可以在绘画时休息手掌不需要考虑它
还发布了带有Siri Remote的Apple TV
它的轨迹主要驱动UIFocusEngine
和你与Apple TV的互动
但是你还能使用跟踪板通过使用游戏控制器框架
用来做为一个游戏控制器和获得跟踪板的绝对位置
最后你还可以处理跟踪板
在UIKit触摸处理方法中的间接触摸
我也不会谈太多这方面但有很好的Apple TV技术演讲
还有昨天的Apple TV游戏控制器输入
那我要讲什么？
我要讲你怎么开发绘画应用
我们会从头开始开发一个绘画应用
并且我会谈到所有针对Apple Pencil的新API
所以你能访问所有的新数据
我们会一步步告诉你
向你展示你可以采用的不同步骤根据你看到的
这个应用的全部代码是可以下载的
所以你不用担心幻灯片上的代码晚些时候和它玩一玩
向SpeedSketch问好这是我们的例子
SpeedSketch是一张纸你可以在上面绘画
它完全支持iPad Pro上的Apple Pencil
和iPhone 6S上的3D Touch
它还工作在所有以前的iOS设备上
让我们先谈谈模型
这是一个笔画这是UIKit如何看到取样
每个点是一个实例
和可变的UITouch是同样的实例
你传递给触摸处理方法
并且我们建模我们的数据为一系列笔画
因为UITouch是
一个可变量表示一个触摸序列
我们需要在触摸处理方法中从UITouch中复制出数据
到更静态的东西中
所以我们会创建一个笔画取样
做为我们的数据结构最深层的元素
它现在只包括UITouch的位置
稍后我们会填入额外的数据
我们会把那些取样放入一个笔画
是一个笔画取样数组
我们有一些方法来添加它们
因为我们想用笔画
作为我们的主数据获取结构它还有一个状态
当用户在绘画时它是活动的是完成
当用户完成时可以是取消
如果另一个用户操作造成它被取消
所以我们可以抛弃它而不是保留它
最后我们把这些放入一个笔画集合
它是一个笔画数组我们会添加完成的笔画
要使它成为我们的应用的一个完整的数据模型
我们要把活动笔画做为一个可选项
这样我们可以用这个笔画集合作为一个完整应用的数据模型
下一个问题是在哪获取那些笔画
基本上你有3个地方可以这么做
第一个是UIGestureRecognizer
一个定制的UIGestureRecognizer子类
下一个要寻找的地方是一个UIView子类
触摸到达这里
你可以顺着响应器链向上处理我想
我想你想想这个的顺序
若你可以用一个定制子类或UIGestureRecognizer来做
第二用UIView并尽可能接近你能得到事件的地方
最后才不得不沿着响应器链向上
这就是我们要做的
我们创建一个子类独有的笔画手势识别器
我们会把我们的主视图控制器作为目标
然后在行动方法中
我们会用笔画触发一个视图重绘
让我们开始创建这个手势识别器子类
要做的第一件事是导入UIGestureRecognizer子类
这向你暴露UIGestureRecognizer的内部
这样你可以创建子类
但要小心不要使用这些内部
在UIGestureRecognizer以外
比如状态设置器被暴露如果你导入它
你不应该在子类以外使用它
否则手势系统会工作异常你会有许多问题需要调试
让我们添加我们的笔画做为主数据结构
在我们的手势识别器中获得笔画
并实现触摸处理方法
因为我们做很多相似的事情在总计4个触摸处理方法中
我们会有一个辅助方法实际上查看这一系列UITouch
决定我们是否对触摸的其中之一感兴趣
把它加入我们的数据模型就是复制它的位置
在此时作为一个取样并返回给我们
如果你对此感兴趣
我们会在这个触摸开始函数中使用辅助方法
并把状态设置成开始
对UIGestureRecognizer这是反常的
因为在状态可能和状态开始之间的时间
是不同的手势识别器发生竞争的时间处理这些触摸序列
但是对我们的笔画我们很想它马上开始
当触摸向下传递时
所以这是我们要做的
在touchesMoved中我们做相同的事并把状态切换成已改变
注意在手势识别器中
每个状态改变触发一个行动方法即使是相同的
我们对触摸结束和取消做相同的事
最后我们重置手势识别器用一个新的笔画取代之前那个
这样我们能获取下一个
做为好公民我们总是调用super.reset
让我们在视图控制器中使用它
在viewDidLoad函数中我们设置笔画手势识别器
把我们自己做为目标动作是笔画更新了
然后把它加到主视图
在更新回调中我们从手势中获得笔画
然后设置到我们的视图中
现在就做这些
我告诉过你笔画集合
只是提一下我想要保持它简单
所以让我们看看它给我们什么
我总是喜欢这一刻一些东西第一次运行
你看到的是这是Pencil在屏幕上的位置
让我们看一看
这看起来不好
发生了什么？
让我们仔细看看慢动作
这完全不是我们想要的
我们看到了什么？
我们有Pencil的位置
我们和最后画的那条线之间有非常非常大的距离
我们画的线很长而且不断改变方向
这不是我期待的
我们有很好的时间分辨率
为什么它看起来是这样？
显然我们错过了一些事件
因为多个原因我们错过了一些事件
其中之一是我们的绘制引擎的实现很幼稚
它每次都绘制一个完整位图以及每次有事件进入时
它的速度不足以跟上显示率
我们会晚点谈到这方面
最重要的是我们没有用iOS 9的新API
我们应该这么做来获得我们错过的事件
因此我想再仔细地看看笔画
让我们再看一次
这里的所有取样我们都想有并且看到
在我们的触摸处理方法中我们永远都得到开始
和结束 但是在中间我们得到touchesMoved
我们没有得到所有的作为取样进来的touchesMoved
这是有原因的
如果我们发给你所有的touchesMoved
即使你阻塞主线程
你会看到一些东西类似于重播
触摸互动的重播如果你是进行实时互动
这完全不是你想要的
你想要发送给你的最新位置
那是我们通常做的
那是我们在OS 9之前做在
实际上我们抛弃了其他事件
如果你在主循环中不够快
那么你看不到它们中的任何一个但是从iOS 9开始
我们使你能访问以前的事件
另一个原因是我们的数字转换器现在比显示更快
我们不想在我们有的每个数据点都给你一个事件
你会进行太多工作
所以我们试着把它们合并在一起
每次屏幕刷新发送一个
你现在能做的是使用你从API获得的实时触摸
查询错过的触摸
这将包括你当前查询的触摸
这样你就有个完整一致的图像
这些触摸被称为合并触摸
你为所有的触摸事件做这件事
也为开始和结束这么做
因为你要待在相同的地方
或者处理你的实时触摸或者合并触摸
因为视图里有方法比如之前位置
是之前触摸的引用如果你混合搭配
那你会遇到问题
现在我们知道怎么获得它们让我们在代码中这么做
这个方法是coalescedTouches为了触摸UIEvent
你在触摸处理回调函数中获得事件
这个结果可选不是因为我们会给你无值
任何时候如果你只有一个触摸而且我们没有合并触摸
这是因为你可以要求任何不是事件一部分的UI测试
那么你会得到无值
你一定会得到UITouch
至少你放入的一个即使我们没有合并更多
所以你不需要在这用一个if语句
让我们把这些用在代码中
在我们的代码中 看看感兴趣的触摸
我们进行了触摸追加我们需要做的是循环
在合并触摸中并且追加那些
这给你所有数据
让我们看看它看起来是怎样的
很好 现在我们真的有所有数据了
让我们比较一下
在有一个停止的慢动作中
你在这看到什么
这是Pencil现在玻璃上的位置
灰色的是合并触摸
现在调试绘制引擎
黑色的也是合并触摸但是对应那些实时触摸
你还可以看到有太多合并触摸
如果我们的数字转换器是以四倍于显示的速度运行 你看到
我们应该看到黑色之间平均应该有三个灰色
这太多了
我们在末尾的间隙也很大
这引起延迟用户可见的延迟
我们看到什么？
我们绘制引擎的速度还是落后了
我们目前还没有解决它
但是UIKit通过合并触摸帮助我们
最后的绘制有它需要的所有数据
所以如果你只获取这一类中的一件事
那么用合并触摸如果你真的想
获得你Pencil的丰富数据
那绘制的问题出在哪？
你不应该在每个触摸事件上绘制
因为显示刷新率只有60赫兹
尽管我们试着每帧只传递一个事件
你可以知道有时候是不可能的
因为如果你把手指和Pencil混合
或者有其他事件传入我们需要按顺序发送它们
因此你需要准备好获得比显示刷新率多的事件
但是不要试着绘制更快
因为这只会影响性能并增加延迟
做一些甚至不会显示在屏幕上的工作
那你应该何时渲染？
在我们的例子中我们使用一个普通的UIView和核心图像
在这个情况下你应该在那个视图中使用需要显示
来标记那个视图需要更新并把工作交给CA
来调用你需要实现的绘制方法而不是你定制的位图绘制
如果你在用一个GLKView或MetalView
你还可以选择这些行为而不是一个不变的更新
通过把enableSetsNeedsDisplay属性设置为真
这样如果你想要的话那些视图的行为是一样的
如果你想用固定的速度绘制
然后请用固定的速度绘制不要根据进入的事件
你可以用Metal和GLViews的内部机制这么做
或者你可以用CADisplayLink这么做
在你的DisplayLink唤醒时 调用显示
我们所做的是在我们的StrokesCGView中
一个在笔画上的didSet函数用drawImageAndUpdate函数绘制
这创建位图这并不好
让我们用setsNeedsDisplay
并且把绘制代码移动到绘制方法中
如果你使用一个普通的UFU你可以做得更好
你可以只标记改变了的区域用setNeedsDisplayIn(rect)
这也需要一些触摸的档案管理
因为你的绘制可能稍微大于改变了的触摸
和采样中的触摸改变
你可以看一个示例代码来得到一个例子
关于你如何进行这类档案管理
更进一步 你可以在这一层上激活drawsAsynchronously
这把所有你在绘制矩形里所做的绘制向上传递到CG和CA
CA在主线程外绘制它
使你的主线程能更快进行事件处理
要这么做你只需要简单地设置drawsAsynchronously为真
在你的扩散层上
让我们看看这带我们进行了多远
再一次在慢动作中
现在我们有我说过的稳定的合并触摸数量
大约3个合并触摸和1个黑色的
但我们还是有些延迟
但是它小多了因为我们按显示的速度进行绘制
我们只有剩余的延迟
我们怎么改进它？
从iOS 9起我们有一个功能叫做预测触摸
预测触摸让你瞥见未来
和合并触摸的使用方法相同你询问事件
触摸的预测触摸
你得到未来的一个触摸数组
你对这些触摸做什么？
你临时把它们加入你的数据结构
他们在每个事件回调中改变
所以你必须临时加入它们
你根据你的应用选择它们的外观
我强烈推荐你使它们看起来像真正的触摸
看看结果
除非我们的预测偏差太多那么降低它
使它看起来像暂定的使它仍然看起来接近Pencil
让我们看看代码
现在在我们的触摸设置方法当你添加合并触摸之后
你临时添加预测触摸
你需要确保删除之前添加的临时触摸
我会给你看一个视频看看它看起来怎样
和你应该做的对比
我会用红色高亮预测触摸这样我们可以看到
如果它对我们的例子足够好
再次在慢动作中因为这很快
这些是预测触摸它使你更接近实际的Pencil位置
这非常非常有助于屏幕上可见的延迟
你可以在这个例子中看到这工作得很好
所以我们会使用它们
用我们绘制普通触摸一样的方式绘制它们
目前为止我们看到什么？
我们看到了如何收集输入使用定制的UIGestureRecognizer
如何访问合并触摸
如何使渲染更快并有效率
最后 如何使用预测触摸
所有的这些技术工作在所有iOS设备上
我们在例子中针对Pencil使用它们但它们基本在其它设备也都运作
现在让我们看看新Apple Pencil API
让我们从触摸类型开始
有了Apple PencilUITouch添加了新类型的方法
UITouch类型可以是三个值中的一个
可以是直接是你知道的以前的所有触摸
有只针对Siri Remote的间接触摸
还有针对Apple Pencil的尖笔
你用Apple Pencil可获得的第一个东西是更高的精度
你在视图中用精确位置
你还在视图中有精确的以前的位置
无论何时你想要精确位置时你应该用那些
针对像是绘画的一些事
如果你想进行点击测试
你还是应该用以前的叫做位置在
和以前的位置在
但是对绘画 这会带来不同
没有精确位置
你会在你的绘画中加入一些楼梯状的图案
这是你不想看到的
你可以向所有的触摸要求精确位置
你将只获得普通的
接下来有力量
力量做为一个叫作力量的属性暴露还有一个最大可能力量
它们是CGFloat类型
它们的范围是0到最大可能力量
1.0表示平均的触摸
所以它们不是物理值
所以你不应该做任何和实际的力量有关的事
但是你用这些值来影响你的绘画
在所有之前的设备和普通手指触摸它会永远返回0
关于力量的快速说明
因为我们把力量加入了UITouch
在触摸处理中有一个不同
touchesMoved被更多地调用
因为你想要能够区分力量是否变化了
我们现在会一直发送touchesMoved给你
以前我们努力尝试只发送touchesMoved给你
当位置改变时
那是通过普通位置甚至不是精确位置
这给了你一些暗示
比如你在野外看到很多这种
若你在touchesMoved中做了
如果你有意取消一个点击这不好
这不再工作
你看到在iPhone 6s上或者用Pencil
如果你不得不非常非常轻地触摸屏幕
这是你会遇到的
你需要看看你的触摸处理代码
你应该怎么做？
如果可以你应该使用UITouchGesturesRecognizer
因为它封装了我们的所有知识
至少你需要做的事是记得触摸开始的位置
只取消它
当你从开始位置移动了足够远时
让我们把力量加入模型到我们的笔画取样中
我们用一个可选的力量变量这么做
我们晚点会添加其他东西我不会再显示这个幻灯片
所以让我们看看力量在我们的绘制中是什么样的
很好 我们做了什么？
我们改变了力量的宽度空间
下一个是倾斜
Apple Pencil使你能利用它和设备之间的倾斜
这是用角度来测量的
在Pencil和设备之间我们调用高度
这个高度角度作为altitudeAngle暴露
是一个CGFloat
它报告一个角度的弧度在大概10度到90度之间的范围
第二个部分是方向
方向是针对设备平面测量的
测量正的x方向和Pencil来自的方向之间
这叫做方位角
方位角和倾斜一起构成Pencil的完整位置
你用它来绘画时可以驱动你的UI或者数据点
所以方位角依赖你的设备方向
你需要在视图中调用一个方法叫azimuthAngle
大部分时候你可能想用一个矢量
所以我们在视图中向你暴露方位角单位矢量
这个矢量会指向Pencil来自的方向
它的大小是1
下一个 力量
Pencil力量和3D Touch力量的行为有些不同
力量是沿着Pencil的轴测量的
3D Touch的力量是在屏幕上测量的
和设备平面垂直
这造成一些不同我催促你们试一试
如果你们想要得到实际力量所有你的绘画工具的垂直力量
因为它们真的感觉不同
幸运的是计算这个分量很容易
这是这么做的代码
你可以获得垂直力量通过力量除以
高度角度的正弦
要确保你保持在同样的范围内
你应该取它和最大可能力量的最小值
最后一个关于Apple Pencil力量的消息
它是在Pencil内测量的
然后无线传输给iPad
这是通过无线传输的所有属性
这表明需要花一点时间而且数据有可能丢失
所以为了不让你等待对无线传输的力量
我们决定首先给你估计的属性
并稍后更新它们这样你能有最好的体验
为此我们在UITouch上暴露了估计属性
它的类型是UITouchProperties
所以估计属性
可以有一个力量值
对你得到的第一个Apple Pencil事件总为真
但是方位角和高度也可以被标记为估计的
这发生在你从边上进入
我们不是百分之百确定值是什么或者你在离你手指很近的地方绘画
因为我们的传感器不能非常精确地侦测它们
我们告诉你它们是估计的这样你可以做一些事
比如当从边上进入时
你可以在得到第一个确定的值后回头填充它们
在我给你的例子中
我那么做来阐明那点
还有位置只对预测触摸是估计属性
它给你一个简单的方法区分预测触摸和普通的触摸
关于更新我们也有估计属性
期待更新
它的类型也是UITouchProperties现在只有力量
也许以后会有方位角和高度
但是现在只有力量值如果方位角和高度被设置
我们会在未来向你发送更新
我们还会在叫做触摸估计属性更新的新响应器中这么做
我们还会在事后这么做
所以我们会在触摸开始时发送触摸给你
并在稍后发送更新
让我们看看这些
所以你要怎么做？
当触摸开始或移动时
你在触摸上检查estimatedProperties-ExpectedUpdates
如果它不为空
你在UITouch使用estimationUpdateIndex
它是一个索引号 只针对触摸被设置
期待一个更新或表示一个更新
并用它储存你想更新的东西
你当前的触摸取样在一个字典里你可以晚点查询它
在touchesEstimated-PropertiesUpdated中
然后你查询你的取样
使用触摸的估计更新
你得到一个更新是那些期待获得更新的值
注意 一些更新会在触摸结束后到达
这是一个关于生命周期的事你需要注意到
如果你不在触摸结束后保持数据结构
你会看到估计的力量
出现在你的笔画的末尾它看起来会很怪
让我们看看代码
我们有touchesEstimated-PropertiesUpdated
我们遍历触摸
我们查询估计索引因为我们在这个方法中
我们可以隐性地打开它
我们找到我们的在取样索引上的取样
我们更新取样像我告诉过你的
我们只在那个方法中更新数值
我们在之前期待更新
然后我们更新我们的笔画为了以防未来
我们还检查这个触摸是否还期待更新
只有它不的时候我们把它移出集合
让我们在活动中看看这
我试着用方位角角度
来做一个书法Pencil模拟
现在我们有所有我们想要的数据
让我们看看它没有调试模式
它看起来难道不好？
我连接所有从硬件得到的点
并没有做插值或幻想的事
像是你的绘制引擎会做的
有了它 让我们为最终应用做一些画龙点睛的事
目前为止我们只是绘制整个屏幕
我们不想被这么限制
让我们支持任意画布尺寸
为此 我们在一个容器视图中包括我们的笔画视图
和一点阴影
把它放到你的滚动视图中我们完成了 对吗
还没有
我们需要考虑如何处理手势
因为滚动视图UIPanGestureRecognizer
和我们的StrokeGestureRecognizer冲突
如果我们不做改变我们会永远画笔画
我们永远不能滚动
这不是我们想要的
一个方法是禁止用Apple Pencil滚动
这对注释应用之类的会有用
你总是想只用Pencil进行注释
特别地禁用那
你可以那么做因为我们添加了被允许的触摸类型
到UIGestureRecognizer中
UITouch类型是一个触摸类型的NSNumber数组
它默认是所有触摸类型
我们在这要做的是
在这个例子中我们从滚动视图中得到panGestureRecognizer
我们会设置允许的触摸类型
只允许直接触摸所以它只对手指反应
我们会改变笔画识别器只允许尖笔
这显然不是全部
在代码例子中你可以看到一个实现
但是根据使用动态切换
更复杂一点
但是它说明一点是你可以限制你的触摸处理
只针对Pencil或普通触摸
最后的一点注意事项
UIGestureRecognizer有一个新属性
叫做requiresExclusiveTouchType
虽然我们的手势识别器默认针对所有触摸类型
如果它们看到一个触摸并开始识别它们会坚持那个触摸类型
这样你不会意外捏Pencil和手指
这是你通常想UIGestureRecognizer做的
如果你不希望这样 你设置requiresExclusiveTouchType为假
这样你可以在手指和Pencil间识别
来总结一下 我展示了所有UITouch新属性
这样你可以理解Apple Pencil
我展示了如何用合并和预测触摸
来获得最丰富的绘画数据并有最少的延迟
我告诉你们属性估计我们为什么这么做
你如何实际更新数据得到Pencil提供的完整丰富数据
我展示了如何调整手势来只对Pencil或手指反应
这是一个已经存在的示例应用的截图
默认使用漂亮的书法钢笔
对你来说更有趣
它还有调试模式你看到由它们组成的视频
你可以看到你的合并触摸的行为
它们在边界是怎么被估计的还看到倾斜和方位角
玩一玩它来看看你的所有触摸处理怎么工作
这个演讲的完整信息可以在这个URL获得
昨天我们有Apple TV控制游戏输入
Siri Remote处理
“窥视3D Touch”会向你展示更高层的互动
有了3D Touch中的力量来提供Peek和Pop体验
要知道更多触摸到显示的延迟
你应该看看去年的iOS上的高级触摸输入
就是这些了
非常感谢