最大限度利用Search APIS
新特性和更新扩展搜索能力演讲223
欢迎各位 我是Vipul Ved Prakash
我在Apple从事Siri和Search的开发
今天 我将和同事John Hornkvist
展示Search APIs的新特性
以及该如何最大限度地利用
众所周知 Spotlight逐渐成为了一个更强大的搜索工具
在最近发行的一些iOS版本里
在iOS 8里我们加入了查询网络资源的功能
例如App StoreMaps和Wikipedia
之后 在iOS 9里我们大幅扩大了范围
加入了资源 像音乐 货币换算实时体育赛事得分
网页 还有很多很多
或许 最主要的是我们加入了简单且强大的方式
能让我们使你们应用的内容在Spotlight被搜索
在iOS 10里 今天我们要宣布这些Search APIs的扩展
这将能让你们对应用的内容进行更深层次的搜索
我们也简化了Spotlight使用也让它更容易被找到
那让我们从看一些例子开始
关于我们对Spotlight的改动
Spotlight现可在Notification Center里找到
这使它可以被更快捷地打开
让我们在这里看个例子
用户收到了一条包含问题的信息
这是经常有的事
那他们想要查询并回复
不用退出messages 来到主屏幕 下拉出Spotlight
他们只需下拉出Spotlight盖过messages
进行查询 然后找到答案
十分好用
我们也在锁定屏幕添加了Spotlight
也添加了对快速预览结果的支持
通过使用3D Touch
让我们来看一下操作
假设你们在和朋友争论
Steph Curry在哪出生
你们可以来到锁定屏幕
进行搜索
找到结果 你们现在可用3D Touch预览这些结果
找到你们想要的那个在这里是Wikipedia
真的很好用
当然 当你们在锁屏状态时
我们只显示从网上获取的公开信息
另外一个我们添加的很酷的功能是Spotlight查询建议
它在输入问题关键词的上方“快速输入”那里
让我们看个例子
这里用户查询班桌琴通过以往的查询 我们知道
两个常见完整输入是班卓琴弦和班卓琴调音器
所以 如果他们所要的结果不在屏幕上
他们能从中选一个 找到答案
这可让许多查询更快被Spotlight处理
我们做了许多的改进
我们改进了自动拼写更正
为应用开启用例
我们改进了对中文和日文脚本的支持
在设备上
总体来说 我们也提高了相关度
所有的这些改动
当然也适用被插入的内容当使用Search APIs
现在 让我们将注意转移到Search APIs
也许你们记得我们在iOS 9里加入了三个Search APIs
有CoreSpotlight它能让你们添加用户指定的
或用户创建的Spotlight设备索引
我们还加入了NSUserActivity一个可搜索版本
它能提供一个简便的途径索引一切用户
在你们应用里看过的内容这样他们就能被快速搜索和找回
最后 我们加入了通用链接索引
这是一个服务器端的索引有链接组成
这些链接是我们通过爬应用网站找到的
我们的设计让APIs和谐工作
所以 无论结果来自设备或服务器
它们看起来都一样让你们应用的搜索成为无缝体验
我兴奋地宣布...
App Store有超过50,000应用使用Search APIs
这是十分惊人的
我想那会是多么酷看见Search APIs用户
改善了日常的互动
在我们的客户和你们应用还有iOS之间
我想向你们介绍一些我最喜欢的案例
这是一个近期的例子
我在计划一个这周末去夏威夷的毛伊岛旅行
我在过去的一个月里间歇地计划着这个旅行
有许多信息像酒店预订和票务
那些都可以通过我的设备找到我通常
使用应用或网站或翻阅邮件来寻找它们
但有了Search APIs
我的经历是这样的
那个我用来做这些预定的应用
用CoreSpotlight将主要信息添到Spotlight的索引
以至于 我能看见我的机票
我能看见通过HotelTonight预定的酒店
和一些通过Open Table预定的晚餐
我可以通过触点这些结果找到更多的信息
像我签到的时间...
或是这些餐馆的地址
你会留意到
我有些从Pinterest上搜来的结果
我有使用Pinterest应用
来探寻在毛伊岛能做些什么
Pinterest使用NSUserActivity
来为我所在应用里浏览过的东西建立索引
我能触点其中一条结果然后 继续我的探索
这是一个极好的行程搜索经历
通过我的设备找到所有我知道能找到的信息
以我们的经验 一般来说
为用户想返回去看的内容建立索引会是一个明智的选择
另一个 我想分享的例子是关于联系方式
联系方式是最普遍的Spotlight查询用例之一
这里 我想搜索好兄弟Allen
我看见了他的联系方式是一个iPhone的方式
我也看到了他的Skype资料和一些对话
在我们之间通过YahooMail和WhatsApp
我能方便地返回到这些对话里
这是很有用的 因为这能提供给我
对我的联系人有一个全方位的视角
也能让我通过他们选择的途径交流
现在我们看过了用户能自然地应用Spotlight于
Spotlight能本地支持的所有事情
如果你们有上述类型的内容
利用它会是一个很棒的扩大搜索范围的方式
也能让你们的用户对应用更感兴趣
那现在让我们来看一个通用链接索引的例子
wikiHow是一个高质量关于怎么做的资源
它有成千上万的关于各种主题的文章
在这我查询一个重要的急救问题怎样做心肺复苏
Spotlight显示了一堆结果有网页 YouTube
还有wikiHow上的部分
wikiHow使用通用链接并且他们是一款热门应用
所以我们在服务器上对他们的文章建立了索引
我们利用这些索引对应适当的询问
这些结果还是十分完整的点击其中的一条
我来到了这篇描述清晰的文章
对wikiHow建立索引赋予了Spotlight一个全新的功能
这凸显出了Search APIs的强大之处
看过上面的例子 让我们来看下
Search APIs在iOS 10上有哪些新特性
我们加入的第一个功能是Continue Search in App
有许多的查询
用户想见到更多的结果或你们也许无法添加
正确的结果至Spotlight由于各种原因
那现在应用有了一个选择
在App Punch Out里查询
如你们所见 在右上方的角落
触点这里会将用户与问题一起带入你们的应用
这样就可以在应用里继续搜索很酷
我们加入的第二个特性是CoreSpotlight Search API
这个名字有点冗长 但是
事实上就是你们能将所有的东西添加至
Spotlight的搜索索引通过CoreSpotlight API
是不是很棒如果可以通过这个索引
支持应用内的搜索？我认为一定是
然而这是CoreSpotlightSearch API能让你做到的
我们加入的第三个功能是
估计深层链接受欢迎度的一个方式
通过使用差分隐私一个在keynote里提过的技术
我们会对此做更多的讨论在下面关于排序的讨论里
最后 在众多的要求下
我们在web markup预览工具里加入了一个新特性
它能让你们看到和检验架构的结果
在你们将其加入到通用链接索引之前
除此之外 我们还做了许多改进
对Search APIs基于你们反馈
我将邀请John介绍这些APIs
并更深层地讲述这些新功能
让我们来探讨一下如何利用Search APIs
在下面的半小时里
我将讲解一些你们要为应用做的事
为它能与Spotlight一起工作
一些为了让你们的用户有个很棒的体验而应该要做的
和一些我们加入的新APIs
为了让你们能更便捷地达到你们想要的结果
那大概以你们实现这个的顺序
我来讲一下关于如何把你们的内容加入到
Spotlight的索引并保持最新
展示方式和用户体验
在你们的应用里运行无论是恢复内容
或是继续搜索
之后 我将会聊一下新的Search API
在Vipul回到台上给你们一个关于排序的简介之前
我们使用了三种技术它们能支持大部分的用例
你们设备上的核心支持CoreSpotlight
用于应用历史记录的NSUserActivity
及web markup公开在线内容的通用链接
当然 你们可以将这三者一起使用
举个例子 设想一个食谱的应用
它提供一个能访问大量食谱的接口
由于网站上有许多宿主深层链接会是一个好的选择
这个应用也许会有收藏功能通过CoreSpotlight实现
你们的用户会想返回至之前看过的内容
那为了最好的体验你们也可以使用应用历史
通过NSUserActivity
好的 在座没离开去午餐的各位
我们跳过Search APIs简介
直接来聊下怎样对内容建立索引
从CoreSpotlight开始
CoreSpotlight是在iOS上用于建立索引的API
在设备上并支持文件保护
这样你们可以对用户的私人内容建立索引
你们的应用拥有掌控权你们决定对什么添加索引
你们可以对应用的所有内容建立索引可以是收藏
和书签 信息和邮件
文档 图片 音乐视频 游戏关卡
你们应用的进入点 等等
有两个基本的操作
第一 你们要将那些东西添加至索引
通过创建一个CSSearchableItemAttributeSet来实现
它包含了元数据和其它的相关内容
然后
你们要设置至少一个属性
这里 我们设定了display name
你们可使用AttributeSet创建可搜索内容
可使用uniqueIdentifierSpotlight将会用它
在下面的操作里来识别项目内容
当我们开启你们应用的时候它也会被用到
那domainIdentifier
它让你们能设定共享的属性
在各种的项目之间之后的删除里可以用得到
你们指示CoreSpotlight添加项目至索引
当回调方法被调用时
项目会被安全地提交至储存
或 一个错误信息会被传递至回调日志
对删除项目 我们有三个APIs
你们可以通过识别符来删除一个特定的项目
举例 如要删除一个文档
也能删除一组项目
通过使用之前提过的domainIdentifier
这会很有用如果用户从一个账户注销
终止订阅或是类似的
最后 你们可以从应用里删除所有的项目
这会很有用如果你们遇到像版本不匹配
然后你们要清楚索引 重新建立
这也会在应用被卸载时被系统调用
那现在让我们来看一些最佳的实践和一些进阶的使用
我们将会讲一下如何注册索引代理使用CoreSpotlight
客户状态操控渐进的索引建立
一些性能问题
和如何创建CoreSpotlight扩展
你们需要注册一个索引代理
因为这让Spotlight初始索引
当你们的应用第一次在系统上运行时
或在恢复备份之后
当用户安装你们的应用时,或在灾难恢复时
这也能让Spotlight发出
请求让你们重新对某项目建立索引
这通常是由于你们设定了一个过期日期
Spotlight想检测项目是否已真的过期
那作为索引代理需要实现
CSSearchableIndexDelegate协议
它有两个必要的方法
ReindexAllSearchableItems
当要添加任何东西至索引时它就会被调用
如果你们在自己的数据库里跟踪个别项目的索引
当接收到这个方法时你们要清除索引的状态
除非你们用客户状态我们等下细说
第二个被调用的方法是使用识别符重新建立索引
当它被调用时 你们查看Spotlight正请求的项目
然后 将它们添加至索引或删除视情况而定
对于这两个方法 你们要调用acknowledgmentHandler
仅当你们完成了或收到了最后的回调对任何任务
你们派给CoreSpotlight
这样就能确保项目的索引被完整建立
并在下面的流程不再被调用
若你们不调用acknowledgmentHandler那两个方法或许会被再次调用 若过早地调用
你们也许还未来得及完成对索引的建立
对某些应用来说我们发现会更便捷
通过使用客户状态相比较于尝试着管理
索引建立的回调与数据库的事务
客户状态提供了一个异步的方式
让你的项目能与Spotlight里的同步
因为是异步 你们其实是在应用一个一致性模型
但你们保持对Spotlight与你们数据库之间的同步
没有任何多余步骤
客户状态是个opaque token它被储存在Spotlight索引里
在索引建立的同时被更新
然后当应用被再次开启时被取回
一般来说 最简单的实现方式是
在你们的数据库里添加注释
举例 次序号
你们在Spotlight里将它作为客户状态使用
再次开启后你们要检测客户状态
如果它与你们所期望的不符
那你们要为数据库里所有的项目建立索引
使用比你们回传至Spotlight的更高次序号
另一个方式是 通过次序号取得
journal playback的起始位置
这会是很有用的
让你们的内容异步保持最新
也能确保不消耗过多的能源
为能使用客户状态你们要创建一个命名的索引实例
这名字让我们知道你们想要的客户状态
只能获取应用的客户状态
但你们可以对多个数据库建立索引
这样的话 你们要给每个数据库一个特有的名字
有了索引后你们要初始一个索引批处理
你们像往常一样添加可查询项目
completionHandler在这里并不重要
因为当批处理完成时你们会得到一个完成信号
你们要通过运算得到所选状态
再将它递入Spotlight
当你们完成了批处理后
这里你们需要留意completionHandler
你们应用下次开启时你们获取客户状态
你们要决定需要执行哪些操作
让Spotlight才能和你们当前状态同步
由于客户状态是与批处理一起储存于索引
因此确保了完整性
你们可以重演每一个需要的操作
使两者同步
当你们的应用下次被开启时
你们会使用同一个名字创建一个索引实例
你们会取得客户状态这就是一个异步的调用
你们要在回调里处理所有的错误
还要检查你们取回的状态是否是你们想要的
如果不是 你们调用这方法 使其同步
现在让我们来看下性能问题
Spotlight处理速度很快
所以要在你们那端将开销最小化
来确保应用能跟得上
你们要优化任何对文件或数据库的访问
并留意内存使用情况
注意对CoreSpotlight每次调用都有一定成本
所以 可能时 尽量成批传递避免单个传递
只是十个一小批
也会减少一个数量级的IPC开销
由于你们的应用会在用户使用的同时建立索引
确保你们不会阻塞主线程
最后 避免干扰在使用后台线程的UI
好 让我们看下CoreSpotlight扩展
扩展能在你们的应用不运行的情况下建立索引
这能让你们赶上进度
在使用备份进行灾难恢复之后
或你们的图标过期时
Spotlight能使用你们的扩展
不用使用你们的应用
这很好 因为那时你们的应用可能没在运行
扩展的接口与索引代理相同
若你们能构建你们的代码让索引代理成为独立的部分
那实现扩展也是十分容易的
让项目能被你们的扩展访问
你们可使用share.groups
要获得更多相关信息
看一下去年“应用扩展最佳实践”的演讲
下面让我们来看下如何保持项目为最新
如我之前所提到的你们能用过期日期
来预防旧内容堆积在索引里
CoreSpotlight会在将近过期日期时调出你们的应用
你们可以更新过期日期或更新项目的数据
如果有需要
若你们要将新内容加至Spotlight
你们可以使用后台获取
这能让你们的应用在后台打开
让你们添加内容并建立索引
最后
若你们采用非常规或非高频率的更新推送模型
你们可以使用静默推送
让你们的服务器来告诉你们必要的更新
想了解跟多关于后台获取
和静默推送
可以看下“多任务的新特性”演讲
2013年的 WWDC
这就是CoreSpotlight索引的所有内容
下面我们聊下应用历史与NSUserActivity
NSUserActivity在iOS 8里为Handoff添加
他让你们能创建应用当前状态的一个代表
可以被递入另一个设备
iOS 9后存于Spotlight索引里支持应用历史
当用户浏览你们的应用时你们提交活动
为了用户可能会记得并想返回去的内容
那你们应该问自己什么时候用户活动
应该有索引 简单的说就是用户是否会返回到这
若相同项目通过CoreSpotlight有索引
那答案基本上时肯定的
2014年的“采用切换”演讲有许多相关的信息
关于如何使用NSUserActivity
为了让搜索能使用NSUserActivity
你要标记它为可查询并为元数据添加索引
通过使用CSSearchableItemAttributeSet
你们标记它为可查询
通过设定eligibleForSearch属性为真
你们也可标记NSUserActivity让它能建立公开索引
让它成为网上索引的候选
Vipul会等一下来细谈
完成后 它将作为搜索结果显示在Spotlight Search里
你们的应用可以返回到用户的活动
当用户在Spotlight里选择它
你们的用户只需记得一个关键词
从他们之前所见的这就能将他们带回到
你们应用里的内容
好的 就如我所说的 你们可使用CoreSpotlight和NSUserActivity
对一样的内容
区别在于NSUserActivity显示
用户在你们的应用里做了些什么
CoreSpotlight是指你的应用有些什么
所以若你们同时使用两者可关联NSUserActivity
与CSSearchableItem对相同的内容
为排序提供帮助并防止重复的结果
这能通过设定relatedUniqueIdentifier属性来达成
它在AttributeSet里将它设定成uniqueIdentifier
对应你想关联的CSSearchableItem
这会把NSUserActivity的生存周期
与CSSearchableItem联系在一起
为保护你们防止数据被遗留在设备上
在用户删除了私人的内容之后
不过 不是所有数据都是私人的都由用户所管理
举例 我们之前提到的食谱应用里
你们或许想关联NSUserActivity
与一个可能CSSearchableItem一个当前不存在的项目
用户可能在将来把其作为收藏
如果你们用了relatedUniqueIdentifier
CoreSpotlight会在你们添加NSUserActivity时立即将其删除
因为 它所关联的项目当前不存在
为了解决这个问题我们加入了一个新的属性
weakRelatedUniqueIdentifier它让你们能弱绑定CSSearchableItem
它能在CSSearchableItem之前存在
并会一直存在直至CSSearchableItem被删除
至于relatedUniqueIdentifier
你们只要在AttributeSet设定这个属性
给NSUserActivity
缺点是当CSSearchableItem被删除后
NSUserActivity会继续存在
所以 如果你们担心可查询项目的生存期
或NSUserActivity
那你们要自己删除NSUserActivity
有幸的是 在iOS 10里
我们让这成为了可能
我们添加了domainIdentifiers至NSUserActivities
这是CSSearchableItemAttributeSet的一部分
它能让你们通过domainIdentifier删除NSUserActivities
就像对CSSearchableItem一样
如果你们同时使用CSSearchableItems和NSUserActivities
使用相同的domainIdentifier会是一个明智的选择
这就是如何在iOS 10里通过NSUserActivity建立索引
下面 让我们来聊下通用链接与web markup
驱动你们应用的内容也许是在网上的而不是在本地应用的内部
如这些是公开内容你们可使用web markup
让它们通过通用链接索引在Spotlight里成为可查询的
这很适合网站上的内容
和应用内部的
也是一个好的解决方法当项目内容太大 无法储存在设备上时
由于 你们的内容在网上
没有应用的用户也可以看到结果
这能让你们招揽更多的用户增进应用的安装
结果可同时在Spotlight和Safari里显示
让你们的内容可以让更多的用户看到
那要实现通用链接索引
你们要允许索引
要让Applebot能调用你们网站的文本
还要让Apple Note能进入网站
在提交应用至App Store时指定调用的URL
对于深层链接 强烈建议用通用链接
这里你们需要实现双重身份验证
在网站端和在应用端
在你们的应用代理里实现continueUserActivity方法
为确保当用户选择了结果时你们的应用会处理深层链接
使用schema.org和Open Graph标记你们的内容
这能让你们的内容被丰富多样地展现
利用Search API验证工具
来检查深层链接、标记标题、描述 等等
去看下2015年的“引入Search APIs”演讲
和关于通用链接的开发者文档
这些就是我们当前支持的构架
我们打算在将来加入更多
留意交互计算和总体评级
这些对应用的搜索结果排序会是十分有用的
Apple提供了一个测试工具
在search.developer.apple.com
如果你们的应用使用深层链接应该去看一下
它现在可以将你们的结果可视化地显示
包括对schema.org标记的支持
从验证工具里所得的内容
能帮助你们可视化那些通过Applebot爬网程序
建立过索引的内容包括标题、描述、标记和URL
现在你们看过如何通过这三个APIs对内容建立索引
很有可能你们会想将它们一起使用
即使是对相同的内容
那当使用多个APIs时 要牢记的是
在所有APIs里关联代表同一内容的项目
通过设定与NSUserActivity相关的uniqueIdentifier
为CoreSpotlight的uniqueIdentifier
CoreSpotlight内容的URL和NSUserActivity的网页URL
为网页URL
你们告诉Spotlight所有索引里的纪录代表同一个项目
这能让你们的查询不会重复
这也帮助了项目的排序
好的  现在我们看了如何将内容添加至索引的三个方法
CoreSpotlight对应内容
NSUserActivity对应用历史
通用链接与web markup
对应网上公开的内容
下面让我们聊下怎样向用户展示这些信息
要在Spotlight里有好的展现你需要一组好的缩略图
默认下Spotlight会使用你们应用图标
这会让结果乍一看很难区分
这不碍事 如果你们只有一个结果
但如果有多个结果那感觉会是十分不同的
与缩略图一样重要或许更重要的是标题
一个好的标题不只是看起来舒服
它也是经常被用户用来搜索的
在缩略图和标题之后
你们要设置其它的适合你们内容的字段
提供描述信息会是一个好主意像评分 评价
日期相关项目的日期属性
比如 旅程预定 日期 提醒 事件还有很多
对于文档 一般的元数据
比如 文档大小和页数都是很有帮助的
如果你们设定了适合内容的类型
Spotlight可以更好的工作
让我们来看些例子
Hotel Tonight应用很好地利用了缩略图
显示了容易识别的地标
同时还有标题和有用的描述
你们可以使用web markup取得相同的效果
通过设定og:image og:title和og:description
Open Table使用标题描述 评级
与评价相关的属性用户能得到很有用的信息
让他们在进入应用前有适合的选择
通过让属性能在web markup里获取
你们确保了用户会得到一个一致的体验
无论他们的结果是从爬网程序
或本地设备的索引得到的
一个好的用户体验不仅是关于外在的展现
也与可搜索的数据有关
设定让用户能看懂和记住的属性
让你们的内容能很快地被找到
相反 在元数据里设定了误导性的属性
或太多的内容和关键词
字典里的词会导致你们的结果频繁的呈现
但极少会被选中这会让你的用户不爽
这对排序会有强烈的负面影响
另一个好的用户体验的方面
是能获取结果重要的部分
利用最少的步骤
允许快速方式
像路线和通话是能让你们的用户受益的
最后
当用户选择了一个项目
你们要尽可能快地开启
不能有间隙感或多步加载阻碍用户
让我们来看些例子
Redfin应用提供了一些吸引人的结果
通过设定经纬度和允许导航
应用让用户能直接到Maps查看地产
相似的 这还有个很好的callaction result的用例
你们可以通过设定电话号码属性取得相同的结果
同样也支持Spotlight的phone call属性
看着这些结果
已经对地点熟悉了的用户
可以立刻打电话预约
你们可以通过web markup取得相同的结果
通过利用邮寄地址和电话号码
下面让我们来聊下开启你们的应用
对于CoreSpotlight和应用历史
我们使用NSUserActivity来恢复状态
你们的应用代理会与continueUserActivity一起被调用
你们检测NSUserActivity的活动类型
和用户信息字典 如果必要
如果你们的应用是由于用户在Spotlight里选择了CSSearchableItem而启动
那活动类型会是CSSearchableItemActionType
然后你们从用户信息字典里取得识别符
通过使用CSSearchableItemActivityIdentifier
2014年“引入切换”的演讲
更深层讲解了如何开启NSUserActivity审阅和活动类型
对通用链接同样我们使用NSUserActivity
那样你们的应用代理可和continueUserActivity一起被调用
同样 你们检测NSUserActivity的活动类型
它会是NSUserActivityTypeBrowsingWeb
你们解析URL然后 将用户带到URL所指的地方
这就是开启
现在让我们来看个新特性
在iOS 10里我们添加了一个功能
能让用户直接在你们的应用里继续搜索
让Spotlight显示人性化结果
是一种直观的体现 你们应选择使用Spotlight Search continuation
那样用户就可以直接打开你们的应用
如果你们已经支持了搜索那对它的采用就更简单了
它能让你们使用定制的搜索接口
它已经广泛被我们内部的应用采用了
这是另一个增加互动性的方式
与你们的应用
用户直接被从Spotlight
带入了你们已有的搜索体验
现在——
谢谢
为这能在你们的应用里被支持
你们要在info.plist里添加一个关键值
声明你们支持这个功能
你们应用的代理将被调用有一个新活动类型
CSQueryContinuationActionType
然后新的查询字符串被递入用户信息
与CSSearchQueryString关键值一起
至此 你们可以执行你们自己的搜索UI
利用相同的查询字符串让用户在你们应用里继续搜索
为避免困惑通常是一个好主意
确保你们的搜索结果与Spotlight的大概一致
由于Spotlight是基于前缀搜索
我们建议你们使用相似的规则
如果你们无法支持前缀搜索
考虑将用户带至一个完成接口
另一个确保与Spotlight一致的方式
是利用CoreSpotlight的Search API
我们有许多内部应用使用这个方式
CoreSpotlight Search API让你们能便捷地实现对你们数据的搜索
它利用你们已经提供给
CoreSpotlight的数据支持Spotlight Search
全美一致
它已经被我们许多内部的应用使用
包括MailMessages和Notes
它避免了开销你们不用管理一个额外的索引
因为它与Spotlight使用同一个索引
这个索引提供了全套的对元数据和内容的搜索
如果你们所有的内容都在设备上
CoreSpotlight是对于搜索的完全解决方案
如果你们有设备上和网上内容的混合
你们可以合并查询和合并单元
通过设备上CoreSpotlight获响应
通过网上的索引获得完整性
Mail不仅将CoreSpotlight用于搜索
还用它创建搜索建议建立复杂的查询
这是个很好利用CoreSpotlight Search的方式
同时还能保持简洁的UI
CoreSpotlight Search API创建了你们提供给Spotlight的数据
但你们的数据是受保护的不会被其它的应用访问
查询引擎很快并可以被扩展
所以你们能在应用里得到很好响应
查询语法允许复杂完整的提问
也支持范围查询数字和时间日期
还有一组强大的短消息的功能
对于你们熟悉Mac OS上元数据框架的人
会对这个语法感到很熟悉
简单介绍一些常见的搜索操作
如所见 CoreSpotlight支持全套搜索比较运算符
也支持布尔运算符ANDOR和NOT
此外 CoreSpotlight能让你定制
适合你们需要的字符串匹配
如果你们要补区分大小写你们可以添加标志c
如果你们想忽略注音符号像注音符
如果它们在当前的语言里不重要你们可以用标志d
如果你们想匹配一个字段里的单词
你们不用在字段的开始定位标记查询
你们只需使用标志w
这些也适用于信息内容
如果你们想要让多个词被分开一一处理
那你们可以递入标志t那样查询字符串就会被标记
让我们来看个例子
我们来实现一个搜索函数它接收一个用户查询作为输入
我们确保取消所有正在运行的查询
那样我们就不会有多个查询在同时运行
这会降低查询速度
因为我们在处理用户输入我们确保将查询字符串转义
我们使用双星语法来创建一个查询它会匹配
内容或元数据
转义的输入作为搜索字符串
我们有cdw和t运算符
这表示创建一个不区分大小写 能本土识别的
不区分注音符的匹配单词 标记字段的搜索
有了查询字符串我们来创建一个查询对象
我们请求一个display name
这将会在
返回的可查询项目的AttributeSet里
我们设定foundItemsHandler
它会接收到多批的可查询项目
如果你们的查询无结果
一个completionHandler会被调用一次
当有错误时或查询成功
在我们的completionHandler里
我们可以选择让它显示完成处理或其它的
然后就是开始查询
CoreSpotlight有了结果然后调用解决
然后调用completionHandler
让我们来实践一下我们创建了一个应用
有一个简单的图片收集功能
它已支持用CoreSpotlight建立索引
也已支持搜索
那我们要做的第一件事是添加支持
Continue Search in App这很简单
我们来到应用的info.plist我们准许CoreSpotlightContinuation
完成后我们来到应用的代理...
在我们的用户活动continuationHandler里
我们添加支持...
Continue Search in App
如你们所见 活动类型
是一个CSQueryContinuationActionType
我们取得搜索的查询...
通过查看CSSearchQueryString对应的用户信息
我们使用搜索询问激活视图控制器
我们来看下实践
好的这里有我们的图片收集
我们下拉出Spotlight
搜索单词“雪”
凑巧在这个相册里很普遍
我们获取两个结果和一个在应用里继续搜索
点击在应用里搜索我被带入了我的应用
现在你们或许会观察到我在Spotlight里有两个结果
而在我的应用里只有一个
这是因为我没使用CoreSpotlight Search
这个搜索只是一个简单的前缀搜索
那让我们来修复它
在我们的视图控制器里
我们有一个搜索方法
我将删除这个简单对搜索的实现
我们现有的
然后开始实现CoreSpotlight
首先 我们想要添加一个变量
一个能储存现有搜索查询的查询对象
我们要取消正在运行的查询
将查询字符串转义
然后创建——
一个查询对象 当然是创建一个查询字符串  失误
好的  那现在我们有了一个查询字符串 一个查询对象
然后我们要设定foundItemsHandler
foundItemsHandler创建displayables
然后添加它们至我们的结果列表
现在 由于查询取回了CSSearchableItems
我要实现一个能接收CSSearchableItems的一个配适器
创建一些能被显示的东西
让我们来看下
我称之为懒图的对象
它能获取数据
那些通过我们的查询得到的并适当的时候能使用它们
当不充足时它回到数据库
获取对应识别符的图片对象
储存起来为将来使用然后返回它
那让它能连同返回所有其它的属性
那些无法从数据库里获得的
通过使用懒图对象我们确保可以显示我们的结果
省去要回到数据库的步骤
这样对性能有利
让我们来实现completionHandler
completionHandler里 我们对结果进行排序
进入主队列
使结果变为可显示的然后调用我们的表视图更新
之后 剩下的就是调用start
让我们来看下
好的
现在因为这是在使用CoreSpotlight Search
而且我的查询的条件很宽松
我应该能输入任何在这里看见的词比如 河
我找到了所有在元数据或在内容里包含河的
好 通过CoreSpotlight实现搜索 就这么简单
下面 我想请Vipul回到台上来聊一下排序
谢谢John 刚才是一个对Search APIs很精彩的简介
在你们思考如何在应用里实现这些APIs时
了解Spotlight如何对结果排序的会很有帮助
还有你们怎样正面影响排序
那让我么来看下Spotlight里的排序
Spotlight的主要目的守则
是依次显示你们查询的最佳结果
这个顺序由一组因素决定
两个主要因素engagement ratio和content popularity
然我先来聊下engagement ratio
Engagement ratio其实是对频率的衡量结果通过你们的应用
被用户选择的次数 当它们被展现时
Spotlight里有三类engagement ratios
一个在设备上 两个在服务器上
在设备上engagement ratio测量
用户个人与你们应用的互动
服务器对每个查询都有一个engagement ratio
这是基于每一个查询
对曾经显示过的结果
通过使用Spotlight可让结果提升或降低排序 对应某个查询
最后 还有一个globalengagement ratio
它是基于所有用户的所有互动
曾经与你们应用发生过的
没可用查询级别engagementratio时 它会被调用
一些要紧的事
第一 你们不会得到处罚如果某个查询结果
没有显示给用户
它们可以说是在分割线以下键盘的下面
这里最佳的实践其实是使用关键词 标题和描述
那些能清楚地形容你们建立索引的内容
也能将用户带至相同的内容
第二个重要的事是
content popularity一般来说 更受欢迎的内容
趋向于被排得更高
Spotlight能通过三个方式来了解受欢迎度
如果你们使用通用链接
它们会自动地去查看网站结构
然后得到你们网站的声誉
这里 你们不用做任何事
你们只要实现通用链接
如果一个项目有关联的NSUserActivity
Spotlight能跟踪用户在设备上查阅此项目的频率
然后在排序里使用
若你们同时使用通用链接和公开的NSUserActivities
那些被允许公进行开索引的iOS 10现在能估计
整个iOS用户群
在你们的应用里查看一个链接的频率这会被用于排序
这是为了新的差分隐私条款所建立的
让我向你们展示下
这个例子里 Yelp采用了NSUserActivities
被允许进行公开索引和使用通用链接
当用户在Yelp里遇到一个深层链接
iOS计算机哈希添加一些干扰
之后获取一个碎片传送至Apple的服务器
单独的碎片是没用处的它不包含任何的信息
可一旦成千的用户报告了很多的碎片
Apple的服务器能找回被看了成千次的哈希
不用知道哪些用户报告了哪些碎片
这提供了一个方式用于决定如用户的总体行为
不用对任何用户的独立行为作任何的的分析
当受欢迎的深层链接被这样的方式发现后
它们在Spotlight里的排名会上升 这很酷
那让我们很快地看一下排序的最佳实践
John展示了许多最佳实践
对通过CoreSpotlight给你们应用内容建立索引
你们应该遵循这些 因为它们会提供一个一致的搜索体验
为你们应用的内容之后用户会去到Spotlight
搜索你们应用里的东西这将会影响到engagement ratios
如果你们有应用的内容 允许Apple对它们通过通用链接建立索引
这样能暴露你们的应用给潜在的用户
你们现知道contentpopularity很重要 那就关联
通用链接和CoreSpotlight的项目至NSUserActivities
我们今年添加了weakRelatedUniqueIdentifier来帮助你们更容易地达成这个
我重复这个 因为很重要
你们所建立索引的项目的标题、描述和关键词
是与深层链接相关的
留意你们的表现方式
我们知道表现合理的链接会有更高的engagement rates
最后 在适当的时候实现Continue Search in App
它让用户能在你们的应用里完成搜索任务
结论 关键的几点
Spotlight是iOS里一个全新的万能搜索工具
在iOS 10里我们让它变得更实用 更方便被使用
越来越多的用户期望一个优质的应用
能通过Spotlight进行搜索
所以 如果你们还没采用这些APIs
我们建议你们考虑采用
为配合iOS 10的大众发行
若你们已实现了Search APIs
我们建议采用新的规则
那些我们今天所介绍的
一些相关的讲座优秀的讲座
明天“前摄的建议”的演讲
在座的你们都应该去因为你们在搜索里所做的
能直接被应用到“前摄的建议”里
我们昨天也有个SiriKit APIs的精彩演讲
你们可以在会议的网站上找到它
我们也推荐星期三关于隐私的演讲
那会对差分隐私进行更细致的讨论
像其它的讲座一样 这个讲座会被上传 参见第一个URL
我们也会上传所有Search API的相关文档
至search.developer.apple.com
这就是我们的所有内容
祝大家在余下的WWDC 中过得愉快