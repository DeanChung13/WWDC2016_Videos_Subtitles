优化应用的网页内容
大家好
欢迎来到“优化应用的网页内容”
我是Jonathan Davis
网络技术的推广人负责Safari和WebKit
现在我要先说明一些事情
很多人说我长得像Edward Snowden
但我向你保证 我不是他
但这么多卫星在头顶盘旋大概都是来抓我们的
除此之外 我很激动地要展示些新东西
它们可以帮助你提升应用网页内容的性能
我们一直都知道
性能是提供最佳用户体验的关键
若你是个应用开发者并在应用里用了WebViews和JSContext
而且你很关心性能那你就来对地方了
说到性能
在当今时代里性能其实就是指电池寿命
我认为电池寿命是最终的有限资源
它带来很不同的结果如果你能拨出最后一通电话
或者发出最后一份重要的文件在电池耗光之前
性能对用户来说事关重大
他们所选择的应用不会让设备变慢
而且耗电量低
我们的经验就是根据用户的反馈和各自的体会
性能很重要因为电池寿命事关重大
所以今年我们致力于提供更好的工具
来找到和修复网页内容的性能问题
现在我们为应用提供了工具比如Swift
还有Objective-C代码比如Instruments
我们还提供了网络检查器帮助网页开发者创建网页和网站
但不要觉得因为你选择了
在应用中用网络技术就没有其他工具可用了
实际上我今天展示给你的所有工具
就是开发给人们既能帮助他们建设网站
也能让他们在应用里用网络技术
那么我首先要向你展示
如何把网络检查器连接到JSContext的WebViews
这样在你需要它的时候它就会立刻出现
之后你会了解一些新的功能
它们能让你了解JavaScript代码如何分配时间
以及这些新功能如何帮你迅速找到性能上的问题
如果你想要看到网络内容的内存使用情况
我们也给网络检查器增添了新的时间线我都已等不及想展示了
它们会帮你节省很多时间来找到内存过大的问题
准备好了？那就开始吧
第一件我们要做的事
是把网络检查器连接到应用里
在应用里使用网络技术有很多原因
如JS context里的一些JavaScript模块
可以让你轻松交换逻辑并无编译地添加新的模块
可能有些人正在tvOS应用里使用TVML的 JSContext
另外一个使用网络技术的原因就是你要显示的网页内容
比如第三方网站的一个网页
这个网站你不能控制
可能就要用到Safari视图控制器
如果不是你也许可以去听听
去年的演讲“介绍Safari视图控制器”
但如果你显示的内容是你自己的或者你可以控制的
或是可自定义的HTML CSS或JavaScript编写的内容
或者是可以提升应用体验的内容
WKWebView是最好的选择
它实际上是个矩形把网页内容拉入应用
它引入了iOS 8和OS 10 Yosemite
若你还在使用WebView或者UIWebView
那你一定要考虑升级到WKWebView
事实上 升级到WKWebView可以让你利用
Nitro JavaScript核心引擎和四级JIT编译器
这能大大提升速度
若想了解更多WKWebView信息
我推荐2014年的演讲介绍了现代化的WebKit API
那么去年我们给WKWebView添加了很多优秀的功能
比如 加载文件URL和自定义用户代理字符串还有WK网站数据存储API
现今有了iOS 10和macOS Sierra我们改进了3D-touch支持
现在你的应用就可以执行这些好用的
Peek和Pop事件在WKWebView里
就像我之前说的因为你选了
在应用里应用网络技术
并不意味着你没有工具可用
不论哪种情况你可连接网络检查器
发掘网页内容或JavaScript活动情况
但使用网络检查器前你必须要激活develop菜单
只要上传Safari设置然后找到“高级”标签
然后在底部你会看到这个复选框
写着在菜单栏显示Develop菜单
那就点击它
Develop菜单就会出现在Safari的菜单栏里
为让网络检查器连接到iOS设备
你要开启一个设置
在iOS的设置应用里点击Safari
然后拉到底部 点击“高级”然后把检查器设置打开
现在你就可以把设备连到Mac上
在Safari里检查Develop菜单
Develop菜单里有些很酷炫的东西
你之前可能从未注意到过
就是你能看到设备的列表
这里有已连接的iPhoneMacBook Pro和模拟器
要连接一个设备并开始使用这些工具
进行调试那么只要选择Device菜单
就会收到 当前设备上运行的WebViews和JSContexts 的列表
这里的Mac应用并没有使用WebKit
而用JavaScript
所以我可以直接连接它并使用工具
iOS里的应用只会出现在用Xcode创建和运行的时候
但是说到Mac应用你还要做一件事
就是保持应用的完整性我们不会让任何人下载你的应用
并用网络检查器巡查你的应用
所以你要添加这个授权
到应用本地开发的授权文件里
你可能已经有了一个授权文件
如果没有创建一个也很简单
你只要创建新的plist拓展名为.entitlements
并且Xcode的创建设置里定义一个代码签名的授权传递路径
这个要在开发的时候添加
之后在运行应用的时候删除
一旦有了这个授权
你的设备和应用就出现在Develop菜单
这样就可以连接了
轻松把网络检查器连接到JSContext和WebViews上了
我们已正常运行了网络检查器和应用
该谈谈网络检查器里新功能了
我想首先讲讲分析JavaScript代码
分析JavaScript
JavaScript的分析器已经存在挺长时间了
今年它变得更好
更有效率能帮助你迅速找到
哪里调出的JavaScript成本最高
原因很简单
新的分析器采用了取样技术不会影响性能
比以前好太多
我们的分析器在编译器能用之前的时代
实际是个翻译器
但是现在我们有了这个强大的四级JIT编译器
那么这个分析器就真正成为样本分析器
样本分析器告诉你代码把时间都用在哪里
帮你解答哪个代码占用的时间最多？
它在运行程序中的取样以每毫秒为单位
并且短暂地停顿执行
并快照所有正在运行的代码
它还可以取样
在代码运行于JIT编译器所有四级的时候
所以它的取样速度跟你代码的实际速度差不多
由于断点处理会导致代码去优化
我们暂时不管它们
那么当你分析的时候你就可以了解网页应用的真实性能
使用样本分析器对性能几乎没有损害
这就意味着当你分析代码的时候
速度高达以前的30倍
这就让代码分析过程更快也更简单
而且收到的数据也更准确
这个进步真令人振奋 因为我们团队和网络检查器团队
能利用它来发现可以提升速度的地方
就在网络检查器本身
好了现在我们有了样本分析器
看看如何利用网络检查器帮我们找到问题
这个内容很多但是可以简单的拆分开来
更方便的是这都是你已经熟悉的代码
当我们说到分析JavaScript时
意思是在Events里为JavaScript记录时间线
这就是Events视图
显示了一列单独而且具体的JavaScript事件
特别的是这里都是D3库的代码
所以它能更方便调试代码
和分析代码在你正在使用的库里
而且这里的每一条都是代码运行的事件
这是代码进出JavaScript核心引擎的情况
包括了监听事件的回调
比如动画框架的条目是在请求动画框架处理器
脚本评估条目显示JavaScript文件
的上传和首次评估
这里还有一些时间信息
告诉你运行的代码所花费的时间
所以如果有哪个超过了10或15毫秒
你就快要打破
60帧每秒的流畅性能底线
Events视图很有用但是还有另一个视图
是我们为你添加的叫做Call Trees视图
如果你用过其他分析工具那么对这个应该很熟悉
只要点击这个菜单然后转换到Call Trees视图
现在显示了调用堆栈里函数的累计运行时间
这个叫做Top Down视图
你可以用它深入发掘Call Tree
来找到耗费大量时间的热函数
但我最喜欢的视图是Bottom Up视图
它能直接让我找到最热的函数
就是取样最频繁的函数
这里罗列的是调出的函数
按照用时从大到小分类
它反转了Call Tree让你能直接对比各个函数的耗时
你能准确地看到耗时最多的地方
你可以展开这一条并按照路径返回
找到耗时最多的函数
你就能知道这个成本最高的代码是何时何地调出的
那么关于这部分有请我的同事
Brian Burg上台为大家展示
谢谢你 Jon样本分析器很好用
因为它可以提取十分复杂的内容
并进行分析让你看到十分精确的信息
而且你可以让它跑的更快
为了给你们展示我要用我制作的iPad应用
叫做卫星跟踪器在这里看看
卫星跟踪器会展示给你现在或任何时间
卫星所在的位置
你可以选择地球上的不同地点
也可以选择不同的卫星
不同的时区
这很棒吧
如果你担心头上盘旋的卫星
要带个锡纸帽子以防万一这个应用就是理想之选
但是这里有个小问题
如果很多卫星或者很多卫星组件
像这样挤爆了那么帧率的波动会很大
这肯定不是60帧每秒
它会一直波动
这样就可以用样本分析器来查找
发生了什么为什么这么慢
我们要做的就是打开Safari并进入Develop菜单
找到这里的iPad并连接上
那么我要做的第一件事就是进入Frames视图
看看现在的位置帧率如何
那么开始记录
我再转回iPad
做点什么
比如转动一下
或者换一个卫星
换个时区
好了现在回去看看
好的把这个缩小
所有的性能就都显示在这里了
有的时候是60帧每秒像左边这些
在中间则上下都有
因为我们在更改视图
这一些就太慢了
我想知道出了什么问题
那么我就转到Events视图
点击JavaScript和Events时间线
重点看看样本分析器的数据
就像Jon之前演示的那样这里的Events视图
会显示所有运行循环里的内容
这个例子里就是动画和模拟
就是我们在不断地渲染帧
这不是很有用因为无法找到耗时最多的地方
那么我们转到Call Trees视图
这里我们看到Top DownCall Tree
集合显示了所有的渲染帧
都是最耗时的地方
展开这个就能看到D3有一个Timer函数
它调出一些代码画了一些场景
这些场景包括卫星
和时间等
这个很棒能让我们了解代码在做什么
但是如果要想找出哪个函数最耗费
最好还是去看Bottom Up视图
这里我们列出了所有函数无论谁调用它们
我们看到这个fillText
和tangent是最耗费的两个
那为什么会调出tangent呢？
我们展开这一行看看调令来源
就在这里是_plotSatellites
好像正在计算转换用来绘制地球
好的这些看着都很正常
也许我该找出数学课本让它算得快一点
现在看看fillText
换个画面回到这里的应用
我们正在当前时间上绘制文本也在每个数据点上绘制
这说得通
但是如果仔细看我们实际上把这个时间画了两次
这就有点奇怪
所以我们展开这一行
就能看到调令来自哪里
这里我们好像一次画了两个不同的前景
这大概不是我们想要的
那么来找找哪儿出了问题
如果像这样画了两个前景
那么我们的工作量实际就是所需的两倍
为了让你的记忆更清晰记住我们有个平面地图
然后有这个地球它在转动
那么现在回到代码
找一找是什么控制着两个地图的切换
估计哪里弄错了
改变地点的时候我们会让两个地球互换
这是 updateLocation
好的 因为已经有一个地图就不再需要另一个
这是有道理的因为这里我们添加了隐藏类
就为了不让它显示出来
这里在_globeMap我们定义running值为真
在整个运行中
而且在place中声明我们显示的不是_globeProjection
这是对的
当我们显示平面地图
我们不会显示地球它也不会运行
这个平面地图看上去好像
一直在运行UI也在运行
这也挺奇怪的
那么我们回到地图试着做点儿什么
这里我们选择这个数据组
然后进入Earth
它的帧率要好于只做世界地图
那么这就很有道理
我想我们在世界地图活动的时候画了两张地图
但是在平面地图的时候只画了一个
那么我们就在这里改变这个条件
糟糕应该反过来
好的 先停下看看有没有修复
回到iPad
好的这看上去很流畅
来到这里
恩 很好
看上去不错
那么我们再去检查时间渲染
看看是不是60帧每秒
那么回到Frames视图
然后开始记录很不错
我转动地球的时候有点慢
但稳定度看上去...
不错绝对在60帧每秒以下
在这里有一个条只要低于它就是好的
现在卫星跟踪器快了很多
我们就知道什么时候带上帽子
这很棒
这就是个简单的例子关于如何使用样本分析器
来发现最繁忙的内容并让它运行的更快
下面Jon会跟大家讲讲内存和分配
谢谢 Brian
你看到了分析很迅速
它能让你了解代码的真实速度
这样你就能获得十分精确的数据
再看看JavaScript和Events时间线
并用它们找到缓慢的回调处理器和定时器
或者在Events视图里缓慢的脚本初始化
请用新的Call Trees视图来了解耗时
因为它们会沿着你选择的时间线堆积起来
记着Bottom Up是你的新朋友
它能帮助你找到最需要优化的地方
那么现在我们已经看过了新的样本分析器
和新的JavaScriptCall Trees视图
我很激动能用更好的工具来优化CPU时间
这样就能给用户快速的体验
并帮他们节省了电池
这真的不错现在我们继续
看看性能的另一方面
就是了解内存都去哪儿了
你肯定想更有效率地使用网页内容的内存
因为这是有限资源
有效地使用内存可以优化网页内容的比例
并能处理大型数据组
而且内存占用过多会降低性能我们并不想这样
它也会让你的网页内容崩溃
这更非我们所愿
好消息是若你运行WKWebView它会以单独的进程运行
不会让整个应用崩溃
但是这仍然不是一个好的用户体验
为了帮你解决这些问题我们添加了两个新时间线
给网络检查器和Safari 10
当启动新网络检查器新时间线就默认关闭
所以要打开它们
你只要点击Edit就在时间线上面
就可以配置自己想看的时间线
这样就可以只研究自己想用的那个
就和Instruments应用一样
只要开启新的时间线就可以记录新的时间线了
但你可能不想让它们同时运行
JavaScript和Events时间线样本分析器
虽然负载较少但还是有
而JavaScript Allocation的时间线会添加更多进程
在垃圾回收过程中这会影响性能
那我们就一直开着Memory时间线
那么在记录一个时间线的时候你会看到这个
这个新的Memory时间线图表显示了内存如何分配
到不同的目录里在不同的时间
这里有一系列图表
帮你了解内存的使用和划分
Breakdown表显示了内存如何分配给
JavaScript和图画和构成页面的分层
以及其他引擎相关的网页
Max Comparison图帮你研究内存高峰
这里有一个高的水印
帮你观察过去的内存问题
你甚至可以分离各个峰通过选择一个特定的部分
或者在一个峰值周围选择一个特定的时间段
然后你就可以使用下面的目录分类
来看看是什么造成了大部分高峰
这里的每个图表都是独立测量的
所以你可以清楚地看到不同时间的变化
JavaScript里的峰值显示的是
大量新对象被创建和引用的地方
其中包括的对象有字符串对象和函数
以及所有支持它们的引擎数据比如结构数据和编译代码
当你看到JavaScript的用量下降
就是说垃圾回收在回收内存
图片显示了分配给图片的内存
这些图片都通过解码显示
这里的图片数据比较大
通常用于可以在视口显示的图片
层显示的是图层内存
分配在WebKitstileGrid复合层
和其他引擎层
页面就囊括了所有其他的东西
引擎所追踪的所有内容
比如DOM和页面风格以及字体渲染数据
内存缓存和系统分配
所以这个分类能让你很好的保证
内存用量符合你的预期
若你有很多JavaScript内容你要明白
JavaScript会是分类图表里用量最多的一类
在时间线图表里你可能会随着时间看到更多变化
但是对于多图片的页面比如画廊
那么分层和图片目录就可能是最大的
随着时间变化也更多
这就是Safari 10里最新的Memory时间线
Memory时间线的补充就是新的JavaScript Allocations时间线
你不仅能看到不同时间里内存的变化
还能更细的探究
JavaScript Allocations的真实情况
对此我们有个强大的工具JavaScript Allocation Snapshots
快照的强大之处
是你可在JavaScripts堆里对一个时刻进行快照
然后你就可以深入看到所有被分配的东西
但是更强大的是你有两个快照的时候
你就可以回头再看并进行对比
对比快照是我们最强大的工具之一
它可以解答我是不是做了不必要的分配？
一定要利用它因为你需要多个快照
这也就是为什么默认每10秒照一次
不仅要在记录开始还要在结束
快照是在时间线上设计的所以它们能连到
其他时间线上发生的事情
在这里其他的都被我关了
这些快照在下面列出并附了一些细节
比如堆的时间和大小
要了解一个特定的问题
就通常需要在开始和结束的时候快照
围绕你认为内存会出问题的地方
这里有三个技巧
你可以依赖自动快照每10秒一次
或者可以亲自快照就按快照键
或者用代码执行
最简单的找到问题的方法还是改代码
调出takeHeapSnapshot API
传递一个自定义的标签参数它可以是任何
之后能帮你识别它的东西
还有你要做一对快照
在你认为导致问题的代码的前后
你还可以通过快照来使用这个代码
在一个循环内的工作之间
分析内存
下面讲讲要时刻牢记的几点关于takeHeapSnapshot API
要记住快照会增添一些额外的进程在垃圾回收进程中
这会影响性能所以你一定要注意
你的代码是否频繁的发射快照
你也要捕捉到前后不同的信息
当代码在一个循环之间的某个时刻运行时
不要留下这个
如果你把它留下对大部分用户来说没问题
但一旦有人运行网络检查器它们就会使用所有的快照
你大概也不想这样
所以要记住在启动前一定把它们删除
那么这些快照都显示了什么？
让我们来看一看
你只要点击时间线上的快照图标
或者在快照列表条目里点击Arrow按键
你看到的这一列对象都是之前分配在堆里的
快照有两个视图
这是Instances视图
展示了堆里的对象列表按照类来分组
另一个是对象图像视图
这实际上概括了所有东西
所有的所有
如果你很熟悉这个代码
它就能很好地帮助你确认事情或者找到相应的位置
但是实际上更有用的视图
是在Instances视图里
它的强大在于你可以轻松地找到对象
不论他们在属性路径里藏得多深
这里的Count可以帮你意识到潜在的问题
就是它们无法达到预期的时候
比如我能否实现4000多个字符串对象？
你可以展开这个Classes来看看所有分配到这里的对象
然后判断什么是什么通过这么多不同的线索
Class是一线索
另外就是对象的实际属性
这能让我们很快了解什么是什么
但是最简单的了解对象的方法
就是悬停在这个对象识别器上你就会看到这个
这里实际上显示的是到对象的最短路径
它告诉了你究竟是什么让这个对象保持活动
它基本上总会给你你需要的答案
特别是在JavaScript的垃圾回收里
这就是能立刻解开疑惑的方法
但是它最重要的功能和最关键的要点
在于它能比较两个快照
看看这个当你已经收集了一些快照
只要点击此处“比较快照”按键
然后选择Baseline快照再选一个对比
一下子
你就有了一个新的对比快照可以研究
这个十分有意义
因为现在只能看到新的对象
在两个点之间在两个快照之间
展开对象类分组可以看到所有的对象分配
预览中显示了它们的名字和类似遥测数据的东西
这里就说明它是卫星对象
这里的弹窗显示_Satellites Array属性
由于这是一个快照对比
卫星的对象都是新分配的
这是个很重要的线索显示代码在做什么
那么为了让你们实际看到这些新的存储功能
我要有请Brian回到台上来做另一个演示
谢谢 Jon
我把卫星跟踪器给了我的朋友Ed
他熬了一夜在玩这个
他很开心因为他从来没有被卫星跟踪过
但是这就有个问题
它运行时间越长最终会变得越来越慢
这在我看来很像传统的内存
打开时间越久就越慢
我想在卫星跟踪器里用这些新存储工具来看看
我们是否泄漏了一些内存
那么第一件事
我的iPad在这儿
我要回到网络检查器...
并且检查这个应用
我要做的第一件事
在我不知道问题在哪儿的时候就是要使用Memory时间线
它会告诉我页面上大概发生了什么
那么我们开始记录
转回来
我在两个卫星之间来回切换
也许我会在这里添加一些效果
好的我在来回切换
好了现在去时间线看看
在时间线概览中你看到一个堆积线形图
显示了所有不同的部分和相关的大小
如果你点击这里会看到更多的细节
那么这个页面上没有图片
都是画布
分层也很平面
页面有些波动有些内容在垃圾回收
没有问题
如果你仔细看看JavaScript你会看到...
虽然有些东西被垃圾回收
但是整体来说它还是在随着时间堆积
如果我们运行一整晚那估计会堆积更多
下一步就是启用heap快照或allocation快照
这样我们就能找到随着时间而分配的内容
为了实现这个我们要开始新的记录
这有个快捷键Shift 点击或Shift 空格
这样就会启动新的记录而不是继续之前那个
等等我忘了改时间线
去掉Memory
选上Allocations
好了开始记录
回到iPad
添加了小小的takeHeapSnapshot键
我已给控制台添加了一些takeHeapSnapshot的调令
用于切换两个卫星小组和其他操作
对这个记录我要转动地图
然后不断在两个卫星中切换
我们还要看看Spy Satellites看上去也有关联
好了 你会发现开始有点卡了
因为我们给JavaScript堆里的所有东西拍了快照
因此产生了很多对象
这会大幅降低应用的速度
所以一定不要拍很多快照
只在重要的时候拍
这里你可以看到方块里的S就是我们拍的快照
放大一下能看到
随着时间过去内存十分稳定的增长
当我们开始在两个卫星之间切换的时候
如果我们要研究这个像Jon说的那样
我们就要启动对比来看看是什么被拦住了
那么我们就对比快照9和11
立刻我们就看到很多东西
被分配在9和11之间并且仍然在活动中
这就清楚地说明了它们被留存了
虽然我们并不想这么做
那么我们来看看这些都是什么
这是些阵列
看上去这个阵列里全是坐标
你知道在应用的不同部分我们会用大量的坐标
但是如果我们停在这里就会看到它的路径
它们好像是被保存于trajectoryHistory
这是我们用来制作追踪卫星的东西
好的这样不错
但是我想不应该
再在已不显示的卫星里用trajectoryHistory
这好像是个bug
我们也分配了一些对象
但奇怪的是在快照9和11之间
我们之前已经看到这些卫星
那么我就不想再给每个卫星创建新的对象
我们只要直接使用它们只要我们已经为他们获取了资源
然后这里有了很多坐标和遥测
好像正在重新解析什么
我不太确定那么...
在这个视图里我们有很多对象
你不能读取所有
所以我想做的就是找出很特别的那一个
那么在这个快照里
我们有很多字符串阵列和对象
但只有一个Promise
它停留在两个快照之间
所以我认为应该调试这个
那么我就找到代码看看是哪里在用Promises
因为好像它与别的什么一起被泄露了
于是搜索Promise
好了 这是D3库这是使用它的代码
好的来看看这个
好了 在［听不清］里我们常常在卫星之间切换
代码是loadDataset
有人写了评论太好了
这里看上去好像有人请求我们改变卫星
那么这里就可以异步从URL下载数据
当它返回我们就要解析
然后使用卫星绘图库 做更多的解析
然后我们把它存到卫星列表上
这都很不错但是回到检查器
我们好像每次都泄露该Promise
如果你更仔细的想想
如果切换到已经下载的数据组会怎样？
我们甚至都没有检查过这个事情
你仔细的看看这里
每次在两个卫星之间转换
我们就发出一个新的网络请求
如果我们进入这个时间线
就会看到我们在不断请求同样的垃圾数据
这是正常的如果回到代码 发出请求
解析的时候会产生大量的对象
然后我们把它推入卫星阵列
就目前来看它怎么都不清楚
我们好像一直在做无用功然后不断泄露
所以这里我们要做的
是检查我们是否已经解析了这个卫星对象
因为这是Promise
如果它确实存在我们可以调出.then
由于这已解决下一次评估Promise的反应时
它就会进行检查并将卫星放到地图上
那么在这里添加代码
如果不存在我们就创建一个
好了 现在停下来看看有没有效果
我们就要回去重新连接
这是我们的应用开始记录吧
当我们回到应用我就打开快照
打开一些效果
然后往南走
好的 间谍卫星
卫星的科学实验
科学实验
好了
如果我们回到这里我们看到内存的增长大大降低
大概在1兆而不是四五兆
那么这里可能有更多的泄露
但是在快照结束的时候我们的内存
跟刚开始渲染的时候一样大
这样我们就修复了这个特殊的泄露
这就展示了我们如何使用Allocations和Memory时间线
来解决像这样的应用的内存泄露问题
这很不错因为应用可以用更多的操作
有了diffing功能
我们就可以深入观察我们所关心的卫星里的变化
好了卫星跟踪器就讲到这
你回来吧 Jon
谢谢 Brian
你看到了真是不可思议的迅速和简单
这些新的时间线让内存零问题
所以请记住Memory时间线是了解
内存的使用情况和造成内存高峰的原因
这样你就知道该去哪里找问题
然后使用多个Heap快照在JavaScript Allocations时间线里
以便单独放大造成内存增长的代码
还有不要忘了删除takeHeapSnapshot
在代码运行之前
要记住性能所受的影响
是JavaScript Allocations时间线记录时产生的
那么以上就是新的时间线工具
可用在Safari 10的网络检查器上
我想你一定会爱上它们
在结束之前我还想再说几点
我要建议你们重新考虑下WKWebView
如果你还没有换掉它
在Safari设置里打开Develop菜单
连接网络检查器到你的应用
然后开始利用这些新功能
节省大量时间Bottom Up视图和Call Trees用于
找到最需要优化的地方
Memory时间线可以快速看到内存高峰的情况
Heap快照可以轻松查找和比较对象分配
时刻关注新功能的更新
今年网络检查器和WebKit有更多内容
可以让你利用应用的网页内容
来创造绝佳的应用内的用户体验
除了Brian和我今天为你们展示的功能
我们团队过去一年也为网络检查器添加了很多内容
Quick Open会让你直接跳到页面加载的资源
尾调用堆栈现在可显示调试器里的尾调用优化函数
初春的时候在OS 10系统下我们引进了Safari 9.1
并更新了网络检查器
它显示了Elements标签下DOM Tree里的Pseudo Elements
这里还有一个新的视觉风格边栏
可能你还没注意到
网络检查器是一个开发者工具
作为WebKit开源项目的一部分
WebKit是网页浏览器引擎用来支持你的应用
驱动WebViews和JSContext
当然它也是Safari背后的动力
在过去一年里我们为WebKit添加了好多新功能
我们对ES6100％支持
我们改进了对IndexedDBStandard的支持
还添加了Shadow DOM支持WebDriver和CSS变量
以及Picture Element
所以真的是很多内容而且作为开源项目
一旦有新的出现你就能知道
你们在座大部分人肯定都想能利用它工作
如果你们想对这些内容作出改进
完全有机会
因为WebKit是开放资源
你可在WebKit.org上找到更多WebKit项目信息
WebKit团队及其背后的工程师们会在博客上写他们的开发工作
实际上我们现在有两个博客
关于Memory时间线和样本分析器
就是今天讲的内容
所以如果你想了解更多可以去那里看看
我们还有一个功能状态页一目了然的列出了所有更新
针对网页标准进程
这里还有链接可以下载WebKit夜间建构
和最新的浏览器Safari技术概览
每几周更新一次附带更新的WebKit引擎
所以你可以在WebKit上尝试这些新的实验性功能
它们每两周改进一次
我们团队投入了大量精力给SafariWebKit和网络检查器
网络检查器团队可以使用这些新性能特性
就像我们今天展示的那样去查询问题并提高性能
对网络检查器本身
我已经迫不及待想看看你们会做些什么
想了解更多信息请观看这个演讲
在developer.apple.com下载幻灯片
这周的前几天有很多场相关演讲
过去几年也有不少
这些都能在developer.apple.com上找到
那么代表Brian 我自己和Safari与WebKit团队
感谢你们的到来祝大家在接下来的WWDC中过得愉快