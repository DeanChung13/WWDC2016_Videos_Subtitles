介绍Swift Playgrounds
早上好
早上好
非常感谢大家我是Matt Patenaude
我是Playgrounds团队的工程师
欢迎参加演讲408“介绍Swift Playgrounds”
我非常激动成为这个团队中的一员
今天我们要给你们展示一下天哪我们要给你们展示很多东西
好的让我们开始吧
目前为止你们已接触这个应用有48个小时了
所以我确定你们中很多人已经看到这个了
但是也可能你们中有些人设法抵制住了它的诱惑
Swift Playgrounds确实是iPad令人激动的新应用
它能让你用Swift编程
让你用手指直接感受Swift的强大
如果你对编程没有什么经验这个应用对你很有用
我们有很棒的学习编码的课程
你可以从应用上直接下载
我们把它设计的吸引人而且令人激动
无论你处于什么编程水平
别的不说 你可以用它制作出漂亮的舞步
如果你对编程略有经验
我们也为你准备了很棒的起点工具
像这个形状模板
它能够让你用颜色和触摸这样的东西做实验
这在iPad上都是独一无二的别的地方你不会看到
如果你已经习惯于Xcode中的编程工具
你可以把你的iOS编程工具中的代码更新到Swift 3
它们在Swift Playgrounds和iPad上都会运行得很好
我们认为它确实是令人激动的产品
我们知道你会用它做出令人称奇的东西
好的 我们有很多东西展示给你们
今天的演讲分为三部分
首先让我的同事Max上台
他会演示如何使用这个应用
包括神奇的触摸反馈和手势
这绝对是iPad的独一无二的体验
然后是Jonathan
他会演示如何编译更有吸引力的内容
用SwiftPlaygrounds
使用新文档格式的新特征
最后Izzy会上台 他要演示
你可以做的一些很酷的东西
一旦你有更多时间玩这个软件
闲言少叙 有请Max
谢谢Matt
谢谢Matt
首先让我们看一个截屏
它是Swift Playgrounds的截屏我们可以看到
界面的不同组成部分
在屏幕的左侧是源代码编译器
右侧是实时视图
源代码编译器由几个区域组成
一个区域是Playground注释
你可以看到这儿有很多注释
它可以分散在每个页面之内
这是一个内容丰富的文本帮助你了解文档的信息
下面有一个源代码的实例
在这儿你完成所有的编程代码
在屏幕的底端有快捷菜单
中间是代码补全
这取决于光标处的代码
左面是撤销和恢复按钮
右面有两个——是几个快捷按钮
一个是删除按钮
另一个按钮用于插入行第三个用来弹出软键盘
这些按钮将帮助到你
如果你不想用键盘编程的话
右面是实时视图
在这儿能实时看到代码的执行情况
下面有运行代码按钮
按下它将编译和运行你的代码
顶部的左边有文档按钮
可以选择你的文档
这个按钮用来显示内容的列表它能显示
文档中所有的章节和页面
还有两个按钮用于浏览页面
右边是工具菜单
资料菜单和工具菜单
让我们看看它们里面是什么
在资料菜单下是代码片段
旁边是图像列表
你可把这些图像添到playground或文档中
第三个是文件列表
你可以从其中选择添加到你的文档中去
在工具菜单下你可以找到应用的帮助
文档的术语表
这两个按钮可以分享有关文档的东西
例如录屏 把你的操作录制下来
截屏 把实时视图的图像保存下来
最后是还原按钮可以把页面还原到初始状态
现在我们在文件浏览器中
你可以看到这儿有很多文件
我要打开Playground的形状模板
它们都在这儿
这儿只有一行代码让rectangle等于某个值
我想在实时视图中画一些长方形
我认为这非常有趣
下面我要在值上点击
你会看到在底部出现了代码补全
这儿有许多不同的选项
我要找到长方形
通过点击代码补全并且向左拉动滚动条浏览整个代码补全
这是长方形点击它 它就会插入到文档中
注意在屏幕的左方出现了一个橘黄色圆圈儿
这说明这行代码有问题
点击它 它告诉我这行代码有错误
我需要在长方形后面加上括号这儿有修复选项
你可以点击第一个它就会插入到文档中
橘黄色的圆圈儿消失了
现在点击我的代码可以看到我画了一个长方形
它是正方形 但...
现在注意当我们把光标下移的时候
在代码补全中出现了长方形
我点击它 然后点击圆点
现在它列举出了所有的不同属性
和函数 我可以把它们用在长方形上
为了看的更清除
我们改变一下边框的颜色和宽度
让我们输入边框颜色
这儿有一个等号运算符 点击它
我们得到一个占位符代表某种类型的颜色
注意代码补全中的第二项是一个灰色方框
这意味着我们可以插入所见即所得的颜色
点击一下我们得到一个白色的方框
点击方框会出现一个快速编辑器可以改变颜色的值
Swift Playground中有很多快速编辑器
这只是一个颜色编辑器
我把颜色从白色变成黑色点击运行代码
现在边框变成了黑色
现在看上去不太清楚我要增加边框的宽度
点击长方形 点击圆点
点击边框宽度和等号现在出现了一个数字盘
它也是一个快速编辑器我们可以快速输入一个数字
输入四 噢 点击运行
现在看起来清楚多了
现在我要我想编一个程序
当我在实时视图中移动手指的时候会画出一串正方形
我要写更多的代码
我要把实时视图隐藏让我有更多的空间写代码
我要在屏幕的中央点击并且按住
它会把屏幕分为左右两半儿
现在拖动到右侧使实时视图消失
现在点击源代码
Swift Playgrounds有一个很好的软键盘
当你想用屏幕键盘编程的时候可以使用它
让我点击菜单中的向上按钮把软键盘显示出来
注意每个键的上方都有一个替代值
后面我们会详细讲解
我们首先使用canvas对象
它在playground形状里以便和实时视图进行互动
让我键入C-a-n我们有了canvas对象
输入Shared得到shared canvas
现在输入Drag
注意SwiftPlaygrounds模糊匹配了
onTouchDrag handler仅仅通过输入Drag
我点击一下就得到了一个函数的占位空间
点击回车就会扩展占位符的空间让我们输入更多的代码
现在我想创建一个程序能随着手指拖动产生许多长方形
我要做的就是把刚才的代码添加进去
点击下面的大括号并按住它 向下拖动
把前面的代码包含到大括号内
下一步就是
我要把长方形的中心设置为我点击的地方
让我们加入一行代码设置长方形的中心位置
为canvas共享的当前触摸点
它是一个数组
如果我点击并且按住H然后向右拖动
就得到了数组的下标括号
下面我点击并且按住P得到零号元素
现在关闭代码视图 看看实时视图
点击运行代码就可以开始画图了
耶
现在我在屏幕中央点击并且按住
向左拖动把代码视图关掉现在我可以在整屏幕上作图了
我很喜欢它 有点儿艺术性我要把它发送给Matt
我要点击工具菜单
你可以把实时视图截屏保存下来
其实有很多程序在运行
幕后做了很多工作使playground这样运行
有请Jonathan
他会给我们演示
Playgrounds内部的工作原理
好 Jonathan
谢谢 Matt和Max
iPad上的Swift Playgrounds
让你使用和在Mac上创建的同样的Swift 3 Playground文档
你也可以在iPad上创建它们
你可以使用AirDrop、iCloudDrive和其它文档提供者
来转换文档并且在这些环境中运行它们
这很有趣
在传统的Playground文件格式之外
iPad的Swift Playgrounds引入了一种新的文件格式
它利用了新的环境
Playground Books提供更多编程代码块
可以创建交互的题材
在其中你希望别人也可以一起探究
你想给他们展示一些东西
下面
我要向你们展示一些新功能
以及你们如何利用这些新功能
首先Playground Books是由按章节分组的页面构成的
并且在此基础上生成了内容列表这是为了利于浏览
Playground Books提供了一种新类型的页面叫做剧情画面
这非常有用如果你想进行全屏展示
在你讲述故事的过程中
你看 我们的内容团队很好的应用了它
把大的构思用有趣的方式展示出来
当你介绍概念的时候你可以使用词汇表功能
动动手指就可以把术语和它们的定义联系起来
这些术语和定义集中起来
储存在某个地方以供参考
满是Swift代码的Playground页面令人生畏
有时你不想从你要展示的细节处分心
Playground Books使学习者能够集中精力
这是通过使用编辑区域实现的
你用特别的注释注释你的Swift代码
它们开始是空白的学习者可以在以后添加进去
这会减少你的分心特别是在早期阶段
当你尽力展示一个复杂概念的时候
Playground Books让你标记不想显示的代码
隐藏代码区使你能够灵活的运行、创建
和删除代码在中间的某种工作区中
最初把细节隐藏起来是一个很好的方式
然后你可以拉开窗帘儿
在你准备好的时候魔术般的展现已经创建好的代码
Playground Books让你可以配置快捷按钮
它们在代码补全菜单条上显示
你可以指定或者删除标示符、模块、关键字等等
在注释中定制那些内容会出现
用新的文件格式你可以配置实时视图
在页面加载时实时视图立即呈现出来
它在一个独立的进程中运行Swift 代码
完全独立于编辑器中输入和运行的代码
编辑器代码在左侧实时视图代码在右侧
他们用一个特殊的XPC机制通信
下面我们要看看这是怎么实现的你可以浏览
我的演示这样你就可以使用这个机制了
交互式可视化是一个很好的方式
在编辑器中创建代码同时代码立即运行
如果你想一边思考
一边创建实现某个东西
你可以为键入的代码提供提示内容
学习者可以通过点击提示按钮得到提示
如果他们成功的完成了任务你可以让他们知道
通过一条成功消息
Playground Books记住你对每个页面评价
学习者在内容列表中可以看到他们已经完成的内容
使用这些提示和评估机制可以使你更有动力设计下去
你还可以访问文档中的一个简单的键/值库
这样你可以跟踪偏好或者甚至更高级的进展
当学习者在一页一页浏览书的时候
Playground Books是可重置的
做出的改变都存放在一个独立的区域
它们独立于主文件内容以外如果学习者选择
他们可以把页面恢复到第一次打开时的状态
整个文档也可以重置
每个页面都是原始状态键/值库也被清除
评估可以重置它们可以重新开始
最后 但同样重要的是在developer.apple.com上
你可以看到该格式的文档
我们要确保你知道它是如何运行的
你就能够定制自己内容产品工作流程
让奇迹发生吧
从这些例子和参考开始吧
仔细研究甚至把PlaygroundBooks读烂学到更多东西
Playground Books是我们内容团队创建的
好你们明白了
现在我想介绍一本Playground Book
它是我创建的我想向你们展示
从作者的角度你会体验到什么？
所以本书的读者
是你们这些Swift的用户
你们甚至用过Mac上Playgrounds
但是Playground Book格式是新事物
你们也想进一步了解它的工作原理
我编辑这本PlaygroundBook旨在创建
一个实时的参考演示演示这些新的
在线实时视图是如何工作的以及你如何同它交流
现在开始
还有什么比...
用一个Playground Book
来演示Playground Books
的新特性的更好方式呢？
听起来有点绕
好的 那么...
我们开始吧
这儿有文档浏览器
我要找出我的Playground Book
点击“同实时视图交流”
你可以看到实时视图立即开始运行了
注意编辑器上的代码
甚至还没有编译它根本没有运行
我所写的代码在一个独立的进程中
在线实时视图显示了一个漂亮的小脸
它是Em
它是一个Swift程序它喜欢
玩“敲 敲”游戏
在简介页面上我们可以看到
游戏是为了交谈逗乐
学习者不需要详细了解
我们是如何把消息发送给实时视图的
我只想让你们觉得很有趣
上面附加了有趣的描述
我们要做的是发送信息
使用下面的Say函数
这些字符将被发送到另一面
它们会启动对话状态机
这是Em运行的一个程序随着笑话继续它会不停的运行
我们从这儿开始这儿已经填好了一个字符串
“敲 敲” 我只要按下运行代码按纽
Em会回答 “你是谁？”
左边的代码被编译运行
用Say函数奇迹就发生了
字符串被传递到另一面
过一会儿我们会讲解奇迹是如何发生的
让我们继续
我要说“Boo”
我在使用外接键盘输入
因为我不想让内置键盘
占去屏幕
点击运行代码按扭字符串被传送过去
“Boo！是谁？”
“你在哭吗？”
点击运行代码
Em正确的识别了这个敲敲笑话是经典的
让我们再试一次看看它会怎样
我需要重启Em的对话状态机
我要开始 键入“敲 敲”
点击运行代码按钮编译和运行 传送字符串
字符串通过线缆传到另一面
“你是谁？”
UInt Swift的无符号整数类型
“UInt是谁？”
“你对更好笑的笑话感兴趣吗？”
看起来你们赞同Em此时的回应
很不幸 但是...
我们在这儿用这个想法做了个实验
好的进入下一页
奇迹的秘密被揭开了
你可以看到Say函数的具体代码
这些代码把字符串传送给实时视图进程
过一会儿我们再看里面的细节
这是一本Playground Book
它不断的监听在线实时视图的API
这是从作者的角度看到的
你也可以在下面的页面中学习到
如何发送更复杂的命令给Em
你可以配置它识别新的设置
改变笑话的模式
你甚至可以把笑话模式储存在键/值库中
在以后你可以加载它们逗乐
在下一次你打开Playground Book的时候
Playground Book
可以和我们的演讲资料一起下载
演讲后你可以查阅一下
现在我们要进一步了解
从作者的角度看 它是如何运行的？
Playground Books是一个特殊的文件格式
以适应在触摸设备上教授这些概念
例如iPad等设备
他们是扩展名为.playgroundbook的文件夹
操作系统认为它是一个文件包
你可以使用任何编辑器在Mac上编辑
你可以使用Xcode你最喜爱的文本编辑器
使用你的版本控制系统
编译自己的定制内容管理工作流
如果你需要 还可以在PlaygroundBooks中生成内容
我们看看这个包是由那些文件组成的
这个包包括文件和文件夹
以及使所有一切运行的Swift代码资源库配置
这是简要的概述
后面我们会再详细讲解
先让我们看看所有一切是怎么组织起来的
在文件包的根目录
有一个文件夹叫内容你会猜到
这儿存放你编写的内容
里面有两个文件夹你会认得它们
如果你以前写过playgrounds程序
Sources文件夹存放全局Swift文件
这些文件已经编译好了供每个页面使用
在你的Playground Book中
你甚至不需要导入它们
任何声明为public的文件都可被其它页面使用
一旦你打开页面
然后是Resources文件夹...
包含页面需要的资源
储存有你的图像文件、声音文件和其它资源
你可以通过文件名加载它们就可以把它们拖到相应的文件中
注意这两个文件夹在根目录上
文件包的根目录因此它们中的所有文件
在整本书中的每一个页面都可以使用
如果你愿意 你可以把它们限制到只能在某些章节使用
通过把Sources和Resources文件夹放置在那儿
甚至限制到只能在某个页面使用
并且你可以在其他页面中不分享这些东西
完全由你决定定制化是供你使用的
下一个文件夹是Chapters文件夹
正如你所料 它由章节组成
每个文件夹含有一个或多个页面
每个页面是一个文件夹
它含有可以和你互动的内容
当在应用中使用Playground Book时
我们首先看看这个文件Manifest.plist
它是一个特殊的配置文件设置页面的工作方式
打开这个文件它看起来是这个样子的
我们会慢慢看不要担心
Manifest文件是属性的列表是键和值的词典
Swift Playground用它决定一个文档页面
如何工作
这些manifest文件用于配置章节层和
文档层的行为
例如内容列表中的内容排序
今天我们准备主要讲解一下页面的manifest
因为它对刚才显示中你看到的内容影响最大
我们看看每一个配置机制
是如何影响页面的
属性列表的第一个键是名字你可以猜到
它设置文档顶部的名字它也用在
内容列表中
下一个键实时视图模式控制实时视图的工作方式
当页面第一次被打开时
通常实时视图是隐藏的直到它在代码中被激活
或者学习者让它显示在屏幕上
如果我想让它在页面打开时立即显示
我可以把这个键改为默认可见
我就得到了我想要的行为
PosterReference键设置
在Resources文件夹中查找一文件
这个文件会成为一个海报它会覆盖
实时视图区域在实时视图进程
在页面打开后运行以前
你看一旦实时视图进程开始运行
海报图像就消失了
我们就可以看到下面的实时视图的内容了
LiveViewEdgetoEdge键是一个布尔值
它决定实时视图的内容区域是否
扩展到视窗的边界
并且在下面显示运行代码按钮
就像在这儿看到的一样
我想把它设成这样我就选择是
如果你把LiveViewEdgetoEdge设置为否
并且你为实时视图设置了背景颜色
就是这样的
注意它嵌入的的边界
它没有被运行代码按钮覆盖
你来决定用哪种模式根据你的内容
例如如果你需要视图全部控制触摸区域
就把LiveViewEdgetoEdge设置为否
就会得到你想要的结果
Playground日志模式控制内联结果
你会看到在编辑器每一行的右端有一个返回值
在这个例子中我的实时视图报告了需要的结果
我就把PlaygroundLoggingMode
设置为关闭它会完全关闭内联结果
现在我已介绍了Playground文件格式的互动功能
它们使应用非常有趣
让我们看看这个文件Contents.swift
你们都已见过了Contents.swift文件
无论是全屏而是位于左侧
位于实时视图的左侧就和现在一样
编辑器中所有的内容来自Contents.swift文件
当你点击运行按钮时文件中的所有内容
和它引用的所有内容被执行
在我的简介页面中Contents.swift是这样
顶部是Playground注释用以帮助描述软件的功能
你的目标、如何得分和操作说明
通过阅读页面
可以了解如何和软件互动
以前用Playgrounds写过软件的人会认得它
它是标准的Playground注释
这儿有几行代码用来创建页面
真正的操作就会实现
但是我不想让这一部分被人们看到至少在这一页上
所以我用特别的魔术注释来标记隐藏代码块的开始
和结束
这两行之间的代码被隐藏了
但是在运行的时候 它们会被执行
但是当你打开这个页面的时候它们不会显示
在iPad的SwiftPlaygrounds中
这个Playgroundpage的真正工作
是从这个语句开始的就是对Say函数的调用
而Say函数被写在隐藏代码中
现在我想确保学习者
来到这个页面填入函数参数的时候
不会不小心造成编译错误
我使用了可编辑代码区
把特殊的魔术注释
放在可编辑代码区的首部和尾部
只有在这儿可以输入代码
只要你高兴 在页面上添加多少个这样注释都可
一旦你用了这个注释只有在这个区域能够输入内容
这正是我所需要的学习者可以随便输入
他们仅仅能够改变字符串
高级的Playground的作者会注意到这个占位符的语法
这些尖括号和＃号会产生一个透明圆形罩
显示在编辑器中
学习者点击它就可以键入任何内容
来代替原来的内容
这种方式很好的提示了
应在某地方进行怎样的操作
刚才我总结了Contents.swift中内容
对左侧边框的总结
现在我们转向
右侧边框看看在线实时视图中发生了什么
介绍页面有一个文件叫做LiveView.swift
这就是
首先我们导入PlaygroundSupport
那些以前用Playgrounds编辑过的人
对XE Playground很熟悉它是一个框架 让你能访问
页面环境
现它被重新命名了它是新的而且升级了
它叫Playground Support你可用它继续开发软件
我们请求当前的Playground页面
然后在页面上我们设置了实时视图的属性
把它设置为一个新实例叫做FaceViewController
FaceViewController是从哪儿来的呢？
它是Swift代码的一部分
储存在文档根目录的Sources目录中
这是我创建的代码库
能够在所有页面中共享使用
这儿我写下的所有代码只要被标记为public我都可以引用
现在如果你愿意 你能够
在LiveView.swift文件里面写下所有的实时视图代码
谁也阻止不了你那样做
但是然后你要把文档拷贝到
其它的PlaygroundBook页面中
来共享同样的实时视图动作
我的Playground Book文档的所有页面
我仅仅使用了这三行代码作为设置就使Playground
使在线实时视图运行
它们都共享了FaceViewController
我只要把这个文件拷贝到
需要使用它的任何页面中
那些以前编辑过Playgrounds的人
可能感觉这个代码很熟悉
这不就是设置实时视图吗
如果你在Contents.swift中这样做的话
是的 你仍然可以这样做
如果你选择这样做的话它在主进程中运行
和编译器的所有代码一起运行
那真的很有用因为你能够访问实时视图对象
你可以获取page.liveview把它投递到FaceViewController中去
然后和操作别的东西一样操作它
调用它的方法 改变它的属性它就是你的进程的一部分
但是那意味着实时视图仅仅是活动的
当编辑器中的代码运行的时候
只有当学习者按下运行代码按纽时它才开始启动
学习者按下停止按钮
或者学习者在编辑器中输入时它就会停止
如果代码中有编译错误它不能运行
这些代码现在正在编辑器中输入
这就是为什么在线实时视图
和LiveView.swift引入的原因
如果Playground Book页面中有一个文件叫做LiveView.swift
就自动生成了在线实时视图
页面打开时这个文件就运行了
并且它在一个独立的进程中运行
那太棒了因为那样它就一直在运行
即使编辑器中的代码没有运行或者不能编译
换来的是你不能把实时视图投递到
FaceViewController实例中并且和它交流
就像你们以前那样
你必须使用某种跨进程机制
来回传递消息 并且...我们后面会详细讲解
我们在Contents.swift的主进程中有了这个代码
这是编辑器中的代码运行的主进程
我想把字符串“敲 敲”送到另一侧
我们首先要导入PlaygroundSupport
我们访问当前页面
我们请求页面的实时视图
我们没有把它投递到FaceViewController中去
我把它投递到这个特殊的类PlaygroundRemoteLiveViewProxy中
这个类的实例用来的
通过线缆在两个进程之间传递信息
如果这个条件投递成功了
那就是代码中的一个队列它运行在
主进程中你就会得到这个页面的在线实时视图
我们把这个作为消息
假设这些都好了我们已经把它投递过去了
现在实时视图运行了我们有代理
我们设计了一个消息
消息传送机制使用PlaygroundValue
它是个枚举类型的值我们一会儿会详细介绍
看看这一行你可能会猜到
我们设计的一个字符串
“敲 敲”然后我们把这个消息
传递给代理
调用发送方法把它传递出去
Contents.swift中的代码会把字符串
传递给实时视图代理然后实时视图代理
把它传递给另一侧的监听方
我们需要连接FaceViewController从而能够接收到消息
在我们的代码库中
我们已经扩展了FaceViewController我们说过它遵循
PlaygroundLiveViewMessageHandler协议
那意味着我们必须实现接收方法以获得PlaygroundValue值
它将会被调用因为FaceViewController
是实时视图 因为我们把它的值赋给了page.liveview属性
这就是实时视图代理所知道的作为队列
它需要接收消息
在消息内 我们取得消息的参数
查看它携带的枚举类型抽取相关的值
我现在仅仅关心字符串因此我们就使用
if case let语句检查这样如果是为真
这个枚举的值就绑定给标识符文本
现在在if语句中有一个字符串
我们要继续进行下去
在这种情况下 我们把它传递给
函数processConversationLine
它会启动Em的对话状态机
那么我们如何把信息传递给另一方呢？
例如我们设置了当你在脸上点击时要显示的信息
我们得到了字符串“Hello”如何把它传递回去呢？
我们如何做呢？
好的 首先 在实时视图进程中你需要一个机制
能够触发发送消息我已经选择
在脸上设置一个触摸手势识别器
那会回调触摸方法
一旦你触摸脸部
我们设计一个PlaygroundValue消息 发送一个字符串
例如“hello”然后我们对自己
调用发送把这个消息发送给另一侧
现在发送方法来自哪儿？
好的 通过声明我们遵循
PlaygroundLiveViewMessageHandler协议
它会锁定我们的类它是自动完成的 很方便
在协议扩展中定义了发送方法它有一个默认的实现
因为这个类是实时视图调用发送方法
会仅仅把消息传送给实时视图代理
它会到达另一方
就像这样
你在脸上点击
产生“hello”字符串并且被传送给实时视图代理
现在实时视图代理要把消息
传送给另一侧的监听方
看看我们怎么把它们联通起来？
我们需要设置很多东西因为按照默认
你在Contents.swift中写的代码
会停止运行
在到达最后一条语句的时候
然而在本例中我们不想这样做
我们想让信息异步出现
也就是晚一些出现
我们要先抓取Playground页面
然后告诉它我们不想让它停止
通过把needsIndefiniteExecution属性设置为真
我们请求实时视图代理就像我们前面做的那样
现在我们需要有某个东西
作为可以接收消息的代理的代理
现在我要开始已经有一个类了
注意它遵循
PlaygroundRemoteLiveViewProxyDelegate协议
这意味着我必须实现remoteLiveViewProxy的接收方法
好啦
它将会被实时视图代理调用
我们可以把Playground的值分开
使用if case let语句
可以对文本进行一些处理
它定义了代理我们要把它们联通起来
我们要把它实例化然后把它的值赋给
代理的代理参数 或者代理属性
现在完成了
现在我们有FaceViewController
你的脸上点击一下
“Hello”打包作为PlaygroundValue
被传送给实时视图代理然后再传送给
我们刚刚创建的代理类
它接收到消息奇迹就发生了
我想指出这个PlaygroundValue枚举值让我们
有更多的选项可以静态的声明原始值
我们可以在两个进程之间来回传递它们
你可以直接使用这些枚举值就像在刚才的幻灯片中看到的那样
你也可以把对话操作定义到Playgroundvalue中
可以使用自己的数据结构
另一个好处是键/值库也使用Playgroundvalue
现在任务完成了 可以从这个模型中导出或者导入数据
这种工作可以用于双向进程通讯和保存语句
记住Contents.swift在左侧运行的进程中
它被称为主进程
如果在你的Playground Book页面中有LiveView.swift文件
它将会执行在独立的在线实时视图中运行
它在右侧的进程中运行
它的机制和我们以前的不同所以请研究
我们的参考实例和文档看看它是如何工作的
所以你可以利用这些新玩意儿
在编辑Playground Books的讨论快要结束的时候
我想告诉你们 作为内容编辑者
你在iPad上实现了伟大的想法
然后你把它同步到Mac上看一下 你会注意的
在顶部出现了一个和Contents文件夹并列的新文件夹
这儿记录了编辑器中发生的所有变化
所以不要惊讶当你在iPad上编辑内容
疯狂的在编辑器中输入和改变内容的时候
你认为它们都存进了Contents.swift中
但是当你在Mac上打开它的时候
Contents.swift文件回到了开始的状态
你做出的所有改变去哪儿了？
这就是设计
iPad上的Swift Playgrounds从未改变编辑内容
Swift Playgrounds储存了学习者改变的文本的dif格式的文档
位于Edits文件夹中可能的话我们会重新加载它们
这会使内容保持原始状态
这也是为何PlaygroundBooks可以被重置
以上是简要介绍
新的Playground Book格式底层设计的一部分
刚才说过 请到developer.apple.com上
获得参考文档和实例
仔细分析我们内容团队设计的Playground Books
那儿都有 我们想保证你有足够的资源
创造出炫酷的东西
现在我让你们体验了
作为作者在创造PlaygroundBooks时的感受
但是正如你们所料的这个应用仅仅可以供你们涂鸦
就像某种便签簿一样
但是它很棒！
下面有请我的同事Izzy
展示一下他用SwiftPlaygrounds做的一些东西
Izzy
谢谢你！Jonathan
谢谢你！Jonathan太棒了！
现在直接进入我们的演示
像你们一样 我对从星期一以来发布的这些特征
和这些APIs也很兴奋
尤其是 我确实非常感兴趣的一个编程领域是
我记得是程序内容生成
这个思想是计算机能够生成某个东西
而且这个东西和现实世界很相似这非常令我着迷
所以当我看到GameKit添加了支持这个的API
我禁不住想立刻上手
我还不太确信我需要的是什么但是当我看到这个新的APIs
我看到他们添加了这个新函数叫做GKPerlinNoiseSource
在应用中有帮助显示了所有的文档
如果我点击这儿的帮助
我们可以看到GKPerlinNoiseSource有一些特性
让它能够生成自然现象例如云和土地
那听起来正是我想要的
有了这个我仅仅写几行代码
我就把它转换成一张图片
我想看看我的图片
如果运行playground
对于你们习惯于在桌面系统上使用Playgrounds的人来说
你会注意到在视图的右边有一个结果工具栏
也许你们一些人以前没有看到这个
在你的playground运行时每一行产生一个结果
我在上面点击会弹出内容的执行结果
现在有点儿小我写上更多的代码
能够让它放大一点并且保持像素不变
因为我考虑到像素问题
后面我们再详细讨论
现在我们有了一个更大的图像我们可以用
添加视图按钮把它添加到代码中去
让我们滚动代码的时候它会随着一起滚动
现在它很大我们想让图像看起来是个图像
我们制作了噪声我们还想用它生成3D土地
我们要做的是一个像素一个像素地完成
整个图片当图像是深色时
我们想让它成为3D土地图像的较低区域
当图像是浅色的我们想让它成为土地的较高区域
你可以看到在右上角
是颜色较深的区域那将是较低的区域
在左下角是浅色区域那将是较高区域
所以我仅仅写了用户界面图像的一个小扩展
它是一个8位灰度的图像沿着横向
和纵向排列它被称为地块
在每个位置有8位灰度值
我们还想把它向上排列
因为我们的图像非常小十乘十像素的
8位图像有255个值 听起来有点高
所以我写了一个小的bucket函数
仅仅为了证明它能运行
我取尽了所有的整数值
你可以看看这儿的弹出图像它成了一个漂亮的梯子函数
我们的取值范围仅仅是从0到4而不是从0到255
然后用图像块填充我们的图像
我们得到一个这样的图形
很有趣
看起来很酷但它还不是真正的3D土地
你看在我的图像中每一个点有一个关联的高度值
它还不是我想要的
我常常在这儿卡住
我还没有深入了解3D APIs
来生成我想要的3D土地模型
我也没有任何3D技巧像设计师那样手工实现
但是我恰好知道
学习编码playground里面有一个创建你的世界页面
我可以用它来继续我的试验
所以我来到学习编码playground
这就是那个页面
这是创建你的世界页面我仅仅是运行它
你可以看到我们正在云中漂浮
我要把以前写的代码粘贴过来
我要输入一些代码先让我把实时视图隐藏起来
这儿有我们的
这儿以前是赋值的语句现在我想把它变成一个3D世界
现在创建你的世界页面为我们提供了一个世界 这正是我们想要的
在我的世界上我们可以放置
地块...
这是位置的x和y坐标
我们不需要考虑值我们需要设置一个高度
我们想要调用bucket函数
在我们的值上
然后是高度
我们想显示一些地块
我很喜欢这个动画我想让它多次运行
如果我运行这个...
哦 我忘了加括号 和Max一样
如果运行它
你可以看到我们在我的世界上堆积地块儿
运行的很快但这并不是我想要的
地面上有一些奇怪的空白
我不想那样
我不是在创造飞行岛那样的魔幻世界
我想让它看起来更像地面
所以让我们停止
起初我不理解为什么产生了这些空白的地面
但是经过思考以后 我知道了
显然是因为高度是0
因为范围是从0到4而不是从1到5
0处没有任何地块
所以有0的地块儿可以设置为水域
如果高度
小于1
在我们的世界上
我想放置为水域
现在若我点击If语句
用我们的结构化编程助手可以加入一个else语句
放入前面的语句
现在我想让它速度加快
我的世界有一个速度指令
我想提高速度
让我们...
好 完美
好 让我们运行一下 看看结果
现在你可以看到 我的世界中有了水
太酷了
我们从API草稿和一个空白的playground开始
然后我们碰到了障碍 我们来到学习代码playground
学习代码playground
对于初学者来说是非常非常有价值的工具
对于熟练的开发者来说它也是强大的平台 它可以帮助他们
浏览APIs实现他们的想法
所以真是太酷了
现在你可以有整套的iOS APIs
其中包括有像CoreBluetooth这样的东西
我要换到另一个iPad上
这有一个playground使用core Bluetooth
可以和外部设备通讯
这是一个SpheroSPRK Plus机器人
我们能做的是我要将它放置在地面上
因为我们需要一些空间
现在我能做的是
当我运行我的代码时
Sphero
会闪烁 并且开始开动
现在它以方形路线移动
从iPad上我使用CoreBluetooth控制第三方机器人
太有趣了
我想让它更有趣一些
我先把它先隐藏起来
我要做的是...
添加一些颜色代码
有结构化编程助手
我们可以拖拽成了一个数组添加一些元素
我要设置这些颜色
你知道这都是一些很熟悉的颜色
但我的手指放不上去
在rest函数中我们要让它重复其中的三种颜色
不要白色
我们把它设置成其它颜色
让我们再看一下
运行代码
现在当我们开动Sphero时颜色在不断变化
停止
确实很有趣
现在让Matt回来做个总结
非常感谢Izzy
真是太酷了
今天我们看到了很多
首先是Max他展示了
如何使用Swift Playgrounds中很棒的触摸控制
用各种方式和Swift代码交互以前我们从来不能做到
Jonathan演示了如何编译吸引人的内容
使用PlaygroundBooks中的新特性
你可以在编辑程序的同时浏览或者关闭程序的执行结果
Izzy给你们展示了你可以不受
学习代码中的内容的限制
你可以使用iOS SDK做实验和物理设备交互
甚至构造你自己的世界
我们认为你能用Swift Playgrounds
做很多很酷的东西
我们都等不及要看你能用它做出些什么
谢谢
更多信息请参阅developer.apple.com
这是演讲408
还有一些相关的演讲可能你会感兴趣查阅一下吧
感谢所有的人请关注WWDC的其它部分