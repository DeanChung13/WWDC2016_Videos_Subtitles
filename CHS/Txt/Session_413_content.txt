Xcode介绍
欢迎大家来到“Xcode介绍”
我是Najla是Xcode团队的成员
与同事Rick Ballard一起
我们将会给大家介绍Xcode的必要组件
Xcode是创建应用的开发平台
可为iOS、watchOStvOS和OS X、macOS创建应用
它为创建完整的应用提供了必要的工具
从设计你应用的用户界面到实现代码
以及测试和调试你的应用
同时为你的应用发布到App Store做些准备工作
今天我们将带你了解Xcode的一些必须组件
通过创建应用
你将会学习如何创建一个新的应用
如何把应用运行在模拟器中
如何去测试和调试你的应用
如何去查看你的更改然后提交到代码管理系统
如何配置你的工程来进行应用的发布
我们的这次演讲大多关于学习如何使用Xcode
也有一小部分关于应用开发的内容
今天我们将要使用到的应用也挺简单
但是千万不要被这个简单的应用误导
这次演讲的内容是面向所有开发者
不论是新的开发者还是有经验的开发者
学习Xcode最有效的方法是使用它
现在我们打开计算机
我们现看到的是Xcode的欢迎窗口
在窗口的右边你能看到已经存在的一些项目
在左边 你可以新建一些项目
让我们新建项目
当你在Xcode里面新建项目的时候
你有一些模板可以进行选择
你可以把模板作为开发你应用的雏形
这些模板对于这四个平台都是可用的
iOS、watchOS、tvOS和macOS
这里我选择最简单的可用模板
iOS平台上单页面应用的模板
这个模板为显示iOS的单视图应用提供了必要的代码
我们工程命名为Hello
如果你有开发者账户你可在这添加账户并且选择你的项目组
组织的名字就是你就职的公司
标识符是
你的组织的名字和你的产品的名字
这个标识符是你应用的唯一标识
当你在Xcode中创建了新应用
你可以选择使用Swift和Objective-C作为开发语言
我们将选择Swift我们的应用是普适的
那就意味着我们的应用可以运行在iPhone和iPad上
当你创建了一个模板
你需要在你的工程中配置许多不同的选项
我们将会选择单元测试和UI选项
让我们把工程保存在文档文件夹下
我将点击“创建Git仓库”
我们的项目一开始就通过版本控制器进行管理
不错 这就是我们的工程
双击顶部两下 会重新调整窗口大小
这就是Xcode的主窗口
在左边的导航区域有你的许多文件和资源
中间是你打开文件的编辑区域
你在导航栏点击文件的时候
右边是实用工具区域
这个区域所显示的信息是
基于你在导航区或者编辑区选择的内容
如果Xcode对你来说比较陌生你可能觉得奇怪
如何把应用运行在移动设备上？
你可以点击运行按钮运行你的应用
在主窗口的顶端
但我们在运行应用前
让我解释一下当你点击运行的时候发生了什么
当你点击了运行 你指定了运行的应用
你要在哪儿运行应用
在你的工程中 你可以有许多应用
甚至相同的应用有不同的配置
规则是如何指定你想运行什么
它里面同样包含你如何运行应用的信息
举例我有iOS应用和Watch应用
在这种情况下我有一个运行iOS应用的规则
和运行我的手表应用的规则
现在呢 在我们的工程中只有一个规则
这个规则就是Hello我们已经选定它
现在 你运行应用到目标平台
你在Xcode中选择的目标平台你有两个选项
你可以在模拟器中运行你的应用
或你可在设备上运行你的应用
模拟器是用来模拟你应用运行的设备
模拟器对快速和迭代开发是有用的
当你想获得你应用的外观及如何运作的反馈时
我们现已选择iPhone SE模拟器
让我们点击运行按钮
我们的应用就运行在iPhone SE的模拟器上
我们的应用已经开始运行了
它在这儿
我说过我们选择的是最简单的可用模板
这儿没有任何东西
让我们添加一些功能来使它变得有趣
我会去点击停止按钮停止这个模拟器
同运行按钮紧挨着的那个按钮
在Xcode中可以给你的应用添加用户界面
可在storyboard中进行添加
现由于我们是通过模板创建我们的工程
我们这有两个storyboard可用
分别是启动屏幕和主屏幕storyboard
启动屏幕storyboard包含启动屏幕的用户界面
它是第一时间出现的屏幕
当你首次启动应用时
main.storyboard包含用户界面
以及你应用的其他界面
让我们打开main.storyboard
storyboard中
有白色背景的画布
画布里面有场景
有相应的视图它代表了你应用中的一个界面
为了便于讲解我尽可能将应用做得简单
我想用代码与界面进行一些交互
我将添加一个按钮 当你点击它时会在文本框中显示Hello
在实用工具的底端是Xcode库
比如文件库和代码片段库
点击从左数第三个按钮会进入到对象库
包含你能添加到场景中的所有UI元素
你可以把它们看视为列表你无法准确知道它的长度
你需更多信息才能知道你看到的是什么
又或者你可以把它们看作是网格
我已知道我想在场景中放置按钮和标题栏
我可以使用滤棒
在实用区域的下方进行按钮的搜索
将它拖到场景中辅助线会帮我们将它居中对齐
这是我早先提到的实用面板
让我们仔细看看在它顶部的检视面板
开始的两个是文件和快速帮助检视器
在我们工程中它们始终是可用的不管你在导航区和编辑区选择了什么
在我的场景中我选择了按钮
其余的检视器包含这个按钮的信息
例如 我可以点击属性检视器
获得按钮的文本属性信息比如大小 字体和颜色
我点击属性检视器旁边的大小检视器
来查看按钮的大小和位置信息
我把按钮的标题改为Say Hello
我可以在属性检视器里做这些
但是更简单点的方法是双击按钮
输入我们想显示的标题
挺好的 这样我们在场景中添加了按钮
回到过滤条界面搜索文本框
我拖拽以便其处于按钮的顶端并且居中
切换到到属性检视器
或者大小检视器来配置它的属性
但是我喜欢这种方式 先不管它了
我们需要注意我们的用户界面没有指定
视图如何根据设备大小进行缩放
现在 我们看这个场景
使用的是iPhone 6s模拟器或者设备的尺寸
但若我点击这个按钮
我们将可以使用其他设备比如iPhone SE设备
我们可以看到文本框和按钮
实际上它们并没有按照我们设想的居中
让我们切换到iPhone 6s
让我们使用自动布局添加一些限制
来为用户界面如何进行缩放设置规则
我们可以使用位于画布底部的自动布局按钮设置规则
对于按钮来说
我想让它在水平和垂直方向上进行居中显示
点击对齐按钮
对按钮进行设置以便它在容器的水平和垂直方向上是居中的
在场景中我们可以看到添加的限定条件
对于文本框来说我也想让它相对于视图是水平对齐的
切回到对齐按钮在容器中检查水平对齐选项
当我们做完上述操作添加的限制变成红色
意味着有错误发生
在文档大纲的顶端
有一个箭头将给我们指示错误告诉我们错的地方
可以看到我们没为文本框设置y的位置
我实际上并不关心这个文本框在y方向上位置
我只想让它位于按钮的顶部
我能做的是点击这个图钉按钮
哎呀 我们没有在场景中选中文本框
一旦你选中了文本框你可以点击图钉按钮
把文本框的底部固定在按钮的顶部
这就是我们添加的限制 它是蓝色的
我将切回到模拟器
来看下是否像我们预想的那样显示了
这就是我们的用户界面看起来相当不错
如果我旋转设备将会发生什么呢？
使用模拟器 通过点击硬件菜单模拟旋转
旋转到左边或者旋转到右边
那就旋转到左边吧 仍然是居中显示的
模拟器的特别之处在于它可以模拟一系列不同的的操作
旋转 摇晃 甚至指定位置
我建议你自己运行下模拟器做些操作
因为当你想做快速测试时用模拟器还是比较方便的
你又不想使用真机进行测试
我们已摆放好用户界面了我们需要添加一些代码
以便点击按钮时文本框会变成say Hello
停止模拟器
谈论一些关于场景和视图控制器的内容
每个在storyboard中的场景都和一些视图控制器类关联
这些类包含一些控制视图的代码
在应用中仅有一个场景
在我们导航栏里仅有一个视图控制类文件
我可以推断这个场景关联这个Swift视图控制类
但是有多个场景在应用中会怎么样呢会有多个视图控制器文件？
我如何知道哪个场景对应哪个视图控制器文件呢？
当你在storyboard中选择一个场景的时候
你可以点击身份鉴别检视器
身份鉴别检视器和属性检视器是紧挨着
它实际上是列出了场景引用的类
现在我们可以确定我们需要把代码放在哪儿
我需要显示storyboard文件和我们的视图控制器文件并排显示
我可以这样做
我可以在主窗口的顶端点击编辑助手
它看起来有点窄 我将留出一点空间来
通过点击这儿的按钮隐藏文档大纲
并且隐藏实用区域
通过点击这个面板
需要注意的是那个条块在我们编辑区的顶部
可以叫它跳转条块它包含了许多有用的信息
关于文件中的函数甚至文件本身
编辑助手的特别之处是
它知道哪个文件
同我在主编辑区打开的文件有关联
会在编辑助手中为我打开相应的文件
例如
如果我们在主编辑区打开用Swift编写的视图控制器
编辑助手会为视图控制器类打开关联的界面文件
另一个编辑助手很酷的功能是
你可以更改实际的文件关联
通过选择位于顶部的跳转条
可以更改为你想关联到的任何文件
例如 你可以更改为它的相邻文件编辑助手会打开继承自基类的所有文件
让我们切回到main.storyboard
通过使用跳转条块的返回箭头
这样我们就看到了视图控制器类和storyboard
我们需要在我们的类中创建按钮和文本框的引用
我可以这样做
选中我想选中的UI元素这样我们就选中它了
按住Control键从场景中拖动控件到我们的类中
我希望控件有一个动作
意味着当我点击这个按钮时会有所响应
给它命名为Say Hello
让我们对文本框做相同的事情
实际上我想让它成为插槽变量
意味着它是我可以操作的引用
让我们给它命名为Hello Label
现在我们就有了元素的引用
我们需要添加一些操作文本框的代码到动作
我认为文本框有一个属性我们可以使用但是我又不是十分的确定
Xcode中使用Option+点击还有Command+点击很便捷
当我们为文本框创建引用的时候
它被声明和实例化为UI label类
我可以按住Option在文本框的类名上点击来获得帮助信息
关于这个类是做什么的以及怎样访问它
按住Command 在UI文本框上点击界面会跳转到它声明的地方
假如我仅仅是想查询文档
我可以跳转到帮助
文档和API参考
并且查找类 搜索UI文本框
会有简短描述 概览还会列举类的所有属性
这里表明文本框有文本属性
我们可以使用这个属性显示Hello
关闭文档切换到视图控制器文件
点击跳转条块上的返回箭头
添加一些代码
我想操作Hello Label我会在这儿键入代码
键入代码Xcode会提供代码自动补全的建议
这是Xcode的代码补全
我可以按Tab键进行自动补全
我可以访问文本属性我可以自动补全它
设置文本的属性为Hello
这里有一些代码
有一些引用
切回到模拟器中看这些代码能否正常工作
应用正在启动
点击按钮 显示发生了变化
非常酷 对不对？
对的
现在你知道如何在Xcode中创建新的工程
如何添加简单的功能如何将应用运行在模拟器中
你将通过已经存在的工程学习如何使用Xcode
那些工程里的东西比我们演示的按钮和文本框更复杂
加快一点速度我和Rick知道基本原理
我们已经实现了一些功能
我将把Rick请上台来
来给大家演示Xcode开发流程中的剩余部分
谢谢你Najla
在过去的一周我们构建了一个小型应用
是一个追踪地震的应用
我们可以看到最近发生地震的地方
我们基本编写完成了当然 我们编写了单元测试
以便我们可以确定代码能正常工作
但我认为我们还有一些问题需要进行修复
让我们看一下并且深入到Xcode的调试器和单元测试中
开始前我需要从代码控制系统中分检出代码
Xcode支持Git和Subversion源代码管理工具
为了检出工程我需点击Xcode的源代码管理菜单
选择检出命令
这是Xcode给出的检出界面我可以输入仓库的路径
我们仓库的路径是example.com/repos
我们的工程叫作Quakenator
我将点击下一步
Xcode让我输入
仓库的授权凭证
额
Xcode会询问我将工程检出到哪儿
放在文档文件夹下就好了
点击下载
Xcode会从代码管理系统中检出代码
我们会用检出的代码做演示
工程完全检出来了
你会注意到代码管理菜单有许多选项
后面我们会使用它们
开始前 我们看一下单元测试
我们可以在左边浏览工程的结构
尝试着手动查找测试文件但是会有更好的途径
在导航区域的顶部有许多不同的导航按钮
这些按钮会用不同的视图显示你工程中的内容
查找面板就是众多视图中的一个
使用它我可以查找工程中文本类的内容
例如 我们知道所有的测试方法都以测试开头
我可以查找以测试开头的内容
点击返回
在这儿Xcode会在工程中找到所有以测试开头的内容
包括测试方法还有些注释和其他的合辑
挺棒的 做一些更智能的事情
如果我想查找我的测试方法我能找到一些定义
像我的测试方法在哪儿定义
再查找以测试开头的内容这儿只找到测试的方法
查找面板是个不错的方法
查找工程里面的内容
我们按特性查找单元测试的内容
Xcode给我们提供了更好的方法那就是测试导航面板
测试导航面板中 Xcode自动列出每一个单元测试和UI测试
性能测试这些内容是Xcode在你的工程中找到的
其中有一些是灰色的比如UI测试
那是因为在当前的规则下这些测试是不会运行的
当我运行UI测试的时候我会使用另外一个规则
剩下的测试内容以黑色显示
那就意味着当我进行测试的时候这些测试都是可以运行的
让我们尽快试一下
在产品菜单下有测试的选项
同下面其它四个选项是一样的
点击运行 应用会在调试器中运行
点击测试 将会运行测试
点击配置 将会在容器中运行应用这样可以测试应用的性能
点击分析运行Xcode静态代码分析
会捕捉到我有可能遗漏的问题
最后存档会以发布的方式构建应用并把应用存档
然后我可以把它发布给测试者或放到App Store里
为未来崩溃日志解析或者符号化做保存
这个菜单选项将会变得可以点击
一旦我选择了可以运行的设备
我将选择一个进行测试当我开始测试的时候
我希望大家注意窗口活动区域的顶部
因为它会告诉你Xcode在做什么
我点击了测试会看到Xcode正在构建应用
然后将会构建测试代码 最后就会运行
看起来我们好像有一个编译错误
当编译错误产生
一个标志会出现在活动区域的右手边
表明那儿有一个问题
Xcode会自动切换到左边的问题导航栏
这种做法 像自动切换到导航
当问题发生时显示问题
像这种行为可在Xcode中进行配置
你可以学着让它按照你想要的方式来工作
你有可能想对各式各样的行为进行配置
你可以在Xcode的行为偏好里进行配置
如果你选择编辑行为Xcode会给展示一个偏好表格
让你对各式各样的行为进行配置
当我们进行构建的时候出了问题我们显示问题面板
当测试生成出了问题比如测试失败
我们显示测试导航面板 诸如此类
你想在Xcode中获得好的体验
想让它按照你的工作流程开始工作
我建议你对Xcode的偏好进行设置
让我们看一下发生了什么编译错误
我在问题面板上点击我们的问题
它将跳转到我们的代码中
引起编译错误的地方
Xcode在错误代码的右边显示发生了什么错误
它看起来像数据源对象
没有一个属性或者方法的名为Assorted Quakes
我知道有AssortedQuakes属性
只是昨天我对那个属性进行了重命名
我猜因为我忘记了在单元测试中对属性重命名
让我们想想如何找出这个方法的新名字
开始对代码进行追踪按住Command键
点击数据源对象
页面将会跳转到变量定义的地方
我们可以看到我将它初始化为QuakeDataSource
我们再一次按住Command键
在QuakeDataSource上进行点击
然后会跳转到QuakeDataSource定义的地方
我将开始滚动文件查找新添加的属性
但是有一个更好的方法
代码编辑顶部的跳转条块显示了每一个方法
Xcode根据文件中符号出现的先后顺序展示
有好几种方法可以达到类似的效果
如果当它弹出时我按下Command键
Xcode会根据字母顺序进行显示
而不是出现的顺序
或者我可以进行输入Xcode会对列表进行过滤
曾被命名Sorted Quakes或许现名依然带有Quankes
我将输入Quakes然后这里会显示属性和方法
包含Quakes字符属性和方法
里面有一orderedQuakes
感觉它应该是我们要找的属性
通过这次查找以后你再查找别的内容时 都会比较容易了
如果我简单输入OQXcode会找到orderedQuakes
因为字母O和Q在属性的名字上依次出现
我将向你展示最后的一些内容
或许你已注意到我有两个标题
这儿的TODO注释提醒我需要添加更多的性能测试
有头部将属性和方法分开
你可以进行配置将指定的注释加入你的源代码中
就像TODO和MARK注释那样有一个标题名字
使得弹出的跳转栏
按照你设定的方式显示使得代码间跳转更容易
一切就绪 让我们查找该属性
我将再次键入OQ并且选择orderedQuakes
我们找到它了
让我们继续进行然后复制方法的名字
使用返回箭头按钮以便跳回我们的测试文件
将新的方法名字粘贴到这里
当我做以上操作时 我希望你注意
位于代码编辑区左侧的错误标记
并且错误在问题导航栏也有显示
粘贴正确的名字到这里然后两个地方的错误标识消失
因为问题导航栏会对你所做的修改进行实时追踪
所以我们可以在你修改代码时看到代码的状态
不用等到构建时 才能知道代码的对错
好了 我们修复了编译错误让我们再一次进行测试
当我做完上述操作Xcode会编译我修改后的代码
Xcode正准备将我们的测试运行在模拟器上
你可以从顶部的活动去观察到
看起来我们的测试在运行
让我们切回测试导航栏来看发生了什么
从这里的微小变化可以看出测试正在运行
看起来像是性能测试
那会持续一会儿
让我们点击停止按钮回头看下
性能测试是有必要的
但是我需要对我的单元测试进行迭代修改
我不想每次都等待性能测试完成
我们需要配置不同的规则
不会每次修改都进行性能测试
为了配置规则
弹出规则菜单选择编辑规则
Xcode会显示出规则编辑列表
你可以看到在左边有一个标签页
对应着五个规则的动作
还有顶部的构建标签
让我们选择哪一个目标将要按照这个规则构建
以便在目标的产品上执行这些操作
就像运行操作我需要选择哪个执行文件去运行
该例中 就是我的应用
我应当传递命令行参数和环境变量
像Xcode功能强大的地址追踪功能
会帮你找出难题的成因
由于这些诊断是在运行时进行的
对于已经发布存档的应用来说没有任何影响
所以你不用担心这些诊断的干扰你将应用发布到App Store
接下来进行测试操作并且你会看到
测试将会根据我配置的规则运行
在我改变规则之前
我要做一些我编辑规则时经常会做的事
拷贝一份规则然后这份拷贝上进行编辑
因为我仍想保留原先的规则
原先的规则可以进行性能测试
因为我真的想跑一下我的性能测试
我只想要一个能运行单元测试的规则
所以做了上面的操作然后选择复制规则按钮
Xcode会让我们对新规则重命名
我们将它命名为QuakenatorNoPerf
现在我们可以进行测试操作了找到我们的性能测试
取消复选框来禁止进行性能测试
在此你其实可以禁止这些测试前提是
有测试失败了而且你没有时间处理
好了 我们完成了新规则的配置工作
在我开始进行测试前
我会给大家展示更实用的东西
那就是如何管理我们的规则
管理规则的按钮在这个表格的底部
按下后Xcode会显示规则的管理界面
在此Xcode显示工程中的所有规则
我要提醒大家需要注意的是
在右边的共享复选框列
如果一个规则是共享的
假设你也将规则提交到了源代码管理系统
当你的工作伙伴使用这个工程的时候他们也会得到相同的规则
你或者你工作伙伴做的任何更改
假设你将这些更改提交到了源代码控制系统
这些更改会和你的工作伙伴共享
这样使得配置特定的规则变得十分容易
对于你想让每个人使用规则和同工作伙伴分享规则来说
如果我的工作伙伴也想只运行单元测试
不运行性能测试
我就可以同他们分享我的新规则
好了 我们已完成这些操作
让我们切回然后再一次运行测试
这是在模拟器中运行单元测试的准备工作
附加到测试 测试正在运行
在左边的测试导航面板上你可以看到
我已经通过了大多数的测试但是我有一个测试失败了
如果我想看看最近的时间点发生了什么
我可以在Xcode的报告导航栏找到这些信息
报告导航栏显示了我进行的每一步操作的日志
日志按原先进行测试的规则进行分组
这儿显示在我进行测试时我执行了自动构建
然后我请求进行测试操作
如果我选择了构建的日志然后调整过滤器显示所有的日志
我看到Xcode执行的每一步命令
构建应用和测试的命令
若选择测试的日志Xcode会显示每个测试和其状态
还可以展开它去查找测试失败的消息
在该实例中我测试中的一个断言失败
因为一个地震的等级超过了限定大小
我把鼠标移到测试中的一个上面我们会看到一个跳转箭头
如果我点击箭头Xcode在右边显示失败的测试代码
你可以看到我在哪里对测试进行了声明
在测试方法代码的左边有一个标识
表明那个就是测试失败的方法
如果我继续向下滚动可以发现导致测试失败的代码
这儿有一个检查测试数据范围的断言
或者地震的大小看起来范围检查失败了
其实这些操作貌似挺简单
应当有一个较大值的时候程序却给出了一个较小的值
因为我对给出的正数值范围进行了检查
在此我应当对测试用例进行修复
再次运行测试看看我们是否修复了它
但是由于我在失败的测试上反复修改有一个更快完成所有的测试的方法
我可以仅仅运行失败的测试
为了那样做我转到测试导航栏并把鼠标移动测试上
当我那样做的时候你看到这个标志变成了一个小播放按钮
该按钮可仅仅运行失败的测试或我只运行这些测试中的一个
或者如果我不想切回测试导航栏
我甚至可以从左边代码编辑区运行测试
只是把鼠标移到测试方法左边的失败标志上
然后播放按钮就会出现
现在我们点击这个按钮
构建我们的测试然后再次运行测试
我们又运行了一次测试然而结果是我们的测试依旧失败
所以一定还有其他问题
我接着向下翻
我看到每一个地震数据
有一个明显的标识形象化标识着地震的量级
对我们测试的地震数据来说
我们只是保证了每一个地震有一个形象化的标识
但是他们之中有一个标识是nil所以就是标识数据丢失了
这不像是我测试代码的问题
可能在新建地震数据对象时出了问题
我将跳转到代码里面仔细看那里发生了什么
我将给大家展示一些在Xcode中浏览代码的方法
但是我将展示给大家的是最实用的导航手势
在Xcode的文件菜单中有一个命令
唔... 快速打开
这是一个键盘的快捷键 你一定要记住
Command+Shift+O你会想一直使用该快捷键的
如果我选择快速打开会在窗口的中央显示一个文本框
我可以在这里进行键入查找所有标识
像方法的名字 在我们的工程中
同样也有Apple的API标识
不管你使用它搜索任何东西都是十分简单的
不论搜索的内容在我们的代码中还是在框架的代码中
这个工具十分好 支持模糊查询
但是我也同样需要准确知道我查询内容的名字
在这个例子中 地震对象在类似于fetchesquakes方法中创建
让我们键入fetchesquakes
你可以看到它查找到了myFetchLatestQuakes方法
即使我没有正确的名字因为它是模糊匹配
这个方法的三个实例在我们的工程中出现过
选中的第一个方法是我创建测试数据的地方
它就是我们需要找的
我点击它然后跳转到它所在的代码
好的 在这个方法里我创建了地震数据对象
我没有看到代码有任何问题
这就需要仔细查看究竟出了什么问题
为了找出问题我要使用Xcode的调试器
不论你在Xcode中运行应用或进行测试Xcode的调试器都可用
你可以使工程停在代码的一行或者中断
通过在代码行上设置断点
我可以通过点击左边代码编辑区的边缘设置断点
然后你就会看到一个断点的标识出现在代码行上
我可以再次点击那个断点使其灰掉
暂时禁用断点如果你想忽略掉断点
或者当我们使用完之后可以将它拖出断点就这样删除了
在这个例子中 我确实需要断点我将再次点击创建断点
再次运行测试
我将给大家展示最后一个快速运行相同测试的方法
在Xcode中有一个叫做再次测试的命令
再次测试命令将会运行我运行过的任何单个测试或测试集
这个命令便于我们重复进行相同的测试
可以在Xcode的产品菜单中使用再次测试命令
在执行操作子菜单下
这儿有许多有用的命令这个是再次测试命令
我们选择它Xcode只会运行这一个测试
在模拟器中附加到测试 开始运行测试
你可以看到Xcode在调试器中停在了那行代码
当调试器停止的时候就会发生一些事情
首先 在底部 调试的条块出现了
一些按钮来允许我们进行调试操作
例如继续 单步调试 步进调试
调试按钮下面是变量区域
在我们当前可见的代码区域显示每一个变量值
这儿我声明了三个不同的地震对象
但是我还没有给一些变量赋值所以显示为空值
在右手边是控制台区域
显示程序打印到标准输出或者标准错误的内容
我过会儿会演示这部分内容
最后 你可能注意到因为Xcode在调试器中停止了
命中了断点
Xcode自动切换到调试面板
这儿Xcode显示了在每一个线程中中断的代码
这个代码现在是自动运行在后台线程的 线程6
所有的堆栈帧中我们能访问到代码的显示为黑色
然而所有堆栈帧包含的系统代码
我们都没有源代码并且无法查看的代码显示为灰色
你有可能注意到这儿有虚线同这些堆栈帧是对齐的
这是因为我真的不需要了解这10帧系统代码
我也没有这些帧的代码
当然 假如我想看到底发生了什么
我可以调整位于调试面板底部的控件进行过滤
一切就绪 让我们单步调试这些代码
调试我们第一次初始化地震对象之处看看发生了什么
我将使用单步调试完成上述操作
当我点击单步调试后Xcode会运行到下一行代码
你将看到第一个地震对象
在变量视图中已经被初始化
我可以点击这里查看这个新建地震对象的所有属性
这里是可见的标识
这是一张图像我可能想仔细观察下
Xcode让我们可以像上面那样快速查看对象
当我快速查看它时Xcode会读取这张图像
加载到程序内存并且显示到这里
这样你就能检查这张图像是怎样的
这个标识明显不是这个程序的因为它是非空的
查看下一个地震对象
为了查看类信息 我将步进调试到创建
地震对象函数里看看里面究竟发生了什么
我使用步进按钮调试进对象的初始化函数
就是我们对地震对象做初始化的方法
我可以对代码做单行调试
这里的switch语句里面选择要使用的量级大小标识符
这里是标识符初始化的地方我感觉这里写的有些不妥
我想IIII不是一个有效的罗马数字
这有可能是问题所在我尝试修改这里的代码
终止程序运行 再次运行测试
Xcode使这变得可能每次重新运行程序的时候不用停止程序
为了达到上述效果我会使用调试器表达式
在控制台区域 我使用PO命令就是把对象打印出来的意思
这条命令支持有效的Swift或者Objective-C表达式
我在这里运行它
我可以拷贝这个图像的初始化函数把它粘贴到控制台区域
我要将控制台区域拉大一点
使用清空按钮清空控制台的已有文本这样我就能了解到做了什么
现在我将点击回车在我的程序中运行这行命令
你可以看到命令返回了空值没有那个名字的图像
点击向上的箭头让执行过的表达式再次显示
试一下IV我想这个罗马数字4应该是对的
我按下回车执行这条语句
你可以看到Xcode返回了一幅图像的实例
看起来这个名字的图像是存在的
到此为止 停止调试器
我将把图像换成IV
使用再次测试命令再次运行测试
Xcode会对刚才代码更改进行构建
上面我们为测试做了准备
切换到测试导航栏看看测试的结果
而且 哦 那看起来我还设置了一个断点
我想运行我们的测试并且不会停止调试器
让我们看一下如何管理我们的断点
Xcode的断点导航面板
显示了我在工程中设置的全部断点 展开这里
我也可以在这里单独禁用他们或者在我用完后 选中然后删除它们
我可以添加一些不同类型的断点在断点导航面板上
像Swift有错误的时候抛出单元测试失败
或者在任何方法名字上标识
如果我发现某个断点是我经常使用的就像测试失败的断点
我可以让那个断点在每个工程中都是可用我需要简单的
选择已经添加的断点 弹出菜单
选择移动断点到用户
移动就是将断点变为用户断点使得断点可在我工作的任何工程上使用
就这样 在这个例子中 我还没准备
删除我全部断点是为了防止程序出现问题
暂时禁用这些断点以便程序能正常运行
我可以暂时禁用这些断点使用调试条块上的断点按钮
我将点击继续按钮完成测试
回到测试导航栏
你可以看到我通过了所有的测试看起来我们成功了
回顾一下我们做了什么
回顾我们的更改切回Xcode的工程导航面板
使用在底部的过滤功能叫做过滤代码控制状态
这个功能会将工程导航面板展示给我
这些文件有特定的代码控制状态比如改动过的
这两个功能让我了解到我做了什么更改
这是很实用的功能如果我有许多的工作集
还有一些编码过程中用到的文件我想在这些文件中快速跳转
如果我修改了这些文件
我可以使用过滤功能限定出我正使用的文件
如果我想查看我对一个文件所做的更改
我可以选择那个文件并且使用Xcode的第三种编辑模式
我已经给大家展示了基本的编辑和编辑助手的用法
Xcode第三种编辑模式是版式编辑它有三个子模式
对比编辑让我们能够比较两个修订版间的差异
或者是你没有提交的变化相对于你最新的提交
职责模式让你可以看到是谁
在你文件的哪个版本对每行代码做的改动
日志模式将展示给你源代码管理器的日志文件
在这个示例中 我使用比较模式
当我选择比较模式Xcode会展示给我文件的两个版本
在左边栏是我本地的文件这里显示的是我已经更改的
右边是我提交到代码管理器的最新版本
这里显示给我的就是不同的部分我已经修改的和我最新提交的
在下面的中间部分显示的一些箭头能实现修改之间跳转
当我们查看变化的时候
Xcode将对每行的更改进行可视化的显示
高亮显示在哪一行进行了更改
如果我想通先前的版本进行对比我可以这样弹出菜单
然后选择哪个版本的文件是我将要进行对比的
或者我可以对比两个版本之间旧版本同每一个其它版本
在左边栏选择不同的版本文件
这些改变应该没有错误
现在我们可以对我们的更改进行提交了
为了提交需要点击Xcode的代码控制菜单
然后选择提交条目
然后会向下弹出Xcode的提交列表
在左边 我能看到我对文件做的所有更改
包括其中的一些设置文件如果我选择一个文件
在提交表单的右侧会显示文件的对比
给我们最后的机会审核我们的更改
在这里我甚至可以丢弃所做的更改
点击选择改变标记然后选择不要提交如果我只想提交我做的部分更改
在这个例子中我想提交全部的更改 给出提交的信息
我将会写修复了测试
当我提交的时候我想立即将我的更改推送给工作伙伴
点击推送的复选框
提交我们的更改Xcode正在提交中
将我们的更改推送给我们的工作伙伴上述操作完成
大家准备好
将你的应用分发给你的测试人员或者App Store
如果你想知道如何去发布
或者假如有些东西我们没有讲到恰巧这些东西是你想了解的
我建议你查阅Xcode的帮助手册
你可以获得帮助手册从帮助菜单下选择Xcode帮助
那里 你可以查询任何你想了解的信息或者浏览其它主题
比如 存档还有输出产品以及常见存档
这里Xcode告诉我们如何为发布的应用创建存档
不错 挺好的我给大家讲述了完整的工作流程
但是还有一些重要的知识在本次演讲结束前我将给大家讲解
那就是如何定制你的源代码和你的工程...
对不起 是如何自定义你的工程并按照我们需要的配置他们
我会带大家了解一些核心的配置概念
我要把Najla请回台上让她来给大家讲解
谢谢你 Rick
现在你知道了在Xcode进行开发的基本流程
当你刚开始使用Xcode的时候上面的内容或许是你需要的
随着你开发的工程越来越复杂
你需要知道如何配置你的工程和设置
让我们快速浏览下Xcode的主要配置概念
以便你能理解你正在使用的是什么
今天有五个概念是我们需要谈论的
Xcode工程和工程包含的目标
构建设置和功能这些可以决定Xcode的行为
工作空间用来组织你的工程
先我们先谈论下工程
工程是你在Xcode中可以组织你代码和资源的文档
你所引用的代码和资源文件存储在磁盘上
目标将这些文件构建到像你应用的产品中
构建设置配置你的目标如何构建你的产品
规则配置Xcode的运行操作
例如运行 使用你的目标
现在 为了找到你工程的设置在导航栏上选择你的工程
在编辑区的顶部选中放大的选项然后选择你的应用
现在 你工程的设置位于两个标签页中间
信息标签页和构建设置标签页
通用设置为于信息标签页中
有一点我需要指出你应用的开发目标
你开发的目标最低系统版本你的应用能运行和支持的系统版本
现在你的应用仅仅支持iOS 10
但若我想让我们的应用支持iOS 9我可以在工程设置中进行修改
让我们将谈论话题转到目标
一个目标包含构建所需的指令
想一个应用或者框架
你的目标生产出的叫做它的产品
你目标构建它产品的一系列步骤就叫做构建的阶段
最后 目标的构建设置是配置如何成产它的产品的
现在 需要注意的是工程和目标都有构建设置
目标沿用工程中的一些数据
但是可以被目标指定的值覆盖
目标构建阶段做的事情
像构建依赖关系在目标中编译资源文件
链接库和框架到目标
你也能增加叫做运行脚本的构建阶段对构建中你想修改的其他方面进行配置
你可以访问你的目标设置
通过在你的导航栏中选择你的工程
选择在编辑区顶部弹出的选项
选择你的目标
现在你目标设置的标签页在许多标签页之间
比如构建设置标签页 功能标签页
和构建阶段标签页
让我们谈论一些构建设置和功能的内容
构建设置包含名字还有一些选项的值
控制构建过程的一些选项
比如 构建设置指定你想基于哪个架构进行构建
你的代码是否被优化给你的产品进行命名
你如何处理警告
构建设置在工程和目标层面上都可访问
在构建设置标签页中
里面的表格包含了所有的名字和需要设置的值
现在 构建设置的值可被构建配置改变
默认情况下工程有一个调试和发布配置
例如 当你为调试进行构建的时候你有可能不想优化你的代码
但是当你构建发布版本的时候你想让系统优化你的代码
除了提供细粒度的构建设置Xcode也提供了功能
可以允许你轻松的打开特定的功能
例如 对iOS
有一些功能是为启用In-APP Purchase和集成Apple Maps提供的
如果你想了解关于功能的更多内容
你可以展看功能的面板
你可以禁用或者启用一些功能
通过使用在编辑器右边的打开或者关闭选项
最后 让我们谈论下工作空间
你有可能发现随着时间推移你更倾向于像集合那样对待一组工程
例如 有使用相同框架的两个工程你想把它们放到一起
在这种情况下
你可以创建Xcode的工作空间来引用你的工程
当你在Xcode中打开工作空间时
它会包含我们引用的全部工程
工作空间使得相关代码的跳转和编辑变得容易
现你了解了Xcode的主要配置概念
有这些知识和额外的Xcode基本开发流程
你就有了制作高质量应用的工具
今天我展示给你们的内容
是通过Xcode构建应用的重要组成部分
你学习了如何创建一个新的应用然后将它运行在模拟器中
如何去测试和调试应用
我们也谈论了Xcode的实用工具
例如Command+Option+单击还有快速打开
我们也展示给你如何在工程中进行查找使用过滤工具和跳转工具
你学习了如何审查和提交更改
还有如何配置你的工程和设置一旦你准备将应用提交到商店
我希望本场演讲之后你能有更好了解到
你利用Xcode能做各式各样的事情
我们看到大家所创建的应用十分开心
好的 如果你想了解本次演讲更多消息
你可以访问developer.apple.com/wwdc16/413
如果你对Xcode的特定部分感兴趣
有一些你可以参加的演讲或者可以在线观看
例如 在周二有“Xcode应用签名”的演讲
当你要提交你的应用到商店时进行签名是很重要的
有一个关于测试和持续集成以及调试技巧的演讲
谢谢大家观看本场演讲希望大家在这次大会中过得开心