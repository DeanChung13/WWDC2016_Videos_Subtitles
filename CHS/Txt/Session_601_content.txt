早上好
欢迎各位出席“用ReplayKit直播”
在这次演讲中我们将告诉你关于
我们加入到这个框架中的所有新特性
我是Ben Harry
Apple游戏技术组的软件工程师
稍后你们会听到Edwin Iskander的演讲
现在我们知道人们喜欢录制他们的游戏
并在社交媒体上分享那些录像
ReplayKit给我们的用户提供这些功能
而只需要你 开发者 做很少量的工作
今天的开始
我会花几分钟
谈谈ReplayKit已提供的功能
ReplayKit提供录制应用的音频和视觉内容的功能
此外你可以启用麦克风录制
通过这样做 你的用户在玩游戏时可以提供声音说明
当用户完成了一个录像
他们可以在游戏中分享录像
通过系统共享表
ReplayKit有一个简单API你今天会看到它
将这些功能加入你的游戏需要少量的代码
以后ReplayKit将产生HD质量的视频
并且对游戏性能的影响很小
并且从设备电池中使用最少的电量
在Apple 用户隐私对我们很重要
所以我们实现了一些隐私保护措施
比如我们在用户开始录制前会显示一个提示
用户可以在录制他们的游戏前给予许可
而且
录制会排除系统UI包括通知
所以
当你在玩游戏时收到文字消息时
这条消息不会被录下来
最后 ReplayKit在iOS 9中可用
这是一个ReplayKit目前的特性的列表
现在我会花一些时间
来列举ReplayKit框架中加入的新特性
首先 我们把ReplayKit支持带到了Apple TV
所以现在你可以录制你的游戏
并且直接分享它从你的tvOS游戏中
下一个我们加入的新特性是直播
现在用户可以广播游戏
实时地发送给第三方广播服务
第三个也是最后一个特性
我们增加了录制FaceTime摄像头的支持
此外 我们增强了麦克风录制API
所以当我进入ReplayKit和Apple TV之前
我会给你一个ReplayKit结构的概览
我想向你们展示你们的应用如何
使用这个框架来和操作系统互动
来创建录像
所以这里我们有你的应用
你的应用通知操作系统
它什么时候想要开始录制
所以ReplayKit提供RPScreenRecorder类
你会告诉这个类开始录制
这时一条消息被发送给重播守护进程
重播守护进程会开始写入你应用的数据
到一个电影文件
当你告诉RPScreenRecorder停止录像
重播守护进程会结束你的电影
现在我们在系统里有一个电影
现在这个电影需要回到你的应用
这样用户可以预览他们刚完成的录制
要这么做
我们提供RPpreviewViewController
你在游戏中使用这个视图控制器
这样用户有一个界面来预览
他们可以编辑和分享刚完成的视频
就像我们刚刚看到的 我们有RPScreenRecorder类
你会用这个类来开始 停止和抛弃录制
你还会用它来检查是否能在这台设备上录像
RPScreenRecorder有一个代理属性
当能否在设备上录像发生改变时会通知你
它也会在因为错误停止录制时通知你
第二个类是RPPreviewController
这个视图控制器出现在你的游戏中
使你的用户能够预览录像
在iOS上编辑和剪接录像
直接从游戏里分享录像
这个类还有委托方法
它们会让你知道什么时候用户完成了
在预览用户界面中完成了
这就是你要使用的
用来在iOS和tvOS上录制和分享内容的结构和类
现在让我来到ReplayKit和Apple TV
我会从一个演示开始
我有一个游戏叫做狐狸
狐狸是为2015年的 WWDC开发的它是用SceneKit开发的
你可能认出它了
因为在我们的开发者网站上它被做为代码的例子
目标是在这关走动
收集这些花像我刚刚得到的这朵
我会走过这一关并收集花
这关有三朵花并且我得到了第一朵
你可以在路上选择性的收集这些珍珠
但是我会把注意力集中在花上我得到了两朵
我知道第三朵花在顶部的中间
在这块石头上
所以在此我要打开
我要打开游戏菜单
我想要录制它 前面有一个障碍
我上周练习了很多
所以我想要把这和我的朋友分享来向他们表明
现在大部分时间我都可以穿过这个障碍
我要开始我的录制
这是我提过的同意提示
我会给许可
所以我现在在录制
请注意在屏幕顶端的录制指示器
这表明录制正在进行
好的 我穿过了火
现在我要做的就是走到终点
来得到最后一朵花
这样我就能结束这关
并且结束录制
就是这些了
我要停止录制
一旦停止了 我可以选择
预览或分享我刚录制的视频所以我要开始预览
所以我们有一个视频播放
我们有一个进度条可以用来向前向后跳
我要开始播放它
请注意录制指示器不会出现在录像中
我等会会向你们展示这是如何完成的
我有一个视频 我对它感到满意
所以想要分享它
我会来到这选择分享
我们会看到一个AirDrop界面
我会拿到我的手机
我会选择我的手机
当我在手机上接受这个文件
文件被传输了
一旦它在我的手机上
我可以预览视频
如果我想我可以编辑和剪接视频
我可把它分享到最喜欢的社交媒体网站
这就是ReplayKit在Apple TV上看起来的样子
我现在想花一点时间
来强调这个演示里的4个主要重点
然后我会向你们展示代码
和那些重点对应的代码
让我开始 我会有游戏中的菜单
在这我可以开始录制
然后我们继续玩游戏屏幕上会有录制指示器
回到游戏菜单来停止录制
当我停止录制时 我有不同的选项
预览或者分享录制的视频
我会浏览它们每一个
并向你们展示相应的代码
让我们从开始录制开始
当我按下开始录制按钮
首先我要获得共享的RPScreeningRecorder实例
我简单地告诉它开始录制
一旦我在录制我们显示指示器视图
像我在视频中提到的
指示器不会包含在录像中
这是因为ReplayKit只会录制应用的主窗口
所以
我会新建一个UI窗口
这个指示器视图
创建这个指示器视图是你的责任
这是因为你可使它和你的游戏样式匹配
一个指示器视图
我会初始化一个指示器视图的实例
并简单地把它做为一个子视图加到我创建的主窗口中
在我上面创建的窗口
现在指示器视图出现在屏幕上
我们知道我们在录制
当我们完成了录制
我们按下停止录制按钮
再一次 我要获得共享的RPScreenRecorder实例
现在注意我们返回预览视图控制器
是我早前提过的RPPreviewController类
我要隐藏我的指示器视图
在这有一个重要的地方是保留一个引用
预览视图控制器的引用
因为我们会用它来显示下一步
用来预览或分享视频
最后我会设置代表
这样我们看到我们有一个预览控制器
但是我们有两个界面一个用来预览 一个用来分享
在Apple TV中我们引入了一个新的模式属性
当我们想要预览时我们简单地把模式设置成预览
然后显示一个视图控制器
类似的 要分享
我们有模式属性
我们要把模式设置成分享
再一次显示视图控制器
现在我们会显示AirDrop界面
在两种情况下 当用户完成了每个界面
我们有委托方法会被调用
预览控制器结束
很重要的一点是它会被调用时你刚好——
你让预览控制器离开
因为你的应用需要负责显示它
最后
当你完成了录制而且我们知道我们不再需要它
一个好的惯例是删除录像
现在ReplayKit会自动删除之前的录像
当新的录像开始时
这是因为一次一个应用只允许一个录像
你也可以明确的删除这个录像
当你知道预览不可用
比如 可能在这关的最后
没有机会显示预览
这样你就可以明确地删除它
通过调用RPScreenRecorder的删除录像方法
在最后这几张幻灯片中
我向你们展示了需要的代码量
来把这些功能加入你的tvOS游戏
我鼓励你们都把ReplayKit添加到你们的tvOS应用中
也添加到iOS应用中如果你们还没有这么做
我们花点时间总结ReplayKit和Apple TV
现在有了ReplayKit和Apple TV
你可以录制应用的音频和视频内容
在Apple TV中麦克风被系统保留了
所以你不能在这个平台上提供语音说明
但是你可以允许用户预览视频
而且直接在游戏中分享视频
如你所见 我们有一个很简单的API
其实这和我们提供给iOS的API是相同的
现在所有提供给Apple TV的这些特性将在tvOS 10中可用
这就是ReplayKit和Apple TV
现在是时间来到我们的第二个新特性
我个人对它感到很兴奋
现在请欢迎Edwin Iskandar上台
好的谢谢大家
嘿你们好吗？
我是Edwin Iskandar软件工程师
在Apple的游戏技术组
和Ben一样我也非常高兴
和你们谈论我们的下一个特性
直播
有了直播
玩家可以广播他们的游戏到第三方服务
直接从他们的iOS或tvOS设备
这很令人兴奋
因为这第一次成为可能
无需额外的硬件
或者第三方SDK
允许用户利用
他们的设备的强大的FaceTime摄像头和麦克风
来提供实时的丰富的说明
最后我们所做的一切都是安全的
保证所有的音频和视频都只有系统
以及广播服务可以访问
那么它是怎么工作的
我们和Flaregames一起实现了广播功能
及他们的旗舰游戏Olympus Rising
它现是app store中一个很棒的游戏
它独特的混合了策略 RPG和动作元素
现在我们有一个游戏作为广播源
我们还需要广播目标
所以我们还和Mob Crush一起工作
它是一个特别针对移动游戏的广播服务
所以现在我们有了一个游戏和一个服务 我们准备好开始了
让我们看看在运行的它们
在Olympus Rising中Flare的开发者们
实现了游戏中的一个按钮来开始广播
要开始广播 用户点击这个按钮
然后显示
他们已经在设备上安装好的广播服务
在这个例子中用户安装了Mob Crush应用
所以它出现在该列表中
在这时用户点击Mob Crush图标
他们接着看到Mob Crush用来设置广播的UI
用户继续添加一个标题给这个广播
一旦完成了
他们简单的按开始广播按钮
会回到游戏并显示一个倒计时
所以用户可以预备
并且最后开始直播
现在他们在直播当用户游玩时
视频和音频数据会流入广播服务
全球观众可以启动Mob Crush应用
从他们的设备并且几乎实时地观看游戏
在Mob Crush应用中
观众还可以在观看的同时讨论游戏
更酷的是广播者甚至可以马上收到通知
当这发生时 当玩他们的游戏时
就像在体育中
看一些直播的事件会有一些很特别的事
现在iOS和tvOS游戏原生有这些功能
我们现在已经看过了整个流程
做为一个游戏开发者
你可能想知道怎么在你的游戏中实现这些？
这是分解了的玩家流程
如你所见 有很多步
初始化广播
选择一个广播服务
设置这个广播
开始和停止广播
标明一个广播正在进行中
上传视频和音频数据到后台服务器
这最初看起来可能让人望而却步
但是对游戏开发者的好消息是
其中的三步被ReplayKit和广播服务处理
所以让我们看看每一步的代码
要用程序初始化一次广播
我们用一个新的类名叫RPBroadcastActivityViewController
且调用它的载入方法来获得它的一个实例
然后我们简单地显示它就像其他UI视图控制器一样
会给用户显示一个广播服务的列表
最终允许用户建立广播
在我们开始做这些前
我们还设置ActivityViewController委托方法
因为我们想要当设置完成时收到通知
在这时 用户可以选择要广播到的服务
建立广播
一旦你完成了设置
活动视图控制器的委托方法就被触发
这个委托方法被另一个新类提供
RPBroadcastController
它允许我们开始广播
但是在我们这么做之前 我们还希望
抛弃ActivityViewController因为是我们显示了它
开始在游戏中显示倒计时
当倒计时结束
我们最终开始广播通过调用开始广播
在新的RPBroadcastController被传入的实例
现在我们在直播了
因为我们在直播
我们需要清楚地向用户指明这点
Olympus Rising在这点上做得很好
通过给广播按钮加动画效果
因为这个游戏有很复杂的操作
他们重用按钮UI来指示正在进行的广播
来最大化可用的屏幕空间
一些需要注意的事是指示器是广播过程中严格要求的
会在应用审核时强制实行
在你把它加入游戏前
所以用程序检查是否在进行广播
简单地查询broadcastController的isBroadcasting属性
你可以使用这个属性的值
来开始或停止你的指示UI动画
要允许用户结束广播Flare的开发者实现了
一个弹出式UI来显示一个包含停止按钮的子菜单
当用户按下停止按钮
我们简单地在控制器上调用结束广播
当广播结束时 我们更新UI
现在我们覆盖了基本的流程
让我们看看更多细节 比如错误处理
因为这个功能有很多部分
有可能事情出错
所以优美的处理它很重要
让我们看看在广播中我们怎么做
要处理错误 简单地在广播控制器中设置代表
一旦设定好 你的代表会有它的didFinishWithError方法
当错误发生时被调用
当这被触发时
你应该让用户知道它并且对UI做任何需要的更新
现在另一个细节要考虑是当用户把应用放入后台
或者应用在广播过程中被打断了
比如说接到来电
应用进入后台
ReplayKit会自动暂停广播
在这个例子中 当应用
被重新激活并回到前台
我们提示用户并询问他们是否想要继续广播
如果用户想要继续
调用继续广播的方法
如果他们不想继续调用结束广播的方法
这样就行了
对这整个流程 游戏开发者需要
和两个类及它们的代表互动
RPBroadcastActivityViewController代表广播服务
允许用户建立一个广播
RPBroadcastController用来开始暂停 继续和结束一个广播
如你所见 把广播添加到你的游戏中不能更容易了
我催促你这么做 因为好处很大
没有更好的方法来传播口碑
增加玩家的参与
甚至围绕你的游戏创建一个社区
所以这些覆盖了游戏的实现
但是关于玩家广播去的那些广播服务呢？
比如Mob Crush？
让我们花点时间简短地谈谈这些服务的职责是什么
对所有在座及在网上观看的开发者们
我想使它很清楚
在下一部分讨论的话题
不是你要负责在你的游戏中实现的
让我们回到那个流程图
我们看到玩家有责任开始一次广播
并控制什么时候开始和结束广播
我们还看到用来选择广播的UI是
ReplayKit的BroadcastActivityViewController负责
这留给我们两个任务
建立广播
上传视频和音频数据给后台服务器
使广播服务能完成它们的步骤
我们引入了一对新的应用扩展
特别针对这个功能
一个UI扩展允许用户建立一个广播
一个非UI扩展为了处理
和上传音频和视频数据
对那些不熟悉扩展的人
它们会嵌入你的母应用并且是一种方法
来扩展你的应用这样你可以和别的应用一起运行
它们在一个来自你的母应用的一个分开的进程中运行
但是可以和你的母应用共享数据
可以很方便地用来共享东西比如授权数据
一件要记住的事
是和应用相比扩展的资源受限
所以避免在它们中进行需要大量资源的任务
我们使得通过Xcode模板来建立这些扩展变得难以置信的容易
这些是iOS和tvOS中新的目标
如果从这些模板中创建扩展将会预先设置好
所以他们会出现在广播活动控制列表中 你看到的那个
让我们看看这两个新扩展
一个广播服务需要实现
从广播UI扩展开始
UI扩展有一些关键职责
它负责授权用户
并且提供注册如果用户还没有注册
理想地 这些都应该在扩展中完成
这样用户体验就没有被打断
但是完全可以接受
和母应用连接
只要用户有办法回到游戏
在注册过程中要求显示给用户
使用这个服务的条款和条件
并且可以接受或拒绝这些条款和条件
我们早前看到
UI扩展负责允许用户
设置他们的广播比如添加标题
它还允许用户
通过社交媒体通知其他人广播将要开始
其最终职责是通知ReplayKit
以及最终这个游戏
广播已经完成设置
现在我们看过了UI扩展让我们转到上传扩展
它负责接收和处理视频和音频数据
并且上传数据给后端服务器
我们知道有很多实现
关于数据处理和上传到直播流
所以我不会进入到
这个会话中的特定实现
反而
如果你是广播服务
请联系我们 这样我们可以直接和你合作
这样我们可以实现一个方案
将最好的体验带给我们的客户
回到我们的流程图
我们看过了广播的建立和上传
我们已经看过了整个广播流程
而且我们清楚地划分了职责给游戏
ReplayKit和广播服务
这就是直播的全部内容
我们真的觉得这是一个改变游戏规则的功能
你的玩家会爱上它
对开发者 这会带来一个新方式
为你的粉丝体验你的游戏不仅仅是玩它们
还可以观看它们
在我们结束前
我想要以我们对API做的一些增强做为结尾
关于iOS上的注释
也就是支持前置摄像头
和新的麦克风功能
首先 我们加入了FaceTime摄像头支持
使你可以方便添加picture in picture
视频注释到你的游戏中
玩家的反应是无价的
永远把这种独特的风味添加到录像和广播中
要在Olympus Rising中启用它
Flare开发者添加了一个按钮
在弹出菜单中切换摄像头
按这个按钮启用摄像头
在左上角显示一个预览
让我们看看他们做到这使用的API
要打开摄像头
我们简单地设置IsCameraEnabled属性为真 在RPScreenRecorder中
这打开摄像头硬件
并弹出一个新的RPScreenRecorder
叫做CameraPreviewView是UIView的一个子类
因为它是UIView
可简单把它做为一个子视图加到游戏视图中
并且可以自由的给它设定位置来避免妨碍游戏
你还可以附加一个调整或识别它
来允许你手动调整它的位置如果你想的话
来看看这的代码
我们设置IsCameraEnabled属性为
真 在录制广播时
然后我们获得一个CameraPreviewView实例
然后设置它的几何来给它定位
然后简单地把它作为子视图添加到你的游戏视图
所以现在我们有了视频注释我们还想要添加音频
麦克风录制被包括在了去年的iOS 9中
但是现在我们要添加在录制时静音的功能
我们知道广播者
总是有一些有趣的事想说但是有时他们要休息一下
Olympus Rising使得这变得简单 通过包括
麦克风切换在他们的弹出菜单中
实现麦克风的切换不能更简单了
已有的IsMicrophoneEnabled属性
RPScreenRecorder中可以被设为真
如果你想要启用麦克风或为假如果你想将它静音
这可以在广播或录制会话中进行
本场演讲到此结束我希望你们喜欢
有了强大的新广播功能和新的对Apple TV的支持
我们等不及去玩
和观看你的游戏直播在iOS和tvOS上
想要了解更多信息请浏览屏幕上的网址
在这周中 确保观看
我们的其他游戏技术演讲
GameplayKit SpriteKit和Game Center中的新特性
好的 我要说的就这么多
谢谢参加这次演讲
希望你们喜欢这周接下来的 WWDC
谢谢